<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.events" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.events</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.events:NetMonitorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetMonitorEvent</apiName><shortdesc class="- topic/shortdesc ">
 在创建 NetStream 对象时，NetMonitor 对象将调度 NetMonitorEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在创建 NetStream 对象时，NetMonitor 对象将调度 NetMonitorEvent 对象。
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.events:NetMonitorEvent:NET_STREAM_CREATE_netStreamCreate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStreamCreate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NetMonitorEvent:NET_STREAM_CREATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NetMonitorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:NetMonitorEvent:NetMonitorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetMonitorEvent</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个 Event 对象，其中包含有关 netStreamCreate 事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型事件：<codeph class="+ topic/ph pr-d/codeph ">NetMonitorEvent.NET_STREAM_CREATE</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">netStream</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStream</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">已创建的新 NetStream 对象。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">netStream</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetMonitorEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个 Event 对象，其中包含有关 netStreamCreate 事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetMonitorEvent/NET_STREAM_CREATE" class="- topic/link "><linktext class="- topic/linktext ">NetMonitorEvent.NET_STREAM_CREATE</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetMonitorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
 	 创建 NetMonitorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 NetMonitorEvent 对象。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 创建 NetMonitorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetMonitorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 NetMonitorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 NetMonitorEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 NetMonitorEvent 对象的所有属性。使用以下格式：
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NetMonitorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> netStream=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetMonitorEvent:NET_STREAM_CREATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NET_STREAM_CREATE</apiName><shortdesc class="- topic/shortdesc ">
	 NetMonitorEvent.NET_STREAM_CREATE 常数定义 netStreamCreate 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">netStreamCreate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">NetMonitorEvent.NET_STREAM_CREATE</codeph> 常数定义 <codeph class="+ topic/ph pr-d/codeph ">netStreamCreate</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">netStreamCreate</codeph> 事件包含下列属性：</p>
	  <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">netStream</codeph></entry><entry class="- topic/entry ">已创建的 NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">开始或结束会话的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NetMonitorEvent:netStream:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">netStream</apiName><shortdesc class="- topic/shortdesc ">
 	 新的 NetStream 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 新的 NetStream 对象。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:TimerEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TimerEvent</apiName><shortdesc class="- topic/shortdesc ">
 每当 Timer 对象达到由 Timer.delay 属性指定的间隔时，Timer 对象即会调度 TimerEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Timer 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 每当 Timer 对象达到由 <codeph class="+ topic/ph pr-d/codeph ">Timer.delay</codeph> 属性指定的间隔时，Timer 对象即会调度 TimerEvent 对象。
 
 </apiDesc><example conref="examples\TimerEventExample.as" class="- topic/example "> 以下示例使用 TimerExample 类来说明如何能将侦听器方法 <codeph class="+ topic/ph pr-d/codeph ">timerHandler()</codeph> 实例化并设置为侦听要调度的新 TimerEvent（在调用 Timer 的 <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> 方法时发生）。  
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Timer" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">timerComplete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Timer/event:timerComplete" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">timer</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Timer/event:timer" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TimerEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关 timer 事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">TimerEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关 <codeph class="+ topic/ph pr-d/codeph ">timer</codeph> 事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 TimerEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 TimerEvent 对象。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 TimerEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 TimerEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 TimerEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 TimerEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[TimerEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateAfterEvent</apiName><shortdesc class="- topic/shortdesc ">
	如果已修改显示列表，则将表示 Flash Player 或 AIR 运行时在此事件处理完成后呈现结果。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	如果已修改显示列表，则将指示<ph class="- topic/ph "> Flash Player 或</ph> AIR 运行时在此事件处理完成后呈现结果。
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as" class="- topic/example "> 下面是 <codeph class="+ topic/ph pr-d/codeph ">TimerEvent.updateAfterEvent()</codeph> 方法的示例。   
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TIMER_COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
    定义 timerComplete 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">timerComplete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">timerComplete</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已完成其请求的 Timer 对象。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Timer/event:timerComplete" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TIMER</apiName><shortdesc class="- topic/shortdesc ">
    定义 timer 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">timer</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">timer</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已达到其间隔的 Timer 对象。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#Timer/event:timer" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.Timer.timer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:IOErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IOErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
当错误导致输入或输出操作失败时调度 IOErrorEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">IOErrorEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
当错误导致输入或输出操作失败时调度 IOErrorEvent 对象。

<p class="- topic/p ">您可以使用 Flash Player 的调试版或 AIR Debug Launcher (ADL) 来检查没有任何侦听器的 error 事件。显示由 IOErrorEvent 构造函数的 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 参数定义的字符串。</p>

</apiDesc><example conref="examples\IOErrorEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">IOErrorEventExample</codeph> 类说明在试图加载不存在的文件时如何调度错误事件对象。该示例执行下列任务：
 <ol class="- topic/ol "><li class="- topic/li ">类构造函数创建 URLLoader 对象的新实例并将其分配给变量 <codeph class="+ topic/ph pr-d/codeph ">loader</codeph>。</li><li class="- topic/li ">URLLoader 实例对 <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> 类型的事件侦听器进行实例化，该侦听器具有关联的订阅者方法 <codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph>，这样可以使用 <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 只输出有关该事件的信息。</li><li class="- topic/li ">接下来，构造函数创建 URLRequest 对象的新实例 <codeph class="+ topic/ph pr-d/codeph ">request</codeph>，传递 <codeph class="+ topic/ph pr-d/codeph ">MissingFile.xml</codeph>，这样便可知道缺少的文件的名称和位置。</li><li class="- topic/li ">然后，<codeph class="+ topic/ph pr-d/codeph ">request</codeph> 变量被传递给 <codeph class="+ topic/ph pr-d/codeph ">loader.load()</codeph>，它将尝试加载缺少的文件。由于缺少文件，事件处理函数将调度 <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> 事件。</li></ol>
 
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>
 <ul class="- topic/ul "><li class="- topic/li ">您需要将“本地播放安全性”设置为“只访问本地文件”来编译 SWF 文件。</li><li class="- topic/li ">确保在与 SWF 文件相同的级别没有名为“MissingFile.xml”的文件。 </li></ul>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#IOErrorEvent/IO_ERROR" class="- topic/link "><linktext class="- topic/linktext ">IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#SecureSocket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SecureSocket.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:IOErrorEvent:STANDARD_ERROR_IO_ERROR_IOErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">IOErrorEvent</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:IOErrorEvent:STANDARD_ERROR_IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:IOErrorEvent:STANDARD_INPUT_IO_ERROR_IOErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">IOErrorEvent</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:IOErrorEvent:STANDARD_INPUT_IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:IOErrorEvent:STANDARD_OUTPUT_IO_ERROR_IOErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">IOErrorEvent</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:IOErrorEvent:STANDARD_OUTPUT_IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">IOErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关 ioError 事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的输入/输出错误事件：<codeph class="+ topic/ph pr-d/codeph ">IOErrorEvent.IO_ERROR</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要显示为错误消息的文本。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">id</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">与特定错误关联的引用编号（仅在 Adobe AIR 中支持）。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">IOErrorEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关 <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> 事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#IOErrorEvent/IO_ERROR" class="- topic/link "><linktext class="- topic/linktext ">IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 IOErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 IOErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 IOErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 IOErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 IOErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 IOErrorEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[IOErrorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> text=<i class="+ topic/ph hi-d/i ">value</i> errorID=<i class="+ topic/ph hi-d/i ">value</i>]</codeph><codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 仅在 Adobe AIR 中可用</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IO_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	定义 ioError 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">ioError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">errorID</codeph></entry><entry class="- topic/entry ">与特定错误关联的引用编号（仅限 AIR）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">发生输入/输出错误的网络对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#SecureSocket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SecureSocket.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue><apiValue id="flash.events:IOErrorEvent:STANDARD_ERROR_IO_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_ERROR_IO_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	 当从 NativeProcess 对象的 standardError 流读取数据发生错误时，调度 standardErrorIoError 事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardErrorIoError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 当从 NativeProcess 对象的 standardError 流读取数据发生错误时，调度 <codeph class="+ topic/ph pr-d/codeph ">standardErrorIoError</codeph> 事件。
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry ">否。没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">errorID</codeph></entry><entry class="- topic/entry ">与特定错误相关联的引用编号。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">出错的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:IOErrorEvent:STANDARD_INPUT_IO_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_INPUT_IO_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	 将数据写入 NativeProcess 对象的 standardInput 发生错误时，调度 standardInputIoError 事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardInputIoError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 将数据写入 NativeProcess 对象的 standardInput 发生错误时，调度 <codeph class="+ topic/ph pr-d/codeph ">standardInputIoError</codeph> 事件。
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry ">否。没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">errorID</codeph></entry><entry class="- topic/entry ">与特定错误相关联的引用编号。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">出错的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:IOErrorEvent:STANDARD_OUTPUT_IO_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_OUTPUT_IO_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	 从 NativeProcess 对象的 standardOutput 流读取数据发生错误时，调度 standardOutputIoError 事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardOutputIoError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 从 NativeProcess 对象的 standardOutput 流读取数据发生错误时，调度 <codeph class="+ topic/ph pr-d/codeph ">standardOutputIoError</codeph> 事件。
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry ">否。没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">errorID</codeph></entry><entry class="- topic/entry ">与特定错误相关联的引用编号。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">出错的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:NetStatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetStatusEvent</apiName><shortdesc class="- topic/shortdesc ">
NetConnection、NetStream 或 SharedObject 对象报告其状态时，将调度 NetStatusEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetStatusEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetConnection、NetStream 或 SharedObject 对象报告其状态时，将调度 NetStatusEvent 对象。只有一种类型的状态事件：<codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.NET_STATUS</codeph>。

</apiDesc><example conref="examples\NetStatusEventExample.as" class="- topic/example "> 以下示例将 Video 对象与 NetConnection 和 NetStream 类一同使用，以加载和播放 FLV 文件。
 <p class="- topic/p ">在此示例中，<codeph class="+ topic/ph pr-d/codeph ">netStatusHandler</codeph> 方法作为 NetStatusEvent 事件 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.netStatus</codeph> 的侦听器进行注册。当确定了 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> 尝试的状态（成功或失败）时，<codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> 事件触发此方法。如果连接 NetConnection 对象的尝试取得成功（也就是说，如果 NetStatusEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">info</codeph> 属性由 <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> 事件调度，并有一个表示成功的 <codeph class="+ topic/ph pr-d/codeph ">code</codeph> 属性），则代码创建 Video 和 NetStream 对象并调用 <codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> 方法。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>为了运行此示例，需要一个名称和位置与传递给 <codeph class="+ topic/ph pr-d/codeph ">videoURL</codeph> 的变量相匹配的 FLV 文件；在本例中，使用 SWF 文件所在目录下的一个名为 Video.flv 的 FLV 文件。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS" class="- topic/link "><linktext class="- topic/linktext ">NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">netStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetStatusEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建一个 Event 对象，其中包含有关 netStatus 事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的状态事件：<codeph class="+ topic/ph pr-d/codeph ">NetStatusEvent.NET_STATUS</codeph>。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">info</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个对象，包含描述其状态的属性。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">info</codeph> 属性访问此对象。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">NetStatusEvent 对象的构造函数。
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建一个 Event 对象，其中包含有关 <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> 事件的信息。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/NET_STATUS" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 NetStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 NetStatusEvent 对象。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 NetStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 NetStatusEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 NetStatusEvent 对象的所有属性。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 NetStatusEvent 对象的所有属性。字符串的格式如下：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NetStatusEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> info=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NET_STATUS</apiName><shortdesc class="- topic/shortdesc ">
    定义 netStatus 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">netStatus</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
    <p class="- topic/p ">此事件具有以下属性：</p>
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">info</codeph></entry><entry class="- topic/entry ">一个对象，具有描述对象的状态或错误条件的属性。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告其状态的 NetConnection 或 NetStream 对象。 </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NetStatusEvent/info" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">info</apiName><shortdesc class="- topic/shortdesc ">
     一个对象，具有描述对象的状态或错误条件的属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     一个对象，具有描述对象的状态或错误条件的属性。
     
     <p class="- topic/p ">该信息对象可能具有 <codeph class="+ topic/ph pr-d/codeph ">code</codeph> 属性（它包含表示特定事件的字符串），或者具有 <codeph class="+ topic/ph pr-d/codeph ">level</codeph> 属性（它包含 <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph> 字符串）。 </p>
     
     <p class="- topic/p ">该信息对象还可能具有其他属性。由于一些实现和服务器可能发送不同的对象，<codeph class="+ topic/ph pr-d/codeph ">code</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">level</codeph> 属性可能不起作用。 </p>
     
     <p class="- topic/p ">P2P 连接使用表示消息所属 <codeph class="+ topic/ph pr-d/codeph ">NetStream</codeph> 的信息对象中的 <codeph class="+ topic/ph pr-d/codeph ">stream</codeph> 参数，将消息发送给 <codeph class="+ topic/ph pr-d/codeph ">NetConnection</codeph>。</p>
     
     <p class="- topic/p ">例如，如果试图访问 <codeph class="+ topic/ph pr-d/codeph ">code</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">level</codeph> 属性，Flex Data Services 将发送引起强制错误的 Message 对象。</p>
     
     <p class="- topic/p ">下表说明了 <codeph class="+ topic/ph pr-d/codeph ">code</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">level</codeph> 属性可能的字符串值。</p>
 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">代码属性</entry><entry class="- topic/entry ">级别属性</entry><entry class="- topic/entry ">意义</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Call.BadVersion"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">以不能识别的格式编码的数据包。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Call.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> 方法无法调用服务器端的方法或命令。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Call.Prohibited"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">Action Message Format (AMF) 操作因安全原因而被阻止。AMF URL 与文件（其中包含调用 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> 方法的代码）不在同一个域中，或者 AMF 服务器没有信任文件（其中包含调用 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.call()</codeph> 方法的代码）所在域的策略文件。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.AppShutdown"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">正在关闭服务器端应用程序。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Closed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">成功关闭连接。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">连接尝试失败。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.IdleTimeout"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">Flash Media Server 断开了与客户端的连接，因为客户端的闲置时间已超过了 <codeph class="+ topic/ph pr-d/codeph ">&lt;MaxIdleTime></codeph> 的配置值。 在 Flash Media Server 上，<codeph class="+ topic/ph pr-d/codeph ">&lt;AutoCloseIdleClients></codeph> 默认情况下处于禁用状态。 启用时，默认超时值为 3600 秒（1 小时）。有关详细信息，请参阅 <xref href="http://help.adobe.com/en_US/flashmediaserver/configadmin/WS5b3ccc516d4fbf351e63e3d119f2925e64-7ff0.html#WS5b3ccc516d4fbf351e63e3d119f2925e64-7fe9" scope="external" class="- topic/xref ">关闭闲置连接</xref>。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.InvalidApp"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">对 <codeph class="+ topic/ph pr-d/codeph ">NetConnection.connect()</codeph> 的调用中指定的应用程序名称无效。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.NetworkChange"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry "><p class="- topic/p ">Flash Player 检测到网络更改，例如，断开的无线连接、成功的无线连接或者网络电缆缺失。</p>
     <p class="- topic/p ">使用此事件检查网络接口更改。不要使用此事件实现 NetConnection 重新连接逻辑。使用 <codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Closed"</codeph> 来实现 NetConnection 重新连接逻辑。</p></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Rejected"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">连接尝试没有访问应用程序的权限。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetConnection.Connect.Success"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">连接尝试成功。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Connect_Failed" name="code_NetGroup_Connect_Failed" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Connect.Failed"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">NetGroup 连接尝试失败。<codeph class="+ topic/ph pr-d/codeph ">info.group</codeph> 属性表示哪些 NetGroup 已失败。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Connect_Rejected" name="code_NetGroup_Connect_Rejected" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Connect.Rejected"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">NetGroup 没有使用函数的权限。<codeph class="+ topic/ph pr-d/codeph ">info.group</codeph> 属性表示哪些 NetGroup 被拒绝。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref name="code_NetGroup_Connect_Success" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Connect.Succcess"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">NetGroup 已构建成功并有权使用函数。<codeph class="+ topic/ph pr-d/codeph ">info.group</codeph> 属性表示哪些 NetGroup 已成功。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_LocalCoverage_Notify" name="code_NetGroup_LocalCoverage_Notify" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.LocalCoverage.Notify"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当此节点负责的组地址空间的一部分发生更改时发送。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_MulticastStream_PublishNotify" name="code_NetGroup_MulticastStream_PublishNotify" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.MulticastStream.PublishNotify"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当在 NetGroup 的组中检测到新命名的流时发送。<codeph class="+ topic/ph pr-d/codeph ">info.name:String</codeph> 属性是检测到的流的名称。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_MulticastStream_UnpublishNotify" name="code_NetGroup_MulticastStream_UnpublishNotify" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.MulticastStream.UnpublishNotify"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当命名的流在此组中不再可用时发送。<codeph class="+ topic/ph pr-d/codeph ">info.name:String</codeph> 属性是已消失的流的名称。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Neighbor_Connect" name="code_NetGroup_Neighbor_Connect" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Neighbor.Connect"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当邻域连接到此节点时发送。<codeph class="+ topic/ph pr-d/codeph ">info.neighbor:String</codeph> 属性是邻域的组地址。<codeph class="+ topic/ph pr-d/codeph ">info.peerID:String</codeph> 属性是邻域的对等 ID。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Neighbor_Disconnect" name="code_NetGroup_Neighbor_Disconnect" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Neighbor.Disconnect"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当邻域与此节点断开连接时发送。<codeph class="+ topic/ph pr-d/codeph ">info.neighbor:String</codeph> 属性是邻域的组地址。<codeph class="+ topic/ph pr-d/codeph ">info.peerID:String</codeph> 属性是邻域的对等 ID。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Posting_Notify" name="code_NetGroup_Posting_Notify" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Posting.Notify"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当收到新的 Group Posting 时发送。<codeph class="+ topic/ph pr-d/codeph ">info.message:Object</codeph> 属性是消息。<codeph class="+ topic/ph pr-d/codeph ">info.messageID:String</codeph> 属性是消息的 messageID。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Replication_Fetch_Failed" name="code_NetGroup_Replication_Fetch_Failed" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Replication.Fetch.Failed"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当提取对象请求（之前已使用 NetGroup.Replication.Fetch.SendNotify 进行通知）失败或被拒绝时发送。如果仍需要此对象，则将重新尝试提取对象。<codeph class="+ topic/ph pr-d/codeph ">info.index:Number</codeph> 属性是已请求的对象的索引。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Replication_Fetch_Result" name="code_NetGroup_Replication_Fetch_Result" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Replication.Fetch.Result"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当邻域满足了提取请求时发送。<codeph class="+ topic/ph pr-d/codeph ">info.index:Number</codeph> 属性是此结果的对象索引。<codeph class="+ topic/ph pr-d/codeph ">info.object:Object</codeph> 属性是此对象的值。此索引将自动从 Want 集中删除。如果此对象无效，可使用 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.addWantObjects()</codeph> 将此索引重新添加到 Want 集。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Replication_Fetch_SendNotify" name="code_NetGroup_Replication_Fetch_SendNotify" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Replication.Fetch.SendNotify"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当 Object Replication 系统即将向邻域发送对象请求时发送。<codeph class="+ topic/ph pr-d/codeph ">info.index:Number</codeph> 属性是请求的对象的索引。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetGroup_Replication_Request" name="code_NetGroup_Replication_Request" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.Replication.Request"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">当邻域已请求此节点已使用 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.addHaveObjects()</codeph> 进行通知的对象时发送。最终必须使用 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.writeRequestedObject()</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.denyRequestedObject()</codeph> 应答此请求<b class="+ topic/ph hi-d/b "/>。请注意答复可能会不同。<codeph class="+ topic/ph pr-d/codeph ">info.index:Number</codeph> 属性是已请求的对象的索引。<codeph class="+ topic/ph pr-d/codeph ">info.requestID:int</codeph> 属性是此请求的 ID，由 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.writeRequestedObject()</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.denyRequestedObject()</codeph> 使用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref name="code_NetGroup_SendTo_Notify" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetGroup.SendTo.Notify"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">收到定向到此节点的消息时发送。<codeph class="+ topic/ph pr-d/codeph ">info.message:Object</codeph> 属性是消息。<codeph class="+ topic/ph pr-d/codeph ">info.from:String</codeph> 属性是发送此消息的 groupAddress。如果由此节点消息发送，则 <codeph class="+ topic/ph pr-d/codeph ">info.fromLocal:Boolean</codeph> 属性为 <codeph class="+ topic/ph pr-d/codeph ">TRUE</codeph>（这意味着本地节点是距离目标组地址最近的节点）；如果由其他节点发送消息，则为 <codeph class="+ topic/ph pr-d/codeph ">FALSE</codeph>。在 <codeph class="+ topic/ph pr-d/codeph ">info.fromLocal</codeph> 为 <codeph class="+ topic/ph pr-d/codeph ">FALSE</codeph> 的情况下，若要实现循环路由，则必须使用 <codeph class="+ topic/ph pr-d/codeph ">NetGroup.sendToNearest()</codeph> 重新发送消息。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Buffer.Empty"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">Flash Player 接收数据的速度不足以填充缓冲区。数据流在缓冲区重新填充（此时发送 <codeph class="+ topic/ph pr-d/codeph ">NetStream.Buffer.Full</codeph> 消息，流开始再次播放流）前处于中断状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Buffer.Flush"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">数据已完成流式处理，剩余缓冲区被清空。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Buffer.Full"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">缓冲区已满，流开始播放。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Connect.Closed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">成功关闭 P2P 连接。<codeph class="+ topic/ph pr-d/codeph ">info.stream</codeph> 属性表示已关闭的流。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Connect.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">P2P 连接尝试失败。<codeph class="+ topic/ph pr-d/codeph ">info.stream</codeph> 属性表示已失败的流。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetStream_Connect_Rejected" name="code_NetStream_Connect_Rejected" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Connect.Rejected"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">P2P 连接尝试没有访问另一个对等方的权限。<codeph class="+ topic/ph pr-d/codeph ">info.stream</codeph> 属性表示被拒绝的流。</entry></row><row class="- topic/row "><entry class="- topic/entry "><xref id="code_NetStream_Connect_Success" name="code_NetStream_Connect_Success" class="- topic/xref "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Connect.Success"</codeph></xref></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">P2P 连接尝试成功。<codeph class="+ topic/ph pr-d/codeph ">info.stream</codeph> 属性表示已成功的流。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.DRM.UpdateNeeded"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">NetStream 对象尝试播放受保护的内容，但是所需的 Flash Access 模块不存在、有效内容策略不允许，或者与当前播放器不兼容。要更新模块或播放器，请使用 flash.system.SystemUpdater 的 <codeph class="+ topic/ph pr-d/codeph ">update()</codeph> 方法。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">(Flash Media Server) 发生了错误，其他事件代码中没有列出此错误的原因。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.MulticastStream.Reset"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">多播订阅已将焦点更改为同一组中使用同一名称发布的其他流。多播流参数的局部替换缺失。请重新应用局部替换，否则会使用新流的默认参数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Pause.Notify"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">流已暂停。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">出于此表中列出的原因之外的某一原因（例如订阅者没有读取权限），播放发生了错误。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">“NetStream.Play.FileStructureInvalid”</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">（AIR 和 Flash Player 9.0.115.0）应用程序检测到无效的文件结构，并且不会尝试播放此类型的文件。      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.InsufficientBW"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"warning"</codeph></entry><entry class="- topic/entry ">(Flash Media Server) 客户端没有足够的带宽，无法以正常速度播放数据。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">“NetStream.Play.NoSupportedTrackFound”</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">(AIR 和 Flash Player 9.0.115.0) 应用程序未检测到任何受支持的轨道（视频、音频或数据），并且不会尝试播放此文件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.PublishNotify"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">到流的初始发布被发送到所有的订阅者。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.Reset"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">由播放列表重置导致。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.Start"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">播放已开始。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.Stop"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">播放已结束。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.StreamNotFound"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">无法找到传递到 <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> 方法的文件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.Transition"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">(Flash Media Server 3.5) 服务器收到因位速率流切换而需要过渡到其他流的命令。此代码表示用于启动流切换的 <codeph class="+ topic/ph pr-d/codeph ">NetStream.play2()</codeph> 调用的成功状态事件。如果切换失败，则服务器将改为发送 <codeph class="+ topic/ph pr-d/codeph ">NetStream.Play.Failed</codeph> 事件。当发生流切换时，将调度带有代码“NetStream.Play.TransitionComplete”的 <codeph class="+ topic/ph pr-d/codeph ">onPlayStatus</codeph> 事件。用于 Flash Player 10 及更高版本。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Play.UnpublishNotify"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">从流取消的发布被发送到所有的订阅者。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Publish.BadName"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">试图发布已经被他人发布的流。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Publish.Idle"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">流发布者空闲而没有在传输数据。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Publish.Start"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">已经成功发布。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Record.AlreadyExists"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">正在记录的流映射到已经记录其他流的文件。由于错误配置了虚拟目录，会发生这种情况。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Record.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">尝试录制流失败。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Record.NoAccess"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">试图录制仍处于播放状态的流或客户端没有访问权限的流。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Record.Start"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">录制已开始。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Record.Stop"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">录制已停止。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Seek.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">搜索失败，如果流处于不可搜索状态，则会发生搜索失败。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Seek.InvalidTime"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">对于按渐进方式下载的视频，用户已尝试跳过到目前为止已下载的视频数据的结尾或跳过视频的结尾（当整个文件已下载后）进行搜寻或播放。事件对象的 <codeph class="+ topic/ph pr-d/codeph ">info.details</codeph> 属性包含一个时间代码，该代码表示用户可以搜索的最后一个有效位置。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Seek.Notify"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry "><p class="- topic/p ">搜寻操作完成。 </p>
<p class="- topic/p ">当对 AS3 NetStream 数据生成模式中的流调用 <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> 时发送。将扩展 Info 对象以包括 <codeph class="+ topic/ph pr-d/codeph ">info.seekPoint</codeph>，此值与传递到 <codeph class="+ topic/ph pr-d/codeph ">NetStream.seek()</codeph> 的值相同。</p></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Step.Notify"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">步骤操作完成。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Unpause.Notify"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">流已恢复。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NetStream.Unpublish.Success"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">已成功执行取消发布操作。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"SharedObject.BadPersistence"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">使用永久性标志对共享对象进行了请求，但请求无法被批准，因为已经使用其他标记创建了该对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"SharedObject.Flush.Failed"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">“待定”状态已解析，但 <codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> 失败。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"SharedObject.Flush.Success"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"status"</codeph></entry><entry class="- topic/entry ">“待定”状态已解析并且 <codeph class="+ topic/ph pr-d/codeph ">SharedObject.flush()</codeph> 调用成功。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"SharedObject.UriMismatch"</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"error"</codeph></entry><entry class="- topic/entry ">试图连接到拥有与共享对象不同的 URI (URL) 的 NetConnection 对象。</entry></row></tbody></tgroup></adobetable>
    <p class="- topic/p ">如果您不断地看到有关缓冲区的错误，则请尝试使用 <codeph class="+ topic/ph pr-d/codeph ">NetStream.bufferTime</codeph> 属性更改缓冲区。</p>

    
    </apiDesc><example conref="examples\NetStatusEvent_invalidseek.as" class="- topic/example "> 以下示例显示了用于测试 <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Seek.InvalidTime"</codeph> 错误的事件处理函数。当用户尝试在下载流的结尾之外搜寻时，会发生 <codeph class="+ topic/ph pr-d/codeph ">"NetStream.Seek.InvalidTime"</codeph> 错误。本示例用于测试该事件对象的 <codeph class="+ topic/ph pr-d/codeph ">info.code</codeph> 属性值。如果发生错误，<codeph class="+ topic/ph pr-d/codeph ">eventObj.info.details</codeph> 属性将分配给变量以用作流的 <codeph class="+ topic/ph pr-d/codeph ">seek()</codeph> 方法的参数。<codeph class="+ topic/ph pr-d/codeph ">eventObj.info.details</codeph> 包含了可用于处理错误的最后一个有效位置。因此，用户会进入下载流结尾处的有效位置。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
function videoStatus(eventObj:NetStatusEvent):Void
{
    switch(eventObj.info.code)
    {
        case "NetStream.Seek.InvalidTime":
        {
            var validSeekTime:Number = eventObj.info.details;
            nStream.seek(validSeekTime);
            break;
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection 类</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream 类</linktext></link><link href="flash.net.xml#NetGroup" class="- topic/link "><linktext class="- topic/linktext ">NetGroup 类</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:UncaughtErrorEvents" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">UncaughtErrorEvents</apiName><shortdesc class="- topic/shortdesc ">
     UncaughtErrorEvents 类提供了一种接收未被捕获的错误事件的方法。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     UncaughtErrorEvents 类提供了一种接收未被捕获的错误事件的方法。如果发生运行时错误，且未在代码中检测到该错误并对其进行处理，则此类的实例调度 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件。
	 
	 <p class="- topic/p ">使用下列属性访问 UncaughtErrorEvents 实例：</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.uncaughtErrorEvents</codeph>：检测同一 SWF 中定义的代码中的未被捕获的错误。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Loader.uncaughtErrorEvents</codeph>：检测 Loader 对象加载的 SWF 中定义的代码中的未被捕获的错误。</li></ul>
	 
	 <p class="- topic/p ">要直接捕获错误并防止发生未被捕获的错误事件，请执行以下操作：</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">使用 <codeph class="+ topic/ph pr-d/codeph "><xref href="../../statements.html#try..catch..finally" class="- topic/xref ">try..catch</xref></codeph> 块来隔离可能会引发同步错误的代码</li><li class="- topic/li ">当执行在发生错误时调度某事件的操作时，为该错误事件注册一个侦听器</li></ul>
	 
	 <p class="- topic/p ">如果 Loader 对象加载的内容是 AVM1 (ActionScript 2) SWF 文件，则 AVM1 SWF 文件中未被捕获的错误不会导致出现 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件。此外，在 HTMLLoader 对象（包括 Flex HTML 控件）中加载的 HTML 内容中的 JavaScript 错误不会导致出现 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件。</p>
	 
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/uncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">LoaderInfo.uncaughtErrorEvents</linktext></link><link href="flash.display.xml#Loader/uncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">Loader.uncaughtErrorEvents</linktext></link><link href="flash.events.xml#UncaughtErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">UncaughtErrorEvent</linktext></link></related-links><adobeApiEvent id="flash.events:UncaughtErrorEvents_flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR_uncaughtError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uncaughtError</apiName><shortdesc class="- topic/shortdesc ">
     当发生错误且开发人员代码未检测到该错误并对其进行处理时调度。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.UncaughtErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     当发生错误且开发人员代码未检测到该错误并对其进行处理时调度。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:UncaughtErrorEvents:UncaughtErrorEvents" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">UncaughtErrorEvents</apiName><shortdesc class="- topic/shortdesc ">
		 创建 UncaughtErrorEvents 实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建 UncaughtErrorEvents 实例。开发人员代码不应直接创建 UncaughtErrorEvents 实例。要访问 UncaughtErrorEvents 对象，请使用下列属性之一：
		 
		 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.uncaughtErrorEvents</codeph>：检测同一 SWF 中定义的代码中的未被捕获的错误。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Loader.uncaughtErrorEvents</codeph>：检测 Loader 对象加载的 SWF 中定义的代码中的未被捕获的错误。</li></ul>
		 
		 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/uncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">LoaderInfo.uncaughtErrorEvents</linktext></link><link href="flash.display.xml#Loader/uncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">Loader.uncaughtErrorEvents</linktext></link></related-links></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.events:MouseEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">MouseEvent</apiName><shortdesc class="- topic/shortdesc ">
 每次发生鼠标事件时，都会将 MouseEvent 对象调度到事件流中。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Mouse 事件的事件对象。
  
  </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 每次发生鼠标事件时，都会将 MouseEvent 对象调度到事件流中。鼠标事件通常由使用指针的用户输入设备（如鼠标或轨迹球）生成。 
 
 <p class="- topic/p ">当包含嵌套节点时，鼠标事件指向在显示列表中可见的最深的可能嵌套节点。此节点称为<i class="+ topic/ph hi-d/i ">目标节点</i>。要让目标节点的始祖接收鼠标事件的通知，请使用始祖节点上其 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 参数设置为您要检测的特定鼠标事件的 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.addEventListener()</codeph>。</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">MouseEventExample</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">ChildSprite</codeph> 类来说明如何使用简单图像调度鼠标事件。本示例将执行以下任务：
 <ol class="- topic/ol "><li class="- topic/li ">本示例声明了有关大小（100 x 100 像素）和背景颜色（橙色）的属性，以便在稍后绘制正方形时使用。</li><li class="- topic/li ">构造函数创建新的 ChildSprite 对象 <codeph class="+ topic/ph pr-d/codeph ">child</codeph>。其构造函数首先通过调用其 <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> 方法在坐标 (0,0) 处绘制一个 100 x 100 像素的橙色正方形，然后添加七个事件侦听器/订阅者。
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">click</codeph> / <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>：当用户用鼠标左键在正方形上单击时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">doubleClick</codeph> / <codeph class="+ topic/ph pr-d/codeph ">doubleClickHandler()</codeph>：当用户在正方形上双击鼠标左键时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseDown</codeph> / <codeph class="+ topic/ph pr-d/codeph ">mouseDownHandler()</codeph>：当单击 ChildSprite 对象（橙色正方形）时，会在屏幕上输出 <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 消息，然后调用 <codeph class="+ topic/ph pr-d/codeph ">ChildSprite.draw()</codeph>，这样就会在 <codeph class="+ topic/ph pr-d/codeph ">mouseOverHandler()</codeph> 中绘制一个代替浅蓝色正方形的深黄色正方形。<codeph class="+ topic/ph pr-d/codeph ">mouseDownHandler()</codeph> 方法还添加一个 <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph> 事件侦听器和 <codeph class="+ topic/ph pr-d/codeph ">mouseMoveHandler()</codeph> 订阅者（如下所述），以处理鼠标的移动。然后调用 <codeph class="+ topic/ph pr-d/codeph ">startDrag()</codeph> 方法，此方法允许拖动 Sprite 对象。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseOut</codeph> / <codeph class="+ topic/ph pr-d/codeph ">mouseOutHandler()</codeph>：每次指针离开正方形区域时调度。调用 <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> 方法以将正方形恢复为其正常大小和颜色。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseOver</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseOverHandler()</codeph>：当鼠标指针位于正方形上方时调度。此方法可以重绘正方形，以使正方形更大并且其背景颜色为深黄色。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseUp</codeph> / <codeph class="+ topic/ph pr-d/codeph ">mouseUpHandler()</codeph>：当用户释放鼠标按键时，将删除 <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph> 事件侦听器并调用 <codeph class="+ topic/ph pr-d/codeph ">stopDrag</codeph>，这样就会冻结当前位置的正方形。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseMoveHandler()</codeph>：作为 <codeph class="+ topic/ph pr-d/codeph ">mouseDownHandler()</codeph> 函数的一部分进行调用，在用户按住鼠标左键并拖动正方形时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseWheel</codeph> / <codeph class="+ topic/ph pr-d/codeph ">mouseWheelHandler()</codeph>：当用户在正方形上方滚动鼠标滚轮时调度。</li></ul></li><li class="- topic/li ">然后 ChildSprite 实例 <codeph class="+ topic/ph pr-d/codeph ">child</codeph> 通过 <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph>（立即绘制橙色正方形）添加到显示列表中。</li></ol> 
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b></p>
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">MouseEventExample</codeph> 类应为文档根。</li><li class="- topic/li ">前面列出的某些事件方法声明了局部变量 <codeph class="+ topic/ph pr-d/codeph ">sprite</codeph>，它用于 <codeph class="+ topic/ph pr-d/codeph ">event.target</codeph> 到类型 Sprite 的强制转换。</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">click</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:click" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">contextMenu</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">doubleClick</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:doubleClick" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">middleClick</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:middleClick" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">middleMouseDown</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:middleMouseDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">middleMouseUp</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:middleMouseUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseDown</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseMove</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as" class="- topic/example "> 下面的示例是一个简单的绘图程序。用户可以在主 Sprite 对象上或在较小的矩形 Sprite 对象上进行绘制。 
   
 <p class="- topic/p ">在构造函数中, 创建了一个矩形 <codeph class="+ topic/ph pr-d/codeph ">innerRect</codeph> Sprite 对象并将线条样式设置为绿色。用于在 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent_MOUSE_MOVEExample</codeph> Sprite 容器上进行绘制的线条样式设置为红色。为应用程序的主 Sprite 对象和 <codeph class="+ topic/ph pr-d/codeph ">innerRect</codeph> Sprite 对象添加侦听 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_UP</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_DOWN</codeph> 事件的独立事件侦听器。在这两种情况下，鼠标按下事件侦听器方法将当前绘图位置移动到鼠标指针的位置并为 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_MOVE</codeph> 事件添加一个侦听器。移动鼠标指针时，调用的事件侦听器方法将跟随指针并使用 <codeph class="+ topic/ph pr-d/codeph ">graphics.LineTo()</codeph> 方法绘制一条直线。（<b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">innerRect</codeph> Sprite 对象将会遮住矩形后面绘制的主 Sprite 对象的红色直线。）在发生 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_UP</codeph> 事件时，将删除 <codeph class="+ topic/ph pr-d/codeph ">MOUSE_MOVE</codeph> 事件的侦听器并停止绘图。</p>     
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseMove" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseOut</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseOver</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseUp</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseWheel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseWheel" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightClick</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rightClick" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">RightMouseDown</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rightMouseDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightMouseUp</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rightMouseUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollOut</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rollOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollOver</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rollOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">MouseEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建一个 Event 对象，其中包含有关鼠标事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.CLICK</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.DOUBLE_CLICK</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_DOWN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_MOVE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_OUT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_OVER</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_UP</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MIDDLE_CLICK</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MIDDLE_MOUSE_DOWN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MIDDLE_MOUSE_UP</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.RIGHT_CLICK</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.RIGHT_MOUSE_DOWN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.RIGHT_MOUSE_UP</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_WHEEL</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.ROLL_OUT</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.ROLL_OVER</codeph>。 
	 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的水平坐标。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的垂直坐标。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">relatedObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">受事件影响的补充 InteractiveObject 实例。例如，发生 <codeph class="+ topic/ph pr-d/codeph ">mouseOut</codeph> 事件时，<codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 表示指针设备当前所指向的显示列表对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 或 Linux 中，表示是否已激活 Ctrl 键。在 Mac 中，表示是否已激活 Ctrl 键或 Command 键。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 键（仅限 Windows 或 Linux）。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 键。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">buttonDown</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否按下了鼠标主按键。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">delta</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示用户将鼠标滚轮每滚动一个单位应滚动多少行。正 delta 值表示向上滚动；负值表示向下滚动。通常所设的值为 1 到 3；值越大，滚动得越快。此参数仅用于 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseWheel</codeph> 事件。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Command 键是否已激活（仅限 Mac）。此参数仅用于 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.click</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleClick</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightClick</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseUp</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.doubleClick</codeph> 事件。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Control 或 Ctrl 键是否已激活。此参数仅用于 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.click</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleClick</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightClick</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseUp</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.doubleClick</codeph> 事件。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">clickCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示鼠标事件是否为多击序列的一部分。对于除 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseDown</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseUp</codeph> 以外的所有鼠标事件，此参数将为零。使用 <codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph> 参数可以侦听单击、双击或任何多击序列。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">MouseEvent 对象的构造函数。
      
      </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建一个 Event 对象，其中包含有关鼠标事件的信息。将 Event 对象作为参数传递给事件侦听器。
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 MouseEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新的 MouseEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 MouseEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 MouseEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 MouseEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 MouseEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[MouseEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... delta=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateAfterEvent</apiName><shortdesc class="- topic/shortdesc ">
	如果已修改显示列表，则将表示 Flash Player 或 Adobe AIR 在此事件处理完成后呈示结果。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	如果已修改显示列表，则将表示 Flash Player 或 Adobe AIR 在此事件处理完成后呈示结果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLICK</apiName><shortdesc class="- topic/shortdesc ">
	定义 click 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">click</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">click</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">对于单击事件，此值始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:click" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CONTEXT_MENU</apiName><shortdesc class="- topic/shortdesc ">
		MouseEvent.CONTEXT_MENU 常量定义 contextMenu 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">contextMenu</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.CONTEXT_MENU</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">contextMenu</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标右键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DOUBLE_CLICK</apiName><shortdesc class="- topic/shortdesc ">
	定义 doubleClick 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">doubleClick</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">doubleClick</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。对象的 <codeph class="+ topic/ph pr-d/codeph ">doubleClickEnabled</codeph> 属性必须为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 以生成 <codeph class="+ topic/ph pr-d/codeph ">doubleClick</codeph> 事件。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">对于双击事件，此值始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:doubleClick" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIDDLE_CLICK</apiName><shortdesc class="- topic/shortdesc ">
		定义 middleClick 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">middleClick</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">middleClick</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">对于中键单击事件，此属性始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:middleClick" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIDDLE_MOUSE_DOWN</apiName><shortdesc class="- topic/shortdesc ">
		定义 middleMouseDown 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">middleMouseDown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">middleMouseDown</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标中键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:middleMouseDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIDDLE_MOUSE_UP</apiName><shortdesc class="- topic/shortdesc ">
		定义 middleMouseUp 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">middleMouseUp</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">middleMouseUp</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标中键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:middleMouseUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_DOWN</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseDown 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseDown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseDown</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example class="- topic/example ">有关如何使用此常量的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE" class="- topic/xref ">MOUSE_MOVE</xref> 常量的示例。 
	 
	 </example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_MOVE</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseMove 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseMove</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as" class="- topic/example "> 下面的示例是一个简单的绘图程序。用户可以在主 Sprite 对象上或在较小的矩形 Sprite 对象上进行绘制。 
   
 <p class="- topic/p ">在构造函数中, 创建了一个矩形 <codeph class="+ topic/ph pr-d/codeph ">innerRect</codeph> Sprite 对象并将线条样式设置为绿色。用于在 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent_MOUSE_MOVEExample</codeph> Sprite 容器上进行绘制的线条样式设置为红色。为应用程序的主 Sprite 对象和 <codeph class="+ topic/ph pr-d/codeph ">innerRect</codeph> Sprite 对象添加侦听 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_UP</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_DOWN</codeph> 事件的独立事件侦听器。在这两种情况下，鼠标按下事件侦听器方法将当前绘图位置移动到鼠标指针的位置并为 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_MOVE</codeph> 事件添加一个侦听器。移动鼠标指针时，调用的事件侦听器方法将跟随指针并使用 <codeph class="+ topic/ph pr-d/codeph ">graphics.LineTo()</codeph> 方法绘制一条直线。（<b class="+ topic/ph hi-d/b ">注意：</b><codeph class="+ topic/ph pr-d/codeph ">innerRect</codeph> Sprite 对象将会遮住矩形后面绘制的主 Sprite 对象的红色直线。）在发生 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.MOUSE_UP</codeph> 事件时，将删除 <codeph class="+ topic/ph pr-d/codeph ">MOUSE_MOVE</codeph> 事件的侦听器并停止绘图。</p>     
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseMove" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_OUT</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseOut 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseOut</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseOut</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">指针设备现在指向的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_OVER</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseOver 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseOver</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseOver</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">指针设备指向的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_UP</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseUp 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseUp</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseUp</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example class="- topic/example ">有关如何使用此常量的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE" class="- topic/xref ">MOUSE_MOVE</xref> 常量的示例。 
	 
	 </example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_WHEEL</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseWheel 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseWheel</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseWheel</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">delta</codeph></entry><entry class="- topic/entry ">鼠标滚轮上的每个刻度表示的行数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseWheel" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RIGHT_CLICK</apiName><shortdesc class="- topic/shortdesc ">
		定义 rightClick 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rightClick</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">rightClick</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">对于右键单击事件，此属性始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rightClick" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RIGHT_MOUSE_DOWN</apiName><shortdesc class="- topic/shortdesc ">
		定义 rightMouseDown 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rightMouseDown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">rightMouseDown</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">对于右键单击事件，此属性始终为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rightMouseDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RIGHT_MOUSE_UP</apiName><shortdesc class="- topic/shortdesc ">
		定义 rightMouseUp 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rightMouseUp</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">rightMouseUp</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标右键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph></entry><entry class="- topic/entry ">鼠标单击次数，表示该事件是否为多击序列的一部分。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rightMouseUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ROLL_OUT</apiName><shortdesc class="- topic/shortdesc ">
	定义 rollOut 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rollOut</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">rollOut</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">指针设备现在指向的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rollOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ROLL_OVER</apiName><shortdesc class="- topic/shortdesc ">
	定义 rollOver 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rollOver</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">rollOver</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> (Windows)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">指针设备指向的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:rollOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">altKey</apiName><shortdesc class="- topic/shortdesc ">
    表示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    表示 Alt 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。仅 Windows 支持。在其他操作系统上，此属性始终设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">buttonDown</apiName><shortdesc class="- topic/shortdesc ">
	表示鼠标主按键是已按下 (true) 还是未按下 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示鼠标主按键是已按下 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是未按下 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">clickCount</apiName><shortdesc class="- topic/shortdesc ">
		表示鼠标按下事件是否为多击序列的一部分。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示鼠标按下事件是否为多击序列的一部分。对于除 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseDown</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.middleMouseUp</codeph>、<codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseDown</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.rightMouseUp</codeph> 以外的所有鼠标事件，此参数将为零。使用 <codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph> 参数可以侦听单击、双击或任何多击序列。例如，初始 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseUp</codeph> 的 <codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph> 为 1，双击序列中的第二个 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseUp</codeph> 的 <codeph class="+ topic/ph pr-d/codeph ">clickCount</codeph> 为 2。如果充分地移动鼠标或多击序列由于某种原因中断，则下一个 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseDown</codeph> 的 clickCount 将为 1。doubleClick 事件将会继续正常触发。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">commandKey</apiName><shortdesc class="- topic/shortdesc ">
		表示是否已激活 Command 键（仅限 Mac）。commandKey 属性的值将与 Mac 中 ctrlKey 属性的值相同。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示是否已激活 Command 键（仅限 Mac）。 
		
		<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph> 属性的值将与 Mac 中 <codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph> 属性的值相同。在 Windows 或 Linux 中始终为 false。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">controlKey</apiName><shortdesc class="- topic/shortdesc ">
		表示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ctrlKey</apiName><shortdesc class="- topic/shortdesc ">
	在 Windows 或 Linux 中，表示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在 Windows 或 Linux 中，表示 Ctrl 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。在 Macintosh 中，表示是否已激活 Control 键或 Command 键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">delta</apiName><shortdesc class="- topic/shortdesc ">
	表示用户将鼠标滚轮每滚动一个单位应滚动多少行。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示用户将鼠标滚轮每滚动一个单位应滚动多少行。正 delta 值表示向上滚动；负值表示向下滚动。通常所设的值为 1 到 3；值越大，滚动得越快。此设置取决于设备和操作系统，并且通常可由用户配置。此属性仅应用于 <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.mouseWheel</codeph> 事件。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isRelatedObjectInaccessible</apiName><shortdesc class="- topic/shortdesc ">
	 如果为 true，则 relatedObject 属性是出于与安全沙箱相关的原因而设置为 null 的。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 如果为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 属性是出于与安全沙箱相关的原因而设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 的。如果 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 的标称值是对其他沙箱中的 DisplayObject 的引用，则 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 将设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，除非具有双向跨越此沙箱边界的权限。通过以下方式确立权限：从 SWF 文件调用 <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，然后在加载图像时设置 <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.checkPolicyFile</codeph> 属性。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#MouseEvent/relatedObject" class="- topic/link "><linktext class="- topic/linktext ">MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属 Sprite 的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属 Sprite 的水平坐标。
	
	</apiDesc><example class="- topic/example ">有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE" class="- topic/xref ">MOUSE_MOVE</xref> 常量的示例。
	 
	 </example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属 Sprite 的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属 Sprite 的垂直坐标。
	
	</apiDesc><example class="- topic/example ">有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE" class="- topic/xref ">MOUSE_MOVE</xref> 常量的示例。
	 
	 </example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">relatedObject</apiName><shortdesc class="- topic/shortdesc ">
	对与事件相关的显示列表对象的引用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	对与事件相关的显示列表对象的引用。例如，发生 <codeph class="+ topic/ph pr-d/codeph ">mouseOut</codeph> 事件时，<codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 表示指针设备当前所指向的显示列表对象。此属性应用于 <codeph class="+ topic/ph pr-d/codeph ">mouseOut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">mouseOver</codeph>、<codeph class="+ topic/ph pr-d/codeph ">rollOut</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">rollOver</codeph> 事件。
	<p class="- topic/p ">在以下两种情况下，此属性的值可以为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>：不存在任何相关对象；存在相关对象，但该对象位于您无法访问的安全沙箱中。使用 <codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible" class="- topic/link "><linktext class="- topic/linktext ">MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shiftKey</apiName><shortdesc class="- topic/shortdesc ">
	表示 Shift 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Shift 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stageX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点在全局舞台坐标中的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点在全局舞台坐标中的水平坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">localX</codeph> 属性时会计算此属性。
	
	</apiDesc><example class="- topic/example ">有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE" class="- topic/xref ">MOUSE_MOVE</xref> 常量的示例。 
	 
	 </example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stageY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点在全局舞台坐标中的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点在全局舞台坐标中的垂直坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">localY</codeph> 属性时会计算此属性。
	
	</apiDesc><example class="- topic/example ">有关如何使用此属性的说明，请参阅 <xref href="MouseEvent.html#MOUSE_MOVE" class="- topic/xref ">MOUSE_MOVE</xref> 常量的示例。
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:IEventDispatcher" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IEventDispatcher</apiName><shortdesc class="- topic/shortdesc ">
IEventDispatcher 接口定义用于添加或删除事件侦听器的方法，检查是否已注册特定类型的事件侦听器，并调度事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
IEventDispatcher 接口定义用于添加或删除事件侦听器的方法，检查是否已注册特定类型的事件侦听器，并调度事件。

<p class="- topic/p ">事件目标是 Flash <sup class="+ topic/ph hi-d/sup ">®</sup> Player 和 Adobe AIR 事件模型的重要组成部分。事件目标是事件如何通过显示列表层次结构这一问题的焦点。当发生鼠标单击或按键等事件时，会将事件对象调度到从显示列表根开始的事件流中。事件对象进行到事件目标的往返行程，在概念上，此往返行程被划分为三个阶段：捕获阶段包括从根到事件目标节点之前的最后一个节点的行程，目标阶段仅包括事件目标节点，冒泡阶段包括到显示列表的根的回程上遇到的任何后续节点。</p>

<p class="- topic/p ">通常，使用户定义的类能够调度事件的最简单方法是扩展 EventDispatcher。如果无法扩展（即，如果该类已经扩展了另一个类），则可以实现 IEventDispatcher 接口，创建 EventDispatcher 成员，并编写一些简单的挂钩，将调用连接到聚合的 EventDispatcher 中。</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as" class="- topic/example "> 以下示例使用 IEventDispatcherExample 和 DecoratedDispatcher 示例类来说明如何实现和使用 IEventDispatcher 类。本示例通过以与 EventDispatcher 相同的方式实现 DecoratedDispatcher 的每个方法来完成此任务。在 IEventDispatcherExample 的构造函数内，构造 DecoratedDispatcher 类的新实例（名为 <codeph class="+ topic/ph pr-d/codeph ">decorDispatcher</codeph>），并使用 <codeph class="+ topic/ph pr-d/codeph ">decorDispatcher</codeph> 变量和自定义事件 <codeph class="+ topic/ph pr-d/codeph ">doSomething</codeph> 来调用 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>，然后由 <codeph class="+ topic/ph pr-d/codeph ">didSomething()</codeph> 进行处理，它可以使用 <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 输出一行文本。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace(">> didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">处理事件的侦听器函数。此函数必须接受事件对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">function(evt:Event):void</codeph></p>
	函数可以有任何名称。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定侦听器是运行于捕获阶段还是运行于目标和冒泡阶段。如果将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。如果 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，则侦听器只在目标或冒泡阶段处理事件。要在所有三个阶段都侦听事件，请调用两次 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>，一次将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，第二次再将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件侦听器的优先级。优先级由一个 32 位整数指定。数字越大，优先级越高。优先级为 <i class="+ topic/ph hi-d/i ">n</i> 的所有侦听器会在优先级为 <i class="+ topic/ph hi-d/i ">n-1</i> 的侦听器之前处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定对侦听器的引用是强引用，还是弱引用。强引用（默认值）可防止您的侦听器被当作垃圾回收。弱引用则没有此作用。 <p class="- topic/p ">类级别成员函数不属于垃圾回收的对象，因此可以对类级别成员函数将 <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 而不会使它们受垃圾回收的影响。如果对作为嵌套内部函数的侦听器将 <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则该函数将被作为垃圾回收并且不再是永久函数。如果创建对该内部函数的引用（将该函数保存到另一个变量中），则该函数将不作为垃圾回收并仍将保持永久。</p>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。
	<p class="- topic/p ">成功注册一个事件侦听器后，无法通过额外调用 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> 来更改其优先级。要更改侦听器的优先级，必须先调用 <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph>。然后，可以使用新的优先级再次注册该侦听器。</p>
	<p class="- topic/p ">注册该侦听器后，如果继续调用具有不同 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 值的 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>，则会创建单独的侦听器注册。例如，如果首先注册 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 的侦听器，则该侦听器只在捕获阶段进行侦听。如果您使用同一个侦听器对象再次调用 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>，但 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，则您将有两个单独的侦听器：一个在捕获阶段侦听，另一个在目标阶段和冒泡阶段侦听。</p>
	<p class="- topic/p ">不能只为目标阶段或冒泡阶段注册事件侦听器。这些阶段在注册期间是成对出现的，因为冒泡阶段只适用于目标节点的始祖。</p>
	<p class="- topic/p ">如果不再需要某个事件侦听器，可调用 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.removeEventListener()</codeph> 删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。</p>
	<p class="- topic/p ">复制 EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。</p>
	<p class="- topic/p ">如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。</p>
	<p class="- topic/p ">如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">dispatchEvent</apiName><shortdesc class="- topic/shortdesc ">
	将事件调度到事件流中。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">除非对事件调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph>（在这种情况下，它返回 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>），否则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">event</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">调度到事件流中的事件对象。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	将事件调度到事件流中。事件目标是对其调用 <codeph class="+ topic/ph pr-d/codeph ">dispatchEvent()</codeph> 的 EventDispatcher 对象。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasEventListener</apiName><shortdesc class="- topic/shortdesc ">
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果指定类型的侦听器已注册，则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 <codeph class="+ topic/ph pr-d/codeph ">IEventDispatcher.willTrigger()</codeph>。
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 与 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 的区别是：<codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 只检查它所属的对象，而 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 检查整个事件流以查找由 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 参数指定的事件。</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#IEventDispatcher/willTrigger()" class="- topic/link "><linktext class="- topic/linktext ">willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
	从 EventDispatcher 对象中删除侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要删除的侦听器对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指出是为捕获阶段还是为目标和冒泡阶段注册了侦听器。如果为捕获阶段以及目标和冒泡阶段注册了侦听器，则需要对 <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> 进行两次调用才能将这两个侦听器删除：一次调用将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，另一次调用将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">willTrigger</apiName><shortdesc class="- topic/shortdesc ">
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果将会触发指定类型的侦听器，则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此 EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 与 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 的区别是：<codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 只检查它所属的对象，而 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 检查整个事件流以查找由 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 参数指定的事件。</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="flash.events:SQLErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
 如果在异步执行模式下执行数据库操作时发生错误，SQLConnection 实例或 SQLStatement 实例将调度 SQLErrorEvent 实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 如果在异步执行模式下执行数据库操作时发生错误，SQLConnection 实例或 SQLStatement 实例将调度 SQLErrorEvent 实例。作为事件对象传递给侦听器的 SQLErrorEvent 实例提供对有关错误原因和尝试的操作的信息的访问。
 
 <p class="- topic/p ">可在 SQLErrorEvent 实例的 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性中的 SQLError 上找到失败的特定详细信息。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建一个 SQLErrorEvent 对象以作为参数传递给事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型，可在 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性中访问。SQLErrorEvent 定义一种事件类型 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 事件，由 <codeph class="+ topic/ph pr-d/codeph ">SQLErrorEvent.ERROR</codeph> 常量表示。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含错误详细信息的 SQLError 对象。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">用于创建新的 SQLErrorEvent 对象。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建一个 SQLErrorEvent 对象以作为参数传递给事件侦听器。
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.errors.SQLError;.xml" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError;</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR" class="- topic/link "><linktext class="- topic/linktext ">ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 SQLErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 SQLErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 SQLErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 SQLErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 SQLErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 SQLErrorEvent 对象的所有属性。字符串的格式如下：
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[SQLErrorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> error=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 <p class="- topic/p ">错误值使用以下格式：<codeph class="+ topic/ph pr-d/codeph ">SQLError : <i class="+ topic/ph hi-d/i ">message value</i> code=<i class="+ topic/ph hi-d/i ">value</i> operation=<i class="+ topic/ph hi-d/i ">value</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ERROR</apiName><shortdesc class="- topic/shortdesc ">
     SQLErrorEvent.ERROR 常量定义在 SQLConnection 方法调用或 SQLStatement 实例出错完成时调度的 error 事件的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">error</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLErrorEvent.ERROR</codeph> 常量定义在 SQLConnection 方法调用或 SQLStatement 实例出错完成时调度的 error 事件的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。<codeph class="+ topic/ph pr-d/codeph ">error</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">error</codeph></entry><entry class="- topic/entry ">一个 SQLError 对象，其中包含有关出现的错误的类型和导致该错误的操作的信息。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告错误的 SQLConnection 或 SQLStatement 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
     包含有关错误原因的详细信息的 SQLError 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     包含有关错误原因的详细信息的 SQLError 对象。
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
当发生错误导致异步操作失败时，对象会调度 ErrorEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ErrorEvent 事件的事件对象。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
当发生错误导致异步操作失败时，对象会调度 ErrorEvent 对象。

<p class="- topic/p ">ErrorEvent 类仅定义一种类型的 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 事件：<codeph class="+ topic/ph pr-d/codeph ">ErrorEvent.ERROR</codeph>。ErrorEvent 类还充当多个其他错误事件类（包括 AsyncErrorEvent、IOErrorEvent、SecurityErrorEvent、SQLErrorEvent 和 UncaughtErrorEvent 类）的基类。</p>

<p class="- topic/p ">可以通过为 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> (UncaughtErrorEvent.UNCAUGHT_ERROR) 事件注册侦听器来检查不具有任何侦听器的 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 事件。</p>

<p class="- topic/p ">当内容在 <ph class="- topic/ph ">Flash Player 或</ph> AIR Debug Launcher (ADL) 应用程序的调试器版本中运行时，发生未被捕获的错误还会导致显示错误事件的错误对话框出现。</p>

</apiDesc><example conref="examples\ErrorEventExample.as" class="- topic/example "> 以下示例演示捕获多种类型的错误事件的单个错误处理函数 (<codeph class="+ topic/ph pr-d/codeph ">errorHandler()</codeph>) 的使用。如果有 <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> 事件，处理函数将试图从网络加载，然后引发 <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph>。
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>如果将名为 MissingFile.xml 的文件与您的 SWF 文件放在同一目录中，则本示例将无法正常工作。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#UncaughtErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">UncaughtErrorEvent</linktext></link></related-links><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关错误事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 error 事件：<codeph class="+ topic/ph pr-d/codeph ">ErrorEvent.ERROR</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要显示为错误消息的文本。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">id</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">与特定错误关联的引用编号（仅在 Adobe AIR 中支持）。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ErrorEvent 对象的构造函数。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关错误事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 ErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 ErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 ErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 ErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 ErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 ErrorEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ErrorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> text=<i class="+ topic/ph hi-d/i ">value</i> errorID=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b> <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> 方法返回的 <codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 值只可用于 Adobe AIR。虽然 Flash Player 10.1 支持 <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> 属性，但在 Flash Player 中对 ErrorEvent 对象调用 <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> 并不提供 <codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 值。</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ERROR</apiName><shortdesc class="- topic/shortdesc ">
	定义 error 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">error</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">发生网络操作失败的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">errorID</apiName><shortdesc class="- topic/shortdesc ">
	包含与特定错误相关联的引用数字。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	包含与特定错误相关联的引用数字。对于自定义的 ErrorEvent 对象，此数字是构造函数中提供的 <codeph class="+ topic/ph pr-d/codeph ">id</codeph> 参数的值。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SoftKeyboardTrigger" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoftKeyboardTrigger</apiName><shortdesc class="- topic/shortdesc ">
	SoftKeyboardTrigger 类为 SoftKeyboardEvent 类的 triggerType 属性定义可能的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">为 SoftKeyboardEvent 类的 triggerType 属性定义可能的值。
	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	SoftKeyboardTrigger 类为 SoftKeyboardEvent 类的  <codeph class="+ topic/ph pr-d/codeph ">triggerType</codeph> 属性定义可能的值。这些值表示什么类型的操作触发了 SoftKeyboard 激活事件。
	
	</apiDesc></apiClassifierDetail><apiValue id="flash.events:SoftKeyboardTrigger:CONTENT_TRIGGERED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CONTENT_TRIGGERED</apiName><shortdesc class="- topic/shortdesc ">
	函数调用触发了该事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">contentTriggered</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">表示函数调用调用了该事件。
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	函数调用触发了该事件。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SoftKeyboardTrigger:USER_TRIGGERED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">USER_TRIGGERED</apiName><shortdesc class="- topic/shortdesc ">
	用户操作触发了该事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">userTriggered</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">表示用户操作调用了该事件。
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	用户操作触发了该事件。可触发此事件的典型用户操作包括显式关闭键盘或按 Back 键。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:TransformGestureEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TransformGestureEvent</apiName><shortdesc class="- topic/shortdesc "> 
 使用 TransformGestureEvent 类可以处理设备或操作系统解释为手势的复杂移动输入事件，例如在触摸屏幕上移动手指。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">提供对触摸移动交互的事件处理支持
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:GestureEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 使用 TransformGestureEvent 类可以处理设备或操作系统解释为手势的复杂移动输入事件，例如在触摸屏幕上移动手指。一个手势可具有一个或多个触摸点。当用户与带有触摸屏的移动电话或绘图板等设备交互时，用户通常用手指触摸并沿着屏幕移动手指或指针设备。可以使用 GestureEvent、PressAndTapGestureEvent 和 TransformGestureEvent 类开发响应此用户交互的应用程序。使用此处或相关的 GestureEvent 和 TouchEvent 类中定义的事件类型创建事件侦听器。并使用这些类的属性和方法来构造响应用户触摸设备的事件处理程序。
 <p class="- topic/p ">设备或操作系统可以解释手势输入。因此，不同的设备或操作系统对各个手势类型有不同的要求。在一个设备上滑动要求的输入活动可能在另一个设备上滑动不同。请参阅硬件或操作系统文档，以了解设备或操作系统如何将接触解释为特定的手势。</p>
 <p class="- topic/p ">使用 Multitouch 类确定当前环境的触摸交互支持，如果当前环境支持触摸交互，则对其进行管理。</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>当对象嵌套在显示列表中时，触摸事件的目标将是显示列表中可见的最深的可能嵌套对象。此对象称为目标节点。要使目标节点的祖先（包含显示列表中目标节点的对象）接收触摸事件的通知，请对祖先节点使用 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.addEventListener()</codeph> 并将 type 参数设置为要检测的特定触摸事件。</p>
 <p class="- topic/p ">当用户与此设备接触时，TransformGestureEvent 对象的缩放、旋转和偏移属性是上一手势事件中的增量值。例如，当手势增大显示对象大小时，缩放值可能依次为 <codeph class="+ topic/ph pr-d/codeph ">1.03</codeph>、<codeph class="+ topic/ph pr-d/codeph ">1.01</codeph>、<codeph class="+ topic/ph pr-d/codeph ">1.01</codeph>、<codeph class="+ topic/ph pr-d/codeph ">1.02</codeph>，表示显示对象在手势结束时对其原始大小缩放了 1.0717 倍。</p>
 <p class="- topic/p ">对于 TransformGestureEvent 对象，不由当前手势修改的属性将设置为标识值。例如，全景手势不能进行旋转或缩放转换，因此事件对象的 <codeph class="+ topic/ph pr-d/codeph ">rotation</codeph> 值为 <codeph class="+ topic/ph pr-d/codeph ">0</codeph>，<codeph class="+ topic/ph pr-d/codeph ">scaleX</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">scaleY</codeph> 属性为 <codeph class="+ topic/ph pr-d/codeph ">1</codeph>。</p>
 </apiDesc><example conref="examples\TransformGestureEventExample.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ROTATE</codeph> 事件的事件处理。当用户在启用触摸的设备上执行旋转手势时，mySprite 旋转，myTextField 填充为当前阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_ROTATE , onRotate );
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onRotate(evt:TransformGestureEvent):void {

    evt.target.rotation -= 45;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example><example conref="examples\TransformGestureExample2.as" class="- topic/example "> 下面的示例说明如何处理转换手势事件。本示例假设本地系统上包含一个名为“african_elephant.jpg”的图像，并且该图像与 TransformGestureExample2 类位于同一个目录中。此示例由 Christian Cantrell 提供，他在快速入门指南中对此示例进行了更详细介绍：<xref href="http://www.adobe.com/devnet/flash/articles/multitouch_gestures.html" scope="external" class="- topic/xref ">Multi-touch and gesture support on the Flash Platform</xref>。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package
{
    import flash.display.Bitmap;
    import flash.display.Sprite;
    import flash.events.TransformGestureEvent;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.ui.Multitouch;
    import flash.ui.MultitouchInputMode;
    
    [SWF(width=320, height=460, frameRate=24, backgroundColor=0x000000)]
    public class TransformGestureExample2 extends Sprite
    {
        [Embed(source="african_elephant.jpg")]
        public var ElephantImage:Class;
        public var scaleDebug:TextField;
        public var rotateDebug:TextField;

        public function TransformGestureExample2()
        {
            // Debug
            var tf:TextFormat = new TextFormat();
            tf.color = 0xffffff;
            tf.font = "Helvetica";
            tf.size = 11;
            this.scaleDebug = new TextField();
            this.scaleDebug.width = 310;
            this.scaleDebug.defaultTextFormat = tf;
            this.scaleDebug.x = 2;
            this.scaleDebug.y = 2;
            this.stage.addChild(this.scaleDebug);
            this.rotateDebug = new TextField();
            this.rotateDebug.width = 310;
            this.rotateDebug.defaultTextFormat = tf;
            this.rotateDebug.x = 2;
            this.rotateDebug.y = 15;
            this.stage.addChild(this.rotateDebug);

            var elephantBitmap:Bitmap = new ElephantImage();
            var elephant:Sprite = new Sprite();
            
            elephant.addChild(elephantBitmap);
            
            elephant.x = 160;
            elephant.y = 230;
            
            elephantBitmap.x = (300 - (elephantBitmap.bitmapData.width / 2)) * -1;
            elephantBitmap.y = (400 - (elephantBitmap.bitmapData.height / 2)) *-1;
            
            this.addChild(elephant);

            Multitouch.inputMode = MultitouchInputMode.GESTURE;
            elephant.addEventListener(TransformGestureEvent.GESTURE_ZOOM, onZoom);
            elephant.addEventListener(TransformGestureEvent.GESTURE_ROTATE, onRotate);
        }
        
        private function onZoom(e:TransformGestureEvent):void
        {
            this.scaleDebug.text = (e.scaleX + ", " + e.scaleY);
            var elephant:Sprite = e.target as Sprite;
            elephant.scaleX *= e.scaleX;
            elephant.scaleY *= e.scaleY;
        }
        
        private function onRotate(e:TransformGestureEvent):void
        {
            var elephant:Sprite = e.target as Sprite;
            this.rotateDebug.text = String(e.rotation);
            elephant.rotation += e.rotation;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#Multitouch" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Multitouch</linktext></link><link href="flash.events.xml#TouchEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TouchEvent</linktext></link><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.events.xml#EventDispatcher/addEventListener()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.addEventListener()</linktext></link></related-links><adobeApiEvent id="flash.events:TransformGestureEvent:GESTURE_PAN_gesturePan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">gesturePan</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TransformGestureEvent:GESTURE_PAN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TransformGestureEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\TransformGesture_pan.as" class="- topic/example "> 以下示例将显示如何对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_PAN</codeph> 事件进行事件处理。当用户在启用触摸的设备上执行平移手势时，myTextField 将使用当前的阶段进行填充。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_PAN , onPan);
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onPan(evt:TransformGestureEvent):void {

    evt.target.localX++;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gesturePan" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gesturePan</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TransformGestureEvent:GESTURE_ROTATE_gestureRotate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">gestureRotate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TransformGestureEvent:GESTURE_ROTATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TransformGestureEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\TransformGestureEventExample.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ROTATE</codeph> 事件的事件处理。当用户在启用触摸的设备上执行旋转手势时，mySprite 旋转，myTextField 填充为当前阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_ROTATE , onRotate );
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onRotate(evt:TransformGestureEvent):void {

    evt.target.rotation -= 45;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureRotate" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureRotate</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TransformGestureEvent:GESTURE_SWIPE_gestureSwipe" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">gestureSwipe</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TransformGestureEvent:GESTURE_SWIPE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TransformGestureEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\TransformGesture_swipe.as" class="- topic/example "> 以下示例将显示如何对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_SWIPE</codeph> 事件进行事件处理。当用户在启用触摸的设备上执行滑动手势时，myTextField 将使用滑动事件的唯一阶段 <codeph class="+ topic/ph pr-d/codeph ">all</codeph> 进行填充。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_SWIPE , onSwipe);
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onSwipe(evt:TransformGestureEvent):void {

    if (evt.offsetX == 1 ) {
    myTextField.text = "right";
    }
    if (evt.offsetY == -1) {
    myTextField.text = "up";
    }
    myTextField.text = evt.phase;

}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureSwipe" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureSwipe</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TransformGestureEvent:GESTURE_ZOOM_gestureZoom" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">gestureZoom</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TransformGestureEvent:GESTURE_ZOOM</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TransformGestureEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\TransformGesture_zoom.as" class="- topic/example "> 以下示例将显示如何对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ZOOM</codeph> 事件进行事件处理。当用户在启用触摸的设备上执行缩放手势时，myTextField 将使用当前的阶段进行填充。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_ZOOM , onZoom);
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onZoom(evt:TransformGestureEvent):void {

    evt.target.scaleX++;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureZoom" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureZoom</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TransformGestureEvent:TransformGestureEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TransformGestureEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建包含有关复杂多点触控事件信息（例如用户沿着屏幕滑动手指）的 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值是：<codeph class="+ topic/ph pr-d/codeph ">TransformGestureEvent.GESTURE_PAN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TransformGestureEvent.GESTURE_ROTATE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TransformGestureEvent.GESTURE_SWIPE</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">TransformGestureEvent.GESTURE_ZOOM</codeph>。 
	
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">phase</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">此值跟踪触摸手势的开始、进展和结束。可能的值是：<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.BEGIN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.END</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.UPDATE</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属的显示对象的水平坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属的显示对象的垂直坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">scaleX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">显示对象的水平缩放。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">scaleY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">显示对象的垂直缩放。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rotation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">显示对象当前沿 Z 轴的旋转角度（以度为单位）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offsetX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">显示对象从其原始位置的水平转换。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offsetY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">显示对象从其原始位置的垂直转换。	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 或 Linux 中，表示是否已激活 Ctrl 键。在 Mac 中，表示是否已激活 Ctrl 键或 Command 键。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 键（仅限 Windows 或 Linux）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Command 键是否已激活（仅限 Mac）。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Control 或 Ctrl 键是否已激活。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">TransformGestureEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建包含有关复杂多点触控事件信息（例如用户沿着屏幕滑动手指）的 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
	
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#Multitouch" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Multitouch</linktext></link><link href="flash.events.xml#TouchEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TouchEvent</linktext></link><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.events.xml#EventDispatcher/addEventListener()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.addEventListener()</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TransformGestureEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 TransformGestureEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 TransformGestureEvent 对象。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 TransformGestureEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TransformGestureEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 TransformGestureEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 TransformGestureEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 TransformGestureEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[TransformGestureEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... ]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TransformGestureEvent:GESTURE_PAN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GESTURE_PAN</apiName><shortdesc class="- topic/shortdesc ">
     定义 GESTURE_PAN 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">gesturePan</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_PAN</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TransformGestureEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">phase</codeph></entry><entry class="- topic/entry ">事件流的当前阶段；GesturePhase 类的值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleX</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象的水平缩放。对于全景手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">1</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleY</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象的垂直缩放。对于全景手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">1</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rotation</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象当前沿 Z 轴的旋转角度（以度为单位）。对于全景手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetX</codeph></entry><entry class="- topic/entry ">显示对象从其在上一手势事件位置处的水平转换。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetY</codeph></entry><entry class="- topic/entry ">显示对象从其在上一手势事件位置处的垂直转换。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TransformGesture_pan.as" class="- topic/example "> 以下示例将显示如何对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_PAN</codeph> 事件进行事件处理。当用户在启用触摸的设备上执行平移手势时，myTextField 将使用当前的阶段进行填充。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_PAN , onPan);
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onPan(evt:TransformGestureEvent):void {

    evt.target.localX++;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gesturePan" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gesturePan</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:TransformGestureEvent:GESTURE_ROTATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GESTURE_ROTATE</apiName><shortdesc class="- topic/shortdesc ">
     定义 GESTURE_ROTATE 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">gestureRotate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ROTATE</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TransformGestureEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">phase</codeph></entry><entry class="- topic/entry ">事件流的当前阶段；GesturePhase 类的值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleX</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象的水平缩放。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleY</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象的垂直缩放。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rotation</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象沿 Z 轴的当前旋转角度（以度为单位）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetX</codeph></entry><entry class="- topic/entry ">显示对象从其在上一手势事件位置处的水平转换。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetY</codeph></entry><entry class="- topic/entry ">显示对象从其在上一手势事件位置处的垂直转换。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TransformGestureEventExample.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ROTATE</codeph> 事件的事件处理。当用户在启用触摸的设备上执行旋转手势时，mySprite 旋转，myTextField 填充为当前阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_ROTATE , onRotate );
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onRotate(evt:TransformGestureEvent):void {

    evt.target.rotation -= 45;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureRotate" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureRotate</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:TransformGestureEvent:GESTURE_SWIPE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GESTURE_SWIPE</apiName><shortdesc class="- topic/shortdesc ">
     定义 GESTURE_SWIPE 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">gestureSwipe</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_SWIPE</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TransformGestureEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">phase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。对于滑动事件，调度此事件后，此值始终是 <codeph class="+ topic/ph pr-d/codeph ">all</codeph>，与值 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.ALL</codeph> 对应。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleX</codeph></entry><entry class="- topic/entry ">显示对象的水平缩放。对于滑动手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleY</codeph></entry><entry class="- topic/entry ">显示对象的垂直缩放。对于滑动手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rotation</codeph></entry><entry class="- topic/entry ">显示对象沿 Z 轴的当前旋转角度（以度为单位）。对于滑动手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetX</codeph></entry><entry class="- topic/entry ">表示水平方向：1 表示向右，-1 表示向左。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetY</codeph></entry><entry class="- topic/entry ">表示垂直方向：1 表示向下，-1 表示向上。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TransformGesture_swipe.as" class="- topic/example "> 以下示例将显示如何对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_SWIPE</codeph> 事件进行事件处理。当用户在启用触摸的设备上执行滑动手势时，myTextField 将使用滑动事件的唯一阶段 <codeph class="+ topic/ph pr-d/codeph ">all</codeph> 进行填充。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_SWIPE , onSwipe);
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onSwipe(evt:TransformGestureEvent):void {

    if (evt.offsetX == 1 ) {
    myTextField.text = "right";
    }
    if (evt.offsetY == -1) {
    myTextField.text = "up";
    }
    myTextField.text = evt.phase;

}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureSwipe" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureSwipe</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:TransformGestureEvent:GESTURE_ZOOM" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GESTURE_ZOOM</apiName><shortdesc class="- topic/shortdesc ">
     定义 GESTURE_ZOOM 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">gestureZoom</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ZOOM</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TransformGestureEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">phase</codeph></entry><entry class="- topic/entry ">事件流的当前阶段；GesturePhase 类的值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleX</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象的水平缩放。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scaleY</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象的垂直缩放。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rotation</codeph></entry><entry class="- topic/entry ">自上一手势事件后显示对象沿 Z 轴的当前旋转角度（以度为单位）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetX</codeph></entry><entry class="- topic/entry ">显示对象从其在上一手势事件位置处的水平转换。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offsetY</codeph></entry><entry class="- topic/entry ">显示对象从其在上一手势事件位置处的垂直转换。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TransformGesture_zoom.as" class="- topic/example "> 以下示例将显示如何对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ZOOM</codeph> 事件进行事件处理。当用户在启用触摸的设备上执行缩放手势时，myTextField 将使用当前的阶段进行填充。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_ZOOM , onZoom);
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onZoom(evt:TransformGestureEvent):void {

    evt.target.scaleX++;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureZoom" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureZoom</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:TransformGestureEvent:offsetX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">offsetX</apiName><shortdesc class="- topic/shortdesc ">
	自上一手势事件后显示对象的水平转换。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	自上一手势事件后显示对象的水平转换。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TransformGestureEvent:offsetY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">offsetY</apiName><shortdesc class="- topic/shortdesc ">
	自上一手势事件后显示对象的垂直转换。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	自上一手势事件后显示对象的垂直转换。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TransformGestureEvent:rotation:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rotation</apiName><shortdesc class="- topic/shortdesc ">
	自上一手势事件后显示对象沿 Z 轴的当前旋转角度（以度为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	自上一手势事件后显示对象沿 Z 轴的当前旋转角度（以度为单位）。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TransformGestureEvent:scaleX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">scaleX</apiName><shortdesc class="- topic/shortdesc ">
	自上一手势事件后显示对象的水平缩放。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	自上一手势事件后显示对象的水平缩放。 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TransformGestureEvent:scaleY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">scaleY</apiName><shortdesc class="- topic/shortdesc ">
	自上一手势事件后显示对象的垂直缩放。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	自上一手势事件后显示对象的垂直缩放。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:NativeDragEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeDragEvent</apiName><shortdesc class="- topic/shortdesc ">
 拖放操作中涉及的交互式对象将调度本机拖动事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 拖放操作中涉及的交互式对象将调度本机拖动事件。
 
 <p class="- topic/p ">启动对象调度：</p> 
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> -- 当拖动操作开始时。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragUpdate</codeph> -- 当拖动操作正在进行时。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> -- 当用户释放拖动的项目（无论是否接受放置）时。</li></ul>
 
 <p class="- topic/p ">启动对象是在启动拖动操作的 <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.doDrag()</codeph> 调用中传递给 NativeDragManager 对象的交互式对象。</p>
 
 <p class="- topic/p ">潜在的目标交互式对象调度：</p>
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> -- 当拖动手势移入对象边界内时。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> -- 当拖动手势停留在对象边界内时。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragExit</codeph> -- 当拖动手势离开对象边界时。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> -- 当用户在对象上释放拖动的项目并且该对象使用先前对 <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.acceptDragDrop()</codeph> 的调用接受了放置时。</li></ul>
 
 <p class="- topic/p ">通常，<codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> 事件的处理函数计算正被拖动的数据以及允许的拖动动作，以确定交互式对象是否可以接受放置。要指定交互式对象为合格的目标，事件处理函数必须调用 <codeph class="+ topic/ph pr-d/codeph ">NativeDragManager.acceptDrop()</codeph> 函数，传入对该对象的引用。如果用户在指定的对象上释放鼠标按键，则该对象成为放置目标并且调度 <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> 事件。</p>
 
 <p class="- topic/p ">任何 InteractiveObject 类型的对象都可以是拖动启动器或放置目标。</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragManager" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragComplete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势结束时由源 InteractiveObject 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragDrop</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">对对象的拖放手势结束时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragEnter</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势进入对象边界时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragExit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势离开对象边界时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragExit" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragOver</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势悬停在对象上时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragStart</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">在本机拖放手势开始时由源 InteractiveObject 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragStart" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">nativeDragUpdate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">在进行拖放手势时由源 InteractiveObject 调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NativeDragEvent</apiName><shortdesc class="- topic/shortdesc ">
    使用与本机拖放事件有关的特定信息创建 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_START</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_ENTER</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_OVER</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_EXIT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_DROP</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>。
	
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的水平坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的垂直坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">relatedObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">相关的交互式显示对象。 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">clipboard</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.desktop:Clipboard</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含要传输的数据的 Clipboard 对象。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allowedActions</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.desktop:NativeDragOptions</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">定义允许的动作（移动、复制和链接）的 NativeDragOptions 对象。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dropAction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">当前动作。
    
 	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Ctrl 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否激活 Command 键。
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    使用与本机拖放事件有关的特定信息创建 Event 对象。
    
	<p class="- topic/p ">将 Event 对象作为参数传递给事件侦听器。调度本机拖动事件不会触发相关联的行为。</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建此 NativeDragEvent 对象的副本。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 NativeDragEvent 对象。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建此 NativeDragEvent 对象的副本。
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 将此 NativeDragEvent 对象的属性格式设置为字符串。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">以字符串形式表示的此 NativeDragEvent 的属性。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 将此 NativeDragEvent 对象的属性格式设置为字符串。
	 
	 <p class="- topic/p ">字符串的格式如下：</p>
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NativeDragEvent type=value bubbles=value cancelable=value ... commandKey=value]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_COMPLETE 定义 nativeDragComplete 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragComplete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势结束时由源 InteractiveObject 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_COMPLETE 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_DROP</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_DROP 定义 nativeDragDrop 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragDrop</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">对对象的拖放手势结束时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_DROP 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消此事件会取消拖动操作。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。即使在调度此事件的对象与启动器不在同一安全域中时也可以读取剪贴板。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_ENTER</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_ENTER 定义 nativeDragEnter 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragEnter</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势进入对象边界时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_ENTER 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragEnter</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。只有当调度此事件的对象与启动器位于同一安全域中时才能读取剪贴板。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_EXIT</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_EXIT 定义 nativeDragExit 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragExit</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势离开对象边界时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_EXIT 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragExit</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。只有当调度此事件的对象与启动器位于同一安全域中时才能读取剪贴板。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragExit" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_OVER</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_OVER 定义 nativeDragOver 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragOver</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">拖放手势悬停在对象上时由 InteractiveObjects 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_OVER 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragOver</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消此事件会取消拖动操作。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。只有当调度此事件的对象与启动器位于同一安全域中时才能读取剪贴板。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_START</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_START 定义 nativeDragStart 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragStart</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">在本机拖放手势开始时由源 InteractiveObject 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_START 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragStart</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消此事件会取消拖动操作。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragStart" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NATIVE_DRAG_UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	NativeDragEvent.NATIVE_DRAG_UPDATE 定义 nativeDragUpdate 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">nativeDragUpdate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">在进行拖放手势时由源 InteractiveObject 调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	NativeDragEvent.NATIVE_DRAG_UPDATE 定义 <codeph class="+ topic/ph pr-d/codeph ">nativeDragUpdate</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">allowedActions</codeph></entry><entry class="- topic/entry ">指定与此拖动操作相关的动作的 NativeDragOptions 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">clipboard</codeph></entry><entry class="- topic/entry ">包含拖动数据的 Clipboard 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph></entry><entry class="- topic/entry ">由放置目标选择的动作（或在未设置任何动作时为 <codeph class="+ topic/ph pr-d/codeph ">none</codeph>）。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowedActions</apiName><shortdesc class="- topic/shortdesc ">
	指定启动此拖动操作的显示对象允许执行的操作的 NativeDragOption 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定启动此拖动操作的显示对象允许执行的操作的 NativeDragOption 对象。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeDragOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">clipboard</apiName><shortdesc class="- topic/shortdesc ">
	 包含此拖动操作中的数据的 Clipboard 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 包含此拖动操作中的数据的 Clipboard 对象。
	 
	 <p class="- topic/p ">如果调度此事件的对象与启动对象不在同一安全域中，则只能在 <codeph class="+ topic/ph pr-d/codeph ">nativeDragDrop</codeph> 事件的处理函数中读取剪贴板。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#Clipboard" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dropAction</apiName><shortdesc class="- topic/shortdesc ">
	当前动作。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	当前动作。在 <codeph class="+ topic/ph pr-d/codeph ">nativeDragComplete</codeph> 事件中，<codeph class="+ topic/ph pr-d/codeph ">dropAction</codeph> 属性报告最终动作。 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:PressAndTapGestureEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">PressAndTapGestureEvent</apiName><shortdesc class="- topic/shortdesc "> 
 使用 PressAndTapGestureEvent 类，您可以在启用触摸的设备上处理按住轻敲手势。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">提供对按住轻敲手势的事件处理支持
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:GestureEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 使用 PressAndTapGestureEvent 类，您可以在启用触摸的设备上处理按住轻敲手势。从 InteractiveObject 类继承属性的对象捕获调度的事件对象中的主触摸点（按住）和辅助点（轻敲）。按住轻敲手势通常用于显示上下文相关弹出菜单。
 </apiDesc><example conref="examples\GesturePressAndTap.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_PRESS_AND_TAP</codeph> 事件的事件处理过程。当用户执行按住轻敲手势时，mySprite 旋转，myTextField 填充为当前阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(PressAndTapGestureEvent.GESTURE_PRESS_AND_TAP , onPressAndTap );
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onPressAndTap(evt:PressAndTapGestureEvent):void {

    evt.target.rotation -= 45;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#Multitouch" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Multitouch</linktext></link><link href="flash.display.xml#InteractiveObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject</linktext></link><link href="flash.events.xml#TouchEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TouchEvent</linktext></link><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.events.xml#EventDispatcher/addEventListener()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.addEventListener()</linktext></link></related-links><adobeApiEvent id="flash.events:PressAndTapGestureEvent:GESTURE_PRESS_AND_TAP_gesturePressAndTap" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">gesturePressAndTap</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:PressAndTapGestureEvent:GESTURE_PRESS_AND_TAP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:PressAndTapGestureEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gesturePressAndTap" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gesturePressAndTap</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:PressAndTapGestureEvent:PressAndTapGestureEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">PressAndTapGestureEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建包含有关复杂多点触控事件（例如用户执行的显示上下文相关弹出菜单的触摸）的信息的 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件类型：<codeph class="+ topic/ph pr-d/codeph ">PressAndTapGestureEvent.GESTURE_PRESS_AND_TAP</codeph>。 
	
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">phase</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">此值跟踪触摸手势的开始、进展和结束。可能值包括：<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.BEGIN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.END</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.UPDATE</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.ALL</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属的显示对象的水平坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属的显示对象的垂直坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tapLocalX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属交互对象的水平坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tapLocalY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属交互对象的垂直坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 或 Linux 中，表示是否已激活 Ctrl 键。在 Mac 中，表示是否已激活 Ctrl 键或 Command 键。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 键（仅限 Windows 或 Linux）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Command 键是否已激活（仅限 Mac）。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Control 或 Ctrl 键是否已激活。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">PressAndTapGestureEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建包含有关复杂多点触控事件（例如用户执行的显示上下文相关弹出菜单的触摸）的信息的 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
	
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#Multitouch" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Multitouch</linktext></link><link href="flash.events.xml#TouchEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TouchEvent</linktext></link><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.events.xml#EventDispatcher/addEventListener()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.addEventListener()</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:PressAndTapGestureEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 PressAndTapGestureEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 PressAndTapGestureEvent 对象。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 PressAndTapGestureEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:PressAndTapGestureEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 PressAndTapGestureEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 PressAndTapGestureEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 PressAndTapGestureEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[PressAndTapGestureEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... ]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:PressAndTapGestureEvent:GESTURE_PRESS_AND_TAP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GESTURE_PRESS_AND_TAP</apiName><shortdesc class="- topic/shortdesc ">
     定义 GESTURE_PRESS_AND_TAP 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">gesturePressAndTap</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_PRESS_AND_TAP</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 PressAndTapGestureEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">当前阶段作为事件通过对象层次结构；数值表示此事件在目标上 (2) 或冒泡时 (3) 被捕获 (1)。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属的显示对象的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">phase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段；GesturePhase 类中的某个值。可能值包括：<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.BEGIN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.UPDATE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.END</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.ALL</codeph>。按住轻敲手势会生成 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.BEGIN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.UPDATE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">GesturePhase.END</codeph> 序列，也会生成一个 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.ALL</codeph> 相位。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">tapLocalX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属交互对象的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">tapLocalY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属交互对象的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">tapStageX</codeph></entry><entry class="- topic/entry ">发生轻敲触摸的位置在全局舞台坐标系中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">tapStageY</codeph></entry><entry class="- topic/entry ">发生轻敲触摸的位置在全局舞台坐标系中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gesturePressAndTap" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gesturePressAndTap</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:PressAndTapGestureEvent:tapLocalX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tapLocalX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属交互对象的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属交互对象的水平坐标。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:PressAndTapGestureEvent:tapLocalY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tapLocalY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属交互对象的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属交互对象的垂直坐标。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:PressAndTapGestureEvent:tapStageX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tapStageX</apiName><shortdesc class="- topic/shortdesc ">
	发生轻敲触摸的位置在全局舞台坐标系中的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	发生轻敲触摸的位置在全局舞台坐标系中的水平坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">tapLocalX</codeph> 属性时，会计算此属性。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:PressAndTapGestureEvent:tapStageY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tapStageY</apiName><shortdesc class="- topic/shortdesc ">
	发生轻敲触摸的位置在全局舞台坐标系中的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	发生轻敲触摸的位置在全局舞台坐标系中的垂直坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">tapLocalX</codeph> 属性时，会计算此属性。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:GeolocationEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">GeolocationEvent</apiName><shortdesc class="- topic/shortdesc ">
Geolocation 对象在接到来自安装在设备上的位置传感器提供的更新时，调度 GeolocationEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Geolocation 对象在接到来自安装在设备上的位置传感器提供的更新时，调度 GeolocationEvent 对象。

</apiDesc></apiClassifierDetail><adobeApiEvent id="flash.events:GeolocationEvent:UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:GeolocationEvent:UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:GeolocationEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:GeolocationEvent:GeolocationEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">GeolocationEvent</apiName><shortdesc class="- topic/shortdesc ">
		创建包含有关设备位置的信息的 GeolocationEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 指定事件类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。仅有一种类型的更新事件：<codeph class="+ topic/ph pr-d/codeph ">GeolocationEvent.UPDATE</codeph>。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示事件是否为冒泡事件。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">latitude</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回纬度（以度为单位）。值范围如下：（-90 &lt;=纬度&lt;= +90）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">longitude</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回经度（以度为单位）。值范围如下：（-180 &lt;=经度&lt; +180）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altitude</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回高度（以米为单位）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hAccuracy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回水平精度（以米为单位）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">vAccuracy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回垂直精度（以米为单位）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">speed</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 返回速度（以米/秒为单位）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">heading</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回相对于真北的移动方向（以整数度为单位）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">timestamp</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定地理位置更新的时间戳。
		
		</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">GeolocationEvent 对象的构造函数。
		 
		 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建包含有关设备位置的信息的 <codeph class="+ topic/ph pr-d/codeph ">GeolocationEvent</codeph> 对象。将 Event 对象作为参数传递给事件侦听器。
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:GeolocationEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 GeolocationEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 GeolocationEvent 对象。
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 GeolocationEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:GeolocationEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc "> 
		返回一个字符串，其中包含 GeolocationEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 GeolocationEvent 对象的所有属性
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		返回一个字符串，其中包含 GeolocationEvent 对象的所有属性。字符串的格式如下：
		
		<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[GeolocationEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> status=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:GeolocationEvent:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
		定义 GeolocationEvent 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">GeolocationEvent</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。  
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">接收数据的 Geolocation 对象。</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:altitude:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">altitude</apiName><shortdesc class="- topic/shortdesc "> 
		高度（以米为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		高度（以米为单位）。
		
		<p class="- topic/p ">如果设备不支持高度，则将此属性设置为 <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:heading:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">heading</apiName><shortdesc class="- topic/shortdesc "> 
		相对于真北的移动方向（以整数度为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		相对于真北的移动方向（以整数度为单位）。这与“方位”不同，方位返回相对于其他点的移动方向。
		
	 	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>在 Android 设备上，不支持 heading。<codeph class="+ topic/ph pr-d/codeph ">heading</codeph> 属性的值始终是 <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>（不是数字）。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:horizontalAccuracy:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">horizontalAccuracy</apiName><shortdesc class="- topic/shortdesc "> 
		水平精度（以米为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		水平精度（以米为单位）。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:latitude:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">latitude</apiName><shortdesc class="- topic/shortdesc ">
		纬度（以度为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		纬度（以度为单位）。纬度值范围如下：（-90 &lt;= <codeph class="+ topic/ph pr-d/codeph ">latitude</codeph> &lt;= 90）。负纬度代表南，正纬度代表北。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:longitude:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">longitude</apiName><shortdesc class="- topic/shortdesc ">
		经度（以度为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		经度（以度为单位）。经度值范围如下：（-180 &lt;= <codeph class="+ topic/ph pr-d/codeph ">longitude</codeph> &lt; 180）。负经度代表西，正经度代表东。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:speed:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">speed</apiName><shortdesc class="- topic/shortdesc "> 
		速度（以米/秒为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		速度（以米/秒为单位）。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:timestamp:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timestamp</apiName><shortdesc class="- topic/shortdesc "> 
		自初始化运行时后事件的毫秒数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		自初始化运行时后事件的毫秒数。例如，如果设备在应用程序初始化后 4 秒内捕获地理位置数据，然后应将事件的 timestamp 属性设置为 4000。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GeolocationEvent:verticalAccuracy:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">verticalAccuracy</apiName><shortdesc class="- topic/shortdesc "> 
		垂直精度（以米为单位）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		垂直精度（以米为单位）。
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:MediaEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">MediaEvent</apiName><shortdesc class="- topic/shortdesc ">
 当媒体流可用时，CameraRoll 和 CameraUI 类调度 MediaEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当媒体流可用时，CameraRoll 和 CameraUI 类调度 MediaEvent 对象。 
  
 <p class="- topic/p ">当用户选择图像时，CameraRoll 类调度 <codeph class="+ topic/ph pr-d/codeph ">select</codeph> 类型的 MediaEvent 对象。当返回从设备摄像头捕获的图像或视频时，CameraUI 类调度 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> 类型的 MediaEvent 对象。</p>
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#CameraRoll" class="- topic/link "><linktext class="- topic/linktext ">CameraRoll</linktext></link><link href="flash.media.xml#CameraUI" class="- topic/link "><linktext class="- topic/linktext ">CameraUI</linktext></link></related-links><adobeApiEvent id="flash.events:MediaEvent:COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MediaEvent:COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MediaEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">complete 事件类型。
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MediaEvent:SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:MediaEvent:SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MediaEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">select 事件类型。
		 </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:MediaEvent:MediaEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">MediaEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建包含关于可用媒体文件的信息的 MediaEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否冒泡。  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:MediaPromise</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">与所选图像对应的 MediaPromise 对象。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">MediaEvent 对象的构造函数。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建包含关于可用媒体文件的信息的 MediaEvent 对象。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MediaEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc "> 
		创建 MediaEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 MediaEvent 对象。
	    
	    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		创建 MediaEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		  
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MediaEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc "> 
		返回一个字符串，其中包含 MediaEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 MediaEvent 对象。
	     	
	     	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		返回一个字符串，其中包含 MediaEvent 对象的所有属性。使用以下格式：
		
		<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[MediaEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> data=<i class="+ topic/ph hi-d/i ">value</i> ] </codeph></p> 
		  
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MediaEvent:COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
	complete MediaEvent 的常量。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">complete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">complete 事件类型。
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">complete</codeph> MediaEvent 的常量。 
	
	<p class="- topic/p ">定义 <codeph class="+ topic/ph pr-d/codeph ">MediaEvent</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">data</codeph></entry><entry class="- topic/entry ">可用媒体实例的 MediaPromise 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MediaEvent:SELECT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SELECT</apiName><shortdesc class="- topic/shortdesc ">
		 select MediaEvent 的常量。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">select</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">select 事件类型。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <codeph class="+ topic/ph pr-d/codeph ">select</codeph> MediaEvent 的常量。
		 
		 <p class="- topic/p ">定义 <codeph class="+ topic/ph pr-d/codeph ">MediaEvent</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。此事件具有以下属性：</p>
		 
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">data</codeph></entry><entry class="- topic/entry ">可用媒体实例的 MediaPromise 对象。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MediaEvent:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
		可用媒体文件的 MediaPromise 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:MediaPromise</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		可用媒体文件的 MediaPromise 对象。
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:StageVideoEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StageVideoEvent</apiName><shortdesc class="- topic/shortdesc ">
 在 StageVideo 对象的 attachNetStream() 方法和附加的 NetStream 对象的 play() 方法都被调用后，StageVideo 对象调度 StageVideoEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">StageVideo 事件的事件对象。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在 StageVideo 对象的 <codeph class="+ topic/ph pr-d/codeph ">attachNetStream()</codeph> 方法和附加的 NetStream 对象的 <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> 方法都被调用后，StageVideo 对象调度 StageVideoEvent 对象。此外，根据不同的平台，播放状态中的任何更改可能导致调度此事件。StageVideoEvent 的一种类型是 <codeph class="+ topic/ph pr-d/codeph ">StageVideoEvent.RENDER_STATE</codeph>。
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.events:StageVideoEvent:RENDER_STATE_renderState" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">renderState</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:StageVideoEvent:RENDER_STATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StageVideoEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent/RENDER_STATE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_UNAVAILABLE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_UNAVAILABLE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_SOFTWARE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_SOFTWARE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_ACCELERATED" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_ACCELERATED</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StageVideoEvent:StageVideoEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StageVideoEvent</apiName><shortdesc class="- topic/shortdesc ">
			创建 Event 对象，其中包含有关 StageVideo 事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。StageVideoEvent 的一种类型是 <codeph class="+ topic/ph pr-d/codeph ">StageVideoEvent.RENDER_STATE</codeph>。
			</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
			</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
			</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">status</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指明目标 StageVideo 对象的状态。
			</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">colorSpace</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">显示的视频使用的颜色空间。
			
			</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">StageVideoEvent 对象的构造函数。
			</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
			创建 Event 对象，其中包含有关 StageVideo 事件的信息。将 Event 对象作为参数传递给事件侦听器。
			
			</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.media.xml#StageVideo" class="- topic/link "><linktext class="- topic/linktext ">flash.media.StageVideo</linktext></link><link href="flash.display.xml#Stage/stageVideos" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.stageVideos</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATE</linktext></link></related-links></apiConstructor><apiValue id="flash.events:StageVideoEvent:RENDER_STATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATE</apiName><shortdesc class="- topic/shortdesc ">
		StageVideoEvent.RENDER_STATE 常量定义 renderState 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">renderState</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">StageVideoEvent.RENDER_STATE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">renderState</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
		<p class="- topic/p ">此事件具有以下属性：</p>
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">colorSpace</codeph></entry><entry class="- topic/entry ">用于显示视频的可用色彩空间。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用事件侦听器主动处理 StageVideoEvent 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">指明视频是否正在被硬件或软件呈现（解码并显示），或完全没有呈现。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已更改状态的 StageVideo 对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent/RENDER_STATE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_UNAVAILABLE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_UNAVAILABLE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_SOFTWARE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_SOFTWARE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_ACCELERATED" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_ACCELERATED</linktext></link></related-links></apiValue><apiValue id="flash.events:StageVideoEvent:RENDER_STATUS_ACCELERATED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATUS_ACCELERATED</apiName><shortdesc class="- topic/shortdesc ">
		指明硬件正在解码并显示视频。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">accelerated</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDeprecated replacement="flash.media.VideoStatus.ACCELERATED" sinceVersion="Flash Player 10.2"/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		指明硬件正在解码并显示视频。 
		
		<p class="- topic/p ">此值为 StageVideoEvent 对象 <codeph class="+ topic/ph pr-d/codeph ">status</codeph> 属性的其中一个可能值。</p>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent/status" class="- topic/link "><linktext class="- topic/linktext ">status</linktext></link></related-links></apiValue><apiValue id="flash.events:StageVideoEvent:RENDER_STATUS_SOFTWARE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATUS_SOFTWARE</apiName><shortdesc class="- topic/shortdesc ">
		指明软件正在解码并显示视频。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">software</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDeprecated replacement="flash.media.VideoStatus.SOFTWARE" sinceVersion="Flash Player 10.2"/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		指明软件正在解码并显示视频。 
		
		<p class="- topic/p ">此值为 StageVideoEvent 对象 <codeph class="+ topic/ph pr-d/codeph ">status</codeph> 属性的其中一个可能值。</p>
		
		<p class="- topic/p ">例如，如果平台不支持硬件解码并以及视频的音频或视频编解码器的显示，则 StageVideoEvent 对象具有此状态值。</p>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent/status" class="- topic/link "><linktext class="- topic/linktext ">status</linktext></link></related-links></apiValue><apiValue id="flash.events:StageVideoEvent:RENDER_STATUS_UNAVAILABLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATUS_UNAVAILABLE</apiName><shortdesc class="- topic/shortdesc ">
		指明不可能显示使用 StageVideo 对象的视频。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unavailable</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiDeprecated replacement="flash.media.VideoStatus.UNAVAILABLE" sinceVersion="Flash Player 10.2"/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		指明不可能显示使用 StageVideo 对象的视频。 
		
		<p class="- topic/p ">此值为 StageVideoEvent 对象 <codeph class="+ topic/ph pr-d/codeph ">status</codeph> 属性的其中一个可能值。</p>
		
		<p class="- topic/p ">例如，如果一个平台不支持硬件或软件解码并显示视频的音频或视频编解码器。在这种情况下，StageVideoEvent 对象具有此状态值。</p>
		
		<p class="- topic/p ">如果没有可用的硬件解码器，也使用此状态值。此情况在用于电视的 AIR 中也可能发生。作为与之前版本的向后兼容，用于电视的 AIR 允许您使用 Video 对象进行硬件解码和显示。使用 Video 对象，就是使用底层硬件解码器，因此您可用的 StageVideo 对象就少一个。请注意，建议使用 StageVideo 对象进行硬件视频解码和显示。</p>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent/status" class="- topic/link "><linktext class="- topic/linktext ">status</linktext></link></related-links></apiValue><apiValue id="flash.events:StageVideoEvent:colorSpace:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">colorSpace</apiName><shortdesc class="- topic/shortdesc ">
		StageVideo 对象中显示的视频使用的颜色空间。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		StageVideo 对象中显示的视频使用的颜色空间。 
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#StageVideo" class="- topic/link "><linktext class="- topic/linktext ">flash.media.StageVideo</linktext></link></related-links></apiValue><apiValue id="flash.events:StageVideoEvent:status:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
		StageVideo 对象的状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		StageVideo 对象的状态。 
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_UNAVAILABLE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_UNAVAILABLE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_SOFTWARE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_SOFTWARE</linktext></link><link href="flash.events.xml#StageVideoEvent/RENDER_STATUS_ACCELERATED" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent.RENDER_STATUS_ACCELERATED</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:LocationChangeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">LocationChangeEvent</apiName><shortdesc class="- topic/shortdesc ">
     当加载新页面时，HTMLLoader 或 StageWebView 对象调度 LocationChangeEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     当加载新页面时，HTMLLoader 或 StageWebView 对象调度 LocationChangeEvent 对象。
	  
	 <p class="- topic/p ">有两种类型的 LocationChangeEvent： </p>
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">LocationChangeEvent.LOCATION_CHANGING</codeph>：在通过 StageWebView 对象中显示的内容启动更改之前调度。可以取消。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">LocationChangeEvent.LOCATION_CHANGE</codeph>：在每个位置更改后调度。无法取消。</li></ul>
	 
     </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#StageWebView" class="- topic/link "><linktext class="- topic/linktext ">StageWebView</linktext></link></related-links><apiConstructor id="flash.events:LocationChangeEvent:LocationChangeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">LocationChangeEvent</apiName><shortdesc class="- topic/shortdesc ">
     	创建 LocationChangeEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">location</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     	创建 LocationChangeEvent 对象。
     	
     	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:LocationChangeEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
     	</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><inheritDocs>
     	
     	</inheritDocs></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:LocationChangeEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
 		返回一个字符串，其中包含 LocationChangeEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 		返回一个字符串，其中包含 LocationChangeEvent 对象的所有属性。字符串的格式如下：
		<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[LocationChangeEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> eventPhase=<i class="+ topic/ph hi-d/i ">value</i> location=<i class="+ topic/ph hi-d/i ">value</i></codeph></p>
    	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:LocationChangeEvent:LOCATION_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCATION_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
     	在每个位置更改后调度。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">locationChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     	在每个位置更改后调度。
     	
     	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:LocationChangeEvent:LOCATION_CHANGING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCATION_CHANGING</apiName><shortdesc class="- topic/shortdesc ">
     	LOCATION_CHANGING 常量定义在页面位置发生更改之前调度的 LocationChangeEvent 对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">locationChanging</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     	<codeph class="+ topic/ph pr-d/codeph ">LOCATION_CHANGING</codeph> 常量定义在页面位置发生更改之前调度的 LocationChangeEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
     	
     	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:LocationChangeEvent:location:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">location</apiName><shortdesc class="- topic/shortdesc ">
     	更改的目标 URL。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     	更改的目标 URL。
     	
     	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:NetDataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NetDataEvent</apiName><shortdesc class="- topic/shortdesc ">
NetStream 对象在媒体流中遇到数据消息时会调度 NetDataEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
NetStream 对象在媒体流中遇到数据消息时会调度 NetDataEvent 对象。

<p class="- topic/p ">对于以下消息调度 NetDataEvent：</p>
<ul class="- topic/ul "><li class="- topic/li ">onCuePoint</li><li class="- topic/li ">onImageData</li><li class="- topic/li ">onMetaData</li><li class="- topic/li ">onPlayStatus（用于代码 NetStream.Play.Complete）</li><li class="- topic/li ">onTextData</li><li class="- topic/li ">onXMPData</li></ul>

</apiDesc></apiClassifierDetail><apiConstructor id="flash.events:NetDataEvent:NetDataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NetDataEvent</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个 Event 对象，其中包含有关媒体数据事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">timestamp</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据消息的时间戳
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">info</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据消息对象
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个 Event 对象，其中包含有关媒体数据事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NetDataEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 NetDataEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 NetDataEvent 对象。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 NetDataEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetDataEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 NetDataEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 NetMediaEvent 对象的所有属性。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 NetDataEvent 对象的所有属性。使用以下格式：
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NetDataEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> timestamp=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetDataEvent:MEDIA_TYPE_DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MEDIA_TYPE_DATA</apiName><shortdesc class="- topic/shortdesc ">
	 NetDataEvent.MEDIA_TYPE_DATA 常量定义 NetStream 对象在媒体流中遇到数据消息时调度的 NetDataEvent 对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mediaTypeData</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">NetDataEvent.MEDIA_TYPE_DATA</codeph> 常量定义·NetStream 对象在媒体流中遇到数据消息时调度的 NetDataEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NetDataEvent:info:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">info</apiName><shortdesc class="- topic/shortdesc ">
	 描述该消息的数据对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 描述该消息的数据对象。<codeph class="+ topic/ph pr-d/codeph ">info</codeph> 对象具有两个属性：<codeph class="+ topic/ph pr-d/codeph ">info.handler</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">info.args</codeph>。<codeph class="+ topic/ph pr-d/codeph ">info.handler</codeph> 是处理函数名称，如“onMetaData”或“onXMPData”。<codeph class="+ topic/ph pr-d/codeph ">info.args</codeph> 是参数数组。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NetDataEvent:timestamp:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timestamp</apiName><shortdesc class="- topic/shortdesc ">
	 媒体流中数据消息的时间戳。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 媒体流中数据消息的时间戳。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:NativeProcessExitEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeProcessExitEvent</apiName><shortdesc class="- topic/shortdesc ">
 退出进程时，由 NativeProcess 对象调度此事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 退出进程时，由 NativeProcess 对象调度此事件。可能会永不调度此事件。例如，如果子进程的运行时间比创建它的 AIR 应用程序运行时间长，则不会调度此事件。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess</linktext></link></related-links><adobeApiEvent id="flash.events:NativeProcessExitEvent:EXIT_exit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">exit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeProcessExitEvent:EXIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeProcessExitEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:NativeProcessExitEvent:NativeProcessExitEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NativeProcessExitEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建包含有关 NativeProcess 的退出代码的特定信息的 NativeProcessExitEvent
	
	</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型，可以作为 <codeph class="+ topic/ph pr-d/codeph ">Event.type</codeph> 访问。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">exitCode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">退出期间此进程返回到操作系统的次数。
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建包含有关 NativeProcess 的退出代码的特定信息的 NativeProcessExitEvent
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeProcessExitEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 NativeProcessExitEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 NativeProcessExitEvent 对象。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 NativeProcessExitEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeProcessExitEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 NativeProcessExitEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph> 对象的所有属性。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 NativeProcessExitEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NativeProcessExitEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> exitCode=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeProcessExitEvent:EXIT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXIT</apiName><shortdesc class="- topic/shortdesc ">
     定义 exit 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exit</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">exit</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeProcessExitEvent:exitCode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exitCode</apiName><shortdesc class="- topic/shortdesc ">
	退出时本机进程返回到主机操作系统的退出代码。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	退出时本机进程返回到主机操作系统的退出代码。如果 AIR 应用程序通过调用 NativeProcess 对象的 <codeph class="+ topic/ph pr-d/codeph ">exit()</codeph> 方法终止进程，则 <codeph class="+ topic/ph pr-d/codeph ">exitCode</codeph> 属性设置为 NaN。<i class="+ topic/ph hi-d/i ">注意：在 Windows 操作系统中，如果进程未退出但运行时退出或出错，则此值可能设置为 259 (STILL_ACTIVE)。为避免这种混乱，请不要在本机进程中使用 259 作为返回代码。</i>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DNSResolverEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DNSResolverEvent</apiName><shortdesc class="- topic/shortdesc ">
 DNSResolverEvent 类表示域名系统 (DNS) 查找操作的结果。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 DNSResolverEvent 类表示域名系统 (DNS) 查找操作的结果。
 
 <p class="- topic/p ">使用 DNSResolver <codeph class="+ topic/ph pr-d/codeph ">lookup()</codeph> 方法启动 DNS 查询。查询返回的资源记录放置在 DNSResolverEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">resourceRecords</codeph> 数组中。</p>
 
 </apiDesc><example conref="examples\DNSResolverEventExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.dns.xml#DNSResolver" class="- topic/link "><linktext class="- topic/linktext ">DNSResolver</linktext></link></related-links><adobeApiEvent id="flash.events:DNSResolverEvent:LOOKUP_lookup" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">lookup</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DNSResolverEvent:LOOKUP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DNSResolverEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当查找操作完成时由 DNSResolver 对象调度。
     
     </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DNSResolverEvent:DNSResolverEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DNSResolverEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建包含 DNS 查找操作结果的 DNSResolverEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">DNSResolverEvent.LOOKUP</codeph>
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">host</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在为新事件是响应而调用 DNSResolver 类的 <codeph class="+ topic/ph pr-d/codeph ">lookup()</codeph> 方法时使用的查询字符串，例如主机名、IP 地址或服务定位器。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">resourceRecords</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回的 DNS 资源记录的列表。
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建包含 DNS 查找操作结果的 DNSResolverEvent 对象。将 Event 对象作为参数传递给事件侦听器。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DNSResolverEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 DNSResolverEvent 对象的副本并将每个属性的值设置为与原始值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 ServerSocketConnectEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 DNSResolverEvent 对象的副本并将每个属性的值设置为与原始值相匹配。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DNSResolverEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    创建 DNSResolverEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph> 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 DNSResolverEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。字符串的格式如下：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[DNSResolverEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> host=<i class="+ topic/ph hi-d/i ">value</i> resourceRecords=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DNSResolverEvent:LOOKUP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOOKUP</apiName><shortdesc class="- topic/shortdesc ">
     定义 lookup 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">lookup</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当查找操作完成时由 DNSResolver 对象调度。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">lookup </codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DNSResolverEvent:host:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">host</apiName><shortdesc class="- topic/shortdesc ">
    在为新事件是响应而调用 DNSResolver 类的 lookup() 方法时使用的查询字符串，例如主机名、IP 地址或服务定位器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">在查找操作中使用的查询字符串。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    在为新事件是响应而调用 DNSResolver 类的 <codeph class="+ topic/ph pr-d/codeph ">lookup()</codeph> 方法时使用的查询字符串，例如主机名、IP 地址或服务定位器。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DNSResolverEvent:resourceRecords:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">resourceRecords</apiName><shortdesc class="- topic/shortdesc ">
	包含由 DNS 查找操作返回的资源记录的数组。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	包含由 DNS 查找操作返回的资源记录的数组。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:Event" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Event</apiName><shortdesc class="- topic/shortdesc ">
 Event 类作为创建 Event 对象的基类，当发生事件时，Event 对象将作为参数传递给事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Event 对象的基类。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Event 类作为创建 Event 对象的基类，当发生事件时，Event 对象将作为参数传递给事件侦听器。
 
 <p class="- topic/p ">Event 类的属性包含有关事件的基本信息，例如事件的类型或者是否可以取消事件的默认行为。对于许多事件（如由 Event 类常量表示的事件），此基本信息就足够了。但其他事件可能需要更详细的信息。<ph class="- topic/ph ">例如，与鼠标单击关联的事件需要包括有关单击事件的位置以及在单击事件期间是否按下了任何键的其他信息。您可以通过扩展 Event 类（MouseEvent 类执行的操作）将此类其他信息传递给事件侦听器。ActionScript 3.0</ph> API 为需要其他信息的常见事件定义多个 Event 子类。与每个 Event 子类关联的事件将在每个类的文档中加以介绍。</p>
 
 <p class="- topic/p ">Event 类的方法可以在事件侦听器函数中使用以影响事件对象的行为。某些事件有关联的默认行为。<ph class="- topic/ph ">例如，<codeph class="+ topic/ph pr-d/codeph ">doubleClick</codeph> 事件有关联的默认行为，此行为突出显示事件发生时鼠标指针下的词。</ph>通过调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法，您的事件侦听器可以取消此行为。<ph class="- topic/ph ">也可以通过调用 <codeph class="+ topic/ph pr-d/codeph ">stopPropagation()</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">stopImmediatePropagation()</codeph> 方法，将当前事件侦听器作为处理事件的最后一个事件侦听器。</ph></p>
 <p class="- topic/p ">其他信息源包括：</p>
 <ul class="- topic/ul "><li class="- topic/li ">Ted Patrick 的博客条目 <xref href="http://www.onflex.org/ted/2005/07/flash-player-mental-model-elastic.php" scope="external" class="- topic/xref ">Flash Player 心智模型 — 塑胶跑道</xref>中关于事件计时、代码执行、在运行时进行渲染等方面的有用说明。</li><li class="- topic/li ">Johannes Tacskovics 的博客条目<xref href="http://blog.johannest.com/2009/06/15/the-movieclip-life-cycle-revisited-from-event-added-to-event-removed_from_stage/" scope="external" class="- topic/xref ">影片剪辑生命周期</xref>中关于帧事件（如 ENTER_FRAME、EXIT_FRAME）计时的内容。</li><li class="- topic/li ">Trevor McCauley 的一篇讲述 ActionScript 操作的顺序的文章：<xref href="http://www.senocular.com/flash/tutorials/orderofoperations/" scope="external" class="- topic/xref ">ActionScript 中的操作顺序</xref>。</li><li class="- topic/li ">Matt Przybylski 关于创建自定义事件的博客条目：<xref href="http://evolve.reintroducing.com/2007/10/23/as3/as3-custom-events/" scope="external" class="- topic/xref ">AS3：自定义事件</xref>。</li></ul>
 
 
 </apiDesc><example conref="examples\EventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">EventExample</codeph> 类和 <codeph class="+ topic/ph pr-d/codeph ">Square</codeph> 自定义类来说明如何管理事件冒泡。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace(">> stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace(">> --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace(">> 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace(">> 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace(">> --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace(">> 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as" class="- topic/example "> 以下示例创建 <codeph class="+ topic/ph pr-d/codeph ">ADDED</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">ADDED_TO_STAGE</codeph> 事件以及 <codeph class="+ topic/ph pr-d/codeph ">REMOVED</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">REMOVED_FROM_STAGE</codeph> 事件之间区别的演示。单击 Sprite 将从舞台将其删除，同时还删除其中嵌套的所有内容。例如，单击最大的 Sprite 将导致一个 <codeph class="+ topic/ph pr-d/codeph ">REMOVED</codeph> 事件和三个 <codeph class="+ topic/ph pr-d/codeph ">REMOVED_FROM_STAGE</codeph> 事件触发。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#EventDispatcher" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#EventDispatcher/event:activate" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE" class="- topic/link "><linktext class="- topic/linktext ">DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">addedToStage</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:addedToStage" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED" class="- topic/link "><linktext class="- topic/linktext ">ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED" class="- topic/link "><linktext class="- topic/linktext ">REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE" class="- topic/link "><linktext class="- topic/linktext ">REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">added</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:added" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE" class="- topic/link "><linktext class="- topic/linktext ">ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED" class="- topic/link "><linktext class="- topic/linktext ">REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE" class="- topic/link "><linktext class="- topic/linktext ">REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:cancel" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">change</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:change" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:clear" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/event:close" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">closing</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow/event:closing" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">connect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/event:connect" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:COPY</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:copy" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cut</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:CUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:cut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deactivate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#EventDispatcher/event:deactivate" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE" class="- topic/link "><linktext class="- topic/linktext ">ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">displaying</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeMenu/event:displaying" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">enterFrame</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:enterFrame" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">exiting</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:exiting" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">exitFrame</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:exitFrame" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">frameConstructed</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:frameConstructed" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">fullScreen</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/event:fullScreen" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">htmlBoundsChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange" class="- topic/link "><linktext class="- topic/linktext ">htmlBoundsChange 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">htmlDOMInitialize</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize" class="- topic/link "><linktext class="- topic/linktext ">htmlDOMInitialize 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">htmlRender</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:htmlRender" class="- topic/link "><linktext class="- topic/linktext ">htmlRender 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">id3</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:ID3</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/event:id3" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">init</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:INIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:init" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">locationChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:locationChange" class="- topic/link "><linktext class="- topic/linktext ">locationChange 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseLeave</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/event:mouseLeave" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">networkChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:networkChange" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">paste</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:paste" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PREPARING_flash.events.Event" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">flash.events.Event</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:PREPARING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeMenu/event:preparing" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu.preparing</linktext></link><link href="flash.display.xml#NativeMenuItem/event:preparing" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenuItem.preparing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">removedFromStage</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:removedFromStage" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED" class="- topic/link "><linktext class="- topic/linktext ">ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED" class="- topic/link "><linktext class="- topic/linktext ">REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE" class="- topic/link "><linktext class="- topic/linktext ">ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">removed</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:removed" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED" class="- topic/link "><linktext class="- topic/linktext ">ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE" class="- topic/link "><linktext class="- topic/linktext ">ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE" class="- topic/link "><linktext class="- topic/linktext ">REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">render</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:render" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">resize</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/event:resize" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">scroll</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:scroll" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectAll</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:selectAll" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:select" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">soundComplete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundChannel/event:soundComplete" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:STANDARD_ERROR_CLOSE_flash.events.Event" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">flash.events.Event</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:STANDARD_ERROR_CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:Event:STANDARD_INPUT_CLOSE_flash.events.Event" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">flash.events.Event</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:STANDARD_INPUT_CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:Event:STANDARD_OUTPUT_CLOSE_flash.events.Event" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">flash.events.Event</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:STANDARD_OUTPUT_CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">tabChildrenChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">tabEnabledChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">tabIndexChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:tabIndexChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TEXT_INTERACTION_MODE_CHANGE_textInteractionModeChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">textInteractionModeChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:TEXT_INTERACTION_MODE_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:textInteractionModeChange" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.textInteractionModeChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">unload</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:unload" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">userIdle</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:userIdle" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">userIdle</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:userPresent" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Event</apiName><shortdesc class="- topic/shortdesc ">
     创建一个作为参数传递给事件侦听器的 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型，可以作为 <codeph class="+ topic/ph pr-d/codeph ">Event.type</codeph> 访问。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">用于创建新的 Event 对象。
      
      </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建一个作为参数传递给事件侦听器的 Event 对象。
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 复制 Event 子类的实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个新的 Event 对象，它与原始对象相同。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 复制 Event 子类的实例。
	 
     <p class="- topic/p ">返回一个新的 Event 对象，它是 Event 对象的原始实例的副本。通常您不需要调用 <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>；当您重新调度事件，即调用 <codeph class="+ topic/ph pr-d/codeph ">dispatchEvent(event)</codeph>（从正在处理 <codeph class="+ topic/ph pr-d/codeph ">event</codeph> 的处理函数）时，EventDispatcher 类会自动调用它。</p>
	 
	 <p class="- topic/p ">新的 Event 对象包括原始对象的所有属性。</p> 
	 
	 <p class="- topic/p ">当您创建自己的自定义 Event 类时，必须覆盖继承的 <codeph class="+ topic/ph pr-d/codeph ">Event.clone()</codeph> 方法，以复制自定义类的属性。如果您未设置在事件子类中添加的所有属性，则当侦听器处理重新调度的事件时，这些属性将不会有正确的值。</p>
	 
	 <p class="- topic/p ">在本示例中，<codeph class="+ topic/ph pr-d/codeph ">PingEvent</codeph> 是 <codeph class="+ topic/ph pr-d/codeph ">Event</codeph> 的子类，因此它可以实现其自己的 <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph> 版本。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">formatToString</apiName><shortdesc class="- topic/shortdesc ">
	 用于在自定义 ActionScript 3.0 Event 类中实现 toString() 方法的实用程序函数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">自定义 Event 类的名称和 <codeph class="+ topic/ph pr-d/codeph ">...arguments</codeph> 参数的字符串值。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">className</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">自定义 Event 类的名称。<ph class="- topic/ph ">在上面的示例中，<codeph class="+ topic/ph pr-d/codeph ">className</codeph> 参数为 <codeph class="+ topic/ph pr-d/codeph ">PingEvent</codeph>。</ph>
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Event 类的属性<ph class="- topic/ph ">和在自定义 Event 类中添加的属性。在上面的示例中，<codeph class="+ topic/ph pr-d/codeph ">...arguments</codeph> 参数包括 <codeph class="+ topic/ph pr-d/codeph ">type</codeph>、<codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph>、<codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">URL</codeph></ph>。
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 用于在自定义 ActionScript 3.0 Event 类中实现 <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> 方法的实用程序函数。<ph class="- topic/ph ">建议覆盖 <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> 方法，但不是必须覆盖。</ph>
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isDefaultPrevented</apiName><shortdesc class="- topic/shortdesc ">
	检查是否已对事件调用 preventDefault() 方法。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果已调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph>，将返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则将返回 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	检查是否已对事件调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法。如果已调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法，则返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则返回 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/preventDefault()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">preventDefault</apiName><shortdesc class="- topic/shortdesc ">
	如果可以取消事件的默认行为，则取消该行为。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	如果可以取消事件的默认行为，则取消该行为。
	
	<p class="- topic/p ">许多事件都有默认执行的关联行为。<ph class="- topic/ph ">例如，如果用户在文本字段中键入一个字符，则默认行为就是在文本字段中显示该字符。由于可以取消 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.TEXT_INPUT</codeph> 事件的默认行为，因此您可以使用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法来防止显示该字符。</ph>
	
	</p>
	
    <p class="- topic/p ">不可取消行为的一个示例是与 <codeph class="+ topic/ph pr-d/codeph ">Event.REMOVED</codeph> 事件关联的默认行为，只要 Flash Player 从显示列表中删除显示对象，就会生成该事件。由于无法取消默认行为（删除元素），因此 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法对此默认行为无效。 </p>
	
	<p class="- topic/p ">您可以使用 <codeph class="+ topic/ph pr-d/codeph ">Event.cancelable</codeph> 属性来检查是否可以防止与特定事件关联的默认行为。如果 <codeph class="+ topic/ph pr-d/codeph ">Event.cancelable</codeph> 的值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则可以使用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 来取消事件；否则，<codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 无效。</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/isDefaultPrevented()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable" class="- topic/link "><linktext class="- topic/linktext ">Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">stopImmediatePropagation</apiName><shortdesc class="- topic/shortdesc ">
	防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	防止对事件流中当前节点中和所有后续节点中的事件侦听器进行处理。<ph class="- topic/ph ">此方法会立即生效，并且会影响当前节点中的事件侦听器。相比之下，在当前节点中的所有事件侦听器都完成处理之前，<codeph class="+ topic/ph pr-d/codeph ">stopPropagation()</codeph> 方法不会生效。</ph>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph>。</p>
	
	
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/stopPropagation()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">stopPropagation</apiName><shortdesc class="- topic/shortdesc ">
	防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	防止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。<ph class="- topic/ph ">此方法不会影响当前节点 (<codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph>) 中的任何事件侦听器。相比之下，<codeph class="+ topic/ph pr-d/codeph ">stopImmediatePropagation()</codeph> 方法可以防止对当前节点中和后续节点中的事件侦听器进行处理。对此方法的其他调用没有任何效果。可以在事件流的任何阶段中调用此方法。</ph>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此方法不会取消与此事件相关联的行为；有关此功能的信息，请参阅 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph>。</p>
	
	
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/stopImmediatePropagation()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 Event 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 Event 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 Event 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[Event type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ACTIVATE</apiName><shortdesc class="- topic/shortdesc ">
	ACTIVATE 常量定义 activate 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">activate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ACTIVATE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">activate</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p class="- topic/p ">用于电视的 AIR 设备从不自动调度此事件。 但是您可以手动调度。</p>
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">activate</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#EventDispatcher/event:activate" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE" class="- topic/link "><linktext class="- topic/linktext ">DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ADDED_TO_STAGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.ADDED_TO_STAGE 常量定义 addedToStage 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">addedToStage</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.ADDED_TO_STAGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">addedToStage</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">DisplayObject 实例将添加到舞台的显示列表中，可直接添加它，也可以添加包含 DisplayObject 实例的子树。如果 DisplayObject 实例将被直接添加，会在此事件之前发生 <codeph class="+ topic/ph pr-d/codeph ">added</codeph> 事件。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:addedToStage" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED" class="- topic/link "><linktext class="- topic/linktext ">ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED" class="- topic/link "><linktext class="- topic/linktext ">REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE" class="- topic/link "><linktext class="- topic/linktext ">REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ADDED</apiName><shortdesc class="- topic/shortdesc ">
	Event.ADDED 常量定义 added 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">added</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.ADDED</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">added</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">要添加到显示列表中的 DisplayObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:added" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE" class="- topic/link "><linktext class="- topic/linktext ">ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED" class="- topic/link "><linktext class="- topic/linktext ">REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE" class="- topic/link "><linktext class="- topic/linktext ">REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CANCEL</apiName><shortdesc class="- topic/shortdesc ">
	Event.CANCEL 常量定义 cancel 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">cancel</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.CANCEL</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">对已取消其操作的对象的引用。</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:cancel" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.CHANGE 常量定义 change 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">change</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">change</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已修改其值的对象。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:change" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLEAR</apiName><shortdesc class="- topic/shortdesc ">
	Event.CLEAR 常量定义 clear 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">clear</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.CLEAR</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>TextField 对象<i class="+ topic/ph hi-d/i ">不会</i>调度 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。但是，扩展 InteractiveObject 类的其他类，包括使用 Flash 文本引擎 (FTE) 构建的组件，将调度这些事件，以响应诸如键盘快捷键和上下文菜单这样的用户操作。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:clear" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLOSE</apiName><shortdesc class="- topic/shortdesc ">
	Event.CLOSE 常量定义 close 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">close</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.CLOSE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">close</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已关闭其连接的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/event:close" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLOSING</apiName><shortdesc class="- topic/shortdesc ">
	Event.CLOSING 常量定义 closing 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">closing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.CLOSING</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">closing</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消此事件对象将停止关闭操作。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">要关闭其连接的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow/event:closing" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
	Event.COMPLETE 常量定义 complete 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">complete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已完成加载的网络对象。 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CONNECT</apiName><shortdesc class="- topic/shortdesc ">
	Event.CONNECT 常量定义 connect 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">connect</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.CONNECT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">connect</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已建立网络连接的 Socket 或 XMLSocket 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/event:connect" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COPY</apiName><shortdesc class="- topic/shortdesc ">
	定义 copy 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">copy</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">copy</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">copy</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>TextField 对象<i class="+ topic/ph hi-d/i ">不会</i>调度 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。但是，扩展 InteractiveObject 类的其他类，包括使用 Flash 文本引擎 (FTE) 构建的组件，将调度这些事件，以响应诸如键盘快捷键和上下文菜单这样的用户操作。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:copy" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CUT</apiName><shortdesc class="- topic/shortdesc ">
	定义 cut 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">cut</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">cut</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">cut</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>TextField 对象<i class="+ topic/ph hi-d/i ">不会</i>调度 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。但是，扩展 InteractiveObject 类的其他类，包括使用 Flash 文本引擎 (FTE) 构建的组件，将调度这些事件，以响应诸如键盘快捷键和上下文菜单这样的用户操作。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:cut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEACTIVATE</apiName><shortdesc class="- topic/shortdesc ">
	Event.DEACTIVATE 常量定义 deactivate 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">deactivate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.DEACTIVATE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">deactivate</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
    <p class="- topic/p ">用于电视的 AIR 设备从不自动调度此事件。 但是您可以手动调度。</p>
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">deactivate</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#EventDispatcher/event:deactivate" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE" class="- topic/link "><linktext class="- topic/linktext ">ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DISPLAYING</apiName><shortdesc class="- topic/shortdesc ">
	 Event.DISPLAYING 常量定义 displaying 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">displaying</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Event.DISPLAYING</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">displaying</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>无论目标是否出现在显示列表中，此事件都不会通过“捕获阶段”，而是被直接调度给此目标。</p>
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">将要显示的 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeMenu/event:displaying" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ENTER_FRAME</apiName><shortdesc class="- topic/shortdesc ">
	Event.ENTER_FRAME 常量定义 enterFrame 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">enterFrame</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.ENTER_FRAME</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">enterFrame</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">enterFrame</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:enterFrame" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXITING</apiName><shortdesc class="- topic/shortdesc ">
	Event.EXITING 常量定义 exiting 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exiting</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.EXITING</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">exiting</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消此事件对象将停止退出操作。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">NativeApplication 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:exiting" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXIT_FRAME</apiName><shortdesc class="- topic/shortdesc ">
	Event.EXIT_FRAME 常量定义 exitFrame 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exitFrame</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.EXIT_FRAME</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">exitFrame</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">enterFrame</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:exitFrame" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FRAME_CONSTRUCTED</apiName><shortdesc class="- topic/shortdesc ">
	Event.FRAME_CONSTRUCTED 常量定义 frameConstructed 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">frameConstructed</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.FRAME_CONSTRUCTED</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">frameConstructed</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">frameConstructed</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:frameConstructed" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FULLSCREEN</apiName><shortdesc class="- topic/shortdesc ">
	Event.FULL_SCREEN 常量定义 fullScreen 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">fullScreen</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.FULL_SCREEN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">fullScreen</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">Stage 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/event:fullScreen" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HTML_BOUNDS_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.HTML_BOUNDS_CHANGE 常量定义 htmlBoundsChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">htmlBoundsChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.HTML_BOUNDS_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">htmlBoundsChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange" class="- topic/link "><linktext class="- topic/linktext ">htmlBoundsChange 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HTML_DOM_INITIALIZE</apiName><shortdesc class="- topic/shortdesc ">
	Event.HTML_DOM_INITIALIZE 常量定义 htmlDOMInitialize 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">htmlDOMInitialize</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.HTML_DOM_INITIALIZE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">htmlDOMInitialize</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize" class="- topic/link "><linktext class="- topic/linktext ">htmlDOMInitialize 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HTML_RENDER</apiName><shortdesc class="- topic/shortdesc ">
	Event.HTML_RENDER 常量定义 htmlRender 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">htmlRender</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.HTML_RENDER</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">htmlRender</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:htmlRender" class="- topic/link "><linktext class="- topic/linktext ">htmlRender 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ID3</apiName><shortdesc class="- topic/shortdesc ">
	Event.ID3 常量定义 id3 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">id3</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.ID3</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">id3</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">加载 MP3 的 Sound 对象，ID3 数据现在可用于此对象。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/event:id3" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">INIT</apiName><shortdesc class="- topic/shortdesc ">
	Event.INIT 常量定义 init 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">init</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.INIT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">init</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">与所加载的 SWF 文件相关联的 LoaderInfo 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:init" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOCATION_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.LOCATION_CHANGE 常量定义 locationChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">locationChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.LOCATION_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">locationChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html#event:locationChange" class="- topic/link "><linktext class="- topic/linktext ">locationChange 事件</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_LEAVE</apiName><shortdesc class="- topic/shortdesc ">
	Event.MOUSE_LEAVE 常量定义 mouseLeave 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseLeave</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.MOUSE_LEAVE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">mouseLeave</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">Stage 对象。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/event:mouseLeave" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NETWORK_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.NETWORK_CHANGE 常量定义 networkChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">networkChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.NETWORK_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">networkChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:networkChange" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">OPEN</apiName><shortdesc class="- topic/shortdesc ">
	Event.OPEN 常量用于定义 open 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">open</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.OPEN</codeph> 常量用于定义 <codeph class="+ topic/ph pr-d/codeph ">open</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已打开连接的网络对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PASTE</apiName><shortdesc class="- topic/shortdesc ">
	Event.PASTE 常量定义 paste 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">paste</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.PASTE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>TextField 对象<i class="+ topic/ph hi-d/i ">不会</i>调度 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。但是，扩展 InteractiveObject 类的其他类，包括使用 Flash 文本引擎 (FTE) 构建的组件，将调度这些事件，以响应诸如键盘快捷键和上下文菜单这样的用户操作。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:paste" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PREPARING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PREPARING</apiName><shortdesc class="- topic/shortdesc ">
	 Event.PREPARING 常量定义 preparing 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">preparing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">Event.PREPARING</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">preparing</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>无论目标是否出现在显示列表中，此事件都不会通过“捕获阶段”，而是被直接调度给此目标。</p>
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">调度此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">调度此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeMenu/event:preparing" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu.preparing</linktext></link><link href="flash.display.xml#NativeMenuItem/event:preparing" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenuItem.preparing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">REMOVED_FROM_STAGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.REMOVED_FROM_STAGE 常量定义 removedFromStage 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">removedFromStage</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.REMOVED_FROM_STAGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">removedFromStage</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">DisplayObject 实例将从舞台的显示列表中删除，可直接删除它，也可以删除包含 DisplayObject 实例的子树。如果 DisplayObject 实例将被直接删除，会在此事件之前发生 <codeph class="+ topic/ph pr-d/codeph ">removed</codeph> 事件。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:removedFromStage" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED" class="- topic/link "><linktext class="- topic/linktext ">ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED" class="- topic/link "><linktext class="- topic/linktext ">REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE" class="- topic/link "><linktext class="- topic/linktext ">ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">REMOVED</apiName><shortdesc class="- topic/shortdesc ">
	Event.REMOVED 常量定义 removed 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">removed</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.REMOVED</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">removed</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">要从显示列表中删除的 DisplayObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:removed" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED" class="- topic/link "><linktext class="- topic/linktext ">ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE" class="- topic/link "><linktext class="- topic/linktext ">ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE" class="- topic/link "><linktext class="- topic/linktext ">REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER</apiName><shortdesc class="- topic/shortdesc ">
	Event.RENDER 常量定义 render 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">render</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.RENDER</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">render</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此事件既不具有“捕获阶段”也不具有“冒泡阶段”，这意味着必须直接将事件侦听器添加到任何潜在的目标，而无论目标是否位于显示列表中。</p>
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不能取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">render</codeph> 事件注册的侦听器的任何 DisplayObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/event:render" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESIZE</apiName><shortdesc class="- topic/shortdesc ">
	Event.RESIZE 常量定义 resize 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resize</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.RESIZE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">resize</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">Stage 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/event:resize" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SCROLL</apiName><shortdesc class="- topic/shortdesc ">
	Event.SCROLL 常量定义 scroll 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">scroll</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.SCROLL</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">scroll</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已滚动的 TextField 对象。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 属性不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:scroll" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll" class="- topic/link "><linktext class="- topic/linktext ">flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SELECT_ALL</apiName><shortdesc class="- topic/shortdesc ">
	Event.SELECT_ALL 常量定义 selectAll 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">selectAll</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.SELECT_ALL</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有为 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件注册的侦听器的任何 InteractiveObject 实例。</entry></row></tbody></tgroup></adobetable>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>TextField 对象<i class="+ topic/ph hi-d/i ">不会</i>调度 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。TextField 对象的上下文菜单中始终包含“剪切”、“复制”、“粘贴”、“清除”和“全选”命令。您不能从 TextField 对象的上下文菜单中删除这些命令。对于 TextField 对象，选择这些命令（或等效键盘命令）不会生成 <codeph class="+ topic/ph pr-d/codeph ">clear</codeph>、<codeph class="+ topic/ph pr-d/codeph ">copy</codeph>、<codeph class="+ topic/ph pr-d/codeph ">cut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">paste</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">selectAll</codeph> 事件。但是，扩展 InteractiveObject 类的其他类，包括使用 Flash 文本引擎 (FTE) 构建的组件，将调度这些事件，以响应诸如键盘快捷键和上下文菜单这样的用户操作。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:selectAll" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SELECT</apiName><shortdesc class="- topic/shortdesc ">
	Event.SELECT 常量定义 select 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">select</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.SELECT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">select</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry "> 对象，已在其中选定了一个项目。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:select" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SOUND_COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
	Event.SOUND_COMPLETE 常量定义 soundComplete 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">soundComplete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.SOUND_COMPLETE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">soundComplete</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">其中声音已播放完毕的 SoundChannel 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundChannel/event:soundComplete" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:STANDARD_ERROR_CLOSE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_ERROR_CLOSE</apiName><shortdesc class="- topic/shortdesc ">
	Event.STANDARD_ERROR_CLOSE 常量定义 standardErrorClose 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardErrorClose</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.STANDARD_ERROR_CLOSE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">standardErrorClose</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeProcess 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:STANDARD_INPUT_CLOSE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_INPUT_CLOSE</apiName><shortdesc class="- topic/shortdesc ">
	Event.STANDARD_INPUT_CLOSE 常量定义 standardInputClose 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardInputClose</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.STANDARD_INPUT_CLOSE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">standardInputClose</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeProcess 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:STANDARD_OUTPUT_CLOSE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_OUTPUT_CLOSE</apiName><shortdesc class="- topic/shortdesc ">
	Event.STANDARD_OUTPUT_CLOSE 常量定义 standardOutputClose 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardOutputClose</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.STANDARD_OUTPUT_CLOSE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">standardOutputClose</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeProcess 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TAB_CHILDREN_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.TAB_CHILDREN_CHANGE 常量定义 tabChildrenChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">tabChildrenChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.TAB_CHILDREN_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">tabChildrenChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">其 tabChildren 标志已更改的对象。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TAB_ENABLED_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.TAB_ENABLED_CHANGE 常量定义 tabEnabledChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">tabEnabledChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.TAB_ENABLED_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">tabEnabledChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">其 tabEnabled 标志已更改的 InteractiveObject。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TAB_INDEX_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.TAB_INDEX_CHANGE 常量定义 tabIndexChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">tabIndexChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.TAB_INDEX_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">tabIndexChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">其 tabIndex 已更改的对象。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:tabIndexChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TEXT_INTERACTION_MODE_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TEXT_INTERACTION_MODE_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	Event.TEXT_INTERACTION_MODE_CHANGE 常量定义交互模式事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="11" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">textInteractionModeChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.TEXT_INTERACTION_MODE_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">interaction mode</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">其 interaction mode 属性已更改的 TextField 对象。例如，在 Android 上，您可以通过上下文菜单将 interaction mode 更改为 SELECTION。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 属性不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:textInteractionModeChange" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.textInteractionModeChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNLOAD</apiName><shortdesc class="- topic/shortdesc ">
	Event.UNLOAD 常量定义 unload 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unload</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.UNLOAD</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">unload</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">LoaderInfo 对象与将被卸载或替换的 SWF 文件相关联。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:unload" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">USER_IDLE</apiName><shortdesc class="- topic/shortdesc ">
	Event.USER_IDLE 常量定义 userIdle 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">userIdle</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.USER_IDLE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">userIdle</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:userIdle" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">USER_PRESENT</apiName><shortdesc class="- topic/shortdesc ">
	Event.USER_PRESENT 常量定义 userPresent 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">userPresent</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">Event.USER_PRESENT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">userPresent</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NativeApplication 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication/event:userPresent" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bubbles</apiName><shortdesc class="- topic/shortdesc ">
	表示事件是否为冒泡事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示事件是否为冒泡事件。如果事件可以冒泡，则此值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	
	
	<p class="- topic/p ">发生事件时，该事件在事件流的三个阶段中移动：捕获阶段，该阶段从显示列表层次结构的顶部流动到目标节点之前的节点；目标阶段，该阶段只包括目标节点；冒泡阶段，该阶段从目标节点的后续节点沿显示列表层次结构向上往回流动。</p>
	
	<p class="- topic/p ">某些事件（例如 <codeph class="+ topic/ph pr-d/codeph ">activate</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">unload</codeph> 事件）没有冒泡阶段。对于没有冒泡阶段的事件，<codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性的值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cancelable</apiName><shortdesc class="- topic/shortdesc ">
	表示是否可以阻止与事件相关联的行为。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示是否可以阻止与事件相关联的行为。如果可以取消该行为，则此值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event/preventDefault()" class="- topic/link "><linktext class="- topic/linktext ">Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentTarget</apiName><shortdesc class="- topic/shortdesc ">
	当前正在使用某个事件侦听器处理 Event 对象的对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	当前正在使用某个事件侦听器处理 Event 对象的对象。例如，如果用户单击“确定”按钮，则当前目标可以是包含该按钮的节点，也可以是它的已为该事件注册了事件侦听器的始祖之一。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">eventPhase</apiName><shortdesc class="- topic/shortdesc ">
	事件流中的当前阶段。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件流中的当前阶段。此属性可以包含以下数值：
	<ul class="- topic/ul "><li class="- topic/li ">  捕获阶段 (<codeph class="+ topic/ph pr-d/codeph ">EventPhase.CAPTURING_PHASE</codeph>)。</li><li class="- topic/li ">  目标阶段 (<codeph class="+ topic/ph pr-d/codeph ">EventPhase.AT_TARGET</codeph>)。</li><li class="- topic/li ">  冒泡阶段 (<codeph class="+ topic/ph pr-d/codeph ">EventPhase.BUBBLING_PHASE</codeph>)。</li></ul>
	
	
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">target</apiName><shortdesc class="- topic/shortdesc ">
	事件目标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件目标。此属性包含目标节点。例如，如果用户单击“确定”按钮，则目标节点就是包含该按钮的显示列表节点。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">type</apiName><shortdesc class="- topic/shortdesc ">
	事件的类型。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件的类型。类型区分大小写。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:TextEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TextEvent</apiName><shortdesc class="- topic/shortdesc ">
 用户在文本字段中输入文本或在启用 HTML 的文本字段中单击超链接时，对象将调度 TextEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">TextEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 用户在文本字段中输入文本或在启用 HTML 的文本字段中单击超链接时，对象将调度 TextEvent 对象。有两种类型的文本事件：<codeph class="+ topic/ph pr-d/codeph ">TextEvent.LINK</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.TEXT_INPUT</codeph>。
 
 </apiDesc><example conref="examples\TextEventExample.as" class="- topic/example "> 以下示例使用 TextEventExample 类创建文本字段，并侦听这些字段上的各个文本事件。该示例执行下列任务：
 <ol class="- topic/ol "><li class="- topic/li ">本示例声明了以后要使用的两个 URL 的常量。</li><li class="- topic/li ">本示例声明了以后要使用的类型为 TextField 的两个变量。</li><li class="- topic/li ">类构造函数调用以下两个方法：
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">init()</codeph> 初始化 TextField 对象并将事件侦听器添加到这些对象中。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> 将 TextField 添加到显示列表中并赋予要显示的文本。</li></ul></li><li class="- topic/li ">侦听器 <codeph class="+ topic/ph pr-d/codeph ">linkHandler()</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 根据其事件类型响应事件。如果 Web 浏览器尚未打开，则 <codeph class="+ topic/ph pr-d/codeph ">linkHandler()</codeph> 方法将打开 Web 浏览器，并导航到单击的 URL。每次在关联的文本字段中按下某个键时，<codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法仅显示信息。</li></ol>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>本示例中显示的域是虚构的，<codeph class="+ topic/ph pr-d/codeph ">[yourDomain]</codeph> 应该替换为一个真实存在的域。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br />";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'>";
            link += "&lt;u>";
            link += "&lt;b>";
            link += "&lt;a href='event:" + url + "'>" + text + "&lt;/a>";
            link += "&lt;/b>";
            link += "&lt;/u>";
            link += "&lt;/font>";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace(">> ============================");
            trace(">> e.text: " + e.text);
            trace(">> textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">link</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as" class="- topic/example "> 在此示例中，用户单击 HTML 文本中的超链接时将触发 text 事件。用户基于系统的操作系统而转到指定的网站，或基于用户选择的半径绘制一个圆，具体取决于该链接。 
   
 <p class="- topic/p ">创建一个文本字段，并使用 <codeph class="+ topic/ph pr-d/codeph ">htmlText</codeph> 属性将其内容设置为 HTML 格式的字符串。这些链接带有下划线，以便让用户更容易地识别它们。（只有在鼠标指针位于链接上方后，Adobe Flash Player 才会更改鼠标指针。）为了确保用户的单击操作将调用 ActionScript 方法，链接的 URL 应以字符串<codeph class="+ topic/ph pr-d/codeph ">“event:”</codeph>开头并且为 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.LINK</codeph> 事件添加了侦听器。</p> 
 
 <p class="- topic/p ">在用户单击链接后触发的 <codeph class="+ topic/ph pr-d/codeph ">linkHandler()</codeph> 方法用于管理文本字段的所有 link 事件。第一个 if 语句检查事件的 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性，它保存 URL 中<codeph class="+ topic/ph pr-d/codeph ">“event:”</codeph>字符串后面的其余部分。如果用户单击了操作系统的链接，则会使用用户的当前操作系统名称（从系统的 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> 属性中获取）使用户转到指定的网站。否则，使用所选的半径大小（通过事件的 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性传递）在文本字段下面绘制一个圆。每次用户单击半径链接时，将会清除以前绘制的圆，并使用所选的半径大小绘制一个新的红色圆。</p> 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#TextEvent/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link><link href="flash.text.xml#TextField/event:link" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">textInput</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as" class="- topic/example "> 下面的示例指导用户生成一个特殊的组合密钥（类似于密码）。此组合密钥具有 7 个字母数字字符，其中第 2 个和第 5 个字符是数字。
 
 <p class="- topic/p ">共创建了三个文本字段，分别用于保存预备说明、用户输入以及警告（错误）消息。添加了一个事件侦听器，以便通过触发 <codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法来响应用户的文本输入。（每次用户输入文本时，都会调度 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.TEXT_INPUT</codeph> 事件。） </p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>如果用户输入字符，并且不是作为任何键盘输入（如 backspace）的响应，则会调度 text 事件。要捕获所有键盘事件，请使用 <codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent</codeph> 事件的侦听器。）</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法用于控制和管理用户输入。<codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法用于禁止 Adobe Flash Player 立即在输入文本字段中显示文本。应用程序负责更新该字段。如果撤消用户对已输入的字符（<codeph class="+ topic/ph pr-d/codeph ">result</codeph> 字符串）执行的删除或修改操作，当用户输入新字符时，则会将输入文本字段的内容重新分配给 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> 字符串。另外，为了获得一致的用户体验，<codeph class="+ topic/ph pr-d/codeph ">setSelection()</codeph> 方法会将插入点（尖号）放在文本字段中上次选择的字符后面。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法中的第一个 if 语句检查组合密钥的第 2 个和第 5 个字符位置的输入内容（必须为数字）。如果用户输入正确无误，则会调用 <codeph class="+ topic/ph pr-d/codeph ">updateCombination()</codeph> 方法，并将用户输入附加到 (<codeph class="+ topic/ph pr-d/codeph ">result</codeph>) 组合密钥字符串中。<codeph class="+ topic/ph pr-d/codeph ">updateCombination()</codeph> 方法还将插入点移到所选字符的后面。在输入 7 个字符后，<codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法中的最后一个 if 语句将 <codeph class="+ topic/ph pr-d/codeph ">inputTextField</codeph> 文本字段类型由 <codeph class="+ topic/ph pr-d/codeph ">INPUT</codeph> 更改为 <codeph class="+ topic/ph pr-d/codeph ">DYNAMIC</codeph>，这意味着用户无法再输入或更改任何字符。</p>
  
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:textInput" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TextEvent</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个 Event 对象，其中包含有关文本事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">TextEvent.LINK</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.TEXT_INPUT</codeph>。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">用户输入的一个或多个文本字符。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">TextEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个 Event 对象，其中包含有关文本事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 TextEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 TextEvent 对象。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 TextEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 TextEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 TextEvent 对象的所有属性。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 TextEvent 对象的所有属性。字符串的格式如下：
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[TextEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> text=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LINK</apiName><shortdesc class="- topic/shortdesc ">
     定义 link 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">link</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">link</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	 
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">包含已单击的超链接的文本字段。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">URL 中“event:”之后的其余部分</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as" class="- topic/example "> 在此示例中，用户单击 HTML 文本中的超链接时将触发 text 事件。用户基于系统的操作系统而转到指定的网站，或基于用户选择的半径绘制一个圆，具体取决于该链接。 
   
 <p class="- topic/p ">创建一个文本字段，并使用 <codeph class="+ topic/ph pr-d/codeph ">htmlText</codeph> 属性将其内容设置为 HTML 格式的字符串。这些链接带有下划线，以便让用户更容易地识别它们。（只有在鼠标指针位于链接上方后，Adobe Flash Player 才会更改鼠标指针。）为了确保用户的单击操作将调用 ActionScript 方法，链接的 URL 应以字符串<codeph class="+ topic/ph pr-d/codeph ">“event:”</codeph>开头并且为 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.LINK</codeph> 事件添加了侦听器。</p> 
 
 <p class="- topic/p ">在用户单击链接后触发的 <codeph class="+ topic/ph pr-d/codeph ">linkHandler()</codeph> 方法用于管理文本字段的所有 link 事件。第一个 if 语句检查事件的 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性，它保存 URL 中<codeph class="+ topic/ph pr-d/codeph ">“event:”</codeph>字符串后面的其余部分。如果用户单击了操作系统的链接，则会使用用户的当前操作系统名称（从系统的 <codeph class="+ topic/ph pr-d/codeph ">Capabilities.os</codeph> 属性中获取）使用户转到指定的网站。否则，使用所选的半径大小（通过事件的 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性传递）在文本字段下面绘制一个圆。每次用户单击半径链接时，将会清除以前绘制的圆，并使用所选的半径大小绘制一个新的红色圆。</p> 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#TextEvent/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link><link href="flash.text.xml#TextField/event:link" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TEXT_INPUT</apiName><shortdesc class="- topic/shortdesc ">
     定义 textInput 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">textInput</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">textInput</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>对于 Delete 或 Backspace 键不会调度此事件。</p>
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法以取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">在其中输入字符的文本字段。target 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">用户输入的字符或字符序列。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as" class="- topic/example "> 下面的示例指导用户生成一个特殊的组合密钥（类似于密码）。此组合密钥具有 7 个字母数字字符，其中第 2 个和第 5 个字符是数字。
 
 <p class="- topic/p ">共创建了三个文本字段，分别用于保存预备说明、用户输入以及警告（错误）消息。添加了一个事件侦听器，以便通过触发 <codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法来响应用户的文本输入。（每次用户输入文本时，都会调度 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.TEXT_INPUT</codeph> 事件。） </p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>如果用户输入字符，并且不是作为任何键盘输入（如 backspace）的响应，则会调度 text 事件。要捕获所有键盘事件，请使用 <codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent</codeph> 事件的侦听器。）</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法用于控制和管理用户输入。<codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法用于禁止 Adobe Flash Player 立即在输入文本字段中显示文本。应用程序负责更新该字段。如果撤消用户对已输入的字符（<codeph class="+ topic/ph pr-d/codeph ">result</codeph> 字符串）执行的删除或修改操作，当用户输入新字符时，则会将输入文本字段的内容重新分配给 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> 字符串。另外，为了获得一致的用户体验，<codeph class="+ topic/ph pr-d/codeph ">setSelection()</codeph> 方法会将插入点（尖号）放在文本字段中上次选择的字符后面。</p>
 
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法中的第一个 if 语句检查组合密钥的第 2 个和第 5 个字符位置的输入内容（必须为数字）。如果用户输入正确无误，则会调用 <codeph class="+ topic/ph pr-d/codeph ">updateCombination()</codeph> 方法，并将用户输入附加到 (<codeph class="+ topic/ph pr-d/codeph ">result</codeph>) 组合密钥字符串中。<codeph class="+ topic/ph pr-d/codeph ">updateCombination()</codeph> 方法还将插入点移到所选字符的后面。在输入 7 个字符后，<codeph class="+ topic/ph pr-d/codeph ">textInputHandler()</codeph> 方法中的最后一个 if 语句将 <codeph class="+ topic/ph pr-d/codeph ">inputTextField</codeph> 文本字段类型由 <codeph class="+ topic/ph pr-d/codeph ">INPUT</codeph> 更改为 <codeph class="+ topic/ph pr-d/codeph ">DYNAMIC</codeph>，这意味着用户无法再输入或更改任何字符。</p>
  
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.text.xml#TextField/event:textInput" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
	 在 textInput 事件中，由用户输入的字符或字符序列。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 在 <codeph class="+ topic/ph pr-d/codeph ">textInput</codeph> 事件中，由用户输入的字符或字符序列。For a <codeph class="+ topic/ph pr-d/codeph ">link</codeph> 事件，<codeph class="+ topic/ph pr-d/codeph ">&lt;a></codeph> 标签的 <codeph class="+ topic/ph pr-d/codeph ">href</codeph> 属性的 <codeph class="+ topic/ph pr-d/codeph ">event</codeph> 属性的文本。
	 
	 </apiDesc><example class="- topic/example ">以下代码说明当用户单击超文本链接时将调度 <codeph class="+ topic/ph pr-d/codeph ">link</codeph> 事件：
	 
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'>Click Me.&lt;/a>";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SampleDataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SampleDataEvent</apiName><shortdesc class="- topic/shortdesc "> 
 当 Sound 对象请求新音频数据或当 Microphone 对象有新音频数据要提供时调度。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 当 Sound 对象请求新音频数据或当 Microphone 对象有新音频数据要提供时调度。
 
 <p class="- topic/p ">此事件用途有二：</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">为 Sound 对象提供动态生成的音频数据</li><li class="- topic/li ">获得 Microphone 对象的音频数据</li></ul>
 
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">使用 Sound 对象动态生成音频</b>使用 <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph> 事件播放动态生成的音频。在此环境中，Sound 对象实际上并不包含声音数据。相反，它将用作声音数据的套接字，声音数据通过使用您作为处理函数分配给 <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph> 事件的函数流入它。 </p>
 
  <p class="- topic/p ">在您的函数中，使用 <codeph class="+ topic/ph pr-d/codeph ">ByteArray.writeFloat()</codeph> 方法写入到事件的 <codeph class="+ topic/ph pr-d/codeph ">data</codeph>) 属性，此属性包含要播放的取样数据。</p>
 
  <p class="- topic/p ">如果 Sound 对象尚未加载 MP3 文件，当您调用其 <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> 方法时，此对象将开始调度 <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph> 事件，请求声音样本。在播放声音时，Sound 对象将继续发送事件，直至您停止提供数据或调用 SoundChannel 对象的 <codeph class="+ topic/ph pr-d/codeph ">stop()</codeph> 方法。</p>
 
  <p class="- topic/p ">事件的滞后时间因平台而异，在将来版本的 <ph class="- topic/ph ">Flash Player </ph> 或 AIR 中也可能改变。请不要依赖某个特定的滞后时间。而应使用 <codeph class="+ topic/ph pr-d/codeph ">((SampleDataEvent.position/44.1) - SoundChannelObject.position)</codeph> 进行计算。</p>
 
  <p class="- topic/p ">提供给 SampleDataEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 属性的样本的数目在 2048 到 8192 之间。为了获得最佳性能，请尽可能多地提供样本。提供的样本越少，在播放过程中就越有可能出现单击和弹出事件。此行为在不同的平台上会有所不同，并且会在各种情况下发生。例如，当调整浏览器的大小时。在仅提供 2048 个样本时，您可能会编写可在一个平台上运行的代码，但在不同的平台上运行时，同样的代码可能无法正常工作。要尽可能缩短滞后时间，请考虑允许用户选择数据量。</p>
 
  <p class="- topic/p ">如果提供的样本数少于 2048 个，则 Sound 对象将播放其余的样本，然后停止声音，就像到达了声音文件的末尾，并生成 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> 事件。</p>
 
  <p class="- topic/p ">可以使用 Sound 对象的 <codeph class="+ topic/ph pr-d/codeph ">extract()</codeph> 方法提取其声音数据，然后将声音数据写入动态流以进行播放。</p>
 
  <p class="- topic/p ">将 <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph> 事件与 Sound 对象一起使用时，仅启用 <codeph class="+ topic/ph pr-d/codeph ">extract()</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">play()</codeph> Sound 方法。调用任何其他方法或属性将导致“调用无效”异常。仍启用 SoundChannel 对象的所有方法和属性。</p>
 
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">捕获麦克风音频</b>使用 <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph> 事件从麦克风捕获音频数据。为 <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph> 事件添加事件侦听器时，由于音频样本可用，麦克风将调度此事件。</p>
 
  <p class="- topic/p ">在事件处理函数中，使用 <codeph class="+ topic/ph pr-d/codeph ">ByteArray.readFloat()</codeph> 方法读取事件的 <codeph class="+ topic/ph pr-d/codeph ">data</codeph>) 属性，此属性包含取样数据。此事件将包含多个样本，因此应使用 <codeph class="+ topic/ph pr-d/codeph ">while</codeph> 循环读取可用的数据：</p>
 
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var soundBytes:ByteArray = new ByteArray();
 while(event.data.bytesAvailable)
 {
      var sample:Number = event.data.readFloat();
      soundBytes.writeFloat(sample);
 }</codeblock>
 
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as" class="- topic/example "> 下面的示例播放简单的正弦波。
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">sampleData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/event:sampleData" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SampleDataEvent</apiName><shortdesc class="- topic/shortdesc ">
		创建事件对象以包含有关音频数据事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。此值为 <codeph class="+ topic/ph pr-d/codeph ">Event.SAMPLE_DATA</codeph>。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。 
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。 
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">theposition</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据在音频流中的位置。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thedata</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据的字节数组。
		</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建事件对象以包含有关音频数据事件的信息。将 Event 对象作为参数传递给事件侦听器。 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 SampleDataEvent 对象的副本，并设置每个属性的值以匹配原始对象的属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个新的 SampleDataEvent 对象，其属性值与原始对象的属性值匹配。
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 SampleDataEvent 对象的副本，并设置每个属性的值以匹配原始对象的属性值。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
		返回一个字符串，其中包含 SampleDataEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含 <codeph class="+ topic/ph pr-d/codeph ">SampleDataEvent</codeph> 对象的所有属性的字符串。
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		返回一个字符串，其中包含 SampleDataEvent 对象的所有属性。字符串的格式如下：
		<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[SampleDataEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> theposition=<i class="+ topic/ph hi-d/i ">value</i> thedata=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SAMPLE_DATA</apiName><shortdesc class="- topic/shortdesc ">
		定义 SampleDataEvent 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">sampleData</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		定义 <codeph class="+ topic/ph pr-d/codeph ">SampleDataEvent</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">position</codeph></entry><entry class="- topic/entry ">从中提供音频数据的点。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/event:sampleData" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
		音频流中的数据。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		音频流中的数据。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">position</apiName><shortdesc class="- topic/shortdesc ">
		数据在音频流中的位置。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		数据在音频流中的位置。
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:HTTPStatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">HTTPStatusEvent</apiName><shortdesc class="- topic/shortdesc ">
在网络请求返回 HTTP 状态代码时，应用程序将调度 HTTPStatusEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
在网络请求返回 HTTP 状态代码时，应用程序将调度 HTTPStatusEvent 对象。 

<p class="- topic/p ">在错误或完成事件之前，将始终发送 HTTPStatusEvent 对象。HTTPStatusEvent 对象不一定指示错误条件；它仅反映网络堆栈提供的 HTTP 状态代码（如果有的话）。<ph class="- topic/ph ">一些 Flash Player 环境可能无法检测到 HTTP 状态代码；在这些情况下，将总是报告状态代码 0。</ph> </p>

<p class="- topic/p "><ph class="- topic/ph ">在 Flash Player 中，只有一种类型的 HTTPStatus 事件：<codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph>。</ph>在 AIR 运行时中，FileReference、URLLoader 或 URLStream 可以注册侦听 <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph>，该事件包括 <codeph class="+ topic/ph pr-d/codeph ">responseURL</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">responseHeaders</codeph> 属性。这些属性在 <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> 事件中不进行定义。</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as" class="- topic/example "> 以下示例尝试从根 Web 目录 http://www.[yourDomain].com 加载一个不存在的文件，这会调度状态为 404 的 <codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler</codeph> 事件，表示找不到文件。<codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler</codeph> 事件由 <codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler()</codeph> 进行处理，并仅输出两行事件信息。
 
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b> 
 <ol class="- topic/ol "><li class="- topic/li ">您需要通过将“本地播放安全性”设置为“只访问网络”来编译 SWF 文件，以在此例中生成 <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> 事件。</li><li class="- topic/li ">您需要一台在 http://www.[yourDomain].com 上运行并侦听端口 80 的服务器，否则您将收到状态代码为 0 的 <codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler</codeph> 事件，而不是状态代码为 404 的事件。</li><li class="- topic/li ">在 http://www.[yourDomain].com 的根 Web 目录下不能有名为 MissingFile.html 的文件，否则您将收不到正确的 <codeph class="+ topic/ph pr-d/codeph ">httpStatusHandler</codeph> 事件。</li></ol>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpResponseStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/event:httpResponseStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">httpStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">HTTPStatusEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关 HTTP 状态事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 HTTPStatus 事件：<codeph class="+ topic/ph pr-d/codeph ">HTTPStatusEvent.HTTP_STATUS</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">status</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数字状态。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">status</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">HTTPStatusEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关 HTTP 状态事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS" class="- topic/link "><linktext class="- topic/linktext ">HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 HTTPStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 HTTPStatusEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 HTTPStatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 HTTPStatusEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 HTTPStatusEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 HTTPStatusEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[HTTPStatusEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> status=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HTTP_RESPONSE_STATUS</apiName><shortdesc class="- topic/shortdesc ">
	与 httpStatus 事件不同，httpResponseStatus 事件在所有响应数据之前传送。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">httpResponseStatus</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	与 <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> 事件不同，<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> 事件在传送任何响应数据之前传送。此外，<codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> 事件还包括 <codeph class="+ topic/ph pr-d/codeph ">responseHeaders</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">responseURL</codeph> 属性的值（对于 <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph>，这些属性未定义）。请注意，在发送任何 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 事件之前还将发送 <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph>（如果有）。 
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">httpResponseStatus</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 </p>
	
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">responseURL</codeph></entry><entry class="- topic/entry ">从中返回响应的 URL。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">responseHeaders</codeph></entry><entry class="- topic/entry ">响应以 URLRequestHeader 对象的数组形式返回的响应标头。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">由服务器返回的 HTTP 状态代码。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">接收 HTTP 状态代码的网络对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLStream/event:httpResponseStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HTTP_STATUS</apiName><shortdesc class="- topic/shortdesc ">
	HTTPStatusEvent.HTTP_STATUS 常量定义 httpStatus 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">httpStatus</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">HTTPStatusEvent.HTTP_STATUS</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">httpStatus</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">由服务器返回的 HTTP 状态代码。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">接收 HTTP 状态代码的网络对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">responseHeaders</apiName><shortdesc class="- topic/shortdesc ">
	 响应以 URLRequestHeader 对象的数组形式返回的响应标头。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 响应以 URLRequestHeader 对象的数组形式返回的响应标头。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#URLRequestHeader" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">responseURL</apiName><shortdesc class="- topic/shortdesc ">
	 从中返回响应的 URL。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 从中返回响应的 URL。对于重定向，这将与请求 URL 不同。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
	由服务器返回的 HTTP 状态代码。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	由服务器返回的 HTTP 状态代码。例如，值为 404 表示服务器尚未找到所请求 URI 的匹配项。可以在 <xref href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" scope="external" class="- topic/xref ">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</xref> 上的 HTTP 规范的第 10.4 和 10.5 节中找到 HTTP 状态代码。
	
	<p class="- topic/p ">如果<ph class="- topic/ph "> Flash Player 或</ph> AIR 无法从服务器获取状态代码或无法与服务器进行通信，则会将默认值 0 传递到您的代码。<ph class="- topic/ph ">在任何播放器中都可生成值 0（例如，如果请求的 URL 格式不正确），并且当 Flash Player 插件在以下不将 HTTP 状态代码传递到播放器的浏览器中运行时，值 0 始终由 Flash Player 插件生成：Netscape、Mozilla、Safari、Opera 和用于 Macintosh 的 Internet Explorer。</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:FileListEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileListEvent</apiName><shortdesc class="- topic/shortdesc ">
	 在 File 对象的 getDirectoryListingAsync() 方法调用成功枚举一组文件和目录时，或在用户调用 browseForOpenMultiple() 方法后选择文件时，File 对象将调度 FileListEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">在成功调用 getDirectoryListingAsync() 或 browseForOpenMultiple() 方法后，File 对象将调度 FileListEvent 对象。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 在 File 对象的 <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph> 方法调用成功枚举一组文件和目录时，或在用户调用 <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph> 方法后选择文件时，File 对象将调度 FileListEvent 对象。 
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileListEvent</apiName><shortdesc class="- topic/shortdesc ">
		FileListEvent 对象的构造函数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定该事件对象是否冒泡（对于 FileListEvent 对象为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象（对于 FileListEvent 对象为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>）。
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">files</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">File 对象的数组。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		FileListEvent 对象的构造函数。 
		
		<p class="- topic/p "> 运行时使用此类创建 FileListEvent 对象。您不能在代码中直接使用此构造函数。</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DIRECTORY_LISTING</apiName><shortdesc class="- topic/shortdesc ">
		 FileListEvent.DIRECTORY_LISTING 常量定义 directoryListing 事件的事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">directoryListing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <codeph class="+ topic/ph pr-d/codeph ">FileListEvent.DIRECTORY_LISTING</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">directoryListing</codeph> 事件的事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		 
		 <p class="- topic/p ">此事件具有以下属性：</p>
		 
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">files</codeph></entry><entry class="- topic/entry ">表示找到的文件和目录的 File 对象的数组。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">FileListEvent 对象。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SELECT_MULTIPLE</apiName><shortdesc class="- topic/shortdesc ">
		 FileListEvent.SELECT_MULTIPLE 常量定义 selectMultiple 事件的事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">selectMultiple</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <codeph class="+ topic/ph pr-d/codeph ">FileListEvent.SELECT_MULTIPLE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph> 事件的事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		 
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">files</codeph></entry><entry class="- topic/entry ">表示所选文件的 File 对象的数组。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">FileListEvent 对象。</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">files</apiName><shortdesc class="- topic/shortdesc ">
		 表示已找到或已选择的文件或目录的 File 对象的数组。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 表示已找到或已选择的文件或目录的 File 对象的数组。 
		 
		 <p class="- topic/p ">对于 <codeph class="+ topic/ph pr-d/codeph ">File.getDirectoryListingAsync()</codeph> 方法，这是由调用该方法的 File 对象表示的在根目录级别找到的文件和目录的列表。对于 <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpenMultiple()</codeph> 方法，这是由用户选择的文件的列表。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:NativeWindowBoundsEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeWindowBoundsEvent</apiName><shortdesc class="- topic/shortdesc ">
 在窗口的大小或位置发生更改时，NativeWindow 对象将调度 NativeWindowBoundsEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">更改窗口大小和/或位置的 NativeWindow 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在窗口的大小或位置发生更改时，NativeWindow 对象将调度 NativeWindowBoundsEvent 对象。 
 
 <p class="- topic/p ">有四种类型的事件：</p>
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.MOVING</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.MOVE</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.RESIZING</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.RESIZE</codeph></li></ul>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">move</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">移动后由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">moving</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">移动前由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">resize</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">调整大小后由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">resizing</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">调整大小前由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NativeWindowBoundsEvent</apiName><shortdesc class="- topic/shortdesc ">
    使用与窗口范围事件有关的特定信息创建 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.MOVING</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.MOVE</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.RESIZING</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowBoundsEvent.RESIZE</codeph></li></ul>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 表示 Event 对象是否参与事件流的冒泡阶段。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否可以取消 Event 对象。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">beforeBounds</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示最近的更改或未处理的更改之前的范围。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">afterBounds</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示最近的更改或未处理的更改之后的范围。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    使用与窗口范围事件有关的特定信息创建 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 NativeWindowBoundsEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 NativeWindowBoundsEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 NativeWindowBoundsEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 NativeWindowBoundsEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 NativeWindowBoundsEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 NativeWindowBoundsEvent 对象的所有属性。该字符串具有以下格式：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NativeWindowBoundsEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> previousDisplayState=<i class="+ topic/ph hi-d/i ">value</i> currentDisplayState=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOVE</apiName><shortdesc class="- topic/shortdesc ">
    定义 move 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">move</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">移动后由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">move</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterBounds</codeph></entry><entry class="- topic/entry ">窗口的新范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeBounds</codeph></entry><entry class="- topic/entry ">窗口的旧范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚更改状态的 NativeWindow 对象。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOVING</apiName><shortdesc class="- topic/shortdesc ">
    定义 moving 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">moving</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">移动前由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">moving</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterBounds</codeph></entry><entry class="- topic/entry ">未处理的更改之后的窗口范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeBounds</codeph></entry><entry class="- topic/entry ">未处理的更改之前的窗口范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消该事件会阻止窗口移动。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚更改状态的 NativeWindow 对象。</entry></row></tbody></tgroup></adobetable>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>在 Linux 上，此事件不支持 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法。</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESIZE</apiName><shortdesc class="- topic/shortdesc ">
    定义 resize 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resize</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">调整大小后由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">resize</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterBounds</codeph></entry><entry class="- topic/entry ">窗口的新范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeBounds</codeph></entry><entry class="- topic/entry ">窗口的旧范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚更改状态的 NativeWindow 对象。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESIZING</apiName><shortdesc class="- topic/shortdesc ">
    定义 resizing 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">resizing</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">调整大小前由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">resizing</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterBounds</codeph></entry><entry class="- topic/entry ">未处理的更改之后的窗口范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeBounds</codeph></entry><entry class="- topic/entry ">未处理的更改之前的窗口范围。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚更改状态的 NativeWindow 对象。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消该事件会阻止窗口移动。</entry></row></tbody></tgroup></adobetable>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>在 Linux 上，此事件不支持 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法。</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">afterBounds</apiName><shortdesc class="- topic/shortdesc ">
     更改之后的窗口范围。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     更改之后的窗口范围。
       
     <p class="- topic/p ">如果事件为 <codeph class="+ topic/ph pr-d/codeph ">moving</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">resizing</codeph>，则表示范围尚未更改；在未取消该事件时，<codeph class="+ topic/ph pr-d/codeph ">afterBounds</codeph> 表示新范围。如果事件为 <codeph class="+ topic/ph pr-d/codeph ">move</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">resize</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">afterBounds</codeph> 表示新范围。
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">beforeBounds</apiName><shortdesc class="- topic/shortdesc ">
     更改之前的窗口范围。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     更改之前的窗口范围。  
     
     <p class="- topic/p ">如果事件为 <codeph class="+ topic/ph pr-d/codeph ">moving</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">resizing</codeph>，则表示范围尚未更改；<codeph class="+ topic/ph pr-d/codeph ">beforeBounds</codeph> 反映当前范围。如果事件为 <codeph class="+ topic/ph pr-d/codeph ">move</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">resize</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">beforeBounds</codeph> 表示原始值。
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SQLUpdateEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLUpdateEvent</apiName><shortdesc class="- topic/shortdesc ">
 与 SQLConnection 实例关联的任何表发生数据更改时，SQLConnection 对象将调度 SQLUpdateEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 与 SQLConnection 实例关联的任何表发生数据更改时，SQLConnection 对象将调度 SQLUpdateEvent 对象。执行 SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> 语句（直接或由于触发与语句执行有关的触发器）可以导致数据更改。
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as" class="- topic/example "> 以下示例展示 SQLUpdateEvent 实例在响应 <codeph class="+ topic/ph pr-d/codeph ">update</codeph> 事件中的用法。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">delete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">insert</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLUpdateEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建新的 SQLUpdateEvent 实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型，可通过 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性获取。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示数据已更改的表的名称。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">插入、删除或更新的行的唯一行标识符。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">用于创建新的 SQLUpdateEvent 对象。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建新的 SQLUpdateEvent 实例。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
     创建 SQLUpdateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 SQLUpdateEvent 对象。
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建 SQLUpdateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DELETE</apiName><shortdesc class="- topic/shortdesc ">
     SQLUpdateEvent.DELETE 常量定义 SQLConnection delete 事件的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">delete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLUpdateEvent.DELETE</codeph> 常量定义 SQLConnection <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> 事件的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。<codeph class="+ topic/ph pr-d/codeph ">delete</codeph> 事件具有以下属性：
     
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rowID</codeph></entry><entry class="- topic/entry ">插入、删除或更新的行的唯一行标识符。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">对其执行操作的 SQLConnection 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">table</codeph></entry><entry class="- topic/entry ">发生更改的表的名称。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">INSERT</apiName><shortdesc class="- topic/shortdesc ">
     SQLUpdateEvent.INSERT 常量定义 SQLConnection insert 事件的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">insert</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLUpdateEvent.INSERT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">insert</codeph> 事件的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。<codeph class="+ topic/ph pr-d/codeph ">insert</codeph> 事件具有以下属性：
     
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rowID</codeph></entry><entry class="- topic/entry ">插入、删除或更新的行的唯一行标识符。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">对其执行操作的 SQLConnection 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">table</codeph></entry><entry class="- topic/entry ">发生更改的表的名称。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	 SQLUpdateEvent.UPDATE 常量定义 SQLConnection update 事件的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">SQLUpdateEvent.UPDATE</codeph> 常量定义 SQLConnection <codeph class="+ topic/ph pr-d/codeph ">update</codeph> 事件的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	 
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">update</codeph> 事件具有以下属性：</p>
     
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rowID</codeph></entry><entry class="- topic/entry ">插入、删除或更新的行的唯一行标识符。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">对其执行操作的 SQLConnection 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">table</codeph></entry><entry class="- topic/entry ">发生更改的表的名称。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rowID</apiName><shortdesc class="- topic/shortdesc ">
     插入、删除或更新的行的唯一行标识符。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     插入、删除或更新的行的唯一行标识符。
	 
	 <p class="- topic/p ">行标识符用于唯一标识数据库表中的行。该值通常由数据库生成。</p>
	 
	 <p class="- topic/p ">用于单个 SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> 语句执行的行标识符可以通过由 SQLStatement 对象的 <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> 方法返回的 SQLResult 对象的 <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> 属性获得（在 SQLStatement 调度其 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> 事件后调用时）。</p>
	 
	 <p class="- topic/p ">有关主键和生成的行标识符的详细信息，请参阅附录“<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_cn" scope="external" class="- topic/xref ">本地数据库中的 SQL 支持</xref>”中的“<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_data_cn" scope="external" class="- topic/xref ">CREATE TABLE</xref>”和“<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_cn" scope="external" class="- topic/xref ">Expressions</xref>”各节。</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     其数据更改导致调度事件的表的名称。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     其数据更改导致调度事件的表的名称。
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:EventDispatcher" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EventDispatcher</apiName><shortdesc class="- topic/shortdesc ">
EventDispatcher 类是可调度事件的所有运行时类的基类。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
EventDispatcher 类是可调度事件的所有类的基类。<ph class="- topic/ph ">EventDispatcher 类实现 IEventDispatcher 接口，并且是 DisplayObject 类的基类。EventDispatcher 类允许显示列表上的任何对象都是一个事件目标，同样允许使用 IEventDispatcher 接口的方法。</ph>

<p class="- topic/p ">事件目标是 Flash <sup class="+ topic/ph hi-d/sup ">®</sup> Player 和 Adobe<sup class="+ topic/ph hi-d/sup "> ®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> 事件模型的重要组成部分。事件目标是事件如何通过显示列表层次结构这一问题的焦点。当发生鼠标单击或按键等事件时，Flash Player 或 AIR 应用程序会将事件对象调度到从显示列表根开始的事件流中。然后该事件对象在显示列表中前进，直到到达事件目标，然后从这一点开始其在显示列表中的回程。在概念上，到事件目标的此往返行程被划分为三个阶段：捕获阶段包括从根到事件目标节点之前的最后一个节点的行程，目标阶段仅包括事件目标节点，冒泡阶段包括回程上遇到的任何后续节点到显示列表的根。</p>

<p class="- topic/p ">通常，使用户定义的类能够调度事件的最简单方法是扩展 EventDispatcher。如果无法扩展（即，如果该类已经扩展了另一个类），则可以实现 IEventDispatcher 接口，创建 EventDispatcher 成员，并编写一些简单的挂钩，将调用连接到聚合的 EventDispatcher 中。</p>



</apiDesc><example conref="examples\EventDispatcherExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcherExample</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">CustomDispatcher</codeph> 类（<codeph class="+ topic/ph pr-d/codeph ">EventDispatcher</codeph> 的子类）来说明如何创建和调度自定义事件。该示例执行下列任务：
 <ol class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">EventDispatcherExample</codeph> 的构造函数创建一个局部变量 <codeph class="+ topic/ph pr-d/codeph ">dispatcher</codeph>，并将其赋给新的 CustomDispatcher 实例。</li><li class="- topic/li ">在 <codeph class="+ topic/ph pr-d/codeph ">CustomDispatcher</codeph> 内，设置一个字符串以便事件具有名称 <codeph class="+ topic/ph pr-d/codeph ">action</codeph>，并且声明 <codeph class="+ topic/ph pr-d/codeph ">doAction()</codeph> 方法。当调用此方法时，此方法将创建 <codeph class="+ topic/ph pr-d/codeph ">action</codeph> 事件并使用 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.dispatchEvent()</codeph> 调度该事件。</li><li class="- topic/li ">然后使用 <codeph class="+ topic/ph pr-d/codeph ">dispatcher</codeph> 属性添加 <codeph class="+ topic/ph pr-d/codeph ">action</codeph> 事件侦听器和关联的订阅者方法 <codeph class="+ topic/ph pr-d/codeph ">actionHandler()</codeph>，这样在调度事件时可以只输出有关该事件的信息。</li><li class="- topic/li ">调用 <codeph class="+ topic/ph pr-d/codeph ">doAction()</codeph> 方法，从而调度 <codeph class="+ topic/ph pr-d/codeph ">action</codeph> 事件。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deactivate</apiName><shortdesc class="- topic/shortdesc ">
 [广播事件] Flash Player 或 AIR 应用程序失去操作系统焦点并变为非活动状态时将调度此事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 [广播事件] <ph class="- topic/ph ">Flash Player 或</ph> AIR 应用程序失去操作系统焦点并变为非活动状态时将调度此事件。此事件为广播事件，这意味着将由所有具有注册了此事件的侦听器的 EventDispatcher 对象调度此事件。<ph class="- topic/ph ">有关广播事件的详细信息，请参阅 DisplayObject 类。</ph>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activate</apiName><shortdesc class="- topic/shortdesc ">
 [广播事件] Flash Player 或 AIR 应用程序获得操作系统焦点并变为活动状态时将调度此事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 [广播事件] <ph class="- topic/ph ">Flash Player 或</ph> AIR 应用程序获得操作系统焦点并变为活动状态时将调度此事件。此事件为广播事件，这意味着将由所有具有注册了此事件的侦听器的 EventDispatcher 对象调度此事件。<ph class="- topic/ph ">有关广播事件的详细信息，请参阅 DisplayObject 类。</ph>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">EventDispatcher</apiName><shortdesc class="- topic/shortdesc ">
	聚合 EventDispatcher 类的实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">target</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:IEventDispatcher</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">调度到 EventDispatcher 对象的事件的目标对象。<ph class="- topic/ph ">当 EventDispatcher 实例由实现 IEventDispatcher 的类聚合时，使用此参数；此参数是必需的，以便包含对象可以是事件的目标。请勿在类扩展了 EventDispatcher 的简单情况下使用此参数。</ph>
    
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	聚合 EventDispatcher 类的实例。
	
    <p class="- topic/p ">EventDispatcher 类通常用作基类，这意味着<ph class="- topic/ph ">大多数</ph>开发人员都无需使用此构造函数。<ph class="- topic/ph ">但是，实现 IEventDispatcher 接口的高级开发人员则需要使用此构造函数。如果您无法扩展 EventDispatcher 类并且必须实现 IEventDispatcher 接口，请使用此构造函数来聚合 EventDispatcher 类的实例。</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">指定的 <codeph class="+ topic/ph pr-d/codeph ">listener</codeph> 不是一个函数。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果<ph class="- topic/ph ">，如下面的示例所示：</ph>
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">函数可以有任何名称。</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">确定侦听器是运行于捕获阶段还是运行于目标和冒泡阶段。如果将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。如果 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，则侦听器只在目标或冒泡阶段处理事件。要在所有三个阶段都侦听事件，请调用 <codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> 两次：一次将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，一次将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件侦听器的优先级。优先级由一个带符号的 32 位整数指定。数字越大，优先级越高。优先级为 <i class="+ topic/ph hi-d/i ">n</i> 的所有侦听器会在优先级为 <i class="+ topic/ph hi-d/i ">n</i> -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定对侦听器的引用是强引用，还是弱引用。强引用（默认值）可防止您的侦听器被当作垃圾回收。弱引用则没有此作用。 <p class="- topic/p ">类级别成员函数不属于垃圾回收的对象，因此可以对类级别成员函数将 <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 而不会使它们受垃圾回收的影响。如果对作为嵌套内部函数的侦听器将 <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则该函数将作为垃圾回收并且不再是永久函数。如果创建对该内部函数的引用（将该函数保存到另一个变量中），则该函数将不作为垃圾回收并仍将保持永久。</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。<ph class="- topic/ph ">可以为特定类型的事件、阶段和优先级在显示列表中的所有节点上注册事件侦听器。</ph>
	
	
	
	<p class="- topic/p ">成功注册一个事件侦听器后，无法通过额外调用 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> 来更改其优先级。要更改侦听器的优先级，必须首先调用 <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph>。然后，可以使用新的优先级再次注册该侦听器。 </p>
	
	<p class="- topic/p ">请记住，注册该侦听器后，如果继续调用具有不同 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 值的 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>，则会创建单独的侦听器注册。<ph class="- topic/ph ">例如，如果首先注册 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 的侦听器，则该侦听器只在捕获阶段进行侦听。如果使用同一个侦听器对象再次调用 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>，并将 <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，那么便会拥有两个单独的侦听器：一个在捕获阶段进行侦听，另一个在目标和冒泡阶段进行侦听。</ph>
	</p>
	
	<p class="- topic/p ">不能只为目标阶段或冒泡阶段注册事件侦听器。这些阶段在注册期间是成对出现的，因为冒泡阶段只适用于目标节点的始祖。</p>
	
	<p class="- topic/p ">如果不再需要某个事件侦听器，可调用 <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> 删除它，否则会产生内存问题。事件侦听器不会自动从内存中删除，因为只要调度对象存在，垃圾回收器就不会删除侦听器（除非 <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> 参数设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>）。</p>
		
	<p class="- topic/p ">复制 EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。</p>
	
	
	<p class="- topic/p ">如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。</p>
	
	<p class="- topic/p ">如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。 </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">dispatchEvent</apiName><shortdesc class="- topic/shortdesc ">
	将事件调度到事件流中。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">已达到事件调度递归限制。
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果成功调度了事件，则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。值 <codeph class="+ topic/ph pr-d/codeph ">false</codeph> 表示失败或对事件调用了 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph>。
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">event</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">调度到事件流中的 Event 对象。如果正在重新调度事件，则会自动创建此事件的一个克隆。在调度了事件后，其 <codeph class="+ topic/ph pr-d/codeph ">target</codeph> 属性将无法更改，因此您必须创建此事件的一个新副本以能够重新调度。
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	将事件调度到事件流中。事件目标是对其调用 <codeph class="+ topic/ph pr-d/codeph ">dispatchEvent()</codeph> 方法的 EventDispatcher 对象。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasEventListener</apiName><shortdesc class="- topic/shortdesc ">
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果指定类型的侦听器已注册，则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实触发了事件侦听器，请使用 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph>。
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 与 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 的区别是：<codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 只检查它所属的对象，而 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 检查整个事件流以查找由 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 参数指定的事件。
	
	</p>
	
	<p class="- topic/p ">当从 LoaderInfo 对象调用 <codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 时，只考虑调用方可以访问的侦听器。</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#EventDispatcher/willTrigger()" class="- topic/link "><linktext class="- topic/linktext ">willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
	从 EventDispatcher 对象中删除侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要删除的侦听器对象。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">指出是为捕获阶段还是为目标和冒泡阶段注册了侦听器。如果为捕获阶段以及目标和冒泡阶段注册了侦听器，则需要对 <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> 进行两次调用才能将这两个侦听器删除，一次调用将 <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，另一次调用将 <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">willTrigger</apiName><shortdesc class="- topic/shortdesc ">
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果将会触发指定类型的侦听器，则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此 EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。
	
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 与 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 方法的区别是：<codeph class="+ topic/ph pr-d/codeph ">hasEventListener()</codeph> 只检查它所属的对象，而 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 方法检查整个事件流以查找由 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 参数指定的事件。 </p>
	
	<p class="- topic/p ">当从 LoaderInfo 对象调用 <codeph class="+ topic/ph pr-d/codeph ">willTrigger()</codeph> 时，只考虑调用方可以访问的侦听器。</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="flash.events:TouchEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TouchEvent</apiName><shortdesc class="- topic/shortdesc "> 
 使用 TouchEvent 类，您可以处理设备上那些检测用户与设备之间的接触（例如触摸屏上的手指）的事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">为触摸交互提供事件处理支持
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 使用 TouchEvent 类，您可以处理设备上那些检测用户与设备之间的接触（例如触摸屏上的手指）的事件。当用户与带有触摸屏的移动电话或绘图板等设备交互时，用户通常使用手指或指针设备接触屏幕。可使用 TouchEvent 类开发响应基本触摸事件（如单个手指点击）的应用程序。使用此类中定义的事件类型创建事件侦听器。对于具有接个接触点的用户交互（例如在触摸屏上同时移动多根手指），请使用相关的 GestureEvent 类、PressAndTapGestureEvent 类和 TransformGestureEvent 类。并使用这些类的属性和方法来构造响应用户触摸设备的事件处理程序。
 <p class="- topic/p ">使用 Multitouch 类确定当前环境的触摸交互支持，如果当前环境支持触摸交互，则对其进行管理。</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>当对象嵌套在显示列表中时，触摸事件的目标将是显示列表中可见的最深的可能嵌套对象。此对象称为目标节点。要使目标节点的祖先（包含显示列表中目标节点的对象）接收触摸事件的通知，请对祖先节点使用 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.addEventListener()</codeph> 并将 type 参数设置为要检测的特定触摸事件。</p>
 
 </apiDesc><example conref="examples\TouchEventExample.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_BEGIN</codeph> 事件、<codeph class="+ topic/ph pr-d/codeph ">TOUCH_MOVE</codeph> 事件和 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_END</codeph> 事件的事件处理。当接触点在屏幕上移动 (<codeph class="+ topic/ph pr-d/codeph ">onTouchMove</codeph>) 时，会跟踪相对于舞台的 X 坐标以便输出。对于 <codeph class="+ topic/ph pr-d/codeph ">onTouchBegin</codeph> 函数中的 <codeph class="+ topic/ph pr-d/codeph ">Sprite.startTouchDrag</codeph> 参数，touchPointID 的值是分配给事件对象的值。bounds 参数是定义父显示对象（bg 是包含 MySprite 的显示对象）的边界的矩形。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;

MySprite.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);
MySprite.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove);
MySprite.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);

function onTouchBegin(eBegin:TouchEvent) {
     eBegin.target.startTouchDrag(eBegin.touchPointID, false, bg.getRect(this));
     trace("touch begin");
 
 }

function onTouchMove(eMove:TouchEvent) {
    trace(eMove.stageX);
}
 
function onTouchEnd(eEnd:TouchEvent) {
     eEnd.target.stopTouchDrag(eEnd.touchPointID);
     trace("touch end");
}
</codeblock></example><example conref="examples\TouchExample2.as" class="- topic/example "> 下面的示例说明如何处理触摸事件和触摸事件阶段，以及 <codeph class="+ topic/ph pr-d/codeph ">Multitouch.maxTouchPoints</codeph> 和触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph> 属性。此示例由 Christian Cantrell 提供，他在快速入门指南中对此示例进行了更详细介绍：<xref href="http://www.adobe.com/devnet/flash/articles/multitouch_gestures.html" scope="external" class="- topic/xref ">Multi-touch and gesture support on the Flash Platform</xref>。 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package
{
    import flash.display.Sprite;
    import flash.events.TouchEvent;
    import flash.text.AntiAliasType;
    import flash.text.TextField;
    import flash.text.TextFormat;
    import flash.ui.Multitouch;
    import flash.ui.MultitouchInputMode;

    [SWF(width=320, height=460, frameRate=24, backgroundColor=0xEB7F00)]
    public class TouchExample2 extends Sprite
    {
        private var dots:Object;
        private var labels:Object;
        private var labelFormat:TextFormat;
        private var dotCount:uint;
        private var dotsLeft:TextField;
        private static const LABEL_SPACING:uint = 15;
        
        public function TouchExample2()
        {
            super();

            this.labelFormat = new TextFormat();
            labelFormat.color = 0xACF0F2;
            labelFormat.font = "Helvetica";
            labelFormat.size = 11;
            
            this.dotCount = 0;

            this.dotsLeft = new TextField();
            this.dotsLeft.width = 300;
            this.dotsLeft.defaultTextFormat = this.labelFormat;
            this.dotsLeft.x = 3;
            this.dotsLeft.y = 0;
            this.stage.addChild(this.dotsLeft);
            this.updateDotsLeft();

            this.dots = new Object();
            this.labels = new Object();

            Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;
            this.stage.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);
            this.stage.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove);
            this.stage.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);
        }

        private function onTouchBegin(e:TouchEvent):void
        {
            if (this.dotCount == Multitouch.maxTouchPoints) return;
            var dot:Sprite = this.getCircle();
            dot.x = e.stageX;
            dot.y = e.stageY;
            this.stage.addChild(dot);
            dot.startTouchDrag(e.touchPointID, true);
            this.dots[e.touchPointID] = dot;
            
            ++this.dotCount;

            var label:TextField = this.getLabel(e.stageX + ", " + e.stageY);
            label.x = 3;
            label.y = this.dotCount * LABEL_SPACING;
            this.stage.addChild(label);
            this.labels[e.touchPointID] = label;

            this.updateDotsLeft();
        }
        
        private function onTouchMove(e:TouchEvent):void
        {
            var label:TextField = this.labels[e.touchPointID];
            label.text = (e.stageX + ", " + e.stageY);
        }
        
        private function onTouchEnd(e:TouchEvent):void
        {
            var dot:Sprite = this.dots[e.touchPointID];
            var label:TextField = this.labels[e.touchPointID];
            
            this.stage.removeChild(dot);
            this.stage.removeChild(label);
            
            delete this.dots[e.touchPointID];
            delete this.labels[e.touchPointID];
            
            --this.dotCount;

            this.updateDotsLeft();
        }
        
        private function getCircle(circumference:uint = 40):Sprite
        {
            var circle:Sprite = new Sprite();
            circle.graphics.beginFill(0x1695A3);
            circle.graphics.drawCircle(0, 0, circumference);
            return circle;
        }

        private function getLabel(initialText:String):TextField
        {
            var label:TextField = new TextField();
            label.defaultTextFormat = this.labelFormat;
            label.selectable = false;
            label.antiAliasType = AntiAliasType.ADVANCED;
            label.text = initialText;
            return label;
        }
        
        private function updateDotsLeft():void
        {
            this.dotsLeft.text = "Touches Remaining: " + (Multitouch.maxTouchPoints - this.dotCount);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#Multitouch" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Multitouch</linktext></link><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.events.xml#EventDispatcher/addEventListener()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.addEventListener()</linktext></link></related-links><adobeApiEvent id="flash.events:TouchEvent:TOUCH_BEGIN_touchBegin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchBegin</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_BEGIN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchBegin" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchBegin</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_END_touchEnd" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchEnd</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_END</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchEnd" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchEnd</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_MOVE_touchMove" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchMove</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_MOVE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchMove" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_OUT_touchOut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchOut</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_OUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_OVER_touchOver" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchOver</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_OVER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_ROLL_OUT_touchRollOut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchRollOut</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_ROLL_OUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchRollOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchRollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_ROLL_OVER_touchRollOver" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchRollOver</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_ROLL_OVER</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchRollOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchRollOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TouchEvent:TOUCH_TAP_touchTap" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">touchTap</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:TouchEvent:TOUCH_TAP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:TouchEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef><example conref="..\ui\examples\Multitouch_inputMode.as" class="- topic/example "> 以下示例在启用触摸的屏幕上点击在 mySprite 上绘制的正方形时显示一条信息：
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode=MultitouchInputMode.TOUCH_POINT;

var mySprite:Sprite = new Sprite();
var myTextField:TextField = new TextField();

mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0,0,40,40);
addChild(mySprite);

mySprite.addEventListener(TouchEvent.TOUCH_TAP, taphandler);

function taphandler(e:TouchEvent): void {
    myTextField.text = "I've been tapped";
    myTextField.y = 50;
    addChild(myTextField);
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchTap" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchTap</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TouchEvent:TouchEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TouchEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建包含有关触摸事件信息的 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值是：<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_BEGIN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_END</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_MOVE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_OUT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_OVER</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_ROLL_OUT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_ROLL_OVER</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">TouchEvent.TOUCH_TAP</codeph>。 
	
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">touchPointID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">分配给触摸点的唯一标识号（作为 int）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">isPrimaryTouchPoint</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示第一个接触点是否映射到鼠标事件。	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的水平坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的垂直坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sizeX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接触区域的宽度。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sizeY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">接触区域的高度。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pressure</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">relatedObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">受事件影响的补充 InteractiveObject 实例。例如，发生 <codeph class="+ topic/ph pr-d/codeph ">touchOut</codeph> 事件时，<codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 表示指针设备当前指向的显示列表对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 或 Linux 中，表示是否已激活 Ctrl 键。在 Mac 中，表示是否已激活 Ctrl 键或 Command 键。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 键（仅限 Windows 或 Linux）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Command 键是否已激活（仅限 Mac）。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Control 或 Ctrl 键是否已激活。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">TouchEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建包含有关触摸事件信息的 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TouchEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 TouchEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 TouchEvent 对象。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 TouchEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TouchEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 TouchEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 TouchEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 TouchEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[TouchEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... ]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TouchEvent:updateAfterEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateAfterEvent</apiName><shortdesc class="- topic/shortdesc ">
	如果已修改显示列表，则将表示 Flash Player 或 Adobe AIR 在此事件处理完成后呈示结果。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	如果已修改显示列表，则将表示 Flash Player 或 Adobe AIR 在此事件处理完成后呈示结果。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TouchEvent:TOUCH_BEGIN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_BEGIN</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_BEGIN 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchBegin</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_BEGIN</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchBegin" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchBegin</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_END" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_END</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_END 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchEnd</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_END</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchEnd" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchEnd</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_MOVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_MOVE</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_MOVE 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchMove</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_MOVE</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchMove" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchMove</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_OUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_OUT</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_OUT 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchOut</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_OUT</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchOut</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_OVER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_OVER</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_OVER 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchOver</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_OVER</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchOver</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_ROLL_OUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_ROLL_OUT</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_ROLL_OUT 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchRollOut</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_ROLL_OUT</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchRollOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchRollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_ROLL_OVER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_ROLL_OVER</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_ROLL_OVER 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchRollOver</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_ROLL_OVER</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchRollOver" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchRollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:TOUCH_TAP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">TOUCH_TAP</apiName><shortdesc class="- topic/shortdesc ">
     定义 TOUCH_TAP 触摸事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">touchTap</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">TOUCH_TAP</codeph> 触摸事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 TouchEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">pressure</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">对与此事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeX</codeph></entry><entry class="- topic/entry ">接触区域的宽度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sizeY</codeph></entry><entry class="- topic/entry ">接触区域的高度。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageX</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stageY</codeph></entry><entry class="- topic/entry ">事件发生点在全局舞台坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph></entry><entry class="- topic/entry ">分配给触摸点的唯一标识号（作为 int）。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="..\ui\examples\Multitouch_inputMode.as" class="- topic/example "> 以下示例在启用触摸的屏幕上点击在 mySprite 上绘制的正方形时显示一条信息：
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode=MultitouchInputMode.TOUCH_POINT;

var mySprite:Sprite = new Sprite();
var myTextField:TextField = new TextField();

mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0,0,40,40);
addChild(mySprite);

mySprite.addEventListener(TouchEvent.TOUCH_TAP, taphandler);

function taphandler(e:TouchEvent): void {
    myTextField.text = "I've been tapped";
    myTextField.y = 50;
    addChild(myTextField);
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:touchTap" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.touchTap</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:altKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">altKey</apiName><shortdesc class="- topic/shortdesc ">
    表示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	 
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    表示 Alt 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。仅 Windows 和 Linux 操作系统支持。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:commandKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">commandKey</apiName><shortdesc class="- topic/shortdesc ">
		表示是否已激活 Command 键（仅限 Mac）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示是否已激活 Command 键（仅限 Mac）。 
		
		<p class="- topic/p ">在 Mac OS 上，<codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph> 属性的值与 <codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph> 属性相同。在 Windows 或 Linux 上，此属性始终是 false。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:controlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">controlKey</apiName><shortdesc class="- topic/shortdesc ">
		表示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:ctrlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ctrlKey</apiName><shortdesc class="- topic/shortdesc ">
	在 Windows 或 Linux 中，表示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在 Windows 或 Linux 中，表示 Ctrl 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。在 Macintosh 中，表示是否已激活 Control 键或 Command 键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:isPrimaryTouchPoint:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isPrimaryTouchPoint</apiName><shortdesc class="- topic/shortdesc ">
	表示第一个接触点是否映射到鼠标事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示第一个接触点是否映射到鼠标事件。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:isRelatedObjectInaccessible:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isRelatedObjectInaccessible</apiName><shortdesc class="- topic/shortdesc ">
	 如果为 true，则 relatedObject 属性是出于与安全沙箱相关的原因而设置为 null 的。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 如果为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 属性是出于与安全沙箱相关的原因而设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 的。如果 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 的标称值是对其他沙箱中的 DisplayObject 的引用，则 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 将设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，除非具有双向跨越此沙箱边界的权限。通过以下方式确立权限：从 SWF 文件调用 <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，然后在加载图像时设置 <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.checkPolicyFile</codeph> 属性。
	 
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#TouchEvent/relatedObject" class="- topic/link "><linktext class="- topic/linktext ">MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:localX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属 Sprite 的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属 Sprite 的水平坐标。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:localY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属 Sprite 的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属 Sprite 的垂直坐标。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:pressure:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pressure</apiName><shortdesc class="- topic/shortdesc ">
	0.0 和 1.0 之间的值表示强制接触设备。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">0.0</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> 之间的值表示强制接触设备。如果设备不支持检测压力，则此值为 <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph>。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:relatedObject:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">relatedObject</apiName><shortdesc class="- topic/shortdesc ">
	对与事件相关的显示列表对象的引用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	对与事件相关的显示列表对象的引用。例如，发生 <codeph class="+ topic/ph pr-d/codeph ">touchOut</codeph> 事件时，<codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 表示指针设备当前指向的显示列表对象。此属性适用于 <codeph class="+ topic/ph pr-d/codeph ">touchOut</codeph>、<codeph class="+ topic/ph pr-d/codeph ">touchOver</codeph>、<codeph class="+ topic/ph pr-d/codeph ">touchRollOut</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">touchRollOver</codeph> 事件。
	<p class="- topic/p ">在以下两种情况下，此属性的值可以为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>：无相关对象；存在相关对象，但该对象位于您无法访问的安全沙箱中。使用 <codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#TouchEvent/isRelatedObjectInaccessible" class="- topic/link "><linktext class="- topic/linktext ">TouchEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:TouchEvent:shiftKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shiftKey</apiName><shortdesc class="- topic/shortdesc ">
	表示 Shift 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Shift 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:sizeX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sizeX</apiName><shortdesc class="- topic/shortdesc ">
	接触区域的宽度。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	接触区域的宽度。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:sizeY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sizeY</apiName><shortdesc class="- topic/shortdesc ">
	接触区域的高度。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	接触区域的高度。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:stageX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stageX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点在全局舞台坐标中的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点在全局舞台坐标中的水平坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">localX</codeph> 属性时会计算此属性。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:stageY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stageY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点在全局舞台坐标中的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点在全局舞台坐标中的垂直坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">localY</codeph> 属性时会计算此属性。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:TouchEvent:touchPointID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">touchPointID</apiName><shortdesc class="- topic/shortdesc ">
	分配给触摸点的唯一标识号（作为 int）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	分配给触摸点的唯一标识号（作为 int）。
	
	</apiDesc><example conref="examples\TouchExample.touchPointID.as" class="- topic/example ">  以下示例建立了一个变量 <codeph class="+ topic/ph pr-d/codeph ">touchMoveID</codeph>，用于测试正确的 <codeph class="+ topic/ph pr-d/codeph ">touchPointID</codeph> 值，以便对触摸移动事件做出响应。此外，其他触摸输入也会触发事件处理函数。请注意，用于侦听移动和结束阶段的侦听器位于舞台上，而不是显示对象上。如果用户的触摸超出了显示对象的范围，那么舞台会侦听移动阶段或结束阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT; 

var mySprite:Sprite = new Sprite(); 
mySprite.graphics.beginFill(0x336699); 
mySprite.graphics.drawRect(0,0,40,40); 
addChild(mySprite); 

var myTextField:TextField = new TextField(); 
addChild(myTextField); 
myTextField.width = 200; 
myTextField.height = 20; 

var touchMoveID:int = 0; 
 
mySprite.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin); 
function onTouchBegin(event:TouchEvent) { 
    if(touchMoveID != 0) { 
        myTextField.text = "already moving. ignoring new touch";     
        return; 
    } 
    touchMoveID = event.touchPointID; 
 
    myTextField.text = "touch begin" + event.touchPointID; 
    stage.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove); 
    stage.addEventListener(TouchEvent.TOUCH_END, onTouchEnd); 
} 
function onTouchMove(event:TouchEvent) { 
    if(event.touchPointID != touchMoveID) { 
        myTextField.text = "ignoring unrelated touch"; 
        return; 
    } 
    mySprite.x = event.stageX; 
    mySprite.y = event.stageY; 
    myTextField.text = "touch move" + event.touchPointID; 
} 
function onTouchEnd(event:TouchEvent) { 
    if(event.touchPointID != touchMoveID) { 
        myTextField.text = "ignoring unrelated touch end"; 
        return; 
    } 
    touchMoveID = 0; 
    stage.removeEventListener(TouchEvent.TOUCH_MOVE, onTouchMove); 
    stage.removeEventListener(TouchEvent.TOUCH_END, onTouchEnd); 
    myTextField.text = "touch end" + event.touchPointID; 
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ServerSocketConnectEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ServerSocketConnectEvent</apiName><shortdesc class="- topic/shortdesc ">
 当客户端尝试连接到服务器套接字时，ServerSocket 对象调度 ServerSocketConnectEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当客户端尝试连接到服务器套接字时，ServerSocket 对象调度 ServerSocketConnectEvent 对象。
 
 <p class="- topic/p ">ServerSocketConnectEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">socket</codeph> 属性提供 Socket 对象，用于服务器和客户端之间的后续通信。要拒绝连接，请调用 Socket <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> 方法。</p>
 
 </apiDesc><example conref="examples\ServerSocketConnectEventExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ServerSocket" class="- topic/link "><linktext class="- topic/linktext ">ServerSocket 类</linktext></link></related-links><apiConstructor id="flash.events:ServerSocketConnectEvent:ServerSocketConnectEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ServerSocketConnectEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建包含有关客户端连接信息的 ServerSocketConnectEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。必须为：<codeph class="+ topic/ph pr-d/codeph ">ServerSocketConnectEvent.CONNECT</codeph>。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。总是 <codeph class="+ topic/ph pr-d/codeph ">false</codeph> 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。总是 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">socket</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Socket</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">用于新连接的套接字。
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建包含有关客户端连接信息的 ServerSocketConnectEvent 对象。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ServerSocketConnectEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 ServerSocketConnectEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 ServerSocketConnectEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 ServerSocketConnectEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ServerSocketConnectEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 ServerSocketConnectEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 <codeph class="+ topic/ph pr-d/codeph ">ServerSocketConnectEvent</codeph> 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 ServerSocketConnectEvent 对象的所有属性。 
    
    <p class="- topic/p ">字符串的格式如下：</p>
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ServerSocketConnectEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> socket=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ServerSocketConnectEvent:CONNECT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CONNECT</apiName><shortdesc class="- topic/shortdesc ">
	 定义 ServerSocketConnectEvent 事件对象 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">connect</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当收到客户端连接时由 ServerSocket 对象调度。
	 
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 定义 <codeph class="+ topic/ph pr-d/codeph ">ServerSocketConnectEvent</codeph> 事件对象 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	 
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>，没有可取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">此 ServerSocket 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">此 ServerSocket 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">socket</codeph></entry><entry class="- topic/entry ">表示新连接的 Socket 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ServerSocketConnectEvent:socket:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">socket</apiName><shortdesc class="- topic/shortdesc ">
    用于新连接的套接字。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:Socket</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    用于新连接的套接字。
    
    <p class="- topic/p ">将此 Socket 对象用于与客户端的所有通信。您的应用程序负责维持对 Socket 对象的引用。如果不这样做，则该对象符合垃圾回收的条件，可能会在运行时损坏，但不会发出警告。</p>
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SyncEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SyncEvent</apiName><shortdesc class="- topic/shortdesc ">
 在服务器更新了远程共享对象后，表示远程共享对象的 SharedObject 对象将调度 SyncEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">SyncEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在服务器更新了远程共享对象后，表示远程共享对象的 SharedObject 对象将调度 SyncEvent 对象。只有一种类型的 <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> 事件：<codeph class="+ topic/ph pr-d/codeph ">SyncEvent.SYNC</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject" class="- topic/link "><linktext class="- topic/linktext ">SharedObject 类</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">sync</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/event:sync" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SyncEvent</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个 Event 对象，其中包含有关 sync 事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 sync 事件：<codeph class="+ topic/ph pr-d/codeph ">SyncEvent.SYNC</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">changeList</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个对象数组，用于描述与远程 SharedObject 的同步。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">changeList</codeph> 属性访问此对象。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">SyncEvent 对象的构造函数。
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个 Event 对象，其中包含有关 <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> 事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#SyncEvent/changeList" class="- topic/link "><linktext class="- topic/linktext ">changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 SyncEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 SyncEvent 对象。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 SyncEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 SyncEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 SyncEvent 对象的所有属性。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 SyncEvent 对象的所有属性。字符串的格式如下：
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[SyncEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> list=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SYNC</apiName><shortdesc class="- topic/shortdesc ">
     定义 sync 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">sync</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">sync</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">changeList</codeph></entry><entry class="- topic/entry ">一个数组，具有描述其状态的属性。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已由服务器更新的 SharedObject 实例。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#SharedObject/event:sync" class="- topic/link "><linktext class="- topic/linktext ">flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">changeList</apiName><shortdesc class="- topic/shortdesc ">
     对象数组；每个对象都包含一些属性，描述远程共享对象的已更改成员。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      对象数组；每个对象都包含一些属性，描述远程共享对象的已更改成员。每个对象的属性都为 <codeph class="+ topic/ph pr-d/codeph ">code</codeph>、<codeph class="+ topic/ph pr-d/codeph ">name</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">oldValue</codeph>。 
     <p class="- topic/p ">当您最初连接到一个远程共享对象（对本地永久共享和/或在服务器上）时，该对象的所有属性都设置为空字符串。</p><p class="- topic/p ">否则，Flash 将 <codeph class="+ topic/ph pr-d/codeph ">code</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">"clear"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"success"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"reject"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"change"</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">"delete"</codeph>。 </p>
     <ul class="- topic/ul "><li class="- topic/li ">值为 <codeph class="+ topic/ph pr-d/codeph ">"clear"</codeph> 表示您已成功连接到不是永久位于服务器或客户端上的远程共享对象，或者该对象的所有属性已删除，例如，客户端和服务器上该对象的副本已不再同步，Flash Player 重新同步客户端对象和服务器对象。在后一种情况下，将调度 <codeph class="+ topic/ph pr-d/codeph ">SyncEvent.SYNC</codeph>，并且“code”值将设置为 <codeph class="+ topic/ph pr-d/codeph ">"change"</codeph>。 </li><li class="- topic/li ">值为 <codeph class="+ topic/ph pr-d/codeph ">"success"</codeph> 表示客户端更改了共享对象。 </li><li class="- topic/li ">值为 <codeph class="+ topic/ph pr-d/codeph ">"reject"</codeph> 表示客户端尝试更改对象失败，而另一个客户端更改了对象。 </li><li class="- topic/li ">值为 <codeph class="+ topic/ph pr-d/codeph ">"change"</codeph> 表示另一个客户端更改了对象，或者服务器重新同步了对象。 </li><li class="- topic/li ">值为 <codeph class="+ topic/ph pr-d/codeph ">"delete"</codeph> 表示属性已删除。 </li></ul>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">name</codeph> 属性包含已更改的属性的名称。</p>
     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">oldValue</codeph> 属性包含已更改属性的先前的值。除非代码的值为 <codeph class="+ topic/ph pr-d/codeph ">"reject"</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">"change"</codeph>，否则此参数为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">NetConnection 类</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">NetStream 类</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:KeyboardEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">KeyboardEvent</apiName><shortdesc class="- topic/shortdesc ">
 在响应用户通过键盘输入的内容时将调度的 KeyboardEvent 对象 ID。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Keyboard 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在响应用户通过键盘输入的内容时将调度的 KeyboardEvent 对象 ID。有两种类型的键盘事件：<codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent.KEY_DOWN</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent.KEY_UP</codeph>
 
 <p class="- topic/p ">由于按键与特定字符之间的映射因设备和操作系统而异，因此请使用 TextEvent 事件类型来处理字符输入。</p>
 
 <p class="- topic/p ">要以全局方式侦听按键事件，请在舞台上侦听捕获阶段、目标阶段或冒泡阶段。</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">KeyboardEventExample</codeph> 类来说明键盘事件及其侦听器函数。该示例执行下列任务：
 <ol class="- topic/ol "><li class="- topic/li ">它创建一个新的 Sprite 实例，名称为 <codeph class="+ topic/ph pr-d/codeph ">child</codeph>。</li><li class="- topic/li ">它声明了以后在设置正方形的背景颜色和大小时使用的属性。</li><li class="- topic/li ">使用 Sprite 的方法，它通过调用 <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> 方法绘制一个浅蓝色正方形，其显示在舞台上的默认坐标 (0,0) 处。</li><li class="- topic/li ">它添加了一个鼠标事件两个键盘类型事件侦听器：
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">click</codeph>/<codeph class="+ topic/ph pr-d/codeph ">clickHandler</codeph>，在单击正方形将焦点设置在 <codeph class="+ topic/ph pr-d/codeph ">child</codeph> sprite 上以使它可以侦听键盘事件时进行调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">keyDown</codeph>/<codeph class="+ topic/ph pr-d/codeph ">keyDownHandler</codeph>，按下任何键时将调度这两个侦听器。订阅者方法使用 <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 语句输出有关事件的信息。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">keyUp</codeph> / <codeph class="+ topic/ph pr-d/codeph ">keyUpHandler</codeph>，在释放某个键时进行调度。</li></ul></li></ol>
 
 <p class="- topic/p ">在测试此示例时，需要首先单击此正方形才能让键盘事件正常工作。</p>
 <p product="flash" class="- topic/p ">此外，如果使用 Flash 中的“测试影片”命令，创作界面可能会响应特定的键，而不会响应附加该 child sprite 的事件侦听器。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#KeyboardEvent/KEY_DOWN" class="- topic/link "><linktext class="- topic/linktext ">KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP" class="- topic/link "><linktext class="- topic/linktext ">KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation" class="- topic/link "><linktext class="- topic/linktext ">KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">keyDown</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:keyDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">keyUp</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:keyUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">KeyboardEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关键盘事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent.KEY_DOWN</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charCodeValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">按下或释放的键的字符代码值。返回的字符代码值为英文键盘值。例如，如果您按 Shift+3，则 <codeph class="+ topic/ph pr-d/codeph ">Keyboard.charCode()</codeph> 属性在日文键盘上将返回 #，与其在英文键盘上的行为相同。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">keyCodeValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">按下或释放的键的键控代码值。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">keyLocationValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">按键在键盘上的位置。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKeyValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 中，表示是否已激活 Ctrl 键。在 Mac 中，表示是否已激活 Ctrl 键或 Command 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKeyValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 功能键（仅限 Windows）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKeyValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 功能键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKeyValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示在 Mac 中是否已激活 Control 键，以及在 Windows 和 Linux 中是否已激活 Control 或 Ctrl 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKeyValue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Command 键（仅限 Mac）。
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">KeyboardEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关键盘事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#KeyboardEvent/KEY_DOWN" class="- topic/link "><linktext class="- topic/linktext ">KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP" class="- topic/link "><linktext class="- topic/linktext ">KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode" class="- topic/link "><linktext class="- topic/linktext ">Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 KeyboardEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 KeyboardEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 KeyboardEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 KeyboardEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 KeyboardEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 KeyboardEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[KeyboardEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... shiftKey=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateAfterEvent</apiName><shortdesc class="- topic/shortdesc ">
	表示如果已修改显示列表，则应该在此事件处理完成后呈示显示结果
	
	</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示如果已修改显示列表，则应该在此事件处理完成后呈示显示结果
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">KEY_DOWN</apiName><shortdesc class="- topic/shortdesc ">
	KeyboardEvent.KEY_DOWN 常量定义 keyDown 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">keyDown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent.KEY_DOWN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">keyDown</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry ">在 AIR 中为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，在 Flash Player 中为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>；在 AIR 中，取消此事件会禁止将字符输入到文本字段中。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">charCode</codeph></entry><entry class="- topic/entry ">按下或释放的键的字符代码值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph></entry><entry class="- topic/entry ">按下或释放的键的键控代码值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyLocation</codeph></entry><entry class="- topic/entry ">按键在键盘上的位置。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有焦点的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:keyDown" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">KEY_UP</apiName><shortdesc class="- topic/shortdesc ">
	KeyboardEvent.KEY_UP 常量定义 keyUp 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">keyUp</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent.KEY_UP</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">keyUp</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">charCode</codeph></entry><entry class="- topic/entry ">包含按下或释放的键的字符代码值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">在 Windows 和 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph></entry><entry class="- topic/entry ">按下或释放的键的键控代码值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyLocation</codeph></entry><entry class="- topic/entry ">按键在键盘上的位置。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">具有焦点的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:keyUp" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">altKey</apiName><shortdesc class="- topic/shortdesc ">
	在 Windows 中，表示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)；在 Mac OS 中，表示 Option 键是否处于活动状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在 Windows 中，表示 Alt 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)；在 Mac OS 中，表示 Option 键是否处于活动状态。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">charCode</apiName><shortdesc class="- topic/shortdesc ">
	包含按下或释放的键的字符代码值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	包含按下或释放的键的字符代码值。字符代码值为英文键盘值。例如，如果您按 Shift+3，则 <codeph class="+ topic/ph pr-d/codeph ">charCode</codeph> 在日文键盘上将为 #，就像在英文键盘上一样。
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>当输入法编辑器 (IME) 正在运行时，<codeph class="+ topic/ph pr-d/codeph ">charCode</codeph> 不会报告精确的字符代码。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">commandKey</apiName><shortdesc class="- topic/shortdesc ">
	表示 Command 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Command 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。仅 Mac OS 支持。在 Mac OS 中，<codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph> 属性具有与 <codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph> 属性相同的值。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">controlKey</apiName><shortdesc class="- topic/shortdesc ">
	表示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Ctrl 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。在 Windows 和 Linux 中，Ctrl 键处于活动状态时这也为 true。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ctrlKey</apiName><shortdesc class="- topic/shortdesc ">
	在 Windows 和 Linux 中，表示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)；在 Mac OS 中，表示 Ctrl 键或 Command 键是否处于活动状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在 Windows 和 Linux 中，表示 Ctrl 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)；在 Mac OS 中，表示 Ctrl 键或 Command 键是否处于活动状态。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">keyCode</apiName><shortdesc class="- topic/shortdesc ">
	按下或释放的键的键控代码值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	按下或释放的键的键控代码值。
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>当输入法编辑器 (IME) 正在运行时，<codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph> 不会报告精确的键控代码。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">keyLocation</apiName><shortdesc class="- topic/shortdesc ">
	表示键在键盘上的位置。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 <codeph class="+ topic/ph pr-d/codeph ">KeyLocation.LEFT</codeph>，右 Shift 键的值为 <codeph class="+ topic/ph pr-d/codeph ">KeyLocation.RIGHT</codeph>。另一个示例是区分标准键盘 (<codeph class="+ topic/ph pr-d/codeph ">KeyLocation.STANDARD</codeph>) 与数字键盘 (<codeph class="+ topic/ph pr-d/codeph ">KeyLocation.NUM_PAD</codeph>) 上按下的数字键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shiftKey</apiName><shortdesc class="- topic/shortdesc ">
	表示 Shift 功能键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Shift 功能键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:NativeWindowDisplayStateEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">NativeWindowDisplayStateEvent</apiName><shortdesc class="- topic/shortdesc ">
 在窗口显示状态发生更改时，NativeWindow 对象将调度 NativeWindowDisplayStateEvent 类的事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">更改窗口显示状态的 NativeWindow 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在窗口显示状态发生更改时，NativeWindow 对象将调度 NativeWindowDisplayStateEvent 类的事件。有两种类型的事件：
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li></ul>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE" class="- topic/link "><linktext class="- topic/linktext ">flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">displayStateChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">显示状态更改后由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">displayStateChanging</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">显示状态更改前由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">NativeWindowDisplayStateEvent</apiName><shortdesc class="- topic/shortdesc ">
    使用与窗口显示状态事件有关的特定信息创建 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li></ul>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">beforeDisplayState</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">更改之前的 <codeph class="+ topic/ph pr-d/codeph ">displayState</codeph>。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">afterDisplayState</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">更改之后的 <codeph class="+ topic/ph pr-d/codeph ">displayState</codeph>。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    使用与窗口显示状态事件有关的特定信息创建 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 NativeWindowDisplayStateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 NativeWindowDisplayStateEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 NativeWindowDisplayStateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 NativeWindowDisplayStateEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 NativeWindowDisplayStateEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 NativeWindowDisplayStateEvent 对象的所有属性。该字符串具有以下格式：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[NativeWindowDisplayStateEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> beforeDisplayState=<i class="+ topic/ph hi-d/i ">value</i> afterDisplayState=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DISPLAY_STATE_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
    定义 displayStateChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">displayStateChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">显示状态更改后由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">displayStateChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterDisplayState</codeph></entry><entry class="- topic/entry ">窗口的旧显示状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeDisplayState</codeph></entry><entry class="- topic/entry ">窗口的新显示状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚更改状态的 NativeWindow 实例。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DISPLAY_STATE_CHANGING</apiName><shortdesc class="- topic/shortdesc ">
    定义 displayStateChanging 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">displayStateChanging</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">显示状态更改前由 NativeWindow 对象调度。
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">displayStateChanging</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterDisplayState</codeph></entry><entry class="- topic/entry ">未处理的更改之前的窗口显示状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeDisplayState</codeph></entry><entry class="- topic/entry ">未处理的更改之后的窗口显示状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚更改状态的 NativeWindow 实例。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消该事件会阻止更改。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">afterDisplayState</apiName><shortdesc class="- topic/shortdesc ">
     更改之后 NativeWindow 的显示状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     更改之后 NativeWindow 的显示状态。  
     
     <p class="- topic/p ">如果事件为 <codeph class="+ topic/ph pr-d/codeph ">displayStateChanging</codeph>，则表示显示状态尚未更改；在未取消该事件时，<codeph class="+ topic/ph pr-d/codeph ">afterDisplayState</codeph> 表示新的显示状态。如果事件为 <codeph class="+ topic/ph pr-d/codeph ">displayStateChanged</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">afterDisplayState</codeph> 表示当前的值。</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">beforeDisplayState</apiName><shortdesc class="- topic/shortdesc ">
     更改之前 NativeWindow 的显示状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     更改之前 NativeWindow 的显示状态。  
     
     <p class="- topic/p ">如果事件为 <codeph class="+ topic/ph pr-d/codeph ">displayStateChanging</codeph>，则表示显示状态尚未更改；<codeph class="+ topic/ph pr-d/codeph ">beforeDisplayState</codeph> 反映窗口的当前显示状态。如果事件为 <codeph class="+ topic/ph pr-d/codeph ">displayStateChanged</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">beforeDisplayState</codeph> 表示以前的值。</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:VideoEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">VideoEvent</apiName><shortdesc class="- topic/shortdesc ">
	 此事件类报告当前视频呈现状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">报告当前视频呈现状态。
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <p class="- topic/p ">此事件类报告当前视频呈现状态。出于以下目的使用此事件：</p>
	 <ul class="- topic/ul "><li class="- topic/li ">了解视频显示的大小何时更改或初始化。使用此事件，而不是轮询大小更改。当您收到此事件时，可以访问 <codeph class="+ topic/ph pr-d/codeph ">Video.videoSize</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">Video.videoHeight</codeph> 来获取当前播放的视频的像素尺寸。</li><li class="- topic/li ">了解视频通过软件还是 GPU 解码。如果 <codeph class="+ topic/ph pr-d/codeph ">status</codeph> 属性返回“accelerated”，如有可能，您应该切换到使用 StageVideo 类。 </li></ul>
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent</linktext></link><link href="flash.events.xml#StageVideoAvailabilityEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoAvailabilityEvent</linktext></link><link href="flash.display.xml#Stage/stageVideos" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.stageVideos</linktext></link><link href="flash.media.xml#Video" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7e1a.html" class="- topic/link "><linktext class="- topic/linktext ">使用视频</linktext></link></related-links><apiConstructor id="flash.events:VideoEvent:VideoEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">VideoEvent</apiName><shortdesc class="- topic/shortdesc ">
		 构造函数。
		 
		 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">VideoEvent.RENDER_STATE</codeph>。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示此 Event 对象是否参与事件流的冒泡阶段。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示您是否可以取消触发此事件的操作。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">status</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">视频的呈现状态。
		 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">构造函数。
		 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">构造函数。</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:VideoEvent:RENDER_STATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATE</apiName><shortdesc class="- topic/shortdesc ">
		 定义 renderState 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">renderState</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Video 对象的 renderState 事件的标识符。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 定义 <codeph class="+ topic/ph pr-d/codeph ">renderState</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		 <p class="- topic/p ">此事件具有以下属性：</p>
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">status</codeph></entry><entry class="- topic/entry ">该事件报告的呈现状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告呈现状态的 Video 对象。</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:VideoEvent:RENDER_STATUS_ACCELERATED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATUS_ACCELERATED</apiName><shortdesc class="- topic/shortdesc ">
		 仅限内部使用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">accelerated</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">仅限内部使用。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">仅限内部使用。应使用 flash.media.VideoStatus.ACCELERATED。</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:VideoEvent:RENDER_STATUS_SOFTWARE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATUS_SOFTWARE</apiName><shortdesc class="- topic/shortdesc ">
		 仅限内部使用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">software</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">仅限内部使用。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">仅限内部使用。应使用 flash.media.VideoStatus.SOFTWARE。</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:VideoEvent:RENDER_STATUS_UNAVAILABLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RENDER_STATUS_UNAVAILABLE</apiName><shortdesc class="- topic/shortdesc ">
		 仅限内部使用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unavailable</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">仅限内部使用。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">仅限内部使用。应使用 flash.media.VideoStatus.UNAVAILABLE。</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:VideoEvent:status:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
		 返回 VideoEvent 对象的呈现状态。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">返回 VideoEvent 对象的呈现状态。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">返回 VideoEvent 对象的呈现状态。可能值包括“unavailable”、“software”和“accelerated”。</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:GestureEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">GestureEvent</apiName><shortdesc class="- topic/shortdesc "> 
 使用 GestureEvent 类，您可以处理设备上那些检测与设备的复杂用户接触（例如同时在触摸屏上按两个手指）的多点触控事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">为触摸交互提供事件处理支持
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 使用 GestureEvent 类，您可以处理设备上那些检测与设备的复杂用户接触（例如同时在触摸屏上按两个手指）的多点触控事件。当用户与带有触摸屏的移动电话或绘图板等设备交互时，用户通常用手指触摸并沿着屏幕移动手指或指针设备。可使用 GestureEvent 和 TransformGestureEvent 类开发响应此用户交互的应用程序。使用在此处或在相关 TouchEvent 和 TransformGestureEvent 类中定义的事件类型创建事件侦听器。并使用这些类的属性和方法来构造响应用户触摸设备的事件处理程序。
 <p class="- topic/p ">使用 Multitouch 类确定当前环境的触摸交互支持，如果当前环境支持触摸交互，则对其进行管理。</p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>当对象嵌套在显示列表中时，触摸事件的目标将是显示列表中可见的最深的可能嵌套对象。此对象称为目标节点。要使目标节点的祖先（包含显示列表中目标节点的对象）接收触摸事件的通知，请对祖先节点使用 <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.addEventListener()</codeph> 并将 type 参数设置为要检测的特定触摸事件。</p>
 </apiDesc><example conref="examples\GestureTwoFingerTap.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_TWO_FINGER_TAP</codeph> 事件的事件处理。当用户执行二指点击手势时，mySprite 会进行旋转，同时 myTextField 会使用二指点击事件的唯一阶段 <codeph class="+ topic/ph pr-d/codeph ">all</codeph> 进行填充。TransformGestureEvent 类中的其他手势支持开始、更新和结束阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(GestureEvent.GESTURE_TWO_FINGER_TAP , onTwoFingerTap );
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onTwoFingerTap(evt:GestureEvent):void {

    evt.target.rotation -= 45;
    myTextField.text = evt.phase; //"all"

}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#Multitouch" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.Multitouch</linktext></link><link href="flash.events.xml#TouchEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TouchEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.events.xml#EventDispatcher/addEventListener()" class="- topic/link "><linktext class="- topic/linktext ">flash.events.EventDispatcher.addEventListener()</linktext></link></related-links><adobeApiEvent id="flash.events:GestureEvent:GESTURE_TWO_FINGER_TAP_gestureTwoFingerTap" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">gestureTwoFingerTap</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:GestureEvent:GESTURE_TWO_FINGER_TAP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:GestureEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureTwoFingerTap" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureTwoFingerTap</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:GestureEvent:GestureEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">GestureEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建包含有关多点触控事件（例如同时在触摸屏上按两个手指）信息的 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。支持的值是： <codeph class="+ topic/ph pr-d/codeph ">GestureEvent.GESTURE_TWO_FINGER_TAP</codeph>。 
	
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">phase</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">GesturePhase 类中用于表示触摸手势的进度（开始、更新、结束或所有）的值。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的水平坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件发生点相对于所属 Sprite 的垂直坐标。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 或 Linux 中，表示是否已激活 Ctrl 键。在 Mac 中，表示是否已激活 Ctrl 键或 Command 键。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Alt 键（仅限 Windows 或 Linux）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Command 键是否已激活（仅限 Mac）。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">（仅 AIR）表示 Control 或 Ctrl 键是否已激活。此参数仅适用于 Adobe AIR；请勿对 Flash Player 内容设置此参数。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">GestureEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建包含有关多点触控事件（例如同时在触摸屏上按两个手指）信息的 Event 对象。将 Event 对象作为参数传递给事件侦听器。
    
	
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:GestureEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 GestureEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 GestureEvent 对象。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 GestureEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:GestureEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 GestureEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 GestureEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 GestureEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[GestureEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... ]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:GestureEvent:updateAfterEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateAfterEvent</apiName><shortdesc class="- topic/shortdesc ">
	如果显示列表已由事件处理函数修改，则在处理手势事件后刷新 Flash 运行时显示。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	如果显示列表已由事件处理函数修改，则在处理手势事件后刷新 Flash 运行时显示。
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:GestureEvent:GESTURE_TWO_FINGER_TAP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">GESTURE_TWO_FINGER_TAP</apiName><shortdesc class="- topic/shortdesc ">
     定义 GESTURE_TWO_FINGER_TAP 手势事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">gestureTwoFingerTap</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_TWO_FINGER_TAP</codeph> 手势事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	 
	 <p class="- topic/p ">调度的 GestureEvent 对象具有下列属性：</p>
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">altKey</codeph></entry><entry class="- topic/entry ">如果 Alt 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>（Windows 或 Linux）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">（仅限 AIR）在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">phase</codeph></entry><entry class="- topic/entry ">事件流中的当前阶段。对于二指点击事件，调度此事件后，此值始终是 <codeph class="+ topic/ph pr-d/codeph ">all</codeph>，与值 <codeph class="+ topic/ph pr-d/codeph ">GesturePhase.ALL</codeph> 对应。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible</codeph></entry><entry class="- topic/entry ">如果由于安全沙箱规则的原因将 relatedObject 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localX</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">localY</codeph></entry><entry class="- topic/entry ">事件发生点相对于所属 Sprite 的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">触摸设备下的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:gestureTwoFingerTap" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.gestureTwoFingerTap</linktext></link><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:GestureEvent:altKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">altKey</apiName><shortdesc class="- topic/shortdesc ">
    表示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	 
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    表示 Alt 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。仅 Windows 和 Linux 操作系统支持。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:commandKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">commandKey</apiName><shortdesc class="- topic/shortdesc ">
		表示是否已激活 Command 键（仅限 Mac）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示是否已激活 Command 键（仅限 Mac）。 
		
		<p class="- topic/p ">在 Mac OS 上，<codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph> 属性的值与 <codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph> 属性相同。在 Windows 或 Linux 上，此属性始终是 false。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:controlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">controlKey</apiName><shortdesc class="- topic/shortdesc ">
		表示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示在 Mac 中是否已激活 Control 键，以及在 Windows 或 Linux 中是否已激活 Ctrl 键。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:ctrlKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ctrlKey</apiName><shortdesc class="- topic/shortdesc ">
	在 Windows 或 Linux 中，表示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在 Windows 或 Linux 中，表示 Ctrl 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。在 Macintosh 中，表示是否已激活 Control 键或 Command 键。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:localX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属 Sprite 的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属 Sprite 的水平坐标。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:localY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点相对于所属 Sprite 的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点相对于所属 Sprite 的垂直坐标。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:phase:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">phase</apiName><shortdesc class="- topic/shortdesc ">
	GesturePhase 类中用于表示触摸操作的进度的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	GesturePhase 类中用于表示触摸操作的进度的值。对于多数手势，此值是 <codeph class="+ topic/ph pr-d/codeph ">begin</codeph>、<codeph class="+ topic/ph pr-d/codeph ">update</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">end</codeph>。对于滑动和二指点击手势，调度此事件后，阶段值始终是 <codeph class="+ topic/ph pr-d/codeph ">all</codeph>。使用此值确定事件处理程序何时响应复杂用户交互，或确定何时根据多点触控手势的当前阶段（例如用户触摸并沿着屏幕拖动可视对象时展开、移动和“放置”）以不同方式响应。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GesturePhase" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GesturePhase</linktext></link></related-links></apiValue><apiValue id="flash.events:GestureEvent:shiftKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shiftKey</apiName><shortdesc class="- topic/shortdesc ">
	表示 Shift 键是处于活动状态 (true) 还是非活动状态 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Shift 键是处于活动状态 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是非活动状态 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:stageX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stageX</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点在全局舞台坐标中的水平坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点在全局舞台坐标中的水平坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">localX</codeph> 属性时会计算此属性。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:GestureEvent:stageY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stageY</apiName><shortdesc class="- topic/shortdesc ">
	事件发生点在全局舞台坐标中的垂直坐标。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	事件发生点在全局舞台坐标中的垂直坐标。当设置 <codeph class="+ topic/ph pr-d/codeph ">localY</codeph> 属性时会计算此属性。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:FullScreenEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FullScreenEvent</apiName><shortdesc class="- topic/shortdesc ">
只要舞台进入或离开全屏显示模式，Stage 对象就调度 FullScreenEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">FullScreenEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
只要舞台进入或离开全屏显示模式，Stage 对象就调度 FullScreenEvent 对象。只有一种类型的 <codeph class="+ topic/ph pr-d/codeph ">fullScreen</codeph> 事件：<codeph class="+ topic/ph pr-d/codeph ">FullScreenEvent.FULL_SCREEN</codeph>。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/displayState" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">fullScreen</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/displayState" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FullScreenEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关 fullScreen 事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 <codeph class="+ topic/ph pr-d/codeph ">fullScreen</codeph> 事件：<codeph class="+ topic/ph pr-d/codeph ">FullScreenEvent.FULL_SCREEN</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fullScreen</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示设备已激活 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是被取消激活 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">activating</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">FullScreenEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关 <codeph class="+ topic/ph pr-d/codeph ">fullScreen</codeph> 事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN" class="- topic/link "><linktext class="- topic/linktext ">FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 FullScreenEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 FullScreenEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 FullScreenEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 FullScreenEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 FullScreenEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 FullScreenEvent 对象的所有属性。使用以下格式：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[FullScreenEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> activating=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FULL_SCREEN</apiName><shortdesc class="- topic/shortdesc ">
	FullScreenEvent.FULL_SCREEN 常量定义 fullScreen 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">fullScreen</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">FullScreenEvent.FULL_SCREEN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">fullScreen</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">fullScreen</codeph></entry><entry class="- topic/entry ">如果显示状态为全屏，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果正常显示，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">Stage 对象。</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/displayState" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullScreen</apiName><shortdesc class="- topic/shortdesc ">
	表示 Stage 对象是处于全屏模式 (true) 还是没有处于该模式 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示 Stage 对象是处于全屏模式 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是没有处于该模式 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:StageVideoAvailabilityEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StageVideoAvailabilityEvent</apiName><shortdesc class="- topic/shortdesc ">
	此事件在 Stage.stageVideos 属性的状态更改时触发。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">报告舞台视频的当前可用性。
   	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<p class="- topic/p ">此事件在 <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph> 属性的状态更改时触发。此属性可在用户将视频从不支持 StageVideo（例如，<codeph class="+ topic/ph pr-d/codeph ">wmode=normal</codeph>、<codeph class="+ topic/ph pr-d/codeph ">wmode=opaque</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">wmode=transparent</codeph>）的 <codeph class="+ topic/ph pr-d/codeph ">wmode</codeph> 展开到全屏显示时更改。 展开到全屏可导致 <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph> 矢量被填充。相反，退出全屏显示可导致 <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph> 矢量为空。</p>
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>此通知仅在 <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph> 属性的状态更改时才出现。因此，行为会根据平台和浏览器而有所不同。例如，在 Windows 上，当您进入全屏模式而 <codeph class="+ topic/ph pr-d/codeph ">wmode</codeph> 设置为 <codeph class="+ topic/ph pr-d/codeph ">direct</codeph> 时，不调度 <codeph class="+ topic/ph pr-d/codeph ">stageVideoAvailability</codeph> 事件。但在某些其他平台上，同样的行为会导致 Flash Player 重新分配资源。在这些情况下，<codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph> 属性状态发生更改，并且触发事件。您可以通过侦听 <codeph class="+ topic/ph pr-d/codeph ">flash.events.FullScreenEvent</codeph> 事件来检测是否更改为全屏模式。此事件由 Stage 对象调度。</p>

	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent</linktext></link><link href="flash.media.xml#StageVideoAvailability" class="- topic/link "><linktext class="- topic/linktext ">flash.media.StageVideoAvailability</linktext></link><link href="flash.events.xml#VideoEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.VideoEvent</linktext></link><link href="flash.events.xml#FullScreenEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.FullScreenEvent</linktext></link><link href="flash.display.xml#Stage/stageVideos" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.stageVideos</linktext></link><link href="flash.events.xml#FullScreenEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.FullScreenEvent</linktext></link><link href="flash.media.xml#Video" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7e1a.html" class="- topic/link "><linktext class="- topic/linktext ">使用视频</linktext></link></related-links><apiConstructor id="flash.events:StageVideoAvailabilityEvent:StageVideoAvailabilityEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StageVideoAvailabilityEvent</apiName><shortdesc class="- topic/shortdesc ">
		 构造函数。
		 
		 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY</codeph>。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示此 Event 对象是否参与事件流的冒泡阶段。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示您是否可以取消触发此事件的操作。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">availability</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">舞台视频的当前可用性。
		 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">构造函数。		 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">构造函数。</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:StageVideoAvailabilityEvent:STAGE_VIDEO_AVAILABILITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STAGE_VIDEO_AVAILABILITY</apiName><shortdesc class="- topic/shortdesc ">
		 定义 stageVideoAvailability 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">stageVideoAvailability</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Stage 对象的 <codeph class="+ topic/ph pr-d/codeph ">stageVideoAvailability</codeph> 事件的标识符。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 定义 <codeph class="+ topic/ph pr-d/codeph ">stageVideoAvailability</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		 <p class="- topic/p ">此事件具有以下属性：</p>
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">availability</codeph></entry><entry class="- topic/entry ">该事件报告的状态。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告舞台视频可用性的 Stage 对象。</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:StageVideoAvailabilityEvent:availability:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">availability</apiName><shortdesc class="- topic/shortdesc ">
		 使用 flash.media.StageVideoAvailability 类的常量报告舞台视频的当前可用性。
		 </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">报告舞台视频的当前可用性。
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <p class="- topic/p ">使用 flash.media.StageVideoAvailability 类的常量报告舞台视频的当前可用性。</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DatagramSocketDataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DatagramSocketDataEvent</apiName><shortdesc class="- topic/shortdesc ">
 在数据报套接字已接到数据后调度 DatagramSocketDataEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在数据报套接字已接到数据后调度 DatagramSocketDataEvent 对象。 
 
 </apiDesc><example conref="examples\DatagramSocketDataEventExample.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket" class="- topic/link "><linktext class="- topic/linktext ">DatagramSocket 类</linktext></link></related-links><adobeApiEvent id="flash.events:DatagramSocketDataEvent:DATA_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DatagramSocketDataEvent:DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DatagramSocketDataEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当收到 UDP 数据包时由 DatagramSocket 对象调度。
     
     </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/event:data" class="- topic/link "><linktext class="- topic/linktext ">flash.net.DatagramSocket.data</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DatagramSocketDataEvent:DatagramSocketDataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DatagramSocketDataEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建包含有关数据报事件信息的 Event 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">DatagramSocketDataEvent.DATA</codeph>
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">srcAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">发送数据包的计算机的 IP 地址。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">srcPort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">发送数据包的计算机上的端口。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dstAddress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据包的目标 IP 地址。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dstPort</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据包的目标端口。
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">数据报数据包数据。
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建包含有关数据报事件信息的 Event 对象。将 Event 对象作为参数传递给事件侦听器。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DatagramSocketDataEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 DatagramSocketDataEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 DatagramSocketDataEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 DatagramSocketDataEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DatagramSocketDataEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 DatagramSocketDataEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph> 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 DatagramSocketDataEvent 对象的所有属性。字符串的格式如下：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[DatagramSocketDataEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> srcAddress=<i class="+ topic/ph hi-d/i ">value</i> srcPort=<i class="+ topic/ph hi-d/i ">value</i> dstAddress=<i class="+ topic/ph hi-d/i ">value</i> dstPort=<i class="+ topic/ph hi-d/i ">value</i> data=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DatagramSocketDataEvent:DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DATA</apiName><shortdesc class="- topic/shortdesc ">
     定义 data 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">data</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当收到 UDP 数据包时由 DatagramSocket 对象调度。
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#DatagramSocket/event:data" class="- topic/link "><linktext class="- topic/linktext ">flash.net.DatagramSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DatagramSocketDataEvent:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
    数据报数据包数据。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    数据报数据包数据。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DatagramSocketDataEvent:dstAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dstAddress</apiName><shortdesc class="- topic/shortdesc ">
    调度此事件的 DatagramSocket 对象的 IP 地址。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    调度此事件的 DatagramSocket 对象的 IP 地址。
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意：</b>如果套接字绑定到特殊地址：<codeph class="+ topic/ph pr-d/codeph ">0.0.0.0</codeph>，则此属性将返回 <codeph class="+ topic/ph pr-d/codeph ">0.0.0.0</codeph>。为了知道将数据报消息发送到的特定 IP，您必须将套接字绑定到显式 IP 地址。</p>
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DatagramSocketDataEvent:dstPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dstPort</apiName><shortdesc class="- topic/shortdesc ">
    调度此事件的 DatagramSocket 对象的端口。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    调度此事件的 DatagramSocket 对象的端口。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DatagramSocketDataEvent:srcAddress:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">srcAddress</apiName><shortdesc class="- topic/shortdesc ">
    发送数据包的计算机的 IP 地址。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    发送数据包的计算机的 IP 地址。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DatagramSocketDataEvent:srcPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">srcPort</apiName><shortdesc class="- topic/shortdesc ">
    发送数据包的计算机上的端口。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    发送数据包的计算机上的端口。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DRMStatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DRMStatusEvent</apiName><shortdesc class="- topic/shortdesc ">
	
	在使用数字权限管理 (DRM) 加密保护的内容成功开始播放时（在验证凭证以及在用户经过身份验证并获得查看内容的授权时），NetStream 对象将调度 DRMStatusEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">启用 DRM 的对象的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	在使用数字权限管理 (DRM) 加密保护的内容成功开始播放时（在验证凭证以及在用户经过身份验证并获得查看内容的授权时），NetStream 对象将调度 DRMStatusEvent 对象。DRMStatusEvent 对象包含与凭证有关的信息，如是否可以脱机使用该内容或凭证何时过期而无法再查询该内容。应用程序可以使用此数据来通知用户其策略和权限状态。
	
	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS" class="- topic/link "><linktext class="- topic/linktext ">DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmStatus</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当受 DRM 保护的内容开始播放时由 NetStream 对象调度。
		</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DRMStatusEvent</apiName><shortdesc class="- topic/shortdesc ">
 	    创建一个 Event 对象，其中包含有关 DRM 状态事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent, constructor
        	</keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 DRMAuthenticate 事件：<codeph class="+ topic/ph pr-d/codeph ">DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inMetadata</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net.drm:DRMContentData</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含自定义 DRM 属性的自定义对象。  		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inVoucher</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net.drm:DRMVoucher</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Event 的上下文。  		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inLocal</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否可以脱机查看内容。
		</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	    创建一个 Event 对象，其中包含有关 DRM 状态事件的特定信息。将 Event 对象作为参数传递给事件侦听器。 
	    
 	    
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 DRMStatusEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 DRMStatusEvent 对象。
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 DRMStatusEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
		返回一个字符串，其中包含 DRMStatusEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 DRMStatusEvent 对象的所有属性。
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		返回一个字符串，其中包含 DRMStatusEvent 对象的所有属性。 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DRM_STATUS</apiName><shortdesc class="- topic/shortdesc ">
		DRMStatusEvent.DRM_STATUS 常量定义 drmStatus 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">drmStatus</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当受 DRM 保护的内容开始播放时由 NetStream 对象调度。
		</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">DRMStatusEvent.DRM_STATUS</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">drmStatus</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">detail</codeph></entry><entry class="- topic/entry ">说明状态事件上下文的字符串。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isAnonymous</codeph></entry><entry class="- topic/entry ">表示使用 DRM 加密保护的内容是否可用而不需要用户提供身份验证凭据。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isAvailableOffline</codeph></entry><entry class="- topic/entry ">表示使用 DRM 加密保护的内容是否可脱机使用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">offlineLeasePeriod</codeph></entry><entry class="- topic/entry ">可以脱机查看内容的剩余天数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">policies</codeph></entry><entry class="- topic/entry ">DRM 状态事件的自定义对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">voucherEndDate</codeph></entry><entry class="- topic/entry ">凭证的绝对到期日期，此后，用户将无法再查看该内容</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">contentData</codeph></entry><entry class="- topic/entry ">内容的 DRMContentData</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">voucher</codeph></entry><entry class="- topic/entry ">内容的 DRMVoucher 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isLocal</codeph></entry><entry class="- topic/entry ">表示内容是否存储在本地文件系统上</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">contentData</apiName><shortdesc class="- topic/shortdesc ">
		 DRMContentData 对象包含获取凭证所需的信息，在查看受 DRM 保护的内容时需要该凭证。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 DRMContentData 对象包含获取凭证所需的信息，在查看受 DRM 保护的内容时需要该凭证。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">detail</apiName><shortdesc class="- topic/shortdesc ">
		说明状态事件上下文的字符串。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		说明状态事件上下文的字符串。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isAnonymous</apiName><shortdesc class="- topic/shortdesc ">
		表示使用数字权限管理 (DRM) 加密的内容是否可用而不需要用户提供身份验证凭据。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示使用数字权限管理 (DRM) 加密的内容是否可用而不需要用户提供身份验证凭据。如果是，则此值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，用户必须提供与内容提供程序已知并所需的用户名和密码相匹配的用户名和密码。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isAvailableOffline</apiName><shortdesc class="- topic/shortdesc ">
		表示使用数字权限权利 (DRM) 加密保护的内容是否可脱机使用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示使用数字权限权利 (DRM) 加密保护的内容是否可脱机使用。如果是，则此值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
		<p class="- topic/p ">
		为了使数字保护的内容可脱机使用，必须将其凭证缓存到用户的本地计算机中。（应用程序决定内容的本地存储位置，以使内容可脱机使用。）
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isLocal</apiName><shortdesc class="- topic/shortdesc ">
		 表示凭证是否缓存到本地凭证存储区中。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 表示凭证是否缓存到本地凭证存储区中。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">offlineLeasePeriod</apiName><shortdesc class="- topic/shortdesc ">
		可以脱机查看内容的剩余天数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		可以脱机查看内容的剩余天数。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">policies</apiName><shortdesc class="- topic/shortdesc ">
		DRM 状态事件的自定义对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		DRM 状态事件的自定义对象。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">voucherEndDate</apiName><shortdesc class="- topic/shortdesc ">
		凭证的绝对到期日期，此后，用户将无法再查看该内容。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Date</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		凭证的绝对到期日期，此后，用户将无法再查看该内容。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">voucher</apiName><shortdesc class="- topic/shortdesc ">
		 内容的 DRMVoucher 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 内容的 DRMVoucher 对象。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:AsyncErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">AsyncErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	在从本机异步代码中引发异常时（例如，可能从 LocalConnection、NetConnection、SharedObject 或 NetStream 引发），对象将调度 AsyncErrorEvent。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">AsyncErrorEvent 事件的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在从本机异步代码中引发异常时（例如，可能从 LocalConnection、NetConnection、<ph class="- topic/ph ">SharedObject</ph> 或 NetStream 引发），对象将调度 AsyncErrorEvent。只有一种类型的异步错误事件：<codeph class="+ topic/ph pr-d/codeph ">AsyncErrorEvent.ASYNC_ERROR</codeph>。
	
	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR" class="- topic/link "><linktext class="- topic/linktext ">ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">asyncError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">AsyncErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建 AsyncErrorEvent 对象，其中包含有关 asyncError 事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 error 事件：<codeph class="+ topic/ph pr-d/codeph ">ErrorEvent.ERROR</codeph>。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。 
	
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要显示为错误消息的文本。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">发生的异常。如果 error 为非空值，则该事件的 <codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 属性将根据该错误的 <codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 属性设置。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">AsyncErrorEvent 对象的构造函数。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 AsyncErrorEvent 对象，其中包含有关 asyncError 事件的信息。将 AsyncErrorEvent 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 AsyncErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 AsyncErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 AsyncErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 AsyncErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 AsyncErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 AsyncErrorEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[AsyncErrorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... error=<i class="+ topic/ph hi-d/i ">value</i> errorID=<i class="+ topic/ph hi-d/i ">value</i>]</codeph><codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 仅在 Adobe AIR 中可用</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ASYNC_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	AsyncErrorEvent.ASYNC_ERROR 常量定义 asyncError 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">asyncError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">AsyncErrorEvent.ASYNC_ERROR</codeph> 常数定义 <codeph class="+ topic/ph pr-d/codeph ">asyncError</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">调度事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">error</codeph></entry><entry class="- topic/entry ">触发此事件的错误。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
	引发的异常。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Error</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	引发的异常。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:StatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StatusEvent</apiName><shortdesc class="- topic/shortdesc ">
 对象将在设备（如摄像头或麦克风）或对象（如 LocalConnection 对象）报告其状态时调度 StatusEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">StatusEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 对象将在设备（如摄像头或麦克风）或对象（如 LocalConnection 对象）报告其状态时调度 StatusEvent 对象。只有一种类型的状态事件：<codeph class="+ topic/ph pr-d/codeph ">StatusEvent.STATUS</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection</linktext></link><link href="flash.sensors.xml#Accelerometer" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Accelerometer</linktext></link><link href="flash.sensors.xml#Geolocation" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Geolocation</linktext></link><link href="air.net.xml#ServiceMonitor" class="- topic/link "><linktext class="- topic/linktext ">air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.status</linktext></link><link href="flash.sensors.xml#Geolocation/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Geolocation.status</linktext></link><link href="flash.sensors.xml#Accelerometer/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Accelerometer.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StatusEvent</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个 Event 对象，其中包含有关状态事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的状态事件：<codeph class="+ topic/ph pr-d/codeph ">StatusEvent.STATUS</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">code</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对象状态的描述。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">code</codeph> 属性访问此信息。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">level</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">消息类别，例如 <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"warning"</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph>。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">level</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">StatusEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个 Event 对象，其中包含有关状态事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StatusEvent/STATUS" class="- topic/link "><linktext class="- topic/linktext ">STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 StatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 StatusEvent 对象。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 StatusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 StatusEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 StatusEvent 对象的所有属性。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 StatusEvent 对象的所有属性。字符串的格式如下：
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[StatusEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> code=<i class="+ topic/ph hi-d/i ">value</i> level=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STATUS</apiName><shortdesc class="- topic/shortdesc ">
     定义 status 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">status</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     定义 <codeph class="+ topic/ph pr-d/codeph ">status</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">code</codeph></entry><entry class="- topic/entry ">对象状态的描述。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">level</codeph></entry><entry class="- topic/entry ">消息类别，例如 <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"warning"</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告其状态的对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.status</linktext></link><link href="flash.sensors.xml#Geolocation/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Geolocation.status</linktext></link><link href="flash.sensors.xml#Accelerometer/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Accelerometer.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">code</apiName><shortdesc class="- topic/shortdesc ">
	 对象状态的描述。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 对象状态的描述。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">level</apiName><shortdesc class="- topic/shortdesc ">
 	 消息类别，例如，“status”、“warning”或“error”。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 消息类别，例如 <codeph class="+ topic/ph pr-d/codeph ">"status"</codeph>、<codeph class="+ topic/ph pr-d/codeph ">"warning"</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">"error"</codeph>。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DRMAuthenticationErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DRMAuthenticationErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	 调用 DRMManager 对象的 authenticate() 方法失败时，DRMManager 将调度 DRMAuthenticationErrorEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 调用 DRMManager 对象的 <codeph class="+ topic/ph pr-d/codeph ">authenticate()</codeph> 方法失败时，DRMManager 将调度 DRMAuthenticationErrorEvent 对象。
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DRMAuthenticationErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
		 创建 DRMAuthenticationErrorEvent 对象的新实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件类型字符串
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件是否沿显示列表向上冒泡
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">是否可以取消事件
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inDetail</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">错误描述
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inErrorID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">常规错误类型的 ID
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inSubErrorID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示其类型中特定错误的 ID
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inServerURL</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">所登录服务器的 URL
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">所登录服务器上经过身份验证的域
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建 DRMAuthenticationErrorEvent 对象的新实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc "> 
	创建 ErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "/><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 ErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	创建 ErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AUTHENTICATION_ERROR</apiName><shortdesc class="- topic/shortdesc ">
		 添加和删除事件侦听器时 type 参数中对于身份验证错误事件使用的字符串常量。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">authenticationError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 添加和删除事件侦听器时 type 参数中对于身份验证错误事件使用的字符串常量。
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:domain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">domain</apiName><shortdesc class="- topic/shortdesc ">
		 媒体权限服务器的内容域。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 媒体权限服务器的内容域。此处，域不是网络或 Internet 域名。
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:serverURL:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverURL</apiName><shortdesc class="- topic/shortdesc ">
		 拒绝身份验证尝试的媒体权限服务器的 URL。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 拒绝身份验证尝试的媒体权限服务器的 URL。
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">subErrorID</apiName><shortdesc class="- topic/shortdesc ">
		 更详细的错误代码。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 更详细的错误代码。
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:HTMLUncaughtScriptExceptionEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">HTMLUncaughtScriptExceptionEvent</apiName><shortdesc class="- topic/shortdesc ">
	每当引发 JavaScript 异常并且未使用 catch 语句进行处理时，HTMLLoader 对象即会调度 HTMLUncaughtScriptExceptionEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	每当引发 JavaScript 异常并且未使用 <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> 语句进行处理时，HTMLLoader 对象即会调度 HTMLUncaughtScriptExceptionEvent 对象。
	
	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html" class="- topic/link "><linktext class="- topic/linktext ">HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uncaughtScriptException</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">HTMLUncaughtScriptExceptionEvent</apiName><shortdesc class="- topic/shortdesc ">
		创建一个 HTMLUncaughtScriptExceptionEvent 对象以作为参数传递给事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">exceptionValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">当 JavaScript 进程引发未捕获的异常时，<codeph class="+ topic/ph pr-d/codeph ">exceptionValue</codeph> 将是导致未捕获异常的 throw 语句中的表达式计算结果。<codeph class="+ topic/ph pr-d/codeph ">exceptionValue</codeph> 属性可以是基元值、对 JavaScript 对象的引用或对 ActionScript 对象的引用。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建一个 HTMLUncaughtScriptExceptionEvent 对象以作为参数传递给事件侦听器。
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		 
		创建 HTMLUncaughtScriptExceptionEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">HTMLUncaughtScriptExceptionEvent 对象的副本。
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 
		创建 HTMLUncaughtScriptExceptionEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc class="- topic/shortdesc ">
		HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION 常量定义 uncaughtScriptException 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">uncaughtScriptException</apiData><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">uncaughtScriptException</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		
		 
		 <p class="- topic/p ">此事件具有以下属性：</p>
		 
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">exceptionValue</codeph></entry><entry class="- topic/entry ">计算产生未捕获的异常的 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句中的表达式的结果。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">stackTrace</codeph></entry><entry class="- topic/entry ">表示在执行产生未捕获的异常的 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句时的堆栈跟踪的对象数组。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">HTMLLoader 对象。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exceptionValue</apiName><shortdesc class="- topic/shortdesc ">
	计算产生未捕获的异常的 throw 语句中的表达式的结果。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	计算产生未捕获的异常的 throw 语句中的表达式的结果。<codeph class="+ topic/ph pr-d/codeph ">exceptionValue</codeph> 属性可以是基元值、对 JavaScript 对象的引用或对 ActionScript 对象的引用。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stackTrace</apiName><shortdesc class="- topic/shortdesc ">
	表示在执行产生未捕获的异常的 throw 语句时的堆栈跟踪的对象数组。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示在执行产生未捕获的异常的 throw 语句时的堆栈跟踪的对象数组。数组中的每个对象都具有三个属性：
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">sourceURL</codeph>（字符串）：调用堆栈帧脚本的 URL。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">line</codeph>（数字）：调用堆栈帧的 <codeph class="+ topic/ph pr-d/codeph ">sourceURL</codeph> 资源中的行号。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">functionName</codeph>（字符串）：调用堆栈帧的函数的名称。</li></ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SoftKeyboardEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoftKeyboardEvent</apiName><shortdesc class="- topic/shortdesc ">
当虚拟键盘激活或取消激活时，就会调度 SoftKeyboardEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当软键盘激活或取消激活时，就会调度 SoftKeyboardEvent 对象。

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
当虚拟键盘激活或取消激活时，就会调度 SoftKeyboardEvent 对象。 

<p class="- topic/p ">SoftKeyboardEvents 由 <codeph class="+ topic/ph pr-d/codeph ">needsSoftKeyboard</codeph> 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 的 TextFields 和 InteractiveObjects 进行调度。</p>

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/needsSoftKeyboard" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.needsSoftKeyboard</linktext></link></related-links><apiConstructor id="flash.events:SoftKeyboardEvent:SoftKeyboardEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SoftKeyboardEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建包含有关软键盘激活和取消激活事件的信息的事件对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型为常量值（如 <codeph class="+ topic/ph pr-d/codeph ">SOFT_KEYBOARD_ACTIVATE</codeph>）。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">relatedObjectVal</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对与事件相关的显示列表对象的引用。 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">triggerTypeVal</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示键盘事件由应用程序还是用户触发。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">SoftKeyboardEvent 对象的构造函数。
     
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建包含有关软键盘激活和取消激活事件的信息的事件对象。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SoftKeyboardEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc "> 
    创建一个 SoftKeyboardEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 SoftKeyboardEvent 对象。
     
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">创建一个 SoftKeyboardEvent 对象的副本。    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    创建一个 SoftKeyboardEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SoftKeyboardEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回包含 SoftKeyboardEvent 对象所有属性的字串。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">返回包含 SoftKeyboardEvent 对象所有属性的字串。
     
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回包含 SoftKeyboardEvent 对象所有属性的字串。使用以下格式：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[SoftKeyboardEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> relatedObjectVal=<i class="+ topic/ph hi-d/i ">value</i> triggerTypeVal=<i class="+ topic/ph hi-d/i ">value</i> activating=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SoftKeyboardEvent:SOFT_KEYBOARD_ACTIVATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SOFT_KEYBOARD_ACTIVATE</apiName><shortdesc class="- topic/shortdesc "> 
    SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE 常量定义软键盘显示时 SoftKeyboardEvent 对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">softKeyboardActivate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">软键盘显示时调度的事件的常量值。    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    <codeph class="+ topic/ph pr-d/codeph ">SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATE</codeph> 常量定义软键盘显示时 SoftKeyboardEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
    
    <p class="- topic/p ">softKeyboardActivate 事件在 softKeyboardActivating 事件之后调度，而且无法取消。若要阻止虚拟键盘显示，请取消 softKeyboardActivating 事件。</p> 
    
    <p class="- topic/p ">此事件具有以下属性：</p>
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SOFT_KEYBOARD_ACTIVATE</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；现在已经太迟，不能取消。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObjectVal</codeph></entry><entry class="- topic/entry ">对与事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">triggerTypeVal</codeph></entry><entry class="- topic/entry ">表示键盘事件由应用程序还是用户触发。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row></tbody></tgroup></adobetable>
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SoftKeyboardEvent:SOFT_KEYBOARD_ACTIVATING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SOFT_KEYBOARD_ACTIVATING</apiName><shortdesc class="- topic/shortdesc "> 
    SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING 常量定义在软键盘显示之前立即调度的 SoftKeyboardEvent 对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">softKeyboardActivating</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">软键盘软键盘显示前的瞬间调度的事件的常量值。     
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    <codeph class="+ topic/ph pr-d/codeph ">SoftKeyboardEvent.SOFT_KEYBOARD_ACTIVATING</codeph> 常量定义在软键盘显示软键盘显示前的瞬间调度的 SoftKeyboardEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。如果通过调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault</codeph> 取消，则不会打开软键盘。
    
    <p class="- topic/p ">此事件具有以下属性：</p>
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SOFT_KEYBOARD_ACTIVATING</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消阻止打开键盘。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObjectVal</codeph></entry><entry class="- topic/entry ">对与事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">triggerTypeVal</codeph></entry><entry class="- topic/entry ">表示键盘事件由应用程序还是用户触发。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row></tbody></tgroup></adobetable>
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SoftKeyboardEvent:SOFT_KEYBOARD_DEACTIVATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SOFT_KEYBOARD_DEACTIVATE</apiName><shortdesc class="- topic/shortdesc "> 
    SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE 常量定义隐藏软键盘时调度的 SoftKeyboardEvent 对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">softKeyboardDeactivate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">隐藏软键盘后调度的事件的常量值。     
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    <codeph class="+ topic/ph pr-d/codeph ">SoftKeyboardEvent.SOFT_KEYBOARD_DEACTIVATE</codeph> 常量定义隐藏软键盘时调度的 SoftKeyboardEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
    
    <p class="- topic/p ">此事件具有以下属性：</p>
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SOFT_KEYBOARD_DEACTIVATE</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；不允许取消。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObjectVal</codeph></entry><entry class="- topic/entry ">对与事件相关的显示列表对象的引用。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">triggerTypeVal</codeph></entry><entry class="- topic/entry ">表示键盘事件由应用程序还是用户触发。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row></tbody></tgroup></adobetable>
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SoftKeyboardEvent:relatedObject:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">relatedObject</apiName><shortdesc class="- topic/shortdesc ">
    对与事件相关的显示列表对象的引用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">对与事件相关的显示列表对象的引用。 
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    对与事件相关的显示列表对象的引用。 
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SoftKeyboardEvent:triggerType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">triggerType</apiName><shortdesc class="- topic/shortdesc "> 
    表示键盘状态的更改是否已由应用程序（如使用 requestSoftKeyboard() 程序）或用户（如选择文本字段）触发。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">键盘状态更改的来源。
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    表示键盘状态的更改已由应用程序（如 <codeph class="+ topic/ph pr-d/codeph ">requestSoftKeyboard()</codeph> 的编程使用）还是用户（如选择文本字段）触发。
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#SoftKeyboardTrigger" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SoftKeyboardTrigger</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ProgressEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ProgressEvent</apiName><shortdesc class="- topic/shortdesc ">
 当加载操作已开始或套接字已接收到数据时，将调度 ProgressEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ProgressEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当加载操作已开始或套接字已接收到数据时，将调度 ProgressEvent 对象。这些事件通常在将 SWF 文件、图像或数据加载到应用程序中时生成。有两种类型的进程事件：<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.SOCKET_DATA</codeph>。另外，在 AIR 中，当使用 NativeProcess 类向子进程发送数据或从子进程接收数据时，会调度 ProgressEvent。
 
 </apiDesc><example conref="examples\ProgressEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">ProgressEventExample</codeph> 类来说明如何在下载文件时使用各种事件侦听器。该示例执行下列任务：
 <ol class="- topic/ol "><li class="- topic/li ">创建 <codeph class="+ topic/ph pr-d/codeph ">downloadURL</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">fileName</codeph> 属性，这些属性指示下载文件的位置和名称。</li><li class="- topic/li ">在 <codeph class="+ topic/ph pr-d/codeph ">ProgressEventExample</codeph> 构造函数中，创建名为 <codeph class="+ topic/ph pr-d/codeph ">file</codeph> 的新 FileReference 对象，再将其传递给 <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> 方法。</li><li class="- topic/li ">然后将 <codeph class="+ topic/ph pr-d/codeph ">downloadURL</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">fileName</codeph> 属性传递给 <codeph class="+ topic/ph pr-d/codeph ">file.download()</codeph>，它提示要下载文件的位置。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> 方法添加七个事件侦听器及其关联的订阅者方法：
  <ol outputclass="A" class="- topic/ol "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> / <codeph class="+ topic/ph pr-d/codeph ">cancelHandler()</codeph> 在取消文件下载时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">complete</codeph> / <codeph class="+ topic/ph pr-d/codeph ">complereHandler()</codeph> 在完成文件下载进程时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> / <codeph class="+ topic/ph pr-d/codeph ">ioErrorHandler()</codeph> 在下载文件不可用或不可访问时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">open</codeph> / <codeph class="+ topic/ph pr-d/codeph ">openHandler()</codeph> 在已开始下载操作时调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">progress</codeph> / <codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph> 在下载进程开始时调度并在进程结束时再次调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> / <codeph class="+ topic/ph pr-d/codeph ">securityErrorHandler</codeph> 在本地播放安全性设置与下载文件的数据访问类型（本地与网络）不匹配时调度；请参阅下面的备注。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">select</codeph> / <codeph class="+ topic/ph pr-d/codeph ">selectHandler()</codeph> 在选择下载对象时调度。</li></ol>
  </li></ol>
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b>
 <ul class="- topic/ul "><li class="- topic/li ">您需要通过将“本地播放安全性”设置为“只访问网络文件”来编译 SWF 文件。</li><li class="- topic/li ">本示例需要一个名为 SomeFile.pdf 的文件。</li><li class="- topic/li ">尽管本示例使用了可用于 FileReference 对象的所有事件，但是在大多数情况下，只需要使用其中的一部分事件。</li></ul>
 </p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml" class="- topic/link "><linktext class="- topic/linktext ">FileStream 类</linktext></link><link href="flash.display.xml#LoaderInfo" class="- topic/link "><linktext class="- topic/linktext ">LoaderInfo 类</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket 类</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">socketData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/event:socketData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:STANDARD_ERROR_DATA_errorData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">errorData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ProgressEvent:STANDARD_ERROR_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/event:standardErrorData" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess.standardErrorData</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:STANDARD_INPUT_PROGRESS_errorData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">errorData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ProgressEvent:STANDARD_INPUT_PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/event:standardInputProgress" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess.standardInputProgress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:STANDARD_OUTPUT_DATA_outputData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">outputData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ProgressEvent:STANDARD_OUTPUT_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/event:standardOutputData" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess.standardOutputData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ProgressEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关进度事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值是：<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.SOCKET_DATA</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.STANDARD_ERROR_DATA</codeph>、<codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.STANDARD_INPUT_PROGRESS</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.STANDARD_OUTPUT_DATA</codeph>。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytesLoaded</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在侦听器处理事件时加载的项数或字节数。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytesTotal</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">如果加载过程成功，将加载的总项数或总字节数。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText "><codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph> 对象的构造函数。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关进度事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 ProgressEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 ProgressEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 ProgressEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 ProgressEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph> 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 ProgressEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ProgressEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> bytesLoaded=<i class="+ topic/ph hi-d/i ">value</i> bytesTotal=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PROGRESS</apiName><shortdesc class="- topic/shortdesc ">
	定义 progress 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">progress</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph></entry><entry class="- topic/entry ">在侦听器处理事件时加载的项数或字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph></entry><entry class="- topic/entry ">如果加载进程成功，最终将加载的项目或字节总数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告进度的对象。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SOCKET_DATA</apiName><shortdesc class="- topic/shortdesc ">
	定义 socketData 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">socketData</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph></entry><entry class="- topic/entry ">在侦听器处理事件时加载的项数或字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph></entry><entry class="- topic/entry ">0；<codeph class="+ topic/ph pr-d/codeph ">socketData</codeph> 事件对象不使用此属性。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告进度的套接字。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/event:socketData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:STANDARD_ERROR_DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_ERROR_DATA</apiName><shortdesc class="- topic/shortdesc ">
	定义 standardErrorData 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardErrorData</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">standardErrorData</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph></entry><entry class="- topic/entry ">由于此事件而由 NativeProcessObject.error 缓冲的错误数据的字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph></entry><entry class="- topic/entry ">0；<codeph class="+ topic/ph pr-d/codeph ">standardErrorData</codeph> 事件对象不使用此属性。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告错误数据的 NativeProcess 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/event:standardErrorData" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess.standardErrorData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:STANDARD_INPUT_PROGRESS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_INPUT_PROGRESS</apiName><shortdesc class="- topic/shortdesc ">
	 定义 standardInputProgress 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardInputProgress</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 定义 <codeph class="+ topic/ph pr-d/codeph ">standardInputProgress</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	 
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph></entry><entry class="- topic/entry ">由于此事件而由 NativeProcessObject.error 缓冲的错误数据的字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph></entry><entry class="- topic/entry ">0；<codeph class="+ topic/ph pr-d/codeph ">standardInputProgress</codeph> 事件对象不使用此属性。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告错误数据的 NativeProcess 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/event:standardInputProgress" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess.standardInputProgress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:STANDARD_OUTPUT_DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STANDARD_OUTPUT_DATA</apiName><shortdesc class="- topic/shortdesc ">
	定义 standardOutputData 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">standardOutputData</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">standardOutputData</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在处理此事件的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph></entry><entry class="- topic/entry ">由于此事件而由 NativeProcessObject.output 缓冲的输出数据的字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph></entry><entry class="- topic/entry ">0；<codeph class="+ topic/ph pr-d/codeph ">standardOutputData</codeph> 事件对象不使用此属性。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告输出数据的 NativeProcess 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeProcess/event:standardOutputData" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeProcess.standardOutputData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesLoaded</apiName><shortdesc class="- topic/shortdesc ">
	在侦听器处理事件时加载的项数或字节数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	在侦听器处理事件时加载的项数或字节数。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
	如果加载过程成功，将加载的总项数或总字节数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	如果加载过程成功，将加载的总项数或总字节数。如果将进度事件调度/附加到某个 Socket 对象，则 bytesTotal 将始终为 0，除非在构造函数的 bytesTotal 参数中指定一个值。未设置来回发送的实际字节数，该字节数将由应用程序开发人员决定。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ShaderEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ShaderEvent</apiName><shortdesc class="- topic/shortdesc ">
	 在从 ShaderJob 启动的着色器操作完成后将调度 ShaderEvent。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 在从 ShaderJob 启动的着色器操作完成后将调度 ShaderEvent。
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#ShaderJob" class="- topic/link "><linktext class="- topic/linktext ">flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#ShaderJob/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ShaderEvent</apiName><shortdesc class="- topic/shortdesc ">
		 创建一个 ShaderEvent 对象以传递给事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型，在 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性中可用。
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bitmap</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:BitmapData</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含已完成操作的结果的 BitmapData 对象（如果目标不是 BitmapData 对象，则为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">array</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含已完成操作的结果的 ByteArray 对象（如果目标不是 ByteArray 对象，则为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。
		 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">vector</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">包含已完成操作的结果的 Vector.&lt;Number> 实例（如果目标不是 Vector.&lt;Number> 实例，则为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建一个 ShaderEvent 对象以传递给事件侦听器。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		 创建 ShaderEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新的 ShaderEvent 对象。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建 ShaderEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
		 返回一个字符串，其中包含 ShaderEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 ShaderEvent 对象的所有属性。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 返回一个字符串，其中包含 ShaderEvent 对象的所有属性。字符串的格式如下：
		 
		 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ShaderEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> eventPhase=<i class="+ topic/ph hi-d/i ">value</i> bitmapData=<i class="+ topic/ph hi-d/i ">value</i> byteArray=<i class="+ topic/ph hi-d/i ">value</i> vector=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
		 定义 complete 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">complete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 定义 <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		 
		 <p class="- topic/p ">此事件具有以下属性：</p>
		 
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bitmapData</codeph></entry><entry class="- topic/entry ">包含已完成操作的结果的 BitmapData 对象（如果目标不是 BitmapData 对象，则为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">byteArray</codeph></entry><entry class="- topic/entry ">包含已完成操作的结果的 ByteArray 对象（如果目标不是 ByteArray 对象，则为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告完成的 ShaderJob 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">vector</codeph></entry><entry class="- topic/entry ">包含已完成操作的结果的 Vector.&lt;Number> 实例（如果目标不是 Vector.&lt;Number> 实例，则为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>）。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#ShaderJob/event:complete" class="- topic/link "><linktext class="- topic/linktext ">flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bitmapData</apiName><shortdesc class="- topic/shortdesc ">
		 传递给 ShaderJob.start() 方法的 BitmapData 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 传递给 <codeph class="+ topic/ph pr-d/codeph ">ShaderJob.start()</codeph> 方法的 BitmapData 对象。如果将 ByteArray 或 Vector.&lt;Number> 传递给 <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> 方法，则此属性为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#ShaderJob/start()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">byteArray</apiName><shortdesc class="- topic/shortdesc ">
		 
		 传递给 ShaderJob.start() 方法的 ByteArray 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 
		 传递给 <codeph class="+ topic/ph pr-d/codeph ">ShaderJob.start()</codeph> 方法的 ByteArray 对象。如果将 BitmapData 或 Vector.&lt;Number> 对象传递给 <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> 方法，则此属性为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#ShaderJob/start()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">vector</apiName><shortdesc class="- topic/shortdesc ">
		 
         包含已完成操作的结果的 Vector.&amp;lt;Number&amp;gt; 对象，该对象已传递给 ShaderJob.start() 方法。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 
         包含已完成操作的结果的 Vector.&lt;Number> 对象，该对象已传递给 <codeph class="+ topic/ph pr-d/codeph ">ShaderJob.start()</codeph> 方法。如果 BitmapData 或 ByteArray 对象已传递给 <codeph class="+ topic/ph pr-d/codeph ">start()</codeph> 方法，则此属性为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#ShaderJob/start()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DRMAuthenticationCompleteEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DRMAuthenticationCompleteEvent</apiName><shortdesc class="- topic/shortdesc ">
	 调用 DRMManager 对象的 authenticate() 方法成功时，DRMManager 将调度 DRMAuthenticationCompleteEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 调用 DRMManager 对象的 <codeph class="+ topic/ph pr-d/codeph ">authenticate()</codeph> 方法成功时，DRMManager 将调度 DRMAuthenticationCompleteEvent 对象。
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DRMAuthenticationCompleteEvent</apiName><shortdesc class="- topic/shortdesc ">
		 创建 DRMAuthenticationCompleteEvent 对象的新实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件类型字符串
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件是否沿显示列表向上冒泡
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">是否可以取消事件
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inServerURL</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">所登录服务器的 URL
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">所登录服务器上经过身份验证的域
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inToken</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">身份验证标记
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建 DRMAuthenticationCompleteEvent 对象的新实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc "> 
	 复制 Event 子类的实例。</shortdesc><prolog class="- topic/prolog "/><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个新的 Event 对象，它与原始对象相同。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 复制 Event 子类的实例。
	 
     <p class="- topic/p ">返回一个新的 Event 对象，它是 Event 对象的原始实例的副本。通常您不需要调用 <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>；当您重新调度事件，即调用 <codeph class="+ topic/ph pr-d/codeph ">dispatchEvent(event)</codeph>（从正在处理 <codeph class="+ topic/ph pr-d/codeph ">event</codeph> 的处理函数）时，EventDispatcher 类会自动调用它。</p>
	 
	 <p class="- topic/p ">新的 Event 对象包括原始对象的所有属性。</p> 
	 
	 <p class="- topic/p ">当您创建自己的自定义 Event 类时，必须覆盖继承的 <codeph class="+ topic/ph pr-d/codeph ">Event.clone()</codeph> 方法，以复制自定义类的属性。如果您未设置在事件子类中添加的所有属性，则当侦听器处理重新调度的事件时，这些属性将不会有正确的值。</p>
	 
	 <p class="- topic/p ">在本示例中，<codeph class="+ topic/ph pr-d/codeph ">PingEvent</codeph> 是 <codeph class="+ topic/ph pr-d/codeph ">Event</codeph> 的子类，因此它可以实现其自己的 <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph> 版本。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AUTHENTICATION_COMPLETE</apiName><shortdesc class="- topic/shortdesc ">
		 添加和删除事件侦听器时 type 参数中对于身份验证完成事件使用的字符串常量。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">authenticationComplete</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 添加和删除事件侦听器时 type 参数中对于身份验证完成事件使用的字符串常量。
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">domain</apiName><shortdesc class="- topic/shortdesc ">
		 媒体权限服务器的内容域。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 媒体权限服务器的内容域。此处，域不是网络或 Internet 域名。
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">serverURL</apiName><shortdesc class="- topic/shortdesc ">
		 媒体权限服务器的 URL。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 媒体权限服务器的 URL。
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">token</apiName><shortdesc class="- topic/shortdesc ">
		 身份验证标记。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 身份验证标记。
		 
		 <p class="- topic/p ">自动向 DRMManager 会话缓存添加身份验证。可以保存标记，并在将来的会话中使用该标记验证用户的身份。通过 DRMManager 的 <codeph class="+ topic/ph pr-d/codeph ">setAuthenticationToken()</codeph> 方法重用标记。标记到期和其他属性由生成该标记的服务器确定。</p>
		   
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:AccelerometerEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">AccelerometerEvent</apiName><shortdesc class="- topic/shortdesc ">
当从安装在设备上的加速计传感器获得加速更新时，Accelerometer 类调度 AccelerometerEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
当从安装在设备上的加速计传感器获得加速更新时，Accelerometer 类调度 AccelerometerEvent 对象。

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.sensors.xml#Accelerometer" class="- topic/link "><linktext class="- topic/linktext ">flash.sensors.Accelerometer</linktext></link></related-links><adobeApiEvent id="flash.events:AccelerometerEvent:UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:AccelerometerEvent:UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:AccelerometerEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AccelerometerEvent:AccelerometerEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">AccelerometerEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建包含关于沿三维轴加速的信息的 AccelerometerEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种更新事件：<codeph class="+ topic/ph pr-d/codeph ">AccelerometerEvent.UPDATE</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否冒泡。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">timestamp</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">加速计更新的时间戳。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">accelerationX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">沿 Ｘ 轴的加速值（以 G 为单位，即 9.8m/sec/sec）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">accelerationY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">沿 Y 轴的加速值（以 G 为单位，即 9.8m/sec/sec）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">accelerationZ</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">沿 Z 轴的加速值（以 G 为单位，即 9.8m/sec/sec）。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">AccelerometerEvent 对象的构造函数。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建包含关于沿三维轴加速的信息的 AccelerometerEvent 对象。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AccelerometerEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc "> 
	     创建 AccelerometerEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 AccelerometerEvent 对象。
	     
	     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	     创建 AccelerometerEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
	       
	     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AccelerometerEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc "> 
	     返回一个字符串，其中包含 AccelerometerEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 AccelerometerEvent 对象的所有属性。
	     
	     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	     返回一个字符串，其中包含 AccelerometerEvent 对象的所有属性。使用以下格式：
	     
	     <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[AccelerometerEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> timestamp=<i class="+ topic/ph hi-d/i ">value</i> accelerationX=<i class="+ topic/ph hi-d/i ">value</i> accelerationY=<i class="+ topic/ph hi-d/i ">value</i> accelerationZ=<i class="+ topic/ph hi-d/i ">value</i> ] </codeph></p>
	       
	     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AccelerometerEvent:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	定义 AccelerometerEvent 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">AccelerometerEvent</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。  
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">timestamp</codeph></entry><entry class="- topic/entry ">加速计更新的时间戳。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">accelerationX</codeph></entry><entry class="- topic/entry ">沿 Ｘ 轴的加速值（以 G 为单位，即 9.8m/sec/sec）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">accelerationY</codeph></entry><entry class="- topic/entry ">沿 Y 轴的加速值（以 G 为单位，即 9.8m/sec/sec）。 </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">accelerationZ</codeph></entry><entry class="- topic/entry ">沿 Z 轴的加速值（以 G 为单位，即 9.8m/sec/sec）。 </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AccelerometerEvent:accelerationX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">accelerationX</apiName><shortdesc class="- topic/shortdesc ">
		沿 X 轴的加速，以 G 为度量单位。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		沿 X 轴的加速，以 G 为度量单位。（1 G 大约是 9.8 m/sec/sec。）从设备左侧到右侧为 X 轴正向。如果设备向右移动，加速为正。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AccelerometerEvent:accelerationY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">accelerationY</apiName><shortdesc class="- topic/shortdesc ">
		沿 Y 轴的加速，以 G 为度量单位。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		沿 Y 轴的加速，以 G 为度量单位。（1 G 大约是 9.8 m/sec/sec。）从设备底部到顶部为 Y 轴正向。如果设备相对于此轴上移，加速为正。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AccelerometerEvent:accelerationZ:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">accelerationZ</apiName><shortdesc class="- topic/shortdesc ">
		沿 Z 轴的加速，以 G 为度量单位。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		沿 Z 轴的加速，以 G 为度量单位。（1 G 大约是 9.8 m/sec/sec。）Z 轴取向与设备表面垂直。如果您移动设备以使表面移动更高，则加速为正。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AccelerometerEvent:timestamp:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timestamp</apiName><shortdesc class="- topic/shortdesc "> 
		自初始化运行时后事件的毫秒数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		自初始化运行时后事件的毫秒数。例如，如果设备在应用程序初始化 4 秒后捕获加速计数据，则将此事件的 <codeph class="+ topic/ph pr-d/codeph ">timestamp</codeph> 属性设置为 4000。 
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:IMEEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">IMEEvent</apiName><shortdesc class="- topic/shortdesc ">
 当用户使用输入法编辑器 (IME) 输入文本时，将调度 IMEEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">IMEEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当用户使用输入法编辑器 (IME) 输入文本时，将调度 IMEEvent 对象。IME 一般用于输入象形文字语言（例如，中文、日语和朝鲜语）的文本而不是字母。存在两个 IME 事件：<codeph class="+ topic/ph pr-d/codeph ">IMEEvent.IME_COMPOSITION</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">IMEEvent.IME_START_COMPOSITION</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION" class="- topic/link "><linktext class="- topic/linktext ">flash.events.IMEEvent.IME_COMPOSITION</linktext></link><link href="flash.events.xml#IMEEvent/IME_START_COMPOSITION" class="- topic/link "><linktext class="- topic/linktext ">flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">imeComposition</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/event:imeComposition" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:IMEEvent:IME_START_COMPOSITION_imeComposition" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">imeComposition</apiName><prolog class="- topic/prolog "><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><airversion>AIR 2
	 </airversion></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:IMEEvent:IME_START_COMPOSITION</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/event:imeComposition" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">IMEEvent</apiName><shortdesc class="- topic/shortdesc ">
	 创建一个 Event 对象，其中包含有关 IME 事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种 IME 事件：<codeph class="+ topic/ph pr-d/codeph ">IMEEvent.IME_COMPOSITION</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">来自 IME 的读取字符串。这是用户在选择任何候选项之前键入的初始字符串。最终合成字符串提供给 <codeph class="+ topic/ph pr-d/codeph ">TextEvent.TEXT_INPUT</codeph> 事件中获得键盘焦点的对象。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性访问此信息。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">imeClient</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.text.ime:IIMEClient</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">由文本引擎用来与 IME 通信的一组回调。如果您的代码有自己的文本引擎并自行渲染文本行，而不是使用 TextField 对象或 TextLayoutFramework，就非常有用。
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">IMEEvent 对象的构造函数。
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建一个 Event 对象，其中包含有关 IME 事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION" class="- topic/link "><linktext class="- topic/linktext ">flash.events.IMEEvent.IME_COMPOSITION</linktext></link><link href="flash.events.xml#IMEEvent/IME_START_COMPOSITION" class="- topic/link "><linktext class="- topic/linktext ">flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 IMEEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 IMEEvent 对象。 
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 IMEEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 返回一个字符串，其中包含 IMEEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 IMEEvent 对象的所有属性。
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 返回一个字符串，其中包含 IMEEvent 对象的所有属性。字符串的格式如下：
	 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[IMEEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> text=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IME_COMPOSITION</apiName><shortdesc class="- topic/shortdesc ">
	 定义 imeComposition 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">imeComposition</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 定义 <codeph class="+ topic/ph pr-d/codeph ">imeComposition</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">IME 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/event:imeComposition" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.imeComposition</linktext></link></related-links></apiValue><apiValue id="flash.events:IMEEvent:IME_START_COMPOSITION" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IME_START_COMPOSITION</apiName><shortdesc class="- topic/shortdesc ">
	  要处理 IME 文本输入，接收方必须将事件的 imeClient 字段设置为实现 IIMEClient 接口的对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><airversion>AIR 2
	 </airversion></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">imeStartComposition</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  要处理 IME 文本输入，接收方必须将事件的 <codeph class="+ topic/ph pr-d/codeph ">imeClient</codeph> 字段设置为实现 IIMEClient 接口的对象。如果未设置 <codeph class="+ topic/ph pr-d/codeph ">imeClient</codeph>，运行时会改用不一致的 IME 组合，并将最终组合作为 TEXT_INPUT 事件发送。
	 <p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">IME 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#IME/event:imeComposition" class="- topic/link "><linktext class="- topic/linktext ">flash.system.IME.imeComposition</linktext></link></related-links></apiValue><apiValue id="flash.events:IMEEvent:imeClient:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">imeClient</apiName><shortdesc class="- topic/shortdesc ">
	 指定实现 IMEClient 接口的对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><airversion>AIR 2
	 </airversion></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.text.ime:IIMEClient</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 指定实现 IMEClient 接口的对象。基于 flash.text.engine 包的组件必须实现此接口以支持使用 IME 编辑文本内联。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DataEvent</apiName><shortdesc class="- topic/shortdesc ">
原始数据加载完成时，对象将调度 DataEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">DataEvent 事件的事件对象。

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
原始数据加载完成时，对象将调度 DataEvent 对象。存在两种数据事件类型： 
<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">DataEvent.DATA</codeph>：针对发送或接收的数据进行调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">DataEvent.UPLOAD_COMPLETE_DATA</codeph>：当数据已发送且服务器响应后进行调度。</li></ul>

</apiDesc><example conref="examples\DataEventExample.as" class="- topic/example "> 以下示例创建一个 XMLSocket 并将其连接到在 <codeph class="+ topic/ph pr-d/codeph ">yourDomain</codeph> 的端口 8080 上运行的套接字服务器。事件侦听器附加到侦听 <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 事件（每次收到原始数据时，将调度这些事件）的 XMLSocket 对象。
 
 <p class="- topic/p "> <b class="+ topic/ph hi-d/b ">注意：</b> 
 <ul class="- topic/ul "><li class="- topic/li ">为了在本示例中生成 <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> 事件，需要在编译 SWF 文件时将“本地播放安全性”设置为“只访问网络”。</li><li class="- topic/li ">您需要一台使用端口 8080 在 [<codeph class="+ topic/ph pr-d/codeph ">yourDomain</codeph>] 上运行的服务器。</li></ul>
 </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/event:data" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uploadCompleteData</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:uploadCompleteData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DataEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关数据事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的数据事件：<codeph class="+ topic/ph pr-d/codeph ">DataEvent.DATA</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">加载到 Flash Player 或 Adobe AIR 中的原始数据。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">DataEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关数据事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA" class="- topic/link "><linktext class="- topic/linktext ">DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 DataEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 DataEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 DataEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 DataEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 DataEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 DataEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[DataEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> data=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DATA</apiName><shortdesc class="- topic/shortdesc ">
	定义 data 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">data</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">data</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。  
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">data</codeph></entry><entry class="- topic/entry ">加载到 Flash Player 或 Adobe AIR 中的原始数据。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">接收数据的 XMLSocket 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#XMLSocket/event:data" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPLOAD_COMPLETE_DATA</apiName><shortdesc class="- topic/shortdesc ">
	定义 uploadCompleteData 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9.0.28.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">uploadCompleteData</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">uploadCompleteData</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">data</codeph></entry><entry class="- topic/entry ">成功上载文件后从服务器返回的原始数据。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">成功上载后接收数据的 FileReference 对象。</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:uploadCompleteData" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
	加载到 Flash Player 或 Adobe AIR 中的原始数据。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	加载到 Flash Player 或 Adobe AIR 中的原始数据。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SecurityErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
当出现安全错误时，对象将调度 SecurityErrorEvent 对象来报告此错误。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">SecurityErrorEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
当出现安全错误时，对象将调度 SecurityErrorEvent 对象来报告此错误。通过该类所报告的安全错误一般是由异步操作（例如加载数据）产生的，这种情况下安全侵犯可能不会被立即列出。事件侦听器可以访问对象的 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性，以确定尝试过哪些操作以及涉及哪些 URL。如果没有事件侦听器，<ph class="- topic/ph ">Flash Player 的调试版或 </ph>AIR Debug Launcher (ADL) 应用程序将自动显示包含 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性内容的错误消息。只有一种类型的安全错误事件：<codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEvent.SECURITY_ERROR</codeph>。

<p class="- topic/p ">安全错误事件是针对任何目标对象进行调度的最终事件。这意味着对于遇到安全错误的目标对象，不能调度任何其他事件（包括一般错误事件）。</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEventExample</codeph> 类来说明如何实例化侦听器方法 <codeph class="+ topic/ph pr-d/codeph ">securityErrorHandler()</codeph> 并将其设置为侦听将要调度的 <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> 事件。当 <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph> 位置与调用 SWF 不完全属于同一个域，而且请求的域没有获得通过跨域策略文件进行跨域访问的授权时，会发生此事件。
 <p class="- topic/p ">要创建 <codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEvent</codeph>，请将 <codeph class="+ topic/ph pr-d/codeph ">http://www.[yourdomain].com</codeph> 替换为一个未获得跨域访问授权的路径。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security" class="- topic/link "><linktext class="- topic/linktext ">Security 类</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR" class="- topic/link "><linktext class="- topic/linktext ">SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><prolog class="- topic/prolog "><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SecurityErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关安全错误事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 error 事件：<codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEvent.SECURITY_ERROR</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要显示为错误消息的文本。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">text</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">id</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要与特定错误关联的引用数字。 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">SecurityErrorEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关安全错误事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR" class="- topic/link "><linktext class="- topic/linktext ">SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 SecurityErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 securityErrorEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 SecurityErrorEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 SecurityErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 SecurityErrorEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 SecurityErrorEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[securityErrorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> text=<i class="+ topic/ph hi-d/i ">value</i> errorID=<i class="+ topic/ph hi-d/i ">value</i>]</codeph><codeph class="+ topic/ph pr-d/codeph ">errorId</codeph> 仅在 Adobe AIR 中可用</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SECURITY_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	SecurityErrorEvent.SECURITY_ERROR 常量定义 securityError 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">securityError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">SecurityErrorEvent.SECURITY_ERROR</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">securityError</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告安全错误的网络对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">要显示为错误消息的文本。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#FileReference/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:UncaughtErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">UncaughtErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	 当发生未被捕获的错误时，UncaughtErrorEvents 类的实例会调度 UncaughtErrorEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 当发生未被捕获的错误时，UncaughtErrorEvents 类的实例会调度 UncaughtErrorEvent 对象。当任何 <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> 块引发错误时，或调度的 ErrorEvent 对象没有注册的侦听器时，会发生未被捕获的错误。未被捕获的错误事件功能通常称为“全局错误处理程序”。
	 
	 <p class="- topic/p ">调度事件的 UncaughtErrorEvents 对象与 LoaderInfo 对象或 Loader 对象关联。使用下列属性访问 UncaughtErrorEvents 实例：</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.uncaughtErrorEvents</codeph>：检测同一 SWF 中定义的代码中的未被捕获的错误。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Loader.uncaughtErrorEvents</codeph>：检测 Loader 对象加载的 SWF 中定义的代码中的未被捕获的错误。</li></ul>
	 
	 <p class="- topic/p ">当发生 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件时，即使处理了该事件，也不会在导致该错误的调用堆栈中继续执行操作。如果此错误是一个同步错误，将不会执行发生错误的函数中的剩余代码。因此，当发生未被捕获的错误事件时，应用程序可能会处于不稳定状态。因为导致发生未被捕获的错误的原因很多，所以不可能预测哪项功能可用。例如，您的应用程序可能可以执行网络操作或文件操作。但这些操作不一定可用。</p>
	 
	 <p class="- topic/p ">当一个 SWF 加载另一个 SWF 时，<codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件冒泡会再次在 LoaderInfo 层次结构中升降。例如，假设 A.swf 使用 Loader 实例加载 B.swf。如果 B.swf 中发生未被捕获的错误，则会将 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件按以下顺序调度给 LoaderInfo 和 Loader 对象：</p>
	 
	 <ol class="- topic/ol "><li class="- topic/li ">（捕获阶段）A.swf 的 LoaderInfo</li><li class="- topic/li ">（捕获阶段）A.swf 中的 Loader</li><li class="- topic/li ">（目标阶段）B.swf 的 LoaderInfo</li><li class="- topic/li ">（冒泡阶段）A.swf 中的 Loader</li><li class="- topic/li ">（冒泡阶段）A.swf 的 LoaderInfo</li></ol>
	 
	 <p class="- topic/p ">Loader 对象的 <codeph class="+ topic/ph pr-d/codeph ">uncaughtErrorEvents</codeph> 属性永远不会在目标阶段调度 <codeph class="+ topic/ph pr-d/codeph ">uncaughtErrorEvent</codeph>。它仅在捕获阶段和冒泡阶段调度该事件。</p>
	 
	 <p class="- topic/p ">对于其他事件冒泡，调用 <codeph class="+ topic/ph pr-d/codeph ">stopPropagation()</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">stopImmediatePropagation()</codeph> 会停止将事件调度给任何其他侦听器，存在一个重要区别。为了进行事件传播，Loader 对象的 UncaughtErrorEvents 对象通常被视为与加载的 SWF 的 <codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.uncaughtErrorEvents</codeph> 配对。如果向调用 <codeph class="+ topic/ph pr-d/codeph ">stopPropagation()</codeph> 方法的那些对象中的一个注册了某个侦听器，在事件传播结束之前，仍然会将事件调度给其他已向 UncaughtErrorEvents 对象注册的侦听器<i class="+ topic/ph hi-d/i ">和</i>已向其配对 UncaughtErrorEvents 对象注册的侦听器。<codeph class="+ topic/ph pr-d/codeph ">stopImmediatePropagation()</codeph> 方法仍然阻止将事件调度给所有其他侦听器。</p>
	 
	 <p class="- topic/p ">如果内容在运行时的调试器版本（例如 Flash Player 或 AIR Debug Launcher (ADL) 的调试器版本）中运行，当发生未被捕获的错误时，会出现一个未被捕获的错误对话框。对于这些运行时版本，即使为 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件注册了侦听器，仍会出现该错误对话框。在这种情况下，要防止出现该对话框，可调用 UncaughtErrorEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法。</p>
	 
	 <p class="- topic/p ">如果 Loader 对象加载的内容是 AVM1 (ActionScript 2) SWF 文件，则 AVM1 SWF 文件中未被捕获的错误不会导致出现 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件。此外，在 HTMLLoader 对象（包括 Flex HTML 控件）中加载的 HTML 内容中的 JavaScript 错误不会导致出现 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件。</p>
	 
	 </apiDesc><example conref="examples\UncaughtErrorEventExample.1.as" class="- topic/example "> 以下示例演示了使用未被捕获的错误事件处理程序检测 ActionScript 项目中的未被捕获的错误的过程。此示例定义了一个 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件处理程序来检测未被捕获的错误。此示例还提供了一个按钮，如果单击该按钮，将引发由未被捕获的错误处理程序捕获的错误。
 
 <p class="- topic/p ">在构造函数中，代码为由 LoaderInfo 对象的 <codeph class="+ topic/ph pr-d/codeph ">uncaughtErrorEvents</codeph> 属性调度的 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件注册了一个侦听器。</p>
 
 <p class="- topic/p ">在 <codeph class="+ topic/ph pr-d/codeph ">uncaughtErrorHandler()</codeph> 方法中，代码检查 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性的数据类型并做出相应的响应。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.ErrorEvent;
    import flash.events.MouseEvent;
    import flash.events.UncaughtErrorEvent;

    public class UncaughtErrorEventExample extends Sprite
    {
        public function UncaughtErrorEventExample()
        {
            loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
            
            drawUI();
        }
        
        private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
        {
            if (event.error is Error)
            {
                var error:Error = event.error as Error;
                // do something with the error
            }
            else if (event.error is ErrorEvent)
            {
                var errorEvent:ErrorEvent = event.error as ErrorEvent;
                // do something with the error
            }
            else
            {
                // a non-Error, non-ErrorEvent type was thrown and uncaught
            }
        }
        
        private function drawUI():void
        {
            var btn:Sprite = new Sprite();
            btn.graphics.clear();
            btn.graphics.beginFill(0xFFCC00);
            btn.graphics.drawRect(0, 0, 100, 50);
            btn.graphics.endFill();
            addChild(btn);
            btn.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(event:MouseEvent):void
        {
            throw new Error("Gak!");
        }
    }
}
</codeblock></example><example conref="examples\UncaughtErrorEventExample.1.5.as" class="- topic/example "> 以下示例是与上述示例相同的 Flex 示例，将使用 MXML 文档而不是 ActionScript 类作为根内容。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
&lt;?xml version="1.0" encoding="utf-8"?>
&lt;s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
                       xmlns:s="library://ns.adobe.com/flex/spark" 
                       xmlns:mx="library://ns.adobe.com/flex/halo"
                       applicationComplete="applicationCompleteHandler();">
    
    &lt;fx:Script>
        &lt;![CDATA[
            import flash.events.ErrorEvent;
            import flash.events.MouseEvent;
            import flash.events.UncaughtErrorEvent;
            
            private function applicationCompleteHandler():void
            {
                loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
            }
    
            private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
            {
                if (event.error is Error)
                {
                    var error:Error = event.error as Error;
                    // do something with the error
                }
                else if (event.error is ErrorEvent)
                {
                    var errorEvent:ErrorEvent = event.error as ErrorEvent;
                    // do something with the error
                }
                else
                {
                    // a non-Error, non-ErrorEvent type was thrown and uncaught
                }
            }
            
            private function clickHandler(event:MouseEvent):void
            {
                throw new Error("Gak!");
            }
        ]]&gt;
    &lt;/fx:Script>
      
    &lt;s:Button label="Cause Error" click="clickHandler(event);"/>
&lt;/s:WindowedApplication>
</codeblock></example><example conref="examples\UncaughtErrorEventExample.2.as" class="- topic/example "> 以下示例演示了使用未被捕获的错误事件处理程序检测加载的 SWF 中的未被捕获的错误的过程。此示例定义了一个 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件处理程序来检测未被捕获的错误。
 
 <p class="- topic/p ">在构造函数中，代码创建了一个 Loader 对象并为由 Loader 对象的 <codeph class="+ topic/ph pr-d/codeph ">uncaughtErrorEvents</codeph> 属性调度的 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件注册了一个侦听器。</p>
 
 <p class="- topic/p ">在 <codeph class="+ topic/ph pr-d/codeph ">uncaughtErrorHandler()</codeph> 方法中，代码检查 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性的数据类型并做出相应的响应。</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.events.ErrorEvent;
    import flash.events.UncaughtErrorEvent;
    import flash.net.URLRequest;

    public class LoaderUncaughtErrorEventExample extends Sprite
    {
        private var ldr:Loader;
        
        public function LoaderUncaughtErrorEventExample()
        {
            ldr = new Loader();
            ldr.load(new URLRequest("child.swf"));
            ldr.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
        }
        
        private function uncaughtErrorHandler(event:UncaughtErrorEvent):void
        {
            if (event.error is Error)
            {
                var error:Error = event.error as Error;
                // do something with the error
            }
            else if (event.error is ErrorEvent)
            {
                var errorEvent:ErrorEvent = event.error as ErrorEvent;
                // do something with the error
            }
            else
            {
                // a non-Error, non-ErrorEvent type was thrown and uncaught
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#LoaderInfo/uncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">LoaderInfo.uncaughtErrorEvents</linktext></link><link href="flash.display.xml#Loader/uncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">Loader.uncaughtErrorEvents</linktext></link><link href="flash.events.xml#UncaughtErrorEvents" class="- topic/link "><linktext class="- topic/linktext ">UncaughtErrorEvents</linktext></link></related-links><adobeApiEvent id="flash.events:UncaughtErrorEvent:UNCAUGHT_ERROR_uncaughtError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">uncaughtError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:UncaughtErrorEvent:UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:UncaughtErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:UncaughtErrorEvent:UncaughtErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">UncaughtErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
		 创建包含有关 uncaughtError 事件的信息的 UncaughtErrorEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。 
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
		 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">error_in</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">与未被捕获或未处理的错误（正常情况下为 Error 或 ErrorEvent 对象）相关联的对象。
		 
		 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">UncaughtErrorEvent 对象的构造函数。
		 
		 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建包含有关 uncaughtError 事件的信息的 <codeph class="+ topic/ph pr-d/codeph ">UncaughtErrorEvent</codeph> 对象。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:UncaughtErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		 创建 UncaughtErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 UncaughtErrorEvent 对象。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建 UncaughtErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:UncaughtErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
		 返回一个字符串，其中包含 UncaughtErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 UncaughtErrorEvent 对象的所有属性。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 返回一个字符串，其中包含 UncaughtErrorEvent 对象的所有属性。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:UncaughtErrorEvent:UNCAUGHT_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNCAUGHT_ERROR</apiName><shortdesc class="- topic/shortdesc ">
	     定义 uncaughtError 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">uncaughtError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     定义 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。
		 <p class="- topic/p ">此事件具有以下属性：</p>
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；取消此事件可防止在调试器运行时版本中出现未被捕获的错误对话框</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">error</codeph></entry><entry class="- topic/entry ">未被捕获的错误。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">与发生错误的 SWF 相关联的 LoaderInfo 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">text</codeph></entry><entry class="- topic/entry ">文本错误消息。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:UncaughtErrorEvent:error:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
		 与未被捕获的错误相关联的错误对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 与未被捕获的错误相关联的错误对象。通常情况下，此对象的数据类型为下列类型之一：
		 
		 <ul class="- topic/ul "><li class="- topic/li ">Error 实例或它的一个子类 — 如果未被捕获的错误是由 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句创建的同步错误（例如使用 <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> 块捕获的错误）</li><li class="- topic/li ">ErrorEvent 实例或它的一个子类 — 如果未被捕获的错误是在发生错误时调度错误事件的异步错误</li></ul>
		 
		 <p class="- topic/p ">但 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性可以是任何数据类型的对象。ActionScript 不要求仅将 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句用于 Error 对象。例如，以下代码在编译时和运行时均是合法的：</p>
		 
		 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">throw new Sprite()</codeblock>
		 
		 <p class="- topic/p ">如果该 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句未被 <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph> 块捕获，则 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句会触发 <codeph class="+ topic/ph pr-d/codeph "> uncaughtError </codeph> 事件。在这种情况下，调度的 UncaughtErrorEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性是在 <codeph class="+ topic/ph pr-d/codeph ">throw</codeph> 语句中构建的 Sprite 对象。</p>
		 
		 <p class="- topic/p ">因此，在 <codeph class="+ topic/ph pr-d/codeph ">uncaughtError</codeph> 侦听器中，您应检查 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性的数据类型。以下示例对此检查进行了演示：</p>
		 
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
		 function uncaughtErrorHandler(event:UncaughtErrorEvent):void
         {
             var message:String;
             
             if (event.error is Error)
             {
                 message = Error(event.error).message;
             }
             else if (event.error is ErrorEvent)
             {
                 message = ErrorEvent(event.error).text;
             }
             else
             {
                 message = event.error.toString();
             }
         }</codeblock>
		 
         
		 
		 <p class="- topic/p ">如果 <codeph class="+ topic/ph pr-d/codeph ">Error</codeph> 属性包含一个 Error 实例（或 Error 子类），则可用的错误信息随运行内容的运行时的版本的不同而异。以下功能仅当内容在运行时的调试器版本（例如 Flash Player 或 AIR Debug Launcher (ADL) 的调试器版本）中运行时才可用：</p>
		 
		 <ul class="- topic/ul "><li class="- topic/li ">用于获取导致错误的调用堆栈的 <codeph class="+ topic/ph pr-d/codeph ">Error.getStackTrace()</codeph>。在非调试器运行时版本中，此方法返回 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。请注意，如果 <codeph class="+ topic/ph pr-d/codeph ">error</codeph> 属性为 ErrorEvent 实例，调用堆栈信息将不可用。</li><li class="- topic/li ">完成 <codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph> 文本。在非调试器运行时版本中，此属性包含错误消息的短版本，通常是 <codeph class="+ topic/ph pr-d/codeph ">Error.errorID</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">Error.name</codeph> 属性的组合。</li></ul>
		 
		 <p class="- topic/p ">Error 类的所有其他属性和方法在所有运行时版本中都可用。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:InvokeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">InvokeEvent</apiName><shortdesc class="- topic/shortdesc ">
	 在调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将调度 invoke 事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">通过操作系统调用 AIR 应用程序时由 NativeApplication 对象调度。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 在调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将调度 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件。 
	 
	 <p class="- topic/p ">在启动应用程序时，NativeApplication 对象始终调度 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件，但也可以在其他时间调度此事件。例如，当用户激活与正在运行的应用程序关联的文件时，此应用程序将会调度另一个 InvokeEvent。</p>
	 
	 <p class="- topic/p ">只能启动特定应用程序的单个实例。随后尝试启动该应用程序将导致由正在运行的实例的 NativeApplication 对象调度一个新的 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件。应用程序负责处理此事件并采取适当的动作，例如打开一个新应用程序窗口以显示文件中的数据。</p>
	  
	 <p class="- topic/p ">InvokeEvent 由 NativeApplication 对象 (<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication</codeph>) 调度。要接收 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件，请调用 NativeApplication 对象的 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> 方法。当某个事件侦听器针对 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件进行注册时，它还会接收到在注册前发生的所有 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件。这些先前的事件会在对 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> 的调用返回后（但并不一定在注册后可能调度的新 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件之前）进行调度。因此，不应依赖于调度顺序。</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#BrowserInvokeEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">invoke</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">flash.events.InvokeEvent 事件的类型常量。
	 </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">InvokeEvent</apiName><shortdesc class="- topic/shortdesc ">
	 InvokeEvent 类的构造函数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型，可以作为 <codeph class="+ topic/ph pr-d/codeph ">Event.type</codeph> 访问。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对于 InvokeEvent 对象设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对于 InvokeEvent 对象设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dir</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">解析 <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> 数组中的任何相对路径时应使用的目录。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">argv</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要传递给应用程序的参数（字符串）数组。
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reason</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">standard</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的原因，<codeph class="+ topic/ph pr-d/codeph ">InvokeEventReason.LOGIN</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">InvokeEventReason.STANDARD</codeph>。（从 AIR 1.5.1 版开始提供此参数。） 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 InvokeEvent 类的构造函数。
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#InvokeEventReason" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		 创建此事件的新副本。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的副本。
		 
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建此事件的新副本。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">INVOKE</apiName><shortdesc class="- topic/shortdesc ">
	 InvokeEvent.INVOKE 常量定义 InvokeEvent 对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">invoke</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">flash.events.InvokeEvent 事件的类型常量。
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">InvokeEvent.INVOKE</codeph> 常量定义 InvokeEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	 
     <p class="- topic/p ">InvokeEvent 对象具有以下属性：</p>
 	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">arguments</codeph></entry><entry class="- topic/entry ">在此调用过程中传递的字符串参数的数组。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentDirectory</codeph></entry><entry class="- topic/entry ">File 对象，表示解析 arguments 数组中的任何相对路径时应使用的目录。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">reason</codeph></entry><entry class="- topic/entry ">表示 invoke 事件调度原因的代码，原因可能是应用程序在系统登录时自动启动 (<codeph class="+ topic/ph pr-d/codeph ">InvokeEventReason.LOGIN</codeph>)，或是其他原因 (<codeph class="+ topic/ph pr-d/codeph ">InvokeEventReason.STANDARD</codeph>)。从 AIR 1.5.1 版开始提供。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理此 InvokeEvent 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">始终是 NativeApplication 对象。 
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">arguments</apiName><shortdesc class="- topic/shortdesc ">
		 在此调用过程中传递的字符串参数的数组。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 在此调用过程中传递的字符串参数的数组。如果是命令行调用，则该数组将包含命令行参数（<i class="+ topic/ph hi-d/i ">除</i> 进程名称之外）。
		 
		 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">注意：</i>当在 Mac<sup class="+ topic/ph hi-d/sup ">®</sup> OS X 上选择并打开多个文件时，AIR 将调度单个 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件，该事件在 <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> 数组中包含所有所选文件的名称。但是，在 Windows <sup class="+ topic/ph hi-d/sup ">®</sup> 和 Linux 中，AIR 将为 <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> 数组中只包含该文件名的每个所选文件调度一个单独的 <codeph class="+ topic/ph pr-d/codeph ">invoke</codeph> 事件。
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentDirectory</apiName><shortdesc class="- topic/shortdesc ">
		 解析参数数组中的任何相对路径时应使用的目录。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 解析 <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> 数组中的任何相对路径时应使用的目录。 
		 
		 <p class="- topic/p ">如果从命令行启动应用程序，则通常将此属性设置为启动应用程序的命令行解释程序的当前工作目录。如果从 GUI 解释程序启动应用程序，则此属性通常为文件系统根目录。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">reason</apiName><shortdesc class="- topic/shortdesc ">
		 导致此 InvokeEvent 的原因。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.5.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 导致此 InvokeEvent 的原因。此属性表示，应用程序是由用户手动启动，还是在系统登录时自动启动。可能的值枚举为 <codeph class="+ topic/ph pr-d/codeph ">InvokeEventReason</codeph> 类中的常量：
		 
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">InvokeEventReason 常量</entry><entry class="- topic/entry ">意义</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">LOGIN</codeph></entry><entry class="- topic/entry ">登录时自动启动。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">STANDARD</codeph></entry><entry class="- topic/entry ">由于其他原因而启动。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#InvokeEventReason" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ScreenMouseEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ScreenMouseEvent</apiName><shortdesc class="- topic/shortdesc ">
SystemTrayIcon 对象调度 ScreenMouseEvent 类型的事件以响应鼠标交互。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ScreenMouseEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
SystemTrayIcon 对象调度 ScreenMouseEvent 类型的事件以响应鼠标交互。

<p class="- topic/p ">ScreenMouseEvent 对象扩展 MouseEvent 类以提供两个附加属性：<codeph class="+ topic/ph pr-d/codeph ">screenX</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">screenY</codeph>，它们报告相对于主桌面屏幕而不是相对于应用程序窗口或舞台的鼠标坐标。</p>
 
</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#SystemTrayIcon" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">click</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">单击图标时由 SystemTrayIcon 对象调度。
	 
	</apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseDown</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseUp</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightClick</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightMouseDown</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rightMouseUp</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ScreenMouseEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 ScreenMouseEvent 对象，其中包含屏幕坐标中的鼠标位置。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">屏幕坐标中单击的 X 位置。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">屏幕坐标中单击的 Y 位置。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">screenX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，因为屏幕鼠标事件从不会冒泡。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">screenY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，因为没有要取消的默认行为。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ctrlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">在 Windows 或 Linux 中，表示在发生此事件时是否已按下 Ctrl 键。在 Mac 中，表示是否已按下 Ctrl 键或 Command 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">altKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 表示发生此事件时按下了 Alt 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 表示发生此事件时按下了 Shift 键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">buttonDown</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 表示发生此事件时按下了一个鼠标按键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">commandKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已按下 Command 键（仅限 Mac）。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">controlKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已按下 Ctrl 或 Control 键。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ScreenMouseEvent 对象的构造函数。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 ScreenMouseEvent 对象，其中包含屏幕坐标中的鼠标位置。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#MouseEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 ScreenMouseEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 ScreenMouseEvent 对象。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 ScreenMouseEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 ScreenMouseEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 ScreenMouseEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 ScreenMouseEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ScreenMouseEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> status=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLICK</apiName><shortdesc class="- topic/shortdesc ">
	ScreenMouseEvent.CLICK 常量定义 click 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">click</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">单击图标时由 SystemTrayIcon 对象调度。
	 
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ScreenMouseEvent.CLICK</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">click</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下相关属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenX</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenY</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_DOWN</apiName><shortdesc class="- topic/shortdesc ">
	ScreenMouseEvent.MOUSE_DOWN 常量定义 mouseDown 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseDown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ScreenMouseEvent.MOUSE_DOWN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">mouseDown</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下相关属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenX</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenY</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_UP</apiName><shortdesc class="- topic/shortdesc ">
	ScreenMouseEvent.MOUSE_UP 常量定义 mouseUp 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseUp</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ScreenMouseEvent.MOUSE_UP</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">mouseUp</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下相关属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenX</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenY</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RIGHT_CLICK</apiName><shortdesc class="- topic/shortdesc ">
	ScreenMouseEvent.RIGHT_CLICK 常量定义 rightClick 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rightClick</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ScreenMouseEvent.RIGHT_CLICK</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">rightClick</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下相关属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenX</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenY</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RIGHT_MOUSE_DOWN</apiName><shortdesc class="- topic/shortdesc ">
	ScreenMouseEvent.RIGHT_MOUSE_DOWN 常量定义 rightMouseDown 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rightMouseDown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">rightMouseDown</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下相关属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenX</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenY</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RIGHT_MOUSE_UP</apiName><shortdesc class="- topic/shortdesc ">
	ScreenMouseEvent.RIGHT_MOUSE_UP 常量定义 rightMouseUp 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rightMouseUp</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ScreenMouseEvent.RIGHT_MOUSE_UP</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">rightMouseUp</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
	
	<p class="- topic/p ">此事件具有以下相关属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">buttonDown</codeph></entry><entry class="- topic/entry ">如果按下鼠标主按键，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">ctrlKey</codeph></entry><entry class="- topic/entry ">在 Windows 或 Linux 中，如果 Ctrl 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。在 Mac 中，如果 Ctrl 键或 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">commandKey</codeph></entry><entry class="- topic/entry ">在 Mac 中，如果 Command 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。在 Windows 中始终为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">controlKey</codeph></entry><entry class="- topic/entry ">如果 Ctrl 或 Control 键处于活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果处于非活动状态，则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenX</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的水平坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">screenY</codeph></entry><entry class="- topic/entry ">事件发生点在屏幕坐标中的垂直坐标。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">指针设备下的 SystemTrayIcon 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenX</apiName><shortdesc class="- topic/shortdesc ">
	屏幕坐标中单击的 X 位置。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	屏幕坐标中单击的 X 位置。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">screenY</apiName><shortdesc class="- topic/shortdesc ">
	屏幕坐标中单击的 Y 位置。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	屏幕坐标中单击的 Y 位置。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ContextMenuEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ContextMenuEvent</apiName><shortdesc class="- topic/shortdesc ">
 当用户打开上下文菜单或与上下文菜单交互时，InteractiveObject 对象将调度 ContextMenuEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ContextMenuEvent 事件的事件对象。
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当用户打开上下文菜单或与上下文菜单交互时，InteractiveObject 对象将调度 ContextMenuEvent 对象。有两种类型的 ContextMenuEvent 对象：
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ContextMenuEvent.MENU_ITEM_SELECT</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ContextMenuEvent.MENU_SELECT</codeph></li></ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">ContextMenuEventExample</codeph> 类从舞台中删除默认的上下文菜单项，并添加能够更改舞台上正方形颜色的新菜单项。该示例执行下列任务：
 
 <ol class="- topic/ol "><li class="- topic/li ">声明 <codeph class="+ topic/ph pr-d/codeph ">myContextMenu</codeph> 属性，然后将其分配给新的 ContextMenu 对象并声明 <codeph class="+ topic/ph pr-d/codeph ">redRectangle</codeph> 属性（属于 Sprite 类型）。</li><li class="- topic/li ">调用 <codeph class="+ topic/ph pr-d/codeph ">removeDefaultItems()</codeph> 方法。此方法删除除“打印”之外的所有内置上下文菜单项。</li><li class="- topic/li ">调用 <codeph class="+ topic/ph pr-d/codeph ">addCustomMenuItems()</codeph> 方法。此方法将 <codeph class="+ topic/ph pr-d/codeph ">Reverse Colors</codeph> 菜单项放入 <codeph class="+ topic/ph pr-d/codeph ">defaultItems</codeph> 数组中（使用 Array 的 <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> 方法）。将 <codeph class="+ topic/ph pr-d/codeph ">menuItemSelect</codeph> 事件侦听器添加到 ContextMenuItem 对象中，关联的方法名为 <codeph class="+ topic/ph pr-d/codeph ">menuItemSelectHandler()</codeph>。当用户从上下文菜单中选择“反转颜色”时，此方法将输出一些 <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 语句。此外，红色正方形将变为黑色，黑色文本将变为红色。</li><li class="- topic/li ">回到构造函数中，添加一个 <codeph class="+ topic/ph pr-d/codeph ">menuSelect</codeph> 事件侦听器以及关联的方法 <codeph class="+ topic/ph pr-d/codeph ">menuSelectHandler()</codeph>，每次选择上下文菜单中的一项时，只输出三条 <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> 语句。</li><li class="- topic/li ">构造函数调用 <codeph class="+ topic/ph pr-d/codeph ">addChildren()</codeph>，绘制一个红色正方形并将其添加到显示列表中（将立即显示该正方形）。</li><li class="- topic/li ">最后，将 <codeph class="+ topic/ph pr-d/codeph ">myContextMenu</codeph> 分配给 <codeph class="+ topic/ph pr-d/codeph ">redRectangle</codeph> 属性的上下文菜单，以便仅当鼠标指针位于正方形上方时才显示自定义上下文菜单。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#ContextMenu" class="- topic/link "><linktext class="- topic/linktext ">ContextMenu 类</linktext></link><link href="flash.ui.xml#ContextMenuItem" class="- topic/link "><linktext class="- topic/linktext ">ContextMenuItem 类</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">menuItemSelect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">menuSelect</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#ContextMenu/event:menuSelect" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ContextMenuEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关菜单事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ContextMenuEvent.MENU_ITEM_SELECT</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ContextMenuEvent.MENU_SELECT</codeph></li></ul>
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">mouseTarget</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">用户右键单击以显示上下文菜单的显示列表对象。此对象可以是 <codeph class="+ topic/ph pr-d/codeph ">contextMenuOwner</codeph> 或显示列表中它的后代之一。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">contextMenuOwner</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">菜单附加到的显示列表对象。此对象可以是 <codeph class="+ topic/ph pr-d/codeph ">mouseTarget</codeph> 或显示列表中它的始祖之一。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ContextMenuEvent 对象的构造函数。
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关菜单事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT" class="- topic/link "><linktext class="- topic/linktext ">ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT" class="- topic/link "><linktext class="- topic/linktext ">ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 ContextMenuEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 ContextMenuEvent 对象。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 ContextMenuEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 ContextMenuEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 ContextMenuEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 ContextMenuEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ContextMenuEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> ... contextMenuOwner=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MENU_ITEM_SELECT</apiName><shortdesc class="- topic/shortdesc ">
	定义 menuItemSelect 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">menuItemSelect</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">menuItemSelect</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">contextMenuOwner</codeph></entry><entry class="- topic/entry ">菜单附加到的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">mouseTarget</codeph></entry><entry class="- topic/entry ">用户右键单击以显示上下文菜单的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">已选定的 ContextMenuItem 对象。target 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MENU_SELECT</apiName><shortdesc class="- topic/shortdesc ">
	定义 menuSelect 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">menuSelect</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">menuSelect</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">contextMenuOwner</codeph></entry><entry class="- topic/entry ">菜单附加到的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">mouseTarget</codeph></entry><entry class="- topic/entry ">用户右键单击以显示上下文菜单的显示列表对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">将要显示的 ContextMenu 对象。target 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.ui.xml#ContextMenu/event:menuSelect" class="- topic/link "><linktext class="- topic/linktext ">flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">contextMenuOwner</apiName><shortdesc class="- topic/shortdesc ">
	菜单附加到的显示列表对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	菜单附加到的显示列表对象。此对象可以是鼠标目标 (<codeph class="+ topic/ph pr-d/codeph ">mouseTarget</codeph>) 或显示列表中它的始祖之一。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isMouseTargetInaccessible</apiName><shortdesc class="- topic/shortdesc ">
	 表示 mouseTarget 属性是否因某些安全原因设置为 null。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 表示 <codeph class="+ topic/ph pr-d/codeph ">mouseTarget</codeph> 属性是否因某些安全原因设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。如果 <codeph class="+ topic/ph pr-d/codeph ">menuTarget</codeph> 的标称值是对其他安全沙箱中 <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> 的引用，则 <codeph class="+ topic/ph pr-d/codeph ">menuTarget</codeph> 将设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，除非同时具有跨此沙箱边界的双向权限。权限通过以下方式建立：从 SWF 文件调用 <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，并在加载图像时设置 <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.checkPolicyFile</codeph> 标志。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ContextMenuEvent/mouseTarget" class="- topic/link "><linktext class="- topic/linktext ">ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">mouseTarget</apiName><shortdesc class="- topic/shortdesc ">
	用户右键单击以显示上下文菜单的显示列表对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	用户右键单击以显示上下文菜单的显示列表对象。此对象可以是菜单附加到的显示列表对象 (<codeph class="+ topic/ph pr-d/codeph ">contextMenuOwner</codeph>) 或显示列表中它的后代之一。
	<p class="- topic/p ">在以下两种情况下，此属性的值可以为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>：不存在任何鼠标目标（例如，当您在后台将鼠标置于某个对象上方时）；存在鼠标目标，但它位于您无法访问的安全沙箱中。使用 <codeph class="+ topic/ph pr-d/codeph ">isMouseTargetInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible" class="- topic/link "><linktext class="- topic/linktext ">ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DRMAuthenticateEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DRMAuthenticateEvent</apiName><shortdesc class="- topic/shortdesc ">
    当尝试播放使用数字权限管理 (DRM) 加密的内容（需要用户凭据以进行身份验证）时，NetStream 对象将调度 DRMAuthenticateEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">启用 DRM 的对象的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    当尝试播放使用数字权限管理 (DRM) 加密的内容（需要用户凭据以进行身份验证）时，NetStream 对象将调度 DRMAuthenticateEvent 对象。 
	<p class="- topic/p ">
	DRMAuthenticateEvent 处理函数负责收集所需的凭据（如用户名、密码和类型）并将值传递给 <codeph class="+ topic/ph pr-d/codeph ">NetStream.setDRMAuthenticationCredentials()</codeph> 方法以进行身份验证。每个 AIR 应用程序都必须提供用于获取用户凭据的机制。例如，应用程序可以为用户提供一个简单的用户界面以输入用户名和密码值，以及类型值（可选）。  
	</p> 
	<p class="- topic/p ">
	如果用户身份验证失败，则应用程序将重新尝试身份验证并为 NetStream 对象调度一个新的 DRMAuthenticateEvent 事件。
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE" class="- topic/link "><linktext class="- topic/linktext ">DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager" class="- topic/link "><linktext class="- topic/linktext ">flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmAuthenticate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmAuthenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType" class="- topic/link "><linktext class="- topic/linktext ">DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmAuthenticate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmAuthenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType" class="- topic/link "><linktext class="- topic/linktext ">DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmAuthenticate</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmAuthenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DRMAuthenticateEvent</apiName><shortdesc class="- topic/shortdesc ">
 	    创建一个 Event 对象，其中包含有关 DRM 验证事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 DRMAuthenticate 事件：<codeph class="+ topic/ph pr-d/codeph ">DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">header</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">服务器提供的加密内容文件标头。
  		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">userPrompt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 服务器提供的用户名凭据提示。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">passPrompt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">服务器提供的密码凭据提示。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">urlPrompt</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">服务器提供的要显示的 URL 提示。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">authenticationType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">netstream</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStream</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">启动此事件的 NetStream 对象。
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	    创建一个 Event 对象，其中包含有关 DRM 验证事件的特定信息。将 Event 对象作为参数传递给事件侦听器。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 DRMAuthenticateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 DRMAuthenticateEvent 对象。
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 DRMAuthenticateEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
		返回一个字符串，其中包含 DRMAuthenticateEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 DRMAuthenticateEvent 对象的所有属性。
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		返回一个字符串，其中包含 DRMAuthenticateEvent 对象的所有属性。字符串的格式如下： 
     	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[DRMAuthenticateEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> eventPhase=<i class="+ topic/ph hi-d/i ">value</i> header=<i class="+ topic/ph hi-d/i ">value</i> usernamePrompt=<i class="+ topic/ph hi-d/i ">value</i> passwordPrompt=<i class="+ topic/ph hi-d/i ">value</i> urlPrompt=<i class="+ topic/ph hi-d/i ">value</i>] authenticationType=<i class="+ topic/ph hi-d/i ">value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AUTHENTICATION_TYPE_DRM</apiName><shortdesc class="- topic/shortdesc ">
		DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM 常量定义 DRMAuthenticateEvent 对象的 authenticationType 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">drm</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph> 常量定义 DRMAuthenticateEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">authenticationType</codeph> 属性的值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">authenticationType</codeph></entry><entry class="- topic/entry ">表示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">header</codeph></entry><entry class="- topic/entry ">服务器提供的加密内容文件标头。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">netstream</codeph></entry><entry class="- topic/entry ">启动此事件的 NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">passwordPrompt</codeph></entry><entry class="- topic/entry ">服务器提供的密码凭据提示。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">urlPrompt</codeph></entry><entry class="- topic/entry ">服务器提供的要显示的 URL 提示。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">usernamePrompt</codeph></entry><entry class="- topic/entry ">服务器提供的用户名凭据提示。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmAuthenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType" class="- topic/link "><linktext class="- topic/linktext ">DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AUTHENTICATION_TYPE_PROXY</apiName><shortdesc class="- topic/shortdesc ">
		DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY 常量定义 DRMAuthenticateEvent 对象的 authenticationType 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">proxy</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph> 常量定义 DRMAuthenticateEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">authenticationType</codeph> 属性的值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">authenticationType</codeph></entry><entry class="- topic/entry ">表示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">header</codeph></entry><entry class="- topic/entry ">服务器提供的加密内容文件标头。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">netstream</codeph></entry><entry class="- topic/entry ">启动此事件的 NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">passwordPrompt</codeph></entry><entry class="- topic/entry ">服务器提供的密码凭据提示。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">urlPrompt</codeph></entry><entry class="- topic/entry ">服务器提供的要显示的 URL 提示。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">usernamePrompt</codeph></entry><entry class="- topic/entry ">服务器提供的用户名凭据提示。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmAuthenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType" class="- topic/link "><linktext class="- topic/linktext ">DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DRM_AUTHENTICATE</apiName><shortdesc class="- topic/shortdesc ">
		DRMAuthenticateEvent.DRM_AUTHENTICATE 常量定义 DRMAuthenticateEvent 对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">drmAuthenticate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> 常量定义 DRMAuthenticateEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">authenticationType</codeph></entry><entry class="- topic/entry ">表示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的身份验证，还是用于针对代理服务器的身体验证。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph> 表示没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">header</codeph></entry><entry class="- topic/entry ">服务器提供的加密内容文件标头。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">netstream</codeph></entry><entry class="- topic/entry ">启动此事件的 NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">passwordPrompt</codeph></entry><entry class="- topic/entry ">服务器提供的密码凭据提示。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NetStream 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">urlPrompt</codeph></entry><entry class="- topic/entry ">服务器提供的要显示的 URL 提示。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">usernamePrompt</codeph></entry><entry class="- topic/entry ">服务器提供的用户名凭据提示。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmAuthenticate" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">authenticationType</apiName><shortdesc class="- topic/shortdesc ">
		表示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的验证，还是用于针对代理服务器的验证。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示提供的凭据是用于针对 Flash Media Rights Management Server (FMRMS) 的验证，还是用于针对代理服务器的验证。例如，<codeph class="+ topic/ph pr-d/codeph ">“proxy”</codeph>选项允许应用程序针对代理服务器进行身份验证（如果企业要求用户通过此步骤后才能访问 Internet）。除非使用匿名身份验证，否则在代理身份验证之后，用户仍需要针对 FMRMS 进行身份验证才能获取凭证并播放内容。您可以再次与<codeph class="+ topic/ph pr-d/codeph ">“drm”</codeph>选项一起使用 <codeph class="+ topic/ph pr-d/codeph ">setDRMAuthenticationcredentials()</codeph> 以针对 FMRMS 进行身份验证。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">header</apiName><shortdesc class="- topic/shortdesc ">
		服务器提供的加密内容文件标头。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		服务器提供的加密内容文件标头。它包含有关加密内容的上下文的信息。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">netstream</apiName><shortdesc class="- topic/shortdesc ">
		启动此事件的 NetStream 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		启动此事件的 NetStream 对象。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">passwordPrompt</apiName><shortdesc class="- topic/shortdesc ">
		服务器提供的密码凭据提示。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		服务器提供的密码凭据提示。该字符串可以包括所需密码的类型说明。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">urlPrompt</apiName><shortdesc class="- topic/shortdesc ">
		服务器提供的 URL 字符串提示。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		服务器提供的 URL 字符串提示。该字符串可以提供要将用户名和密码发送到的位置。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">usernamePrompt</apiName><shortdesc class="- topic/shortdesc ">
		服务器提供的用户名凭据提示。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		服务器提供的用户名凭据提示。该字符串可以包括所需用户名的类型说明。例如，内容提供程序可能需要电子邮件地址作为用户名。
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:StorageVolumeChangeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolumeChangeEvent</apiName><shortdesc class="- topic/shortdesc "> 
   安装或卸载存储卷时，StorageVolumeInfo.storageVolumeInfo 对象将调度 StorageVolumeChangeEvent 事件对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
   安装或卸载存储卷时，<codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo</codeph> 对象将调度 StorageVolumeChangeEvent 事件对象。有两种类型的 StorageVolumeChangeEvent： <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph>。
   
   <p class="- topic/p ">在 Linux 上，StorageVolumeInfo 对象只为物理设备调度 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> 事件。用户通过网络装载或卸载卷时，该对象不调度事件。</p>
   
   <p class="- topic/p ">有些设备，如一些数字摄像头和电话，显示在 <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.getStorageVolumes()</codeph> 数组中，但在安装或卸载时，它们不调度 StorageVolumeChangeEvent 对象。</p>
   
   <!-- p>Not all devices cause the StorageVolumeInfo object to dispatch a StorageVolumeChangeEvent event  
   object when a storage volume is mounted or unmounted, as noted in the following table:</p>
   
   <table class="innertable">
   
   <tr>
      <th>Device type</th>   <th>Dispatches StorageVolumeChangeEvent</th>
   </tr>
   
   <tr>
      <td>Card reader</td>   <td>Yes</td>   
   </tr>
   
   <tr>
      <td>CD/DVD, fixed</td>   <td>Yes</td>   
   </tr>
   
   <tr>
      <td>CD/DVD, external</td>   <td>Yes</td>   
   </tr>
   
   <tr>
      <td>Firewire drive</td>   <td>Yes</td>   
   </tr>
   
   <tr>
      <td>Hard disk, USB</td>   <td>Yes</td>   
   </tr>
   
   <tr>
      <td>Network drive</td>   <td>Yes</td>  
   </tr>
   
   <tr>
      <td>USB pen drive</td>   <td>Yes</td>   
   </tr>
   
   </table -->
   
   
   </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo</linktext></link></related-links><adobeApiEvent id="flash.events:StorageVolumeChangeEvent:STORAGE_VOLUME_MOUNT_storageVolumeMount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeMount</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:StorageVolumeChangeEvent:STORAGE_VOLUME_MOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StorageVolumeChangeEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:StorageVolumeChangeEvent:STORAGE_VOLUME_UNMOUNT_storageVolumeUnount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeUnount</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:StorageVolumeChangeEvent:STORAGE_VOLUME_UNMOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StorageVolumeChangeEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StorageVolumeChangeEvent:StorageVolumeChangeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolumeChangeEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建 StorageVolumeChangeEvent 对象作为参数传递给事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型，可在 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性中访问。StorageVolumeChangeEvent 类定义两种事件类型：<codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> 事件，由 <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT</codeph> 常量表示；<codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> 事件，由 <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT</codeph> 常量表示。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">存储卷的名称。
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">volume</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:StorageVolume</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示存储卷的 File 对象。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">用于创建新的 StorageVolumeChangeEvent 对象。
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 StorageVolumeChangeEvent 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link><link href="flash.events.xml#ErrorEvent/ERROR" class="- topic/link "><linktext class="- topic/linktext ">flash.events.ErrorEvent.ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StorageVolumeChangeEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
        
	 复制 Event 子类的实例。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个新的 Event 对象，它与原始对象相同。
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        
	 复制 Event 子类的实例。
	 
     <p class="- topic/p ">返回一个新的 Event 对象，它是 Event 对象的原始实例的副本。通常您不需要调用 <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>；当您重新调度事件，即调用 <codeph class="+ topic/ph pr-d/codeph ">dispatchEvent(event)</codeph>（从正在处理 <codeph class="+ topic/ph pr-d/codeph ">event</codeph> 的处理函数）时，EventDispatcher 类会自动调用它。</p>
	 
	 <p class="- topic/p ">新的 Event 对象包括原始对象的所有属性。</p> 
	 
	 <p class="- topic/p ">当您创建自己的自定义 Event 类时，必须覆盖继承的 <codeph class="+ topic/ph pr-d/codeph ">Event.clone()</codeph> 方法，以复制自定义类的属性。如果您未设置在事件子类中添加的所有属性，则当侦听器处理重新调度的事件时，这些属性将不会有正确的值。</p>
	 
	 <p class="- topic/p ">在本示例中，<codeph class="+ topic/ph pr-d/codeph ">PingEvent</codeph> 是 <codeph class="+ topic/ph pr-d/codeph ">Event</codeph> 的子类，因此它可以实现其自己的 <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph> 版本。</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StorageVolumeChangeEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
        
	返回一个字符串，其中包含 Event 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 Event 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        
	返回一个字符串，其中包含 Event 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[Event type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StorageVolumeChangeEvent:STORAGE_VOLUME_MOUNT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STORAGE_VOLUME_MOUNT</apiName><shortdesc class="- topic/shortdesc ">
	当安装卷时，StorageVolumeChangeEvent.VOLUME_MOUNT 常量定义 StorageVolumeChangeEvent 的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">storageVolumeMount</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	当安装卷时，<codeph class="+ topic/ph pr-d/codeph ">StorageVolumeChangeEvent.VOLUME_MOUNT</codeph> 常量定义 StorageVolumeChangeEvent 的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p "> 事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">StorageVolumeChangeEvent 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">file</codeph></entry><entry class="- topic/entry ">表示存储卷的 File 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name</codeph></entry><entry class="- topic/entry ">存储卷的名称。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">StorageVolumeChangeEvent 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"storageVolumeMount"</codeph></entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo</linktext></link></related-links></apiValue><apiValue id="flash.events:StorageVolumeChangeEvent:STORAGE_VOLUME_UNMOUNT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">STORAGE_VOLUME_UNMOUNT</apiName><shortdesc class="- topic/shortdesc ">
	当卸载卷时，StorageVolumeChangeEvent.VOLUME_MOUNT 常量定义 StorageVolumeChangeEvent 的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">storageVolumeUnmount</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	当卸载卷时，<codeph class="+ topic/ph pr-d/codeph ">StorageVolumeChangeEvent.VOLUME_MOUNT</codeph> 常量定义 StorageVolumeChangeEvent 的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
	
	<p class="- topic/p "> 事件具有以下属性：</p>
	
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">StorageVolumeChangeEvent 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">file</codeph></entry><entry class="- topic/entry ">表示存储卷的 File 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">name</codeph></entry><entry class="- topic/entry ">存储卷的名称。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">StorageVolumeChangeEvent 对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"storageVolumeUnmount"</codeph></entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo</linktext></link></related-links></apiValue><apiValue id="flash.events:StorageVolumeChangeEvent:rootDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rootDirectory</apiName><shortdesc class="- topic/shortdesc ">
         与安装的卷的根目录相对应的 File 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         与安装的卷的根目录相对应的 File 对象。如果已卸载了卷（如果事件类型是 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph>），则此属性设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.File</linktext></link></related-links></apiValue><apiValue id="flash.events:StorageVolumeChangeEvent:storageVolume:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolume</apiName><shortdesc class="- topic/shortdesc ">
         一个包含有关安装的卷的信息的 StorageVolume 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:StorageVolume</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         一个包含有关安装的卷的信息的 StorageVolume 对象。对于卸载的卷，此属性为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>（对于 <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> 事件）。
         
         </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolume</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:SQLEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLEvent</apiName><shortdesc class="- topic/shortdesc ">
 当 SQLConnection 或 SQLStatement 实例执行的某个操作成功完成时，Adobe AIR 将调度 SQLEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当 SQLConnection 或 SQLStatement 实例执行的某个操作成功完成时，Adobe AIR 将调度 SQLEvent 对象。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/cancel()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/compact()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/reencrypt()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RELEASE_SAVEPOINT_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:RELEASE_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.releaseSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_TO_SAVEPOINT_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:ROLLBACK_TO_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.rollbackToSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SET_SAVEPOINT_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:SQLEvent:SET_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.setSavepoint()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLEvent</apiName><shortdesc class="- topic/shortdesc ">
     创建一个 SQLEvent 对象以作为参数传递给事件侦听器。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型，在 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性中可用。
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。默认值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">用于创建新的 SQLEvent 对象。
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     创建一个 SQLEvent 对象以作为参数传递给事件侦听器。
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 创建 SQLEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 SQLEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 创建 SQLEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ANALYZE</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.ANALYZE 常量定义 analyze 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">analyze</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.ANALYZE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">analyze</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.analyze()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">analyze</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ATTACH</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.ATTACH 常量定义 attach 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">attach</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.ATTACH</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">attach</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.attach()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">attach</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BEGIN</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.BEGIN 常量定义 begin 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">begin</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.BEGIN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">begin</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.begin()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">begin</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CANCEL</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.CANCEL 常量定义 cancel 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">cancel</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.CANCEL</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> 事件具有以下属性：
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 或 SQLStatement 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/cancel()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CLOSE</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.CLOSE 常量定义 close 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">close</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.CLOSE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">close</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.close()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">close</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COMMIT</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.COMMIT 常量定义 commit 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">commit</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.COMMIT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">commit</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.commit()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">commit</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">COMPACT</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.COMPACT 常量定义 compact 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">compact</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.COMPACT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">compact</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.compact()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">compact</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/compact()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEANALYZE</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.DEANALYZE 常量定义 deanalyze 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">deanalyze</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.DEANALYZE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">deanalyze</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.deanalyze()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">deanalyze</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DETACH</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.DETACH 常量定义 detach 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">detach</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.DETACH</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">detach</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.detach()</codeph> 方法调用成功完成时调度这种类型的事件。
     
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">OPEN</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.OPEN 常量定义 open 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">open</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.OPEN</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">open</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.open()</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.openAsync()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">open</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">REENCRYPT</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.REENCRYPT 常量定义 reencrypt 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">reencrypt</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.REENCRYPT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">reencrypt</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.reencrypt()</codeph> 方法调用成功完成时调度此类型的事件。<codeph class="+ topic/ph pr-d/codeph ">reencrypt</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/reencrypt()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RELEASE_SAVEPOINT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RELEASE_SAVEPOINT</apiName><shortdesc class="- topic/shortdesc ">
	 SQLEvent.RELEASE_SAVEPOINT 常量定义 releaseSavepoint 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">releaseSavepoint</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.RELEASE_SAVEPOINT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。当 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.releaseSavepoint()</codeph> 方法调用成功完成时调度此类型的事件。<codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint</codeph> 事件包含下列属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.releaseSavepoint()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RESULT</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.RESULT 常量定义 result 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">result</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.RESULT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">result</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> 方法或 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> 方法成功完成时调度。调度 <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.RESULT</codeph> 事件之后，即可调用 <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.getResult()</codeph> 方法来访问结果数据。<codeph class="+ topic/ph pr-d/codeph ">result</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLStatement 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK_TO_SAVEPOINT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ROLLBACK_TO_SAVEPOINT</apiName><shortdesc class="- topic/shortdesc ">
	 SQLEvent.ROLLBACK_TO_SAVEPOINT 常量定义 rollbackToSavepoint 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rollbackToSavepoint</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.ROLLBACK_TO_SAVEPOINT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。当 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.rollbackToSavepoint()</codeph> 方法调用成功完成时调度此类型的事件。<codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint</codeph> 事件包含下列属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.rollbackToSavepoint()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ROLLBACK</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.ROLLBACK 常量定义 rollback 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">rollback</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.ROLLBACK</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">rollback</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.rollback()</codeph> 方法调用成功完成时调度这种类型的事件。<codeph class="+ topic/ph pr-d/codeph ">rollback</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SCHEMA</apiName><shortdesc class="- topic/shortdesc ">
     SQLEvent.SCHEMA 常量定义 schema 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">schema</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.SCHEMA</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。在 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> 方法成功完成时调度。调度 <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.SCHEMA</codeph> 事件之后，即可调用 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.getSchemaResult()</codeph> 方法来获取架构信息。<codeph class="+ topic/ph pr-d/codeph ">schema</codeph> 事件具有以下属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SET_SAVEPOINT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SET_SAVEPOINT</apiName><shortdesc class="- topic/shortdesc ">
	 SQLEvent.SET_SAVEPOINT 常量定义 setSavepoint 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">setSavepoint</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 <codeph class="+ topic/ph pr-d/codeph ">SQLEvent.SET_SAVEPOINT</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">setSavepoint</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。当 <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.setSavepoint()</codeph> 方法调用成功完成时调度此的类型事件。<codeph class="+ topic/ph pr-d/codeph ">setSavepoint</codeph> 事件包含下列属性：
	 
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">执行操作的 SQLConnection 对象。</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.setSavepoint()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:DRMErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DRMErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
	 DRMErrorEvent 类提供有关播放数字权限管理 (DRM) 加密文件时发生的错误的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">启用 DRM 的对象的事件对象。
	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 DRMErrorEvent 类提供有关播放数字权限管理 (DRM) 加密文件时发生的错误的信息。
	  
	<p class="- topic/p ">在 NetStream 对象尝试播放数字权限管理 (DRM) 加密文件的过程中遇到与 DRM 相关的错误时，运行时调度 DRMErrorEvent 对象。例如，当内容提供程序不支持执行查看的应用程序，或可能由于用户未购买内容而导致用户授权失败时，调度 DRMErrorEvent 对象。</p>
	<p class="- topic/p ">
	对于无效的用户凭据，DRMAuthenticateEvent 对象将重复调度该对象来处理错误，直到用户输入有效的凭据，或者应用程序拒绝进一步的尝试。应用程序应侦听任何其他 DRM 错误事件，以便检测、标识和处理与 DRM 相关的错误。
	</p>
	<p class="- topic/p ">
	此类提供一些属性，其中包含引发异常的对象、错误代码以及包含错误相关信息的子错误代码和文本消息（如果适用）。有关与 DRM 相关的错误代码的说明，请参阅<xref href="../../runtimeErrors.html" class="- topic/xref ">运行时错误代码</xref>。与 DRM 相关的错误代码从错误 3300 开始。
	</p> 
	
	</apiDesc><example conref="examples\DRMErrorEventExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR" class="- topic/link "><linktext class="- topic/linktext ">DRMErrorEvent.DRM_ERROR</linktext></link><link href="../../runtimeErrors.html" class="- topic/link "><linktext class="- topic/linktext ">运行时错误代码</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">drmError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DRMErrorEvent</apiName><shortdesc class="- topic/shortdesc ">
 	    创建一个 Event 对象，其中包含有关 DRM 错误事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的 DRMAuthenticate 事件：<codeph class="+ topic/ph pr-d/codeph ">DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inErrorDetail</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">错误的特定语法详细信息（如果适用）。
  		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inErrorCode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">主要错误代码。
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">insubErrorID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">次要错误 ID。
 	    
 	    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inMetadata</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net.drm:DRMContentData</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inSystemUpdateNeeded</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">inDrmUpdateNeeded</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	    创建一个 Event 对象，其中包含有关 DRM 错误事件的特定信息。将 Event 对象作为参数传递给事件侦听器。 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		创建 DRMErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 DRMErrorEvent 对象。
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		创建 DRMErrorEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
		返回一个字符串，其中包含 DRMErrorEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 DRMErrorEvent 对象的所有属性。
  		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		返回一个字符串，其中包含 DRMErrorEvent 对象的所有属性。字符串的格式如下： 
     	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[DRMErrorEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> eventPhase=<i class="+ topic/ph hi-d/i ">value</i> errroID=<i class="+ topic/ph hi-d/i ">value</i> subErrorID=<i class="+ topic/ph hi-d/i ">value</i> text=<i class="+ topic/ph hi-d/i ">value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DRM_ERROR</apiName><shortdesc class="- topic/shortdesc ">
		DRMErrorEvent.DRM_ERROR 常量定义 drmError 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">drmError</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		<codeph class="+ topic/ph pr-d/codeph ">DRMErrorEvent.DRM_ERROR</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">drmError</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
		
		<p class="- topic/p ">此事件具有以下属性：</p>
		
		<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">errorID</codeph></entry><entry class="- topic/entry ">分配给问题的数字错误代码。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">subErrorID</codeph></entry><entry class="- topic/entry ">表示有关基本问题的更多详细信息的错误代码。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">NetStream 对象。</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream/event:drmError" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">contentData</apiName><shortdesc class="- topic/shortdesc ">
		 媒体文件的 DRMContentData。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 媒体文件的 DRMContentData。
		 
		 <p class="- topic/p ">可以使用由 <codeph class="+ topic/ph pr-d/codeph ">contentData</codeph> 属性引用的对象从 DRMManager 凭证缓冲检索相关的 DRM 凭证。凭证属性描述可供用户使用的许可证，还可以解释为何无法查看受 DRM 保护的内容。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:drmUpdateNeeded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">drmUpdateNeeded</apiName><shortdesc class="- topic/shortdesc ">
		 表示播放受 DRM 保护的内容时是否需要 DRM 更新。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 表示播放受 DRM 保护的内容时是否需要 DRM 更新。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">subErrorID</apiName><shortdesc class="- topic/shortdesc ">
		表示有关基本问题的更多详细信息的错误 ID。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		表示有关基本问题的更多详细信息的错误 ID。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:systemUpdateNeeded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">systemUpdateNeeded</apiName><shortdesc class="- topic/shortdesc ">
		 表示播放受 DRM 保护的内容时是否需要系统更新。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 表示播放受 DRM 保护的内容时是否需要系统更新。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:EventPhase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EventPhase</apiName><shortdesc class="- topic/shortdesc ">
 EventPhase 类可为 Event 类的 eventPhase 属性提供值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 EventPhase 类可为 Event 类的 <codeph class="+ topic/ph pr-d/codeph ">eventPhase</codeph> 属性提供值。
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#Event" class="- topic/link "><linktext class="- topic/linktext ">Event 类</linktext></link><link href="flash.events.xml#EventDispatcher" class="- topic/link "><linktext class="- topic/linktext ">EventDispatcher 类</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AT_TARGET</apiName><shortdesc class="- topic/shortdesc ">
	目标阶段，是事件流的第二个阶段。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	目标阶段，是事件流的第二个阶段。
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BUBBLING_PHASE</apiName><shortdesc class="- topic/shortdesc ">
	冒泡阶段，是事件流的第三个阶段。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	冒泡阶段，是事件流的第三个阶段。
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CAPTURING_PHASE</apiName><shortdesc class="- topic/shortdesc ">
	捕获阶段，是事件流的第一个阶段。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	捕获阶段，是事件流的第一个阶段。
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:FocusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FocusEvent</apiName><shortdesc class="- topic/shortdesc ">
 用户将焦点从显示列表中的一个对象更改到另一个对象时，对象将调度 FocusEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Focus 事件的事件对象。
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 用户将焦点从显示列表中的一个对象更改到另一个对象时，对象将调度 FocusEvent 对象。有四种类型的焦点事件：
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FocusEvent.FOCUS_IN</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FocusEvent.FOCUS_OUT</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FocusEvent.KEY_FOCUS_CHANGE</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li></ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as" class="- topic/example "> 以下示例使用 <codeph class="+ topic/ph pr-d/codeph ">FocusEventExample</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">CustomSprite</codeph> 类来说明如何将焦点与在舞台上绘制的项目结合使用，以捕获事件和输出信息。本示例将执行以下任务：
 <ol class="- topic/ol "><li class="- topic/li ">它声明属性 <codeph class="+ topic/ph pr-d/codeph ">child</codeph>（属于 Sprite 类型）和 <codeph class="+ topic/ph pr-d/codeph ">childCount</codeph>（属于 uint 类型）。</li><li class="- topic/li ">一个 <codeph class="+ topic/ph pr-d/codeph ">for</codeph> 循环在 (0,0) 处创建五个浅蓝色正方形。该循环从将 <codeph class="+ topic/ph pr-d/codeph ">child</codeph> 分配给新的 CustomSprite 实例开始。每次创建 CustomSprite 对象时，会执行以下操作：
     <ul class="- topic/ul "><li class="- topic/li ">类型为 uint 的 <codeph class="+ topic/ph pr-d/codeph ">size</codeph> 属性设置为 50 像素，<codeph class="+ topic/ph pr-d/codeph ">bgColor</codeph> 设置为浅蓝色。 </li><li class="- topic/li ">Sprite 类的 <codeph class="+ topic/ph pr-d/codeph ">buttonMode</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">useHandCursor</codeph> 属性在构造函数中设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。</li><li class="- topic/li ">实例化类型为 <codeph class="+ topic/ph pr-d/codeph ">click</codeph> 的事件侦听器以及关联的订阅者 <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>。订阅者方法创建类型为 Sprite 的局部变量 <codeph class="+ topic/ph pr-d/codeph ">target</codeph> 并为其赋值以确定单击了其中的哪一个框。然后将舞台的焦点分配给 <codeph class="+ topic/ph pr-d/codeph ">target</codeph>。</li><li class="- topic/li ">调用 <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> 方法，它可以通过调用 Graphics 类的 <codeph class="+ topic/ph pr-d/codeph ">beginFill()</codeph>、<codeph class="+ topic/ph pr-d/codeph ">drawRect()</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">endFill()</codeph> 方法以及实例属性来创建一个 50 x 50 像素的正方形。</li></ul></li><li class="- topic/li ">在 for 循环中，调用 <codeph class="+ topic/ph pr-d/codeph ">configureListeners()</codeph> 方法，它将实例化三个事件侦听器/订阅者：
         <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">focusIn</codeph> / <codeph class="+ topic/ph pr-d/codeph ">focusInHandler()</codeph> 在单击显示列表对象（框）的 <codeph class="+ topic/ph pr-d/codeph ">click</codeph> 事件后进行调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">focusOut</codeph> / <codeph class="+ topic/ph pr-d/codeph ">focusOutHandler()</codeph> 在单击另一个框或者焦点离开舞台（例如，通过在 Flash Player 外单击）时进行调度。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> / <codeph class="+ topic/ph pr-d/codeph ">keyFocusChangeHandler()</codeph> 在使用 Tab 键或者向左键或向右键选择显示列表对象时进行调度。<codeph class="+ topic/ph pr-d/codeph ">keyFocusChangeHandler()</codeph> 方法可以捕获向左键和向右键，而调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法可以禁用这两个键。</li></ul></li><li class="- topic/li ">在 <codeph class="+ topic/ph pr-d/codeph ">for</codeph> 循环中，每个正方形都通过 <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> 添加到显示列表中并显示（所有正方形都在同一个区域中）。</li><li class="- topic/li ">然后构造函数调用 <codeph class="+ topic/ph pr-d/codeph ">refreshLayout()</codeph>，以便沿显示屏顶部 (y = 0) 每隔 5 个像素显示一个正方形来分布橙色的正方形。</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">focusIn</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:focusIn" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">focusOut</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:focusOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">keyFocusChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:keyFocusChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">mouseFocusChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FocusEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建一个 Event 对象，其中包含有关焦点事件的特定信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。可能的值包括：<codeph class="+ topic/ph pr-d/codeph ">FocusEvent.FOCUS_IN</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FocusEvent.FOCUS_OUT</codeph>、<codeph class="+ topic/ph pr-d/codeph ">FocusEvent.KEY_FOCUS_CHANGE</codeph> 和 <codeph class="+ topic/ph pr-d/codeph ">FocusEvent.MOUSE_FOCUS_CHANGE</codeph>。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">relatedObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:InteractiveObject</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示受焦点更改影响的补充 InteractiveObject 实例。例如，发生 <codeph class="+ topic/ph pr-d/codeph ">focusIn</codeph> 事件时，<codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 表示已失去焦点的 InteractiveObject。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">shiftKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否已激活 Shift 功能键。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">keyCode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示按下以触发 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件的键的代码。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">direction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">none</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示激活目标交互式对象的方向。对于除 <codeph class="+ topic/ph pr-d/codeph ">focusIn</codeph> 事件以外的所有事件，设置为 <codeph class="+ topic/ph pr-d/codeph ">FocusDirection.NONE</codeph>（默认值）。
    
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">FocusEvent 对象的构造函数。
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建一个 Event 对象，其中包含有关焦点事件的特定信息。将 Event 对象作为参数传递给事件侦听器。
    
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#FocusEvent/FOCUS_IN" class="- topic/link "><linktext class="- topic/linktext ">FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT" class="- topic/link "><linktext class="- topic/linktext ">FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE" class="- topic/link "><linktext class="- topic/linktext ">KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE" class="- topic/link "><linktext class="- topic/linktext ">MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection" class="- topic/link "><linktext class="- topic/linktext ">flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 FocusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 FocusEvent 对象。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 FocusEvent 对象的副本，并设置每个属性的值以匹配原始属性值。
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 FocusEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 FocusEvent 对象的所有属性。
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 FocusEvent 对象的所有属性。字符串的格式如下：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[FocusEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> relatedObject=<i class="+ topic/ph hi-d/i ">value</i> shiftKey=<i class="+ topic/ph hi-d/i ">value</i>] keyCode=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FOCUS_IN</apiName><shortdesc class="- topic/shortdesc ">
	定义 focusIn 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">focusIn</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">focusIn</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph></entry><entry class="- topic/entry ">0；仅应用于 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；仅应用于 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚获得焦点的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">direction</codeph></entry><entry class="- topic/entry ">焦点的分配方向。此属性报告舞台的 <codeph class="+ topic/ph pr-d/codeph ">assignFocus()</codeph> 方法的 <codeph class="+ topic/ph pr-d/codeph ">direction</codeph> 参数。如果通过其他方式更改焦点，则该值将始终为 <codeph class="+ topic/ph pr-d/codeph ">FocusDirection.NONE</codeph>。仅适用于 <codeph class="+ topic/ph pr-d/codeph ">focusIn</codeph> 事件。对于所有其他焦点事件，该值将为 <codeph class="+ topic/ph pr-d/codeph ">FocusDirection.NONE</codeph>。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:focusIn" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FOCUS_OUT</apiName><shortdesc class="- topic/shortdesc ">
	定义 focusOut 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">focusOut</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">focusOut</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph></entry><entry class="- topic/entry ">0；仅应用于 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；仅应用于 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">刚刚失去焦点的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:focusOut" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">KEY_FOCUS_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	定义 keyFocusChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">keyFocusChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法以取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph></entry><entry class="- topic/entry ">被按下以触发 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件的键的键控代码值。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry ">如果 Shift 功能键处于激活状态，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">当前具有焦点的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:keyFocusChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MOUSE_FOCUS_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
	定义 mouseFocusChange 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">mouseFocusChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	定义 <codeph class="+ topic/ph pr-d/codeph ">mouseFocusChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph>；调用 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法以取消默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">keyCode</codeph></entry><entry class="- topic/entry ">0；仅应用于 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph></entry><entry class="- topic/entry ">受焦点更改影响的补充 InteractiveObject 实例。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">shiftKey</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；仅应用于 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">当前具有焦点的 InteractiveObject 实例。<codeph class="+ topic/ph pr-d/codeph ">target</codeph> 不一定是显示列表中注册此事件侦听器的对象。请使用 <codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph> 属性来访问显示列表中当前正在处理此事件的对象。
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">direction</apiName><shortdesc class="- topic/shortdesc ">
	指定 focusIn 事件的焦点方向。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指定 <codeph class="+ topic/ph pr-d/codeph ">focusIn</codeph> 事件的焦点方向。
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#FocusDirection" class="- topic/link "><linktext class="- topic/linktext ">flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isRelatedObjectInaccessible</apiName><shortdesc class="- topic/shortdesc ">
	 如果为 true，则 relatedObject 属性是出于与安全沙箱相关的原因而设置为 null 的。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 如果为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，则 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 属性是出于与安全沙箱相关的原因而设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph> 的。如果 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 的标称值是对其他沙箱中的 DisplayObject 的引用，则 <codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 将设置为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>，除非具有双向跨越此沙箱边界的权限。通过以下方式确立权限：从 SWF 文件调用 <codeph class="+ topic/ph pr-d/codeph ">Security.allowDomain()</codeph>；或者通过从图像文件的服务器提供策略文件，然后在加载图像时设置 <codeph class="+ topic/ph pr-d/codeph ">LoaderContext.checkPolicyFile</codeph> 属性。
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#FocusEvent/relatedObject" class="- topic/link "><linktext class="- topic/linktext ">FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/allowDomain()" class="- topic/link "><linktext class="- topic/linktext ">Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">keyCode</apiName><shortdesc class="- topic/shortdesc ">
	被按下以触发 keyFocusChange 事件的键的键控代码值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	被按下以触发 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 事件的键的键控代码值。
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">relatedObject</apiName><shortdesc class="- topic/shortdesc ">
	对补充 InteractiveObject 实例的引用，焦点变化会对此实例造成影响。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	对补充 InteractiveObject 实例的引用，焦点变化会对此实例造成影响。例如，发生 <codeph class="+ topic/ph pr-d/codeph ">focusOut</codeph> 事件时，<codeph class="+ topic/ph pr-d/codeph ">relatedObject</codeph> 表示已获得焦点的 InteractiveObject 实例。
	<p class="- topic/p ">在以下两种情况下，此属性的值可以为 <codeph class="+ topic/ph pr-d/codeph ">null</codeph>：不存在任何相关对象；存在相关对象，但该对象位于您无法访问的安全沙箱中。使用 <codeph class="+ topic/ph pr-d/codeph ">isRelatedObjectInaccessible()</codeph> 属性可确定上述哪一个原因适用。</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible" class="- topic/link "><linktext class="- topic/linktext ">FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shiftKey</apiName><shortdesc class="- topic/shortdesc ">
	指出是否激活了 Shift 功能键，若激活则值为 true。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	指出是否激活了 Shift 功能键，若激活则值为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>。否则，值为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。仅当 FocusEvent 的类型为 <codeph class="+ topic/ph pr-d/codeph ">keyFocusChange</codeph> 时，才使用此属性。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:GesturePhase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">GesturePhase</apiName><shortdesc class="- topic/shortdesc ">
	GesturePhase 类是常量值的枚举类，与 GestureEvent、PressAndTapGestureEvent 类和 TransformGestureEvent 类配合使用。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	GesturePhase 类是常量值的枚举类，与 GestureEvent、PressAndTapGestureEvent 类和 TransformGestureEvent 类配合使用。使用这些值跟踪触摸手势（例如在启用触摸的屏幕上移动多个手指）的开始、进展和结束，以使应用程序可以响应用户接触的各个阶段。有些手势（滑动和二指点击手势）不包含多个阶段，并将事件对象 <codeph class="+ topic/ph pr-d/codeph ">phase</codeph> 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">all</codeph>。
	
	
	</apiDesc><example conref="examples\TransformGestureEventExample.as" class="- topic/example "> 以下示例显示针对 <codeph class="+ topic/ph pr-d/codeph ">GESTURE_ROTATE</codeph> 事件的事件处理。当用户在启用触摸的设备上执行旋转手势时，mySprite 旋转，myTextField 填充为当前阶段。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
Multitouch.inputMode = MultitouchInputMode.GESTURE;

var mySprite = new Sprite();
mySprite.addEventListener(TransformGestureEvent.GESTURE_ROTATE , onRotate );
mySprite.graphics.beginFill(0x336699);
mySprite.graphics.drawRect(0, 0, 100, 80);
var myTextField = new TextField();
myTextField.y = 200;
addChild(mySprite);
addChild(myTextField);

function onRotate(evt:TransformGestureEvent):void {

    evt.target.rotation -= 45;

    if (evt.phase==GesturePhase.BEGIN) {
        myTextField.text = "Begin";
    }
    if (evt.phase==GesturePhase.UPDATE) {
        myTextField.text = "Update";
    }
    if (evt.phase==GesturePhase.END) {
        myTextField.text = "End";
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link></related-links><apiValue id="flash.events:GesturePhase:ALL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ALL</apiName><shortdesc class="- topic/shortdesc ">
	包含简单手势的所有阶段的单个值，如二指点击或滑动。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">all</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	包含简单手势的所有阶段的单个值，如二指点击或滑动。对于将事件对象 <codeph class="+ topic/ph pr-d/codeph ">phase</codeph> 属性设置为 <codeph class="+ topic/ph pr-d/codeph ">all</codeph> 的手势（滑动和二指点击手势），调度此事件后，<codeph class="+ topic/ph pr-d/codeph ">phase</codeph> 值始终为 <codeph class="+ topic/ph pr-d/codeph ">all</codeph>。 
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:GesturePhase:BEGIN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BEGIN</apiName><shortdesc class="- topic/shortdesc ">
	新手势的开始（例如使手指触摸到启用触摸的屏幕）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">begin</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	新手势的开始（例如使手指触摸到启用触摸的屏幕）。
	
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:GesturePhase:END" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">END</apiName><shortdesc class="- topic/shortdesc ">
	手势的完成（例如抬起手指离开启用触摸的屏幕）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">end</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	手势的完成（例如抬起手指离开启用触摸的屏幕）。 
	
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:GesturePhase:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	手势的进展（例如在启用触摸的屏幕上移动手指）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	手势的进展（例如在启用触摸的屏幕上移动手指）。
	
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.events.xml#GestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.GestureEvent</linktext></link><link href="flash.events.xml#TransformGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.TransformGestureEvent</linktext></link><link href="flash.events.xml#PressAndTapGestureEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.PressAndTapGestureEvent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:BrowserInvokeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">BrowserInvokeEvent</apiName><shortdesc class="- topic/shortdesc ">
	 当由于浏览器中的 SWF 文件而使用浏览器调用功能调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将调度 browserInvoke 事件。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">当通过 Web 浏览器调用 AIR 应用程序时由 NativeApplication 对象调度。
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 当由于浏览器中的 SWF 文件而使用浏览器调用功能调用 AIR 应用程序时，该应用程序的 NativeApplication 对象将调度 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。当用户在浏览器中实例化无缝安装功能并且浏览器中的 SWF 文件将数组传递给 air.swf 文件的 <codeph class="+ topic/ph pr-d/codeph ">launchApplication()</codeph> 方法的 <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> 参数时，NativeApplication 对象还将调度 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。（有关详细信息，请参阅 AIR 开发人员指南中的“Distributing, installing and running AIR applications”（分发、安装和运行 AIR 应用程序）。）
	 
	 <p class="- topic/p ">只有当应用程序在应用程序描述符文件中指定如下内容时才允许浏览器调用：</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 <p class="- topic/p ">如果应用程序没有运行，则在从浏览器中启动时，NativeApplication 对象将调度 InvokeEvent 事件和 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。否则，如果应用程序<i class="+ topic/ph hi-d/i ">已经在</i>运行，则在从浏览器启动时，NativeApplication 对象将仅调度 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。 </p>
	 
	 <p class="- topic/p "> 如果由于从浏览器无缝安装（用户选择在安装时启动）而启动应用程序，则只有在传递参数（通过浏览器中的 SWF 文件将数组传递给 air.swf 文件的 <codeph class="+ topic/ph pr-d/codeph ">installApplication()</codeph> 方法的 <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph> 参数）时，NativeApplication 对象才调度 BrowserInvoke 事件。有关详细信息，请参阅 AIR 开发人员指南中的“Distributing, installing, and running AIR applications”（分发、安装和运行 AIR 应用程序）。</p>
	 
	 <p class="- topic/p ">和 <codeph class="+ topic/ph pr-d/codeph ">invokeEvent</codeph> 事件一样，<codeph class="+ topic/ph pr-d/codeph ">browserInvokeEvent</codeph> 事件由 NativeApplication 对象 (<codeph class="+ topic/ph pr-d/codeph ">NativeApplication.nativeApplication</codeph>) 调度。要接收 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件，请调用 NativeApplication 对象的 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> 方法。当某个事件侦听器针对 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件进行注册时，它还将接收在注册前发生的所有 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。在对 <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> 的调用返回后调度这些事件，但并不一定在注册后可能接收到的其他 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件之前。这样，您可以处理在初始化代码执行之前（如从浏览器首次调用应用程序时）已发生的 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。请记住，如果在执行后期（在应用程序初始化之后）添加一个事件侦听器，它仍然会接收到自应用程序启动时起发生的所有 <codeph class="+ topic/ph pr-d/codeph ">browserInvoke</codeph> 事件。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#InvokeEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">invoke</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">BrowserInvokeEvent</apiName><shortdesc class="- topic/shortdesc ">
	 BrowserInvokeEvent 类的构造函数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的类型，可以作为 <codeph class="+ topic/ph pr-d/codeph ">Event.type</codeph> 访问。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对于 BrowserInvokeEvent 对象设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">对于 BrowserInvokeEvent 对象设置为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">要传递给应用程序的参数（字符串）数组。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sandboxType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">浏览器中的内容的沙箱类型。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">securityDomain</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">浏览器中的内容的安全域。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">isHTTPS</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">浏览器中的内容是否使用 HTTPS URL 架构。
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">isUserEvent</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">浏览器调用是否是用户事件的结果。
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 BrowserInvokeEvent 类的构造函数。通常，开发人员不直接调用 <codeph class="+ topic/ph pr-d/codeph ">BrowserInvokeEvent()</codeph> 构造函数。只有 运行时才应创建 BrowserInvokeEvent 对象。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
		 创建此事件的新副本。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">事件的副本。
		 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 创建此事件的新副本。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BROWSER_INVOKE</apiName><shortdesc class="- topic/shortdesc ">
		 BrowserInvokeEvent.BROWSER_INVOKE 常量定义 BrowserInvokeEvent 对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">browserInvoke</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 <codeph class="+ topic/ph pr-d/codeph ">BrowserInvokeEvent.BROWSER_INVOKE</codeph> 常量定义 BrowserInvokeEvent 对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
		 
		 <p class="- topic/p ">BrowserInvokeEvent 对象具有以下属性：</p>
		 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">arguments</codeph></entry><entry class="- topic/entry ">在此调用过程中传递的字符串参数的数组。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">sandBoxType</codeph></entry><entry class="- topic/entry ">一个字符串，表示浏览器中的内容的沙箱类型（<codeph class="+ topic/ph pr-d/codeph ">Security.APPLICATION</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_TRUSTED</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_FILE</codeph>、<codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_LOCAL_WITH_NETWORK</codeph> 或 <codeph class="+ topic/ph pr-d/codeph ">Security.REMOTE</codeph>）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">securityDomain</codeph></entry><entry class="- topic/entry ">一个字符串，表示浏览器中的内容的安全域（如<codeph class="+ topic/ph pr-d/codeph ">“www.example.com”</codeph>）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isHTTPS</codeph></entry><entry class="- topic/entry ">浏览器内容是否使用 HTTPS URL 架构，如果是，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isUserEvent</codeph></entry><entry class="- topic/entry ">浏览器调用是否因用户事件而导致（在 AIR 1.0 中始终为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>）。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry ">否。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理此 InvokeEvent 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">始终是 NativeApplication 对象。 
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.desktop.xml#NativeApplication" class="- topic/link "><linktext class="- topic/linktext ">flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">arguments</apiName><shortdesc class="- topic/shortdesc ">
		 要传递给应用程序的参数（字符串）数组。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 要传递给应用程序的参数（字符串）数组。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isHTTPS</apiName><shortdesc class="- topic/shortdesc ">
		 浏览器中的内容是否使用 HTTPS URL 架构，如果是，则为 true，否则为 false。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 浏览器中的内容是否使用 HTTPS URL 架构，如果是，则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，否则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isUserEvent</apiName><shortdesc class="- topic/shortdesc ">
		 浏览器调用是否生成用户事件（如鼠标单击）。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 浏览器调用是否生成用户事件（如鼠标单击）。在 AIR 1.0 中，它始终设置为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>；AIR 需要用户事件以启动对浏览器调用功能的调用。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sandboxType</apiName><shortdesc class="- topic/shortdesc ">
		 浏览器中的内容的沙箱类型。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 浏览器中的内容的沙箱类型。它可以设置为以下值之一：
		 
		 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.APPLICATION</codeph> — 内容位于应用程序安全沙箱中。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_TRUSTED</codeph> -- 内容位于受信任的本地安全沙箱中。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_FILE</codeph> — 内容位于只能与本地文件系统内容交互的安全沙箱中。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.LOCAL_WITH_NETWORK</codeph> — 内容位于只能与远程内容交互的安全沙箱中。</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Security.REMOTE</codeph> — 内容位于远程（网络）域中</li></ul>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Security/sandboxType" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">securityDomain</apiName><shortdesc class="- topic/shortdesc ">
		 浏览器中的内容的安全域，如“www.adobe.com”或“www.example.org”。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 浏览器中的内容的安全域，如<codeph class="+ topic/ph pr-d/codeph ">“www.adobe.com”</codeph>或<codeph class="+ topic/ph pr-d/codeph ">“www.example.org”</codeph>。仅对于远程安全沙箱中的内容（来自网络域的内容）设置此属性，而不对位于本地或应用程序安全沙箱中的内容设置此属性。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:OutputProgressEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">OutputProgressEvent</apiName><shortdesc class="- topic/shortdesc ">
 在执行未处理的异步文件写入操作时，FileStream 对象将调度 OutputProgressEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">输出进度事件（用于异步文件写入操作）的事件对象。
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 在执行未处理的异步文件写入操作时，FileStream 对象将调度 OutputProgressEvent 对象。只有一种类型的输出进度事件：<codeph class="+ topic/ph pr-d/codeph ">OutputProgressEvent.OUTPUT_PROGRESS</codeph>。
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">outputProgress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">OutputProgressEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建一个 Event 对象，其中包含有关输出进度事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。只有一种类型的 error 事件：<codeph class="+ topic/ph pr-d/codeph ">OutputProgressEvent.OUTPUT_PROGRESS</codeph>。
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 确定 Event 对象是否参与事件流的冒泡阶段。 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytesPending</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">尚未写入的字节数。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytesTotal</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">已写入的总字节数或未处理的总字节数。
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">OutputProgressEvent 对象的构造函数。
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建一个 Event 对象，其中包含有关输出进度事件的信息。将 Event 对象作为参数传递给事件侦听器。
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 OutputProgressEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 OutputProgressEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 OutputProgressEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 OutputProgressEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 OutputProgressEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 OutputProgressEvent 对象的所有属性。字符串的格式如下：
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[OutputProgressEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> eventPhase=<i class="+ topic/ph hi-d/i ">value</i> bytesPending=<i class="+ topic/ph hi-d/i ">value</i> bytesTotal=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">OUTPUT_PROGRESS</apiName><shortdesc class="- topic/shortdesc ">
    定义 outputProgress 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">outputProgress</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    定义 <codeph class="+ topic/ph pr-d/codeph ">outputProgress</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。
    
    <p class="- topic/p ">此事件具有以下属性：</p>
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesPending</codeph></entry><entry class="- topic/entry ">在侦听器处理该事件时要写入的剩余字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph></entry><entry class="- topic/entry ">写入进程成功时最终将写入的总字节数。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">报告进度的 FileStream 对象。 </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesPending</apiName><shortdesc class="- topic/shortdesc ">
    在侦听器处理事件时尚未写入的字节数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    在侦听器处理事件时尚未写入的字节数。
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
    到目前为止已写入的总字节数加上要写入的未处理字节数。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    到目前为止已写入的总字节数加上要写入的未处理字节数。
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:StageOrientationEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StageOrientationEvent</apiName><shortdesc class="- topic/shortdesc ">
 当舞台的方向更改时，Stage 对象将调度 StageOrientationEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 当舞台的方向更改时，Stage 对象将调度 StageOrientationEvent 对象。当设备旋转时，当用户打开滑出式键盘，或者当调用 Stage 的 <codeph class="+ topic/ph pr-d/codeph ">setAspectRatio()</codeph> 方法时，会发生这种情况。
 
 <p class="- topic/p ">有两种类型的 StageOrientationEvent 事件：屏幕更改为新方向之前调度 <codeph class="+ topic/ph pr-d/codeph ">orientationChanging</codeph> (<codeph class="+ topic/ph pr-d/codeph ">StageOrientationEvent.ORIENTATION_CHANGING</codeph>)。调用为 orientationChanging 调度的 event 对象的 <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph> 方法可防止舞台更改方向。屏幕更改为新方向之后调度 <codeph class="+ topic/ph pr-d/codeph ">orientationChange</codeph> (<codeph class="+ topic/ph pr-d/codeph ">StageOrientationEvent.ORIENTATION_CHANGE</codeph>)。</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">注意</b>：如果 <codeph class="+ topic/ph pr-d/codeph ">autoOrients</codeph> 属性为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>，则在设备旋转时舞台方向不会更改。因此，仅在 <codeph class="+ topic/ph pr-d/codeph ">autoOrients</codeph> 为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph> 时，才会为设备方向调度 StageOrientationEvents。</p>
 
 </apiDesc><example conref="examples\Stage.orientationChangeEvent.1.as" class="- topic/example "/></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/deviceOrientation" class="- topic/link "><linktext class="- topic/linktext ">Stage.deviceOrientation</linktext></link><link href="flash.display.xml#Stage/autoOrients" class="- topic/link "><linktext class="- topic/linktext ">Stage.autoOrients</linktext></link></related-links><adobeApiEvent id="flash.events:StageOrientationEvent:ORIENTATION_CHANGE_orientationChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">orientationChange</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:StageOrientationEvent:ORIENTATION_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StageOrientationEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage</linktext></link><link href="flash.display.xml#Stage/deviceOrientation" class="- topic/link "><linktext class="- topic/linktext ">deviceOrientation</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StageOrientationEvent:StageOrientationEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StageOrientationEvent</apiName><shortdesc class="- topic/shortdesc ">
    创建包含与舞台方向事件相关的特定信息的 StageOrientationEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型：<codeph class="+ topic/ph pr-d/codeph ">StageOrientationEvent.ORIENTATION_CHANGE</codeph>
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 表示 Event 对象是否参与事件流的冒泡阶段。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示是否可以取消 Event 对象。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">beforeOrientation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示更改之前的方向。
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">afterOrientation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示更改之后的方向。 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建包含与舞台方向事件相关的特定信息的 StageOrientationEvent 对象。将 Event 对象作为参数传递给事件侦听器。通常不使用构造函数创建此事件。相反，当这些事件发生时，可以在 Stage 对象中添加事件侦听器来检测它们。 
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:StageOrientationEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    创建 StageOrientationEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值相匹配的新 StageOrientationEvent 对象。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    创建 StageOrientationEvent 对象的副本，并将每个属性的值设置为与原始属性值相匹配。
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StageOrientationEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    返回一个字符串，其中包含 StageOrientationEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 StageOrientationEvent 对象的所有属性。
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    返回一个字符串，其中包含 StageOrientationEvent 对象的所有属性。该字符串具有以下格式：
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[StageOrientationEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> beforeDisplayState=<i class="+ topic/ph hi-d/i ">value</i> afterDisplayState=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StageOrientationEvent:ORIENTATION_CHANGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ORIENTATION_CHANGE</apiName><shortdesc class="- topic/shortdesc ">
    ORIENTATION_CHANGE 常量定义 orientationChange 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">orientationChange</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">ORIENTATION_CHANGE</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">orientationChange</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。此事件具有以下属性：
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterOrientation</codeph></entry><entry class="- topic/entry ">新的舞台方向。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeOrientation</codeph></entry><entry class="- topic/entry ">舞台的旧方向。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">调度方向更改的 Stage 对象。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；现在已经太迟，不能取消更改。</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage</linktext></link><link href="flash.display.xml#Stage/deviceOrientation" class="- topic/link "><linktext class="- topic/linktext ">deviceOrientation</linktext></link></related-links></apiValue><apiValue id="flash.events:StageOrientationEvent:ORIENTATION_CHANGING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ORIENTATION_CHANGING</apiName><shortdesc class="- topic/shortdesc ">
    ORIENTATION_CHANGING 常量定义 orientationChanging 事件对象的 type 属性的值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">orientationChanging</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    <codeph class="+ topic/ph pr-d/codeph ">ORIENTATION_CHANGING</codeph> 常量定义 <codeph class="+ topic/ph pr-d/codeph ">orientationChanging</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性的值。 
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">重要说明：</b>在 Android 设备上不调度 ORIENTATION_CHANGING 事件。</p>
    
    此事件具有以下属性：
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">afterOrientation</codeph></entry><entry class="- topic/entry ">新的舞台方向。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">beforeOrientation</codeph></entry><entry class="- topic/entry ">舞台的旧方向。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">调度方向更改的 Stage 对象。 
    </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">表示当前正在使用事件侦听器处理该 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row></tbody></tgroup></adobetable>
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:StageOrientationEvent:afterOrientation:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">afterOrientation</apiName><shortdesc class="- topic/shortdesc ">
             改变后的舞台方向。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             改变后的舞台方向。
               
             
             </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:StageOrientationEvent:beforeOrientation:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">beforeOrientation</apiName><shortdesc class="- topic/shortdesc ">
             改变前的舞台方向。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             改变前的舞台方向。  
             
             </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.events:ActivityEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ActivityEvent</apiName><shortdesc class="- topic/shortdesc ">
每次摄像头或麦克风报告其变为活动或非活动状态时，Camera 或 Microphone 对象即会调度 ActivityEvent 对象。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ActivityEvent 事件的事件对象。
</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
每次摄像头或麦克风报告其变为活动或非活动状态时，Camera 或 Microphone 对象即会调度 ActivityEvent 对象。只有一种类型的活动事件：<codeph class="+ topic/ph pr-d/codeph ">ActivityEvent.ACTIVITY</codeph>。

</apiDesc><example conref="examples\ActivityEventExample.as" class="- topic/example "> 以下示例通过将名为 <codeph class="+ topic/ph pr-d/codeph ">activityHandler()</codeph> 的事件侦听器方法附加到麦克风并且在麦克风每次产生 <codeph class="+ topic/ph pr-d/codeph ">activity</codeph> 事件时生成文本信息，演示了 ActivityEvent 类的用法。
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ActivityEvent/ACTIVITY" class="- topic/link "><linktext class="- topic/linktext ">ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activity</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiDefinedEvent "/></adobeApiEventDef></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/event:activity" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ActivityEvent</apiName><shortdesc class="- topic/shortdesc ">
	创建一个 Event 对象，其中包含有关活动事件的信息。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 事件的类型。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性访问此信息。只有一种类型的活动事件：<codeph class="+ topic/ph pr-d/codeph ">ActivityEvent.ACTIVITY</codeph>。
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bubbles</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph> 属性访问此信息。  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">cancelable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph> 属性访问此信息。 
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">activating</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">表示设备已激活 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是被取消激活 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。事件侦听器可以通过 <codeph class="+ topic/ph pr-d/codeph ">activating</codeph> 属性访问此信息。
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">ActivityEvent 对象的构造函数。
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建一个 Event 对象，其中包含有关活动事件的信息。将 Event 对象作为参数传递给事件侦听器。
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.events.xml#ActivityEvent/ACTIVITY" class="- topic/link "><linktext class="- topic/linktext ">ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	创建 ActivityEvent 对象的副本，并设置每个属性的值以匹配原始属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">其属性值与原始属性值匹配的新 ActivityEvent 对象。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	创建 ActivityEvent 对象的副本，并设置每个属性的值以匹配原始属性值。 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	返回一个字符串，其中包含 ActivityEvent 对象的所有属性。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">一个字符串，其中包含 ActivityEvent 对象的所有属性。
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	返回一个字符串，其中包含 ActivityEvent 对象的所有属性。使用以下格式：
	<p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">[ActivityEvent type=<i class="+ topic/ph hi-d/i ">value</i> bubbles=<i class="+ topic/ph hi-d/i ">value</i> cancelable=<i class="+ topic/ph hi-d/i ">value</i> activating=<i class="+ topic/ph hi-d/i ">value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ACTIVITY</apiName><shortdesc class="- topic/shortdesc ">
	ActivityEvent.ACTIVITY 常量定义 activity 事件对象的 type 属性值。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">activity</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	<codeph class="+ topic/ph pr-d/codeph ">ActivityEvent.ACTIVITY</codeph> 常数定义 <codeph class="+ topic/ph pr-d/codeph ">activity</codeph> 事件对象的 <codeph class="+ topic/ph pr-d/codeph ">type</codeph> 属性值。 
	<p class="- topic/p ">此事件具有以下属性：</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">属性</entry><entry class="- topic/entry ">值</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">activating</codeph></entry><entry class="- topic/entry ">如果设备已激活则为 <codeph class="+ topic/ph pr-d/codeph ">true</codeph>，如果被取消激活则为 <codeph class="+ topic/ph pr-d/codeph ">false</codeph>。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">bubbles</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">cancelable</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph>；没有要取消的默认行为。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">currentTarget</codeph></entry><entry class="- topic/entry ">当前正在使用某个事件侦听器处理 Event 对象的对象。</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">target</codeph></entry><entry class="- topic/entry ">开始或结束会话的对象，如 Camera 或 Microphone 对象。</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/event:activity" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">activating</apiName><shortdesc class="- topic/shortdesc ">
	表示设备是已激活 (true) 还是被取消激活 (false)。</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	表示设备已激活 (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) 还是被取消激活 (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>)。
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>