<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.media" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.media</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.media:ID3Info" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ID3Info</apiName><shortdesc class="- topic/shortdesc ">
	 Die ID3Info-Klasse enthält Eigenschaften für die ID3-Metadaten.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die ID3Info-Klasse enthält Eigenschaften für die ID3-Metadaten. Durch Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">id3</codeph>-Eigenschaft der Soundklasse (beispielsweise <codeph class="+ topic/ph pr-d/codeph ">mySound.id3.TIME</codeph>) können Sie weitere Metadaten für MP3-Dateien abrufen. Weitere Informationen finden Sie im Abschnitt zu <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph> und in den Definitionen zu ID3-Tags unter <xref href="http://www.id3.org" class="- topic/xref ">http://www.id3.org</xref>.
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/id3" class="- topic/link "><linktext class="- topic/linktext ">Sound.id3</linktext></link></related-links><apiValue id="flash.media:ID3Info:album" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">album</apiName><shortdesc class="- topic/shortdesc ">
		 Der Name des Albums. Entspricht dem ID3 2.0-Tag „TALB“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Der Name des Albums. Entspricht dem ID3 2.0-Tag „TALB“.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:artist" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">artist</apiName><shortdesc class="- topic/shortdesc ">
		 Der Name des Interpreten. Entspricht dem ID3 2.0-Tag „TPE1“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Der Name des Interpreten. Entspricht dem ID3 2.0-Tag „TPE1“.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:comment" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">comment</apiName><shortdesc class="- topic/shortdesc ">
		 Eine Anmerkung zur Aufnahme. Entspricht dem ID3 2.0-Tag „COMM“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Eine Anmerkung zur Aufnahme. Entspricht dem ID3 2.0-Tag „COMM“.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:genre" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">genre</apiName><shortdesc class="- topic/shortdesc ">
		 Das Genre des Songs. Entspricht dem ID3 2.0-Tag „TCON“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Das Genre des Songs. Entspricht dem ID3 2.0-Tag „TCON“.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:songName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">songName</apiName><shortdesc class="- topic/shortdesc ">
		 Der Name des Songs. Entspricht dem ID3 2.0-Tag „TIT2“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Der Name des Songs. Entspricht dem ID3 2.0-Tag „TIT2“.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:track" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">track</apiName><shortdesc class="- topic/shortdesc ">
		 Die Titelnummer. Entspricht dem ID3 2.0-Tag „TRCK“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Die Titelnummer. Entspricht dem ID3 2.0-Tag „TRCK“.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:ID3Info:year" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">year</apiName><shortdesc class="- topic/shortdesc ">
		 Das Aufnahmejahr. Entspricht dem ID3 2.0-Tag „TYER“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="AS3" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Das Aufnahmejahr. Entspricht dem ID3 2.0-Tag „TYER“.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:MediaType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">MediaType</apiName><shortdesc class="- topic/shortdesc ">
 Die MediaType-Klasse zählt die allgemeinen Medientypen auf, die von einer Kamera zurückgegeben werden können.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die MediaType-Klasse zählt die allgemeinen Medientypen auf, die von einer Kamera zurückgegeben werden können.
 
 <p class="- topic/p ">Verwenden Sie die in dieser Klasse definierten Konstanten als Eingabe für die <codeph class="+ topic/ph pr-d/codeph ">launch()</codeph>-Methode der CameraUI-Klasse. MediaType-Werte werden auch in der <codeph class="+ topic/ph pr-d/codeph ">mediaType</codeph>-Eigenschaft der MediaPromise-Klasse verwendet.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#CameraUI/launch()" class="- topic/link "><linktext class="- topic/linktext ">CameraUI.launch()</linktext></link><link href="" invalidHref="flash.media.MediaPromise.mediaType.xml" class="- topic/link "><linktext class="- topic/linktext ">MediaPromise.mediaType</linktext></link></related-links><apiValue id="flash.media:MediaType:IMAGE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IMAGE</apiName><shortdesc class="- topic/shortdesc ">
		Ein einzelnes Bild.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">image</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Ein einzelnes Bild.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MediaType:VIDEO" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">VIDEO</apiName><shortdesc class="- topic/shortdesc ">
		Ein Video.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">video</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Ein Video.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiOperation id="globalOperation:flash.media:scanHardware" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">scanHardware</apiName><shortdesc class="- topic/shortdesc ">
	 Erzwingt einen Neuscan der Mikrofone und Kameras auf dem System.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erzwingt einen Neuscan der Mikrofone und Kameras auf dem System.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiClassifier languages="" id="flash.media:Camera" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Camera</apiName><shortdesc class="- topic/shortdesc ">
 Mit der Camera-Klasse können Sie Video von der Kamera des Clients erfassen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Mit der Camera-Klasse können Sie Video von der Kamera des Clients erfassen. Mit der Videoklasse können Sie das Video lokal überwachen. Mit der NetConnection- und der NetStream-Klasse können Sie das Video an Flash Media Server übertragen. Flash Media Server kann den Videostream an andere Server senden und an andere Clients, auf denen Flash Player ausgeführt wird, übertragen.
 
 <p class="- topic/p ">Eine Camera-Instanz erfasst Video im Querformat. Bei Geräten, die die Bildschirmausrichtung ändern können, zum Beispiel Mobiltelefone, zeigt ein an die Kamera angehängtes Video-Objekt Video im Hochformat nur in einer querformatigen Ausrichtung an. Deshalb sollten mobile Anwendungen für die Videoanzeige das Querformat verwenden und keine automatische Drehung vornehmen.</p>
 
 <p class="- topic/p ">Ab AIR 2.6 ist der Autofokus bei mobilen Geräten mit Autofokuskamera automatisch aktiviert. Falls die Kamera keinen kontinuierlichen Autofokus unterstützt (was auf die Kameras vieler mobiler Geräte zutrifft), fokussiert die Kamera, wenn das Camera-Objekt an einen Videostream angehängt wird und immer, wenn die <codeph class="+ topic/ph pr-d/codeph ">setMode()</codeph>-Methode aufgerufen wird. Bei Desktopcomputern ist das Autofokusverhalten vom Kameratreiber und den Kameraeinstellungen abhängig.</p>
 
 <p class="- topic/p ">In einer AIR-Anwendung unter Android oder iOS erfasst die Kamera kein Video, wenn die AIR-Anwendung nicht aktiv und im Vordergrund ist. Außerdem können Streamingverbindungen unterbrochen werden, wenn sich die Anwendung im Hintergrund befindet. Unter iOS kann das Video von der Kamera nicht angezeigt werden, wenn eine Anwendung den GPU-Renderingmodus verwendet. Das Video von der Kamera kann aber trotzdem an einen Server gestreamt werden.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Unterstützung für mobile Browser:</b> Diese Klasse wird in mobilen Browsern nicht unterstützt.</p>
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Diese Funktion wird unter Desktopbetriebssystemen unterstützt, aber nicht auf allen mobilen Geräten. Bei Geräten mit AIR für TV wird sie nicht unterstützt. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.</p>
 
 <p class="- topic/p ">Mit der <codeph class="+ topic/ph pr-d/codeph ">Camera.isSupported</codeph>-Eigenschaft können Sie testen, ob zur Laufzeit Unterstützung gegeben ist. Beachten Sie, dass bei Geräten mit AIR für TV <codeph class="+ topic/ph pr-d/codeph ">Camera.isSupported</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> hat, <codeph class="+ topic/ph pr-d/codeph ">Camera.getCamera()</codeph> jedoch immer <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurückgibt.</p>
 
 <p class="- topic/p ">
 Informationen zum Erfassen von Audio finden Sie in der Beschreibung der Microphone-Klasse.
 </p>
 
 <p class="- topic/p ">
 <b class="+ topic/ph hi-d/b ">Wichtig: </b>In Flash Player wird ein Zugriffsschutz-Dialogfeld angezeigt, in dem der Benutzer den Zugriff auf die Kamera zulassen oder verweigern kann. Achten Sie darauf, dass die Größe des Anwendungsfensters mindestens 215 x 138 Pixel beträgt. Dies ist die erforderliche Mindestgröße für die Anzeige des Dialogfelds.
 </p>
 
 <p class="- topic/p ">Zum Erstellen oder Referenzieren eines Camera-Objekts, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">getCamera()</codeph>-Methode.</p>
 
 </apiDesc><example conref="examples\CameraExample.as" class="- topic/example "> Im folgenden Beispiel sehen Sie das von einer Kamera übertragene Bild, nachdem die Sicherheitswarnung bestätigt wurde. Die Bühne wurde so eingerichtet, dass es nicht skaliert werden kann und an der oberen linken Ecke des Player-Fensters ausgerichtet ist. Das Ereignis <codeph class="+ topic/ph pr-d/codeph ">activity</codeph> wird am Anfang und Ende (falls vorhanden) der Sitzung ausgelöst und von der Methode <codeph class="+ topic/ph pr-d/codeph ">activityHandler()</codeph> erfasst, woraufhin Informationen zum Ereignis ausgedruckt werden.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Dieses Beispiel kann nur dann korrekt nachvollzogen werden, wenn eine Kamera mit dem Computer verbunden ist.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.*;
    import flash.media.Camera;
    import flash.media.Video;

    public class CameraExample extends Sprite {
        private var video:Video;
        
        public function CameraExample() {
            stage.scaleMode = StageScaleMode.NO_SCALE;
            stage.align = StageAlign.TOP_LEFT;
            
            var camera:Camera = Camera.getCamera();
            
            if (camera != null) {
                camera.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
                video = new Video(camera.width * 2, camera.height * 2);
                video.attachCamera(camera);
                addChild(video);
            } else {
                trace("You need a camera.");
            }
        }
        
        private function activityHandler(event:ActivityEvent):void {
            trace("activityHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone</linktext></link><link href="http://coenraets.org/blog/2010/07/video-chat-for-android-in-30-lines-of-code/" class="- topic/link "><linktext class="- topic/linktext ">Cristophe Coenraets: Video Chat for Android in 30 Lines of Code</linktext></link><link href="http://www.riagora.com/2010/07/android-air-and-the-camera/" class="- topic/link "><linktext class="- topic/linktext ">Michael Chaize: Android, AIR, and the Camera</linktext></link></related-links><adobeApiEvent id="flash.media:Camera_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Status einer Kamera protokolliert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Status einer Kamera protokolliert wird. Vor dem Zugriff auf eine Kamera zeigt Flash Player ein Datenschutz-Dialogfeld an, in dem Benutzer den Zugriff auf die Kamera zulassen oder verweigern können. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Camera.Muted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf die Kamera verweigert. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Camera.Unmuted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf die Kamera gewährt.  
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">Camera.getCamera()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Camera_flash.events.ActivityEvent.ACTIVITY_activity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activity</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn die Sitzung einer Kamera gestartet oder beendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ActivityEvent.ACTIVITY</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ActivityEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn die Sitzung einer Kamera gestartet oder beendet wird. Rufen Sie <codeph class="+ topic/ph pr-d/codeph ">Camera.setMotionLevel()</codeph> auf, um festzulegen, wie viel Bewegung nötig ist, damit ein <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis mit einem <codeph class="+ topic/ph pr-d/codeph ">activating</codeph>-Wert von <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ausgelöst wird, oder um festzulegen, wie viel Zeit ohne Aktivität vergehen muss, bevor ein <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis mit einem <codeph class="+ topic/ph pr-d/codeph ">activating</codeph>-Wert von <codeph class="+ topic/ph pr-d/codeph ">false</codeph> ausgelöst wird.
 
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.media:Camera:getCamera" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getCamera</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt eine Referenz auf ein Camera-Objekt zum Aufnehmen von Videos zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, constructor, Camera.getCamera, getCamera
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter nicht angegeben ist, gibt diese Methode einen Verweis auf die Standardkamera zurück, oder, wenn diese in einer anderen Kamera verwendet wird, auf die erste verfügbare Kamera. (Wenn mehrere Kameras installiert sind, kann der Benutzer im Flash Player-Bedienfeld für die Kameraeinstellungen die Standardkamera festlegen.) Wenn keine Kameras verfügbar oder installiert sind, gibt diese Methode den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück. 
 	  
 	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Camera</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die abzurufende Kamera an, die in dem von der <codeph class="+ topic/ph pr-d/codeph ">names</codeph>-Eigenschaft zurückgegebenen Array festgelegt ist. In den meisten Anwendungen können Sie die Standardkamera durch Weglassen dieses Parameters abrufen. Um einen Wert für diesen Parameter festzulegen, verwenden Sie die Stringrepräsentation der auf Null basierenden Indexposition innerhalb des Camera.names-Arrays. Wenn Sie zum Beispiel die dritte Kamera im Array angeben möchten, verwenden Sie <codeph class="+ topic/ph pr-d/codeph ">Camera.getCamera("2")</codeph>. 
 	 
 	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt eine Referenz auf ein Camera-Objekt zum Aufnehmen von Videos zurück. Um mit der Videoaufnahme zu beginnen, muss das Camera-Objekt mit einem Videoobjekt verknüpft werden (siehe <codeph class="+ topic/ph pr-d/codeph ">Video.attachCamera() </codeph>). Wenn Sie Video an Flash Media Server übertragen möchten, rufen Sie <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera()</codeph> auf, um das Camera-Objekt mit einem NetStream-Objekt zu verknüpfen.
	 
	 <p class="- topic/p ">Mehrere Aufrufe der <codeph class="+ topic/ph pr-d/codeph ">getCamera()</codeph>-Methode verweisen auf denselben Kameratreiber. Wenn der Code Elemente wie <codeph class="+ topic/ph pr-d/codeph ">firstCam:Camera = getCamera()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">secondCam:Camera = getCamera()</codeph> enthält, verweisen <codeph class="+ topic/ph pr-d/codeph ">firstCam</codeph> und <codeph class="+ topic/ph pr-d/codeph ">secondCam</codeph> somit auf dieselbe Kamera, bei der es sich um die Standardkamera des Benutzers handelt.</p>
	 
	 <p class="- topic/p ">Bei iOS-Geräten, die sowohl über eine nach vorn als auch über eine nach hinten gerichtete Kamera verfügen, können Sie jeweils nur von einer Kamera Video erfassen. Bei Android-Geräten haben Sie nur auf die nach hinten gerichtete Kamera Zugriff. </p>
	 
	 <p class="- topic/p ">Im Allgemeinen muss kein Wert für den <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter übergeben werden. Verwenden Sie einfach <codeph class="+ topic/ph pr-d/codeph ">getCamera()</codeph>, um einen Verweis auf die Standardkamera zurückzugeben. Im Bedienfeld für die Kameraeinstellungen kann der Benutzer eine Standardkamera angeben (Informationen hierzu weiter unten in diesem Abschnitt). </p>
	 
  	 <p class="- topic/p ">Sie können ActionScript nicht verwenden, um die Berechtigungseinstellung „Zulassen“ oder „Verweigern“ für den Kamerazugriff festzulegen, Sie können jedoch das Adobe Flash Player Dialogfeld für die Kameraeinstellungen anzeigen, in dem der Benutzer den Kamerazugriff steuern kann. Wenn eine SWF-Datei mit der <codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph>-Methode versucht, die von der <codeph class="+ topic/ph pr-d/codeph ">getCamera()</codeph>-Methode zurückgegebene Kamera mit einem Video- oder NetStream-Objekt zu verbinden, zeigt Flash Player ein Dialogfeld an, in dem der Benutzer den Zugriff auf die Kamera zulassen oder verweigern kann. (Achten Sie darauf, dass die Größe des Anwendungsfensters mindestens 215 x 138 Pixel beträgt. Dies ist die in Flash Player erforderliche Mindestgröße für die Anzeige des Dialogfelds.) Nachdem der Benutzer im Dialogfeld für die Kameraeinstellungen eine Option ausgewählt hat, wird in Flash Player ein Informationsobjekt im <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignis zurückgegeben, das die Auswahl des Benutzers angibt. Mit <codeph class="+ topic/ph pr-d/codeph ">Camera.muted</codeph> wird angegeben, dass der Benutzer den Zugriff auf eine Kamera verweigert hat. Mit <codeph class="+ topic/ph pr-d/codeph ">Camera.Unmuted</codeph> wird angegeben, dass der Benutzer den Zugriff auf eine Kamera gewährt hat. Über die <codeph class="+ topic/ph pr-d/codeph ">muted</codeph>-Eigenschaft können Sie ohne Bearbeitung des <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignisses feststellen, ob ein Benutzer den Zugriff auf eine Kamera verweigert oder gewährt hat.</p>
  	 
 	 <p class="- topic/p ">In Flash Player kann der Benutzer permanente Zugriffsschutzeinstellungen für eine bestimmte Domäne festlegen, indem er während des Abspielens einer SWF-Datei mit der rechten Maustaste (Windows und Linux) bzw. bei gedrückter Ctrl-Taste (Mac OS) klickt, „Einstellungen“ auswählt, das Dialogfeld „Zugriffsschutz“ öffnet und „Speichern“ auswählt. Wenn ein Benutzer „Speichern“ auswählt, wird er in Flash Player nicht mehr dazu aufgefordert, den Zugriff von SWF-Dateien in der Domäne auf die Kamera zu gewähren oder zu verweigern.</p>
  	 
  	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Die <codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph>-Methode ruft das Dialogfeld zum Zulassen oder Verweigern des Zugriffs auf die Kamera nicht auf, wenn der Benutzer den Zugriff verweigert hat, indem er in den Flash Player-Einstellungen die Einstellung „Speichern“ gewählt hat. In diesem Fall können Sie den Benutzer auffordern, die Einstellung „Zulassen“ oder „Verweigern“ zu ändern, indem Sie mit <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings(SecurityPanel.PRIVACY)</codeph> das Bedienfeld „Zugriffsschutz“ von Flash Player für den Benutzer anzeigen.</p>
 	 
 	 <p class="- topic/p ">Wenn <codeph class="+ topic/ph pr-d/codeph ">getCamera()</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurückgibt, wird die Kamera entweder gerade in einer anderen Anwendung verwendet oder im System sind keine Kameras installiert. Mithilfe der <codeph class="+ topic/ph pr-d/codeph ">names.length</codeph>-Eigenschaft können Sie feststellen, ob Kameras installiert sind. Um das Kameraeinstellungsbedienfeld von Flash Player anzuzeigen, in dem der Benutzer die Kamera wählen kann, die von <codeph class="+ topic/ph pr-d/codeph ">getCamera()</codeph> referenziert werden soll, verwenden Sie <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings(SecurityPanel.CAMERA)</codeph>. </p>
 	 
	 <p class="- topic/p ">Der Suchlauf zum Überprüfen der Hardware auf installierte Kameras kann einige Zeit in Anspruch nehmen. Wenn die Laufzeitumgebung mindestens eine Kamera gefunden hat, wird der Suchlauf für diese Player-Instanz nicht noch einmal durchgeführt. Wenn die Laufzeitumgebung jedoch keine Kameras findet, wird der Suchlauf bei jedem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">getCamera</codeph> durchgeführt. Diese Funktion ist besonders hilfreich, wenn eine Kamera zwar vorhanden, aber deaktiviert ist. Sofern Ihre SWF-Datei eine Schaltfläche „Wiederholen“ besitzt, mit der <codeph class="+ topic/ph pr-d/codeph ">getCamera</codeph> aufgerufen wird, kann Flash Player nach der Kamera suchen, ohne dass die SWF-Datei erneut gestartet werden muss.</p>
 	 
	 </apiDesc><example conref="examples\Camera_getCameraExample.as" class="- topic/example "> Im folgenden Beispiel wird die angeschlossene Kamera zum Erfassen von Videobildern verwendet, nachdem der Benutzer den Zugriff auf die Kamera zugelassen hat. Informationen über den Videostream, zum Beispiel Bilder (Frames) pro Sekunde, werden ebenfalls angezeigt.
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">Camera.getCamera()</codeph>-Methode gibt einen Verweis auf ein Kameraobjekt zurück oder null, falls keine Kamera verfügbar oder installiert ist. Mit der if-Anweisung wird überprüft, ob die Kamera gefunden wurde und ob der Benutzer den Zugriff auf die Kamera zugelassen hat. Wenn der Benutzer den Zugriff verweigert hat, ist die <codeph class="+ topic/ph pr-d/codeph ">muted</codeph>-Eigenschaft mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> belegt.</p> 
 
 <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph>-Methode aufgerufen wird, wird ein Dialogfeld angezeigt und fordert den Benutzer auf, den Flash Player-Zugriff auf die Kamera zuzulassen oder zu verweigern. Hat der Benutzer jedoch den Zugriff verweigert und die Option <codeph class="+ topic/ph pr-d/codeph ">Erinnern</codeph> gewählt, wird das Dialogfeld nicht geöffnet und es wird nichts angezeigt. Um sicherzustellen, dass der Benutzer die Möglichkeit hat, den Zugriff auf die Kamera zuzulassen, weist das Textfeld <codeph class="+ topic/ph pr-d/codeph ">myTextField</codeph> den Benutzer an, auf das Textfeld zu klicken, um die Flash Player-Einstellungen anzuzeigen.</p>
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode ruft die <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph>-Methode auf, die das Bedienfeld <codeph class="+ topic/ph pr-d/codeph ">Zugriffsschutz</codeph> des Dialogfelds „Einstellungen“ anzeigt. Wenn der Benutzer den Zugriff zulässt, wird das <codeph class="+ topic/ph pr-d/codeph ">StatusEvent.STATUS</codeph>-Ereignis ausgelöst und der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft des Ereignisses wird auf <codeph class="+ topic/ph pr-d/codeph ">Camera.Unmuted</codeph> gesetzt. (Die <codeph class="+ topic/ph pr-d/codeph ">mute</codeph>-Eigenschaft des Kameraobjekts ist ebenfalls auf <codeph class="+ topic/ph pr-d/codeph ">false</codeph> gesetzt.)</p>
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">statusHandler()</codeph>-Methode, die hinzugefügt wird, um die Statusänderung der Benutzereinstellung zu überprüfen, ruft die <codeph class="+ topic/ph pr-d/codeph ">connectCamera()</codeph>-Methode auf, wenn der Benutzer den Zugriff zulässt. Die <codeph class="+ topic/ph pr-d/codeph ">connectCamera()</codeph>-Methode instanziiert ein Videoobjekt mit der Breite und Höhe des erfassten Streams. Um das von der Kamera erfasste Video anzuzeigen, wird der Verweis auf den Videostream zum Videoobjekt hinzugefügt und das Videoobjekt wird der Anzeigeliste hinzugefügt.</p>
 
 <p class="- topic/p ">Ein Timerobjekt wird ebenfalls gestartet. Jede Sekunde wird ein Timerereignis eines Timerobjekts ausgelöst und die <codeph class="+ topic/ph pr-d/codeph ">timerHandler()</codeph>-Methode wird aufgerufen. Die <codeph class="+ topic/ph pr-d/codeph ">timerHandler()</codeph>-Methode wird angezeigt und aktualisiert mehrere Eigenschaften des Camera-Objekts. </p> 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> In diesem Beispiel wird nur die <codeph class="+ topic/ph pr-d/codeph ">currentFPS</codeph>-Eigenschaft geändert.</p>    
    
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.media.Camera;
    import flash.media.Video;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.StatusEvent;
    import flash.events.MouseEvent;
    import flash.system.SecurityPanel;
    import flash.system.Security;

    public class Camera_getCameraExample extends Sprite {
        private var myTextField:TextField;
        private var cam:Camera;
        private var t:Timer = new Timer(1000);
        
        public function Camera_getCameraExample() {
            myTextField = new TextField();
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.selectable = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;    
        
            if (Camera.isSupported)
            {
                cam = Camera.getCamera();
                
                 if (!cam) {
                    myTextField.text = "No camera is installed.";
                    
                } else if (cam.muted) {
                    myTextField.text = "To enable the use of the camera,\n"
                                     + "please click on this text field.\n" 
                                     + "When the Flash Player Settings dialog appears,\n"
                                     + "make sure to select the Allow radio button\n" 
                                     + "to grant access to your camera.";
    
                    myTextField.addEventListener(MouseEvent.CLICK, clickHandler);
    
                }else {
                    myTextField.text = "Connecting";
                    connectCamera(); 
                }
       
                addChild(myTextField);
    
                t.addEventListener(TimerEvent.TIMER, timerHandler);
            }else {
                myTextField.text = "The Camera class is not supported on this device.";
            }
        }

        private function clickHandler(e:MouseEvent):void {
            Security.showSettings(SecurityPanel.PRIVACY);

            cam.addEventListener(StatusEvent.STATUS, statusHandler);

            myTextField.removeEventListener(MouseEvent.CLICK, clickHandler);
        }

        private function statusHandler(event:StatusEvent):void {

            if (event.code == "Camera.Unmuted") {
                connectCamera(); 
                cam.removeEventListener(StatusEvent.STATUS, statusHandler);
            }
        }

        private function connectCamera():void {
                var vid:Video = new Video(cam.width, cam.height);
                vid.x = 10;
                vid.y = 10;
                vid.attachCamera(cam);
                addChild(vid);    

                t.start();
        }

        private function timerHandler(event:TimerEvent):void {
            myTextField.y = cam.height + 20;
            myTextField.text = "";
            myTextField.appendText("bandwidth: " + cam.bandwidth + "\n");
            myTextField.appendText("currentFPS: " + Math.round(cam.currentFPS) + "\n");
            myTextField.appendText("fps: " + cam.fps + "\n");
            myTextField.appendText("keyFrameInterval: " + cam.keyFrameInterval + "\n");
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/index" class="- topic/link "><linktext class="- topic/linktext ">index</linktext></link><link href="flash.media.xml#Camera/muted" class="- topic/link "><linktext class="- topic/linktext ">muted</linktext></link><link href="flash.media.xml#Camera/names" class="- topic/link "><linktext class="- topic/linktext ">names</linktext></link><link href="flash.media.xml#Camera/setMode()" class="- topic/link "><linktext class="- topic/linktext ">setMode()</linktext></link><link href="flash.media.xml#Camera/event:status" class="- topic/link "><linktext class="- topic/linktext ">status</linktext></link><link href="flash.media.xml#Video/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">Video.attachCamera()</linktext></link></related-links><adobeApiEvent id="flash.media:Camera:getCamera_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Status einer Kamera protokolliert wird. Vor dem Zugriff auf eine Kamera zeigt Flash Player ein Datenschutz-Dialogfeld an, in dem Benutzer den Zugriff auf die Kamera zulassen oder verweigern können. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Camera.muted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf die Kamera verweigert. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Camera.Unmuted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf die Kamera gewährt.
 	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Status einer Kamera protokolliert wird.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.media:Camera:setKeyFrameInterval" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setKeyFrameInterval</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt die Videobilder an, die vollständig übertragen (sogenannte Keyframes) und nicht mit dem Algorithmus zur Videokomprimierung interpoliert werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">keyFrameInterval</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Wert, mit dem die Videobilder angegeben werden, die vollständig (als Schlüsselbilder) übertragen und nicht mit dem Algorithmus zur Videokomprimierung interpoliert werden. Beim Wert 1 ist jedes Bild ein Schlüsselbild, beim Wert 3 ist jedes dritte Bild ein Schlüsselbild usw. Die zulässigen Werte liegen zwischen 1 und 48.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt die Videobilder an, die vollständig übertragen (sogenannte <i class="+ topic/ph hi-d/i ">Schlüsselbilder</i>) und nicht mit dem Algorithmus zur Videokomprimierung interpoliert werden. Diese Methode ist nur bei der Übertragung von Videos über Flash Media Server anwendbar.
	 
	 <p class="- topic/p ">Mit dem Algorithmus zur Videokomprimierung in Flash werden Videos so komprimiert, dass nur die ab dem letzten Bild eines Videos geänderten Bildbereiche übertragen werden. Diese Abschnitte werden als interpolierte Bilder bezeichnet. Bilder eines Videos können entsprechend dem Inhalt des vorherigen Bilds interpoliert werden. Bei einem Schlüsselbild handelt es sich jedoch um ein vollständiges Videobild, das nicht aus vorherigen Bildern interpoliert wurde.</p> 
	 
	 <p class="- topic/p ">Berücksichtigen Sie zum Festlegen eines Werts für den <codeph class="+ topic/ph pr-d/codeph ">keyFrameInterval</codeph>-Parameter die Bandbreitennutzung und den Zugriff auf die Videowiedergabe. Durch die Angabe eines höheren Werts für <codeph class="+ topic/ph pr-d/codeph ">keyFrameInterval</codeph> (weniger häufiges Senden von Schlüsselbildern) wird beispielsweise die Bandbreitennutzung verringert. Dadurch wird jedoch möglicherweise die erforderliche Zeit zum Positionieren des Abspielkopfes an einem bestimmten Punkt im Video erhöht. Unter Umständen muss eine höhere Anzahl Videobilder interpoliert werden, damit die Wiedergabe des Videos fortgesetzt werden kann.</p> 
	 
	 <p class="- topic/p ">Durch die Angabe eines niedrigen Werts für <codeph class="+ topic/ph pr-d/codeph ">keyFrameInterval</codeph> (häufiges Senden von Schlüsselbildern) wird dagegen die Bandbreitennutzung erhöht, da häufiger vollständige Videobilder übertragen werden. Gleichzeitig wird möglicherweise jedoch die erforderliche Zeit zum Suchen eines bestimmten Videobilds in einem aufgenommenen Video verringert.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/keyFrameInterval" class="- topic/link "><linktext class="- topic/linktext ">keyFrameInterval</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setLoopback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLoopback</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob ein komprimierter Videostream für die lokale Wiedergabe der Kamera verwendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">compress</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob für die lokale Wiedergabe der Kameraaufnahmen ein komprimierter Videostream (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) oder ein unkomprimierter Stream (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) verwendet wird.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob ein komprimierter Videostream für die lokale Wiedergabe der Kamera verwendet wird. Diese Methode kann nur bei der Übertragung von Videos mit Flash Media Server angewendet werden. Durch Setzen von <codeph class="+ topic/ph pr-d/codeph ">compress</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> kann präziser angezeigt werden, wie ein Video bei der Wiedergabe in Echtzeit wiedergegeben wird.
	 
	 <p class="- topic/p ">Obwohl ein komprimierter Stream für Testzwecke nützlich ist, beispielsweise bei der Vorschau der Einstellungen für die Videoqualität, entsteht dadurch ein erheblicher Verarbeitungsaufwand. Die lokale Wiedergabe wird nicht einfach nur komprimiert, sie wird komprimiert, wie bei einer Live-Verbindung für die Übertragung bearbeitet und dann für die lokale Wiedergabe dekomprimiert.</p>
	 
	 <p class="- topic/p ">Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">compress</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, können Sie die Stärke der Komprimierung über <codeph class="+ topic/ph pr-d/codeph ">Camera.setQuality()</codeph> festlegen.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setQuality()" class="- topic/link "><linktext class="- topic/linktext ">setQuality()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMode</apiName><shortdesc class="- topic/shortdesc ">
	 Legt als Kameraaufnahmemodus den systemeigenen Modus fest, mit dem die angegebenen Kriterien am besten erfüllt werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.setMode, setMode
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">width</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die erforderliche Aufnahmebildbreite in Pixel. Der Standardwert ist 160.	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">height</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die angeforderte Aufnahmebildhöhe in Pixel. Der Standardwert ist 120.	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fps</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die erforderliche Rate in Bildern pro Sekunde, mit der die Kamera Daten erfassen soll. Der Standardwert ist 15.	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">favorArea</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob die Breite, Höhe und Bildrate geändert werden sollen, wenn die Kamera über keinen systemeigenen Modus verfügt, mit dem die angegebenen Kriterien erfüllt werden. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, dabei hat die gewünschte Bildgröße Vorrang. Bei diesem Parameter wird der Modus ausgewählt, der den Werten <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> am nächsten kommt, auch wenn dadurch die Bildrate reduziert und die Leistung verschlechtert wird. Soll die Bildrate Vorrang vor den Werten für Höhe und Breite haben, übergeben Sie den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> für den Parameter<codeph class="+ topic/ph pr-d/codeph ">favorArea</codeph>.
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Legt als Kameraaufnahmemodus den systemeigenen Modus fest, mit dem die angegebenen Kriterien am besten erfüllt werden. Wenn die Kamera über keinen systemeigenen Modus verfügt, der mit allen übergebenen Parametern übereinstimmt, wird in Flash Player ein Aufnahmemodus ausgewählt, der dem gewünschten Modus am ehesten entspricht. Bei diesem Vorgang werden möglicherweise Teile des Videobilds abgeschnitten sowie Bilder übersprungen. 
	 
	 <p class="- topic/p ">Standardmäßig überspringt Flash Player Bilder, sofern dies zum Beibehalten der gewünschten Bildgröße erforderlich ist. Um die Anzahl der übersprungenen Bilder zu minimieren, auch wenn dazu ggf. die Bildgröße reduziert werden muss, übergeben Sie den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> für den Parameter <codeph class="+ topic/ph pr-d/codeph ">favorArea</codeph>.</p>
	 
	 <p class="- topic/p ">Bei Auswahl eines systemeigenen Modus wird in Flash Player versucht, das gewünschte Bildseitenverhältnis möglichst beizubehalten. Wenn Sie beispielsweise den Befehl <codeph class="+ topic/ph pr-d/codeph ">myCam.setMode(400, 400, 30)</codeph> ausgeben und die maximalen Werte der Kamera für Breite und Höhe 320 und 288 betragen, werden in Flash Player sowohl die Breite als auch die Höhe auf den Wert 288 gesetzt. So wird in Flash Player das gewünschte Bildseitenverhältnis von 1:1 beibehalten.</p>
	 
	 <p class="- topic/p ">Wenn Sie überprüfen möchten, welche Werte diesen Eigenschaften zugewiesen wurden, nachdem in Flash Player der Modus ausgewählt wurde, der den gewünschten Werten am nächsten kommt, verwenden Sie die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">width</codeph>, <codeph class="+ topic/ph pr-d/codeph ">height</codeph> und <codeph class="+ topic/ph pr-d/codeph ">fps</codeph>.</p>
	 
	 <p class="- topic/p ">
	 Wenn Sie Flash Media Server verwenden, können Sie auch einzelne Bilder erfassen oder Zeitrafferaufnahmen erstellen. Weitere Informationen finden Sie unter <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachCamera()</codeph>.
	 </p>
	 
	 </apiDesc><example conref="examples\Camera_setModeExample.as" class="- topic/example "> Im folgenden Beispiel wird die Größe des Videos geändert und die Aufnahmerate Bilder pro Sekunde wird auf einen neuen Wert gesetzt, wenn ein Benutzer auf die Bühne klickt.  
 
 <p class="- topic/p ">Die Bühne ist festgelegt und wird somit nicht skaliert. Die <codeph class="+ topic/ph pr-d/codeph ">Camera.getCamera()</codeph>-Methode gibt einen Verweis auf ein Kameraobjekt zurück oder null, falls keine Kamera verfügbar oder installiert ist. Falls eine Kamera vorhanden ist, wird die <codeph class="+ topic/ph pr-d/codeph ">connectCamera()</codeph>-Methode aufgerufen. Die <codeph class="+ topic/ph pr-d/codeph ">connectCamera()</codeph>-Methode instanziiert ein Videoobjekt. Um das von der Kamera erfasste Video anzuzeigen, wird der Verweis auf den Videostream zum Videoobjekt hinzugefügt und das Videoobjekt wird der Anzeigeliste hinzugefügt. Ein Ereignis-Listener für ein <codeph class="+ topic/ph pr-d/codeph ">MouseEvent.CLICK</codeph>-Ereignis wird ebenfalls eingerichtet. Nachdem der Benutzer auf die Bühne geklickt hat, wird die Methode <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> aufgerufen. Die Methode überprüft die Breite des erfassten Videos und legt die Breite, die Höhe und die Anforderungsrate für Bilder pro Sekunde für den Aufnahmemodus der Kamera fest. Damit diese Einstellungen wirksam werden, muss das Videoobjekt entfernt und neu erstellt werden. Die Breite und die Höhe des Videos muss auf die Breite und Höhe des Kameraobjekts eingestellt werden.</p>      
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.media.Camera;
    import flash.media.Video;
    import flash.events.MouseEvent;
    import flash.display.StageScaleMode;

    public class Camera_setModeExample extends Sprite {
        private var cam:Camera;
        private var vid:Video;

        public function Camera_setModeExample() {
            stage.scaleMode = StageScaleMode.NO_SCALE;

            cam = Camera.getCamera();
            
            if (!cam) {
                trace("No camera is installed.");
            }else {
                connectCamera();
            }
        }

        private function connectCamera():void {
            vid = new Video();
            vid.width = cam.width;
            vid.height = cam.height; 
            vid.attachCamera(cam);
            addChild(vid);    

            stage.addEventListener(MouseEvent.CLICK, clickHandler);
        }
    
        private function clickHandler(e:MouseEvent):void {

            switch (cam.width) {
                case 160:
                cam.setMode(320, 240, 10); 
                break;
                case 320:
                cam.setMode(640, 480, 5); 
                break;
                default:
                cam.setMode(160, 120, 15); 
                break;
            } 

            removeChild(vid);           
            connectCamera();
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/fps" class="- topic/link "><linktext class="- topic/linktext ">fps</linktext></link><link href="flash.media.xml#Camera/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link><link href="flash.media.xml#Camera/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.net.xml#NetStream/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.attachCamera()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setMotionLevel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMotionLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt die erforderliche Bewegungsstärke zum Auslösen des activity-Ereignisses an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.setMotionLevel, setMotionLevel
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">motionLevel</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die erforderliche Bewegungsstärke zum Auslösen des <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignisses an. Die zulässigen Werte liegen zwischen 0 und 100. Der Standardwert ist 50.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">timeout</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">2000</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die Zeit in Millisekunden an, die ohne Aktivität vergehen muss, bevor Flash Player keine Aktivität mehr feststellt und das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis ausgelöst wird. Der Standardwert ist 2000 Millisekunden (2 Sekunden).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt die erforderliche Bewegungsstärke zum Auslösen des <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignisses an. Gibt optional die Zeit in Millisekunden an, die ohne Aktivität vergehen muss, bevor in Flash Player keine Bewegung mehr festgestellt und das Ereignis ausgelöst wird. 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis: </b> Videos können unabhängig vom Wert des <codeph class="+ topic/ph pr-d/codeph ">motionLevel</codeph>-Parameters wiedergegeben werden. Dieser Parameter legt nur fest, wann und unter welchen Umständen das Ereignis ausgelöst wird, nicht jedoch, ob tatsächlich Videodaten aufgezeichnet oder wiedergegeben werden.</p>
	 <p class="- topic/p ">
	 Wenn die Kamera überhaupt keine Bewegung erkennen soll, legen Sie für den <codeph class="+ topic/ph pr-d/codeph ">motionLevel</codeph>-Parameter den Wert 100 fest. Das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis wird dann nie ausgelöst. (Dieser Wert wird wahrscheinlich nur für Testzwecke verwendet, beispielsweise um vorübergehend alle Prozeduren zu deaktivieren, die bei diesem Ereignis normalerweise ausgelöst werden.)
	 </p>
	 <p class="- topic/p ">
	 Über die <codeph class="+ topic/ph pr-d/codeph ">activityLevel</codeph>-Eigenschaft können Sie feststellen, welche Bewegungsstärke derzeit mit der Kamera erkannt wird. Die Bewegungstoleranzwerte entsprechen direkt den Aktivitätswerten. Völliges Fehlen von Bewegung entspricht dem Aktivitätswert 0. Ständige Bewegung entspricht dem Aktivitätswert 100. Bei fehlender Bewegung ist der Aktivitätswert niedriger als die Bewegungstoleranz, bei Bewegung übersteigen die Aktivitätswerte häufig die Bewegungstoleranz.
	 </p>
	 <p class="- topic/p ">
	 Diese Methode ähnelt <codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph>. Mit beiden Methoden wird angegeben, zu welchem Zeitpunkt das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis ausgelöst werden soll. Diese Methoden haben jedoch deutlich unterschiedliche Auswirkungen auf das Veröffentlichen von Streams:
	 </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph> dient zur Optimierung der Bandbreite. Wenn ein Audiostream als lautlos eingestuft wird, werden keine Audiodaten gesendet. Stattdessen wird eine Meldung gesendet, um den Beginn der Inaktivität (Stille) anzuzeigen. </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Camera.setMotionLevel()</codeph> ist dazu bestimmt, Bewegung festzustellen und hat keinen Einfluss auf die Bandbreitenauslastung. Auch wenn ein Videostream keine Bewegung feststellt, werden weiterhin Videodaten gesendet.</li></ul>
	   
	 
	 
	 </apiDesc><example conref="examples\Camera_setMotionLevelExample.as" class="- topic/example "> Im folgenden Beispiel wird die Kamera des Benutzers als Überwachungskamera eingesetzt. Die Kamera erkennt Bewegungen und ein Textfeld zeigt die Aktivitätsstufe an. (Das Beispiel kann erweitert werden, sodass ein akustischer Alarm ausgegeben oder eine Nachricht über einen Webdienst an andere Anwendungen gesendet wird.)
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">Camera.getCamera()</codeph>-Methode gibt einen Verweis auf ein Kameraobjekt zurück oder null, falls keine Kamera verfügbar oder installiert ist. Die if-Anweisung überprüft, ob eine Kamera verfügbar ist und ruft die <codeph class="+ topic/ph pr-d/codeph ">connectCamera()</codeph>-Methode auf, wenn dies der Fall ist. Die <codeph class="+ topic/ph pr-d/codeph ">connectCamera()</codeph>-Methode instanziiert ein Videoobjekt mit der Breite und Höhe des erfassten Streams. Um das von der Kamera erfasste Video anzuzeigen, wird der Verweis auf den Videostream zum Videoobjekt hinzugefügt und das Videoobjekt wird der Anzeigeliste hinzugefügt. (Wenn die <codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph>-Methode aufgerufen wird, wird ein Dialogfeld angezeigt und fordert den Benutzer auf, den Flash Player-Zugriff auf die Kamera zuzulassen oder zu verweigern. Hat der Benutzer jedoch den Zugriff verweigert und die Option <codeph class="+ topic/ph pr-d/codeph ">Erinnern</codeph> gewählt, wird das Dialogfeld nicht geöffnet und es wird nichts angezeigt. Um sicherzustellen, dass der Benutzer die Möglichkeit hat, den Zugriff auf die Kamera zuzulassen, rufen Sie mit der <codeph class="+ topic/ph pr-d/codeph ">system.Security.showSettings()</codeph>-Methode das Flash Player-Dialogfeld „Einstellungen“ auf.)</p>
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">setMotionLevel()</codeph>-Methode legt die Aktivitätsstufe (Bewegungsstärke) auf 5 für minimale Bewegung fest, bevor das Aktivitätsereignis aufgerufen wird. Die Zeit zwischen dem Zeitpunkt, zu dem die Kamera mit dem Erkennen der Bewegung aufhört, und dem Auslösen des Aktivitätsereignisses ist auf 1 Sekunde (1000 Millisekunden) festgelegt. Wenn 1 Sekunde ohne Aktivität verstreicht oder die Aktivitätsstufe 5 erreicht wird, wird das <codeph class="+ topic/ph pr-d/codeph ">ActivityEvent.ACTIVITY</codeph>-Ereignis ausgelöst und die <codeph class="+ topic/ph pr-d/codeph ">activityHandler()</codeph>-Methode aufgerufen. Wenn das Ereignis durch die Aktivitätsstufe ausgelöst wurde, wird die <codeph class="+ topic/ph pr-d/codeph ">activating</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt und ein Timerobjekt gestartet. Jede Sekunde wird ein Timerereignis für das Timerobjekt ausgelöst und die <codeph class="+ topic/ph pr-d/codeph ">timerHandler()</codeph>-Methode wird aufgerufen, die die aktuelle Aktivitätsstufe anzeigt. (Auch wenn der Timer durch die Stufe 5 oder höher ausgelöst wird, kann die angezeigte Aktivitätsstufe darunter liegen.)</p>
  
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.media.Camera;
    import flash.media.Video;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.events.ActivityEvent;

    public class Camera_setMotionLevelExample extends Sprite {
        private var myTextField:TextField;
        private var cam:Camera;
        private var t:Timer = new Timer(1000);

        public function Camera_setMotionLevelExample() {
            myTextField = new TextField();
            myTextField.background = true;
            myTextField.selectable = false;
            myTextField.autoSize = TextFieldAutoSize.LEFT;    
        
            cam = Camera.getCamera();
            
            if (!cam) {
                myTextField.text = "No camera is installed.";

            }else {
                myTextField.text = "Waiting to connect.";
                connectCamera(); 
            }

            addChild(myTextField);

            t.addEventListener(TimerEvent.TIMER, timerHandler);
        }

        private function connectCamera():void {
                var vid:Video = new Video(cam.width, cam.height);
                vid.x = 10;
                vid.y = 10;
                vid.attachCamera(cam);
                addChild(vid);    

                cam.setMotionLevel(5, 1000);
                cam.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(e:ActivityEvent):void {
            if (e.activating == true) {
                t.start();    
            } else {
                myTextField.text = "Everything is quiet.";
                t.stop();
            }    
        }

        private function timerHandler(event:TimerEvent):void {
             myTextField.x = 10;
             myTextField.y = cam.height + 20;
             myTextField.text = "There is some activity. Level: " + cam.activityLevel;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/motionLevel" class="- topic/link "><linktext class="- topic/linktext ">motionLevel</linktext></link><link href="flash.media.xml#Camera/motionTimeout" class="- topic/link "><linktext class="- topic/linktext ">motionTimeout</linktext></link><link href="flash.media.xml#Microphone/setSilenceLevel()" class="- topic/link "><linktext class="- topic/linktext ">Microphone.setSilenceLevel()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Camera:setQuality" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setQuality</apiName><shortdesc class="- topic/shortdesc ">
	 Legt die maximale Bandbreite pro Sekunde oder die erforderliche Bildqualität des aktuell ausgehenden Videofeeds fest.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera.setQuality, setQuality
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bandwidth</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die maximale Bandbreitennutzung für den aktuell ausgehenden Videofeed in Byte pro Sekunde an. Wenn für Flash Player-Videos so viel Bandbreite verwendet werden soll, wie für die gewünschte <codeph class="+ topic/ph pr-d/codeph ">quality</codeph> erforderlich ist, belegen Sie <codeph class="+ topic/ph pr-d/codeph ">bandwidth</codeph> mit dem Wert 0. Der Standardwert ist 16384.	 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">quality</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine Ganzzahl, die die erforderliche Bildqualität angibt, die sich aus dem Grad der Komprimierung aller Videobilder ergibt. Die zulässigen Werte liegen zwischen 1 (niedrigste Qualität, maximale Komprimierung) und 100 (höchste Qualität, keine Komprimierung). Soll die Bildqualität bei Bedarf geändert werden, um eine Überschreitung der Bandbreite zu verhindern, belegen Sie <codeph class="+ topic/ph pr-d/codeph ">quality</codeph> mit 0. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Legt die maximale Bandbreite pro Sekunde oder die erforderliche Bildqualität des aktuell ausgehenden Videofeeds fest. Diese Methode ist in der Regel nur bei der Übertragung von Videos über Flash Media Server anwendbar.
	 
	 <p class="- topic/p ">Mit dieser Methode können Sie festlegen, ob die Ausnutzung der Bandbreite oder die Bildqualität des ausgehenden Videofeeds für die Anwendung Vorrang haben soll.</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Soll die Ausnutzung der Bandbreite Vorrang haben, geben Sie einen Wert für <codeph class="+ topic/ph pr-d/codeph ">bandwidth</codeph> an und belegen <codeph class="+ topic/ph pr-d/codeph ">quality</codeph> mit dem Wert 0. Flash Player überträgt Video dann innerhalb der angegebenen Bandbreite mit der bestmöglichen Qualität. Die Bildqualität wird von Flash Player gegebenenfalls verringert, um eine Überschreitung der angegebenen Bandbreite zu verhindern. Allgemein gilt, dass bei stärkerer Bewegung die Qualität abnimmt.</li><li class="- topic/li ">Soll die Qualität Vorrang haben, belegen Sie <codeph class="+ topic/ph pr-d/codeph ">bandwidth</codeph> mit dem Wert 0 und geben für <codeph class="+ topic/ph pr-d/codeph ">quality</codeph> einen numerischen Wert an. Flash Player verwendet dann so viel Bandbreite, wie zum Beibehalten der angegebenen Qualität erforderlich ist. Die Bildrate wird von Flash Player gegebenenfalls verringert, um die Bildqualität beizubehalten. Allgemein gilt, dass sich bei stärkerer Bewegung auch die Nutzung der Bandbreite erhöht.</li><li class="- topic/li ">Übergeben Sie numerische Werte für beide Parameter, um anzugeben, dass Bandbreite und Bildqualität gleichermaßen wichtig sind. Flash Player überträgt Video mit der angegebenen Qualität, ohne die angegebene Bandbreite zu überschreiten. Die Bildrate wird von Flash Player gegebenenfalls verringert, um die Bildqualität ohne Überschreiten der angegebenen Bandbreite beizubehalten.</li></ul>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">getCamera()</linktext></link><link href="flash.media.xml#Camera/quality" class="- topic/link "><linktext class="- topic/linktext ">quality</linktext></link></related-links></apiOperation><apiValue id="flash.media:Camera:activityLevel:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">activityLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Die von der Kamera erkannte Menge an Bewegung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die von der Kamera erkannte Menge an Bewegung. Die zulässigen Werte liegen zwischen 0 (keine erfasste Bewegung) und 100 (sehr starke Bewegung). Anhand des Werts dieser Eigenschaft können Sie ermitteln, ob eine Einstellung für die <codeph class="+ topic/ph pr-d/codeph ">setMotionLevel()</codeph>-Methode übergeben werden muss.
	 <p class="- topic/p ">Wenn die Kamera verfügbar ist, aufgrund eines nicht erfolgten <codeph class="+ topic/ph pr-d/codeph ">Video.attachCamera()</codeph>-Aufrufs noch nicht verwendet wird, wird diese Eigenschaft auf -1 gesetzt.</p>
	 <p class="- topic/p ">Beim Streaming ausschließlich unkomprimierter lokaler Videos wird diese Eigenschaft nur dann gesetzt, wenn der Ereignisprozedur eine Funktion zugewiesen wurde. Andernfalls ist diese Eigenschaft nicht definiert.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/motionLevel" class="- topic/link "><linktext class="- topic/linktext ">motionLevel</linktext></link><link href="flash.media.xml#Camera/setMotionLevel()" class="- topic/link "><linktext class="- topic/linktext ">setMotionLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:bandwidth:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bandwidth</apiName><shortdesc class="- topic/shortdesc ">
	 Die Bandbreite (in Byte), die für den momentan ausgehenden Videofeed maximal zur Verfügung steht.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.bandwidth, bandwidth
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Bandbreite (in Byte), die für den momentan ausgehenden Videofeed maximal zur Verfügung steht. Der Wert 0 bedeutet, dass der Feed die zur Beibehaltung der gewünschten Bildqualität erforderliche Bandbreite für Videos nutzen kann.
	 <p class="- topic/p ">Legen Sie diese Eigenschaft über die <codeph class="+ topic/ph pr-d/codeph ">setQuality()</codeph>-Methode fest.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setQuality()" class="- topic/link "><linktext class="- topic/linktext ">setQuality()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:currentFPS:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">currentFPS</apiName><shortdesc class="- topic/shortdesc ">	
	 Die Abtastrate in Bildern pro Sekunde, mit der die Kamera Daten erfasst.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.currentFPS, currentFPS
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">	
	 Die Abtastrate in Bildern pro Sekunde, mit der die Kamera Daten erfasst. Diese Eigenschaft kann nicht eingestellt werden. Mit der <codeph class="+ topic/ph pr-d/codeph ">setMode()</codeph>-Methode können Sie jedoch die verwandte Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">fps</codeph> festlegen, welche die maximale Bildrate angibt, mit der die Kamera Daten erfassen soll. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setMode()" class="- topic/link "><linktext class="- topic/linktext ">setMode()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:fps:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fps</apiName><shortdesc class="- topic/shortdesc ">
	 Die maximale Rate in Bildern pro Sekunde, mit der die Kamera Daten erfassen kann.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.fps, fps
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die maximal Rate in Bildern pro Sekunde, mit der die Kamera Daten erfassen kann. Die höchstmögliche Rate richtet sich nach den Möglichkeiten der Kamera; diese Bildrate wird möglicherweise nicht erzielt.
	 <ul class="- topic/ul "><li class="- topic/li ">Über die <codeph class="+ topic/ph pr-d/codeph ">setMode()</codeph>-Methode können Sie den gewünschten Wert für diese Eigenschaft festlegen.</li><li class="- topic/li ">Verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">currentFPS</codeph>-Eigenschaft, um festzustellen, mit welcher Abtastrate die Kamera derzeit Daten erfasst.</li></ul>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/currentFPS" class="- topic/link "><linktext class="- topic/linktext ">currentFPS</linktext></link><link href="flash.media.xml#Camera/setMode()" class="- topic/link "><linktext class="- topic/linktext ">setMode()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:height:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">height</apiName><shortdesc class="- topic/shortdesc ">
	 Die aktuelle Aufnahmebildhöhe in Pixel.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.height, height
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die aktuelle Aufnahmebildhöhe in Pixel. Über die <codeph class="+ topic/ph pr-d/codeph ">setMode()</codeph>-Methode können Sie einen Wert für diese Eigenschaft festlegen. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.media.xml#Camera/setMode()" class="- topic/link "><linktext class="- topic/linktext ">setMode()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:index:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">index</apiName><shortdesc class="- topic/shortdesc ">
	 Eine auf null basierende Ganzzahl, die den Index der Kamera anhand des von der names-Eigenschaft zurückgegebenen Arrays angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.index, index
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Eine auf null basierende Ganzzahl, die den Index der Kamera anhand des von der <codeph class="+ topic/ph pr-d/codeph ">names</codeph>-Eigenschaft zurückgegebenen Arrays angibt.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/names" class="- topic/link "><linktext class="- topic/linktext ">names</linktext></link><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">getCamera()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    Die isSupported-Eigenschaft hat den Wert „true“, wenn die Camera-Klasse von der aktuellen Plattform unterstützt wird, andernfalls hat sie den Wert „false“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die isSupported<codeph class="+ topic/ph pr-d/codeph "/>-Eigenschaft hat den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn die Camera-Klasse von der aktuellen Plattform unterstützt wird, andernfalls hat sie den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Camera:keyFrameInterval:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">keyFrameInterval</apiName><shortdesc class="- topic/shortdesc ">
	 Die Anzahl der Videobilder, die vollständig übertragen (sogenannte Keyframes) und nicht mit dem Algorithmus zur Videokomprimierung interpoliert werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Anzahl der Videobilder, die vollständig übertragen (sogenannte <i class="+ topic/ph hi-d/i ">Schlüsselbilder</i>) und nicht mit dem Algorithmus zur Videokomprimierung interpoliert werden. Der Standardwert ist 15, d. h., jedes fünfzehnte Bild ist ein Schlüsselbild. Der Wert 1 bedeutet, dass jedes Bild ein Schlüsselbild ist. Zulässige Werte sind Zahlen von 1 bis 48.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setKeyFrameInterval()" class="- topic/link "><linktext class="- topic/linktext ">setKeyFrameInterval()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:loopback:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">loopback</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob eine lokale Wiedergabe der Kameraaufnahmen wie bei der Live-Übertragung mit Flash Media Server komprimiert und dekomprimiert (true) oder nicht komprimiert (false) wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob eine lokale Wiedergabe der Kameraaufnahmen wie bei der Live-Übertragung mit Flash Media Server komprimiert und dekomprimiert (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) oder nicht komprimiert (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) wird. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
	 
	 <p class="- topic/p ">
	 Obwohl ein komprimierter Stream für Testzwecke nützlich ist, beispielsweise bei der Vorschau der Einstellungen für die Videoqualität, entsteht dadurch ein erheblicher Verarbeitungsaufwand. Die lokale Ansicht wird komprimiert und für die Übertragung bearbeitet wie in einer Live-Verbindung und dann für die lokale Anzeige dekomprimiert.
	 </p>
	 
	 <p class="- topic/p ">Um diesen Wert einzustellen, verwenden Sie <codeph class="+ topic/ph pr-d/codeph ">Camera.setLoopback()</codeph>. Wenn diese Eigenschaft auf „true“ gesetzt ist, können Sie den Komprimierungsgrad über <codeph class="+ topic/ph pr-d/codeph ">Camera.setQuality()</codeph> festlegen.</p>
	  
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setLoopback()" class="- topic/link "><linktext class="- topic/linktext ">setLoopback()</linktext></link><link href="flash.media.xml#Camera/setQuality()" class="- topic/link "><linktext class="- topic/linktext ">setQuality()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:motionLevel:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">motionLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Die erforderliche Bewegungsstärke zum Auslösen des activity-Ereignisses.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.motionLevel, motionLevel
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die erforderliche Bewegungsstärke zum Auslösen des <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignisses. Die zulässigen Werte liegen zwischen 0 und 100. Der Standardwert ist 50.
	 <p class="- topic/p ">Videos können unabhängig vom Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">motionLevel</codeph> wiedergegeben werden. Weitere Informationen hierzu finden Sie unter <codeph class="+ topic/ph pr-d/codeph ">setMotionLevel()</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setMotionLevel()" class="- topic/link "><linktext class="- topic/linktext ">setMotionLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:motionTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">motionTimeout</apiName><shortdesc class="- topic/shortdesc ">
	 Die Zeit in Millisekunden zwischen dem Zeitpunkt, zu dem die Kamera keine Bewegung mehr erfasst, und dem Zeitpunkt, zu dem das activity-Ereignis aufgerufen wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.motionTimeout, motionTimeout
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Zeit in Millisekunden zwischen dem Zeitpunkt, zu dem die Kamera keine Bewegung mehr erfasst, und dem Zeitpunkt, zu dem das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis aufgerufen wird. Der Standardwert ist 2000 (2 Sekunden). 
	 <p class="- topic/p ">Legen Sie diesen Wert über die <codeph class="+ topic/ph pr-d/codeph ">setMotionLevel()</codeph>-Methode fest. </p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setMotionLevel()" class="- topic/link "><linktext class="- topic/linktext ">setMotionLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:muted:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">muted</apiName><shortdesc class="- topic/shortdesc ">
	 Ein boolescher Wert, der angibt, ob der Benutzer im Flash Player-Dialogfeld „Zugriffsschutz“ den Zugriff auf die Kamera verweigert (true) oder gewährt (false) hat.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.muted, muted
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein boolescher Wert, der angibt, ob der Benutzer im Flash Player-Dialogfeld „Zugriffsschutz“ den Zugriff auf die Kamera verweigert (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) oder gewährt (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>) hat. Wenn sich dieser Wert ändert, wird das <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignis ausgelöst.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">getCamera()</linktext></link><link href="flash.media.xml#Camera/event:status" class="- topic/link "><linktext class="- topic/linktext ">status</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	 Der Name der aktuellen Kamera, der von der Kamerahardware zurückgegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.name, name
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Der Name der aktuellen Kamera, der von der Kamerahardware zurückgegeben wird.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/names" class="- topic/link "><linktext class="- topic/linktext ">names</linktext></link><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">getCamera()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:names:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">names</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Array mit Strings, in dem die Namen aller verfügbaren Kameras enthalten sind. Das Dialogfeld „Zugriffsschutz“ von Flash Player wird nicht angezeigt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.names, names
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Array mit Strings, in dem die Namen aller verfügbaren Kameras enthalten sind. Das Dialogfeld „Zugriffsschutz“ von Flash Player wird nicht angezeigt. Dieses Array verhält sich ebenso wie alle anderen ActionScript-Arrays, gibt also implizit die auf null basierende Indexposition jeder Kamera und die Anzahl der Kameras im System zurück (mithilfe von <codeph class="+ topic/ph pr-d/codeph ">names.length</codeph>). Weitere Informationen finden Sie im Array-Klasseneintrag <codeph class="+ topic/ph pr-d/codeph ">names</codeph>.
	 
	 <p class="- topic/p ">Für das Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">names</codeph>-Eigenschaft ist eine umfassende Untersuchung der Hardware erforderlich. In den meisten Fällen können Sie die Standardkamera verwenden.</p>
	 
	 <p class="- topic/p ">Bei Android wird nur eine Kamera unterstützt, auch wenn das Gerät über mehrere Kameras verfügt. Der Name der Kamera ist immer „Standard“.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">getCamera()</linktext></link><link href="flash.media.xml#Camera/index" class="- topic/link "><linktext class="- topic/linktext ">index</linktext></link><link href="flash.media.xml#Camera/name" class="- topic/link "><linktext class="- topic/linktext ">name</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:quality:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">quality</apiName><shortdesc class="- topic/shortdesc ">
	 Die erforderliche Bildqualität, die sich aus dem Grad der Komprimierung jedes Videobilds ergibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.quality, quality
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die erforderliche Bildqualität, die sich aus dem Grad der Komprimierung jedes Videobilds ergibt. Die zulässigen Werte liegen zwischen 1 (niedrigste Qualität, maximale Komprimierung) und 100 (höchste Qualität, keine Komprimierung). Der Standardwert ist 0, d. h., die Bildqualität kann gegebenenfalls geändert werden, damit die Bandbreite nicht überschritten wird.
	 
	 <p class="- topic/p ">Legen Sie diese Eigenschaft über die <codeph class="+ topic/ph pr-d/codeph ">setQuality()</codeph>-Methode fest.</p>
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setQuality()" class="- topic/link "><linktext class="- topic/linktext ">setQuality()</linktext></link></related-links></apiValue><apiValue id="flash.media:Camera:width:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">width</apiName><shortdesc class="- topic/shortdesc ">
	 Die aktuelle Aufnahmebildbreite in Pixel.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Camera.width, width
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die aktuelle Aufnahmebildbreite in Pixel. Über die <codeph class="+ topic/ph pr-d/codeph ">setMode()</codeph>-Methode können Sie den gewünschten Wert für diese Eigenschaft festlegen.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setMode()" class="- topic/link "><linktext class="- topic/linktext ">setMode()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:SoundTransform" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoundTransform</apiName><shortdesc class="- topic/shortdesc ">
 Die SoundTransform-Klasse enthält Eigenschaften für die Lautstärke und Schwenkung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
  
  </refpath></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die SoundTransform-Klasse enthält Eigenschaften für die Lautstärke und Schwenkung. 
 
 </apiDesc><example conref="examples\SoundTransformExample.as" class="- topic/example "> Mit dem folgenden Beispiel wird eine MP3-Datei geladen und abgespielt. Bewegen Sie die Maus oder das Benutzereingabegerät, während die MP3-Datei abgespielt wird; die Lautstärke und die Richtungseinstellung ändern sich, wenn Sie die Maus oder das Benutzereingabegerät über die Bühne bewegen. Legen Sie zur Ausführung dieses Beispiels eine Datei mit dem Namen „MySound.mp3“ in dem Verzeichnis ab, in dem sich die SWF-Datei befindet.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.StageAlign;
    import flash.display.StageScaleMode;
    import flash.events.*;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.SoundTransform;
    import flash.net.URLRequest;
    import flash.utils.Timer;

    public class SoundTransformExample extends Sprite {
        private var url:String = "MySound.mp3";
        private var soundFactory:Sound;
        private var channel:SoundChannel;
        private var positionTimer:Timer;

        public function SoundTransformExample() {
            stage.align = StageAlign.TOP_LEFT;
            stage.scaleMode = StageScaleMode.NO_SCALE;

            var request:URLRequest = new URLRequest(url);
            soundFactory = new Sound();
            soundFactory.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            soundFactory.load(request);
            channel = soundFactory.play();
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function ioErrorHandler(event:Event):void {
            trace("ioErrorHandler: " + event);
        }

        private function setPan(pan:Number):void {
            trace("setPan: " + pan.toFixed(2));
            var transform:SoundTransform = channel.soundTransform;
            transform.pan = pan;
            channel.soundTransform = transform;
        }

        private function setVolume(volume:Number):void {
            trace("setVolume: " + volume.toFixed(2));
            var transform:SoundTransform = channel.soundTransform;
            transform.volume = volume;
            channel.soundTransform = transform;
        }

        private function mouseMoveHandler(event:MouseEvent):void {
            var halfStage:uint = Math.floor(stage.stageWidth / 2);
            var xPos:uint = event.stageX;
            var yPos:uint = event.stageY;
            var value:Number;
            var pan:Number;

            if (xPos > halfStage) {
                value = xPos / halfStage;
                pan = value - 1;
            } else if (xPos &lt; halfStage) {
                value = (xPos - halfStage) / halfStage;
                pan = value;
            } else {
                pan = 0;
            }

            var volume:Number = 1 - (yPos / stage.stageHeight);

            setVolume(volume);
            setPan(pan);
            
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#SimpleButton/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.display.SimpleButton.soundTransform</linktext></link><link href="flash.display.xml#Sprite/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Sprite.soundTransform</linktext></link><link href="flash.media.xml#Microphone/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.soundTransform</linktext></link><link href="flash.media.xml#SoundChannel/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundChannel.soundTransform</linktext></link><link href="flash.media.xml#SoundMixer/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundMixer.soundTransform</linktext></link><link href="flash.net.xml#NetStream/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.soundTransform</linktext></link></related-links><apiConstructor id="flash.media:SoundTransform:SoundTransform" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SoundTransform</apiName><shortdesc class="- topic/shortdesc ">
	 Erstellt ein SoundTransform-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	 
	 </refpath></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">vol</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Lautstärke im Bereich von 0 (stumm) bis 1 (volle Lautstärke).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">panning</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Richtungseinstellung des Sounds von links nach rechts in einem Bereich zwischen -1 (vollständig links) und 1 (vollständig rechts). Beim Wert 0 erfolgt keine Richtungseinstellung (Mitte). 
	 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erstellt ein SoundTransform-Objekt. 
	 
	 </apiDesc><example conref="examples\SoundTransform_constructorExample.as" class="- topic/example "> Im folgenden Beispiel wird Sound nur über den rechten Kanal wiedergegeben und die Lautstärke ist auf 50 Prozent eingestellt.
 
 <p class="- topic/p ">Der Sound wird im Konstruktor und einem zweiten Soundkanal (<codeph class="+ topic/ph pr-d/codeph ">channel</codeph>) zugewiesen. Außerdem wird ein SoundTransform-Objekt (<codeph class="+ topic/ph pr-d/codeph ">transform</codeph>) erstellt. Dessen erstes Argument legt die Lautstärke auf 50 Prozent fest (der Bereich liegt zwischen 0,0 und 1,0). Das zweite Argument legt die Richtungseinstellung fest. In diesem Beispiel ist die Richtung auf 1,0 eingestellt, was bedeutet, dass der Sound nur aus dem rechten Lautsprecher kommt. Damit diese Einstellungen wirksam werden, wird das SoundTransform-Objekt <codeph class="+ topic/ph pr-d/codeph ">transform</codeph> der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">soundTransform</codeph> des Soundkanals zugewiesen.</p> 
<p class="- topic/p "> <b class="+ topic/ph hi-d/b ">Hinweis:</b> Für dieses Beispiel wurde nur eine sehr eingeschränkte Fehlerverarbeitung geschrieben.</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.SoundTransform;
    import flash.events.IOErrorEvent;

    public class SoundTransform_constructorExample extends Sprite
    {
        public function SoundTransform_constructorExample() {
            var mySound:Sound = new Sound();
            var url:URLRequest = new URLRequest("mySound.mp3");
            var channel:SoundChannel;
            var transform:SoundTransform = new SoundTransform(0.5, 1.0);

            mySound.load(url);    
            channel = mySound.play();
            channel.soundTransform = transform;

            mySound.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace("The sound could not be loaded: " + errorEvent.text);
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.media:SoundTransform:leftToLeft:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">leftToLeft</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des linken Eingangssignals über den linken Lautsprecher wiedergegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des linken Eingangssignals über den linken Lautsprecher wiedergegeben wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:leftToRight:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">leftToRight</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des linken Eingangssignals über den rechten Lautsprecher wiedergegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des linken Eingangssignals über den rechten Lautsprecher wiedergegeben wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:pan:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pan</apiName><shortdesc class="- topic/shortdesc ">
	 Die Richtungseinstellung des Sounds von links nach rechts in einem Bereich zwischen -1 (vollständig links) und 1 (vollständig rechts).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Richtungseinstellung des Sounds von links nach rechts in einem Bereich zwischen -1 (vollständig links) und 1 (vollständig rechts). Beim Wert 0 erfolgt keine Richtungseinstellung (ausgeglichene Mitte zwischen rechts und links).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:rightToLeft:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rightToLeft</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des rechten Eingangssignals über den linken Lautsprecher wiedergegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des rechten Eingangssignals über den linken Lautsprecher wiedergegeben wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:rightToRight:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rightToRight</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des rechten Eingangssignals über den rechten Lautsprecher wiedergegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Wert zwischen 0 (nicht) und 1 (vollständig), der angibt, welcher Anteil des rechten Eingangssignals über den rechten Lautsprecher wiedergegeben wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundTransform:volume:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">volume</apiName><shortdesc class="- topic/shortdesc ">
	 Die Lautstärke im Bereich von 0 (stumm) bis 1 (volle Lautstärke).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Lautstärke im Bereich von 0 (stumm) bis 1 (volle Lautstärke).
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:StageVideoAvailability" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StageVideoAvailability</apiName><shortdesc class="- topic/shortdesc ">
	Diese Klasse definiert eine Aufzählung, die angibt, ob zurzeit Bühnenvideo verfügbar ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Aufzählung, die angibt, ob zurzeit Bühnenvideo verfügbar ist.
   	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Diese Klasse definiert eine Aufzählung, die angibt, ob zurzeit Bühnenvideo verfügbar ist.
	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoAvailabilityEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoAvailabilityEvent</linktext></link></related-links><apiValue id="flash.media:StageVideoAvailability:AVAILABLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AVAILABLE</apiName><shortdesc class="- topic/shortdesc ">
		 Bühnenvideo ist zurzeit verfügbar.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">available</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Bühnenvideo ist zurzeit verfügbar.
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Bühnenvideo ist zurzeit verfügbar.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageVideoAvailability:UNAVAILABLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNAVAILABLE</apiName><shortdesc class="- topic/shortdesc ">
		 Bühnenvideo ist zurzeit nicht verfügbar.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unavailable</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Bühnenvideo ist zurzeit nicht verfügbar.
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Bühnenvideo ist zurzeit nicht verfügbar.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:StageWebView" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StageWebView</apiName><shortdesc class="- topic/shortdesc ">
     Die StageWebView-Klasse zeigt HTML-Inhalt in einem Bühnenviewport an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die StageWebView-Klasse zeigt HTML-Inhalt in einem Bühnenviewport an. 
     
     <p class="- topic/p ">Die StageWebView-Klasse stellt eine einfache Möglichkeit bereit, HTML-Inhalte auf Geräten anzuzeigen, auf denen die HTMLLoader-Klasse nicht unterstützt wird. Die Klasse ermöglicht keine Interaktion zwischen ActionScript und dem HTML-Inhalt außer durch die Methoden und Eigenschaften der StageWebView-Klasse selbst. Es gibt zum Beispiel keine Möglichkeit, Werte oder Aufruffunktionen zwischen ActionScript und JavaScript zu übergeben.</p>
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Diese Funktion wird auf allen Desktopbetriebssystemen und mobilen Geräten unterstützt, jedoch nicht auf Geräten mit AIR für TV. Mit der <codeph class="+ topic/ph pr-d/codeph ">StageWebView.isSupported</codeph>-Eigenschaft können Sie testen, ob zur Laufzeit Unterstützung gegeben ist. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.</p>	 
	 
     <p class="- topic/p ">Bei Geräten in den mobilen und erweiterten mobilen Profilen verwendet die StageWebView-Klasse die Systemwebkontrolle, die vom Betriebssystem des Geräts bereitgestellt wird. Deshalb können sich die verfügbaren Funktionen und Darstellungen von Gerät zu Gerät unterscheiden. Bei Desktopcomputern (Desktop- und erweiterte Desktopprofile) verwendet die StageWebView-Klasse die interne AIR WebKit-Engine. Die verfügbaren Funktionen und Darstellungen sind die gleichen wie bei der HTMLLoader-Klasse (ohne die enge Integration und Skriptbrücke zwischen ActionScript und JavaScript, die eine HTMLLoader-Instanz bereitstellt). Mit der <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph>-Eigenschaft der StageWebView-Klasse können Sie testen, ob die Klasse auf dem aktuellen Gerät unterstützt wird.</p>
     
     <p class="- topic/p ">Die StageWebView-Klasse ist KEIN Anzeigeobjekt und kann der Flash-Anzeigeliste nicht hinzugefügt werden. Stattdessen zeigen Sie ein StageWebView-Objekt an, indem Sie es mithilfe der <codeph class="+ topic/ph pr-d/codeph ">stage</codeph>-Eigenschaft direkt an die Bühne anhängen. Die an die Bühne angehängte StageWebView-Instanz wird über allen ggf. vorhandenen Flash-Anzeigeobjekten angezeigt. Sie steuern die Größe und Position des Renderingbereichs mit der <codeph class="+ topic/ph pr-d/codeph ">viewPort</codeph>-Eigenschaft. Es gibt keine Möglichkeit, die Tiefenreihenfolge verschiedener StageWebView-Objekte zu steuern. Das Überlappen von zwei Instanzen wird nicht empfohlen.</p>
     
     <p class="- topic/p ">Wenn der Inhalt im StageWebView-Objekt den Fokus hat, hat das StageWebView-Objekt die erste Gelegenheit zur Verarbeitung von Tastatureingaben. Die Bühne, an die das StageWebView-Objekt angehängt ist, setzt Tastatureingaben ab, die nicht verarbeitet wurden. Der normale Erfassen/Bubbling-Ablauf gilt hier nicht, da die StageWebView-Instanz kein Teil der Anzeigeliste ist.</p>
     
     <p class="- topic/p ">In Android 3.0+ muss eine Anwendung die Hardwarebeschleunigung im Android-Element „manifestAdditions“ des AIR-Anwendungsdeskriptors aktivieren, damit Plug-In-Inhalte in einem StageWebView-Objekt angezeigt werden.</p>
     
     </apiDesc><example conref="examples\StageWebViewExample.1.as" class="- topic/example "> Im folgenden Beispiel wird ein StageWebView-Objekt so eingerichtet, dass es die Bühne füllt. Das Beispiel lädt eine Website mit der <codeph class="+ topic/ph pr-d/codeph ">loadURL()</codeph>-Methode und verwendet die Zurück- und Suchen Softwaretaste des Geräts für die Navigation im Verlauf. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package  {
    import flash.display.MovieClip;
    import flash.media.StageWebView;
    import flash.geom.Rectangle;
    import flash.events.KeyboardEvent;
    import flash.ui.Keyboard;
    import flash.desktop.NativeApplication;
                
    public class StageWebViewExample extends MovieClip{

        private var webView:StageWebView = new StageWebView();
                                
        public function StageWebViewExample() 
        {
            webView.stage = this.stage;
            webView.viewPort = new Rectangle( 0, 0, stage.stageWidth, stage.stageHeight );
            webView.loadURL( "http://www.example.com" );
                                                
            stage.addEventListener( KeyboardEvent.KEY_DOWN, onKey );
        }
                                
        private function onKey( event:KeyboardEvent ):void
        {
            if( event.keyCode == Keyboard.BACK &amp;&amp; webView.isHistoryBackEnabled )
            {
                trace("Back.");
                webView.historyBack();
                event.preventDefault();
            }

            if( event.keyCode == Keyboard.SEARCH &amp;&amp; webView.isHistoryForwardEnabled )
            {
                trace("Forward.");
                webView.historyForward();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="../../flash/html/HTMLLoader.html" class="- topic/link "><linktext class="- topic/linktext ">HTMLLoader-Klasse</linktext></link><link href="http://www.flashmobileblog.com/2010/06/18/air-on-android-tweetrapp-video-walk-through/" class="- topic/link "><linktext class="- topic/linktext ">Mark Doherty: AIR on Android: TweetrApp</linktext></link><link href="http://www.flashmobileblog.com/2010/07/17/air2-5-stagewebview-demo-oauth-support/" class="- topic/link "><linktext class="- topic/linktext ">Mark Doherty: OAuth Support</linktext></link><link href="http://help.adobe.com/en_US/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-7ffe.html#WS365a66ad37c9f5102ec8a8ba12f2d91095a-8000" class="- topic/link "><linktext class="- topic/linktext ">Aktivieren von Flash Player und anderen Plug-Ins in einem StageWebView-Objekt</linktext></link></related-links><adobeApiEvent id="flash.media:StageWebView_flash.events.FocusEvent_focusOut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">focusOut</apiName><shortdesc class="- topic/shortdesc ">
     Wird abgesetzt, wenn StageWebView den Fokus abgibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FocusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Wird abgesetzt, wenn StageWebView den Fokus abgibt.
     
     </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:StageWebView_flash.events.FocusEvent_focusIn" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">focusIn</apiName><shortdesc class="- topic/shortdesc ">
     Wird abgesetzt, wenn dieses StageWebView-Objekt den Fokus erhält.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FocusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Wird abgesetzt, wenn dieses StageWebView-Objekt den Fokus erhält.
     
     </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:StageWebView_flash.events.ErrorEvent_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, dass ein Fehler aufgetreten ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, dass ein Fehler aufgetreten ist. 
     
     </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:StageWebView_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, dass der letzte Ladevorgang, der von der loadString()- oder loadURL()-Methode angefordert wurde, abgeschlossen ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt an, dass der letzte Ladevorgang, der von der loadString()- oder load()-Methode angefordert wurde, abgeschlossen ist.
	 
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, dass der letzte Ladevorgang, der von der <codeph class="+ topic/ph pr-d/codeph ">loadString()</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">loadURL()</codeph>-Methode angefordert wurde, abgeschlossen ist.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:StageWebView_flash.events.LocationChangeEvent.LOCATION_CHANGING_locationChanging" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">locationChanging</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, dass die location-Eigenschaft des StageWebView-Objekts gleich geändert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.LocationChangeEvent.LOCATION_CHANGING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.LocationChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt an, dass die location-Eigenschaft des StageWebView-Objekts gleich geändert wird.
	 
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, dass die <codeph class="+ topic/ph pr-d/codeph ">location</codeph>-Eigenschaft des StageWebView-Objekts gleich geändert wird.
	 
	 <p class="- topic/p ">Ein locationChanging-Ereignis wird nur dann abgesetzt, wenn die Positionsänderung durch HTML-Inhalt oder durch Code innerhalb des StageWebView-Objekts initiiert wurde, zum Beispiel, wenn der Benutzer auf einen Hyperlink klickt. Standardmäßig wird die neue Position in diesem StageWebView-Objekt angezeigt. Sie können die <codeph class="+ topic/ph pr-d/codeph ">preventDefault()</codeph>-Methode des Ereignisobjekts aufrufen, um das Standardverhalten zu verhindern. Sie könnten zum Beispiel die <codeph class="+ topic/ph pr-d/codeph ">flash.net.navigateToURL()</codeph>-Funktion verwenden, um die Seite im Systembrowser basierend auf der <codeph class="+ topic/ph pr-d/codeph ">location</codeph>-Eigenschaft des Ereignisobjekts zu öffnen.</p>
	 
	 <p class="- topic/p ">Es wird kein locationChanging-Ereignis abgesetzt, wenn Sie die Position mit einer der folgenden Methoden ändern:</p>
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">historyBack()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">historyForward()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">historyGo()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">loadString()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">loadURL()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">reload()</codeph></li></ul>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:StageWebView_flash.events.LocationChangeEvent.LOCATION_CHANGE_locationChange" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">locationChange</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, dass die location-Eigenschaft des StageWebView-Objekts geändert wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.LocationChangeEvent.LOCATION_CHANGE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.LocationChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt an, dass die location-Eigenschaft des StageWebView-Objekts geändert wurde.
 	 
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, dass die <codeph class="+ topic/ph pr-d/codeph ">location</codeph>-Eigenschaft des StageWebView-Objekts geändert wurde.
	 
	 <p class="- topic/p ">Das Ereignis kann nicht abgebrochen werden.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.media:StageWebView:StageWebView" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StageWebView</apiName><shortdesc class="- topic/shortdesc ">
	     Erstellt ein StageWebView-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Erstellt ein StageWebView-Objekt.
	     
	     <p class="- topic/p ">Das Objekt ist unsichtbar, bis es an eine Bühne angehängt wird und der <codeph class="+ topic/ph pr-d/codeph ">viewPort</codeph> festgelegt wurde.</p>
	     
	     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:StageWebView:assignFocus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">assignFocus</apiName><shortdesc class="- topic/shortdesc ">
	     Weist dem Inhalt in diesem StageWebView-Objekt den Fokus zu.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">direction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">none</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">gibt an, ob das erste oder das letzte Objekt des angezeigten Inhalts, das den Fokus erhalten kann, den Fokus erhält.
	     
	     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Weist dem Inhalt in diesem StageWebView-Objekt den Fokus zu.
	     
	     <p class="- topic/p ">Richtungswerte sind in der FocusDirection-Klasse definiert: "bottom" (unten), "none" (keine) und "top" (oben).</p>
	     
	     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#FocusDirection" class="- topic/link "><linktext class="- topic/linktext ">FocusDirection</linktext></link></related-links></apiOperation><apiOperation id="flash.media:StageWebView:dispose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">dispose</apiName><shortdesc class="- topic/shortdesc ">
	     Entfernt dieses StageWebView-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Entfernt dieses StageWebView-Objekt.
	     
	     <p class="- topic/p ">Der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">dispose()</codeph> ist optional. Wenn Sie keinen Verweis auf diese StageWebView-Instanz behalten, wird sie bei der automatischen Speicherbereinigung entfernt. Mit dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">dispose()</codeph> kann die Speicherbereinigung eher erfolgen oder zu einer passenderen Zeit.</p>
	     
	     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:drawViewPortToBitmapData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">drawViewPortToBitmapData</apiName><shortdesc class="- topic/shortdesc ">
		 Zeichnet den Viewport der StageWebView in eine Bitmap.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.6" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Die Breite oder Höhe der Bitmap unterscheidet sich von der Breite oder Höhe des Viewports.
		 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Bitmap hat den Wert null.
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bitmap</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:BitmapData</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das BitmapData-Objekt, in dem der sichtbare Teil des StageWebView-Viewport gezeichnet werden soll. 		  
             </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Zeichnet den Viewport der StageWebView in eine Bitmap.
	     	 <p class="- topic/p ">Erfassen Sie die Bitmap und setzen Sie die Bühne auf <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, um den Inhalt über dem StageWebView-Objekt anzuzeigen. </p>
		 
		 </apiDesc><example conref="examples\StageWebView.bitmapcapture.as" class="- topic/example "> Mit dem folgenden Beispiel werden zwei Beschriftungen angezeigt: google und facebook. Beim Klicken auf die Beschriftung wird die entsprechende Webseite erfasst und als Schnappschuss auf der Bühne angezeigt. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package
{
    import flash.display.Bitmap;
    import flash.display.BitmapData;
    import flash.display.Sprite;
    import flash.events.*;
    import flash.geom.Rectangle;
    import flash.media.StageWebView;
    import flash.net.*;
    import flash.text.TextField;
    
    public class stagewebview1 extends Sprite
    {    
        public var webView:StageWebView = new StageWebView();
        public var textGoogle:TextField=new TextField();
        public var textFacebook:TextField=new TextField();
    
        public function stagewebview()
        
        {
            textGoogle.htmlText="&lt;b>Google&lt;/b>";
            textGoogle.x=300;
            textGoogle.y=-80;        
            addChild(textGoogle);
            textFacebook.htmlText="&lt;b>Facebook&lt;/b>";
            textFacebook.x=0;
            textFacebook.y=-80;        
            addChild(textFacebook);
            textGoogle.addEventListener(MouseEvent.CLICK,goGoogle);
            textFacebook.addEventListener(MouseEvent.CLICK,goFaceBook);
            webView.stage = this.stage;
            webView.viewPort = new Rectangle(0, 0, stage.stageWidth, stage.stageHeight);

        }    
    
        public function goGoogle(e:Event):void
        
        {
            webView.loadURL("http://www.google.com");
            webView.stage = null;
            webView.addEventListener(Event.COMPLETE,handleLoad);
        }
    
        public function goFaceBook(e:Event):void
        {
            webView.loadURL("http://www.facebook.com");
            webView.stage = null;
            webView.addEventListener(Event.COMPLETE,handleLoad);
        }
    
        public function handleLoad(e:Event):void
        {
            var bitmapData:BitmapData = new BitmapData(webView.viewPort.width, webView.viewPort.height);
            webView.drawViewPortToBitmapData(bitmapData);
            var webViewBitmap:Bitmap=new Bitmap(bitmapData);
            addChild(webViewBitmap);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:historyBack" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">historyBack</apiName><shortdesc class="- topic/shortdesc ">
	     Navigiert zur vorherigen Seite im Browserverlauf.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Navigiert zur vorherigen Seite im Browserverlauf.
	     
	     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:historyForward" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">historyForward</apiName><shortdesc class="- topic/shortdesc ">
	     Navigiert zur nächsten Seite im Browserverlauf.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Navigiert zur nächsten Seite im Browserverlauf.
	     
	     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:loadString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadString</apiName><shortdesc class="- topic/shortdesc ">
	     Lädt den angegebenen HTML-String und zeigt ihn an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">text</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">der String mit HTML- oder XHTML-Inhalt, der angezeigt werden soll.
	     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">mimeType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">text/html</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der MIME-Typ des Inhalts, entweder „text/html“ oder „application/xhtml+xml“.
	     
	     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Lädt den angegebenen HTML-String und zeigt ihn an.
	     
	     <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">loadString()</codeph>-Methode verwendet wird, wird <codeph class="+ topic/ph pr-d/codeph ">location</codeph> als „about:blank“ gemeldet . In URLs innerhalb des HTML-Strings kann nur das Standard-URI-Schema verwendet werden. Die AIR-URI-Schemas, „app:“ und „app-storage:“ sind nicht zulässig.</p>
	     
	     <p class="- topic/p ">Der HTML-Inhalt kann keine lokalen Ressourcen wie zum Beispiel Bilddateien laden. XMLHttpRequests sind nicht zulässig.</p>
	     
	     <p class="- topic/p ">Es werden nur die MIME-Typen „text/html“ und „application/xhtml+xml“ unterstützt.</p>
	     
	     </apiDesc><example conref="examples\StageWebView.loadString.1.as" class="- topic/example "> Im folgenden Beispiel wird ein StageWebView-Objekt so eingerichtet, dass es die Bühne füllt. Das Beispiel lädt eine HTML-Seite mit der <codeph class="+ topic/ph pr-d/codeph ">loadString()</codeph>-Methode. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var webView:StageWebView = new StageWebView();
webView.stage = this.stage;
webView.viewPort = new Rectangle( 0, 0, stage.stageWidth, stage.stageHeight );

var htmlString:String = "&lt;!DOCTYPE HTML>" +
                        "&lt;html>" +
                            "&lt;body>" +
                                "&lt;h1>Example&lt;/h1>" +
                                "&lt;p>King Phillip cut open five green snakes.&lt;/p>" +
                            "&lt;/body>" +
                        "&lt;/html>";

webView.loadString( htmlString, "text/html" );
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:loadURL" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadURL</apiName><shortdesc class="- topic/shortdesc ">
	     Lädt die Seite unter der angegebenen URL.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">url</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Lädt die Seite unter der angegebenen URL.
	     
	     <p class="- topic/p ">Die URL kann die folgenden URI-Schemas verwenden: http:, https:, file:, data: und javascript:. Inhalt, der mit dem file:-Schema geladen wurde, kann andere lokale Ressourcen laden.</p>
	     
	     </apiDesc><example conref="examples\StageWebView.loadURL.1.as" class="- topic/example "> Im folgenden Beispiel wird ein StageWebView-Objekt so eingerichtet, dass es die Bühne füllt. Das Beispiel lädt eine Website mit der <codeph class="+ topic/ph pr-d/codeph ">loadURL()</codeph>-Methode. 
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Bei Android müssen Sie die INTERNET-Berechtigung im AIR-Anwendungsdeskriptor spezifizieren, um remote URLs zu laden.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var webView:StageWebView = new StageWebView();
webView.stage = this.stage;
webView.viewPort = new Rectangle( 0, 0, stage.stageWidth, stage.stageHeight );

webView.loadURL( "http://www.example.com" );
                                                
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:reload" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reload</apiName><shortdesc class="- topic/shortdesc ">
	     Lädt die aktuelle Seite neu.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Lädt die aktuelle Seite neu.
	     
	     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:StageWebView:stop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">stop</apiName><shortdesc class="- topic/shortdesc ">
	     Hält den aktuellen Ladevorgang an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Hält den aktuellen Ladevorgang an.
	     
	     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.media:StageWebView:isHistoryBackEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isHistoryBackEnabled</apiName><shortdesc class="- topic/shortdesc ">
	     Gibt an, ob es im Browserverlauf eine vorherige Seite gibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Gibt an, ob es im Browserverlauf eine vorherige Seite gibt.
	     
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageWebView:isHistoryForwardEnabled:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isHistoryForwardEnabled</apiName><shortdesc class="- topic/shortdesc ">
	     Gibt an, ob es im Browserverlauf eine nächste Seite gibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Gibt an, ob es im Browserverlauf eine nächste Seite gibt.
	     
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageWebView:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
	     Gibt an, ob die StageWebView-Klasse auf dem aktuellen Gerät unterstützt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Gibt an, ob die StageWebView-Klasse auf dem aktuellen Gerät unterstützt wird.
	     
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageWebView:location:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">location</apiName><shortdesc class="- topic/shortdesc ">
	     Die URL der aktuellen Position.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Die URL der aktuellen Position.
	     
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageWebView:stage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stage</apiName><shortdesc class="- topic/shortdesc ">
	     Die Bühne, auf der dieses StageWebView-Objekt angezeigt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.display:Stage</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Die Bühne, auf der dieses StageWebView-Objekt angezeigt wird.
	     
	     <p class="- topic/p ">Stellen Sie <codeph class="+ topic/ph pr-d/codeph ">stage</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ein, um dieses StageWebView-Objekt auszublenden.</p>
	     
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageWebView:title:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">title</apiName><shortdesc class="- topic/shortdesc ">
	     Der HTML-Titelwert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Der HTML-Titelwert.
	     
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageWebView:viewPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">viewPort</apiName><shortdesc class="- topic/shortdesc ">
	     Der Bereich auf der Bühne, in dem das StageWebView-Objekt angezeigt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Rectangle</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Rectangle-Wert ist nicht gültig.
	     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Der Bereich auf der Bühne, in dem das StageWebView-Objekt angezeigt wird.
	     
	     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:VideoStatus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">VideoStatus</apiName><shortdesc class="- topic/shortdesc ">
	Diese Klasse definiert eine Aufzählung, die mögliche Ebenen der Videodekodierung beschreibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Aufzählung, die mögliche Ebenen der Videodekodierung beschreibt.
	</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Diese Klasse definiert eine Aufzählung, die mögliche Ebenen der Videodekodierung beschreibt.
	</apiDesc></apiClassifierDetail><apiValue id="flash.media:VideoStatus:ACCELERATED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ACCELERATED</apiName><shortdesc class="- topic/shortdesc ">
		 Zeigt die hardwarebeschleunigte (GPU-) Videodekodierung an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">accelerated</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Zeigt die hardwarebeschleunigte (GPU-) Videodekodierung an.
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Zeigt die hardwarebeschleunigte (GPU-) Videodekodierung an.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:VideoStatus:SOFTWARE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SOFTWARE</apiName><shortdesc class="- topic/shortdesc ">
		 Zeigt die Software-Videodekodierung an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">software</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Zeigt die Software-Videodekodierung an.
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Zeigt die Software-Videodekodierung an.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:VideoStatus:UNAVAILABLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNAVAILABLE</apiName><shortdesc class="- topic/shortdesc ">
		 Videodekodierung wird nicht unterstützt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="(unsupported)" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unavailable</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Video wird nicht unterstützt.
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Videodekodierung wird nicht unterstützt.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:MediaPromise" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">MediaPromise</apiName><shortdesc class="- topic/shortdesc ">
	 Die MediaPromise-Klasse repräsentiert die Zusage, ein Medienobjekt bereitzustellen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.desktop:IFilePromise</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die MediaPromise-Klasse repräsentiert die Zusage, ein Medienobjekt bereitzustellen. 
	 
	 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft eines MediaEvent-Objekts ist eine MediaPromise-Instanz. Sie können die MediaPromise-Methoden verwenden, um auf das zugesagte Medienobjekt zuzugreifen. Die unterstützten Medienformate sind Standbilder und Videos.</p>
	 
	 <p class="- topic/p ">Sie können MediaPromise-Objekte nicht erstellen. Der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">new MediaPromise()</codeph> generiert einen Laufzeitfehler.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#MediaEvent" class="- topic/link "><linktext class="- topic/linktext ">MediaEvent</linktext></link><link href="flash.desktop.xml#IFilePromise" class="- topic/link "><linktext class="- topic/linktext ">IFilePromise</linktext></link><link href="flash.display.xml#Loader/loadFilePromise()" class="- topic/link "><linktext class="- topic/linktext ">Loader.LoadFilePromise()</linktext></link><link href="flash.utils.xml#IDataInput" class="- topic/link "><linktext class="- topic/linktext ">IDataInput</linktext></link><link href="flash.media.xml#CameraRoll/browseForImage()" class="- topic/link "><linktext class="- topic/linktext ">CameraRoll.browseForImage()</linktext></link><link href="flash.media.xml#CameraUI" class="- topic/link "><linktext class="- topic/linktext ">CameraUI</linktext></link></related-links><adobeApiEvent id="flash.media:MediaPromise_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 	 Ein MediaPromise-Objekt setzt ein complete-Ereignis ab, wenn alle Daten gelesen wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 Ein MediaPromise-Objekt setzt ein <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignis ab, wenn alle Daten gelesen wurden. Das Ereignis zeigt an, dass im zugrunde liegenden Stream keine weiteren Daten verfügbar sind.
	 
	 <p class="- topic/p ">Ein <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignis wird nicht von einer synchronen Datenquelle abgesetzt.</p>
	 
 	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:MediaPromise_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 	 Ein MediaPromise-Objekt setzt progress-Ereignisse ab, wenn die Daten verfügbar werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	 Ein MediaPromise-Objekt setzt <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>-Ereignisse ab, wenn die Daten verfügbar werden.
 	 
 	 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph>-Eigenschaft aller progress-Ereignisse mit Ausnahme des letzten hat den Wert 0. Wenn alle Daten sofort verfügbar sind, werden keine <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>-Ereignisse abgesetzt. Von synchronen Datenquellen werden keine <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>-Ereignisse abgesetzt.</p>
	 
 	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:MediaPromise_flash.events.IOErrorEvent.IOERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 	Ein MediaPromise-Objekt setzt ein ioError-Ereignis ab, wenn beim Lesen des zugrunde liegenden Datenstreams ein Fehler auftritt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IOERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	Ein MediaPromise-Objekt setzt ein <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph>-Ereignis ab, wenn beim Lesen des zugrunde liegenden Datenstreams ein Fehler auftritt. Nachdem dieses Ereignis abgesetzt wurde, können keine Daten mehr gelesen werden.
	
 	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:MediaPromise_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 	Ein MediaPromise-Objekt setzt ein close-Ereignis ab, wenn der zugrunde liegende Datenstream geschlossen wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	Ein MediaPromise-Objekt setzt ein <codeph class="+ topic/ph pr-d/codeph ">close</codeph>-Ereignis ab, wenn der zugrunde liegende Datenstream geschlossen wurde.
	
 	</apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.media:MediaPromise:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
		 Schließt die Datenquelle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Schließt die Datenquelle.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:MediaPromise:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
		 Öffnet die zugrunde liegende Datenquelle und gibt die IDataInput-Instanz zurück, mit der sie gelesen werden kann.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><returns>the underlying data source.
		 
		 </returns></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:IDataInput</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Öffnet die zugrunde liegende Datenquelle und gibt die IDataInput-Instanz zurück, mit der sie gelesen werden kann.
		 
		 <p class="- topic/p ">Wenn die zugrunde liegende Datenquelle asynchron ist, setzt das MediaPromise-Objekt <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignisse ab, um anzuzeigen, ob Daten zum Lesen verfügbar sind. Wenn die Datenquelle synchron ist, sind alle Daten sofort verfügbar, weshalb diese Ereignisse nicht abgesetzt werden.</p>
		 
		 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Sie können ein MediaPromise-Objekt mit der <codeph class="+ topic/ph pr-d/codeph ">loadFilePromise()</codeph>-Methode der Loader-Klasse laden, anstatt die Daten manuell zu lesen.</p>
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader/loadFilePromise()" class="- topic/link "><linktext class="- topic/linktext ">Loader.loadFilePromise()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:MediaPromise:reportError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reportError</apiName><shortdesc class="- topic/shortdesc "> 
		 Wird von der Laufzeitumgebung verwendet, um Fehler zu melden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">e</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.events:ErrorEvent</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das abzusetzende Fehlerereignis. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 Wird von der Laufzeitumgebung verwendet, um Fehler zu melden.
		 
		 <p class="- topic/p ">Anwendungscode sollte diese Methode nicht aufrufen.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.media:MediaPromise:file:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">file</apiName><shortdesc class="- topic/shortdesc ">
		 Die File-Instanz, die das Medienobjekt repräsentiert, falls eines vorhanden ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Die File-Instanz, die das Medienobjekt repräsentiert, falls eines vorhanden ist.
		 
		 <p class="- topic/p ">Die Eigenschaft verweist auf ein File-Objekt, wenn die zugrunde liegende Datenquelle dateibasiert ist und die Datei für die Anwendung zugänglich ist. Andernfalls ist die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MediaPromise:isAsync:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isAsync</apiName><shortdesc class="- topic/shortdesc ">
		 Gibt an, ob die zugrunde liegende Datenquelle asynchron oder synchron ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Gibt an, ob die zugrunde liegende Datenquelle asynchron oder synchron ist.
		 
		 <p class="- topic/p "/>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MediaPromise:mediaType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">mediaType</apiName><shortdesc class="- topic/shortdesc ">
		 Der allgemeine Medientyp, entweder Bild oder Video.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Der allgemeine Medientyp, entweder Bild oder Video.
		 
		 <p class="- topic/p ">Die Konstanten in der MediaType-Klasse definieren mögliche Werte für diese Eigenschaft:</p>
		 <ul class="- topic/ul "><li class="- topic/li ">MediaType.IMAGE</li><li class="- topic/li ">MediaType.VIDEO</li></ul>
		 
		 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#MediaType" class="- topic/link "><linktext class="- topic/linktext ">MediaType</linktext></link></related-links></apiValue><apiValue id="flash.media:MediaPromise:relativePath:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">relativePath</apiName><shortdesc class="- topic/shortdesc ">
		 Der Dateiname des Medienobjekts, falls eines vorhanden ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Der Dateiname des Medienobjekts, falls eines vorhanden ist.
		 
		 <p class="- topic/p ">Ein Dateiname ist verfügbar, wenn die zugrunde liegende Datenquelle dateibasiert ist und die Datei für die Anwendung zugänglich ist. Andernfalls ist die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:SoundLoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoundLoaderContext</apiName><shortdesc class="- topic/shortdesc ">
 Über die SoundLoaderContext-Klasse werden Sicherheitsprüfungen bei Dateien durchgeführt, in denen Sounddaten geladen werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Über die SoundLoaderContext-Klasse werden Sicherheitsprüfungen bei Dateien durchgeführt, in denen Sounddaten geladen werden. SoundLoaderContext-Objekte werden als Argument für den Konstruktor und die <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>-Methode der Soundklasse übergeben.
 
 <p class="- topic/p ">Beachten Sie bei Verwendung dieser Klasse das folgende Sicherheitsmodell: </p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Sounddaten können nicht geladen und wiedergegeben werden, wenn sich die aufrufende Datei in einer Netzwerk-Sandbox befindet und die zu ladende Sounddatei lokal gespeichert ist.</li><li class="- topic/li ">In der Standardeinstellung ist das Laden und die Wiedergabe von Sounddaten nicht zulässig, wenn über die aufrufende lokale Datei Sound remote geladen und wiedergegeben werden soll. Benutzer müssen für diesen Vorgang eine explizite Berechtigung erteilen.</li><li class="- topic/li ">Für bestimmte Vorgänge bei Sounddaten liegen Beschränkungen vor. Auf die Daten in einem geladenen Sound kann nicht von einer Datei in einer anderen Domäne zugegriffen werden, es sei denn, Sie implementieren eine URL-Richtliniendatei. Zu den soundbezogenen APIs, die unter diese Beschränkung fallen, zählen die <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph>-Eigenschaft sowie die Methoden <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.computeSpectrum()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.bufferTime</codeph> und <codeph class="+ topic/ph pr-d/codeph ">SoundTransform()</codeph>.</li></ul>
 
 <p class="- topic/p ">In Adobe AIR unterliegt Inhalt in der Sicherheitssandbox <codeph class="+ topic/ph pr-d/codeph ">der Anwendung</codeph> (Inhalt, der mit der AIR-Anwendung installiert wird) nicht diesen Sicherheitseinschränkungen.</p>
 
 <p class="- topic/p ">Weitere Informationen zum Thema Sicherheit finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Sicherheit</xref>.</p>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.media:SoundLoaderContext:SoundLoaderContext" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SoundLoaderContext</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt ein neues SoundLoaderContext-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bufferTime</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1000</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Anzahl der Sekunden zum Laden von Streamingsound in einen Puffer vor dem Streaming.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">checkPolicyFile</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob beim Laden des Objekts nach dem Vorhandensein einer URL-Richtliniendatei gesucht werden soll (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt ein neues SoundLoaderContext-Objekt.  
     
     </apiDesc><example conref="examples\SoundLoaderContextExample.as" class="- topic/example "> Im folgenden Beispiel wird der Puffer für zu ladenden Sound auf drei Sekunden eingestellt.
 
 <p class="- topic/p ">Der erste Parameter eines SoundLoaderContext-Objekts (<codeph class="+ topic/ph pr-d/codeph ">context</codeph>) wird verwendet, um den Standardpufferwert von einer Sekunde auf drei Sekunden zu erhöhen. (Der Wert wird in Millisekunden angegeben.) Wenn der zweite Parameter des SoundLoaderContext-Objekts auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt wird, prüft Flash Player beim Laden des Objekts, ob eine Cross-Domain-Richtliniendatei vorhanden ist. Hier wurde der Standardwert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> verwendet, sodass keine Überprüfung der Richtliniendatei stattfindet. Die <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>-Methode des Soundobjekts stellt mithilfe der Kontexteinstellung sicher, dass der Streamingsound drei Sekunden in einen Puffer geladen wird, bevor der Sound gestreamt wird. Das <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph>-Objekt bestimmt die Position der Datei, bei der es sich um ein Podcast von Adobe handelt. Falls beim Laden der Sounddatei ein <codeph class="+ topic/ph pr-d/codeph ">IOErrorEvent.IO_ERROR</codeph>-Fehler auftritt, wird die <codeph class="+ topic/ph pr-d/codeph ">errorHandler()</codeph>-Methode aufgerufen.</p> 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundLoaderContext;
    import flash.events.IOErrorEvent;
    
    public class SoundLoaderContextExample extends Sprite {

        public function SoundLoaderContextExample() {
            var snd:Sound = new Sound();
            var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
            var context:SoundLoaderContext = new SoundLoaderContext(3000, false);

            snd.load(req, context);
            snd.play();      
 
            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace("The sound could not be loaded: " + errorEvent.text);
        }

    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiValue id="flash.media:SoundLoaderContext:bufferTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferTime</apiName><shortdesc class="- topic/shortdesc ">
     Die Anzahl der Millisekunden zum Vorausladen eines Streamingsounds in einen Puffer vor dem Streaming.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1000</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die Anzahl der Millisekunden zum Vorausladen eines Streamingsounds in einen Puffer vor dem Streaming.
     
     <p class="- topic/p ">Beachten Sie, dass der Wert von <codeph class="+ topic/ph pr-d/codeph ">SoundLoaderContext.bufferTime</codeph> durch Festlegen der globalen <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.bufferTime</codeph>-Eigenschaft nicht überschrieben werden kann. <ph class="- topic/ph ">Die <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.bufferTime</codeph>-Eigenschaft wirkt sich auf die Zwischenspeicherzeit für eingebetteten Streamingsound in einer SWF-Datei aus und hängt nicht von dynamisch erstellten Soundobjekten (d. h. den ActionScript erstellten Soundobjekten) ab.</ph></p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundLoaderContext:checkPolicyFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">checkPolicyFile</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob die Anwendung vor dem Laden von Sound eine Cross-Domain-Richtliniendatei vom Server des geladenen Sounds herunterladen soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>: please review at same time: checkPolicyFile property in LoaderContext, NetStream
     </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob die Anwendung vor dem Laden von Sound eine Cross-Domain-Richtliniendatei vom Server des geladenen Sounds herunterladen soll. Diese Eigenschaft wird über die <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph>-Methode auf Sound angewendet, der von außerhalb der Domäne der aufrufenden Datei geladen wird.
     
     
     
     <p class="- topic/p ">Setzen Sie diese Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn Sie Sound von außerhalb der Domäne der aufrufenden Datei laden und Code in der aufrufenden Datei Zugriff auf niedriger Ebene auf die Sounddaten benötigt. Zu den Beispielen für Sounddaten-Zugriff auf niedriger Ebene gehört der Verweis auf die <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph>-Eigenschaft zum Abrufen eines ID3Info-Objekts oder der Aufruf der <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.computeSpectrum()</codeph>-Methode zum Abrufen von Soundbeispielen des geladenen Sounds. Wenn Sie während des Ladevorgangs auf Sounddaten zugreifen, ohne die <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> zu setzen, wird möglicherweise eine SecurityError-Ausnahme ausgelöst, da die erforderliche Richtliniendatei nicht heruntergeladen wurde.</p>
     
     <p class="- topic/p ">Wenn kein Zugriff auf niedriger Ebene auf die zu ladenden Sounddaten erforderlich ist, setzen Sie <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> nicht auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Die Suche nach einer Richtliniendatei beansprucht Netzwerkbandbreite und verzögert möglicherweise den Start des Downloads. Sie sollte daher nur durchgeführt werden, wenn dies unbedingt erforderlich ist.</p>
     
     <p class="- topic/p ">Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> aufrufen und <codeph class="+ topic/ph pr-d/codeph ">SoundLoaderContext.checkPolicyFile</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt ist, muss Flash Player oder AIR entweder erfolgreich eine relevante URL-Richtliniendatei herunterladen oder feststellen, dass keine derartige Richtliniendatei existiert, bevor der angegebene Sound heruntergeladen wird. In <ph class="- topic/ph ">Flash Player oder </ph>AIR werden die folgenden Aktionen in der angegebenen Reihenfolge ausgeführt, um zu überprüfen, ob eine Richtliniendatei vorhanden ist.</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Flash Player oder AIR überprüft Richtliniendateien, die bereits heruntergeladen wurden.</li><li class="- topic/li ">Flash Player oder AIR versucht, ausstehende Richtliniendateien herunterzuladen, die in Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph> angegeben wurden.</li><li class="- topic/li ">Flash Player oder AIR versucht, eine Richtliniendatei vom Standardspeicherort herunterzuladen, der der URL des Sounds entspricht, d. h. <codeph class="+ topic/ph pr-d/codeph ">/crossdomain.xml</codeph> auf dem gleichen Server wie <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph>. (Die URL des Sounds ist in der <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft des URLRequest-Objekts angegeben, das an <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> oder die Sound()-Konstruktorfunktion übergeben wird.)</li></ul>
     
     <p class="- topic/p ">In allen Fällen muss eine entsprechende Richtliniendatei auf dem Server des Sounds vorhanden sein, über die anhand des Speicherorts der Richtliniendatei auf die Sounddatei unter <codeph class="+ topic/ph pr-d/codeph ">URLRequest.url</codeph> zugegriffen werden kann und über die die Domäne der aufrufenden SWF-Datei über mindestens ein <codeph class="+ topic/ph pr-d/codeph ">&lt;allow-access-from></codeph>-Tag auf den Sound zugreifen kann.
     </p>
     
     <p class="- topic/p ">Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, wird der Sound in Flash Player oder AIR erst geladen, nachdem die Richtliniendatei überprüft wurde. Führen Sie Methoden auf niedriger Ebene für die Sounddaten (z. B. Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.computeSpectrum()</codeph>) erst durch, nachdem die Ereignisse <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> und <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> über das Soundobjekt ausgelöst wurden.
     </p>
     
     <p class="- topic/p ">Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen und keine passende Richtliniendatei gefunden wird, wird erst dann ein Fehler zurückgegeben, wenn Sie eine Methode ausführen, die eine Richtliniendatei benötigt. In diesem Fall meldet Flash Player oder AIR einen <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph>-Ausnahmefehler. Nach dem Empfang eines <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignisses können Sie testen, ob eine entsprechende Richtliniendatei gefunden wurde. Rufen Sie dazu den Wert von <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph> in einem <codeph class="+ topic/ph pr-d/codeph ">try</codeph>-Block ab, und überprüfen Sie, ob <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> ausgegeben wird.</p>
     
     
     <p class="- topic/p ">Bei Verwendung von <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph> beim Herunterladen eines Sounds von einer URL, bei der serverseitige HTTP-Weiterleitungen verwendet werden, ist Folgendes zu beachten: Flash Player oder AIR versucht, Richtliniendateien abzurufen, die mit der <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft des an <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> übergebenen URLRequest-Objekts übereinstimmen. Wenn die endgültige Sounddatei aufgrund von HTTP-Weiterleitungen von einer anderen URL stammt, gelten die ursprünglich heruntergeladenen Richtliniendateien möglicherweise nicht für die endgültige URL des Sounds. Dies ist jedoch die URL, die bei Sicherheitsentscheidungen von Bedeutung ist.</p>
     
     <p class="- topic/p ">Es folgt eine mögliche Lösung für diese Situation. Nach dem Empfang eines <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignisses können Sie den Wert der <codeph class="+ topic/ph pr-d/codeph ">Sound.url</codeph>-Eigenschaft überprüfen, die die endgültige URL des Sounds enthält. Rufen Sie dann die <codeph class="+ topic/ph pr-d/codeph ">Security.loadPolicyFile()</codeph>-Methode mit der URL einer Richtliniendatei auf, die auf der endgültigen URL des Sounds beruht. Rufen Sie schließlich den Wert von <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph> auf, bis keine Ausnahme mehr ausgegeben wird.</p>
     
     <p class="- topic/p ">Dies bezieht sich nicht auf Inhalt in der Sandbox der AIR-Anwendung. Inhalt in der Anwendungssandbox hat immer (unabhängig von seiner Herkunft) programmgesteuerten Zugriff auf Soundinhalt.</p>
     
     <p class="- topic/p ">Weitere Informationen zum Thema Sicherheit finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Sicherheit</xref>.</p>
     
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/load()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.load()</linktext></link><link href="flash.media.xml#Sound/id3" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.id3</linktext></link><link href="flash.media.xml#SoundMixer/computeSpectrum()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundMixer.computeSpectrum()</linktext></link><link href="flash.media.xml#Sound/url" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound.url</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.loadPolicyFile()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:SoundChannel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoundChannel</apiName><shortdesc class="- topic/shortdesc ">
 Die SoundChannel-Klasse steuert Sound in einer Anwendung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
  
  </refpath></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die SoundChannel-Klasse steuert Sound in einer Anwendung. Jeder Sound ist einem Soundkanal zugewiesen, und die Anwendung kann über mehrere Soundkanäle verfügen, die zusammengemischt werden. Die SoundChannel-Klasse enthält eine <codeph class="+ topic/ph pr-d/codeph ">stop()</codeph>-Methode, Eigenschaften zum Überwachen der Amplitude (Lautstärke) eines Kanals und eine Eigenschaft zum Zuweisen eines SoundTransform-Objekts zu einem Kanal.
 
 </apiDesc><example conref="examples\SoundChannelExample.as" class="- topic/example "> Im folgenden Beispiel wird eine MP3-Datei geladen und abgespielt und es werden Informationen über Soundereignisse angezeigt, die beim Laden und Abspielen der MP3-Datei auftreten. Ein Timerobjekt stellt alle 50 Millisekunden aktualisierte Informationen zur Position des Abspielkopfs bereit. Legen Sie zur Ausführung dieses Beispiels eine Datei mit dem Namen „MySound.mp3“ in dem Verzeichnis ab, in dem sich die SWF-Datei befindet.

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLRequest;
    import flash.utils.Timer;

    public class SoundChannelExample extends Sprite {
        private var url:String = "MySound.mp3";
        private var soundFactory:Sound;
        private var channel:SoundChannel;
        private var positionTimer:Timer;

        public function SoundChannelExample() {
            var request:URLRequest = new URLRequest(url);
            soundFactory = new Sound();
            soundFactory.addEventListener(Event.COMPLETE, completeHandler);
            soundFactory.addEventListener(Event.ID3, id3Handler);
            soundFactory.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            soundFactory.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            soundFactory.load(request);

            channel = soundFactory.play();
            channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);

            positionTimer = new Timer(50);
            positionTimer.addEventListener(TimerEvent.TIMER, positionTimerHandler);
            positionTimer.start();
        }
        

        private function positionTimerHandler(event:TimerEvent):void {
            trace("positionTimerHandler: " + channel.position.toFixed(2));
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function id3Handler(event:Event):void {
            trace("id3Handler: " + event);
        }

        private function ioErrorHandler(event:Event):void {
            trace("ioErrorHandler: " + event);
            positionTimer.stop();       
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler: " + event);
        }

        private function soundCompleteHandler(event:Event):void {
            trace("soundCompleteHandler: " + event);
            positionTimer.stop();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound" class="- topic/link "><linktext class="- topic/linktext ">Sound</linktext></link><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">SoundTransform</linktext></link></related-links><adobeApiEvent id="flash.media:SoundChannel_flash.events.Event.SOUND_COMPLETE_soundComplete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">soundComplete</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn die Wiedergabe eines Sounds beendet ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SOUND_COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn die Wiedergabe eines Sounds beendet ist. 
 </apiDesc><example conref="examples\SoundChannel_event_soundCompleteExample.as" class="- topic/example "> Im folgenden Beispiel wählt der Benutzer Titel aus einer Wiedergabeliste aus und wählt dann „Play“, um die Lieder in der ausgewählten Reihenfolge abzuspielen.
 
 <p class="- topic/p ">Im Konstruktor wird ein Textfeld definiert, das die Liste der Titel sowie eine Zeile, die zum Abspielen ausgewählt wird, enthält. (Normalerweise werden Schaltflächen für die Wiedergabe und Listenfelder für Titellisten verwendet.) Ein Textformatobjekt wird definiert, das das Format der Titel nach der Auswahl zu kursiv ändert. Wenn ein Benutzer das Textfeld auswählt, wird die Methode <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> aufgerufen.</p> 
 
<p class="- topic/p ">In der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode gibt die <codeph class="+ topic/ph pr-d/codeph ">getLineIndexAtPoint()</codeph>-Methode des Textfeld-Objekts den Index der Zeile, die der Benutzer ausgewählt hat, zurück. Mithilfe des Zeilenindex ruft die Methode <codeph class="+ topic/ph pr-d/codeph ">getLineText()</codeph> den Textinhalt ab. Mit der if-Anweisung wird überprüft, ob der Benutzer eine Auswahl für die Wiedergabe getroffen oder der Wiedergabeliste einen Titel hinzufügt hat. Wenn der Benutzer sich für das Abspielen entschieden hat und ein Titel ausgewählt wurde, wird der Ereignis-Listener für den Mausklick entfernt und die <codeph class="+ topic/ph pr-d/codeph ">playNext()</codeph>-Methode aufgerufen, um mit der Wiedergabe der Titel zu beginnen. Wenn der Benutzer einen Titel ausgewählt hat, wird der Inhalt der Zeile dem Array <codeph class="+ topic/ph pr-d/codeph ">songList</codeph> hinzugefügt und das Format der Zeile wird auf kursiv eingestellt.</p>
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">playNext()</codeph>-Methode durchläuft die Arrayliste, um die einzelnen Titel zu laden und abzuspielen. Der Titel wird auch einem Soundkanal zugewiesen. Ein Ereignis-Listener für den Soundkanal wird hinzugefügt, um zu reagieren, wenn ein Titel abgespielt wurde und das Ereignis <codeph class="+ topic/ph pr-d/codeph ">Event.SOUND_COMPLETE</codeph> ausgelöst wird. Die <codeph class="+ topic/ph pr-d/codeph ">soundCompleteHandler()</codeph>-Methode ruft dann die Methode <codeph class="+ topic/ph pr-d/codeph ">playNext()</codeph> auf, um den nächsten Titel abzuspielen. Dieser Prozess wird fortgesetzt, bis alle im Array aufgeführten Titel abgespielt wurden.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.text.TextFormat;
    import flash.net.URLRequest;
    import flash.events.Event;
    import flash.events.IOErrorEvent;

    public class SoundChannel_event_soundCompleteExample extends Sprite {
        private var channel:SoundChannel = new SoundChannel();
        private var songList:Array = new Array();
        private var listTextField:TextField = new TextField();
        private var songFormat:TextFormat = new TextFormat();
        private var arrayIndex:int = 0;
        private var songSelected:Boolean = false;
        
        public function SoundChannel_event_soundCompleteExample() {
            
            listTextField.autoSize = TextFieldAutoSize.LEFT;
            listTextField.border = true
            listTextField.background = true;
            listTextField.text = "Song1.mp3\n" + "Song2.mp3\n" 
                                + "Song3.mp3\n" + "Song4.mp3\n" + "PLAY";
        
            songFormat.italic = true;
 
            listTextField.addEventListener(MouseEvent.CLICK, clickHandler);
                        
            addChild(listTextField);
        }
        
        private function clickHandler(e:MouseEvent):void {
            var index:int = listTextField.getLineIndexAtPoint(e.localX, e.localY);
            var line:String = listTextField.getLineText(index);
            var firstIndex:uint = listTextField.getLineOffset(index);
            var playLine:uint = listTextField.numLines - 1;

                if((index == playLine) &amp;&amp; (songSelected == true)) {
                    listTextField.removeEventListener(MouseEvent.CLICK, clickHandler);
                    playNext();       

                } else if (index != playLine) {
                     songList.push(line.substr(0, (line.length - 1)));
                     listTextField.setTextFormat(songFormat, firstIndex, 
                                (firstIndex + listTextField.getLineLength(index)));     
                    songSelected = true;
                 }
        }

        private function playNext():void {
 
             if(arrayIndex &lt; songList.length) {
                var snd:Sound = new Sound();
                snd.load(new URLRequest(songList[arrayIndex]));
                channel = snd.play();
                
                channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);
                arrayIndex++;
 
            } else {
                songSelected = false;
                    
                while(arrayIndex > 0) {
                    songList.pop();
                    arrayIndex--;
                }
            }
        }    

        private function soundCompleteHandler(e:Event):void {
            playNext();
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }
    }
}
</codeblock></example></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.media:SoundChannel:stop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">stop</apiName><shortdesc class="- topic/shortdesc "> 
	 Beendet die Wiedergabe des im Kanal wiedergegebenen Sounds.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	 
	 </refpath></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Beendet die Wiedergabe des im Kanal wiedergegebenen Sounds.
	 
	 </apiDesc><example conref="examples\SoundChannel_stopExample.as" class="- topic/example "> Im folgenden Beispiel kann der Benutzer eine Sounddatei anhalten und fortsetzen.
 
 <p class="- topic/p ">Im Konstruktor wird die Sounddatei geladen. (In diesem Beispiel wird davon ausgegangen, dass sich die Datei im selben Verzeichnis wie die SWF-Datei befindet.) Als Schaltfläche, mit der der Benutzer Sound abspielen oder anhalten kann, wird ein Textfeld verwendet. Wenn der Benutzer das Textfeld <codeph class="+ topic/ph pr-d/codeph ">button</codeph> auswählt, wird die <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode aufgerufen.</p>
 
 <p class="- topic/p ">In der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode wird Sound auf die Wiedergabe eingestellt und einem Soundkanal zugewiesen, wenn der Benutzer das Textfeld zum ersten Mal auswählt. Wenn der Benutzer das Textfeld das nächste Mal auswählt, wird die Soundwiedergabe angehalten. Die <codeph class="+ topic/ph pr-d/codeph ">position</codeph>-Eigenschaft des Soundkanals zeichnet die Position des Sounds zum Zeitpunkt des Stopps auf. Diese Eigenschaft wird verwendet, um den Sound ab dieser Position weiter abzuspielen, nachdem der Benutzer das Textfeld ausgewählt hat, um die Wiedergabe fortzusetzen. Bei jedem Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">Sound.play()</codeph>-Methode wird ein neues SoundChannel-Objekt erstellt und der Variablen <codeph class="+ topic/ph pr-d/codeph ">channel</codeph> zugewiesen. Das Soundobjekt muss einem SoundChannel-Objekt zugewiesen werden, um mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">stop()</codeph> des Soundkanals den Sound anzuhalten.</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.events.MouseEvent;
    import flash.text.TextFieldAutoSize;
            
    public class SoundChannel_stopExample extends Sprite {
        private var snd:Sound = new Sound();
        private var channel:SoundChannel = new SoundChannel();
        private var button:TextField = new TextField();

        public function SoundChannel_stopExample() {
            var req:URLRequest = new URLRequest("MySound.mp3");
            snd.load(req);
            
            button.x = 10;
            button.y = 10;
            button.text = "PLAY";
            button.border = true;
            button.background = true;
            button.selectable = false;
            button.autoSize = TextFieldAutoSize.CENTER;

            button.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(button);
        }

        private function clickHandler(e:MouseEvent):void {
            var pausePosition:int = channel.position;

            if(button.text == "PLAY") {
                channel = snd.play(pausePosition);
                button.text = "PAUSE";
            } 
            else {
                channel.stop();
                button.text = "PLAY";
            }
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.media:SoundChannel:leftPeak:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">leftPeak</apiName><shortdesc class="- topic/shortdesc "> 
	 Die aktuelle Amplitude (Lautstärke) des linken Kanals von 0 (stumm) bis 1 (volle Amplitude).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Die aktuelle Amplitude (Lautstärke) des linken Kanals von 0 (stumm) bis 1 (volle Amplitude).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundChannel:position:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">position</apiName><shortdesc class="- topic/shortdesc ">
	 Wenn Sound abgespielt wird, zeigt die Positionseigenschaft die aktuelle Stelle, die in der Sounddatei abgespielt wird, in Millisekunden an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Wenn Sound abgespielt wird, zeigt die <codeph class="+ topic/ph pr-d/codeph ">Positionseigenschaft</codeph> die aktuelle Stelle, die in der Sounddatei abgespielt wird, in Millisekunden an. Wenn Sound beendet oder angehalten wurde, zeigt die <codeph class="+ topic/ph pr-d/codeph ">Positionseigenschaft</codeph> die zuletzt abgespielte Stelle in der Sounddatei an.
	 
	 <p class="- topic/p ">Häufig wird der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">position</codeph> gespeichert, wenn der Sound gestoppt wird. Sie können die Wiedergabe später fortsetzen, indem Sie sie an der gespeicherten Position starten.
	 </p>
	 
	 <p class="- topic/p ">Wenn der Sound in einer Schleife wiedergegeben wird, wird <codeph class="+ topic/ph pr-d/codeph ">position</codeph> am Anfang jeder Schleife auf 0 zurückgesetzt.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundChannel:rightPeak:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rightPeak</apiName><shortdesc class="- topic/shortdesc "> 
	 Die aktuelle Amplitude (Lautstärke) des rechten Kanals von 0 (stumm) bis 1 (volle Amplitude).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Die aktuelle Amplitude (Lautstärke) des rechten Kanals von 0 (stumm) bis 1 (volle Amplitude).
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundChannel:soundTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">soundTransform</apiName><shortdesc class="- topic/shortdesc "> 
	 Das SoundTransform-Objekt, das dem Soundkanal zugewiesen wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
	  
	  </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Das SoundTransform-Objekt, das dem Soundkanal zugewiesen wurde. Ein SoundTransform-Objekt enthält Eigenschaften zum Festlegen von Lautstärke, Schwenkung sowie Zuordnung von linkem und rechtem Lautsprecher.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">SoundTransform</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:SoundMixer" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoundMixer</apiName><shortdesc class="- topic/shortdesc ">
Die SoundMixer-Klasse enthält statische Eigenschaften und Methoden für globale Soundsteuerung innerhalb der Anwendung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Die SoundMixer-Klasse enthält statische Eigenschaften und Methoden für globale Soundsteuerung innerhalb der Anwendung. Die SoundMixer-Klasse steuert eingebetteten und Streamingsound in der Anwendung. Sie steuert keine dynamisch erzeugten Sounds (also Sounds, die als Antwort auf Soundobjekte generiert wurden, die ein <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis auslösen).

</apiDesc></apiClassifierDetail><apiOperation id="flash.media:SoundMixer:areSoundsInaccessible" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">areSoundsInaccessible</apiName><shortdesc class="- topic/shortdesc "> 
     Gibt an, ob aufgrund der Sicherheitsbeschränkungen nicht auf Sound zugegriffen werden darf.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Stringdarstellung des booleschen Werts.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     Gibt an, ob aufgrund der Sicherheitsbeschränkungen nicht auf Sound zugegriffen werden darf. Beispielsweise kann auf Sound, der von einer anderen Domäne als der des Inhalts, der diese Methode aufruft, geladen wird, nicht zugegriffen werden, wenn der Server für den Sound keine URL-Richtliniendatei hat, die Zugriff auf diese Domäne gewährt. Sound kann zwar geladen und wiedergegeben werden, Methoden auf niedriger Ebene, z. B. Abrufen von ID3-Metadaten für Sound, können jedoch nicht durchgeführt werden.
     
     <p class="- topic/p ">Bei Inhalten von AIR-Anwendungen in der Sicherheitssandbox der Anwendung wird beim Aufrufen dieser Methode immer <codeph class="+ topic/ph pr-d/codeph ">false</codeph> zurückgegeben. Alle Sounds, einschließlich der aus anderen Domänen geladenen, sind für Inhalte in der Sicherheitssandbox der Anwendung zugänglich.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundMixer/computeSpectrum()" class="- topic/link "><linktext class="- topic/linktext ">computeSpectrum()</linktext></link></related-links></apiOperation><apiOperation id="flash.media:SoundMixer:computeSpectrum" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">computeSpectrum</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt einen Schnappschuss der aktuellen Schallwelle und legt ihn im angegebenen ByteArray-Objekt ab.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Should confirm if the floating point numbers are single- or double-precision.
     
     </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">outputArray</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein ByteArray-Objekt mit den Werten, die mit dem Sound verknüpft sind. Wenn auf Sound aufgrund von Sicherheitsbeschränkungen nicht zugegriffen werden kann (<codeph class="+ topic/ph pr-d/codeph ">areSoundsInaccessible == true</codeph>), bleibt das <codeph class="+ topic/ph pr-d/codeph ">outputArray</codeph>-Objekt unverändert. Wenn sämtlicher Sound gestoppt wird, ist das <codeph class="+ topic/ph pr-d/codeph ">outputArray</codeph>-Objekt mit Nullen gefüllt.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">FFTMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein boolescher Wert, der angibt, ob für die Sounddaten zunächst eine Fourier-Transformation durchgeführt wird. Wenn Sie diesen Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, gibt die Methode statt der unformatierten Schallwelle ein Frequenzspektrum zurück. Im Frequenzspektrum sind niedrige Frequenzen im linken Bereich und hohe Frequenzen im rechten Bereich dargestellt.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stretchFactor</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Auflösung der Soundsamples. Wenn Sie den <codeph class="+ topic/ph pr-d/codeph ">stretchFactor</codeph>-Wert auf 0 setzen, werden die Daten mit 44,1 KHz gesampelt, beim Wert 1 mit 22,05 KHz, beim Wert 2 mit 11,025 KHz usw.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt einen Schnappschuss der aktuellen Schallwelle und legt ihn im angegebenen ByteArray-Objekt ab. Die Werte werden als normalisierte Gleitkommawerte im Bereich zwischen -1,0 und 1,0 formatiert. Das für den <codeph class="+ topic/ph pr-d/codeph ">outputArray</codeph>-Parameter übergebene ByteArray-Objekt wird mit den neuen Werten überschrieben. Die Größe des erstellten ByteArray-Objekts ist auf 512 Gleitkommawerte festgelegt, wobei die ersten 256 Werte den linken Kanal darstellen und die restlichen 256 Werte den rechten Kanal.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis</b>: Diese Methode unterliegt den Sicherheitsbeschränkungen für lokale Dateien und den Beschränkungen für Cross-Domain-Ladevorgänge. Bei Verwendung lokaler Dateien oder von Sound, der über einen Server in einer anderen Domäne als die des aufrufenden Inhalts geladen wurde, müssen Sie die Sandbox-Beschränkungen möglicherweise durch eine Cross-Domain-Richtliniendatei umgehen. Weitere Informationen finden Sie in der Beschreibung zur Soundklasse. Darüber hinaus können mit dieser Methode keine Daten aus RTMP-Streams extrahiert werden, auch wenn die Methode über Inhalt aufgerufen wird, die sich in der gleichen Domäne wie der RTMP-Server befinden.</p>
     
     
     <p class="- topic/p ">Diese Methode wird über RTMP in Flash Player 9.0.115.0 und höher und in Adobe AIR unterstützt. Sie können den Zugriff auf Streams auf Flash Media Server in einem serverseitigen Skript steuern. Weitere Informationen finden Sie in den Abschnitten zu den Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">Client.audioSampleAccess</codeph> und <codeph class="+ topic/ph pr-d/codeph ">Client.videoSampleAccess</codeph> in <xref href="http://www.adobe.com/go/documentation_de" scope="external" class="- topic/xref "> <i class="+ topic/ph hi-d/i ">Server-Side ActionScript Language Reference for Adobe Flash Media Server</i></xref>.</p>
     
     </apiDesc><example conref="examples\SoundMixer_computeSpectrumExample.as" class="- topic/example "> Im folgenden Beispiel wird mit der <codeph class="+ topic/ph pr-d/codeph ">computeSpectrum()</codeph>-Methode eine grafische Darstellung der Soundwellendaten erzeugt. 
 
 <p class="- topic/p ">Im Konstruktor wird eine Sounddatei geladen und für die Wiedergabe eingerichtet. (In diesem Beispiel wird keine Fehlerverarbeitung verwendet, und es wird davon ausgegangen, dass sich die Sounddatei im selben Verzeichnis befindet wie die SWF-Datei.) Im Beispiel wird auf das Ereignis <codeph class="+ topic/ph pr-d/codeph ">Event.ENTER_FRAME</codeph> gewartet, während der Sound abgespielt wird. Dabei wird wiederholt die Methode <codeph class="+ topic/ph pr-d/codeph ">onEnterFrame()</codeph> aufgerufen, um eine Kurve mit den Werten der Sounddaten zu zeichnen. Wenn die Wiedergabe beendet ist, stoppt die <codeph class="+ topic/ph pr-d/codeph ">onPlaybackComplete()</codeph>-Methode das Zeichnen, indem sie den Listener für das <codeph class="+ topic/ph pr-d/codeph ">Event.ENTER_FRAME</codeph>-Ereignis entfernt.</p>
 
 <p class="- topic/p ">In der <codeph class="+ topic/ph pr-d/codeph ">onEnterFrame()</codeph>-Methode speichert die <codeph class="+ topic/ph pr-d/codeph ">computeSpectrum()</codeph>-Methode den unformatierten Sound im Bytearray-Objekt <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>. Die Daten werden mit 44,1 KHz gesampelt. Der Bytearray enthält 512 Byte Daten, die jeweils einen Gleitkommawert zwischen -1 und 1 aufweisen. Die ersten 256 Werte repräsentieren den linken Kanal, die zweiten 256 den rechten Kanal. Die erste for-Schleife liest die ersten 256 Datenwerte (den linken Stereokanal) und zeichnet mithilfe der <codeph class="+ topic/ph pr-d/codeph ">Graphics.lineTo()</codeph>-Methode eine Linie von jedem Punkt zum nächsten. (Die Vektorgrafikanzeige der Soundwelle wird direkt in das Sprite-Objekt der Klasse geschrieben.) Die Soundbyte werden als 32-Bit-Gleitkommazahl vom Bytestream gelesen und mit der Plothöhe multipliziert, um den vertikalen Bereich der Kurve aufzunehmen. Die Breite wird auf das Doppelte der Breite der Kanallänge festgelegt. Die zweite for-Schleife liest die nächsten 256 Werte (den rechten Stereokanal) und plottet die Linien in umgekehrter Reihenfolge. Die Methoden <codeph class="+ topic/ph pr-d/codeph ">g.lineTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);</codeph> und <codeph class="+ topic/ph pr-d/codeph ">g.lineTo(0, PLOT_HEIGHT);</codeph> zeichnen die Grundlinien für die Wellen. Die resultierende Wellenform produziert einen Spiegelbildeffekt.</p>  

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.Event;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.media.SoundMixer;
    import flash.net.URLRequest;
    import flash.utils.ByteArray;
    import flash.text.TextField;

    public class SoundMixer_computeSpectrumExample extends Sprite {

        public function SoundMixer_computeSpectrumExample() {
            var snd:Sound = new Sound();
            var req:URLRequest = new URLRequest("Song1.mp3");
            snd.load(req);
            
            var channel:SoundChannel;
            channel = snd.play();
            addEventListener(Event.ENTER_FRAME, onEnterFrame);
            channel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);
        }

        private function onEnterFrame(event:Event):void {
            var bytes:ByteArray = new ByteArray();
            const PLOT_HEIGHT:int = 200;
            const CHANNEL_LENGTH:int = 256;

            SoundMixer.computeSpectrum(bytes, false, 0);
            
            var g:Graphics = this.graphics;
            
            g.clear();
       
            g.lineStyle(0, 0x6600CC);
            g.beginFill(0x6600CC);
            g.moveTo(0, PLOT_HEIGHT);
            
            var n:Number = 0;
            
            for (var i:int = 0; i &lt; CHANNEL_LENGTH; i++) {
                n = (bytes.readFloat() * PLOT_HEIGHT);
                g.lineTo(i * 2, PLOT_HEIGHT - n);
            }

            g.lineTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);
            g.endFill();
 
            g.lineStyle(0, 0xCC0066);
            g.beginFill(0xCC0066, 0.5);
            g.moveTo(CHANNEL_LENGTH * 2, PLOT_HEIGHT);
            
            for (i = CHANNEL_LENGTH; i > 0; i--) {
                n = (bytes.readFloat() * PLOT_HEIGHT);
                g.lineTo(i * 2, PLOT_HEIGHT - n);
            }
  
            g.lineTo(0, PLOT_HEIGHT);
            g.endFill();
        }
        
        private function onPlaybackComplete(event:Event):void {
            removeEventListener(Event.ENTER_FRAME, onEnterFrame);
        }
    }
}

</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundMixer/areSoundsInaccessible()" class="- topic/link "><linktext class="- topic/linktext ">areSoundsInaccessible()</linktext></link><link href="flash.utils.xml#ByteArray" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.ByteArray</linktext></link><link href="flash.media.xml#Sound" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Sound</linktext></link><link href="flash.media.xml#SoundLoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundLoaderContext.checkPolicyFile</linktext></link></related-links></apiOperation><apiOperation id="flash.media:SoundMixer:stopAll" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">stopAll</apiName><shortdesc class="- topic/shortdesc ">
     Stoppt sämtlichen derzeit wiedergegebenen Sound.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Stoppt sämtlichen derzeit wiedergegebenen Sound. 
     
     <p class="- topic/p ">>In Flash Professional stoppt diese Methode den Abspielkopf nicht. Wenn der Abspielkopf Bilder erreicht, in denen Streamingsound enthalten ist, wird die Wiedergabe dieses Sounds fortgesetzt.</p>
     
     <p class="- topic/p ">Beachten Sie bei Verwendung dieser Eigenschaft das folgende Sicherheitsmodell von:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "> In der Standardeinstellung wird durch Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">soundMixer.stopAll()</codeph>-Methode nur der Sound gestoppt, der sich in der gleichen Sicherheitssandbox wie das Objekt befindet, das die Methode aufruft. Sound, dessen Wiedergabe nicht über die gleiche Sandbox wie die des aufrufenden Objekts gestartet wurde, wird nicht gestoppt.</li><li class="- topic/li ">Wenn Sie Sound mithilfe der <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>-Methode der Soundklasse laden, können Sie einen <codeph class="+ topic/ph pr-d/codeph ">context</codeph>-Parameter angeben, bei dem es sich um ein SoundLoaderContext-Objekt handelt. Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph>-Eigenschaft des SoundLoaderContext-Objekts auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, wird in <ph class="- topic/ph ">Flash Player oder </ph>AIR auf dem Server eine Cross-Domain-Richtliniendatei gesucht, über die der Sound geladen wird. Wenn der Server über eine Cross-Domain-Richtliniendatei verfügt und die Datei die Domäne des aufrufenden Inhalts zulässt, kann die Datei den geladenen Sound über die <codeph class="+ topic/ph pr-d/codeph ">soundMixer.stopAll()</codeph>-Methode stoppen. Andernfalls ist dies nicht möglich.</li></ul>
     
     <p class="- topic/p ">In Adobe AIR unterliegt Inhalt in der Sicherheitssandbox <codeph class="+ topic/ph pr-d/codeph ">der Anwendung</codeph> (Inhalt, der mit der AIR-Anwendung installiert wird) nicht diesen Sicherheitseinschränkungen.</p>
     
     <p class="- topic/p ">Weitere Informationen zum Thema Sicherheit finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Sicherheit</xref>.</p>
     
     </apiDesc><example conref="examples\SoundMixer_stopAllExample.as" class="- topic/example "> Im folgenden Beispiel werden mit der Methode <codeph class="+ topic/ph pr-d/codeph ">stopAll()</codeph> zwei Sounds stummgeschaltet, die gleichzeitig abgespielt werden. 
 
 <p class="- topic/p ">Im Konstruktor werden zwei unterschiedliche Sounddateien geladen und für das Abspielen eingestellt. Der erste Sound wird lokal geladen und einem Soundkanal zugewiesen. (Es wird davon ausgegangen, dass sich die Datei im selben Verzeichnis wie die SWF-Datei befindet.) Die zweite Datei wird von der Adobe-Site geladen und gestreamt. Damit die Methode <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.stopAll()</codeph> verwendet werden kann, müssen alle Sounds zugänglich sein. (Für Überprüfung der domänenübergreifenden Richtliniendatei kann ein SoundLoaderContext-Objekt verwendet werden.) Jeder Sound verfügt auch über einen Ereignis-Listener, der aufgerufen wird, wenn beim Laden der Sounddatei ein IO-Fehler auftritt. Des Weiteren wird ein Textfeld <codeph class="+ topic/ph pr-d/codeph ">muteButton</codeph> erstellt. Es wartet auf ein Klickereignis, das die Methode <codeph class="+ topic/ph pr-d/codeph ">muteButtonClickHandler()</codeph> aufruft.</p>
 
 <p class="- topic/p ">Wenn in der <codeph class="+ topic/ph pr-d/codeph ">muteButtonClickHandler()</codeph>-Methode der Inhalt des Textfelds „MUTE“ ist, überprüft die <codeph class="+ topic/ph pr-d/codeph ">areSoundsInaccessible()</codeph>-Methode, ob der Soundmischer Zugriff auf die Dateien hat. Wenn auf die Dateien zugegriffen werden kann, stoppt die <codeph class="+ topic/ph pr-d/codeph ">stopAll()</codeph>-Methode die Sounds. Bei der erneuten Auswahl des Textfelds beginnt die Wiedergabe der ersten Sounddatei, und der Inhalt des Textfelds ändert sich zu „MUTE“. Dieses Mal schaltet die Methode <codeph class="+ topic/ph pr-d/codeph ">stopAll()</codeph> die einzige Sounddatei, die abgespielt wird, stumm. Die <codeph class="+ topic/ph pr-d/codeph ">stop()</codeph>-Methode des Soundkanals kann auch dazu verwendet werden, einen bestimmten Sound, der dem Kanal zugewiesen ist, zu stoppen. (Dazu muss der Sound dem Kanal jedes Mal neu zugewiesen werden, wenn die <codeph class="+ topic/ph pr-d/codeph ">play()</codeph>-Methode aufgerufen wird.)</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundLoaderContext;
    import flash.media.SoundChannel;
    import flash.media.SoundMixer;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.events.IOErrorEvent;

    public class SoundMixer_stopAllExample extends Sprite  {
        private var firstSound:Sound = new Sound();
        private var secondSound:Sound = new Sound();
        private var muteButton:TextField = new TextField();
        private var channel1:SoundChannel = new SoundChannel();
        
        public function SoundMixer_stopAllExample() {
            firstSound.load(new URLRequest("mySound.mp3"));
            secondSound.load(new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3"));

            firstSound.addEventListener(IOErrorEvent.IO_ERROR, firstSoundErrorHandler);
            secondSound.addEventListener(IOErrorEvent.IO_ERROR, secondSoundErrorHandler);
            
            channel1 = firstSound.play();
            secondSound.play();
            
            muteButton.autoSize = TextFieldAutoSize.LEFT;
            muteButton.border = true;
            muteButton.background = true;
            muteButton.text = "MUTE";
        
            muteButton.addEventListener(MouseEvent.CLICK, muteButtonClickHandler);         
        
            this.addChild(muteButton);
        }

        private function muteButtonClickHandler(event:MouseEvent):void {

            if(muteButton.text == "MUTE") {        
  
                if(SoundMixer.areSoundsInaccessible() == false) {
                    SoundMixer.stopAll();
                    muteButton.text = "click to play only one of sound.";
                }
                else {
                    muteButton.text = "The sounds are not accessible.";
                }
            }
           else {
                firstSound.play();        
                muteButton.text = "MUTE";
           }
        } 

        private function firstSoundErrorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }

        private function secondSoundErrorHandler(errorEvent:IOErrorEvent):void {
            trace(errorEvent.text);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.media:SoundMixer:bufferTime:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bufferTime</apiName><shortdesc class="- topic/shortdesc ">
     Die Anzahl der Sekunden zum Laden eines eingebetteten Streamingsounds in einen Puffer vor dem Streaming.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die Anzahl der Sekunden zum Laden eines eingebetteten Streamingsounds in einen Puffer vor dem Streaming. Auf die Daten in einem geladenen Sound, einschließlich der Zwischenspeicherzeit, kann nicht von einer SWF-Datei, die sich in einer anderen Domäne befindet, zugegriffen werden, es sei denn, Sie implementieren eine Cross-Domain-Richtliniendatei. Weitere Informationen zu Sicherheit und Sound finden Sie in der Beschreibung zur Soundklasse. <ph class="- topic/ph ">Auf die Daten in einem geladenen Sound, einschließlich der Zwischenspeicherzeit, kann über Code in einer anderen Domäne nur zugegriffen werden, wenn eine Cross-Domain-Richtliniendatei implementiert ist. In der Anwendungssandbox einer AIR-Anwendung kann Code jedoch auf Daten in Sounddateien aus jeder Quelle zugreifen. Weitere Informationen zu Sicherheit und Sound finden Sie in der Beschreibung zur Soundklasse.</ph> 
     
     <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.bufferTime</codeph>-Eigenschaft wirkt sich nur auf die Zwischenspeicherzeit für eingebetteten Streamingsound in einer SWF-Datei aus und hängt nicht von dynamisch erstellten Soundobjekten (d. h. den in ActionScript erstellten Soundobjekten) ab. Durch den Wert von <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.bufferTime</codeph> kann der Standardwert für die Zwischenspeicherzeit nicht überschrieben oder festgelegt werden, die in dem für die <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph>-Methode übergebenen SoundLoaderContext-Objekt angegeben ist.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound" class="- topic/link "><linktext class="- topic/linktext ">Sound</linktext></link></related-links></apiValue><apiValue id="flash.media:SoundMixer:soundTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">soundTransform</apiName><shortdesc class="- topic/shortdesc "> 
     Das SoundTransform-Objekt, über das die globalen Soundeigenschaften gesteuert werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
     Das SoundTransform-Objekt, über das die globalen Soundeigenschaften gesteuert werden. Ein SoundTransform-Objekt enthält Eigenschaften zum Festlegen von Lautstärke, Schwenkung sowie Zuordnung von linkem und rechtem Lautsprecher. Das in dieser Eigenschaft verwendete SoundTransform-Objekt enthält endgültige Soundeinstellungen, die nach dem Anwenden der einzelnen Soundeinstellungen auf sämtliche Sounds angewendet werden.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">SoundTransform</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:CameraUI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">CameraUI</apiName><shortdesc class="- topic/shortdesc ">
	 Die CameraUI-Klasse ermöglicht Ihnen, ein Standbild oder Video mit der Standardkameraanwendung des Geräts zu erfassen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die CameraUI-Klasse ermöglicht Ihnen, ein Standbild oder Video mit der Standardkameraanwendung des Geräts zu erfassen. 	 
	 
	 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">launch()</codeph>-Methode fordert an, dass das Gerät die standardmäßige Kameraanwendung öffnet. Das erfasste Bild oder Video ist im MediaEvent-Objekt verfügbar, das für das complete-Ereignis abgesetzt wird. Da die standardmäßige Kameraanwendung das Bild oder Video in verschiedenen Formaten speichern kann, gibt es keine Garantie dafür, dass das zurückgegebene Medienobjekt von der AIR-Laufzeitumgebung geladen und angezeigt werden kann. </p>
	 
	 <p class="- topic/p ">Bei einigen Plattformen ist das Medienobjekt, das von der Kamera zurückgegeben wird, als dateibasierte Medienzusage zugänglich. Bei anderen Plattformen ist die Medienzusage nicht dateibasiert und die <codeph class="+ topic/ph pr-d/codeph ">file</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">relativePath</codeph>-Eigenschaften des MediaPromise-Objekts sind <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Verwenden Sie diese Eigenschaften deshalb nicht in Code, der auf mehreren Plattformen verwendet wird.</p>
	 
	 <p class="- topic/p ">Bei einigen Plattformen wird das Medienobjekt automatisch in der Medienbibliothek des Geräts gespeichert. Bei Plattformen, auf denen Bilder und Video nicht automatisch von der Kamerastandardanwendung gespeichert werden, können Sie die CameraRoll-<codeph class="+ topic/ph pr-d/codeph ">addBitmapData()</codeph>-Funktion verwenden, um das Medienobjekt zu speichern.</p>
	 
	 <p class="- topic/p ">Unter Android wird die standardmäßige Kameraanwendung nicht geöffnet, wenn die externe Speicherkarte nicht verfügbar ist (zum Beispiel, wenn der Benutzer die Karte als USB-Massenspeichergerät gemountet hat). Außerdem verliert die AIR-Anwendung, die die Kamera aufgerufen hat, den Fokus. Wenn auf dem Gerät nur noch wenige Ressourcen verfügbar sin, kann die AIR-Anwendung vom Betriebssystem beendet werden, bevor die Medienerfassung abgeschlossen ist.</p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Diese Funktion wird auf mobilen Geräten unterstützt, nicht jedoch auf Desktopbetriebssystemen oder Geräten mit AIR für TV. Mit der <codeph class="+ topic/ph pr-d/codeph ">CameraUI.isSupported</codeph>-Eigenschaft können Sie testen, ob zur Laufzeit Unterstützung gegeben ist. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.</p>
	 
	 </apiDesc><example conref="examples\CameraUIExample.Still.1.as" class="- topic/example "> Im folgenden Beispiel wird die CameraUI-Klasse verwendet, um die standardmäßige Kameraanwendung des Geräts zu öffnen. Wenn der Benutzer ein Foto aufnimmt, wird das Bild der Anzeigeliste hinzugefügt. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package  {
 import flash.desktop.NativeApplication;
 import flash.display.Loader;
 import flash.display.MovieClip;
 import flash.display.StageAlign;
 import flash.display.StageScaleMode;
 import flash.events.ErrorEvent;
 import flash.events.Event;
 import flash.events.IOErrorEvent;
 import flash.events.MediaEvent;
 import flash.media.CameraUI;
 import flash.media.MediaPromise;
 import flash.media.MediaType;
 
     public class CameraUIStillImage extends MovieClip{

          private var deviceCameraApp:CameraUI = new CameraUI();
          private var imageLoader:Loader; 
    
          public function CameraUIStillImage() {
               this.stage.align = StageAlign.TOP_LEFT;
               this.stage.scaleMode = StageScaleMode.NO_SCALE;
       
               if( CameraUI.isSupported )
               {
                trace( "Initializing camera..." );
    
                deviceCameraApp.addEventListener( MediaEvent.COMPLETE, imageCaptured );
                deviceCameraApp.addEventListener( Event.CANCEL, captureCanceled );
                deviceCameraApp.addEventListener( ErrorEvent.ERROR, cameraError );
                deviceCameraApp.launch( MediaType.IMAGE );
               }
               else
               {
                trace( "Camera interface is not supported.");
               }
          }
    
          private function imageCaptured( event:MediaEvent ):void
          {
               trace( "Media captured..." );
       
               var imagePromise:MediaPromise = event.data;
       
               if( imagePromise.isAsync )
               {
                trace( "Asynchronous media promise." );
                imageLoader = new Loader();
                imageLoader.contentLoaderInfo.addEventListener( Event.COMPLETE, asyncImageLoaded );
                imageLoader.addEventListener( IOErrorEvent.IO_ERROR, cameraError );
                
                imageLoader.loadFilePromise( imagePromise );
               }
               else
               {
                trace( "Synchronous media promise." );
                imageLoader.loadFilePromise( imagePromise );
                showMedia( imageLoader );
               }
          }
    
          private function captureCanceled( event:Event ):void
          {
               trace( "Media capture canceled." );
               NativeApplication.nativeApplication.exit();
          }
    
          private function asyncImageLoaded( event:Event ):void
          {
               trace( "Media loaded in memory." );
               showMedia( imageLoader );    
          }
    
          private function showMedia( loader:Loader ):void
          {
               this.addChild( loader );
          }
      
          private function cameraError( error:ErrorEvent ):void
          {
               trace( "Error:" + error.text );
               NativeApplication.nativeApplication.exit();
          }
     }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="http://www.riagora.com/2010/07/android-air-and-the-camera/" class="- topic/link "><linktext class="- topic/linktext ">Michael Chaize: Android, AIR, and the Camera</linktext></link></related-links><adobeApiEvent id="flash.media:CameraUI_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
	 Das cancel-Ereignis wird abgesetzt, wenn der Benutzer die Camera UI schließt, ohne ein Bild oder Video aufzunehmen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Das <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>-Ereignis wird abgesetzt, wenn der Benutzer die Camera UI schließt, ohne ein Bild oder Video aufzunehmen.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:CameraUI_flash.events.ErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 	Das error-Ereignis wird abgesetzt, wenn die standardmäßige Kameraanwendung nicht geöffnet werden kann.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	Das <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis wird abgesetzt, wenn die standardmäßige Kameraanwendung nicht geöffnet werden kann.
	
 	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:CameraUI_flash.events.MediaEvent.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 	Das complete-Ereignis wird abgesetzt, wenn der Benutzer ein Standbild oder Video in der Kameraanwendung aufnimmt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.MediaEvent.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.MediaEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 	Das <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignis wird abgesetzt, wenn der Benutzer ein Standbild oder Video in der Kameraanwendung aufnimmt.
	
 	</apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.media:CameraUI:CameraUI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">CameraUI</apiName><shortdesc class="- topic/shortdesc ">
		 Erstellt ein CameraUI-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Erstellt ein CameraUI-Objekt.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:CameraUI:launch" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">launch</apiName><shortdesc class="- topic/shortdesc ">
		 Startet die standardmäßige Kameraanwendung des Geräts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">requestedMediaType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der zu erfassende Medienobjekttyp. Die gültigen Werte für diesen Parameter werden in der MediaType-Klasse definiert:
		 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">MediaType.IMAGE</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">MediaType.VIDEO</codeph></li></ul> 
		  
		 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Startet die standardmäßige Kameraanwendung des Geräts. 
		 
		 <p class="- topic/p ">Mit dieser Klassen können Sie Standbilder oder Videos erfassen. Die Videoerfassung erfolgt mit dem Camcorderprofil „Niedrige Qualität“ des Geräts.</p>
		 
		 <p class="- topic/p ">Beim Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">launch()</codeph>-Methode wird die standardmäßige Kameraanwendung des Geräts aufgerufen. Die AIR-Anwendung verliert den Fokus und wartet darauf, dass der Benutzer ein Standbild aufnimmt oder das Erfassen des Videos beendet. Nachdem der Benutzer das gewünschte Medium erfasst hat, erhält die AIR-Anwendung wieder den Fokus und dieses CameraUI-Objekt setzt ein <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignis ab. Wenn der Benutzer den Vorgang abbricht, setzt dieses CameraUI-Objekt stattdessen ein <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>-Ereignis ab.</p>
		 
		 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Es ist möglich, dass die AIR-Anwendung vom Android-Betriebssystem beendet wird, während sie im Hintergrund darauf wartet, dass der Benutzer ein Bild oder ein Video aufnimmt. In diesem Fall muss der Benutzer die Anwendung neu starten. Die AIR-Anwendung setzt kein Medienereignis für die vorherige Bilderfassung ab.</p>
		 
		 <p class="- topic/p ">Sie können mit der <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft des MediaEvent-Objekts, das für das <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignis abgesetzt wurde, auf die erfasste Mediendatei zugreifen. Diese Eigenschaft ist eine Instanz der MediaPromise-Klasse, die Sie mithilfe der <codeph class="+ topic/ph pr-d/codeph ">loadFilePromise()</codeph>-Methode der Loader-Klasse in eine Anwendung laden können. Beachten Sie, dass die Gerätekamera erfasste Medien in verschiedenen Formaten speichern kann. Video ist in diese Hinsicht besonders problematisch. Es ist unter Umständen nicht möglich, die erfassten Medien in AIR anzuzeigen.</p>
		 
		 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#MediaType" class="- topic/link "><linktext class="- topic/linktext ">MediaType</linktext></link><link href="flash.media.xml#MediaPromise" class="- topic/link "><linktext class="- topic/linktext ">MediaPromise</linktext></link><link href="flash.display.xml#Loader/loadFilePromise()" class="- topic/link "><linktext class="- topic/linktext ">Loader.loadFilePromise()</linktext></link></related-links><adobeApiEvent id="flash.media:CameraUI:launch_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MediaEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn ein Medienobjekt erfasst wird.
		 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn ein Medienobjekt erfasst wird.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.media:CameraUI:launch_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn der Benutzer die native Kameraanwendung beendet, ohne ein Medienobjekt zu erfassen.
	 	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn der Benutzer die native Kameraanwendung beendet, ohne ein Medienobjekt zu erfassen.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.media:CameraUI:launch_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn die standardmäßige Kameraanwendung bereits verwendet wird.
		 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn die standardmäßige Kameraanwendung bereits verwendet wird.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.media:CameraUI:launch_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn sich die AIR-Anwendung beim Aufrufen dieser Funktion im Hintergrund befindet.
		 
		 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn sich die AIR-Anwendung beim Aufrufen dieser Funktion im Hintergrund befindet.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.media:CameraUI:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
		 Gibt an, ob die CameraUI-Klasse auf dem aktuellen Gerät unterstützt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		 Gibt an, ob die CameraUI-Klasse auf dem aktuellen Gerät unterstützt wird.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:SoundCodec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SoundCodec</apiName><shortdesc class="- topic/shortdesc ">
Die SoundCodec-Klasse ist eine Zusammenfassung von Konstantenwerten, die zur Einstellung der codec-Eigenschaft in der Microphone-Klasse verwendet werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Die SoundCodec-Klasse ist eine Zusammenfassung von Konstantenwerten, die zur Einstellung der <codeph class="+ topic/ph pr-d/codeph ">codec</codeph>-Eigenschaft in der <codeph class="+ topic/ph pr-d/codeph ">Microphone</codeph>-Klasse verwendet werden.

</apiDesc></apiClassifierDetail><apiValue id="flash.media:SoundCodec:NELLYMOSER" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NELLYMOSER</apiName><shortdesc class="- topic/shortdesc "> 
	Gibt an, dass der Nellymoser-Codec zur Komprimierung von Audiodaten verwendet werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">NellyMoser</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Gibt an, dass der Nellymoser-Codec zur Komprimierung von Audiodaten verwendet werden soll. Diese Konstante ist der Standardwert für die <codeph class="+ topic/ph pr-d/codeph ">Microphone.codec</codeph>-Eigenschaft.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:SoundCodec:SPEEX" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SPEEX</apiName><shortdesc class="- topic/shortdesc "> 
	Gibt an, dass der Speex-Codec zur Komprimierung von Audiodaten verwendet werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">Speex</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Gibt an, dass der Speex-Codec zur Komprimierung von Audiodaten verwendet werden soll.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:CameraRoll" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">CameraRoll</apiName><shortdesc class="- topic/shortdesc ">
Die CameraRoll-Klasse ermöglicht Ihnen, auf Bilddaten in der Medienbibliothek oder „Camera Roll“ des Systems zuzugreifen. Unterstützung von AIR-Profilen: Diese Funktion wird auf mobilen Geräten unterstützt, nicht jedoch auf Desktopbetriebssystemen oder Geräten mit AIR für TV.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Die CameraRoll-Klasse ermöglicht Ihnen, auf Bilddaten in der Medienbibliothek oder „Camera Roll“ des Systems zuzugreifen.  

<p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Diese Funktion wird auf mobilen Geräten unterstützt, nicht jedoch auf Desktopbetriebssystemen oder Geräten mit AIR für TV. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.</p>

<p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.addBitmapData()</codeph>-Methode fügt ein Bild dem dedizierten Medienarchiv des Geräts hinzu. Um zur Laufzeit festzustellen, ob Ihre Anwendung die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.addBitmapData()</codeph>-Methode unterstützt, überprüfen Sie die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.supportsAddImage</codeph>-Eigenschaft.</p>

<p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.browseForImage()</codeph>-Methode öffnet ein Dialogfeld zur Bildauswahl, in dem ein Benutzer ein Bild aus der Medienbibliothek auswählen kann. Wenn der Benutzer ein Bild auswählt, setzt das CameraRoll-Objekt ein <codeph class="+ topic/ph pr-d/codeph ">select</codeph>-Ereignis ab. Verwenden Sie das MediaEvent-Objekt, das für dieses Ereignis abgesetzt wird, um auf das ausgewählte Bild zuzugreifen. Um zur Laufzeit festzustellen, ob Ihre Anwendung die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.browseForImage()</codeph>-Methode unterstützt, überprüfen Sie die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.supportsBrowseForImage</codeph>-Eigenschaft.</p>

</apiDesc></apiClassifierDetail><adobeApiEvent id="flash.media:CameraRoll_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Wird abgesetzt, wenn ein Benutzer einen Bildauswahlvorgang abbricht, ohne ein Bild auszuwählen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird abgesetzt, wenn ein Benutzer einen Bildauswahlvorgang abbricht, ohne ein Bild auszuwählen.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:CameraRoll_flash.events.MediaEvent.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
 Wird abgesetzt, wenn ein Benutzer ein Bild aus der Medienbibliothek des Geräts auswählt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.MediaEvent.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.MediaEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird abgesetzt, wenn ein Benutzer ein Bild aus der Medienbibliothek des Geräts auswählt.
 
 <p class="- topic/p ">Das MediaEvent-Objekt, das für dieses Ereignis abgesetzt wird, ermöglicht den Zugriff auf das ausgewählten Medium.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:CameraRoll_flash.events.ErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Das error-Ereignis wird abgesetzt, wenn ein Fehler auftritt. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Das <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis wird abgesetzt, wenn ein Fehler auftritt. 
 
 <p class="- topic/p ">Mögliche Fehlerquellen:</p> 
 <ul class="- topic/ul "><li class="- topic/li ">Es kann kein Bildauswahldialog geöffnet werden.</li><li class="- topic/li ">Es wird bereits ein Bildauswahldialogfeld verwendet.</li><li class="- topic/li ">Die AIR-Anwendung versucht, nach einem Bild zu suchen, während sie sich im Hintergrund befindet.</li><li class="- topic/li ">Ein Bild lässt sich nicht der Medienbibliothek hinzufügen.</li><li class="- topic/li ">Es wird eine Methode aufgerufen, die vom Gerät nicht unterstützt wird.</li></ul>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.media:CameraRoll_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Zeigt an, dass ein addBitmapData()-Vorgang erfolgreich abgeschlossen wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Zeigt an, dass ein addBitmapData()-Vorgang erfolgreich abgeschlossen wurde.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.media:CameraRoll:CameraRoll" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">CameraRoll</apiName><shortdesc class="- topic/shortdesc ">
	 Erstellt ein CameraRoll-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erstellt ein CameraRoll-Objekt.
	 
	 <p class="- topic/p ">Von ActionScript wird nur eine Medienbibliothek unterstützt. Alle CameraRoll-Objekte speichern in demselben Bildrepository.</p>
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:CameraRoll:addBitmapData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addBitmapData</apiName><shortdesc class="- topic/shortdesc ">
	Fügt ein Bild der Camera Roll des Geräts hinzu.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bitmapData</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:BitmapData</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">ein BitmapData-Objekt, das das Bild enthält, das an die Camera Roll gesendet werden soll. 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Fügt ein Bild der Camera Roll des Geräts hinzu. 
	
	
	<p class="- topic/p ">Um zur Laufzeit festzustellen, ob Ihre Anwendung die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.addBitmapData()</codeph>-Methode unterstützt, überprüfen Sie die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.supportsAddImage</codeph>-Eigenschaft.</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:CameraRoll:browseForImage" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForImage</apiName><shortdesc class="- topic/shortdesc ">
	Öffnet ein Dialogfeld zur Bildauswahl, in dem der Benutzer ein vorhandenes Bild aus der Camera Roll des Geräts auswählen kann.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Öffnet ein Dialogfeld zur Bildauswahl, in dem der Benutzer ein vorhandenes Bild aus der Camera Roll des Geräts auswählen kann. 
	
	<p class="- topic/p ">Wenn der Benutzer ein Bild auswählt, setzt diese CameraRoll-Instanz ein <codeph class="+ topic/ph pr-d/codeph ">select</codeph>-Ereignis ab, das ein MediaEvent-Objekt enthält. Mit der <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft des MediaEvent-Objekts können Sie das Bild laden. Die <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft ist ein MediaPromise-Objekt, das Sie mit der <codeph class="+ topic/ph pr-d/codeph ">loadFilePromise()</codeph>-Methode der Loader-Klasse laden können.</p>
	
	<p class="- topic/p ">Um zur Laufzeit festzustellen, ob Ihre Anwendung die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.browseForImage()</codeph>-Methode unterstützt, überprüfen Sie die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.supportsBrowseForImage</codeph>-Eigenschaft.</p>
	
	</apiDesc><example conref="examples\CameraRoll_browseForImage_1.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package flash.media.examples
{
        import flash.media.CameraRoll;
        import flash.media.MediaPromise;
        import flash.media.MediaType;
        import flash.events.MediaEvent;
        import flash.events.Event;
        import flash.display.Loader;
        import flash.display.Sprite;
        import flash.events.IOErrorEvent;
        import flash.display.StageAlign;
        import flash.display.StageScaleMode;
        
        public class CameraRollTest extends Sprite{
            private var mediaSource:CameraRoll = new CameraRoll();
            
            public function CameraRollTest() {
                this.stage.align = StageAlign.TOP_LEFT;
                this.stage.scaleMode = StageScaleMode.NO_SCALE;
                
                if( CameraRoll.supportsBrowseForImage )
                {
                    log( "Browsing for image..." );
                    mediaSource.addEventListener( MediaEvent.SELECT, imageSelected );
                    mediaSource.addEventListener( Event.CANCEL, browseCanceled );
                    
                    mediaSource.browseForImage();
                }
                else
                {
                    log( "Browsing in camera roll is not supported.");
                }
            }
            
            private var imageLoader:Loader; 
            private function imageSelected( event:MediaEvent ):void
            {
                log( "Image selected..." );
                
                var imagePromise:MediaPromise = event.data;
                
                imageLoader = new Loader();
                if( imagePromise.isAsync )
                {
                    log( "Asynchronous media promise." );
                    imageLoader.contentLoaderInfo.addEventListener( Event.COMPLETE, imageLoaded );
                    imageLoader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, imageLoadFailed );
                    imageLoader.loadFilePromise( imagePromise );
                }
                else
                {
                    log( "Synchronous media promise." );
                    imageLoader.loadFilePromise( imagePromise );
                    this.addChild( imageLoader );
                }
            }
            
            private function browseCanceled( event:Event ):void
            {
                log( "Image browse canceled." );
            }
            
            private function imageLoaded( event:Event ):void
            {
                log( "Image loaded asynchronously." );
                this.addChild( imageLoader );
            }
            
            private function imageLoadFailed( event:Event ):void
            {
                log( "Image load failed." );
            }
            
            private function log( text:String ):void
            {
                trace( text );
            }
            
        }
        
    }
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.events.xml#MediaEvent" class="- topic/link "><linktext class="- topic/linktext ">MediaEvent</linktext></link><link href="flash.media.xml#MediaPromise" class="- topic/link "><linktext class="- topic/linktext ">MediaPromise</linktext></link><link href="flash.display.xml#Loader/loadFilePromise()" class="- topic/link "><linktext class="- topic/linktext ">Loader.loadFilePromise()</linktext></link></related-links><adobeApiEvent id="flash.media:CameraRoll:browseForImage_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:MediaEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn der Benutzer ein Bild auswählt.
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn der Benutzer ein Bild auswählt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.media:CameraRoll:browseForImage_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn der Benutzer den Bildauswahlvorgang abbricht.
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn der Benutzer den Bildauswahlvorgang abbricht.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.media:CameraRoll:browseForImage_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn die standardmäßige Bildauswahlanwendung bereits verwendet wird.
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn die standardmäßige Bildauswahlanwendung bereits verwendet wird.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.media:CameraRoll:browseForImage_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird abgesetzt, wenn sich die AIR-Anwendung beim Aufrufen dieser Funktion im Hintergrund befindet.
	 
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird abgesetzt, wenn sich die AIR-Anwendung beim Aufrufen dieser Funktion im Hintergrund befindet.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.media:CameraRoll:supportsAddBitmapData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsAddBitmapData</apiName><shortdesc class="- topic/shortdesc ">
	Ob die CameraRoll.addBitmapData()-Methode unterstützt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Ob die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.addBitmapData()</codeph>-Methode unterstützt wird. Zurzeit wird diese Funktion nur in AIR-Anwendungen auf mobilen Geräten unterstützt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:CameraRoll:supportsBrowseForImage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">supportsBrowseForImage</apiName><shortdesc class="- topic/shortdesc ">
	Gibt an, ob die CameraRoll.browseForImage()-Methode unterstützt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt an, ob die CameraRoll.browseForImage()-Methode unterstützt wird.
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Gibt an, ob die <codeph class="+ topic/ph pr-d/codeph ">CameraRoll.browseForImage()</codeph>-Methode unterstützt wird. Zurzeit wird diese Funktion nur in AIR-Anwendungen auf mobilen Geräten unterstützt.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:Microphone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Microphone</apiName><shortdesc class="- topic/shortdesc ">
 Mit der Microphone-Klasse überwachen oder erfassen Sie Audio von einem Mikrofon.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Mit der Microphone-Klasse überwachen oder erfassen Sie Audio von einem Mikrofon.
 
 <p class="- topic/p ">
 Um einen Verweis auf eine Microphone-Instanz abzurufen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph>-Methode oder die <codeph class="+ topic/ph pr-d/codeph ">Microphone.getEnhancedMicrophone()</codeph>-Methode. Eine erweiterte Mikrofoninstanz kann akustische Echokompensation ausführen. Verwenden Sie die akustische Echokompensation, um Echtzeit-Audio/Video-Anwendungen zu erstellen, für die keine Headsets erforderlich sind. 
 </p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Erstellen einer Echtzeit-Chat-Anwendung</b></p>
 <p class="- topic/p ">Um eine Echtzeit-Chat-Anwendung zu erstellen, erfassen Sie Audio und senden Sie es an Flash Media Server. Senden Sie den Audiostream mithilfe der NetConnection- und NetStream-Klassen an Flash Media Server. Flash Media Server kann das Audio an andere Clients senden. Um eine Chat-Anwendung zu erstellen, für die keine Headsets erforderlich sind, verwenden Sie die akustische Echokompensation. Die akustische Echokompensation verhindert die Rückkopplung, die auftritt, wenn Audio vom Mikrofon aufgenommen, über die Lautsprecher ausgegeben und wieder vom Mikrofon aufgenommen wird. Um die akustische Echokompensation zu verwenden, rufen Sie die <codeph class="+ topic/ph pr-d/codeph ">Microphone.getEnhancedMicrophone()</codeph>-Methode zum Abrufen eines Verweises auf eine Microphone-Instanz auf. Legen Sie <codeph class="+ topic/ph pr-d/codeph ">Microphone.enhancedOptions</codeph> auf eine Instanz der <codeph class="+ topic/ph pr-d/codeph ">MicrophoneEnhancedOptions</codeph>-Klasse fest, um Einstellungen zu konfigurieren.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Lokales Abspielen des Mikrofonaudios</b></p>
 <p class="- topic/p ">Rufen Sie die Microphone-<codeph class="+ topic/ph pr-d/codeph ">setLoopback()</codeph>-Methode auf, um das Mikrofonaudio direkt an den lokalen Computer oder an das Audiogerät zu leiten. Es besteht immer die Gefahr einer unkontrollierten Rückkopplung, die besonders dann auftritt, wenn die Audioausgabe vom Mikrofon aufgenommen werden kann. Die <codeph class="+ topic/ph pr-d/codeph ">setUseEchoSuppression()</codeph>-Methode kann das Risiko einer Rückkopplung verringern, aber nicht eliminieren.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Erfassen des Mikrofonaudios zur lokalen Aufnahme oder Verarbeitung</b></p>
 <p class="- topic/p ">Um Mikrofonaudiodaten aufzunehmen, verwenden Sie einen Listener für <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignisse, die von einer Microphone-Instanz abgesetzt werden. Das SampleDataEvent-Objekt, das für dieses Ereignis abgesetzt wird, enthält die Audiodaten.</p>
 
 <p class="- topic/p ">Informationen zum Aufzeichnen von Video finden Sie in der Beschreibung der Camera-Klasse.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Mikrofonunterstützung zur Laufzeit</b></p>
 <p class="- topic/p ">Die Microphone-Klasse wird in Flash Player nicht unterstützt, wenn dieser in einem mobilen Browser ausgeführt wird.</p>
 
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Die Microphone-Klasse wird unter Desktopbetriebssystemen unterstützt, aber nicht auf allen mobilen Geräten. Bei Geräten mit AIR für TV wird sie nicht unterstützt. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.</p>
 
 <p class="- topic/p ">Mit der <codeph class="+ topic/ph pr-d/codeph ">Microphone.isSupported</codeph>-Eigenschaft können Sie testen, ob zur Laufzeit Unterstützung gegeben ist. Beachten Sie, dass bei Geräten mit AIR für TV <codeph class="+ topic/ph pr-d/codeph ">Microphone.isSupported</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> hat, <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph> jedoch immer <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurückgibt.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Datenschutzsteuerungen</b></p>
 <p class="- topic/p ">
 Flash Player zeigt ein Zugriffsschutz-Dialogfeld an, in dem der Benutzer den Zugriff auf das Mikrofon zulassen oder verweigern kann. Das Anwendungsfenster muss mindestens 215 x 138 Pixel groß sein; dies ist die Mindestgröße, die für die Anzeige des Dialogfelds erforderlich ist. Andernfalls wird der Zugriff automatisch verweigert.
 </p>
 <p class="- topic/p ">Inhalt, der in der AIR-Anwendungssandbox ausgeführt wird, braucht keine Berechtigung für den Zugriff auf das Mikrofon; es wird kein Dialogfeld angezeigt. Inhalt, der außerhalb der AIR-Anwendungssandbox ausgeführt wird, benötigt eine Berechtigung; das Datenschutz-Dialogfeld wird angezeigt.</p>
 
 </apiDesc><example conref="examples\MicrophoneExample.as" class="- topic/example "> Im folgenden Beispiel wird Sound mit einem Mikrofon bei aktivierter Echounterdrückung aufgenommen, nachdem der Benutzer den Zugriff auf das Mikrofon des Computers gewährt hat. Mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> wird das Dialogfeld „Flash Player“ angezeigt, mit dem die Berechtigung für den Zugriff auf das Mikrofon des Benutzers angefordert wird. Durch das Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">setLoopBack(true)</codeph> wird der Input an die lokalen Lautsprecher umgeleitet, sodass Sie den Sound hören können, während das Beispiel ausgeführt wird.
 
 <p class="- topic/p ">Zwei Listener reagieren auf <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignisse. Das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis wird am Anfang und Ende (falls vorhanden) der Sitzung ausgelöst und von der Methode <codeph class="+ topic/ph pr-d/codeph ">activityHandler()</codeph> erfasst, die Ereignisverarbeitungsinformationen verfolgt. Das Ereignis <codeph class="+ topic/ph pr-d/codeph ">status</codeph> wird ausgelöst, wenn Statusinformationen vom verknüpften Microphone-Objekt übermittelt werden; es wird mithilfe der <codeph class="+ topic/ph pr-d/codeph ">statusHandler()</codeph>-Methode erfasst und verfolgt.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Dieses Beispiel kann nur dann korrekt nachvollzogen werden, wenn ein Mikrofon mit dem Computer verbunden ist.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Microphone;
    import flash.system.Security;

    public class MicrophoneExample extends Sprite {
        public function MicrophoneExample() {
            var mic:Microphone = Microphone.getMicrophone();
            Security.showSettings("2");
            mic.setLoopBack(true);
                    
            if (mic != null) {
                mic.setUseEchoSuppression(true);
                mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
                mic.addEventListener(StatusEvent.STATUS, statusHandler);
            }
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("activityHandler: " + event);
        }

        private function statusHandler(event:StatusEvent):void {
            trace("statusHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera</linktext></link><link href="flash.media.xml#MicrophoneEnhancedMode" class="- topic/link "><linktext class="- topic/linktext ">flash.media.MicrophoneEnhancedMode</linktext></link><link href="flash.media.xml#MicrophoneEnhancedOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.media.MicrophoneEnhancedOptions</linktext></link><link href="http://mrbinitie.blogspot.com/2011/03/implementing-acoustic-echo-suppression.html" class="- topic/link "><linktext class="- topic/linktext ">aYo Binitie: Implementing Acoustic Echo Suppression in Flash/Flex applications</linktext></link><link href="http://coenraets.org/blog/air-for-android-samples/voice-notes-for-android/" class="- topic/link "><linktext class="- topic/linktext ">Cristophe Coenraets: Voice Notes for Android</linktext></link><link href="http://www.riagora.com/2010/08/air-android-and-the-microphone/" class="- topic/link "><linktext class="- topic/linktext ">Michael Chaize: AIR, Android, and the Microphone</linktext></link></related-links><adobeApiEvent id="flash.media:Microphone_flash.events.StatusEvent.STATUS_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Status eines Mikrofons gemeldet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Status eines Mikrofons gemeldet wird. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Microphone.Muted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf das Mikrofon verweigert. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Microphone.Unmuted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf das Mikrofon gewährt.
 
 <p class="- topic/p ">Status-Ereignisse werden in Adobe AIR-Anwendungen nicht abgesetzt, der Zugriff auf das Mikrofon kann nicht dynamisch geändert werden. Auf den meisten Plattformen können AIR-Anwendungen immer auf das Mikrofon zugreifen. Unter Android muss eine Anwendung die Android-Berechtigung RECORD_AUDIO im Anwendungsdeskriptor spezifizieren. Andernfalls verweigert Android den Zugriff auf das Mikrofon.</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">Microphone.getMicrophone()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Microphone_flash.events.SampleDataEvent.SAMPLE_DATA_sampleData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">sampleData</apiName><shortdesc class="- topic/shortdesc ">
  Wird abgesetzt, wenn das Mikrofon Audiodaten im Puffer hat.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SampleDataEvent.SAMPLE_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SampleDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Wird abgesetzt, wenn das Mikrofon Audiodaten im Puffer hat. 
 <p class="- topic/p ">
 Die <codeph class="+ topic/ph pr-d/codeph ">Microphone.rate</codeph>-Eigenschaft bestimmt die Anzahl der Samples, die pro Sekunde generiert werden. Die Anzahl der Samples pro Ereignis ist ein Faktor aus der Anzahl der Samples pro Sekunde und der Verzögerung zwischen Ereignisaufrufen.
 </p>
 
 </apiDesc><example conref="examples\Microphone.sampleDataEvent.1.as" class="- topic/example "> Im folgenden Beispiel werden 4 Sekunden Audiosamples vom Standardmikrofon erfasst und das Audio wird dann wiedergegeben. Vergewissern Sie sich, dass ein Mikrofon angeschlossen ist. <codeph class="+ topic/ph pr-d/codeph ">micSampleDataHandler()</codeph> ist der Ereignis-Listener für das <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis des Microphone-Objekts. Die <codeph class="+ topic/ph pr-d/codeph ">micSampleDataHandler()</codeph>-Methode ruft die Samples ab, wenn sie verfügbar sind, und hängt ihre Werte an ein ByteArray-Objekt an. Es wird ein Timer-Objekt für 4 Sekunden eingerichtet. Der Timer entfernt das <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis vom Ereignis-Listener des Microphone-Objekts, erstellt ein Sound-Objekt und fügt einen <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis-Listener für das Sound-Objekt hinzu. Der <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis-Listener für das Sound-Objekt, die <codeph class="+ topic/ph pr-d/codeph ">playbackSampleHandler()</codeph>-Methode, stellt Audiosamples bereit, die das Sound-Objekt abspielt. Diese Audiosamples werden vom ByteArray-Objekt abgerufen, in dem die Microphone-Samples gespeichert wurden. Die Samples werden zweimal in das Sound-Objekt geschrieben, da die Microphone-Samples mono aufgenommen werden, das Sound-Objekt jedoch Stereosamplepaare benötigt. Die <codeph class="+ topic/ph pr-d/codeph ">rate</codeph>-Eigenschaft des Microphone-Objekts wird auf 44 gesetzt, um der von Sound-Objekten verwendeten Abtastrate von 44 kHz zu entsprechen.
 
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> 
const DELAY_LENGTH:int = 4000;

var mic:Microphone = Microphone.getMicrophone();
mic.setSilenceLevel(0, DELAY_LENGTH);
mic.gain = 100;
mic.rate = 44;
mic.addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);

var timer:Timer = new Timer(DELAY_LENGTH);
timer.addEventListener(TimerEvent.TIMER, timerHandler);
timer.start();

var soundBytes:ByteArray = new ByteArray();

function micSampleDataHandler(event:SampleDataEvent):void
{
    while(event.data.bytesAvailable)
    {
        var sample:Number = event.data.readFloat();
        soundBytes.writeFloat(sample);
    }
}

function timerHandler(event:TimerEvent):void
{        
    mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, micSampleDataHandler);
    timer.stop();
    soundBytes.position = 0;
    var sound:Sound = new Sound();
    sound.addEventListener(SampleDataEvent.SAMPLE_DATA, playbackSampleHandler);
    sound.play();
}

function playbackSampleHandler(event:SampleDataEvent):void
{
    for (var i:int = 0; i &lt; 8192 &amp;&amp; soundBytes.bytesAvailable > 0; i++) 
    {
        var sample:Number = soundBytes.readFloat();
        event.data.writeFloat(sample);
        event.data.writeFloat(sample);
    }
}
</codeblock></example><example conref="examples\MicrophoneExample.as" class="- topic/example "> Im folgenden Beispiel wird Sound mit einem Mikrofon bei aktivierter Echounterdrückung aufgenommen, nachdem der Benutzer den Zugriff auf das Mikrofon des Computers gewährt hat. Mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> wird das Dialogfeld „Flash Player“ angezeigt, mit dem die Berechtigung für den Zugriff auf das Mikrofon des Benutzers angefordert wird. Durch das Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">setLoopBack(true)</codeph> wird der Input an die lokalen Lautsprecher umgeleitet, sodass Sie den Sound hören können, während das Beispiel ausgeführt wird.
 
 <p class="- topic/p ">Zwei Listener reagieren auf <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignisse. Das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis wird am Anfang und Ende (falls vorhanden) der Sitzung ausgelöst und von der Methode <codeph class="+ topic/ph pr-d/codeph ">activityHandler()</codeph> erfasst, die Ereignisverarbeitungsinformationen verfolgt. Das Ereignis <codeph class="+ topic/ph pr-d/codeph ">status</codeph> wird ausgelöst, wenn Statusinformationen vom verknüpften Microphone-Objekt übermittelt werden; es wird mithilfe der <codeph class="+ topic/ph pr-d/codeph ">statusHandler()</codeph>-Methode erfasst und verfolgt.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Dieses Beispiel kann nur dann korrekt nachvollzogen werden, wenn ein Mikrofon mit dem Computer verbunden ist.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Microphone;
    import flash.system.Security;

    public class MicrophoneExample extends Sprite {
        public function MicrophoneExample() {
            var mic:Microphone = Microphone.getMicrophone();
            Security.showSettings("2");
            mic.setLoopBack(true);
                    
            if (mic != null) {
                mic.setUseEchoSuppression(true);
                mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
                mic.addEventListener(StatusEvent.STATUS, statusHandler);
            }
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("activityHandler: " + event);
        }

        private function statusHandler(event:StatusEvent):void {
            trace("statusHandler: " + event);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.events.xml#SampleDataEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Microphone_flash.events.ActivityEvent.ACTIVITY_activity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">activity</apiName><shortdesc class="- topic/shortdesc ">
 Wird abgesetzt, wenn ein Mikrofon die Aufnahmen wegen einer erkannten Stille (Sprechpause) startet oder beendet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ActivityEvent.ACTIVITY</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ActivityEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird abgesetzt, wenn ein Mikrofon die Aufnahmen wegen einer erkannten Stille (Sprechpause) startet oder beendet. 
 
 <p class="- topic/p ">
 Um festzulegen, welche Soundmenge erforderlich ist, um dieses Ereignis mit einer <codeph class="+ topic/ph pr-d/codeph ">activating</codeph>-Eigenschaft mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auszulösen, oder welcher Zeitraum ohne Sound verstreichen muss, damit dieses Ereignis mit einer <codeph class="+ topic/ph pr-d/codeph ">activating</codeph>-Eigenschaft mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> ausgelöst wird, verwenden Sie <codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph>.
 </p>
 <p class="- topic/p ">Damit ein Microphone-Objekt activity-Ereignisse absetzen kann, muss die Anwendung den Eingang überwachen, entweder durch Aufruf von <codeph class="+ topic/ph pr-d/codeph ">setLoopback( true )</codeph>, durch die Verwendung eines Listeners für sampleData-Ereignisse oder durch das Anhängen eines Mikrofons an ein NetStream-Objekt.</p>
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/setSilenceLevel()" class="- topic/link "><linktext class="- topic/linktext ">setSilenceLevel()</linktext></link></related-links></adobeApiEvent><apiOperation id="flash.media:Microphone:getEnhancedMicrophone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getEnhancedMicrophone</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt einen Verweis auf ein erweitertes Microphone-Objekt zurück, das akustische Echokompensation ausführen kann.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Verweis auf ein Mikrofon-Objekt zur Aufnahme von Audiodaten. Wenn das erweiterte Audio nicht initialisiert werden kann, wird <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurückgegeben.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Microphone</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Indexwert des Mikrofons.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt einen Verweis auf ein erweitertes Microphone-Objekt zurück, das akustische Echokompensation ausführen kann. Verwenden Sie die akustische Echokompensation, um Audio/Video-Chat-Anwendungen zu erstellen, für die keine Headsets erforderlich sind.
	 
	 <p class="- topic/p ">Der <codeph class="+ topic/ph pr-d/codeph ">index</codeph>-Parameter für die <codeph class="+ topic/ph pr-d/codeph ">Microphone.getEnhancedMicrophone()</codeph>-Methode und die <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph>-Methode arbeitet auf identische Weise.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Wichtig:</b> Zu jedem beliebigen Zeitpunkt haben Sie immer nur eine einzelne Instanz eines erweiterten Mikrofongeräts. Alle anderen Microphone-Instanzen beenden die Bereitstellung von Audiodaten und erhalten ein <codeph class="+ topic/ph pr-d/codeph ">StatusEvent</codeph>-Objekt mit der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">Microphone.Unavailable</codeph>. Wenn das erweiterte Audio nicht initialisiert werden kann, geben Aufrufe dieser Methode <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück, das Festlegen eines Werts für <codeph class="+ topic/ph pr-d/codeph ">Microphone.enhancedOptions</codeph> hat keine Auswirkungen und alle vorhandenen Microphone-Instanzen funktionieren wie zuvor.</p>
	 
	 <p class="- topic/p ">Um ein erweitertes Microphone-Objekt zu konfigurieren, legen Sie die <codeph class="+ topic/ph pr-d/codeph ">Microphone.enhancedOptions</codeph>-Eigenschaft fest. Der folgende Code verwendet ein erweitertes Microphone-Objekt und Vollduplex-Echokompensation in einem lokalen Test:</p>
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	     var mic:Microphone = Microphone.getEnhancedMicrophone();
	     var options:MicrophoneEnhancedOptions = new MicrophoneEnhancedOptions();
	     options.mode = MicrophoneEnhancedMode.FULL_DUPLEX;
	     mic.enhancedOptions = options;
	     mic.setLoopBack(true);
	 </pre>
	 
	 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">setUseEchoSuppression()</codeph>-Methode wird ignoriert, wenn die akustische Echokompensation verwendet wird.
	 </p>
	 
	 <p class="- topic/p ">
	 Wenn eine SWF-Datei versucht, auf das von <codeph class="+ topic/ph pr-d/codeph ">Microphone.getEnhancedMicrophone()</codeph> zurückgegebene Objekt zuzugreifen – zum Beispiel, wenn Sie <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachAudio()</codeph> aufrufen – zeigt Flash Player ein Dialogfeld zum Datenschutz an, in dem der Benutzer den Zugriff auf das Mikrofon zulassen oder verweigern kann. (Achten Sie darauf, dass die Bühnengröße mindestens 215 x 138 Pixel beträgt. Dies ist die Mindestgröße, die Flash Player für die Anzeige des Dialogfelds benötigt.)
	 </p>
	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/enhancedOptions" class="- topic/link "><linktext class="- topic/linktext ">Microphone.enhancedOptions</linktext></link><link href="flash.media.xml#Microphone/event:status" class="- topic/link "><linktext class="- topic/linktext ">Microphone.status</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Microphone:getMicrophone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMicrophone</apiName><shortdesc class="- topic/shortdesc ">
	 
	 Gibt einen Verweis auf ein Mikrofon-Objekt zur Aufnahme von Audiodaten zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, Microphone.getMicropone, getMicrophone
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Verweis auf ein Mikrofon-Objekt zur Aufnahme von Audiodaten.
	 
 	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Microphone</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Indexwert des Mikrofons.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 
	 Gibt einen Verweis auf ein Mikrofon-Objekt zur Aufnahme von Audiodaten zurück. Um mit dem Aufzeichnen des Audios zu beginnen, müssen Sie das Microphone-Objekt mit einem NetStream-Objekt verknüpfen (siehe <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachAudio()</codeph>).
	 
	 <p class="- topic/p ">
	 Mehrere Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph> verweisen auf dasselbe Mikrofon. Falls ein Programmcode also die Zeilen <codeph class="+ topic/ph pr-d/codeph ">mic1 = Microphone.getMicrophone()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">mic2 = Microphone.getMicrophone()</codeph> enthält, verweisen <codeph class="+ topic/ph pr-d/codeph ">mic1</codeph> und <codeph class="+ topic/ph pr-d/codeph ">mic2</codeph> auf dasselbe (Standard-)Mikrofon.</p>
	 
	 <p class="- topic/p ">
	 Im Allgemeinen sollten Sie keinen Wert für <codeph class="+ topic/ph pr-d/codeph ">index</codeph> übergeben. Verwenden Sie einfach <codeph class="+ topic/ph pr-d/codeph ">air.Microphone.getMicrophone()</codeph>, um einen Verweis auf das Standardmikrofon zurückzugeben. Im Abschnitt „Mikrofoneinstellungen“ im Einstellungsbedienfeld von Flash Player kann der Benutzer das Standardmikrofon angeben, das die Anwendung verwenden soll. (Der Benutzer ruft die Einstellungen von Flash Player auf, indem er mit der rechten Maustaste auf den im Webbrowser ausgeführten Flash Player-Inhalt klickt.) Wenn Sie einen Wert für <codeph class="+ topic/ph pr-d/codeph ">index</codeph> übergeben, können Sie auf ein anderes als das vom Benutzer gewählte Mikrofon verweisen. In seltenen Fällen können Sie <codeph class="+ topic/ph pr-d/codeph ">index</codeph> verwenden, beispielsweise wenn Ihre Anwendung Audiodaten von zwei Mikrofonen gleichzeitig aufnimmt. Inhalt, der in Adobe AIR ausgeführt wird, verwendet ebenfalls die Flash Player-Einstellung für das Standardmikrofon.</p>
	 
	 <p class="- topic/p ">
	 Verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">Microphone.index</codeph>-Eigenschaft, um den Indexwert des aktuellen Microphone-Objekts abzurufen. Sie können diesen Wert dann an andere Methoden der Microphone-Klasse übergeben.
	 </p>
	 
	 <p class="- topic/p ">
	 Wenn eine SWF-Datei versucht, auf das von <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph> zurückgegebene Objekt zuzugreifen (wenn Sie beispielsweise <codeph class="+ topic/ph pr-d/codeph ">NetStream.attachAudio()</codeph> aufrufen), wird in Flash Player ein Zugriffsschutz-Dialogfeld angezeigt, in dem der Benutzer den Zugriff auf das Mikrofon zulassen oder verweigern kann. (Achten Sie darauf, dass die Bühnengröße mindestens 215 x 138 Pixel beträgt. Dies ist die Mindestgröße, die Flash Player für die Anzeige des Dialogfelds benötigt.)
	 </p>
	 
	 <p class="- topic/p ">
         Wenn der Benutzer auf dieses Dialogfeld reagiert, wird ein <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignis ausgelöst, das die Antwort des Benutzers anzeigt. Sie können auch die <codeph class="+ topic/ph pr-d/codeph ">Microphone.muted</codeph>-Eigenschaft überprüfen, um festzustellen, ob der Benutzer den Zugriff auf das Mikrofon zugelassen oder verweigert hat. 
	 </p>
	 
	 <p class="- topic/p ">
	 Wenn <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurückgibt, wird das Mikrofon entweder von einer anderen Anwendung genutzt oder im System sind keine Mikrofone installiert. Mit <codeph class="+ topic/ph pr-d/codeph ">Microphones.names.length</codeph> können Sie feststellen, ob Mikrofone installiert sind. Mit <codeph class="+ topic/ph pr-d/codeph ">Security.showSettings()</codeph> zeigen Sie das Flash Player-Bedienfeld für Mikrofoneinstellungen an, in dem der Benutzer das Mikrofon auswählen kann, auf das von <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph> verwiesen wird. 
	 
	 </p>
	 
	 </apiDesc><example conref="examples\Microphone_getMicrophone.as" class="- topic/example "> Das folgende Beispiel zeigt, wie Sie Zugriff auf das Mikrofon des Benutzers anfordern, indem Sie die statische Microphone.getMicrophone()-Methode und einen Listener für das Statusereignis verwenden. Beispiel bereitgestellt von <xref href="http://actionscriptexamples.com/2008/12/04/detecting-the-microphone-in-flash-using-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var mic:Microphone = Microphone.getMicrophone();
mic.setLoopBack();
mic.addEventListener(StatusEvent.STATUS, mic_status);
 
var tf:TextField = new TextField();
tf.autoSize = TextFieldAutoSize.LEFT;
tf.text = "Detecting microphone...";
addChild(tf);
 
function mic_status(evt:StatusEvent):void {
    tf.text = "Microphone is muted?: " + mic.muted;
    switch (evt.code) {
        case "Microphone.Unmuted":
            tf.appendText("\n" + "Microphone access was allowed.");
            break;
        case "Microphone.Muted":
            tf.appendText("\n" + "Microphone access was denied.");
            break;
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/event:status" class="- topic/link "><linktext class="- topic/linktext ">Microphone.status</linktext></link><link href="flash.net.xml#NetStream/attachAudio()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.attachAudio()</linktext></link><link href="flash.system.xml#Security/showSettings()" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Security.showSettings()</linktext></link></related-links><adobeApiEvent id="flash.media:Microphone:getMicrophone_status" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">status</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:StatusEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Status eines Mikrofons gemeldet wird. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Microphone.Muted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf das Mikrofon verweigert. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">"Microphone.Unmuted"</codeph> gesetzt ist, hat der Benutzer den Zugriff der SWF-Datei auf das Mikrofon gewährt.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Status eines Mikrofons gemeldet wird.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.media:Microphone:setLoopBack" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLoopBack</apiName><shortdesc class="- topic/shortdesc ">
	 Leitet von einem Mikrofon aufgezeichnetes Audio an die lokalen Lautsprecher.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Document this better with examples.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">state</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Leitet von einem Mikrofon aufgezeichnetes Audio an die lokalen Lautsprecher.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.media:Microphone:setSilenceLevel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSilenceLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Legt die minimale Eingangslautstärke fest, bei der Sound als solcher eingestuft wird und (optional) die Länge der lautlosen Zeit bis zum Erkennen von Stille.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.setSilenceLevel, setSilenceLevel
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">silenceLevel</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die erforderliche Soundmenge zum Aktivieren des Mikrofons und zum Auslösen des <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignisses. Die zulässigen Werte liegen zwischen 0 und 100. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">timeout</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Zeit in Millisekunden, die ohne Aktivität vergehen muss, bevor in Flash Player oder Adobe AIR kein Sound mehr festgestellt und das <codeph class="+ topic/ph pr-d/codeph ">dispatch</codeph>-Ereignis ausgelöst wird. Der Standardwert ist 2000 (2 Sekunden). (<b class="+ topic/ph hi-d/b ">Hinweis</b>: Der in der Syntax angezeigte Standardwert -1 ist ein interner Wert in Flash Player oder Adobe AIR zur Verwendung des Werts 2000.)
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Legt die minimale Eingangslautstärke fest, bei der Sound als solcher eingestuft wird und (optional) die Länge der lautlosen Zeit bis zum Erkennen von Stille.
	 <ul class="- topic/ul "><li class="- topic/li ">Wenn das Mikrofon überhaupt keinen Sound feststellen soll, legen Sie für <codeph class="+ topic/ph pr-d/codeph ">silenceLevel</codeph> einen Wert von 100 fest. Das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis wird nicht ausgelöst. </li><li class="- topic/li ">Mithilfe von <codeph class="+ topic/ph pr-d/codeph ">Microphone.activityLevel</codeph> können Sie die Soundmenge ermitteln, die mit dem Mikrofon derzeit erkannt wird. </li></ul>
	 
	 <p class="- topic/p ">Speex enthält eine Sprachaktivitätserkennung (VAD) und reduziert die Bandbreite automatisch, wenn keine Sprache erkannt wird. Wenn Sie den Speex-Codec verwenden, empfiehlt Adobe, die Abschaltschwelle (Silence-Level) auf 0 zu setzen.</p>
	 
	 <p class="- topic/p ">Aktivitätserkennung ist die Fähigkeit, anhand der Lautstärkepegel zu erkennen, dass jemand spricht. Wenn nicht gesprochen wird, kann Bandbreite gespart werden, da der zugehörige Audiostream nicht übertragen werden muss. Diese Daten können auch für visuelles Feedback verwendet werden, sodass Benutzer erkennen, dass sie (oder andere) derzeit stumm sind.</p>
	 
	 <p class="- topic/p ">Stillewerte entsprechen unmittelbar den Aktivitätswerten. Völlige Stille entspricht dem Aktivitätswert 0. Konstante, laute Geräusche (so laut wie bei der momentanen Einstellung für die Lautstärke erfasst werden kann) entspricht einem Wert von 100. Wenn die Lautstärke genau angepasst ist, ist Ihr Aktivitätswert geringer als der Stillewert, wenn Sie nicht sprechen. Wenn Sie sprechen, ist der Aktivitätswert höher als der Stillewert.</p>
	 
	 <p class="- topic/p ">Diese Methode ähnelt <codeph class="+ topic/ph pr-d/codeph ">Camera.setMotionLevel()</codeph>. Mit beiden Methoden wird angegeben, zu welchem Zeitpunkt das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis ausgelöst werden soll. Diese Methoden haben jedoch deutlich unterschiedliche Auswirkungen auf das Veröffentlichen von Streams:</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Camera.setMotionLevel()</codeph> ist dazu bestimmt, Bewegung festzustellen und hat keinen Einfluss auf die Bandbreitenauslastung. Auch wenn ein Videostream keine Bewegung feststellt, werden weiterhin Videodaten gesendet.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph> dient zur Optimierung der Bandbreite. Wenn ein Audiostream als lautlos eingestuft wird, werden keine Audiodaten gesendet. Stattdessen wird eine Meldung gesendet, um den Beginn der Inaktivität (Stille) anzuzeigen. </li></ul>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/setMotionLevel()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.setMotionLevel()</linktext></link><link href="flash.media.xml#Microphone/activityLevel" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.activityLevel</linktext></link><link href="flash.media.xml#Microphone/event:activity" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.activity</linktext></link><link href="flash.media.xml#Microphone/gain" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.gain</linktext></link><link href="flash.media.xml#Microphone/silenceLevel" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.silenceLevel</linktext></link><link href="flash.media.xml#Microphone/silenceTimeout" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.silenceTimeout</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Microphone:setUseEchoSuppression" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUseEchoSuppression</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob die Audio-Codec-Funktion zur Echounterdrückung verwendet werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.setUseEchoSuppression, setUseEchoSuppression
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useEchoSuppression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein boolescher Wert, der angibt, ob Echokompensation verwendet werden soll (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) oder nicht (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). 	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob die Audio-Codec-Funktion zur Echounterdrückung verwendet werden soll. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, es sei denn, der Benutzer hat im Flash Player-Bedienfeld für die Mikrofoneinstellungen die Option „Echo reduzieren“ gewählt.
	 
	 <p class="- topic/p ">Durch die Echounterdrückung sollen die Auswirkungen von Rückkopplungen unterdrückt werden, die hervorgerufen werden, wenn Sounds aus dem Lautsprecher über das Mikrofon im selben System empfangen werden. (Dies unterscheidet sich von der akustischen Echokompensation, bei der die Rückkopplungen vollständig entfernt werden. Die <codeph class="+ topic/ph pr-d/codeph ">setUseEchoSuppression()</codeph>-Methode wird ignoriert, wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">getEnhancedMicrophone()</codeph>-Methode aufrufen, um die akustische Echokompensation zu verwenden.)</p>
	 
	 <p class="- topic/p ">Generell empfiehlt sich die Echounterdrückung, wenn der erfasste Sound über Lautsprecher und nicht über Kopfhörer wiedergegeben wird. Wenn Benutzer bei einer SWF-Datei das Soundausgabegerät angeben können, sollten Sie <codeph class="+ topic/ph pr-d/codeph ">Microphone.setUseEchoSuppression(true)</codeph> aufrufen, wenn angegeben wird, dass Lautsprecher und das Mikrofon verwendet werden sollen. </p>
	 
	 <p class="- topic/p ">Benutzer können diese Einstellungen auch im Flash Player-Bedienfeld für die Mikrofoneinstellungen anpassen.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/setUseEchoSuppression()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.setUseEchoSuppression()</linktext></link><link href="flash.media.xml#Microphone/useEchoSuppression" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.useEchoSuppression</linktext></link></related-links></apiOperation><apiValue id="flash.media:Microphone:activityLevel:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">activityLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Die über das Mikrofon ermittelte Soundmenge.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.activityLevel, activityLevel
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die über das Mikrofon ermittelte Soundmenge. Die Werte liegen zwischen 0 (kein Sound) und 100 (sehr lauter Sound). Mithilfe des Werts dieser Eigenschaft können Sie einen geeigneten Wert zum Übergeben für die Methode <codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph> ermitteln.
	 
	 <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">muted</codeph>-Eigenschaft des Mikrofons den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> hat, ist der Wert dieser Eigenschaft immer -1.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/setSilenceLevel()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.setSilenceLevel()</linktext></link><link href="flash.media.xml#Microphone/gain" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.gain</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:codec:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">codec</apiName><shortdesc class="- topic/shortdesc ">
	 Der für die Audiokomprimierung zu verwendende Codec.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.getCodec, getCodec
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Der für die Audiokomprimierung zu verwendende Codec. Verfügbare Codecs sind Nellymoser (Standardeinstellung) und Speex. Die Enum-Klasse <codeph class="+ topic/ph pr-d/codeph ">SoundCodec</codeph> enthält die verschiedenen Werte, die für die <codeph class="+ topic/ph pr-d/codeph ">codec</codeph>-Eigenschaft gültig sind.
	 
	 <p class="- topic/p ">Wenn Sie den Nellymoser-Codec verwenden, können Sie die Samplerate über <codeph class="+ topic/ph pr-d/codeph ">Microphone.rate()</codeph> festlegen. Wenn Sie den Speex-Codec verwenden, ist die Samplerate auf 16 kHz eingestellt.</p>
	 
	 <p class="- topic/p ">Speex enthält eine Sprachaktivitätserkennung (VAD) und reduziert die Bandbreite automatisch, wenn keine Sprache erkannt wird. Wenn Sie den Speex-Codec verwenden, empfiehlt Adobe, die Abschaltschwelle (Silence-Level) auf 0 zu setzen. Verwenden Sie zum Einstellen der Abschaltschwelle die <codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph>-Methode.</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/setSilenceLevel()" class="- topic/link "><linktext class="- topic/linktext ">setSilenceLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:enableVAD:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">enableVAD</apiName><shortdesc class="- topic/shortdesc ">
	 Aktiviert die Speex-Sprechpausenerkennung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound,
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Aktiviert die Speex-Sprechpausenerkennung. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:encodeQuality:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">encodeQuality</apiName><shortdesc class="- topic/shortdesc ">
	 Die kodierte Sprachqualität, wenn der Speex-Codec verwendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound,
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die kodierte Sprachqualität, wenn der Speex-Codec verwendet wird. Mögliche Werte sind 0 bis 10. Der Standardwert ist 6. Höhere Werte bedeuten eine höhere Qualität, erfordern aber auch mehr Bandbreite (wie in der folgenden Tabelle gezeigt). Die aufgelisteten Bitratenwerte sind Nettobitraten und enthalten keinen Paketierungsaufwand.
	 <p class="- topic/p ">
	  <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Qualitätswert</entry><entry class="- topic/entry ">Erforderliche Bitrate (Kilobit pro Sekunde)</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">0</entry><entry class="- topic/entry "> 3,95</entry></row><row class="- topic/row "><entry class="- topic/entry ">1</entry><entry class="- topic/entry ">5,75</entry></row><row class="- topic/row "><entry class="- topic/entry ">2</entry><entry class="- topic/entry ">7,75</entry></row><row class="- topic/row "><entry class="- topic/entry ">3</entry><entry class="- topic/entry ">9,80</entry></row><row class="- topic/row "><entry class="- topic/entry ">4</entry><entry class="- topic/entry ">12,8</entry></row><row class="- topic/row "><entry class="- topic/entry ">5</entry><entry class="- topic/entry ">16,8</entry></row><row class="- topic/row "><entry class="- topic/entry ">6</entry><entry class="- topic/entry ">20,6</entry></row><row class="- topic/row "><entry class="- topic/entry ">7</entry><entry class="- topic/entry ">23,8</entry></row><row class="- topic/row "><entry class="- topic/entry ">8</entry><entry class="- topic/entry ">27,8</entry></row><row class="- topic/row "><entry class="- topic/entry ">9</entry><entry class="- topic/entry ">34,2</entry></row><row class="- topic/row "><entry class="- topic/entry ">10</entry><entry class="- topic/entry ">42,2</entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/codec" class="- topic/link "><linktext class="- topic/linktext ">Codec</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:enhancedOptions:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">enhancedOptions</apiName><shortdesc class="- topic/shortdesc ">	
	 Steuert erweiterte Mikrofonoptionen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:MicrophoneEnhancedOptions</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">	
	 Steuert erweiterte Mikrofonoptionen. Weitere Informationen finden Sie in der Beschreibung der <codeph class="+ topic/ph pr-d/codeph ">MicrophoneEnhancedOptions</codeph>-Klasse. Diese Eigenschaft wird für nicht erweiterte Microphone-Instanzen ignoriert.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#MicrophoneEnhancedOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.media.MicrophoneEnhancedOptions</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:framesPerPacket:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">framesPerPacket</apiName><shortdesc class="- topic/shortdesc ">
	 Anzahl der Speex-Sprachframes, die in einem Paket (Meldung) übertragen werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound,
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Anzahl der Speex-Sprachframes, die in einem Paket (Meldung) übertragen werden . Jeder Frame hat eine Länge von 20 ms. Der Standardwert ist zwei Frames pro Paket.
	 
	 <p class="- topic/p ">Je mehr Speex-Frames in einer Meldung enthalten sind, desto niedriger ist die erforderliche Bandbreite, aber desto länger ist die Verzögerung beim Senden der Meldung. Weniger Speex-Frames erhöhen die erforderliche Bandbreite, reduzieren aber Verzögerungen.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:gain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">gain</apiName><shortdesc class="- topic/shortdesc ">
	 Betrag, um den das Mikrofon das Signal verstärkt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.gain, gain
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Betrag, um den das Mikrofon das Signal verstärkt. Die zulässigen Werte liegen zwischen 0 und 100. Der Standardwert ist 50.
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/gain" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.gain</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:index:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">index</apiName><shortdesc class="- topic/shortdesc ">
	 Der Index des Mikrofons, der in dem durch „Microphone.names“ zurückgegebenen Array angegeben ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.index, index
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Der Index des Mikrofons, der in dem durch <codeph class="+ topic/ph pr-d/codeph ">Microphone.names</codeph> zurückgegebenen Array angegeben ist.
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/names" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.names</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
    Die isSupported-Eigenschaft hat den Wert „true“, wenn die Microphone-Klasse von der aktuellen Plattform unterstützt wird, andernfalls hat sie den Wert „false“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die isSupported<codeph class="+ topic/ph pr-d/codeph "/>-Eigenschaft hat den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn die Microphone-Klasse von der aktuellen Plattform unterstützt wird, andernfalls hat sie den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:muted:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">muted</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob der Benutzer den Zugriff auf das Mikrofon verweigert (true) oder gewährt hat (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.muted, muted
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob der Benutzer den Zugriff auf das Mikrofon verweigert (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) oder gewährt hat (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). Wenn sich dieser Wert ändert, wird ein <codeph class="+ topic/ph pr-d/codeph ">status</codeph>-Ereignis ausgelöst. Weitere Informationen finden Sie unter <codeph class="+ topic/ph pr-d/codeph ">Microphone.getMicrophone()</codeph>. 
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/event:status" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.status</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	 Der Name des aktuellen Soundaufnahmegeräts, der von der Soundaufnahmehardware zurückgegeben wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.name, name
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Der Name des aktuellen Soundaufnahmegeräts, der von der Soundaufnahmehardware zurückgegeben wurde.
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.media.xml#Microphone/names" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.names</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:names:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">names</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Array mit den Namen aller verfügbaren Soundaufnahmegeräte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.names, names
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Array mit den Namen aller verfügbaren Soundaufnahmegeräte. Die Namen werden zurückgegeben, ohne dass das Flash Player-Bedienfeld für die Zugriffsschutzeinstellungen für Benutzer angezeigt werden muss. Mit diesem Array wird über die <codeph class="+ topic/ph pr-d/codeph ">Microphone.names.length</codeph>-Eigenschaft der auf null basierende Index jedes Soundaufnahmegeräts sowie die Anzahl der Soundaufnahmegeräte im System angegeben. Weitere Informationen finden Sie im Abschnitt zur Array-Klasse.
	 
	 <p class="- topic/p ">Zum Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">Microphone.names</codeph>-Eigenschaft ist eine genaue Überprüfung der Hardware erforderlich; daher kann das Erstellen des Arrays einige Sekunden dauern. In den meisten Fällen können Sie das Standardmikrofon verwenden.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Um den Namen des aktuellen Mikrofons festzustellen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Eigenschaft.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Array</linktext></link><link href="flash.media.xml#Microphone/name" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.name</linktext></link><link href="flash.media.xml#Microphone/getMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getMicrophone()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:noiseSuppressionLevel:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">noiseSuppressionLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Maximale Dämpfung des Rauschens in dB (negative Zahl), die für den Speex-Encoder verwendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound,
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Maximale Dämpfung des Rauschens in dB (negative Zahl), die für den Speex-Encoder verwendet wird. Wenn aktiviert, wird Rauschunterdrückung auf den durch das Mikrofon erfassten Ton angewendet, bevor die Speex-Komprimierung erfolgt. Mit der Einstellung 0 wird die Rauschunterdrückung deaktiviert. Rauschunterdrückung ist standardmäßig mit einer maximalen Dämpfung von -30 dB aktiviert. Wird bei Auswahl des Nellymoser-Codecs ignoriert.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:rate:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rate</apiName><shortdesc class="- topic/shortdesc ">
	 Die Abtastrate (in kHz), mit der das Mikrofon Sound aufnimmt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.rate, rate
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Abtastrate (in kHz), mit der das Mikrofon Sound aufnimmt. Akzeptable Werte sind 5, 8, 11, 22 und 44. Der Standardwert ist 8 kHz, sofern das Soundaufnahmegerät diesen Wert unterstützt. Andernfalls gilt als Standardwert die nächste verfügbare Aufnahmestufe über 8 kHz, die auf dem Soundaufnahmegerät unterstützt wird, gewöhnlich 11 kHz.
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Die tatsächliche Rate unterscheidet sich etwas vom <codeph class="+ topic/ph pr-d/codeph ">rate</codeph>-Wert, wie in der folgenden Tabelle zu sehen ist:</p>
	 
	 <adobetable class="+ topic/table adobe-d/adobetable "><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rate</codeph>-Wert</entry><entry class="- topic/entry ">Tatsächliche Frequenz</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">44</entry><entry class="- topic/entry ">44.100 Hz</entry></row><row class="- topic/row "><entry class="- topic/entry ">22</entry><entry class="- topic/entry ">22.050 Hz</entry></row><row class="- topic/row "><entry class="- topic/entry ">11</entry><entry class="- topic/entry ">11.025 Hz</entry></row><row class="- topic/row "><entry class="- topic/entry ">8</entry><entry class="- topic/entry ">8.000 Hz</entry></row><row class="- topic/row "><entry class="- topic/entry ">5</entry><entry class="- topic/entry ">5.512 Hz</entry></row></tbody></tgroup></adobetable>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/rate" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.rate</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:silenceLevel:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">silenceLevel</apiName><shortdesc class="- topic/shortdesc ">
	 Die erforderliche Soundmenge zum Aktivieren des Mikrofons und zum Auslösen des activity-Ereignisses.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.silenceLevel, silenceLevel
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die erforderliche Soundmenge zum Aktivieren des Mikrofons und zum Auslösen des <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignisses. Der Standardwert ist 10.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/gain" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.gain</linktext></link><link href="flash.media.xml#Microphone/setSilenceLevel()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.setSilenceLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:silenceTimeout:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">silenceTimeout</apiName><shortdesc class="- topic/shortdesc ">
	 Die Zeit in Millisekunden zwischen dem Zeitpunkt, zu dem mit dem Mikrofon kein Sound mehr erfasst wird, und dem Zeitpunkt, zu dem das activity-Ereignis ausgelöst wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.silenceTimeout, silenceTimeout
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Zeit in Millisekunden zwischen dem Zeitpunkt, zu dem mit dem Mikrofon kein Sound mehr erfasst wird, und dem Zeitpunkt, zu dem das <codeph class="+ topic/ph pr-d/codeph ">activity</codeph>-Ereignis ausgelöst wird. Der Standardwert ist 2000 (2 Sekunden).
	 
	 <p class="- topic/p ">Um diesen Wert einzustellen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">Microphone.setSilenceLevel()</codeph>-Methode.</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/setSilenceLevel()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.setSilenceLevel()</linktext></link></related-links></apiValue><apiValue id="flash.media:Microphone:soundTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">soundTransform</apiName><shortdesc class="- topic/shortdesc ">
	 Steuert den Sound dieses Microphone-Objekts im Loopback-Modus.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Document this better with examples.
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:SoundTransform</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Steuert den Sound dieses Microphone-Objekts im Loopback-Modus.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Microphone:useEchoSuppression:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">useEchoSuppression</apiName><shortdesc class="- topic/shortdesc ">
	 Weist den Wert „true“ auf, wenn die Echounterdrückung aktiviert ist, andernfalls „false“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Microphone, audio, sound, Microphone.useEchoSuppression, useEchoSuppression
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Weist den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf, wenn die Echounterdrückung aktiviert ist, andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, es sei denn, der Benutzer hat im Flash Player-Bedienfeld für die Mikrofoneinstellungen die Option „Echo reduzieren“ gewählt.
	 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/setUseEchoSuppression()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.setUseEchoSuppression()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:StageVideo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StageVideo</apiName><shortdesc class="- topic/shortdesc ">
    Das StageVideo-Objekt verwendet die Hardwarebeschleunigungsfunktionen des Geräts, falls verfügbar, um Live-Video oder aufgenommenes Video in einer Anwendung anzuzeigen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Das StageVideo-Objekt verwendet die Hardwarebeschleunigungsfunktionen des Geräts, falls verfügbar, um Live-Video oder aufgenommenes Video in einer Anwendung anzuzeigen. Hardwarebeschleunigungsfunktionen sind bei den meisten Geräten verfügbar. Das StageVideo-Objekt unterstützt dieselben Videoformate wie das Video-Objekt. Weitere Informationen zu diesen Formaten finden Sie im Abschnitt zur flash.net.NetStream-Klasse.
    
    <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Unter AIR 2.5 wird diese Funktion nur auf Geräten unterstützt, die AIR für TV ausführen. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.   
    </p>
       
    <p class="- topic/p ">Das vom StageVideo-Objekt angezeigte Video erscheint immer in einem rechteckigen Bereich auf der Bühne hinter allen Flash-Anzeigelistenobjekten. Deshalb nutzt das StageVideo-Objekt die Hardwarebeschleunigung, während der häufigste Fall bei Videoanzeigen unterstützt wird: ein rechteckiger Anzeigebereich, auf dem Videosteuerungen eingeblendet sind.</p>   
    
    
    <p class="- topic/p ">Die Vorteile der Verwendung eines StageVideo-Objekts anstelle des Video-Objekts sind:</p>
    
    <p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">Optimale Videowiedergabeleistung aufgrund der Verwendung der Hardwarebeschleunigung.</li><li class="- topic/li ">Verringerte Prozessor- und Energiebeanspruchung.</li><li class="- topic/li ">Flexibilität und Kreativität bei der Entwicklung von Inhalten, zum Beispiel Videosteuerungen, die vor dem StageVideo-Objekt angezeigt werden.</li></ul></p>
      
    <p class="- topic/p ">Da das StageVideo-Objekt Hardwarefähigkeiten des Geräts nutzt, gelten für StageVideo-Objekte die folgenden Einschränkungen gegenüber einem Video-Objekt:</p>
    
    <p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">Der Videoanzeigebereich kann nur ein Rechteck sein. Kompliziertere Anzeigebereiche, zum Beispiel Ellipsen oder unregelmäßige Formen, können nicht verwendet werden.</li><li class="- topic/li ">Sie können ein StageVideo-Objekt nicht drehen.</li><li class="- topic/li ">Sie können ein StageVideo-Objekt nicht als Bitmap zwischenspeichern.</li><li class="- topic/li ">Sie können nicht mit BitmapData auf die Videodaten zugreifen.</li><li class="- topic/li ">Sie können das Video nicht in die SWF-Datei einbetten. Sie können ein StageVideo-Objekt nur mit dem NetStream-Objekt verwenden.</li><li class="- topic/li ">Sie können keine Filter, Mischmodi oder Alphawerte auf ein StageVideo-Objekt anwenden.</li><li class="- topic/li ">Sie können keine Farbtransformationen, 3D-Transformationen oder Matrixtransformationen auf ein anwenden.</li><li class="- topic/li ">Sie können keine Masken oder 9-teiliges Segmentraster auf ein StageVideo-Objekt anwenden.</li><li class="- topic/li ">Mischmodi, die Sie auf Anzeigeobjekte anwenden, die sich vor dem StageVideo-Objekt befinden, werden nicht auf das StageVideo-Objekt angewendet.</li><li class="- topic/li ">Sie können ein StageVideo-Objekt nur auf vollen Pixelgrenzen platzieren.</li><li class="- topic/li ">Für jede SWF-Datei beschränkt Flash Player die Anzahl der StageVideo-Objekte, die gleichzeitig angezeigt werden können, auf vier. Die tatsächliche Höchstzahl kann jedoch darunter liegen; dies ist von den Hardwareressourcen des Geräts abhängig. Bei Geräten mit AIR für TV kann jeweils nur ein StageVideo-Objekt ein Video anzeigen.</li><li class="- topic/li ">Die Videozeitgebung ist nicht mit der Zeitgebung von Flash-Inhalten, die die Laufzeitumgebung anzeigt, synchronisiert.</li><li class="- topic/li ">Obwohl die Videodarstellung die jeweils beste für ein gegebenes Gerät verfügbare ist, ist sie nicht 100% „pixel-identisch“ auf allen Geräten. Es treten geringfügige Abweichungen auf, die auf Unterschiede bei den Treibern und der Hardware zurückzuführen sind.</li><li class="- topic/li ">Einige Geräte unterstützen nicht alle erforderlichen Farbräume. So unterstützen bestimmte Geräte zum Beispiel nicht BT.709, den H.264-Standard. In diesen Fällen können Sie für die schnelle Anzeige BT.601 verwenden.</li><li class="- topic/li ">Sie können kein Bühnenvideo mit WMODE-Einstellungen wie <codeph class="+ topic/ph pr-d/codeph ">normal</codeph>, <codeph class="+ topic/ph pr-d/codeph ">opaque</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">transparent</codeph> verwenden. Bühnenvideo unterstützt nur <codeph class="+ topic/ph pr-d/codeph ">WMODE=direct</codeph>, wenn nicht der Vollbildmodus verwendet wird. WMODE hat in Safari 4 oder höher, IE 9 oder höher und in AIR für TV keine Auswirkungen.</li></ul></p>
    
    <p class="- topic/p ">In den folgenden Schritte ist das Abspielen eines Videos mit einem StageVideo-Objekt zusammengefasst:</p>
    
    <p class="- topic/p "><ol class="- topic/ol "><li class="- topic/li ">Verwenden Sie einen Listener für das StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY-Ereignis, um festzustellen, wenn sich der Stage.stageVideos-Vektor geändert hat. (Nicht unterstützt für AIR 2.5 für TV.) </li><li class="- topic/li ">Wenn das StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABILITY-Ereignis meldet, dass Bühnenvideo verfügbar ist, greifen Sie mit dem <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph>-Vektorobjekt in dieser Ereignisprozedur auf ein StageVideo-Objekt zu. In AIR 2.5 für TV greifen Sie auf <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph> zu, nachdem das erste Bild der SWF-Datei gerendert wurde. <b class="+ topic/ph hi-d/b ">Hinweis:</b> Sie können kein StageVideo-Objekt erstellen.</li><li class="- topic/li ">Hängen Sie ein NetStream-Objekt an, indem Sie <codeph class="+ topic/ph pr-d/codeph ">StageVideo.attachNetStream()</codeph> verwenden.</li><li class="- topic/li ">Spielen Sie das Video mit <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> ab.</li><li class="- topic/li ">Verwenden Sie einen Listener für das <codeph class="+ topic/ph pr-d/codeph ">StageVideoEvent.RENDER_STATE</codeph>-Ereignis des StageVideo-Objekts, um den Wiedergabestatus des Videos festzustellen. Der Empfang dieses Ereignisses gibt auch an, dass die width- und height-Eigenschaften (Breite und Höhe) des Videos initialisiert oder geändert wurden. </li><li class="- topic/li ">Verwenden Sie einen Listener für das <codeph class="+ topic/ph pr-d/codeph ">VideoEvent.RENDER_STATE</codeph>-Ereignis des Video-Objekts. Dieses Ereignis stellt dieselben Status bereit wie StageVideoEvent.RENDER_STATE, sodass Sie damit ebenfalls feststellen können, ob GPU-Beschleunigung verfügbar ist. Der Empfang dieses Ereignisses gibt auch an, dass die width- und height-Eigenschaften (Breite und Höhe) des Videos initialisiert oder geändert wurden. (Nicht unterstützt für AIR 2.5 für TV.)</li></ol></p>
    
    
    <p class="- topic/p ">Wenn ein <codeph class="+ topic/ph pr-d/codeph ">StageVideoEvent.RENDER_STATE</codeph>-Ereignis angibt, dass das Video nicht abgespielt werden kann, können Sie wieder ein Video-Objekt anstelle eines StageVideo-Objekts verwenden. Dieses Ereignis wird abgesetzt, nachdem das Video an ein NetStream-Objekt angehängt wurde und abgespielt wird. Je nach Plattform können außerdem Änderungen am Wiedergabestatus zum Absetzen des Ereignisses führen. Verarbeiten Sie das <codeph class="+ topic/ph pr-d/codeph ">StageVideoEvent.RENDER_STATE</codeph>-Ereignis, um sicherzustellen, dass die Anwendung das Video abspielt oder geregelt nicht abspielt.
    </p>
    
    <p class="- topic/p ">Wenn ein laufendes Video aus einem WMODE, der kein Bühnenvideo unterstützt, in den Vollbildmodus wechselt, kann Bühnenvideo verfügbar werden. Umgekehrt kann Bühnenvideo nicht länger verfügbar sein, wenn der Benutzer den Vollbildmodus beendet. In diesen Fällen ändert sich der Stage.stageVideos-Vektor. Um über diese Änderung informiert zu werden, verwenden Sie einen Listener für das StageVideoAvailabilityEvent.STAGE_VIDEO_AVAILABITY-Ereignis. <b class="+ topic/ph hi-d/b ">HINWEIS:</b> Diese Benachrichtigung ist in AIR 2.5 für TV nicht verfügbar.</p>
    </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.events.xml#StageVideoEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoEvent</linktext></link><link href="flash.events.xml#StageVideoAvailabilityEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StageVideoAvailabilityEvent</linktext></link><link href="flash.events.xml#VideoEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.VideoEvent</linktext></link><link href="flash.display.xml#Stage/stageVideos" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.stageVideos</linktext></link><link href="flash.media.xml#Video" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Video</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="http://www.adobe.com/go/learn_as3_stageVideo_en" class="- topic/link "><linktext class="- topic/linktext ">Verwenden der StageVideo-Klasse für hardwarebeschleunigtes Rendering</linktext></link></related-links><adobeApiEvent id="flash.media:StageVideo_flash.events.StageVideoEvent.RENDER_STATE_renderState" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">renderState</apiName><shortdesc class="- topic/shortdesc ">
	 Wird vom StageVideo-Objekt abgesetzt, wenn sich der Renderstatus des StageVideo-Objekts ändert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StageVideoEvent.RENDER_STATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StageVideoEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Wird vom StageVideo-Objekt abgesetzt, wenn sich der Renderstatus des StageVideo-Objekts ändert.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.media:StageVideo:attachNetStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachNetStream</apiName><shortdesc class="- topic/shortdesc ">
        Definiert einen Video-Stream, der innerhalb des StageVideo-Objekts im Anwendungsfenster angezeigt werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">netStream</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStream</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein NetStream-Objekt. Wenn Sie die Verbindung mit dem StageVideo-Objekt beenden möchten, übergeben Sie den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
        </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Definiert einen Video-Stream, der innerhalb des StageVideo-Objekts im Anwendungsfenster angezeigt werden soll. Der Videostream ist entweder eine Videodatei, die mit NetStream.play() abgespielt wird, oder <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Eine Videodatei kann im lokalen Dateisystem oder auf Flash Media Server gespeichert werden. Wenn der Wert des <codeph class="+ topic/ph pr-d/codeph ">netStream</codeph>-Arguments auf <codeph class="+ topic/ph pr-d/codeph ">null</codeph> gesetzt ist, wird das Video nicht mehr im StageVideo-Objekt wiedergegeben.
        
        
        <p class="- topic/p ">Bevor Sie <codeph class="+ topic/ph pr-d/codeph ">attachNetStream()</codeph> ein zweites Mal aufrufen, rufen Sie die <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>-Methode des zurzeit angehängten NetStream-Objekts an. Mit dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> werden alle Ressourcen freigegeben, die zum Abspielen des Videos benötigt werden, einschließlich des Hardwaredecoders. Sie können dann <codeph class="+ topic/ph pr-d/codeph ">attachNetStream()</codeph> mit einem anderen NetStream-Objekt oder <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufrufen.</p>
        
        <p class="- topic/p ">
        Sie müssen diese Methode nicht verwenden, wenn eine Videodatei nur Audiodaten enthält. Die Audiodaten von Videodateien werden automatisch wiedergegeben, wenn Sie <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> aufrufen. Um die mit einer Videodatei verknüpften Audiodaten zu steuern, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">soundTransform</codeph>-Eigenschaft des NetStream-Objekts, das die Videodatei wiedergibt.
        </p>        
        
        </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.media:StageVideo:colorSpaces:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">colorSpaces</apiName><shortdesc class="- topic/shortdesc ">
        Gibt die Namen der verfügbaren Farbräume für diese Videooberfläche zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$String" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Gibt die Namen der verfügbaren Farbräume für diese Videooberfläche zurück. Normalerweise enthält diese Liste „BT.601“ und „BT.709“. Bei einigen Konfigurationen wird nur „BT.601“ unterstützt, was bedeutet, dass ein Video möglicherweise nicht im richtigen Farbraum dargestellt wird.
		
		<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Bei Geräten mit AIR für TV gibt der Wert „BT.601“ die Softwarewiedergabe an, während der Wert „BT.709“ die Hardwarewiedergabe anzeigt. </p>
		
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageVideo:depth:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">depth</apiName><shortdesc class="- topic/shortdesc ">
        Die Tiefenebene eines StageVideo-Objekts in Relation zu anderen StageVideo-Objekten.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Tiefe eines StageVideo-Objekts in Relation zu anderen StageVideo-Objekten.
		</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Die Tiefenebene eines StageVideo-Objekts in Relation zu anderen StageVideo-Objekten.
		
		<p class="- topic/p ">StageVideo-Objekte werden immer hinter anderen Objekten auf der Bühne angezeigt. Wenn eine Plattform mehrere StageVideo-Objekte unterstützt, zeigt die <codeph class="+ topic/ph pr-d/codeph ">depth</codeph>-Eigenschaft die Tiefenebene eines StageVideo-Objekts an. Die <codeph class="+ topic/ph pr-d/codeph ">depth</codeph>-Eigenschaft des untersten StageVideo-Objekts hat den kleinsten Wert. Wenn mehrere StageVideo-Objekte dieselbe Tiefeneinstellung haben, bestimmt die Reihenfolge, in der sie im <codeph class="+ topic/ph pr-d/codeph ">stage,stageVideos</codeph>-Vektor auftauchen, ihre relative Tiefe.</p>	
		
        <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Geräte mit AIR für TV unterstützen nur ein StageVideo-Objekt. Deshalb gilt diese Eigenschaft für diese Geräte nicht. Es ist ein Platzhalter für die zukünftige Unterstützung auf anderen Geräten.</p> 
		
        </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Stage/stageVideos" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.stageVideos</linktext></link></related-links></apiValue><apiValue id="flash.media:StageVideo:pan:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pan</apiName><shortdesc class="- topic/shortdesc ">
        Die Ausschnitteinstellung für die Anzeige des Videos, als Point-Objekt angegeben.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Point</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Point-Wert ist nicht gültig.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt an, welches Rechteck eines gezoomten (vergrößerten) Videos angezeigt wird.
		</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Die Ausschnitteinstellung für die Anzeige des Videos, als Point-Objekt angegeben. 
        
        <p class="- topic/p ">Standardmäßig hat <codeph class="+ topic/ph pr-d/codeph ">pan</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">(0,0)</codeph>. Mit diesem Standardwert wird das Video in dem Rechteck zentriert, das von <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph> spezifiziert wird.</p>
		
		<p class="- topic/p ">Der <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Wert ist nur dann von Bedeutung, wenn die <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Eigenschaft nicht den Standardwert <codeph class="+ topic/ph pr-d/codeph ">(1.0, 1.0)</codeph> hat. Wenn ein Video im <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck mit dem <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Standardwert angezeigt wird, passt die Plattform das Video genau in das Rechteck ein. Somit ist das gesamte Video sichtbar. Wenn jedoch ein Zoomfaktor angegeben wurde, ist nicht das gesamte Video sichtbar. In diesem Fall können Sie den <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Wert festlegen, um anzugeben, welches Teilrechteck des Videos im <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck angezeigt werden soll.</p>
		
		<p class="- topic/p ">Die gültigen Werte der <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Eigenschaft liegen im Bereich <codeph class="+ topic/ph pr-d/codeph ">(-1.0, -1.0)</codeph> bis <codeph class="+ topic/ph pr-d/codeph ">(1.0, 1.0)</codeph>. Insbesondere:</p>
		
		<p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">
		Der <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Wert <codeph class="+ topic/ph pr-d/codeph ">(-1.0, -1.0)</codeph> platziert das obere linke Pixel des Videos in der oberen linken Ecke des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechtecks.
		</li><li class="- topic/li ">
		Der <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Wert <codeph class="+ topic/ph pr-d/codeph ">(1.0, 1.0)</codeph> platziert das untere rechte Pixel des Videos in der unteren rechten Ecke des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechtecks.
		</li><li class="- topic/li ">
		Der <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Wert <codeph class="+ topic/ph pr-d/codeph ">(1.0, -1.0)</codeph> platziert das obere rechte Pixel des Videos in der oberen rechten Ecke des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechtecks.
		</li><li class="- topic/li ">
		Der <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Wert <codeph class="+ topic/ph pr-d/codeph ">(-1.0, 1.0)</codeph> platziert das untere linke Pixel des Videos in der unteren linken Ecke des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechtecks.
		</li></ul>
		</p>
		
		<p class="- topic/p ">Werte zwischen -1.0 und 1.0 ergeben entsprechende Ausschnitte.</p>
        
        <p class="- topic/p ">Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Eigenschaft auf einen Wert außerhalb des gültigen Bereichs <codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph> setzen, wird eine Ausnahme ausgegeben. Die Laufzeitumgebung setzt den Wert auf den letzten gültigen Wert zurück.</p>
        
        <p class="- topic/p ">Ziehen Sie auch in Erwägung, zur Verwendung eines StageVideo-Objekts ein Element des <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph>-Vector-Objekts einer StageVideo-Variablen zuzuweisen. Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Eigenschaft der StageVideo-Variablen festlegen, ändert sich auch das zugrunde liegende <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph>-Vector-Element. Wenn Sie dieses Element später einer anderen StageVideo-Variablen zuweisen, setzen Sie die <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Eigenschaft zurück.</p>
        
        </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#StageVideo/zoom" class="- topic/link "><linktext class="- topic/linktext ">Zoom</linktext></link></related-links></apiValue><apiValue id="flash.media:StageVideo:videoHeight:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoHeight</apiName><shortdesc class="- topic/shortdesc ">
		Eine Ganzzahl, die die Höhe des Videostreams in Pixeln angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Eine Ganzzahl, die die Höhe des Videostreams in Pixeln angibt.
		
		<p class="- topic/p ">Diese Eigenschaft können Sie zum Beispiel verwenden, um sicherzustellen, dass der Benutzer das Video in derselben Höhe sieht, mit der es erfasst wurde, unabhängig von der Größe des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechtecks.</p>		
		
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageVideo:videoWidth:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoWidth</apiName><shortdesc class="- topic/shortdesc ">
		Eine Ganzzahl, die die Breite des Videostreams in Pixeln angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Eine Ganzzahl, die die Breite des Videostreams in Pixeln angibt.
		
		<p class="- topic/p ">Diese Eigenschaft können Sie zum Beispiel verwenden, um sicherzustellen, dass der Benutzer das Video in derselben Breite sieht, mit der es erfasst wurde, unabhängig von der Größe des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechtecks.</p>		
		
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageVideo:viewPort:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">viewPort</apiName><shortdesc class="- topic/shortdesc ">
        Die absolute Position und Größe der Videooberfläche in Pixel.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Rectangle</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Rectangle-Wert ist nicht gültig.
        </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Die absolute Position und Größe der Videooberfläche in Pixel.
        
        <p class="- topic/p ">Die Position des Videos ist relativ zur oberen linken Ecke der Bühne.</p>
        
        <p class="- topic/p ">
        Der gültige Bereich der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaften des <codeph class="+ topic/ph pr-d/codeph ">viewPort</codeph>-Rectangle-Objekts ist -8192 bis 8191. Deshalb können Sie das Video vollständig oder teilweise außerhalb der Bühne positionieren. Sie können das Video auch größer als die Bühne machen, wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">width</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">height</codeph>-Eigenschaften der <codeph class="+ topic/ph pr-d/codeph ">viewPort</codeph>-Eigenschaft größer als die Bühne einstellen.</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:StageVideo:zoom:set" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">zoom</apiName><shortdesc class="- topic/shortdesc ">
        Die Zoom-Einstellung für das Video, als Point-Objekt angegeben.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="10.2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Point</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Point-Wert ist nicht gültig.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Zoom-Einstellung des Videos.
		</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Die Zoom-Einstellung für das Video, als Point-Objekt angegeben. 
        
        <p class="- topic/p ">Der Zoom-Punkt ist ein Skalierungsfaktor. Standardmäßig hat <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">(1.0, 1.0)</codeph>. Mit diesem Standardwert wird das gesamte Video im<codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck angezeigt.</p>
        
	    <p class="- topic/p ">Die gültigen Werte der <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Eigenschaft liegen im Bereich <codeph class="+ topic/ph pr-d/codeph ">(1.0, 1.0)</codeph> bis <codeph class="+ topic/ph pr-d/codeph ">(16.0, 16.0)</codeph>. Die <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-Eigenschaft des zoom-Point-Objekts gibt den Zoomwert für die horizontalen Pixel an und die y-Eigenschaft gibt den Zoom-Wert für die vertikalen Pixel an.</p>
		
		<p class="- topic/p ">Ein <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Wert von <codeph class="+ topic/ph pr-d/codeph ">(2.0, 2.0)</codeph> zeigt zum Beispiel nur die Hälfte der horizontalen und die Hälfte der vertikalen Pixel im <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck an. Das bedeutet, dass das Video zwar immer noch das <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck ausfüllt, es ist jedoch nur die Hälfte des Videos sichtbar, sodass ein 2-facher Vergrößerungseffekt entsteh. Dementsprechend wird bei einem <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Wert von <codeph class="+ topic/ph pr-d/codeph ">(16.0, 16.0)</codeph> nur 1/16 der horizontalen Pixel und ein 1/16 der vertikalen Pixel im <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck angezeigt, sodass ein 16-facher Vergrößerungseffekt entsteht.</p>
		
		<p class="- topic/p ">Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Eigenschaft festlegen, stellen Sie die <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Eigenschaft so ein, dass das <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck das gewünschte Teilrechteck des Videos anzeigt.</p>
		
		<p class="- topic/p ">Betrachten Sie die folgende Situation, bei der es hilfreich ist, einen anderen Wert für die <codeph class="+ topic/ph pr-d/codeph ">x</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaften des <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Point-Objekts festzulegen. Beachten Sie zunächst, dass wenn ein Video im <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck mit dem <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Standardwert angezeigt wird, die Plattform das Video genau in das Rechteck einpasst. Wenn das Rechteck des Videos nicht gleichmäßig in das <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck skaliert wird, kann die Videoanzeige verzerrt sein. Das heißt, dass die Seitenverhältnisse des Videos und des <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck nicht gleich sind. Dieser Fall kann zum Beispiel eintreten, wenn das Video eine andere Breite als Höhe hat, die <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Eigenschaft jedoch ein Quadrat spezifiziert. Um die Verzerrung zu beheben, stellen Sie unterschiedliche Werte für die <codeph class="+ topic/ph pr-d/codeph ">x</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaften des <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Point-Objekts ein. Stellen Sie dann die <codeph class="+ topic/ph pr-d/codeph ">pan</codeph>-Eigenschaft ein, um sicherzustellen, dass das <codeph class="+ topic/ph pr-d/codeph ">StageVideo.viewPort</codeph>-Rechteck das richtige Teilrechteck des Videos zeigt.</p> 
        
        <p class="- topic/p ">Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Eigenschaft auf einen Wert außerhalb des gültigen Bereichs <codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph> setzen, wird eine Ausnahme ausgegeben. Die Laufzeitumgebung setzt den Wert auf den letzten gültigen Wert zurück.</p>
        
        <p class="- topic/p ">Ziehen Sie auch in Erwägung, zur Verwendung eines StageVideo-Objekts ein Element des <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph>-Vector-Objekts einer StageVideo-Variablen zuzuweisen. Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Eigenschaft der StageVideo-Variablen festlegen, ändert sich auch das zugrunde liegende <codeph class="+ topic/ph pr-d/codeph ">Stage.stageVideos</codeph>-Vector-Element. Wenn Sie dieses Element später einer anderen StageVideo-Variablen zuweisen, setzen Sie die <codeph class="+ topic/ph pr-d/codeph ">zoom</codeph>-Eigenschaft zurück.</p>       
		
		
        </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#StageVideo/pan" class="- topic/link "><linktext class="- topic/linktext ">pan</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:MicrophoneEnhancedOptions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">MicrophoneEnhancedOptions</apiName><shortdesc class="- topic/shortdesc ">
 Die MicrophoneEnhancedOptions-Klasse stellt Konfigurationsoptionen für erweitertes Audio (akustische Echokompensation) bereit.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die MicrophoneEnhancedOptions-Klasse stellt Konfigurationsoptionen für erweitertes Audio (akustische Echokompensation) bereit. Die akustische Echokompensation ermöglicht es, dass mehrere Teilnehmer ohne Headsets in einer Audio/Video-Chat-Anwendung miteinander kommunizieren können. 
 
 <p class="- topic/p ">Um die akustische Echokompensation zu verwenden, rufen Sie <codeph class="+ topic/ph pr-d/codeph ">Microphone.getEnhancedMicrophone()</codeph> auf, um einen Verweis auf ein erweitertes Microphone-Objekt abzurufen. Legen Sie die <codeph class="+ topic/ph pr-d/codeph ">Microphone.enhancedOptions</codeph>-Eigenschaft auf eine Instanz der <codeph class="+ topic/ph pr-d/codeph ">MicrophoneEnhancedOptions</codeph>-Klasse fest.
 </p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Microphone/enhancedOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.enhancedOptions</linktext></link><link href="flash.media.xml#Microphone/getEnhancedMicrophone()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Microphone.getEnhancedMicrophone()</linktext></link></related-links><apiValue id="flash.media:MicrophoneEnhancedOptions:autoGain:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoGain</apiName><shortdesc class="- topic/shortdesc ">
	 Aktivieren Sie die automatische Verstärkungssteuerung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Aktivieren Sie die automatische Verstärkungssteuerung. Ein Zeitbereichalgorithmus zur automatischen Verstärkungssteuerung wird mit der Rauschunterdrückung verwendet. Der Standardwert ist „aus“.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedOptions:echoPath:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">echoPath</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt den Echopfad (in Sekunden) an, der zur akustischen Echokompensation verwendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt den Echopfad (in Sekunden) an, der zur akustischen Echokompensation verwendet wird. Ein längerer Echopfad führt zu einer besseren Echokompensation. Ein längerer Echopfad verursacht auch eine längere Verzögerung und erfordert komplexere Rechenleistung. Der Standardwert ist 128 (empfohlen). Der andere mögliche Wert ist 256.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedOptions:isVoiceDetected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isVoiceDetected</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob der Mikrofoneingang Sprache erkannt hat.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob der Mikrofoneingang Sprache erkannt hat.
	 
	 <p class="- topic/p "> Mögliche Werte sind: <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>, nicht aktiviert; <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, es wird keine Sprache erkannt; <codeph class="+ topic/ph pr-d/codeph ">1</codeph>, es wird Sprache erkannt.
	 </p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedOptions:mode:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">mode</apiName><shortdesc class="- topic/shortdesc ">
	 Steuert den erweiterten Mikrofonmodus.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Steuert den erweiterten Mikrofonmodus. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">FULL_DUPLEX</codeph> für alle Mikrofone, die keine USB-Mikrofone sind. Der Standardwert für USB-Mikrofone ist <codeph class="+ topic/ph pr-d/codeph ">HALF_DUPLEX</codeph>. Mögliche Werte und Beschreibungen finden Sie unter <codeph class="+ topic/ph pr-d/codeph ">MicrophoneEnhancedMode</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#MicrophoneEnhancedMode" class="- topic/link "><linktext class="- topic/linktext ">flash.media.MicrophoneEnhancedMode</linktext></link></related-links></apiValue><apiValue id="flash.media:MicrophoneEnhancedOptions:nonLinearProcessing:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nonLinearProcessing</apiName><shortdesc class="- topic/shortdesc ">
	 Aktiviert die nicht-lineare Verarbeitung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Aktiviert die nicht-lineare Verarbeitung. Die nicht-lineare Verarbeitung unterdrückt das Restecho, das auftritt, wenn eine Person spricht. Es wird die nicht-lineare Verarbeitungstechnik des Zeitbereichs verwendet. Schalten Sie die nicht-lineare Verarbeitung für Musikquellen aus. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, womit die nicht-lineare Verarbeitung eingeschaltet wird.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:Sound" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Sound</apiName><shortdesc class="- topic/shortdesc ">
  Über die Soundklasse können Sie Sound in einer Anwendung bearbeiten.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
   
   </refpath></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Über die Soundklasse können Sie Sound in einer Anwendung bearbeiten. Mit der Soundklasse können Sie Soundobjekte erstellen, externe MP3-Dateien in diese Objekte laden und abspielen, Soundstreams schließen und auf Sounddaten wie z. B. Informationen zur Byteanzahl im Stream und zu ID3-Metadaten zugreifen. Eine umfassendere Steuerung des Sounds kann über die Soundquelle, d. h. das SoundChannel- oder Microphone-Objekt für den Sound, und über die Eigenschaften der SoundTransform-Klasse durchgeführt werden, die die Ausgabe des Sounds über die Lautsprecher des Computers steuern. 
  
  <p class="- topic/p ">In Flash Player 10 und höher und AIR 1.5 und höher können Sie diese Klasse auch verwenden, um mit Sound zu arbeiten, der dynamisch generiert wird. In diesem Fall verwendet das Soundobjekt die Funktion, die Sie einer <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignisprozedur zuweisen, um Sounddaten abzurufen. Der Sound wird abgespielt, während er von einem ByteArray-Objekt abgerufen wird, das Sie mit Sounddaten füllen. Sie können <codeph class="+ topic/ph pr-d/codeph ">Sound.extract()</codeph> verwenden, um Sounddaten aus einem Soundobjekt zu extrahieren. Anschließend können Sie die Daten bearbeiten, bevor Sie sie wieder zurück in den Stream zum Abspielen schreiben.</p>
  
  <p class="- topic/p ">Den in einer SWF-Datei eingebetteten Sound können Sie über die Eigenschaften in der SoundMixer-Klasse steuern.</p>
  
  <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis</b>: Die Sound-API in ActionScript 3.0 unterscheidet sich von der in ActionScript 2.0. In ActionScript 3.0 können Sie Soundobjekte zum Steuern der zugehörigen Eigenschaften nicht in einer Hierarchie anordnen.</p>
  
  <p class="- topic/p ">Beachten Sie bei Verwendung dieser Klasse das folgende Sicherheitsmodell: </p>
  
  <ul class="- topic/ul "><li class="- topic/li ">Sounddaten können nicht geladen und wiedergegeben werden, wenn sich die aufrufende Datei in einer Netzwerk-Sandbox befindet und die zu ladende Sounddatei lokal gespeichert ist.</li><li class="- topic/li ">In der Standardeinstellung ist ein Laden und Abspielen von Sound nicht erlaubt, wenn die aufrufende Datei lokal ist und versucht, Sound remote zu laden und abzuspielen. Ein Benutzer muss explizit Zugriffsrechte gewähren, um diese Art des Zugriffs zu erlauben.</li><li class="- topic/li ">Für bestimmte Vorgänge bei Sounddaten liegen Beschränkungen vor. Auf die Daten in einem geladenen Sound kann nur über eine Datei in einer anderen Domäne zugegriffen werden, wenn eine Cross-Domain-Richtliniendatei implementiert ist. Zu den soundbezogenen APIs, die unter diese Beschränkung fallen, zählen die <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph>-Eigenschaft sowie die Methoden <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.computeSpectrum()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">SoundMixer.bufferTime</codeph> und die <codeph class="+ topic/ph pr-d/codeph ">SoundTransform()</codeph>-Klasse.</li></ul>
  
  <p class="- topic/p ">In Adobe AIR unterliegt Inhalt in der Sicherheitssandbox <codeph class="+ topic/ph pr-d/codeph ">der Anwendung</codeph> (Inhalt, der mit der AIR-Anwendung installiert wird) nicht diesen Sicherheitseinschränkungen.</p>
  
  <p class="- topic/p ">Weitere Informationen zum Thema Sicherheit finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Sicherheit</xref>.</p>
  
  </apiDesc><example conref="examples\SoundExample.as" class="- topic/example "> Im folgenden Beispiel werden Informationen über Soundereignisse angezeigt, die beim Öffnen und Abspielen einer MP3-Datei auftreten. Legen Sie zur Ausführung dieses Beispiels eine Datei mit dem Namen „MySound.mp3“ in dem Verzeichnis ab, in dem sich die SWF-Datei befindet.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.net.URLRequest;

    public class SoundExample extends Sprite {
        private var url:String = "MySound.mp3";
        private var song:SoundChannel;

        public function SoundExample() {
            var request:URLRequest = new URLRequest(url);
            var soundFactory:Sound = new Sound();
            soundFactory.addEventListener(Event.COMPLETE, completeHandler);
            soundFactory.addEventListener(Event.ID3, id3Handler);
            soundFactory.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            soundFactory.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            soundFactory.load(request);
            song = soundFactory.play();
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function id3Handler(event:Event):void {
            trace("id3Handler: " + event);
        }

        private function ioErrorHandler(event:Event):void {
            trace("ioErrorHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            trace("progressHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.media.xml#Microphone" class="- topic/link "><linktext class="- topic/linktext ">Microphone</linktext></link><link href="flash.media.xml#SoundChannel" class="- topic/link "><linktext class="- topic/linktext ">SoundChannel</linktext></link><link href="flash.media.xml#SoundMixer" class="- topic/link "><linktext class="- topic/linktext ">SoundMixer</linktext></link><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">SoundTransform</linktext></link></related-links><adobeApiEvent id="flash.media:Sound_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn während eines Ladevorgangs Daten empfangen werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn während eines Ladevorgangs Daten empfangen werden.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 Wird beim Start eines Ladevorgangs ausgelöst.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird beim Start eines Ladevorgangs ausgelöst.
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Wird beim Auftreten eines I/O-Fehlers ausgelöst, durch den der Ladevorgang fehlschlägt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird beim Auftreten eines I/O-Fehlers ausgelöst, durch den der Ladevorgang fehlschlägt. 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.ID3_id3" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">id3</apiName><shortdesc class="- topic/shortdesc ">
 Wird durch ein Soundobjekt ausgelöst, wenn ID3-Daten für MP3-Sound verfügbar sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.ID3</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird durch ein Soundobjekt ausgelöst, wenn ID3-Daten für MP3-Sound verfügbar sind. 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/id3" class="- topic/link "><linktext class="- topic/linktext ">Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Wird nach dem erfolgreichen Laden von Daten ausgelöst.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird nach dem erfolgreichen Laden von Daten ausgelöst. 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.media:Sound_flash.events.SampleDataEvent.SAMPLE_DATA_sampleData" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">sampleData</apiName><shortdesc class="- topic/shortdesc ">
  Wird abgesetzt, wenn die Laufzeitumgebung neue Audiodaten anfordert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SampleDataEvent.SAMPLE_DATA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SampleDataEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Wird abgesetzt, wenn die Laufzeitumgebung neue Audiodaten anfordert. 
 
 </apiDesc><example conref="examples\Sound_SampleDataExample.as" class="- topic/example "> Das folgende Beispiel spielt eine einfache Sinuswelle ab.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/extract()" class="- topic/link "><linktext class="- topic/linktext ">extract()</linktext></link><link href="flash.media.xml#Sound/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.events.xml#SampleDataEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.media:Sound:Sound" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Sound</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt ein neues Soundobjekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stream</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Die URL, die auf eine externe MP3-Datei verweist.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">context</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:SoundLoaderContext</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Ein optionales SoundLoader-Kontextobjekt, das die Pufferzeit (die Mindestanzahl Millisekunden, die MP3-Daten im Puffer des Soundobjekts gehalten werden) definieren kann und festlegen kann, ob die Anwendung vor dem Laden von Sound nach einer domänenübergreifenden Richtliniendatei suchen soll.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt ein neues Soundobjekt. Wenn Sie ein gültiges URLRequest-Objekt für den Soundkonstruktor übergeben, ruft der Konstruktor automatisch die <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>-Funktion für das Soundobjekt auf. Wenn Sie kein gültiges URLRequest-Objekt für den Soundkonstruktor übergeben, müssen Sie die <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>-Funktion für das Soundobjekt selbst aufrufen, da der Stream andernfalls nicht geladen wird.
     
     <p class="- topic/p ">Sobald <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> für ein Soundobjekt aufgerufen wurde, kann später keine andere Sounddatei mehr in dieses Soundobjekt geladen werden. Erstellen Sie ein neues Soundobjekt, wenn Sie eine andere Sounddatei laden möchten.</p>
     
     In Flash Player 10 und höher und AIR 1.5 und höher können Sie statt <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> die <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignisprozedur verwenden, um Sound dynamisch in das Soundobjekt zu laden.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:Sound:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Schließt den Stream. Dadurch werden eventuelle Downloads von Daten beendet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Stream konnte nicht geschlossen werden, oder der Stream war nicht geöffnet.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Schließt den Stream. Dadurch werden eventuelle Downloads von Daten beendet. Nach dem Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>-Methode können möglicherweise keine Daten aus dem Stream gelesen werden.
     
     </apiDesc><example conref="examples\Sound_closeExample.as" class="- topic/example "> Im folgenden Beispiel wird die <codeph class="+ topic/ph pr-d/codeph ">Sound.close()</codeph>-Methode aufgerufen, wenn der Benutzer auf die Stopp-Schaltfläche klickt, und das Streaming von Sound wird gestoppt.
 
 <p class="- topic/p ">Im Konstruktor wird ein Textfeld für die Start- und Stopp-Schaltfläche erstellt. Wenn der Benutzer auf das Textfeld klickt, wird die Methode <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> aufgerufen. Sie verwaltet das Starten und Beenden der Sounddatei. Beachten Sie, dass abhängig von der Netzwerkgeschwindigkeit oder vom Zeitpunkt des Klicks auf die Stopp-Schaltfläche möglicherweise ein Großteil der Datei bereits geladen wurde, sodass es einen Moment dauern kann, bis die Wiedergabe beendet wird. Es wird ein <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph>-Block verwendet, um etwaige IO-Fehler, die beim Schließen des Streams auftreten können, abzufangen. Wenn Sound zum Beispiel aus einem lokalen Verzeichnis geladen und nicht gestreamt wird, wird Fehler 2029 (Dieses URLStream-Objekt verfügt nicht über einen geöffneten Stream) erfasst.</p> 
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> 
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;    
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.MouseEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;

    public class Sound_closeExample extends Sprite {
        private var snd:Sound = new Sound();
        private var button:TextField = new TextField();
        private var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
        
        public function Sound_closeExample() {
            button.x = 10;
            button.y = 10;
            button.text = "START";
            button.border = true;
            button.background = true;
            button.selectable = false;
            button.autoSize = TextFieldAutoSize.LEFT;

            button.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(button);
        }

        private function clickHandler(e:MouseEvent):void {

            if(button.text == "START") {

                snd.load(req);
                snd.play();        

                snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);

                button.text = "STOP";
            }
            else if(button.text == "STOP") {
                    
                try {
                    snd.close();
                    button.text = "Wait for loaded stream to finish.";
                }
                catch (error:IOError) {
                    button.text = "Couldn't close stream " + error.message;    
                }
            }
        }
        
        private function errorHandler(event:IOErrorEvent):void {
                button.text = "Couldn't load the file " + event.text;
        }
    }
}


</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:Sound:extract" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">extract</apiName><shortdesc class="- topic/shortdesc ">
      Extrahiert unformatierte Sounddaten aus einem Soundobjekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
     </refpath></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Anzahl der Samples, die in das ByteArray geschrieben werden, das im <codeph class="+ topic/ph pr-d/codeph ">target</codeph>-Parameter angegeben ist.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">target</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein ByteArray-Objekt, in das die extrahierten Soundsamples platziert werden.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Anzahl der zu extrahierenden Soundsample. Ein Sample enthält sowohl den linken als auch den rechten Kanal, d. h. zwei 32-Bit-Gleitkommawerte.
          
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startPosition</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Sample, bei dem die Extrahierung beginnt. Wenn Sie keinen Wert angeben, beginnt der erste Aufruf für <codeph class="+ topic/ph pr-d/codeph ">Sound.extract()</codeph> am Anfang des Sounds und anschließende Aufrufe ohne Wert für <codeph class="+ topic/ph pr-d/codeph ">startPosition</codeph> erfolgen sequenziell durch die Datei.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Extrahiert unformatierte Sounddaten aus einem Soundobjekt.
     
      <p class="- topic/p ">Diese Methode ist für Situationen gedacht, in denen Sie mit dynamisch generiertem Sound arbeiten und eine Funktion zum <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis für ein anderes Soundobjekt zuweisen. Sie können diese Methode also verwenden, um Sounddaten aus einem Soundobjekt zu extrahieren. Anschließend können Sie die Daten in das Bytearray schreiben, das ein anderes Soundobjekt zum Streamen von dynamischem Audio verwendet.</p>
     
      <p class="- topic/p ">Die Audiodaten werden im Zielbytearray beginnend mit der aktuellen Position des Bytearrays abgelegt. Die Audiodaten werden immer als 44100 Hz Stereo wiedergegeben. Der Sampletyp ist ein 32-Bit-Gleitkommawert, der über <codeph class="+ topic/ph pr-d/codeph ">ByteArray.readFloat()</codeph> in eine Zahl umgewandelt werden kann. </p>
     
     </apiDesc><example conref="examples\Sound_extractExample.as" class="- topic/example "> Im folgenden Beispiel wird eine mp3-Datei geladen und die <codeph class="+ topic/ph pr-d/codeph ">extract()</codeph>-Methode der Soundklasse verwendet, um auf die Audiodaten zuzugreifen.
 <p class="- topic/p ">Die mp3-Daten werden in das <codeph class="+ topic/ph pr-d/codeph ">sourceSnd</codeph>-Soundobjekt geladen. Wenn die Anwendung die mp3-Daten lädt, ruft sie die <codeph class="+ topic/ph pr-d/codeph ">loaded()</codeph>-Funktion (die Ereignisprozedur für das <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Ereignis des <codeph class="+ topic/ph pr-d/codeph ">sourceSnd</codeph>-Objekts) auf. Ein zweites Soundobjekt (<codeph class="+ topic/ph pr-d/codeph ">outputSound</codeph>) wird verwendet, um das modifizierte Audio abzuspielen. Das <codeph class="+ topic/ph pr-d/codeph ">outputSound</codeph>-Objekt hat einen <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis-Listener. Das Objekt löst also periodische <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignisse aus, sobald Sie die <codeph class="+ topic/ph pr-d/codeph ">play()</codeph>-Methode des Objekts aufrufen. Die <codeph class="+ topic/ph pr-d/codeph ">upOctave()</codeph>-Methode gibt ein Bytearray mit auf den Quellaudiodaten basierenden modifizierten Audiodaten zurück. Sie gibt Audio zurück, das eine Oktave höher ist, indem sie jedes zweite Audiosample in den Quelldaten überspringt. Die Ereignisprozedur für das <codeph class="+ topic/ph pr-d/codeph ">sampleData</codeph>-Ereignis schreibt das zurückgegebene Bytearray in die <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft des <codeph class="+ topic/ph pr-d/codeph ">outputSound</codeph>-Objekts. Das <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Bytearray wird an die ausgegebenen Audiodaten für das <codeph class="+ topic/ph pr-d/codeph ">outputSound</codeph>-Objekt angehängt.</p>
 <p class="- topic/p ">Fügen Sie zum Testen dieses Beispiels eine text.mp3-Datei in das gleiche Verzeichnis ein, in dem sich die SWF-Datei befindet.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var sourceSnd:Sound = new Sound();
var outputSnd:Sound = new Sound();
var urlReq:URLRequest = new URLRequest("test.mp3");

sourceSnd.load(urlReq);
sourceSnd.addEventListener(Event.COMPLETE, loaded);

function loaded(event:Event):void
{
    outputSnd.addEventListener(SampleDataEvent.SAMPLE_DATA, processSound);
    outputSnd.play();
}

function processSound(event:SampleDataEvent):void
{
    var bytes:ByteArray = new ByteArray();
    sourceSnd.extract(bytes, 4096);
    event.data.writeBytes(upOctave(bytes));
}

function upOctave(bytes:ByteArray):ByteArray
{
    var returnBytes:ByteArray = new ByteArray();
    bytes.position = 0;
    while(bytes.bytesAvailable > 0)
    {
        returnBytes.writeFloat(bytes.readFloat());
        returnBytes.writeFloat(bytes.readFloat());
        if (bytes.bytesAvailable > 0)
        {
            bytes.position += 8;
        }
    }
    return returnBytes;
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/play()" class="- topic/link "><linktext class="- topic/linktext ">play()</linktext></link><link href="flash.media.xml#Sound/event:sampleData" class="- topic/link "><linktext class="- topic/linktext ">sampleData</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Sound:load" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">load</apiName><shortdesc class="- topic/shortdesc ">
     Initiiert den Ladevorgang einer externen MP3-Datei von der angegebenen URL.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Ladevorgang ist aufgrund eines Netzwerkfehlers fehlgeschlagen.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Über lokale nicht vertrauenswürdige Dateien kann keine Verbindung mit dem Internet hergestellt werden. Sie können dies umgehen, indem Sie diese Datei als <ph class="- topic/ph ">lokal mit Netzwerkzugang oder als </ph>vertrauenswürdig klassifizieren.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine Verbindung mit normalerweise reservierten Ports ist nicht möglich. Eine vollständige Liste der gesperrten Ports finden Sie unter „Beschränken von Netzwerk-APIs“ im <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Entwicklerhandbuch</i>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die <codeph class="+ topic/ph pr-d/codeph ">digest</codeph>-Eigenschaft des <codeph class="+ topic/ph pr-d/codeph ">stream</codeph>-Objekts ist nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Sie sollten die <codeph class="+ topic/ph pr-d/codeph ">digest</codeph>-Eigenschaft eines URLRequest-Objekts nur setzen, wenn Sie beim Laden einer SWZ-Datei (einer Adobe-Plattformkomponente) die <codeph class="+ topic/ph pr-d/codeph ">URLLoader.load()</codeph>-Methode aufrufen.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stream</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:URLRequest</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Eine URL, die auf eine externe MP3-Datei verweist.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">context</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:SoundLoaderContext</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Ein optionales SoundLoader-Kontextobjekt, das die Pufferzeit (die Mindestanzahl Millisekunden, die MP3-Daten im Puffer des Soundobjekts gehalten werden) definieren kann und festlegen kann, ob die Anwendung vor dem Laden von Sound nach einer domänenübergreifenden Richtliniendatei suchen soll.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Initiiert den Ladevorgang einer externen MP3-Datei von der angegebenen URL. Wenn Sie ein gültiges URLRequest-Objekt für den Soundkonstruktor übergeben, wird <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> automatisch aufgerufen. Sie müssen <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> nur aufrufen, wenn Sie kein gültiges URLRequest-Objekt oder den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> für den Soundkonstruktor übergeben.
     
     <p class="- topic/p ">Sobald <codeph class="+ topic/ph pr-d/codeph ">load()</codeph> für ein Soundobjekt aufgerufen wurde, kann später keine andere Sounddatei mehr in dieses Soundobjekt geladen werden. Erstellen Sie ein neues Soundobjekt, wenn Sie eine andere Sounddatei laden möchten.</p>
     
     <p class="- topic/p ">Beachten Sie bei Verwendung dieser Methode das folgende Sicherheitsmodell von:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> ist nicht zulässig, wenn sich die aufrufende Datei in der lokalen Sandbox des Dateisystems und sich der Sound in einer Netzwerk-Sandbox befindet.</li><li class="- topic/li ">Zum Aufrufen der lokal vertrauenswürdigen Sandbox oder der lokalen Sandbox mit Netzwerkzugang sind Zugriffsrechte von einer Website über eine URL-Richtliniendatei erforderlich.</li><li class="- topic/li ">Eine Verbindung mit normalerweise reservierten Ports ist nicht möglich. Eine vollständige Liste der gesperrten Ports finden Sie unter „Beschränken von Netzwerk-APIs“ im <i class="+ topic/ph hi-d/i ">ActionScript 3.0 Entwicklerhandbuch</i>.</li><li class="- topic/li ">Sie können eine SWF-Datei daran hindern, diese Methode aufzurufen, indem Sie auf der HTML-Seite, die den SWF-Inhalt enthält, den Parameter <codeph class="+ topic/ph pr-d/codeph ">allowNetworking</codeph> der <codeph class="+ topic/ph pr-d/codeph ">object</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">embed</codeph>-Tags festlegen.</li></ul>
     
     <p class="- topic/p "> Wenn Sie in Flash Player 10 oder höher einen Multipart-Content-Type verwenden (z. B. „multipart/form-data“), der einen Upload enthält (gekennzeichnet durch einen „filename“-Parameter in einem „content-disposition“-Header innerhalb des POST-Body), so unterliegt die POST-Methode den Sicherheitsregeln für Uploads:</p>
     <ul class="- topic/ul "><li class="- topic/li ">Der POST-Vorgang muss als Reaktion auf eine durch den Benutzer initiierte Aktion, z. B. Mausklick oder Tastendruck, erfolgen.</li><li class="- topic/li ">Ist die POST-Methode domänenübergreifend (das POST-Ziel befindet sich auf einem anderen Server als die SWF-Datei, die die POST-Anforderung sendet), so muss der Zielserver eine URL-Richtliniendatei bereitstellen, die den domänenübergreifenden Zugriff erlaubt.</li></ul>
     <p class="- topic/p ">Für alle mehrteiligen Content-Typen muss ebenfalls die Syntax nach Standard RFC2046 gültig sein. Scheint die Syntax ungültig zu sein, so unterliegt die POST-Methode den Sicherheitsregeln für Uploads.</p>
     <p class="- topic/p ">In Adobe AIR unterliegt Inhalt in der Sicherheitssandbox <codeph class="+ topic/ph pr-d/codeph ">der Anwendung</codeph> (Inhalt, der mit der AIR-Anwendung installiert wird) jedoch nicht diesen Sicherheitseinschränkungen.</p>
     
     <p class="- topic/p ">Weitere Informationen zum Thema Sicherheit finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Sicherheit</xref>.</p>
     
     </apiDesc><example conref="examples\Sound_loadExample.as" class="- topic/example "> Im folgenden Beispiel wird der Ladeprozess einer Sounddatei dargestellt.
 
 <p class="- topic/p ">Im Konstruktor wird ein <codeph class="+ topic/ph pr-d/codeph ">URLRequest</codeph>-Objekt erstellt, um den Speicherort der Sounddatei, eines Podcasts von Adobe, zu bestimmen. Die Datei wird in einen <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph>-Block geladen, um Fehler abzufangen, die möglicherweise beim Laden der Datei auftreten. Wenn ein IO-Fehler auftritt, wird die <codeph class="+ topic/ph pr-d/codeph ">errorHandler()</codeph>-Methode ebenfalls aufgerufen, und die Fehlermeldung wird in das Textfeld geschrieben, das für den Fortschrittsbericht vorgesehen ist. Während des Ladevorgangs wird ein <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph>-Ereignis ausgelöst und die <codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph>-Methode wird aufgerufen. Hier wird das <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent.PROGRESS</codeph>-Ereignis als Timer für die Berechnung des Ladevorgangs verwendet.</p> 
  
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">progressHandler()</codeph>-Methode teilt den <codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph>-Wert, der mit dem <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph>-Objekt übergeben wird, durch den <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph>-Wert, um den Prozentwert der bereits geladenen Sounddaten zu ermitteln. Danach werden diese Werte im Textfeld angezeigt. (Beachten Sie, dass für den Fall, dass die Datei klein ist, im Cache gespeichert ist oder sich im lokalen Verzeichnis befindet, der Fortschritt möglicherweise nicht bemerkbar ist.)</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.ProgressEvent;
    import flash.events.IOErrorEvent;
    
    public class Sound_loadExample extends Sprite {
        private var snd:Sound = new Sound();
        private var statusTextField:TextField  = new TextField();

        public function Sound_loadExample(){

            statusTextField.autoSize = TextFieldAutoSize.LEFT;
            var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
            
            try {
            snd.load(req);
            
            snd.play();
            }
            catch (err:Error) {
                trace(err.message);
            }
 
            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            snd.addEventListener(ProgressEvent.PROGRESS, progressHandler);
                     
            this.addChild(statusTextField);
        }
    
        private function progressHandler(event:ProgressEvent):void {
            var loadTime:Number = event.bytesLoaded / event.bytesTotal;
            var LoadPercent:uint = Math.round(100 * loadTime);
              
            statusTextField.text = "Sound file's size in bytes: " + event.bytesTotal + "\n" 
                                 + "Bytes being loaded: " + event.bytesLoaded + "\n" 
                                 + "Percentage of sound file that is loaded " + LoadPercent + "%.\n";
        }
 
        private function errorHandler(errorEvent:IOErrorEvent):void {
            statusTextField.text = "The sound could not be loaded: " + errorEvent.text;
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.media:Sound:play" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">play</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt ein neues SoundChannel-Objekt zur Wiedergabe von Sound.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
     
     </refpath></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein SoundChannel-Objekt, über das der Sound gesteuert werden kann. Wenn Sie über keine Soundkarte verfügen oder keine Soundkanäle mehr vorhanden sind, gibt diese Methode <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück. Die maximale Anzahl der gleichzeitig verfügbaren Soundkanäle ist 32.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:SoundChannel</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startTime</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die ursprüngliche Position in Millisekunden, ab der die Wiedergabe gestartet werden soll.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">loops</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Definiert, wie oft Sound als Schleife vom Wert <codeph class="+ topic/ph pr-d/codeph ">startTime</codeph> aus wiedergegeben wird, bevor die Wiedergabe im Soundkanal beendet wird. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sndTransform</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:SoundTransform</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das ursprüngliche SoundTransform-Objekt, das dem Soundkanal zugewiesen wurde.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt ein neues SoundChannel-Objekt zur Wiedergabe von Sound. Diese Methode gibt ein SoundChannel-Objekt zurück, auf das Sie zum Beenden von Sound und zum Überwachen der Lautstärke zugreifen können. (Greifen Sie zum Steuern von Lautstärke, Schwenkung und Balance auf das SoundTransform-Objekt zu, das dem Soundkanal zugewiesen ist.)
     
     </apiDesc><example conref="examples\Sound_playExample1.as" class="- topic/example "> Im folgenden Beispiel kann der Benutzer nach dem Laden der Datei in einem grafischen Balken die Position (Startzeit) auswählen, ab der die Sounddatei abgespielt wird.
 
 <p class="- topic/p ">Der Konstruktor ruft die <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph>-Methode auf, mit dem Laden der Sounddaten zu beginnen. Als Nächstes wird die <codeph class="+ topic/ph pr-d/codeph ">Sound.play()</codeph>-Methode aufgerufen, die mit dem Abspielen von Sound beginnt, sobald genügend Daten geladen wurden. Die <codeph class="+ topic/ph pr-d/codeph ">Sound.play()</codeph>-Methode gibt ein SoundChannel-Objekt zurück, das zur Steuerung der Soundwiedergabe verwendet werden kann. Im Textfeld werden die Anweisungen angezeigt. Um sicherzustellen, dass der Inhalt bis zu dem Punkt, ab dem der Benutzer den Sound abspielen möchte, bereits geladen wurde, wird das Sprite-Objekt <codeph class="+ topic/ph pr-d/codeph ">bar</codeph> erstellt und angezeigt, nachdem die Datei geladen wurde. Wenn die Datei erfolgreich geladen wurde, wird ein <codeph class="+ topic/ph pr-d/codeph ">Event.COMPLETE</codeph>-Ereignis ausgelöst, welches die Methode <codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph> auslöst. Die <codeph class="+ topic/ph pr-d/codeph ">completeHandler()</codeph>-Methode erstellt dann den Balken und fügt ihn der Anzeigeliste hinzu. (Anstelle eines Shape-Objekts wird ein Sprite-Objekt verwendet, um Interaktivität zu unterstützen.) Wenn der Benutzer auf den Balken klickt, wird die <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode ausgelöst.</p> 
 
 <p class="- topic/p ">In der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode wird die Position der x-Koordinate des Benutzerklicks, <codeph class="+ topic/ph pr-d/codeph ">event.localX</codeph>, verwendet, um festzustellen, an welcher Stelle der Benutzer mit dem Abspielen der Datei beginnen möchte. Da der Balken 100 Pixel groß ist und bei der x-Koordinate 100 Pixel beginnt, ist es einfach, den Prozentwert der Position festzustellen. Da die Datei geladen wurde, hat der Wert der <codeph class="+ topic/ph pr-d/codeph ">length</codeph>-Eigenschaft der Sounddatei die Länge der gesamten Datei in Millisekunden. Anhand der Länge der Sounddatei und der Position in der Linie wird eine Startposition der Sounddatei bestimmt. Nach dem Stoppen des Sounds wird die Sounddatei an der ausgewählten Startposition neu gestartet, die als <codeph class="+ topic/ph pr-d/codeph ">startTime</codeph>-Parameter an die <codeph class="+ topic/ph pr-d/codeph ">play()</codeph>-Methode übergeben wird.</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> 
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;
    import flash.media.Sound;;
    import flash.net.URLRequest;
    import flash.media.SoundChannel;
    import flash.events.ProgressEvent;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.IOErrorEvent;
    
    public class Sound_playExample1 extends Sprite {
        private var snd:Sound = new Sound();
        private var channel:SoundChannel = new SoundChannel();
        private var infoTextField:TextField = new TextField();
    
        public function Sound_playExample1() {

            var req:URLRequest = new URLRequest("MySound.mp3");
            
            infoTextField.autoSize = TextFieldAutoSize.LEFT;
            infoTextField.text = "Please wait for the file to be loaded.\n" 
                                + "Then select from the bar to decide where the file should start.";
            
            snd.load(req);               
            channel = snd.play();

            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            snd.addEventListener(Event.COMPLETE, completeHandler);


            this.addChild(infoTextField);
        }

        private function completeHandler(event:Event):void {                
            infoTextField.text = "File is ready.";

            var bar:Sprite = new Sprite();

            bar.graphics.lineStyle(5, 0xFF0000);
            bar.graphics.moveTo(100, 100);
            bar.graphics.lineTo(200, 100);

            bar.addEventListener(MouseEvent.CLICK, clickHandler);

            this.addChild(bar);
        }
    
        private function clickHandler(event:MouseEvent):void {
            
                var position:uint = event.localX;
                var percent:uint = Math.round(position) - 100;   
                var cue:uint = (percent / 100) * snd.length;

                channel.stop();
                channel = snd.play(cue);    
        }

        private function errorHandler(errorEvent:IOErrorEvent):void {
            infoTextField.text = "The sound could not be loaded: " + errorEvent.text;
        }
    }
}
</codeblock></example><example conref="examples\Sound_playExample2.as" class="- topic/example "> Im folgenden Beispiel wird der Sound ein oder zwei Mal abgespielt, je nachdem, ob der Benutzer auf eine Schaltfläche klickt oder doppelklickt.
 
 <p class="- topic/p ">Im Konstruktor wird der Sound geladen und es wird ein einfaches rechteckiges Sprite-Objekt, <codeph class="+ topic/ph pr-d/codeph ">button</codeph>, erstellt. (Anstelle eines Shape-Objekts wird ein Sprite-Objekt verwendet, um Interaktivität zu unterstützen.) (Hier wird davon ausgegangen, dass sich die Sounddatei im selben Verzeichnis wie die SWF-Datei befindet). (Für dieses Beispiel wurde keine Fehlerverarbeitung geschrieben.)</p>
 
 <p class="- topic/p ">Zwei Ereignis-Listener werden eingerichtet, um auf einfache Mausklicks und auf Doppelklicks zu warten. Wenn der Benutzer ein Mal klickt, wird die <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode, die den Sound abspielt, aufgerufen. Wenn der Benutzer auf die Schaltfläche doppelklickt, wird die <codeph class="+ topic/ph pr-d/codeph ">doubleClickHandler()</codeph>-Methode, die die Sounddatei zwei Mal abspielt, aufgerufen. Das zweite Argument der <codeph class="+ topic/ph pr-d/codeph ">play()</codeph>-Methode wird auf <codeph class="+ topic/ph pr-d/codeph ">1</codeph> gesetzt, was bedeutet, dass die Wiedergabe nach dem ersten Abspielen bei der Startzeit des Sounds erneut beginnt. Die Startzeit, das erste Argument, wird auf <codeph class="+ topic/ph pr-d/codeph ">0</codeph> gesetzt, was bedeutet, dass die Datei ab dem Anfang abgespielt wird.</p>
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.events.MouseEvent;
    import flash.media.Sound;
    import flash.net.URLRequest;

    public class Sound_playExample2 extends Sprite {
        private var button:Sprite = new Sprite(); 
        private var snd:Sound = new Sound();
            
        public function Sound_playExample2() {

            var req:URLRequest = new URLRequest("click.mp3");
            snd.load(req);               
     
            button.graphics.beginFill(0x00FF00);
            button.graphics.drawRect(10, 10, 50, 30);
            button.graphics.endFill();
     
            button.addEventListener(MouseEvent.CLICK, clickHandler);
            button.addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
     
            this.addChild(button);
        }

        private function clickHandler(event:MouseEvent):void {
            snd.play();            
        }

        private function doubleClickHandler(event:MouseEvent):void {
            snd.play(0, 2);        
        }
    }
}
</codeblock></example><example conref="examples\Sound_playExample3.as" class="- topic/example "> Im folgenden Beispiel wird der Lade- und Abspielprozess einer Sounddatei dargestellt.
 
 <p class="- topic/p ">Die Datei wird im Konstruktor in einen <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph>-Block geladen, um Fehler abzufangen, die möglicherweise beim Laden der Datei auftreten. Dem Soundobjekt wird ein Listener hinzugefügt, der auf ein <codeph class="+ topic/ph pr-d/codeph ">IOErrorEvent</codeph>-Ereignis reagiert, indem die <codeph class="+ topic/ph pr-d/codeph ">errorHandler()</codeph>-Methode aufgerufen wird. Für die Hauptanwendung wird ein weiterer Listener hinzugefügt, der auf ein <codeph class="+ topic/ph pr-d/codeph ">Event.ENTER_FRAME</codeph>-Ereignis reagiert, das als Zeitgeber für die Anzeige des Abspielfortschritts verwendet wird. Schließlich wird ein dritter Listener für den Soundkanal hinzugefügt, der auf ein i<codeph class="+ topic/ph pr-d/codeph ">Event.SOUND_COMPLETE</codeph>-Ereignis reagiert (wenn die Sounddatei vollständig abgespielt wurde), indem er die <codeph class="+ topic/ph pr-d/codeph ">soundCompleteHandler()</codeph>-Methode aufruft. Die <codeph class="+ topic/ph pr-d/codeph ">soundCompleteHandler()</codeph>-Methode entfernt auch den Ereignis-Listener für das <codeph class="+ topic/ph pr-d/codeph ">Event.ENTER_FRAME</codeph>-Ereignis.</p>
 
 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">enterFrameHandler()</codeph>-Methode teilt den <codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph>-Wert, der mit dem <codeph class="+ topic/ph pr-d/codeph ">ProgressEvent</codeph>-Objekt übergeben wird, durch den <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph>-Wert, um den Prozentwert der Sounddaten, die geladen wurden, zu bestimmen. Der Prozentwert der Sounddaten, die abgespielt wurden, kann ermittelt werden, indem der Wert der <codeph class="+ topic/ph pr-d/codeph ">position</codeph>-Eigenschaft des Soundkanals durch die Länge der Sounddaten geteilt wird. Wenn die Sounddaten jedoch nicht vollständig geladen wurden, zeigt die <codeph class="+ topic/ph pr-d/codeph ">length</codeph>-Eigenschaft des Soundobjekts nur die Größe der zurzeit geladenen Daten an. Eine Schätzung der endgültigen Größe der Sounddatei wird berechnet, indem der Wert der <codeph class="+ topic/ph pr-d/codeph ">length</codeph>-Eigenschaft des aktuellen Soundobjekts durch den Wert der <codeph class="+ topic/ph pr-d/codeph ">bytesLoaded</codeph>-Eigenschaft geteilt durch den Wert der <codeph class="+ topic/ph pr-d/codeph ">bytesTotal</codeph>-Eigenschaft geteilt wird.</p>
 
 <p class="- topic/p ">Beachten Sie, dass für den Fall, dass die Datei klein ist, im Cache gespeichert ist oder sich im lokalen Verzeichnis befindet, der Ladefortschritt möglicherweise nicht bemerkbar ist. Die Verzögerung zwischen dem Beginn des Ladevorgangs der Sounddaten und dem Beginn der Wiedergabe der geladenen Daten wird bestimmt durch den Wert der <codeph class="+ topic/ph pr-d/codeph ">SoundLoaderContext.buffertime</codeph>-Eigenschaft, der standardmäßig 1000 Millisekunden beträgt und zurückgesetzt werden kann.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.URLRequest;
    import flash.media.Sound;
    import flash.media.SoundChannel;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.Event;
    import flash.events.IOErrorEvent;
    
    public class Sound_playExample3 extends Sprite {
        private var snd:Sound = new Sound();
        private var channel:SoundChannel;
        private var statusTextField:TextField  = new TextField();

        public function Sound_playExample3(){

            statusTextField.autoSize = TextFieldAutoSize.LEFT;

           var req:URLRequest = new URLRequest("http://av.adobe.com/podcast/csbu_dev_podcast_epi_2.mp3");
            
            try {
                snd.load(req);
            
                channel = snd.play();
            }
            catch (err:Error) {
                trace(err.message);
            }
                    
            snd.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            addEventListener(Event.ENTER_FRAME, enterFrameHandler);
            channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);
                    
            this.addChild(statusTextField);
        }
    
        private function enterFrameHandler(event:Event):void {    
            var loadTime:Number = snd.bytesLoaded / snd.bytesTotal;
            var loadPercent:uint = Math.round(100 * loadTime);
            var estimatedLength:int = Math.ceil(snd.length / (loadTime));
            var playbackPercent:uint = Math.round(100 * (channel.position / estimatedLength));
      
            statusTextField.text = "Sound file's size is " + snd.bytesTotal + " bytes.\n" 
                                   + "Bytes being loaded: " + snd.bytesLoaded + "\n" 
                                   + "Percentage of sound file that is loaded " + loadPercent + "%.\n"
                                   + "Sound playback is " + playbackPercent + "% complete.";     
        }
 
        private function errorHandler(errorEvent:IOErrorEvent):void {
            statusTextField.text = "The sound could not be loaded: " + errorEvent.text;
        }

        private function soundCompleteHandler(event:Event):void {
            statusTextField.text = "The sound has finished playing.";
            removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundChannel/stop()" class="- topic/link "><linktext class="- topic/linktext ">SoundChannel.stop()</linktext></link><link href="flash.media.xml#SoundMixer/stopAll()" class="- topic/link "><linktext class="- topic/linktext ">SoundMixer.stopAll()</linktext></link></related-links></apiOperation><apiValue id="flash.media:Sound:bytesLoaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesLoaded</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die derzeit verfügbare Anzahl der Byte in diesem Soundobjekt zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die derzeit verfügbare Anzahl der Byte in diesem Soundobjekt zurück. Diese Eigenschaft ist in der Regel nur für extern geladene Dateien nützlich.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:bytesTotal:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesTotal</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die Gesamtanzahl der Byte in diesem Soundobjekt zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die Gesamtanzahl der Byte in diesem Soundobjekt zurück. 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:id3:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">id3</apiName><shortdesc class="- topic/shortdesc ">
     Bietet Zugriff auf die Metadaten, die in MP3-Dateien enthalten sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">sound, Sound.id3, id3, mp3
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.media:ID3Info</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Bietet Zugriff auf die Metadaten, die in MP3-Dateien enthalten sind.
     
     <p class="- topic/p ">MP3-Sounddateien können ID3-Tags mit Metadaten zur Datei enthalten. Wenn MP3-Sound, der mit der <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph>-Methode geladen wurde, ID3-Tags enthält, können Sie diese Eigenschaften abfragen. Es werden nur ID3-Tags unterstützt, die den UTF-8-Zeichensatz verwenden.</p>
     
     <p class="- topic/p "><ph class="- topic/ph ">Flash Player 9 und höher sowie AIR unterstützen</ph> ID3 2.0-Tags, im Speziellen 2.3 und 2.4. In der folgenden Tabelle sind die ID3 2.0-Standardtags und der Inhaltstyp der einzelnen Tags aufgeführt. Mit der <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph>-Eigenschaft kann über das Format <codeph class="+ topic/ph pr-d/codeph ">my_sound.id3.COMM</codeph>, <codeph class="+ topic/ph pr-d/codeph ">my_sound.id3.TIME</codeph> usw. auf diese Tags zugegriffen werden. Die erste Tabelle beschreibt Tags, auf die entweder über den ID3 2.0- oder den ActionScript-Eigenschaftennamen zugegriffen werden kann. Die zweite Tabelle beschreibt ID3-Tags, die unterstützt werden, aber keine vordefinierten Eigenschaften in ActionScript haben. </p>
     
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><b class="+ topic/ph hi-d/b ">ID3 2.0-Tag</b></entry><entry class="- topic/entry "><b class="+ topic/ph hi-d/b ">Entsprechende Soundklasseneigenschaft</b></entry></row><row class="- topic/row "><entry class="- topic/entry ">COMM</entry><entry class="- topic/entry ">Sound.id3.comment</entry></row><row class="- topic/row "><entry class="- topic/entry ">TALB</entry><entry class="- topic/entry ">Sound.id3.album </entry></row><row class="- topic/row "><entry class="- topic/entry ">TCON</entry><entry class="- topic/entry ">Sound.id3.genre</entry></row><row class="- topic/row "><entry class="- topic/entry ">TIT2</entry><entry class="- topic/entry ">Sound.id3.songName </entry></row><row class="- topic/row "><entry class="- topic/entry ">TPE1</entry><entry class="- topic/entry ">Sound.id3.artist</entry></row><row class="- topic/row "><entry class="- topic/entry ">TRCK</entry><entry class="- topic/entry ">Sound.id3.track </entry></row><row class="- topic/row "><entry class="- topic/entry ">TYER</entry><entry class="- topic/entry ">Sound.id3.year </entry></row></tbody></tgroup></adobetable>
     
     <p class="- topic/p ">In der folgenden Tabelle sind ID3-Tags beschrieben, die unterstützt werden, jedoch in der Soundklasse über keine vordefinierten Eigenschaften verfügen. Auf diese Tags kann durch Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">mySound.id3.TFLT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">mySound.id3.TIME</codeph> usw. zugegriffen werden. <b class="+ topic/ph hi-d/b ">HINWEIS:</b> Keines dieser Tags wird in Flash Lite 4 unterstützt.</p>  
      <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><b class="+ topic/ph hi-d/b ">Eigenschaft</b></entry><entry class="- topic/entry "><b class="+ topic/ph hi-d/b ">Beschreibung</b></entry></row><row class="- topic/row "><entry class="- topic/entry ">TFLT</entry><entry class="- topic/entry ">Dateityp</entry></row><row class="- topic/row "><entry class="- topic/entry ">TIME</entry><entry class="- topic/entry ">Zeit</entry></row><row class="- topic/row "><entry class="- topic/entry ">TIT1</entry><entry class="- topic/entry ">Beschreibung der Inhaltsgruppe</entry></row><row class="- topic/row "><entry class="- topic/entry ">TIT2</entry><entry class="- topic/entry ">Titel/Liedtitel/Inhaltsbeschreibung</entry></row><row class="- topic/row "><entry class="- topic/entry ">TIT3</entry><entry class="- topic/entry ">Untertitel/Detaillierte Beschreibung</entry></row><row class="- topic/row "><entry class="- topic/entry ">TKEY</entry><entry class="- topic/entry ">Erster Ton</entry></row><row class="- topic/row "><entry class="- topic/entry ">TLAN</entry><entry class="- topic/entry ">Sprachen</entry></row><row class="- topic/row "><entry class="- topic/entry ">TLEN</entry><entry class="- topic/entry ">Länge</entry></row><row class="- topic/row "><entry class="- topic/entry ">TMED</entry><entry class="- topic/entry ">Medientyp</entry></row><row class="- topic/row "><entry class="- topic/entry ">TOAL</entry><entry class="- topic/entry ">Originalalbum-/Film-/Präsentationstitel</entry></row><row class="- topic/row "><entry class="- topic/entry ">TOFN</entry><entry class="- topic/entry ">Originaldateiname</entry></row><row class="- topic/row "><entry class="- topic/entry ">TOLY</entry><entry class="- topic/entry ">Originalautor/Songwriter</entry></row><row class="- topic/row "><entry class="- topic/entry ">TOPE</entry><entry class="- topic/entry ">Originalkünstler</entry></row><row class="- topic/row "><entry class="- topic/entry ">TORY</entry><entry class="- topic/entry ">Jahr der Erstveröffentlichung</entry></row><row class="- topic/row "><entry class="- topic/entry ">TOWN</entry><entry class="- topic/entry ">Eigentümer/Lizenznehmer</entry></row><row class="- topic/row "><entry class="- topic/entry ">TPE1</entry><entry class="- topic/entry ">Hauptkünstler/Solokünstler</entry></row><row class="- topic/row "><entry class="- topic/entry ">TPE2</entry><entry class="- topic/entry ">Band/Orchester/Begleitung</entry></row><row class="- topic/row "><entry class="- topic/entry ">TPE3</entry><entry class="- topic/entry ">Leitung/Detaillierte Auflistung der Künstler</entry></row><row class="- topic/row "><entry class="- topic/entry ">TPE4</entry><entry class="- topic/entry ">Interpretation, Remix oder sonstige Bearbeitung durch</entry></row><row class="- topic/row "><entry class="- topic/entry ">TPOS</entry><entry class="- topic/entry ">Teil eines Satzes</entry></row><row class="- topic/row "><entry class="- topic/entry ">TPUB</entry><entry class="- topic/entry ">Publisher</entry></row><row class="- topic/row "><entry class="- topic/entry ">TRCK</entry><entry class="- topic/entry ">Titelnummer/Position in Satz</entry></row><row class="- topic/row "><entry class="- topic/entry ">TRDA</entry><entry class="- topic/entry ">Aufnahmedaten</entry></row><row class="- topic/row "><entry class="- topic/entry ">TRSN</entry><entry class="- topic/entry ">Name des Internet-Radiosenders</entry></row><row class="- topic/row "><entry class="- topic/entry ">TRSO</entry><entry class="- topic/entry ">Eigentümer des Internet-Radiosenders</entry></row><row class="- topic/row "><entry class="- topic/entry ">TSIZ</entry><entry class="- topic/entry ">Größe</entry></row><row class="- topic/row "><entry class="- topic/entry ">TSRC</entry><entry class="- topic/entry ">ISRC (International Standard Recording Code)</entry></row><row class="- topic/row "><entry class="- topic/entry ">TSSE</entry><entry class="- topic/entry ">Software/Hardware und Einstellungen für die Kodierung</entry></row><row class="- topic/row "><entry class="- topic/entry ">TYER</entry><entry class="- topic/entry ">Jahr</entry></row><row class="- topic/row "><entry class="- topic/entry ">WXXX</entry><entry class="- topic/entry ">URL-Verknüpfung</entry></row></tbody></tgroup></adobetable>
     
     
     <p class="- topic/p ">Bedenken Sie bei Verwendung dieser Eigenschaft das Flash Player-Sicherheitsmodell:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">Die <codeph class="+ topic/ph pr-d/codeph ">id3</codeph>-Eigenschaft eines Soundobjekts ist immer für SWF-Dateien erlaubt, die in der gleichen Sicherheitssandbox wie die Sounddatei sind. Bei Dateien in anderen Sandboxen werden Sicherheitsprüfungen durchgeführt.</li><li class="- topic/li ">Wenn Sie Sound mithilfe der <codeph class="+ topic/ph pr-d/codeph ">load()</codeph>-Methode der Soundklasse laden, können Sie einen <codeph class="+ topic/ph pr-d/codeph ">context</codeph>-Parameter angeben, bei dem es sich um ein SoundLoaderContext-Objekt handelt. Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">checkPolicyFile</codeph>-Eigenschaft des SoundLoaderContext-Objekts auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> festlegen, wird in Flash Player auf dem Server, von dem der Sound geladen wird, eine URL-Richtliniendatei gesucht. Wenn eine Richtliniendatei existiert und diese den Zugriff von der Domäne der ladenden SWF-Datei erlaubt, darf die Datei auf die <codeph class="+ topic/ph pr-d/codeph ">id3</codeph>-Eigenschaft des Soundobjekts zugreifen; andernfalls darf sie es nicht.</li></ul>
     
     <p class="- topic/p ">In Adobe AIR unterliegt Inhalt in der Sicherheitssandbox <codeph class="+ topic/ph pr-d/codeph ">der Anwendung</codeph> (Inhalt, der mit der AIR-Anwendung installiert wird) nicht diesen Sicherheitseinschränkungen.</p>
     
     <p class="- topic/p ">Weitere Informationen zum Thema Sicherheit finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external" class="- topic/xref ">Sicherheit</xref>.</p>
     
     </apiDesc><example conref="examples\Sound_id3Example.as" class="- topic/example "> Im folgenden Beispiel werden die ID3-Informationen aus einer Sounddatei gelesen und in einem Textfeld angezeigt.
 
 <p class="- topic/p ">Im Konstruktor wird die Sounddatei geladen, ist jedoch nicht auf das Abspielen eingestellt. Hier wird davon ausgegangen, dass sich die Datei im SWF-Verzeichnis befindet. Das System muss über die Berechtigung zum Lesen der ID3-Tags einer geladenen Sounddatei verfügen. Wenn die Datei ID3-Informationen enthält und das Programm berechtigt ist, diese zu lesen, wird ein <codeph class="+ topic/ph pr-d/codeph ">Event.ID3</codeph>-Ereignis ausgelöst und die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">id3</codeph> der Sounddatei wird gefüllt. Die <codeph class="+ topic/ph pr-d/codeph ">id3</codeph>-Eigenschaft enthält ein <codeph class="+ topic/ph pr-d/codeph ">ID3Info</codeph>-Objekt mit allen ID3-Informationen.</p>
 
 <p class="- topic/p ">In der <codeph class="+ topic/ph pr-d/codeph ">id3Handler()</codeph>-Methode werden die ID3-Tags der Datei in <codeph class="+ topic/ph pr-d/codeph ">id3</codeph>, einem ID3Info-Klassenobjekt, gespeichert. Es wird ein Textfeld instanziiert, um die Liste der ID3-Tags anzuzeigen. Die for-Schleife durchläuft alle ID3 2.0-Tags und hängt den Namen und den Wert an den Inhalt des Textfelds an. Mithilfe der ID3-Info-Eigenschaften (<codeph class="+ topic/ph pr-d/codeph ">ID3Info</codeph>) werden der Interpret, der Titelname und das Album ebenfalls angehängt. ActionScript 3.0 sowie Flash Player 9 und höher unterstützen ID3 2.0-Tags, speziell 2.3 und 2.4. Wenn Sie Eigenschaften durchlaufen wie in der for-Schleife, werden nur ID3 2.0-Tags angezeigt. Die Daten aus den früheren Versionen werden jedoch ebenfalls in der <codeph class="+ topic/ph pr-d/codeph ">id3</codeph>-Eigenschaft des Titels gespeichert und können mithilfe der Eigenschaften der ID3-Info-Klasse abgerufen werden. Die Tags für ID3 1.0 befinden sich am Ende der Datei, während die ID3 2.0-Tags am Anfang der Datei stehen. (In einigen Fällen weisen Dateien sowohl die Tags der früheren als auch die der älteren Versionen an derselben Stelle auf.) Wenn eine Datei sowohl am Anfang als auch am Ende der Datei Tags beider Versionen, 1.0 und 2.0, aufweist, wird die <codeph class="+ topic/ph pr-d/codeph ">id3Handler()</codeph>-Methode zwei Mal aufgerufen. Zuerst wird die 2.0-Version und dann die 1.0-Version gelesen. Wenn nur ein ID3 1.0-Tag verfügbar ist, kann über die ID3-Eigenschaften wie <codeph class="+ topic/ph pr-d/codeph ">id3.songname</codeph> darauf zugegriffen werden. Für ID3 2.0 ruft die <codeph class="+ topic/ph pr-d/codeph ">id3.TITS</codeph>-Eigenschaft den Namen des Titels mithilfe des neuen Tags (TITS) ab.</p>
 
 <p class="- topic/p ">Beachten Sie, dass für dieses Beispiel keine Fehlerverarbeitung geschrieben wurde, und wenn der ID3-Inhalt umfangreich ist, geht das Ergebnis möglicherweise über den anzeigbaren Bereich hinaus.</p> 
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.media.Sound;
    import flash.net.URLRequest;
    import flash.media.ID3Info;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.events.Event;

    public class Sound_id3Example extends Sprite {
        private var snd:Sound = new Sound();       
        private var myTextField:TextField = new TextField();

        public function Sound_id3Example() {
            snd.addEventListener(Event.ID3, id3Handler);
            snd.load(new URLRequest("mySound.mp3"));
        }
    
        private function id3Handler(event:Event):void {
            var id3:ID3Info = snd.id3;

            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.border = true;

            myTextField.appendText("Received ID3 Info: \n");
              
            for (var propName:String in id3) {
                myTextField.appendText(propName + " = " + id3[propName] + "\n");
            }
 
            myTextField.appendText("\n" + "Artist: " + id3.artist + "\n");
            myTextField.appendText("Song name: " + id3.songName + "\n");
            myTextField.appendText("Album: " + id3.album + "\n\n"); 
 
            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#SoundLoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">SoundLoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.media:Sound:isBuffering:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isBuffering</apiName><shortdesc class="- topic/shortdesc ">
     Gibt den Zwischenspeicherstatus externer MP3-Dateien zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>
     
      
      </refpath></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt den Zwischenspeicherstatus externer MP3-Dateien zurück. Wenn der Wert auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt ist, wird die Wiedergabe unterbrochen, während das Objekt auf weitere Daten wartet.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:isURLInaccessible:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isURLInaccessible</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob die Sound.url-Eigenschaft gekürzt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob die <codeph class="+ topic/ph pr-d/codeph ">Sound.url</codeph>-Eigenschaft gekürzt wurde. Wenn <codeph class="+ topic/ph pr-d/codeph ">isURLInaccessible</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> hat, ist der <codeph class="+ topic/ph pr-d/codeph ">Sound.url</codeph>-Wert nur die Domäne der endgültigen URL, von der der Sound geladen wird. Die Eigenschaft wird zum Beispiel gekürzt, wenn der Sound aus <codeph class="+ topic/ph pr-d/codeph ">http://www.adobe.com/assets/hello.mp3</codeph> geladen wird und die <codeph class="+ topic/ph pr-d/codeph ">Sound.url</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">http://www.adobe.com</codeph> hat. Der Wert von <codeph class="+ topic/ph pr-d/codeph ">isURLInaccessible</codeph> ist nur dann <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn auch Folgendes zutrifft:
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Beim Laden der Sounddatei ist eine HTTP-Umleitung aufgetreten.</li><li class="- topic/li ">Die SWF-Datei, die <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> aufruft, stammt aus einer anderen Domäne als die endgültige URL der Sounddatei.</li><li class="- topic/li ">Die SWF-Datei, die <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> aufruft, hat keine Zugriffsberechtigung für die Sounddatei. Zugriffsberechtigungen für die Sounddatei werden auf die gleiche Weise gewährt wie für die <codeph class="+ topic/ph pr-d/codeph ">Sound.id3</codeph>-Eigenschaft: Richten Sie eine Richtliniendatei ein und verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">SoundLoaderContext.checkPolicyFile</codeph>-Eigenschaft.</li></ul>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Die <codeph class="+ topic/ph pr-d/codeph ">isURLInaccessible</codeph>-Eigenschaft wurde für Flash Player 10.1 und AIR 2.0 hinzugefügt. Diese Eigenschaft steht jedoch SWF-Dateien aller Versionen zur Verfügung, wenn die Flash-Laufzeitumgebung dies unterstützt. Die Verwendung einiger Authoring-Tools im „strikten Modus“ führt also zu einem Kompilierungsfehler. Um diesen Fehler zu umgehen, verwenden Sie die indirekte Syntax <codeph class="+ topic/ph pr-d/codeph ">mySound["isURLInaccessible"]</codeph> oder deaktivieren Sie den strikten Modus. Wenn Sie Flash Professional CS5 oder Flex SDK 4.1 verwenden, können Sie diese API für Laufzeitumgebungen verwenden und kompilieren, die vor Flash Player 10.1 und AIR 2 veröffentlicht wurden.</p>
	 
	 <p class="- topic/p ">Für Anwendungsinhalte in AIR ist der Wert dieser Eigenschaft immer <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/url" class="- topic/link "><linktext class="- topic/linktext ">url</linktext></link><link href="flash.media.xml#Sound/id3" class="- topic/link "><linktext class="- topic/linktext ">id3</linktext></link><link href="flash.media.xml#SoundLoaderContext/checkPolicyFile" class="- topic/link "><linktext class="- topic/linktext ">flash.media.SoundLoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.media:Sound:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     Die Länge des aktuellen Sounds in Millisekunden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die Länge des aktuellen Sounds in Millisekunden.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Sound:url:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">url</apiName><shortdesc class="- topic/shortdesc ">
     Die URL, von der der Sound geladen wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die URL, von der der Sound geladen wurde. Diese Eigenschaft kann nur auf Soundobjekte angewendet werden, die mit der <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph>-Methode geladen wurden. Bei Soundobjekten, die mit einem Soundelement in der Bibliothek einer SWF-Datei verknüpft sind, ist der Wert der <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     <p class="- topic/p ">Da die endgültige URL noch nicht bekannt ist, hat die <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft beim ersten Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> anfänglich den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Sobald ein <codeph class="+ topic/ph pr-d/codeph ">open</codeph>-Ereignis über das Soundobjekt ausgelöst wurde, nimmt die <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft einen anderen Wert an.</p>
     
     <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft enthält die endgültige, absolute URL, von der Sound geladen wurde. Der Wert von <codeph class="+ topic/ph pr-d/codeph ">url</codeph> entspricht in der Regel dem Wert, der an den <codeph class="+ topic/ph pr-d/codeph ">stream</codeph>-Parameter von <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> übergeben wurde. Wenn Sie allerdings eine relative URL an <codeph class="+ topic/ph pr-d/codeph ">Sound.load()</codeph> übergeben haben, ist der Wert der <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft die absolute URL. Wird die ursprüngliche URL-Anforderung zusätzlich über einen HTTP-Server umgeleitet, entspricht der Wert der <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft der endgültigen URL, über die die Sounddatei tatsächlich heruntergeladen wurde. Diese Protokollierung einer absoluten, endgültigen URL entspricht dem Verhalten von <codeph class="+ topic/ph pr-d/codeph ">LoaderInfo.url</codeph>.</p>
     <p class="- topic/p ">In einigen Fällen ist der Wert der <codeph class="+ topic/ph pr-d/codeph ">url</codeph>-Eigenschaft gekürzt; weitere Informationen finden Sie im Eintrag zur <codeph class="+ topic/ph pr-d/codeph ">isURLInaccessible</codeph>-Eigenschaft.</p>
     
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Sound/load()" class="- topic/link "><linktext class="- topic/linktext ">load()</linktext></link><link href="flash.display.xml#LoaderInfo/url" class="- topic/link "><linktext class="- topic/linktext ">flash.display.LoaderInfo.url</linktext></link><link href="flash.media.xml#Sound/isURLInaccessible" class="- topic/link "><linktext class="- topic/linktext ">isURLInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:MicrophoneEnhancedMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">MicrophoneEnhancedMode</apiName><shortdesc class="- topic/shortdesc ">
 Die MicrophoneEnhancedMode-Klasse ist eine Aufzählung von Konstantenwerten, die zur Einstellung der mode-Eigenschaft in der MicrophoneEnhancedOptions-Klasse verwendet werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die MicrophoneEnhancedMode-Klasse ist eine Aufzählung von Konstantenwerten, die zur Einstellung der <codeph class="+ topic/ph pr-d/codeph ">mode</codeph>-Eigenschaft in der <codeph class="+ topic/ph pr-d/codeph ">MicrophoneEnhancedOptions</codeph>-Klasse verwendet werden.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#MicrophoneEnhancedOptions" class="- topic/link "><linktext class="- topic/linktext ">flash.media.MicrophoneEnhancedOptions</linktext></link></related-links><apiValue id="flash.media:MicrophoneEnhancedMode:FULL_DUPLEX" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">FULL_DUPLEX</apiName><shortdesc class="- topic/shortdesc "> 
	 Verwenden Sie diesen Modus, damit beide Teilnehmer gleichzeitig sprechen können.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">fullDuplex</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Verwenden Sie diesen Modus, damit beide Teilnehmer gleichzeitig sprechen können. Die akustische Echokompensation wird im Vollduplexmodus ausgeführt. Der Vollduplexmodus bietet die höchste Qualität bei der Echokompensation. Dieser Modus erfordert hochwertige Mikrofone und Lautsprecher sowie die meiste Rechenleistung. Verwenden Sie diesen Modus nicht mit einem USB-Mikrofon.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedMode:HALF_DUPLEX" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HALF_DUPLEX</apiName><shortdesc class="- topic/shortdesc ">
	 Verwenden Sie diesen Modus für ältere und weniger hochwertige Lautsprecher und Mikrofone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">halfDuplex</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Verwenden Sie diesen Modus für ältere und weniger hochwertige Lautsprecher und Mikrofone. Die akustische Echokompensation wird im Halbduplexmodus ausgeführt. Im Halbduplexmodus kann jeweils nur ein Teilnehmer sprechen. Der Halbduplexmodus erfordert weniger Verarbeitung als der Vollduplexmodus. Der Halbduplexmodus ist der Standardmodus für USB-Mikrofone.
	 
	 <p class="- topic/p ">Wenn die Anwendung die standardmäßige <codeph class="+ topic/ph pr-d/codeph ">enhancedOptions</codeph>-Einstellung und ein USB-Mikrofon verwendet, wechselt Flash Player automatisch in den <codeph class="+ topic/ph pr-d/codeph ">halfDuplex</codeph>-Modus. Wenn die Anwendung die standardmäßige <codeph class="+ topic/ph pr-d/codeph ">enhancedOptions</codeph>-Einstellung und das eingebaute Mikrofon verwendet, verwendet Flash Player den <codeph class="+ topic/ph pr-d/codeph ">fullDuplex</codeph>-Modus.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedMode:HEADSET" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">HEADSET</apiName><shortdesc class="- topic/shortdesc ">
	 Verwenden Sie diesen Modus, wenn beide Teilnehmer Headsets benutzen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">headset</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Verwenden Sie diesen Modus, wenn beide Teilnehmer Headsets benutzen. Die akustische Echokompensation wird im Niedrigechomodus ausgeführt. Dieser Modus benötigt am wenigsten Rechenleistung. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedMode:OFF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">OFF</apiName><shortdesc class="- topic/shortdesc ">
	 Alle erweiterten Audiofunktionen sind deaktiviert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">off</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Alle erweiterten Audiofunktionen sind deaktiviert.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:MicrophoneEnhancedMode:SPEAKER_MUTE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SPEAKER_MUTE</apiName><shortdesc class="- topic/shortdesc ">
	 Verwenden Sie diesen Modus, wenn der Lautsprecher stummgeschaltet ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.3" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2.7" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">speakerMute</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Verwenden Sie diesen Modus, wenn der Lautsprecher stummgeschaltet ist. Die akustische Echokompensation ist ausgeschaltet. Erweitertes Audio führt Rauschunterdrückung oder automatische Verstärkung aus (falls dies aktiviert ist).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#MicrophoneEnhancedOptions/autoGain" class="- topic/link "><linktext class="- topic/linktext ">flash.media.MicrophoneEnhancedOptions.autoGain</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.media:Video" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Video</apiName><shortdesc class="- topic/shortdesc ">
 
 Die Videoklasse zeigt Livevideo oder aufgezeichnetes Video in einer Anwendung an, ohne dass das Video in die SWF-Datei eingebettet ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, NetStream
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.display:DisplayObject</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 Die Videoklasse zeigt Livevideo oder aufgezeichnetes Video in einer Anwendung an, ohne dass das Video in die SWF-Datei eingebettet ist. Diese Klasse erstellt ein Video-Objekt, das jede der folgenden Videotypen abspielt: aufgenommene Videodateien, die auf einem Server oder lokal gespeichert sind, oder vom Benutzer erfasstes Live-Video. Ein Videoobjekt ist ein Anzeigeobjekt in der Anzeigeliste der Anwendung und stellt den visuellen Raum dar, in dem das Video in einer Benutzeroberfläche abgespielt wird.
 
 <p class="- topic/p ">
 Bei der Verwendung mit Flash Media Server ermöglicht Ihnen das Videoobjekt, vom Benutzer erfasstes Live-Video an den Server zu senden und dann vom Server an andere Benutzer zu übertragen. Mithilfe dieser Funktionen können Sie Medienanwendungen wie einfache Videoplayer, Videoplayer mit Multipoint-Veröffentlichung von einem Server zum anderen oder eine Anwendung für den Videoaustausch in einer Community erstellen.
 </p>
 
 <p class="- topic/p ">
 Flash Player 9 und höher unterstützt das Veröffentlichen und Wiedergeben von mit dem Sorenson Spark-Codec oder dem On2 VP6-Codec kodierten FLV-Dateien und zudem einen Alphakanal. Der Video-Codec On2 VP6 belegt eine geringere Bandbreite als ältere Technologien und enthält zusätzliche Deblocking- und Deringing-Filter. Weitere Informationen zur Videowiedergabe und zu unterstützten Formaten finden Sie im Abschnitt zur flash.net.NetStream-Klasse.</p>
 
 
 <p class="- topic/p ">
 Flash Player 9.0.115.0 und höher unterstützt MIP-Mapping, um die Wiedergabequalität und -leistung zur Laufzeit zu optimieren. Für die Videowiedergabe verwendet Flash Player MIP-Mapping-Optimierung, wenn Sie die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">smoothing</codeph> des Videoobjekts auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> einstellen. 
 </p> 
 
 <p class="- topic/p ">
 Wie bei anderen Anzeigeobjekten in der Anzeigeliste können Sie die verschiedenen Eigenschaften von Videoobjekten steuern. Sie können das Videoobjekt beispielsweise mithilfe seiner <codeph class="+ topic/ph pr-d/codeph ">x</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaften auf der Bühne verschieben, seine Größe mit den Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">height</codeph> und <codeph class="+ topic/ph pr-d/codeph ">width</codeph> ändern usw. 
 </p>
 
 <p class="- topic/p ">
 Um einen Videostream abzuspielen, verwenden Sie <codeph class="+ topic/ph pr-d/codeph ">attachCamera()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">attachNetStream()</codeph>, um das Video an das Videoobjekt anzuhängen. Fügen Sie das Videoobjekt dann mithilfe von <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> der Anzeigeliste hinzu.
 </p>
 
 <p class="- topic/p ">
 Wenn Sie Flash Professional verwenden, können Sie das Video-Objekt auch auf der Bühne platzieren, anstatt es mit <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph> hinzuzufügen:
 </p>
 
 <ol class="- topic/ol "><li class="- topic/li ">Ist das Bibliothekbedienfeld nicht sichtbar, wählen Sie „Fenster“ > „Bibliothek“ aus.</li><li class="- topic/li ">Fügen Sie der Bibliothek ein eingebettetes Videoobjekt hinzu, indem Sie auf der rechten Seite der Titelleiste im Bibliothekbedienfeld auf das Optionsmenü klicken und die Option „Neues Video“ auswählen.</li><li class="- topic/li ">Benennen Sie das eingebettete Videoobjekt für die Verwendung in der Bibliothek im Dialogfeld für die Videoeigenschaften und klicken Sie auf „OK“.</li><li class="- topic/li ">Ziehen Sie das Videoobjekt auf die Bühne und geben Sie ihm im Eigenschafteninspektor einen eindeutigen Namen, zum Beispiel <codeph class="+ topic/ph pr-d/codeph ">my_video</codeph>. (Verwenden Sie nicht den Namen „Video“.)</li></ol>
 
 <p class="- topic/p ">In AIR-Anwendungen auf dem Desktop werden beim Abspielen von Video im Vollbildmodus alle Energiesparfunktionen und Bildschirmschoner deaktiviert (sofern dies vom Betriebssystem zugelassen wird).</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Die Videoklasse ist keine Unterklasse der InteractiveObject-Klasse, sodass keine Mausereignisse ausgelöst werden können. Sie können jedoch die <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>-Methode für den Anzeigeobjekt-Container aufrufen, der das Videoobjekt enthält.
 </p>
 
 </apiDesc><example conref="examples\VideoExample.as" class="- topic/example "> Im folgenden Beispiel wird ein Videoobjekt mit den Klassen NetConnection und NetStream verwendet, um eine FLV-Datei zu laden und abzuspielen. Zur Ausführung dieses Beispiels benötigen Sie eine FLV-Datei, deren Name und Speicherort mit der an <codeph class="+ topic/ph pr-d/codeph ">videoURL</codeph> übergebenen Variablen übereinstimmt. In diesem Fall ist das eine FLV-Datei mit dem Namen „Video.flv“, die in dem Verzeichnis abgelegt ist, in dem sich die SWF-Datei befindet.
 <p class="- topic/p ">In diesem Fall wird der Code zur Erstellung des Video- und NetStream-Objekts und zum Aufrufen der Methoden <codeph class="+ topic/ph pr-d/codeph ">Video.attachNetStream()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> in eine Prozedurfunktion eingefügt. Die Prozedur wird nur aufgerufen, wenn die Verbindung mit dem NetConnection-Objekt erfolgreich hergestellt werden kann, d. h. wenn das Ereignis <codeph class="+ topic/ph pr-d/codeph ">netStatus</codeph> ein info-Objekt mit einer <codeph class="+ topic/ph pr-d/codeph ">code</codeph>-Eigenschaft zurückgibt, die Erfolg angibt. Es wird empfohlen, die erfolgreiche Verbindungsherstellung abzuwarten, bevor Sie <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> aufrufen. </p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class VideoExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function VideoExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            stream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }
    }
 }
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Video/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">attachCamera()</linktext></link><link href="flash.media.xml#Video/attachNetStream()" class="- topic/link "><linktext class="- topic/linktext ">attachNetStream()</linktext></link><link href="flash.media.xml#Camera/getCamera()" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.getCamera()</linktext></link><link href="flash.net.xml#NetConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream</linktext></link><link href="flash.display.xml#DisplayObjectContainer/addChild()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObjectContainer.addChild()</linktext></link><link href="flash.display.xml#Stage/addChild()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Stage.addChild()</linktext></link><link href="http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7e1a.html" class="- topic/link "><linktext class="- topic/linktext ">Arbeiten mit Videos</linktext></link></related-links><apiConstructor id="flash.media:Video:Video" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Video</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine neue Video-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, NetStream
     </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">width</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">320</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Breite des Videos in Pixel.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">height</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">240</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Höhe des Videos in Pixel.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine neue Video-Instanz. Wenn für die Parameter <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> keine Werte angegeben sind, werden die Standardwerte verwendet. Mithilfe von <codeph class="+ topic/ph pr-d/codeph ">Video.width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">Video.height</codeph> können Sie die width- und height-Eigenschaften des Videoobjekts auch nach der Erstellung des Objekts festlegen. Beim Erstellen eines neuen Videoobjekts ist der Wert 0 für die Höhe und Breite nicht zulässig. Wenn Sie den Wert 0 übergeben, werden die Standardwerte verwendet.
     
     <p class="- topic/p ">Rufen Sie nach dem Erstellen des Videos die Methode <codeph class="+ topic/ph pr-d/codeph ">DisplayObjectContainer.addChild()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">DisplayObjectContainer.addChildAt()</codeph> auf, um das Videoobjekt einem übergeordneten DisplayObjectContainer-Objekt hinzuzufügen.</p>
     
     </apiDesc><example conref="examples\Video_new.as" class="- topic/example "> Im folgenden Beispiel wird gezeigt, wie eine externe FLV-Datei geladen wird:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var MyVideo:Video = new Video();
addChild(MyVideo);
 
var MyNC:NetConnection = new NetConnection();
MyNC.connect(null);
 
var MyNS:NetStream = new NetStream(MyNC);
MyNS.play("http://www.helpexamples.com/flash/video/clouds.flv");

MyVideo.attachNetStream(MyNS);

//the clouds.flv video has metadata we're not using, so create
//an error handler to ignore the message generated by the runtime
//about the metadata
MyNS.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); 

function asyncErrorHandler(event:AsyncErrorEvent):void 
{ 
   //ignore metadata error message
} 
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.media:Video:attachCamera" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachCamera</apiName><shortdesc class="- topic/shortdesc ">
     Gibt einen Videostream von einer Kamera an, der innerhalb des Videoobjekts in der Anwendung angezeigt werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Video.attachCamera, attachCamera()
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">camera</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.media:Camera</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Camera-Objekt, das Videodaten erfasst. Wenn Sie die Verbindung mit dem Videoobjekt beenden möchten, übergeben Sie den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt einen Videostream von einer Kamera an, der innerhalb des Videoobjekts in der Anwendung angezeigt werden soll.
     
     <p class="- topic/p ">
     Verwenden Sie diese Methode, um vom Benutzer erfasstes Live-Video an das Video-Objekt anzuhängen. Sie können das Live-Video lokal auf demselben Computer oder Gerät, auf dem es aufgezeichnet wurde, abspielen, oder es an Flash Media Server senden und es mithilfe des Servers an andere Benutzer streamen.
     </p>
     
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> In einer iOS-AIR-Anwendung kann kein Kameravideo angezeigt werden, wenn die Anwendung den GPU-Renderingmodus verwendet.</p>
	 
     </apiDesc><example class="- topic/example ">Die Verwendung dieser Methode wird im Beispiel für die <xref href="Camera.html#getCamera()" class="- topic/xref ">Camera.getCamera()</xref>-Methode veranschaulicht. 
     </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Video/attachNetStream()" class="- topic/link "><linktext class="- topic/linktext ">Video.attachNetStream()</linktext></link><link href="flash.media.xml#Camera" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Video:attachNetStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attachNetStream</apiName><shortdesc class="- topic/shortdesc ">
     Gibt einen Videostream an, der innerhalb des Videoobjekts in der Anwendung angezeigt werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">NetStream, video, Video.attachNetStream, attachNetStream()
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">netStream</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:NetStream</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein NetStream-Objekt. Wenn Sie die Verbindung mit dem Videoobjekt beenden möchten, übergeben Sie den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt einen Videostream an, der innerhalb des Videoobjekts in der Anwendung angezeigt werden soll. Der Videostream ist entweder eine Videodatei, die mit <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> abgespielt wird, ein Camera-Objekt oder <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Wenn Sie eine Videodatei verwenden, kann sie im lokalen Dateisystem oder auf Flash Media Server gespeichert werden. Wenn der Wert des <codeph class="+ topic/ph pr-d/codeph ">netStream</codeph>-Arguments auf <codeph class="+ topic/ph pr-d/codeph ">null</codeph> gesetzt ist, wird das Video nicht mehr im Videoobjekt wiedergegeben.
     
     <p class="- topic/p ">
     Sie müssen diese Methode nicht verwenden, wenn eine Videodatei nur Audiodaten enthält. Die Audiodaten von Videodateien werden automatisch wiedergegeben, wenn Sie <codeph class="+ topic/ph pr-d/codeph ">NetStream.play()</codeph> aufrufen. Um die mit einer Videodatei verknüpften Audiodaten zu steuern, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">soundTransform</codeph>-Eigenschaft des NetStream-Objekts, das die Videodatei wiedergibt.
     </p>
     
     </apiDesc><example class="- topic/example ">Am Ende des Abschnitts über diese Klasse finden Sie in Beispiel , in dem die Verwendung dieser Methode veranschaulicht wird. 
      
      </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Video/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">Video.attachCamera()</linktext></link><link href="flash.net.xml#NetStream/soundTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.soundTransform</linktext></link><link href="flash.net.xml#NetStream/play()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.NetStream.play()</linktext></link><link href="flash.media.xml#SoundTransform" class="- topic/link "><linktext class="- topic/linktext ">SoundTransform</linktext></link></related-links></apiOperation><apiOperation id="flash.media:Video:clear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clear</apiName><shortdesc class="- topic/shortdesc ">
     Löscht das Bild, das aktuell im Videoobjekt angezeigt wird (nicht im Videostream).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Video.clear, clear
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Löscht das Bild, das aktuell im Videoobjekt angezeigt wird (nicht im Videostream). Diese Methode ist für das Arbeiten mit dem aktuellen Bild nützlich. Sie können beispielsweise das letzte Bild löschen oder Standbyinformationen anzeigen, ohne das Videoobjekt auszublenden.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Video/attachCamera()" class="- topic/link "><linktext class="- topic/linktext ">Video.attachCamera()</linktext></link></related-links></apiOperation><apiValue id="flash.media:Video:deblocking:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">deblocking</apiName><shortdesc class="- topic/shortdesc ">
     Gibt den Typ des Filters an, der bei der Nachbearbeitung auf dekodierte Videos angewendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Video.deblocking, deblocking
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt den Typ des Filters an, der bei der Nachbearbeitung auf dekodierte Videos angewendet wird. Mit dem Standardwert 0 kann bei der Videokomprimierung gegebenenfalls ein Deblocking-Filter angewendet werden.
     
     <p class="- topic/p ">Die Komprimierung von Videos kann zu unerwünschten Artefakten führen. Mithilfe der <codeph class="+ topic/ph pr-d/codeph ">deblocking</codeph>-Eigenschaft können Sie Filter setzen, mit denen Blocking-Artefakte und (bei Videokomprimierungen mit dem On2 VP6-Codec) auch Ringing-Artefakte reduziert werden.</p>
     
     <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Blocking</i> bezieht sich auf sichtbare Fehler zwischen den Begrenzungen der einzelnen Blocks, aus denen sich jedes Videobild zusammensetzt. <i class="+ topic/ph hi-d/i ">Ringing</i> bezieht sich auf verzerrte Kanten der Elemente in einem Videobild.</p>
     
     <p class="- topic/p ">Es stehen zwei Deblocking-Filter zur Verfügung: einer im Sorenson-Codec und ein weiterer im On2 VP6-Codec. Bei Verwendung des On2 VP6-Codecs ist zudem ein Deringing-Filter verfügbar. Verwenden Sie zum Festlegen eines Filters einen der folgenden Werte:</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">0 – Der Deblocking-Filter wird bei der Videokomprimierung bei Bedarf angewendet.</li><li class="- topic/li ">1 – Es wird kein Deblocking-Filter verwendet.</li><li class="- topic/li ">2 – Es wird der Sorenson-Deblocking-Filter angewendet.</li><li class="- topic/li ">3 – Nur bei der On2-Videokomprimierung wird der Deblocking-Filter von On2, jedoch kein Deringing-Filter verwendet.</li><li class="- topic/li ">4 – Nur für On2-Video. Es wird der Deblocking-Filter und der Deringing-Filter von On2 verwendet.</li><li class="- topic/li ">5 – Nur bei der On2-Videokomprimierung wird der Deblocking-Filter und ein leistungsstärkerer Deringing-Filter von On2 verwendet.</li></ul>
     
     <p class="- topic/p ">Wenn bei Verwendung des Sorenson-Codecs ein Wert größer als 2 angegeben wurde, wird der Sorenson-Decoder automatisch auf 2 gesetzt.</p>
     
     <p class="- topic/p ">Die Verwendung eines Deblocking-Filters hat Auswirkungen auf die Gesamtleistung bei der Wiedergabe und ist bei Videos mit hoher Bandbreite normalerweise nicht erforderlich. Wenn das System eines Benutzers nicht leistungsfähig genug ist, treten bei einem aktivierten Deblocking-Filter bei der Wiedergabe von Videos möglicherweise Probleme auf.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Video:smoothing:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">smoothing</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob das Video beim Skalieren geglättet (interpoliert) werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Video.smoothing, smoothing
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob das Video beim Skalieren geglättet (interpoliert) werden soll. Die Funktion zum Glätten funktioniert nur, wenn sich die Laufzeitumgebung im Modus für hohe Qualität (Standardeinstellung) befindet. Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">false</codeph> (ohne Glättung).
     <p class="- topic/p ">Setzen Sie für die Videowiedergabe mit Flash Player 9.0.115.0 und höheren Versionen diese Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, um die Bilder durch MIP-Mapping zu optimieren.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.media:Video:videoHeight:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoHeight</apiName><shortdesc class="- topic/shortdesc ">
      Eine Ganzzahl, die die Höhe des Videostreams in Pixeln angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Video.height, height
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Eine Ganzzahl, die die Höhe des Videostreams in Pixeln angibt. Im Falle von Live-Streams ist der Wert mit dem der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">Camera.height</codeph> des Kamera-Objekts identisch, das den Videostream aufzeichnet. Bei aufgenommenen Videodateien ist dieser Wert die Höhe des Videos.
     <p class="- topic/p ">Sie können diese Eigenschaft beispielsweise verwenden, um sicherzustellen, dass der Benutzer das Video in der Größe sieht, in der es aufgenommen wurde (unabhängig von der eigentlichen Größe des Videoobjekts auf der Bühne).</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/height" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.height</linktext></link></related-links></apiValue><apiValue id="flash.media:Video:videoWidth:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">videoWidth</apiName><shortdesc class="- topic/shortdesc ">
      Eine Ganzzahl, die die Breite des Videostreams in Pixeln angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Camera, video, Video.width, width
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Eine Ganzzahl, die die Breite des Videostreams in Pixeln angibt. Im Falle von Live-Streams ist der Wert mit dem der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">Camera.width</codeph> des Camera-Objekts identisch, das den Videostream aufzeichnet. Bei aufgenommenen Videodateien ist dieser Wert die Breite des Videos.
     
     <p class="- topic/p ">Sie können diese Eigenschaft beispielsweise verwenden, um sicherzustellen, dass der Benutzer das Video in der Größe sieht, in der es aufgenommen wurde (unabhängig von der eigentlichen Größe des Videoobjekts auf der Bühne).</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.media.xml#Camera/width" class="- topic/link "><linktext class="- topic/linktext ">flash.media.Camera.width</linktext></link></related-links></apiValue></apiClassifier></apiPackage>