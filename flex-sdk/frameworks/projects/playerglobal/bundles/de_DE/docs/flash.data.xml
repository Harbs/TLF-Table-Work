<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.data</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.data:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
 Die in einer „SQLViewSchema“-Instanz enthaltenen Informationen beschreiben eine bestimmte Ansicht in einer Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLTableSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die in einer „SQLViewSchema“-Instanz enthaltenen Informationen beschreiben eine bestimmte Ansicht in einer Datenbank. Zu den verfügbaren Informationen gehören der Name der Ansicht (die <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Eigenschaft), die SQL-Anweisung, mit der die Ansicht erstellt wurde (die <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>-Eigenschaft) und Informationen zu den Ansichtsspalten (die <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>-Eigenschaft).
 
 <p class="- topic/p ">Um die Ansichtsschemainformationen für eine Datenbank zu erhalten, laden Sie die Schemainformationen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Achten Sie dabei darauf, dass <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> als Wert für das Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> angegeben ist. Die <codeph class="+ topic/ph pr-d/codeph ">views</codeph>-Eigenschaft der resultierenden „SQLSchemaResult“-Instanz enthält ein Array mit „SQLViewSchema“-Instanzen, die die Ansichten in der Datenbank repräsentieren.</p>
 
 <p class="- topic/p ">Im Allgemeinen werden „SQLViewSchema“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLViewSchema:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLViewSchema“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der zugeordneten Datenbank. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Ansicht.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die SQL-Anweisung, mit der die Ansicht erstellt wurde.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Array mit „SQLColumnSchema“-Instanzen, die die Ansichtsspalten beschreiben.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLViewSchema“-Instanz. Im Allgemeinen wird der „SQLViewSchema“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
 Die in der „SQLColumnSchema“-Klasse enthaltenen Informationen beschreiben die Merkmale einer spezifischen Spalte in einer Tabelle der Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die in der „SQLColumnSchema“-Klasse enthaltenen Informationen beschreiben die Merkmale einer spezifischen Spalte in einer Tabelle der Datenbank.
 
 <p class="- topic/p ">Um die Spaltenschemainformationen für eine oder mehrere Tabellen einer Datenbank zu erhalten, laden Sie die Schemainformationen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Achten Sie dabei darauf, dass <codeph class="+ topic/ph pr-d/codeph ">true</codeph> als Wert für das Argument <codeph class="+ topic/ph pr-d/codeph ">includeColumnSchema</codeph> angegeben ist. In der daraus resultierenden SQLSchemaResult-Instanz enthält jede Tabelle und Ansichtsdefinition eine Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>, ein Array mit SQLColumnSchema-Instanzen, welche die Spalten in der Tabelle oder Ansicht repräsentieren.</p>
 
 <p class="- topic/p ">Im Allgemeinen werden SQLColumnSchema-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLColumnSchema:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLColumnSchema“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Spalte.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">primaryKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob diese Spalte ein Teil des Primärschlüssels für die verknüpfte Tabelle ist.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allowNull</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob diese Spalte <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph>-Werte enthalten kann.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoIncrement</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob der Wert dieser Spalte automatisch inkrementiert wird.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dataType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der deklarierte Spaltentyp.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultCollationType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die für diese Spalte festgelegte Vergleichsreihenfolge. Dieser Wert entspricht einer der Konstanten in der „SQLCollationType“-Klasse:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> gibt an, dass die Spalte die Vergleichsreihenfolge <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> verwendet.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> gibt an, dass die Spalte die Vergleichsreihenfolge <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph> verwendet, d. h. bei Textvergleichen wird zwischen Groß- und Kleinschreibung unterschieden.</li></ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLColumnSchema“-Instanz. Im Allgemeinen wird der „SQLColumnSchema“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLColumnSchema:allowNull:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowNull</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob in dieser Spalte „NULL“-Werte gestattet sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob in dieser Spalte <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph>-Werte gestattet sind. Eine Spalte mit der Einschränkung <codeph class="+ topic/ph pr-d/codeph ">NOT NULL</codeph> weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> für die <codeph class="+ topic/ph pr-d/codeph ">allowNull</codeph>-Eigenschaft auf.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:autoIncrement:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoIncrement</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob der Wert dieser Spalte automatisch inkrementiert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob der Wert dieser Spalte automatisch inkrementiert wird. Bei einer automatisch inkrementierten Spalte handelt es sich um einen speziellen Typ der Spalte <codeph class="+ topic/ph pr-d/codeph ">PRIMARY KEY</codeph>, deren Wert bei der Einfügung einer neuen Zeile in die Tabelle automatisch als nächster Wert in der Reihe von Ganzzahlen erstellt wird.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:dataType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataType</apiName><shortdesc class="- topic/shortdesc ">
     Ruft den Datentyp der Spalte als String auf.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ruft den Datentyp der Spalte als String auf. Bei dem Wert handelt es sich um den eigentlichen Datentypnamen, der in der Anweisung <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph>, mit der die Tabelle definiert wird, angegeben ist. Wenn kein Datentyp angegeben ist, lautet der Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:defaultCollationType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultCollationType</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die standardmäßige Vergleichsreihenfolge an, die für diese Spalte festgelegt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die standardmäßige Vergleichsreihenfolge an, die für diese Spalte festgelegt wurde. Der Wert dieser Eigenschaft entspricht einer der Konstanten in der „SQLCollationType“-Klasse:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> gibt an, dass die Spalte die Vergleichsreihenfolge <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> verwendet.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> gibt an, dass die Spalte die <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph>-Vergleichsreihenfolge verwendet, d. h. bei Textvergleichen wird die Groß- und Kleinschreibung nicht berücksichtigt.</li></ul>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     Ruft den Namen der Spalte ab.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ruft den Namen der Spalte ab.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:primaryKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">primaryKey</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob es sich bei dieser Spalte um die Primärschlüssselspalte (oder eine der Primärschlüssselspalten bei einem zusammengesetzten Schlüssel) der zugewiesenen Tabelle handelt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob es sich bei dieser Spalte um die Primärschlüssselspalte (oder eine der Primärschlüssselspalten bei einem zusammengesetzten Schlüssel) der zugewiesenen Tabelle handelt.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnNameStyle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
 Diese Klasse enthält die Konstanten, die die möglichen Werte der Eigenschaft „SQLConnection.columnNameStyle“ darstellen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Diese Klasse enthält die Konstanten, die die möglichen Werte der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph> darstellen. Diese Werte geben die verschiedenen Optionen an, mit denen gesteuert wird, wie Spaltennamen (Eigenschaftsnamen) in den als Ergebnis einer SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegebenen Objekte formatiert werden.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links><apiValue id="flash.data:SQLColumnNameStyle:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, das die von einer „SELECT“-Anweisung zurückgegebenen Spaltennamen das Standardformat aufweisen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, das die von einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegebenen Spaltennamen das Standardformat aufweisen. Im Standardformat lauten Spaltennamen <codeph class="+ topic/ph pr-d/codeph ">[tabellenname]_[spaltenname]</codeph>, wenn die Anweisung <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> mehrere Tabellen enthält, oder <codeph class="+ topic/ph pr-d/codeph ">[spaltenname]</codeph>, wenn die Anweisung <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> eine Tabelle enthält.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:LONG" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LONG</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, das die von einer „SELECT“-Anweisung zurückgegebenen Spaltennamen das lange Spaltennamenformat aufweisen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">long</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, das die von einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegebenen Spaltennamen das lange Spaltennamenformat aufweisen. In diesem Format lauten Spaltennamen <codeph class="+ topic/ph pr-d/codeph ">[tabellenname]_[spaltenname]</codeph>, unabhängig davon, wie viele Tabellen die Anweisung <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> enthält.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:SHORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SHORT</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, das die von einer „SELECT“-Anweisung zurückgegebenen Spaltennamen das kurze Spaltennamenformat aufweisen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">short</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, das die von einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegebenen Spaltennamen das kurze Spaltennamenformat aufweisen. In diesem Format lauten Spaltennamen <codeph class="+ topic/ph pr-d/codeph ">[spaltenname]</codeph>, unabhängig davon, wie viele Tabellen die Anweisung <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> enthält.
	 
	 <p class="- topic/p ">Enthält der Ergebnissatz mehrere Spalten mit demselben Namen, so wird dem Ergebnisobjekt nur eine Eigenschaft mit diesem Namen hinzugefügt. Der dieser Eigenschaft zugewiesene Wert stammt aus der letzten Spalte dieses Namens in der Ergebniszeile. Betrachten Sie als Beispiel die folgende <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung:</p>
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 SELECT customers.customerId, addresses.customerId
	 FROM customers INNER JOIN addresses
	    ON customers.customerId = addresses.customerId
	 </pre>
	 
	 <p class="- topic/p ">Bei der Ausführung dieser Anweisung für eine SQLConnection mit kurzen Spaltennamen weist jedes Ergebnisobjekt eine Eigenschaft namens <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph> auf. Diese Eigenschaft weist den Wert aus der in der Tabelle <codeph class="+ topic/ph pr-d/codeph ">addresses</codeph> enthaltenen Spalte <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph> auf.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
 Bei der „SQLSchema“-Klasse handelt es sich um die Basisklasse für Schemainformationen zu Datenbankobjekten, wie etwa Tabellen, Ansichten und Indizes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Bei der „SQLSchema“-Klasse handelt es sich um die Basisklasse für Schemainformationen zu Datenbankobjekten, wie etwa Tabellen, Ansichten und Indizes.
 
 <p class="- topic/p ">Um Schemainformationen für eine Datenbank erhalten, laden Sie Schemainformationen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Die daraus resultierende „SQLSchemaResult“-Instanz enthält Arrays mit Instanzen, die die Objekte in der Datenbank darstellen.</p>
 
 <p class="- topic/p ">Im Allgemeinen werden „SQLSchema“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchema:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLSchema“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der zugeordneten Datenbank. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name des Datenbankobjekts. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die SQL, mit der das Datenbankobjekt erstellt wurde.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLSchema“-Instanz. Im Allgemeinen wird der „SQLSchema“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLSchema:database:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">database</apiName><shortdesc class="- topic/shortdesc ">
     Der Name der Datenbank, zu der dieses Schemaobjekt gehört.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Name der Datenbank, zu der dieses Schemaobjekt gehört. Der Name der Hauptdatenbank, die einer „SQLConnection“-Instanz zugewiesen ist, lautet „main“ (die Datenbankdatei, die durch den Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> einer „SQLConnection“-Instanz geöffnet wurde). Bei anderen Datenbanken, die mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.attach()</codeph> mit der Verbindung verknüpft sind, handelt es sich bei dem Wert um den Namen, der im Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> angegeben wurde.
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     Der Name dieses Schemaobjekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Name dieses Schemaobjekts. Jedes Objekt in einer Datenbank trägt einen eindeutigen Namen. Der Name ist in der SQL-Anweisung festgelegt, mit der das Objekt erstellt wird (wie etwa die <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph>-Anweisung für eine Tabelle).
	 
	 <p class="- topic/p ">Wenn beispielsweise ein Datenbankindex mithilfe der folgenden SQL-Anweisung erstellt wird, lautet der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">name</codeph> für dieses Indexschema <codeph class="+ topic/ph pr-d/codeph ">"customer_index":</codeph></p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLSchema:sql:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sql</apiName><shortdesc class="- topic/shortdesc ">
     Gibt den gesamten Text der SQL-Anweisung zurück, mit der dieses Schemaobjekt erstellt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt den gesamten Text der SQL-Anweisung zurück, mit der dieses Schemaobjekt erstellt wurde. Jedes in einer Datenbank enthaltene Objekt wird mithilfe einer SQL-Anweisung erstellt.
	 
	 <p class="- topic/p ">Wenn beispielsweise ein Datenbankindex mithilfe der folgenden SQL-Anweisung erstellt wird:</p>
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
	 <p class="- topic/p ">handelt es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> für das Indexschema um den gesamten Text der Anweisung.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLCollationType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLCollationType</apiName><shortdesc class="- topic/shortdesc ">
 Diese Klasse enthält sowohl die Konstanten, die die möglichen Werte für den defaultCollationType-Parameter im SQLColumnSchema-Konstruktor darstellen, als auch diejenigen, für die SQLColumnSchema.defaultCollationType-Eigenschaft.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Diese Klasse enthält sowohl die Konstanten, die die möglichen Werte für den <codeph class="+ topic/ph pr-d/codeph ">defaultCollationType</codeph>-Parameter im SQLColumnSchema-Konstruktor darstellen, als auch diejenigen, für die <codeph class="+ topic/ph pr-d/codeph ">SQLColumnSchema.defaultCollationType</codeph>-Eigenschaft.
 
 <p class="- topic/p ">Diese Werte repräsentieren verschiedene Vergleichsreihenfolgen, die für eine Spalte in einer Datenbanktabelle angegeben werden können. Mithilfe einer <i class="+ topic/ph hi-d/i ">Vergleichsreihenfolge</i> können Daten sortiert und verglichen werden, z. B. ob in der Datenbank zwischen Groß- und Kleinschreibung unterschieden wird.</p>
 
 <p class="- topic/p ">Weitere Informationen zum Definieren und Verwenden von Sortierfolgen finden Sie im Abschnitt „COLLATE“ im Anhang „<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_en" scope="external" class="- topic/xref ">SQL-Unterstützung in lokalen Datenbanken</xref>“.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links><apiValue id="flash.data:SQLCollationType:BINARY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BINARY</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, dass die Vergleichsreihenfolge „BINARY“ auf die Spalte angewendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">binary</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, dass die Vergleichsreihenfolge <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph> auf die Spalte angewendet wird. Bei <codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> werden zwei Werte anhand ihres Bytewertes verglichen, die Textkodierung der Zeichen wird nicht berücksichtigt.
	 
	 <p class="- topic/p ">Wenn ein binärer Vergleich auf Werte der <codeph class="+ topic/ph pr-d/codeph ">TEXT</codeph>-Speicherklasse angewendet wird, wird beim Sortieren und Vergleichen der Spaltenwerte in der Datenbank zwischen Groß- und Kleinschreibung unterschieden.</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLCollationType:NO_CASE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NO_CASE</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, dass die Vergleichsreihenfolge „NOCASE“ auf die Spalte angewendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">noCase</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, dass die Vergleichsreihenfolge <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph> auf die Spalte angewendet wird. Bei <codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> wird beim Sortieren und Vergleichen von Werten nicht zwischen Groß- und Kleinschreibung unterschieden.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
 Eine „SQLSchemaResult“-Instanz enthält die Informationen, die aus einem Aufruf der Methode „SQLConnection.loadSchema()“ resultieren.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Eine „SQLSchemaResult“-Instanz enthält die Informationen, die aus einem Aufrufen der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> resultieren. Sie enthält vier Arrayeigenschaften mit den angeforderten Schemadaten, die auf den Argumentwerten beim Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> basieren.
 
 <p class="- topic/p ">Um die „SQLSchemaResult“-Instanz für einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> abzurufen, müssen Sie die Methode <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> der „SQLConnection“-Instanz aufrufen. Im Allgemeinen werden „SQLSchemaResult“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchemaResult:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLSchemaResult“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tables</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Array mit „SQLTableSchema“-Instanzen, wie in der Anforderung <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angegeben.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">views</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Array mit „SQLViewSchema“-Instanzen, wie in der Anforderung <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angegeben.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">indices</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Array mit „SQLIndexSchema“-Instanzen, wie in der Anforderung <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angegeben.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">triggers</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Array mit „SQLTriggerSchema“-Instanzen, wie in der Anforderung <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angegeben.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLSchemaResult“-Instanz. Im Allgemeinen wird der „SQLSchemaResult“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLSchemaResult:indices:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">indices</apiName><shortdesc class="- topic/shortdesc ">
     Ein Array mit „SQLIndexSchema“-Instanzen, die in einem Aufruf von „SQLConnection.loadSchema()“ angefordert wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Array mit SQLIndexSchema-Instanzen, die in einem Aufruf von<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> angefordert wurden. Wenn die angegebenen Datenbanken keine Indizes enthalten oder wenn der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angibt, dass Indizes aus dem Ergebnis ausgeschlossen werden sollen, handelt es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> um ein leeres Array (ein Array, dessen Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">length</codeph> den Wert „0“ hat).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:tables:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tables</apiName><shortdesc class="- topic/shortdesc ">
     Ein Array mit „SQLTableSchema“-Instanzen, die in einem Aufruf von „SQLConnection.loadSchema()“ angefordert wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Array mit SQLTableSchema-Instanzen, die in einem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> angefordert wurden. Wenn die angegebenen Datenbanken keine Tabellen enthalten oder wenn der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angibt, dass Tabellen aus dem Ergebnis ausgeschlossen werden sollen, handelt es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">tables</codeph> um ein leeres Array (ein Array, dessen Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">length</codeph> den Wert „0“ hat).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:triggers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">triggers</apiName><shortdesc class="- topic/shortdesc ">
     Ein Array mit „SQLTriggerSchema“-Instanzen, die in einem Aufruf von „SQLConnection.loadSchema()“ angefordert wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Array mit SQLTriggerSchema-Instanzen, die in einem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> angefordert wurden. Wenn die angegebenen Datenbanken keine Auslöser enthalten oder wenn der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angibt, dass Auslöser aus dem Ergebnis ausgeschlossen werden sollen, handelt es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> um ein leeres Array (ein Array, dessen Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">length</codeph> den Wert „0“ hat).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:views:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">views</apiName><shortdesc class="- topic/shortdesc ">
     Ein Array mit „SQLViewSchema“-Instanzen, die in einem Aufruf von „SQLConnection.loadSchema()“ angefordert wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Array mit SQLViewSchema-Instanzen, die in einem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> angefordert wurden. Wenn die angegebenen Datenbanken keine Ansichten enthalten oder wenn der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> angibt, dass Ansichten aus dem Ergebnis ausgeschlossen werden sollen, handelt es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">views</codeph> um ein leeres Array (ein Array, dessen Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">length</codeph> den Wert „0“ hat).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTransactionLockType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTransactionLockType</apiName><shortdesc class="- topic/shortdesc ">
 Diese Klasse enthält die Konstanten, die die möglichen Werte des Parameters „option“ der Methode „SQLConnection.begin()“ darstellen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Diese Klasse enthält die Konstanten, die die möglichen Werte des Parameters <codeph class="+ topic/ph pr-d/codeph ">option</codeph> der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.begin()</codeph> darstellen.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links><apiValue id="flash.data:SQLTransactionLockType:DEFERRED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFERRED</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die verzögerte Sperrtransaktionsoption an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">deferred</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die verzögerte Sperrtransaktionsoption an. Eine verzögerte Sperrtransaktion erwirbt erst beim ersten Zugriff auf die Datenbank eine Sperre. Bei einer verzögerten Transaktion wird eine Sperre erst beim ersten Lese- oder Schreibvorgang erworben.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:EXCLUSIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXCLUSIVE</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die exklusive Sperrtransaktionsoption an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exclusive</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die exklusive Sperrtransaktionsoption an. Eine exklusive Sperrtransaktion erwirbt sofort eine Sperre an der Datenbank. Andere „SQLStatement“-Objekte, die über eine andere SQLConnection (in derselben oder einer anderen AIR-Anwendung) an derselben Datenbank ausgeführt werden, können weder Daten in der Datenbank lesen noch Daten in die Datenbank schreiben.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:IMMEDIATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IMMEDIATE</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die sofortige Sperrtransaktionsoption an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">immediate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die sofortige Sperrtransaktionsoption an. Eine sofortige Sperrtransaktion erwirbt sofort eine Sperre an der Datenbank. „SQLStatement“-Objekte, die über eine andere SQLConnection (in derselben oder einer anderen AIR-Anwendung) an derselben Datenbank ausgeführt werden, können Daten in der Datenbank lesen, aber keine Daten in die Datenbank schreiben. Wenn andere Verbindungen Daten in der Datenbank lesen, gilt jedoch, dass der ursprüngliche Status der Daten in der Datenbank identisch ist mit dem Status der Datenbank, bevor durch die Eingangstransaktion der „SQLConnection“-Instanz die Methode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> aufgerufen wurde. Alle ungebundenen Datenänderungen, die im Rahmen einer sofortigen Sperrtransaktion vorgenommen wurden, stehen anderen Verbindungen nicht zur Verfügung.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
 Mithilfe einer „SQLConnection“-Instanz wird die Erstellung von und Verbindung mit lokalen SQL-Datenbankdateien (lokale Datenbanken) verwaltet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Mithilfe einer „SQLConnection“-Instanz wird die Erstellung von und Verbindung mit lokalen SQL-Datenbankdateien (lokale Datenbanken) verwaltet.
 
 
 <p class="- topic/p ">Die Funktionen der SQLConnection-Klasse werden in mehrere Kategorien unterteilt:</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Eine lokale SQL-Datenbankdatei wird erstellt oder geöffnet, indem die <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>-Methode der SQLConnection-Instanz für die <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph>-Eigenschaft von SQLStatement aufgerufen wird.</p></li><li class="- topic/li "><p class="- topic/p ">Außerdem bietet die SQLConnection-Klasse Möglichkeiten für SQL-Anweisungen, einschließlich einer Funktionalität zum Ausführen mehrerer Anweisungen in einer Transaktion. Transaktionen werden mithilfe der Methoden <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> verwaltet. Zusätzlich ermöglichen die Methoden <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> es Code, Speicherpunkte zu definieren und zu verwalten. Diese werden verwendet, um Transaktionen in Gruppen von Vorgängen zu unterteilen.</p></li><li class="- topic/li "><p class="- topic/p ">Die SQLConnection-Klasse bietet Zugriff auf Datenbankschemainformationen zu den verbundenen Datenbanken. Im Schema einer Datenbank werden die Definitionen ihrer Tabellen, Spalten, Indizes und Auslöser beschrieben. Weitere Informationen finden Sie im Abschnitt zur <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>-Methode.</p></li><li class="- topic/li "><p class="- topic/p ">Mithilfe der SQLConnection-Klasse können Datenbanken unter Verwendung von AES-CCM verschlüsselt werden. Dadurch können Daten sowohl identifiziert als auch geschützt werden. Zum Verschlüsseln einer Datenbank muss bei deren Erstellung ein 16-Byte-Schlüssel festgelegt werden (durch ein ByteArray). Dieser Schlüssel kann später mithilfe der <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.reencrypt()</codeph>-Methode geändert werden. Durch die Verschlüsselung wird die Leistung beim Schreiben in die Datenbank und beim Lesen daraus verringert. Die Verschlüsselung wird auf die auf der Festplatte gespeicherten Daten angewendet, nicht jedoch auf den temporären Datencache im Arbeitsspeicher. Für Datenbanken im Speicher wird die Verschlüsselung <i class="+ topic/ph hi-d/i ">nicht</i> unterstützt.</p></li><li class="- topic/li "><p class="- topic/p ">Mithilfe einer SQLConnection-Instanz können Ereignisbenachrichtigungen auf Datenbankebene empfangen und Konfigurationssteuerungen aller Aspekte einer Datenbank, einschließlich Seitengröße im Cache, Verfahrensstornierung und Optionen zur Anweisungsausführung, vorgenommen werden.</p></li></ul>
 
 <p class="- topic/p ">Eine <codeph class="+ topic/ph pr-d/codeph ">SQLConnection</codeph>-Instanz wird entweder im asynchronen oder im synchronen Modus ausgeführt. Für eine Ausführung im synchronen Modus verbinden Sie die „SQLConnection“-Instanz mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> mit der Hauptdatenbank. Für eine Ausführung im asynchronen Modus verbinden Sie die „SQLConnection“-Instanz mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> mit der Hauptdatenbank. </p>
 
 <p class="- topic/p ">Im asynchronen Modus wird mithilfe von Ereignis-Listenern oder einer Responder-Instanz bestimmt, wann ein Vorgang erfolgreich abgeschlossen wird oder fehlschlägt. Die Vorgänge werden im Hintergrund ausgeführt und nicht im Hauptanwendungs-Thread, d. h. die Anwendung wird weiterhin ausgeführt und reagiert auch während der Ausführung der Datenbankvorgänge auf Benutzereingriffe. Jede asynchrone SQLConnection-Instanz führt SQL-Anweisungen in ihrem eigenen Thread aus.</p>
 
 <p class="- topic/p ">Im asynchronen Modus starten Sie einen bestimmten Vorgang durch ein Aufrufen der entsprechenden Methode. Um den Abschluss (oder das Fehlschlagen) des Vorgangs festzustellen, registrieren Sie einen Listener für das entsprechende Ereignis. Zu jedem Vorgang gibt es ein zugeordnetes Ereignis, das beim erfolgreichen Abschluss des Vorgangs ausgelöst wird. Wenn beispielsweise der Aufruf einer <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>-Methode erfolgreich abgeschlossen wird (wenn die Datenbankverbindung hergestellt wird), wird das Ereignis <codeph class="+ topic/ph pr-d/codeph ">open</codeph> ausgelöst. Beim Fehlschlagen eines Vorgangs wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst. Die „SQLError“-Instanz in der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">error</codeph> des „SQLErrorEvent“-Objekts enthält Informationen über den jeweiligen Fehler, einschließlich des versuchten Vorgangs und des Grunds für das Fehlschlagen.</p>
 
 <p class="- topic/p ">Im synchronen Modus brauchen Sie keine Ereignis-Listener zu registrieren, um den Abschluss oder das Fehlschlagen eines Vorgangs zu bestimmen. Zur Identifizierung der Fehler schließen Sie die Anweisungen, die Fehler auslösen, in einen <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph>-Block ein. Da synchrone Vorgänge im Hauptausführungs-Thread ausgeführt werden, werden alle Anwendungsfunktionen (einschließlich Aktualisierung des Bildschirms und Zulassen von Maus- und Tastaturinteraktion) angehalten, während der Datenbankvorgang ausgeführt wird. Bei längerfristigen Vorgängen kann dies eine spürbare Pause der Anwendung verursachen.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link><link href="flash.events.xml#SQLEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLEvent</linktext></link><link href="flash.events.xml#SQLErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLErrorEvent</linktext></link><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_en" class="- topic/link "><linktext class="- topic/linktext ">Kurzanleitung: Asynchrones Arbeiten mit einer lokalen SQL-Datenbank (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">Kurzanleitung: Asynchrones Arbeiten mit einer lokalen SQL-Datenbank (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">Kurzanleitung: Asynchrones Arbeiten mit einer lokalen SQL-Datenbank (HTML)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_en" class="- topic/link "><linktext class="- topic/linktext ">Kurzanleitung: Synchrones Arbeiten mit einer lokalen SQL-Datenbank (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">Kurzanleitung: Synchrones Arbeiten mit einer lokalen SQL-Datenbank (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">Kurzanleitung: Synchrones Arbeiten mit einer lokalen SQL-Datenbank (HTML)</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn sich in einer der verbundenen Datenbanken in einer Tabelle Daten aufgrund eines SQL „UPDATE“-Befehls ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn sich in einer der verbundenen Datenbanken in einer Tabelle Daten aufgrund eines SQL <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>-Befehls ändern. Bei dieser Datenänderung kann es sich um ein direktes Ergebnis der Ausführung einer <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>-Anweisung durch eine SQLStatement-Instanz handeln. Es kann sich aber auch um ein indirektes Ergebnis handeln, wenn ein Auslöser auf eine Anweisungsausführung reagiert hat.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SET_SAVEPOINT_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer setSavepoint()-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SET_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird abgesetzt, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SCHEMA_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „loadSchema()“-Methode erfolgreich ausgeführt wurde und die Schemaergebnisse bereit sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SCHEMA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>-Methode erfolgreich ausgeführt wurde und die Schemaergebnisse bereit sind.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Wird abgesetzt, wenn der Vorgang einer rollbackToSavepoint()-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird abgesetzt, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „rollback()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.RELEASE_SAVEPOINT_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Wird abgesetzt, wenn der Vorgang einer releaseSavepoint()-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RELEASE_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird abgesetzt, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.REENCRYPT_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer reencrypt()-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.REENCRYPT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/reencrypt()" class="- topic/link "><linktext class="- topic/linktext ">reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „openAsync()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.INSERT_insert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">insert</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn sich in einer der verbundenen Datenbanken in einer Tabelle Daten aufgrund eines SQL INSERT-Befehls ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.INSERT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn sich in einer der verbundenen Datenbanken in einer Tabelle Daten aufgrund eines SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Befehls ändern. Bei dieser Datenänderung kann es sich um ein direktes Ergebnis der Ausführung einer <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung durch eine SQLStatement-Instanz handeln, oder ein indirektes Ergebnis, wenn ein Auslöser auf eine Anweisungsausführung reagiert hat.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn ein asynchroner Vorgang des „SQLConnection“-Objekts einen Fehler ergibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn ein asynchroner Vorgang des „SQLConnection“-Objekts einen Fehler ergibt. Die als Ereignisobjekt ausgelöste „SQLErrorEvent“-Instanz verfügt über eine <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Eigenschaft und darin sind Informationen zu dem versuchten Vorgang und dem Grund für das Fehlschlagen enthalten.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DETACH_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „detach()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DETACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.DELETE_delete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">delete</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn sich in einer der verbundenen Datenbanken in einer Tabelle Daten aufgrund eines SQL „DELETE“-Befehls ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.DELETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn sich in einer der verbundenen Datenbanken in einer Tabelle Daten aufgrund eines SQL <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Befehls ändern. Bei dieser Datenänderung kann es sich um ein direktes Ergebnis der Ausführung einer <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Anweisung durch eine SQLStatement-Instanz handeln. Es kann sich aber auch um ein indirektes Ergebnis handeln, wenn ein Auslöser auf eine Anweisungsausführung reagiert hat.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DEANALYZE_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „deanalyze()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DEANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMMIT_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „commit()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMMIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „close()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMPACT_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „compact()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMPACT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/compact()" class="- topic/link "><linktext class="- topic/linktext ">compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „cancel()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/cancel()" class="- topic/link "><linktext class="- topic/linktext ">cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.BEGIN_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „begin()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.BEGIN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ATTACH_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn der Vorgang einer „attach()“-Methode erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ATTACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn der Vorgang einer <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>-Methode erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ANALYZE_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn ein „analyze()“-Vorgang erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn ein <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>-Vorgang erfolgreich ausgeführt wurde.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLConnection:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLConnection“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der Konstruktor aus einer Sandbox außerhalb der Hauptanwendungs-Sandbox aufgerufen wird. 
      
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLConnection“-Instanz.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLConnection:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	Registriert ein Ereignis-Listener-Objekt bei einem EventDispatcher-Objekt, sodass der Listener über ein Ereignis benachrichtigt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Typ des Ereignisses.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Listener-Funktion, die das Ereignis verarbeitet. Diese Funktion muss ein Ereignisobjekt als einzigen Parameter akzeptieren und darf keinen Wert zurückgeben<ph class="- topic/ph ">, wie das nachfolgende Beispiel zeigt:</ph>
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">Der Name der Funktion ist beliebig.</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Bestimmt, ob der Listener in der Erfassungsphase oder in der Ziel- und Bubbling-Phase arbeitet. Ist <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt, so verarbeitet der Listener das Ereignis nur während der Erfassungsphase und nicht während der Ziel- oder Bubbling-Phase. Hat <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> hingegen den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, verarbeitet der Listener das Ereignis nur während der Ziel- oder Bubbling-Phase. Um auf das Ereignis in allen drei Phasen zu warten, rufen Sie <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> zweimal auf; einmal ist <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt, und beim zweiten Mal hat <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Prioritätsstufe des Ereignis-Listeners. Die Priorität wird durch eine vorzeichenbehaftete 32-Bit-Ganzzahl zugewiesen. Je höher die Zahl, desto höher die Priorität. Alle Listener mit der Priorität <i class="+ topic/ph hi-d/i ">n</i> werden vor Listenern mit der Priorität <i class="+ topic/ph hi-d/i ">n</i> -1 verarbeitet. Wenn zwei oder mehr Listener die gleiche Priorität aufweisen, werden sie in der Reihenfolge verarbeitet, in der sie hinzugefügt wurden. Die Standardpriorität ist 0.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Bestimmt, ob der Verweis auf den Listener stark oder schwach ist. Ein starker Verweis (der Standard) verhindert, dass der Listener von einem Garbage Collector entfernt wird. Ein schwacher Verweis hingegen nicht. <p class="- topic/p ">Funktionen von Mitgliedern auf Klassenebene werden nicht vom Garbagekollektor entfernt. Daher können Sie <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> für Mitgliedsfunktionen auf Klassenebene auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, ohne dass sie vom Garbagekollektor entfernt werden. Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen bei einem Listener, der eine verschachtelte innere Funktion ist, wird die Funktion vom Garbagekollektor entfernt. Indem Sie Verweise auf die innere Funktion erstellen (d. h sie in einer anderen Variable speichern), umgehen Sie die Garbage Collection, sodass die Funktion permanent gespeichert bleibt.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	Registriert ein Ereignis-Listener-Objekt bei einem EventDispatcher-Objekt, sodass der Listener über ein Ereignis benachrichtigt wird. <ph class="- topic/ph ">Sie können Ereignis-Listener bei allen Knoten in der Anzeigeliste für eine bestimmte Art von Ereignis, Phase oder Priorität registrieren.</ph>
	
	
	
	<p class="- topic/p ">Nachdem Sie einen Ereignis-Listener erfolgreich registriert haben, können Sie seine Priorität nicht durch weitere Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> ändern. Um die Priorität eines Listeners zu ändern, müssen Sie zunächst <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph> aufrufen. Anschließend können Sie den Listener mit der neuen Prioritätsstufe erneut aufrufen. </p>
	
	<p class="- topic/p ">Nach der Registrierung des Listeners haben nachfolgende Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> mit einem anderen <codeph class="+ topic/ph pr-d/codeph ">type</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph>-Wert eine separate Listener-Registrierung zur Folge. <ph class="- topic/ph ">Wenn Sie beispielsweise zuerst einen Listener registrieren, für den <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt ist, wird dieser nur während der Aufnahmephase aktiv sein. Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> für dasselbe Listener-Objekt erneut aufrufen, diesmal aber <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">false</codeph> gesetzt ist, werden zwei separate Listener angelegt: einer, der während der Aufnahmephase aktiv ist und ein zweiter, der während der Ziel- und Bubbling-Phase aktiv ist.</ph>
	</p>
	
	<p class="- topic/p ">Sie können einen Ereignis-Listener nicht nur für die Ziel- oder Bubbling-Phase registrieren. Die beiden Phasen hängen während der Registrierung immer zusammen, da Bubbling nur für übergeordnete Elemente des Zielknotens gilt.</p>
	
	<p class="- topic/p ">Wenn Sie einen Ereignis-Listener nicht mehr brauchen, entfernen sie ihn, indem Sie <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> aufrufen. Andernfalls könnte es zu Speicherproblemen kommen. Ereignis-Listener werden nicht automatisch aus dem Speicher entfernt, da der Garbage Collector den Listener nicht entfernt, solange das auslösende Objekt vorhanden ist (sofern der <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph>-Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt ist).</p>
		
	<p class="- topic/p ">Beim Kopieren einer EventDispatcher-Instanz werden zugewiesene Ereignis-Listener nicht kopiert. (Wenn ein neu angelegter Knoten einen Ereignis-Listener benötigt, müssen Sie den Listener nach dem Erstellen des Knotens zuweisen.) Wenn Sie jedoch eine EventDispatcher-Instanz verschieben, werden zugewiesene Ereignis-Listener ebenfalls verschoben.</p>
	
	
	<p class="- topic/p ">Wenn der Ereignis-Listener bei einem Knoten registriert wird, während mit diesem Knoten ein Ereignis durchgeführt wird, so wird der Ereignis-Listener während der aktuellen Phase nicht ausgelöst, kann aber während einer späteren Phase im Ereignisablauf ausgelöst werden, etwa während der Bubbling-Phase.</p>
	
	<p class="- topic/p ">Wird ein Ereignis-Listener von einem Knoten entfernt, während mit dem Knoten ein Ereignis durchgeführt wird, so wird er von den aktuellen Aktionen immer noch ausgelöst. Nachdem er entfernt worden ist, wird der Ereignis-Listener nicht wieder aufgerufen (es sei denn er wird für spätere Verarbeitungsvorgänge erneut aufgerufen). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
     Sammelt statistische Daten über Datenbankindizes und speichert sie in der Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird und die „SQLConnection“-Instanz ist an keine Datenbank angeschlossen, hat die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">resourceName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Datenbank oder Tabelle, deren Indizes analysiert werden. Wenn es sich bei der angegebenen Ressource um eine Tabelle handelt, deren Name nur einmal in allen verknüpften Datenbanken vorkommt, brauchen Sie nur den Tabellennamen anzugeben. Sie können einen Tabellennamen jedoch auch als <codeph class="+ topic/ph pr-d/codeph ">[datenbankname].[tabellenname]</codeph> angeben, um bei nicht eindeutigen Tabellennamen Missverständnisse zu vermeiden. Weist der Parameter <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (Standard) auf, werden alle Indizes in allen verknüpften Datenbanken analysiert.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">analyze</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Sammelt statistische Daten über Datenbankindizes und speichert sie in der Datenbank. Diese Statistiken können dann vom Abfrageoptimierer verwendet werden (der Teil der Datenbank-Engine, der die effizienteste Ausführungsweise für jede Anweisung bestimmt). Aufgrund dieser Statistiken kann der Abfrageoptimierer eine bessere Entscheidung treffen, welche Indexpositionen bei der Ausführung einer bestimmten Abfrage angewendet werden sollen.
	 
	 <p class="- topic/p ">Wenn für eine Datenbank Indexpositionen definiert wurden, aber die Methode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> wurde nicht aufgerufen, werden zur Laufzeit Anweisungen mithilfe dieser Indexpositionen ausgeführt. Ohne die zusätzlichen statistischen Daten, die durch die <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>-Methode generiert werden, wird zur Laufzeit möglicherweise nicht die effizienteste Indexposition für eine bestimmte Abfrage ausgewählt.</p>
	 
	 <p class="- topic/p ">Ändern sich die Daten einer Tabelle (aufgrund einer <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Anweisung), werden auch die dieser Tabelle zugeordneten Indizes geändert. Die durch die Methode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> erzeugten statistischen Informationen werden dagegen nicht automatisch aktualisiert. Daher ist es im Allgemeinen empfehlenswert, die <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>-Methode nach einer größeren Anzahl von Datenänderungen erneut aufzurufen. Welcher Vorteil aus einer erneuten Ausführung von <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> gezogen werden kann, hängt jedoch von mehreren Faktoren ab: der Anzahl der für eine Tabelle definierten Indizes, dem Verhältnis zwischen der Anzahl der geänderten Zeilen und der Gesamtzahl von Zeilen in der Tabelle, wie stark die Abweichung in den indizierten Daten der Tabelle ist und wie stark sich die Daten vor und nach der Änderung unterscheiden.</p>
     
     <p class="- topic/p ">Mit dem <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph>-Parameter geben Sie an, ob der Vorgang für die Indizes aller verknüpften Datenbanken, einer bestimmten Datenbank oder einer bestimmten Tabelle ausgeführt werden soll.</p>
     
     <p class="- topic/p ">Durch jeden Aufruf dieser Methode werden die zuvor erstellten statistischen Daten gelöscht und für die im Parameter <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> angegebene Datenbank oder Tabelle neu erstellt (oder alle Tabellen in allen verbundenen Datenbanken, wenn <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) aufweist. Diese Methode kann jederzeit aufgerufen werden, während eine Verbindung zur Datenbank besteht. Der <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>-Vorgang und die daraus resultierenden statistischen Daten sind nicht in einer Transaktion enthalten. Es empfiehlt sich jedoch nicht, <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> aufzurufen, wenn in der Datenbank eine Transaktion ausgeführt wird (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>aufweist). Daten, ein Tabellenschema oder Indexänderungen, die zwar in der Transaktion ausgeführt aber noch nicht angewendet wurden, werden bei einem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> nicht erfasst, d. h. die aus dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> resultierenden Daten sind veraltet, sobald die Transaktion angewendet wird.</p>
     
     <p class="- topic/p ">Sie können die mit der Methode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> erstellten statistischen Daten mit der Methode <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> entfernen.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:analyze_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:analyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
     Fügt der „SQLConnection“-Instanz unter dem angegenenen Namen eine neue Datenbank hinzu.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Paramenter ein leerer String (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) oder <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn es sich bei dem für den Parameter <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> angegebenen Wert nicht um eine flash.filesystem.File-Instanz handelt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn das <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Argument nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist und seine <codeph class="+ topic/ph pr-d/codeph ">length</codeph> nicht 16 Byte beträgt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der <codeph class="+ topic/ph pr-d/codeph ">reference</codeph>-Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> und das <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Argument nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft hat den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>), oder wenn aktuell eine Transaktion geöffnet ist (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft hat den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name, mit dem die neu verbundene Datenbank bezeichnet wird. Mit diesem Namen können Sie in SQL-Anweisungen ausdrücklich darauf hinweisen, dass eine Tabelle zu einer bestimmten Datenbank gehört, wenn Sie den Namen im Format <codeph class="+ topic/ph pr-d/codeph ">[datenbankname].[tabellenname]</codeph> angeben. Die Namen „main“ und „temp“ sind reserviert und sind nicht verfügbar.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Verweis auf die zu verknüpfende Datenbankdatei (eine „flash.filesystem.File“-Instanz). Wenn auf eine nicht existierende Datei verwiesen wird, wird entweder eine neue Datenbankdatei erstellt oder ein Fehler ausgelöst. Das hängt von dem Wert ab, der für den Parameter <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> im Aufruf von <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> angegeben wurde, mit dem die Verbindung zur Hauptdatenbank hergestellt wurde.
	 
     <p class="- topic/p ">Weist der Parameter den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> auf, wird eine Datenbank im Speicher erstellt und verknüpft.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">attach</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Schlüssel für die Verschlüsselung der Datenbankdatei. Wenn durch das Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> eine Datenbank erstellt wird, wird diese mithilfe des festgelegten Schlüssels verschlüsselt. Wenn durch das Aufrufen eine bestehende verschlüsselte Datenbank verknüpft wird, muss der Wert dem Schlüssel der Datenbank entsprechen; andernfalls tritt ein Fehler auf. Wenn die zu verknüpfende Datenbank nicht verschlüsselt ist oder eine unverschlüsselte Datenbank erstellt werden soll, muss der Wert der Standardwert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> sein.
	 
	 <p class="- topic/p ">Ein gültiger Verschlüsselungsschlüssel hat eine Länge von 16 Byte. Eine im Speicher abgelegte Datenbank kann nicht verschlüsselt werden. Deshalb muss dieser Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> sein, wenn der <codeph class="+ topic/ph pr-d/codeph ">reference</codeph>-Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist.</p>
	 
	 <p class="- topic/p ">Entspricht beim Verknüpfen einer verschlüsselten Datenbank der Verschlüsselungsschlüssel nicht jenem der Datenbank, so tritt ein Ausnahmefehler auf. Im synchronen Ausführungsmodus wird ein SQLError-Ausnahmefehler ausgegeben. Im asynchronen Ausführungsmodus wird ein SQLErrorEvent ausgelöst, wobei die <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Eigenschaft des Ereignisobjekts eine SQLError-Instanz enthält. In beiden Fällen lautet die <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph>-Eigenschaft des SQLError-Objekts „3138“ (Geöffnete Datei ist keine Datenbankdatei).</p>
	 
	 <p class="- topic/p ">Der <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Parameter ist ab AIR 1.5 verfügbar.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Fügt der „SQLConnection“-Instanz unter dem angegenenen Namen eine neue Datenbank hinzu. Nachdem eine Datenbank verknüpft wurde, können Sie sie in SQL-Anweisungen verwenden, die an dieser „SQLConnection“-Instanz ausgeführt werden.
     
     <p class="- topic/p ">Wenn bereits eine Datenbank mit dem angegebenen Namen verknüpft wurde, wird durch das Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> ein Fehler ausgelöst. Sie können dieselbe Datenbank jedoch mehrfach mithilfe von eindeutigen Namen verknüpfen. Mit einer „SQLConnection“-Instanz können bis zu zehn Datenbanken verknüpft werden.</p>
     
     <p class="- topic/p ">Jede SQL-Anweisung kann auf einer verknüpften Datenbank ausgeführt werden, und zwar mithilfe von <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>, das auf der Hauptdatenbank ausgeführt werden kann (die Datenbank, die mithilfe von <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> verknüpft wurde). Eine SQL-Anweisung kann auf Tabellen in allen Datenbanken zugreifen, die mit der der Anweisung zugeordneten „SQLConnection“-Instanz verknüpft sind, einschließlich dem Zugreifen auf Tabellen in mehreren Datenbanken von einer Anweisung aus. Wenn zur Laufzeit Tabellennamen in einer Anweisung aufgelöst werden, werden die Datenbanken der „SQLConnection“-Instanz in der Reihenfolge ihrer Verknüpfung durchsucht, und zwar beginnend mit der Datenbank, die mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> verknüpft wurde. Geben Sie in der Anweisung den Datenbanknamen an (wie in der Methode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> im Parameter <codeph class="+ topic/ph pr-d/codeph ">name</codeph> angegeben), um einen Tabellennamen explizit zu qualifizieren.</p>
     
     <p class="- topic/p ">Eine mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> verknüpfte Datenbank können Sie mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph> entfernen. Durch das Schließen der SQLConnection-Instanz (durch Aufrufen der Methode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>), werden die Verknüpfungen zu allen verknüpften Datenbanken aufgehoben.</p>
     
     <p class="- topic/p ">Für die verknüpfte Datenbank wird der gleiche Ausführungsmodus (synchron oder asynchron) wie für die Hauptdatenbank verwendet. Ausschlaggebend ist dabei, ob die Hauptdatenbank mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> verknüpft wurde.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:attach_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:attach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
     Startet eine Transaktion, in der alle SQL-Anweisungen, die für die Datenbanken der Verbindung ausgeführt wurden, zusammengefasst sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird und die „SQLConnection“-Instanz ist an keine Datenbank angeschlossen, hat die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn es sich bei der angegebenen Option um keine der SQLTransactionLockType-Konstanten handelt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">option</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die Sperrstrategie an, die von der Transaktion verwendet wird. Hierbei kann es sich um eine Konstante handeln, die in der „SQLTransactionLockType“-Klasse definiert wurde:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph> gibt an, dass eine Sperre erst beim ersten Lese- oder Schreibvorgang erlangt wird.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.EXCLUSIVE</codeph> gibt an, dass eine Sperre so schnell wie möglich erlangt wird, und keine andere „SQLConnection“-Instanz in der Datenbank lesen oder schreiben kann.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.IMMEDIATE</codeph> gibt an, dass eine Sperre so schnell wie möglich erlangt wird, und andere „SQLConnection“-Instanzen zwar in der Datenbank lesen, aber nicht schreiben können.</li></ul>
	 <p class="- topic/p ">Der Standardwert (<codeph class="+ topic/ph pr-d/codeph ">null</codeph>) entspricht <codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">begin</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Startet eine Transaktion, in der alle SQL-Anweisungen, die für die Datenbanken der Verbindung ausgeführt wurden, zusammengefasst sind.
     
     <p class="- topic/p ">Standardmäßig wird jede SQL-Anweisung in einer separaten Transaktion ausgeführt, und die Transaktion ist beendet, wenn die Ausführung der Anweisung erfolgreich beendet wird oder fehlschlägt. Mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> wird eine neue, manuelle Transaktion erstellt. Ab diesem Zeitpunkt erfolgt die Ausführung aller SQL-Anweisungen an der „SQLConnection“-Instanz innerhalb der Transaktion, und alle durch die Anweisung vorgenommenen Aktionen und Änderungen können als eine Gruppe übergeben (dauerhaft gemacht) oder rückgängig gemacht werden.</p>
     
	 <p class="- topic/p ">Beenden Sie eine Transaktion durch Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>-Methode, abhängig davon, ob die durch die Anweisungen der Transaktion vorgenommenen Änderungen dauerhaft gemacht oder verworfen werden sollen.</p>
	 
     <p class="- topic/p ">Verschachtelte Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> werden ignoriert. Sie können Speicherpunkte erstellen, die eine Art Lesezeichen innerhalb einer Transaktion sind, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>-Methode aufrufen. SQL-Anweisungen lassen sich dann anwenden oder zurücknehmen, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>-Methode oder die <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>-Methode aufrufen. Wenn eine Transaktion jedoch durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> gestartet wurde, werden Änderungen erst dann dauerhaft von der Datenbank übernommen, wenn die <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode aufgerufen wird.</p>
     
	 <p class="- topic/p ">Wird die Datenbankverbindung geschlossen, während eine Transaktion geöffnet ist, macht AIR die Transaktion automatisch rückgängig. (Hinweis: Bei AIR 1.1 und niedrigeren Versionen werden offene Transaktionen beim Schließen einer Verbindung automatisch festgeschrieben.)</p>
     
     <p class="- topic/p ">Eine Transaktion ist nicht auf Anweisungsausführungen in einer Datenbank beschränkt; sondern es können auch Anweisungen an verschiedenen verknüpften Datenbanken ausgeführt werden.</p>
     
     </apiDesc><example conref="examples\SQLConnection.transactions.1.as" class="- topic/example "> Im folgenden Beispiel wird das Ausführen mehrerer SWL-<codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisungen innerhalb einer Transaktion gezeigt. Zunächst wird der Tabelle „employees“ (Mitarbeiter) eine Zeile hinzugefügt. Als Nächstes wird der primäre Schlüssel der neu eingefügten Zeile abgerufen und verwendet, um der verknüpften Tabelle „phoneNumbers“ eine Zeile hinzuzufügen.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiInsertTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var insertEmployee:SQLStatement;
        private var insertPhoneNumber:SQLStatement;
        
        public function MultiInsertTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // create and execute the first SQL statement:
            // insert an employee record
            insertEmployee = new SQLStatement();
            insertEmployee.sqlConnection = conn;
            insertEmployee.text = 
                "INSERT INTO employees (lastName, firstName, email) " + 
                "VALUES (:lastName, :firstName, :email, :birthday)";
            insertEmployee.parameters[":lastName"] = "Smith";
            insertEmployee.parameters[":firstName"] = "Bob";
            insertEmployee.parameters[":email"] = "bsmith@example.com";
            insertEmployee.parameters[":birthday"] = new Date(1971, 8, 12);
            
            insertEmployee.addEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertEmployee.execute();
        }
        
        // Called after the employee record is inserted
        private function insertEmployeeHandler(event:SQLEvent):void
        {
            insertEmployee.removeEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // Get the employee id of the newly created employee row
            var result:SQLResult = insertEmployee.getResult();
            var employeeId:Number = result.lastInsertRowID;
            
            // Add a phone number to the related phoneNumbers table
            insertPhoneNumber = new SQLStatement();
            insertPhoneNumber.sqlConnection = conn;
            insertPhoneNumber.text =
                "INSERT INTO phoneNumbers (employeeId, type, number) " +
                "VALUES (:employeeId, :type, :number)";
            insertPhoneNumber.parameters[":employeeId"] = employeeId;
            insertPhoneNumber.parameters[":type"] = "Home";
            insertPhoneNumber.parameters[":number"] = "(555) 555-1234";
            
            insertPhoneNumber.addEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertPhoneNumber.execute();
        }
        
        // Called after the phone number record is inserted
        private function insertPhoneNumberHandler(event:SQLEvent):void
        {
            insertPhoneNumber.removeEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example><example conref="examples\SQLConnection.transactions.2.as" class="- topic/example "> Im folgenden Beispiel wird das Ausführen mehrerer SWL-<codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Anweisungen innerhalb einer Transaktion gezeigt. Die Transaktion wird verwendet, um einen Mitarbeiterdatensatz zu löschen. Zunächst werden die entsprechenden Zeilen in der Spalte „phoneNumbers“ gelöscht. Als Nächstes wird die Zeile mit dem Mitarbeiterdatensatz aus der Tabelle „employees“ gelöscht.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiDeleteTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var deleteEmployee:SQLStatement;
        private var deletePhoneNumbers:SQLStatement;
        
        private var employeeIdToDelete:Number = 25;
        
        public function MultiDeleteTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // Create and execute the first SQL statement:
            // Delete an employee's phone number records
            deletePhoneNumbers = new SQLStatement();
            deletePhoneNumbers.sqlConnection = conn;
            deletePhoneNumbers.text =
                "DELETE FROM phoneNumbers " +
                "WHERE employeeId = :employeeId";
            deletePhoneNumbers.parameters[":employeeId"] = employeeIdToDelete;
            
            deletePhoneNumbers.addEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deletePhoneNumbers.execute();
        }
        
        // Called after the phone number records are deleted
        private function deletePhoneNumbersHandler(event:SQLEvent):void
        {
            deletePhoneNumbers.removeEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee = new SQLStatement();
            deleteEmployee.sqlConnection = conn;
            deleteEmployee.text = 
                "DELETE FROM employees " + 
                "WHERE employeeId = :employeeId";
            deleteEmployee.parameters[":employeeId"] = employeeIdToDelete;
            
            deleteEmployee.addEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee.execute();
        }
        
        // Called after the employee record is deleted
        private function deleteEmployeeHandler(event:SQLEvent):void
        {
            deleteEmployee.removeEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLTransactionLockType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTransactionLockType</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:begin_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:begin_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     Bricht alle SQL-Anweisungen ab, die aktuell an mit der „SQLConnection“-Instanz verbundenen Datenbanken ausgeführt werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird und die „SQLConnection“-Instanz ist an keine Datenbank angeschlossen, hat die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Bricht alle SQL-Anweisungen ab, die aktuell an mit der „SQLConnection“-Instanz verbundenen Datenbanken ausgeführt werden. Mithilfe dieser Methode können Sie langfristige oder außer Kontrolle geratene Abfragen stoppen.
     
     <p class="- topic/p ">Werden beim Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph>-Methode gerade Anweisungen ausgeführt, werden diese Vorgänge abgebrochen und alle unvollständigen Aktualisierungen oder Transaktionen werden rückgängig gemacht. Wenn aktuell keine Anweisungen ausgeführt werden, geschieht mit Ausnahme der Rückgängigmachung einer offenen Transaktion nichts.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:cancel_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
	 
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:cancel_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Schließt die aktuelle Datenbankverbindung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">close</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Schließt die aktuelle Datenbankverbindung. Die Verbindung zu allen verknüpften Datenbanken werden ebenfalls unterbrochen.
     
     <p class="- topic/p ">Wenn es beim Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> eine offene Transaktion gibt, wird die Transaktion zurückgenommen. Wenn eine SQLConnection-Instanz durch einen Garbagekollektor entfernt wird, wird zur Laufzeit automatisch <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> aufgerufen, auch wenn eine AIR-Anwendung geschlossen wird, während eine SQLConnection noch mit einer Datenbank verbunden ist.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:close_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
     Übergibt eine vorhandene Transaktion, wodurch alle durch die Transaktionsanweisungen ausgeführten Aktionen dauerhaft auf die Datenbank angewendet werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Methode aufgerufen wird, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn aktuell keine Transaktion offen ist (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">commit</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Übergibt eine vorhandene Transaktion, wodurch alle durch die Transaktionsanweisungen ausgeführten Aktionen dauerhaft auf die Datenbank angewendet werden.
     
	 <p class="- topic/p ">Dazwischenliegende Speicherpunkte, die als eine Art Lesezeichen innerhalb einer Transaktion fungieren, lassen sich durch einen Aufruf der <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>-Methode erstellen. Durch das Verwenden von Speicherpunkten können Sie Teile einer Transaktion übernehmen, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>-Methode aufrufen, oder Teile einer Transaktion zurücknehmen, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>-Methode aufrufen. Wenn eine Transaktion jedoch mit der <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>-Methode geöffnet wurde, werden Änderungen nicht dauerhaft in der Datenbank gespeichert, bis die gesamte Transaktion durch einen Aufruf der <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode übernommen werden.</p>
	 
	 <p class="- topic/p ">Für eine Transaktion, die Speicherpunkte verwendet, werden alle Änderungen, die mithilfe der <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>-Methode zurückgenommen werden, nicht übernommen, wenn die gesamte Transaktion übernommen wird. Anweisungen, die mit <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> übermittelt wurden oder deren Speicherpunkte nicht übermittelt oder zurückgenommen wurden, werden von der Datenbank übernommen.</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:commit_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:commit_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang mit einem Fehlschlag abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang mit einem Fehlschlag abgeschlossen wurde.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
     Gewinnt sämtlichen unbenutzten Platz in der Datenbank zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Methode aufgerufen wird, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn aktuell eine Transaktion ausgeführt wird (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">compact</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gewinnt sämtlichen unbenutzten Platz in der Datenbank zurück. Wenn ein Objekt (Tabelle, Indexposition oder Auslöser) aus der Datenbank entfernt wird, bleibt ein leerer Platz zurück. Dadurch wird die Datenbank unnötig größer, aber andererseits können <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Vorgänge schneller ausgeführt werden. Allmählich wird die Struktur der Datenbankdatei durch <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Vorgänge fragmentiert, wodurch der Zugriff auf den Datenbankinhalt verlangsamt wird. Mithilfe dieser Methode wird die Datenbankdatei verdichtet, leere Seiten werden eliminiert, Tabellendaten werden ausgerichtet, sodass sie zusammenhängend sind und die Struktur der Datenbankdatei wird bereinigt.
     
     <p class="- topic/p ">An einer verknüpften Datenbankdatei kann der Vorgang <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> nicht ausgeführt werden; er kann nur an der ursprünglichen oder Hauptdatenbankdatei, die mithilfe der „SQLConnection“-Instanz geöffnet wurde, ausgeführt werden. Wenn eine Transaktion aktiv ist, schlägt dieser Vorgang fehl und hat keine Auswirkung auf eine Datenbank im Speicher.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:compact_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:compact_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
     Entfernt alle statistischen Daten, die durch einen Aufruf der Methode „analyze()“ erstellt wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird und die „SQLConnection“-Instanz ist an keine Datenbank angeschlossen, hat die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">deanalyze</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Entfernt alle statistischen Daten, die durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> erstellt wurden.
	 
	 <p class="- topic/p ">Da die durch die Methode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> erzeugten statistischen Daten in der Datenbank Platz einnehmen, können Sie durch Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> Platz zurückgewinnen, der z. B. nach dem Entfernen von Indizes oder Tabellen frei geworden ist.</p>
     
     <p class="- topic/p ">Dieser Vorgang ist in einer aktiven Transaktion nicht eingeschlossen.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:deanalyze_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:deanalyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
     Unterbricht die Verknüpfung einer zusätzlichen Datenbank, die zuvor mithilfe der Methode „attach()“ mit der „SQLConnection“-Instanz verknüpft wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn das <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Argument den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist oder einen leeren String (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) enthält.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird, während die „SQLConnection“-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn die „SQLConnection“-Instanz eine offene Transaktion aufweist (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Datenbank, deren Verbindung unterbrochen werden soll.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">detach</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Unterbricht die Verknüpfung einer zusätzlichen Datenbank, die zuvor mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> mit der „SQLConnection“-Instanz verknüpft wurde. Sie können eine Datenbank mehrfach unter verschiedenen Namen verknüpfen. Bei der Trennung einer Verbindung bleiben die anderen Verbindungen intakt. Die Verbindung zu einer Datenbank kann nicht unterbrochen werden, wenn eine offene Transaktion vorliegt (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph "> true</codeph> auf).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:detach_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:detach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:getSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     Bietet Zugriff auf das Ergebnis, das sich aus einem Aufruf der Methode „loadSchema()“ ergibt. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLSchemaResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Bietet Zugriff auf das Ergebnis, das sich aus einem Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> ergibt. Mit der Methode <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> werden die ältesten Ergebnisse in der Warteschlange zuerst verarbeitet. Jedes Mal, wenn das Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>-Methode abgeschlossen wird (jedes Mal, wenn im asynchronen Ausführungsmodus das <codeph class="+ topic/ph pr-d/codeph ">schema</codeph>-Ereignis ausgelöst wird), wird der Warteschlange ein neues SQLSchemaResult-Objekt hinzugefügt. Bei jedem Aufrufen der Methode <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> wird das älteste Ergebnis (das Ergebnis, das der Warteschlange als erstes hinzugefügt wurde) zurückgegeben und aus der Warteschlange entfernt. Wenn die Warteschlange keine weiteren Objekte mehr enthält, gibt <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück.
     
     <p class="- topic/p ">Ist die Datenbankverbindung geschlossen, gibt die Methode den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">schema Ereignis</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLConnection:loadSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadSchema</apiName><shortdesc class="- topic/shortdesc ">
     Lädt Schemainformationen von der verbundenen Datenbank oder einer verknüpften Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird und die SQLConnection-Instanz an keine Datenbank angeschlossen ist (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> hat den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der angegebene Wert für das Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> keiner der zulässigen Typen ist.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn im synchronen Ausführungsmodus ein ungültiger Wert für die Parameter „name“ oder „database“ angegeben wird.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt den Typ des zu ladenden Schemas an. Der Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (der Standard) gibt an, dass alle Schemainformationen geladen werden sollen. Durch die Eingabe eines anderes Wertes als <codeph class="+ topic/ph pr-d/codeph ">null</codeph> für diesen Parameter engen Sie den Umfang des resultierenden Schemas ein, potenziell unnötige Informationen werden aus dem Ergebnis entfernt und der Vorgang wird effizienter. Bei dem Wert muss es sich um den Klassennamen einer der folgenden Klassen handeln:
	 <ul class="- topic/ul "><li class="- topic/li ">SQLIndexSchema</li><li class="- topic/li ">SQLTableSchema</li><li class="- topic/li ">SQLTriggerSchema</li><li class="- topic/li ">SQLViewSchema</li></ul>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Zeigt an, welches Ressourcenschema geladen ist. Wie dieser Wert verwendet wird, hängt vom angegebenen <codeph class="+ topic/ph pr-d/codeph ">type</codeph>-Argument ab. In der Regel handelt es sich dabei um den Namen eines Datenbankobjekts, wie etwa einem Tabellen-, Index- oder Ansichtsnamen. Wenn Sie einen Wert angeben, werden nur Schemainformationen für das Datenbankobjekt mit dem angegebenen Namen in die Ergebnisse aufgenommen.
	 
	 <p class="- topic/p ">Ist der angegebene Wert ungültig, wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst (im synchronen Ausführungsmodus wird ein Fehler ausgegeben). Der Wert des Parameters <codeph class="+ topic/ph pr-d/codeph ">type</codeph> ist nur gültig, wenn er dem Typ des genannten Objekts entspricht (siehe Beschreibung der Methode).</p>
	 
	 <p class="- topic/p ">Weist das Argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> auf, dann werden alle Schemata des angegebenen Typs eingeschlossen. Wenn der angegebene Wert ungültig ist, wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">main</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Datenbank, deren Schema geladen wird. Wenn der angegebene Wert ungültig ist, wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">includeColumnSchema</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob das Ergebnis Schemainformationen für die Spalten von Tabellen und Ansichten enthält.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">schema</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Lädt Schemainformationen von der verbundenen Datenbank oder einer verknüpften Datenbank. Das Schema gibt die Struktur der Tabellen, Spalten, Indizes und Auslöser in der Datenbank an.
	 
     <p class="- topic/p ">Der Zugriff auf das geladene Schema erfolgt mithhilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.getSchemaResult()</codeph>.</p>
	 
     <p class="- topic/p ">Im asynchronen Ausführungsmodus wird bei einem erfolgreichen Abschluss des Vorgangs ein <codeph class="+ topic/ph pr-d/codeph ">schema</codeph>-Ereignis ausgelöst. Schlägt der Vorgang fehl, wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.</p>
	 
	 <p class="- topic/p ">Mit der Kombination aus den Werten der Parameter <codeph class="+ topic/ph pr-d/codeph ">type</codeph> und <codeph class="+ topic/ph pr-d/codeph ">name</codeph> bestimmen Sie, welcher Typ von Schemadaten mithilfe der <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>-Methode erzeugt wird, und folglich bestimmen Sie damit auch die Werte der Eigenschaften der erzeugten SQLSchemaResult-Instanz. Die folgende Tabelle gibt die gültigen Paare aus <codeph class="+ topic/ph pr-d/codeph ">type</codeph> und <codeph class="+ topic/ph pr-d/codeph ">name</codeph> sowie die damit erzeugten Schemadaten an:</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry ">Argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph></entry><entry class="- topic/entry ">Ruft Schemadaten ab für: </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">„null“</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">„null“</codeph></entry><entry class="- topic/entry ">alle Objekte in der Datenbank (alle Tabellen, Ansichten, Auslöser und Indizes)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">„null“</codeph></entry><entry class="- topic/entry ">alle Indizes in der Datenbank</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">gültiger Tabellenname</entry><entry class="- topic/entry ">alle in der angegebenen Tabelle definierten Indizes</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">gültiger Indexname</entry><entry class="- topic/entry ">der angegebene Index</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">„null“</codeph></entry><entry class="- topic/entry ">alle Tabellen in der Datenbank</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry ">gültiger Tabellenname</entry><entry class="- topic/entry ">die angegebene Tabelle</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">„null“</codeph></entry><entry class="- topic/entry ">alle Auslöser in der Datenbank</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">gültiger Tabellenname</entry><entry class="- topic/entry ">alle der angegebenen Tabelle zugeordneten Auslöser</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">gültiger Ansichtsname</entry><entry class="- topic/entry ">alle der angegebenen Ansicht zugeordneten Auslöser </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">gültiger Auslösername</entry><entry class="- topic/entry ">der angegebene Auslöser </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">„null“</codeph></entry><entry class="- topic/entry ">alle Ansichten in der Datenbank</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry ">gültiger Ansichtsname</entry><entry class="- topic/entry ">die angegebene Ansicht </entry></row></tbody></tgroup></adobetable>
	 
	 <p class="- topic/p ">Entspricht die Kombination aus <codeph class="+ topic/ph pr-d/codeph ">type</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Argumenten keiner der angegebenen Kombinationen, wird im asynchronen Ausführungsmodus ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis bzw. im synchronen Ausführungsmodus eine Ausnahme ausgelöst. Beispiel: Das Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> weist den Wert <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> und das Argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph> weist als Wert den Name einer Tabelle (nicht den Namen einer Ansicht) auf. Die daraufhin ausgelöste Fehlermeldung gibt an, dass die Datenbank kein Objekt des angegebenen Typs mit dem angegebenen Namen enthält.</p>
	 
	 
	 <p class="- topic/p ">Ist die Datenbank leer (enthält keine Tabellen, Ansichten, Auslöser oder Indizes), tritt beim Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>-Methode ein Fehler auf.</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">getSchemaResult()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">schema Ereignis</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:loadSchema_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:loadSchema_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang mit einem Fehlschlag abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang mit einem Fehlschlag abgeschlossen wurde.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
     Öffnet eine asynchrone Verbindung zu der Datenbankdatei am angegebenen Speicherort im Dateisystem oder erstellt und öffnet eine neue Datenbankdatei an diesem Speicherort oder öffnet eine Datenbank aus dem Arbeitsspeicher.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die „SQLConnection“-Instanz bereits über eine offene Verbindung zu einer Datenbank verfügt (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> weist den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf).
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn es sich bei dem für den Parameter <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> angegebenen Wert nicht um eine flash.filesystem.File-Instanz handelt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn das <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Argument nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist und seine <codeph class="+ topic/ph pr-d/codeph ">length</codeph> nicht 16 Byte beträgt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der <codeph class="+ topic/ph pr-d/codeph ">reference</codeph>-Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> und das <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Argument nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn ein ungültiger <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph>-Parameter angegeben wurde. Dies gilt auch für das Übergeben einer Seitengröße im Modus <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Speicherort der Datenbankdatei, die geöffnet wird. Bei diesem Wert muss es sich um eine „flash.filesystem.File“-Instanz handeln. Lautet der Wert des Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, dann wird eine im Speicher abgelegte Datenbank erstellt und geöffnet.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Zeigt an, wie die Datenbank geöffnet wird. Bei dem Wert kann es sich um eine beliebige Konstante aus der „SQLMode“-Klasse handeln. Der Standardwert lautet <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph>, womit angegeben wird, dass eine Datenbankdatei erstellt wird, sollte am angegebenen Speicherort keine gefunden werden. Wenn <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> hat und die angegebene Datei nicht existiert, wird ein Fehlerereignis ausgelöst.<codeph class="+ topic/ph pr-d/codeph "/> Dieser Parameter wird ignoriert, wenn der Parameter <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn das <codeph class="+ topic/ph pr-d/codeph ">responder</codeph>-Argument den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">open</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob unbenutzter Platz in der Datenbank automatisch zurückgewonnen wird. Dieser Parameter ist nur gültig, wenn eine neue Datenbankdatei erstellt wird oder eine Datenbankdatei, in der keine Tabellen erstellt wurden, geöffnet wird. Der durch entfernte Daten eingenommene Platz verbleibt standardmäßig in der Datenbankdatei und wird bei Bedarf wiederverwendet. Wenn Sie diesen Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, wird die Datenbank veranlasst, automatisch nicht benutzten Platz zurückzugewinnen. Dies kann sich nachteilig auf die Leistung auswirken, da jedes Mal, wenn Daten in die Datenbank geschrieben werden, zusätzliche Verarbeitungszeit erforderlich ist. Außerdem können die Datenbankdaten im Laufe der Zeit fragmentiert werden. Mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> zwingen Sie die Datenbank, jederzeit nicht benutzten Platz in einer Datenbank zurückzugewinnen und die Datenbankdatei zu defragmentieren.
	 
	 <p class="- topic/p ">Dieser Parameter wird ignoriert, wenn der Parameter <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> aufweist.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die Seitengröße (in Byte) der Datenbank an. Dieser Parameter ist nur gültig, wenn eine neue Datenbankdatei erstellt wird oder eine Datenbankdatei, in der keine Tabellen erstellt wurden, geöffnet wird. Der Wert muss eine Zweierpotenz größer oder gleich 512 und kleiner oder gleich 32768 sein. Der Standardwert lautet 1024 Byte. Dieser Wert kann nur vor der Erstellung von Tabellen festgelegt werden. Wurden die Tabellen erstellt und wird dann versucht, diesen Wert zu ändern, tritt ein Fehler auf. 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Schlüssel für die Verschlüsselung der Datenbankdatei. Wenn durch das Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> eine Datenbank erstellt wird, wird diese mithilfe des festgelegten Schlüssels verschlüsselt. Wenn durch das Aufrufen eine verschlüsselte Datenbank geöffnet wird, muss der Wert dem Schlüssel der Datenbank entsprechen; andernfalls tritt ein Fehler auf. Wenn die zu öffnende Datenbank nicht verschlüsselt ist, muss der Wert der Standardwert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> sein; andernfalls tritt ein Fehler auf.
	 
	 <p class="- topic/p ">Ein gültiger Verschlüsselungsschlüssel hat eine Länge von 16 Byte. Eine im Speicher abgelegte Datenbank kann nicht verschlüsselt werden. Deshalb muss dieser Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> sein, wenn der <codeph class="+ topic/ph pr-d/codeph ">reference</codeph>-Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist.</p>
	 
	 <p class="- topic/p ">Entspricht beim Öffnen einer verschlüsselten Datenbank der Verschlüsselungsschlüssel nicht jenem der Datenbank, so wird ein SQLErrorEvent-Ausnahmefehler ausgelöst. Die <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Eigenschaft des Ereignisobjekts enthält eine SQLError-Instanz. Die <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph>-Eigenschaft des SQLError-Objekts lautet „3138“ (Geöffnete Datei ist keine Datenbankdatei)</p>
	 
	 <p class="- topic/p ">Der <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Parameter ist ab AIR 1.5 verfügbar.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Öffnet eine asynchrone Verbindung zu der Datenbankdatei am angegebenen Speicherort im Dateisystem oder erstellt und öffnet eine neue Datenbankdatei an diesem Speicherort oder öffnet eine Datenbank aus dem Arbeitsspeicher. Wenn die Datenbank mithilfe dieser Methode geöffnet wird, werden das Erstellen und Öffnen der Datenbank sowie andere, mithilfe dieser „SQLConnection“-Instanz ausgeführte Vorgänge <i class="+ topic/ph hi-d/i ">asynchron</i> ausgeführt. Dazu gehören auch die Anweisungsausführung und andere Vorgänge, die durch eine dieser „SQLConnection“-Instanz zugewiesene „SQLStatement“-Instanz ausgeführt werden. Um Vorgänge synchron auszuführen, müssen Sie die Datenbankverbindung stattdessen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> öffnen.
     
	 <p class="- topic/p ">Nachdem die Verbindung zu einer Datenbank hergestellt wurde, verwenden Sie eine <xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref>-Instanz, um SQL-Befehle auszuführen. Vorgänge auf Datenbankebene wie das Starten oder Beenden von Transaktionen, das Laden von Schemainformationen und andere Vorgänge werden unter Verwendung der SQLConnection-Instanz ausgeführt.</p>
     
     <p class="- topic/p ">Eine Datenbank, zu der die Verbindung mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> hergestellt wird, erhält automatisch den Datenbanknamen „main“. Mit diesem Namen können Sie Tabellennamen explizit in SQL-Anweisungen qualifizieren, indem Sie sie im Format <codeph class="+ topic/ph pr-d/codeph ">[datenbankname].[tabellenname]</codeph> angeben. </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:openAsync_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:openAsync_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird beim Fehlschlagen des Vorgangs ausgelöst. Nach einem fehlgeschlagenen Vorgang wird die Verbindung immer geschlossen.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird beim Fehlschlagen des Vorgangs ausgelöst.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
     Öffnet eine synchrone Verbindung zu der Datenbankdatei am angegebenen Speicherort im Dateisystem oder erstellt und öffnet eine neue Datenbankdatei an diesem Speicherort oder öffnet eine Datenbank aus dem Arbeitsspeicher.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die „SQLConnection“-Instanz bereits über eine offene Verbindung zu einer Datenbank verfügt (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> weist den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang fehlschlägt. Nach einem fehlgeschlagenen Vorgang wird die Verbindung immer geschlossen.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn es sich bei dem für den Parameter <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> angegebenen Wert nicht um eine flash.filesystem.File-Instanz handelt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn das <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Argument nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist und seine <codeph class="+ topic/ph pr-d/codeph ">length</codeph> nicht 16 Byte beträgt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der <codeph class="+ topic/ph pr-d/codeph ">reference</codeph>-Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> und das <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Argument nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn ein ungültiger <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph>-Parameter angegeben wurde. Dies gilt auch für das Übergeben einer Seitengröße im Modus <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Speicherort der Datenbankdatei, die geöffnet wird. Bei diesem Wert muss es sich um eine „flash.filesystem.File“-Instanz handeln. Lautet der Wert des Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, dann wird eine im Speicher abgelegte Datenbank erstellt und geöffnet.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Zeigt an, wie die Datenbank geöffnet wird. Bei dem Wert kann es sich um eine beliebige Konstante aus der „SQLMode“-Klasse handeln. Der Standardwert lautet <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph>, womit angegeben wird, dass eine Datenbankdatei erstellt wird, sollte am angegebenen Speicherort keine gefunden werden. Wenn <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> hat und die angegebene Datei nicht existiert, tritt ein Fehler auf. Dieser Parameter wird ignoriert, wenn der Parameter <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob unbenutzter Platz in der Datenbank automatisch zurückgewonnen wird. Dieser Parameter ist nur gültig, wenn eine neue Datenbankdatei erstellt wird oder eine Datenbankdatei, in der keine Tabellen erstellt wurden, geöffnet wird. Der durch entfernte Daten eingenommene Platz verbleibt standardmäßig in der Datenbankdatei und wird bei Bedarf wiederverwendet. Wenn Sie diesen Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, wird die Datenbank veranlasst, automatisch nicht benutzten Platz zurückzugewinnen. Dies kann sich nachteilig auf die Leistung auswirken, da jedes Mal, wenn Daten in die Datenbank geschrieben werden, zusätzliche Verarbeitungszeit erforderlich ist. Außerdem können die Datenbankdaten im Laufe der Zeit fragmentiert werden. Sie können jederzeit erzwingen, dass die Datenbank nicht verwendeten Speicherplatz in einer Datenbankdatei freigibt, und die Datenbankdatei mit der <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph>-Methode defragmentieren.
	 
	 <p class="- topic/p ">Dieser Parameter wird ignoriert, wenn der Parameter <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> aufweist.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt die Seitengröße (in Byte) der Datenbank an. Dieser Parameter ist nur gültig, wenn eine neue Datenbankdatei erstellt wird oder eine Datenbankdatei, in der keine Tabellen erstellt wurden, geöffnet wird. Der Wert muss eine Zweierpotenz größer oder gleich 512 und kleiner oder gleich 32768 sein. Der Standardwert lautet 1024 Byte. Dieser Wert kann nur vor der Erstellung von Tabellen festgelegt werden. Wurden die Tabellen erstellt und wird dann versucht, diesen Wert zu ändern, tritt ein Fehler auf. 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Schlüssel für die Verschlüsselung der Datenbankdatei. Wenn durch das Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> eine Datenbank erstellt wird, wird diese mithilfe des festgelegten Schlüssels verschlüsselt. Wenn durch das Aufrufen eine verschlüsselte Datenbank geöffnet wird, muss der Wert dem Schlüssel der Datenbank entsprechen; andernfalls tritt ein Fehler auf. Wenn die zu öffnende Datenbank nicht verschlüsselt ist oder eine unverschlüsselte Datenbank erstellt werden soll, muss der Wert der Standardwert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> sein; andernfalls tritt ein Fehler auf.
	 
	 <p class="- topic/p ">Ein gültiger Verschlüsselungsschlüssel hat eine Länge von 16 Byte. Eine im Speicher abgelegte Datenbank kann nicht verschlüsselt werden. Deshalb muss dieser Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> sein, wenn der <codeph class="+ topic/ph pr-d/codeph ">reference</codeph>-Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist.</p>
	 
	 <p class="- topic/p ">Entspricht beim Öffnen einer verschlüsselten Datenbank der Verschlüsselungsschlüssel nicht jenem der Datenbank, so wird ein SQLError-Ausnahmefehler ausgegeben. In diesem Fall lautet die <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph>-Eigenschaft des SQLError-Objekts „3138“ (Geöffnete Datei ist keine Datenbankdatei).</p>
	 
	 <p class="- topic/p ">Der <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph>-Parameter ist ab AIR 1.5 verfügbar.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Öffnet eine synchrone Verbindung zu der Datenbankdatei am angegebenen Speicherort im Dateisystem oder erstellt und öffnet eine neue Datenbankdatei an diesem Speicherort oder öffnet eine Datenbank aus dem Arbeitsspeicher. Wenn die Datenbank mithilfe dieser Methode geöffnet wird, werden das Erstellen und Öffnen der Datenbank sowie andere, mithilfe dieser „SQLConnection“-Instanz ausgeführte Vorgänge <i class="+ topic/ph hi-d/i ">synchron</i> ausgeführt. Dazu gehören auch die Anweisungsausführung und andere Vorgänge, die durch eine dieser „SQLConnection“-Instanz zugewiesene „SQLStatement“-Instanz ausgeführt werden. Um Vorgänge asynchron auszuführen, müssen Sie die Datenbankverbindung stattdessen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> öffnen.
	 
	 <p class="- topic/p ">Nachdem die Verbindung zu einer Datenbank hergestellt wurde, verwenden Sie eine <xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref>-Instanz, um SQL-Befehle auszuführen. Vorgänge auf Datenbankebene wie das Starten oder Beenden von Transaktionen, das Laden von Schemainformationen und andere Vorgänge werden unter Verwendung der SQLConnection-Instanz ausgeführt.</p>
     
     <p class="- topic/p ">Eine Datenbank, zu der die Verbindung mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> hergestellt wird, erhält automatisch den Datenbanknamen „main“. Mit diesem Namen können Sie Tabellennamen explizit in SQL-Anweisungen qualifizieren, indem Sie sie im Format <codeph class="+ topic/ph pr-d/codeph ">[datenbankname] angeben.[tabellenname]</codeph> angeben. </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:open_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
	 Ändert den Verschlüsselungsschlüssel einer verschlüsselten Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der <codeph class="+ topic/ph pr-d/codeph ">newEncryptionKey</codeph>-Wert nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist und seine <codeph class="+ topic/ph pr-d/codeph ">length</codeph> nicht 16 Byte beträgt
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Verbindung nicht geöffnet ist oder eine Transaktion geöffnet ist.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newEncryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein ByteArray, das den neuen Verschlüsselungsschlüssel für die Datenbank enthält. Ein gültiger Verschlüsselungsschlüssel hat eine Länge von 16 Byte.
	 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn das <codeph class="+ topic/ph pr-d/codeph ">responder</codeph>-Argument den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung das Ereignis <codeph class="+ topic/ph pr-d/codeph ">reencrypt</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph> ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ändert den Verschlüsselungsschlüssel einer verschlüsselten Datenbank. Diese Methode wirkt sich nur auf den Verschlüsselungsschlüssel der Hauptdatenbank (jene Datenbank, die mithilfe der <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>-Methode verbunden wurde), aus. <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> kann nur für Datenbanken aufgerufen werden, die bei der Erstellung verschlüsselt wurden. Wurde eine Datenbank verschlüsselt erstellt, so kann die Verschlüsselung nicht mehr aufgehoben werden. Ebenso kann eine unverschlüsselt erstellte Datenbank später nicht verschlüsselt werden.
	 
	 <p class="- topic/p ">Der Vorgang der erneuten Verschlüsselung läuft in einer eigenen Transaktion ab. Wenn der Vorgang der erneuten Verschlüsselung unterbrochen wird, macht die Datenbank die Transaktion rückgängig und der Verschlüsselungsschlüssel bleibt unverändert.</p> 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:reencrypt_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:reencrypt_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird beim Fehlschlagen des Vorgangs ausgelöst.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird beim Fehlschlagen des Vorgangs ausgelöst.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Mit dieser Methode werden die SQL-Vorgänge seit dem letzten Speicherpunkt bzw. seit dem angegebenen Speicherpunkt übernommen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameterwert ein leerer String (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) ist.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Methode aufgerufen wird, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn aktuell keine Transaktion offen ist (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String Der Name des Speicherpunkts, ab dem alle SQL-Vorgänge übernommen werden sollen. Wenn kein Wert angegeben wird oder wenn dieser Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist (die Standardeinstellung) wird der neueste unbenannte Speicherpunkt (erstellt durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> ohne <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Wert) verwendet. Der Wert von <codeph class="+ topic/ph pr-d/codeph ">name</codeph> kann kein leerer String <codeph class="+ topic/ph pr-d/codeph ">""</codeph>) sein.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das responder-Argument den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Mit dieser Methode werden die SQL-Vorgänge seit dem letzten Speicherpunkt bzw. seit dem angegebenen Speicherpunkt übernommen.
	 
	 <p class="- topic/p ">Beachten Sie, dass Änderungen erst dann dauerhaft in der Datenbank gespeichert werden, wenn die gesamte Transaktion übernommen wird. Wenn die Transaktion mit der <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>-Methode gestartet wurde, müssen Sie die <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode aufrufen, um die gesamte Transaktion zu übernehmen. Wenn die Transaktion durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> gestartet wurde, während <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> hat, können Sie die gesamte Transaktion abschließen, indem Sie entweder die <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode oder <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> für den ersten Speicherpunkt der Transaktion aufrufen.</p>
	 
	 <p class="- topic/p ">Wenn der Code die <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>-Methode aufruft, werden alle Änderungen an der Transaktion dauerhaft verworfen. Dies gilt unabhängig davon, ob vor dem Rollback der Transaktion <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> aufgerufen wurde.</p>
	 
	 <p class="- topic/p ">Wenn diese Methode ohne Parameter (oder mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> für den <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter) aufgerufen wird, werden alle Datenbankänderungen seit dem letzten unbenannten Speicherpunkt übernommen. Dies ist der Speicherpunkt, der als letzter durch einen Aufruf der Methode<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> ohne Festlegung des <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameters erstellt wurde). Wenn die <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>-Methode zum Beispiel dreimal aufgerufen wurde, werden drei Speicherpunkte erstellt. Durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> zu diesem Zeitpunkt werden die SQL-Vorgänge übernommen, die seit Erstellen des dritten (neuesten) Speicherpunktes ausgeführt wurden.</p>
	 
	 <p class="- topic/p ">Wenn für den <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter ein Wert angegeben wird, übernimmt diese Methode alle SQL-Vorgänge in die Datenbank, die seit dem Speicherpunkt mit dem angegebenen Namen ausgeführt wurden. Wurden nach dem angegebenen Speicherpunkt noch weitere Speicherpunkte erstellt, werden auch die nach diesen Speicherpunkten ausgeführten Vorgänge übernommen.</p>
	 
	 <p class="- topic/p ">Nachdem ein Speicherpunkt übernommen oder zurückgenommen wurde, werden dieser Speicherpunkt und ggf. vorhandene neuere Speicherpunkte entfernt. Wenn der Code nach dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> weitere SQL-Vorgänge ausführt, gehören diese Vorgänge zu dem neuesten verbleibenden Speicherpunkt. (Anders ausgedrückt, sie gehören zu dem Speicherpunkt, der als letztes vor dem entfernten Speicherpunkt erstellt wurde.) Wenn kein Speicherpunkt verbleibt, gehören die Vorgänge zur Haupttransaktion.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	Entfernt einen Listener aus dem EventDispatcher-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Typ des Ereignisses.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das zu entfernende Listener-Objekt.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Gibt an, ob der Listener für die Erfassungsphase oder die Ziel- und Bubbling-Phase registriert wurde. Wenn der Listener sowohl für die Aufnahme- als auch für die Bubbling-Phase registriert wurde, sind auch zwei Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> erforderlich, um beide zu entfernen: ein Aufruf, bei dem <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt ist, und einer, bei dem <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">false</codeph> gesetzt ist.</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	Entfernt einen Listener aus dem EventDispatcher-Objekt. Wenn kein entsprechender Listener mit dem EventDispatcher-Objekt registriert ist, hat ein Aufruf dieser Methode keine Auswirkungen.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Nimmt alle SQL-Vorgänge zurück, die seit dem letzten Speicherpunkt bzw. seit dem angegebenen Speicherpunkt ausgeführt wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameterwert ein leerer String (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) ist.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Methode aufgerufen wird, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn aktuell keine Transaktion offen ist (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String Der Name des Speicherpunkts, auf den der Datenbankstatus zurückgesetzt werden soll. Wenn kein Wert angegeben wird oder wenn dieser Parameter <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist (die Standardeinstellung) wird der neueste unbenannte Speicherpunkt (erstellt durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> ohne <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Wert) verwendet. Der Wert von <codeph class="+ topic/ph pr-d/codeph ">name</codeph> kann kein leerer String <codeph class="+ topic/ph pr-d/codeph ">""</codeph>) sein.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das responder-Argument den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Nimmt alle SQL-Vorgänge zurück, die seit dem letzten Speicherpunkt bzw. seit dem angegebenen Speicherpunkt ausgeführt wurden.
	 
	 <p class="- topic/p ">Beachten Sie, dass bei der Übernahme der gesamten Transaktion durch einen Aufruf der <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode alle Änderungen in der Transaktion, die nicht bereits durch einen Aufruf der <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>-Methode zurückgenommen wurden, dauerhaft in der Datenbank gespeichert werden. Durch eine Aufruf der <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>-Methode werden alle Änderungen dauerhaft verworfen, unabhängig davon, ob vor dem Rollback der Transaktion einzelne Speicherpunkte übernommen (angewendet) oder zurückgenommen wurden.</p>
	 
	 <p class="- topic/p ">Wenn diese Methode ohne Parameter (oder mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> für den <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter) aufgerufen wird, werden alle Datenbankänderungen seit dem letzten unbenannten Speicherpunkt zurückgenommen. Dies ist der Speicherpunkt, der als letzter durch einen Aufruf der Methode<codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> ohne Festlegung des <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameters erstellt wurde).</p>
	 
	 <p class="- topic/p ">Wenn für den <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter ein Wert angegeben wird, nimmt diese Methode alle SQL-Vorgänge zurück, die seit dem Speicherpunkt mit dem angegebenen Namen ausgeführt wurden. Wurden nach dem angegebenen Speicherpunkt noch weitere Speicherpunkte erstellt, werden auch die nach diesen Speicherpunkten ausgeführten Vorgänge zurückgenommen.</p>
	 
	 <p class="- topic/p ">Nachdem ein Speicherpunkt übernommen oder zurückgenommen wurde, werden dieser Speicherpunkt und ggf. vorhandene neuere Speicherpunkte entfernt. Wenn der Code nach dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> weitere SQL-Vorgänge ausführt, gehören diese Vorgänge zu dem neuesten verbleibenden Speicherpunkt. (Anders ausgedrückt, sie gehören zu dem Speicherpunkt, der als letztes vor dem entfernten Speicherpunkt erstellt wurde.) Wenn kein Speicherpunkt verbleibt, gehören die Vorgänge zur Haupttransaktion.</p>
	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
     Macht eine vorhandene Transaktion, die mit der Methode „begin()“ erstellt wurde, rückgängig, d. h. alle in der Transaktion durch SQL-Anweisungen vorgenommen Änderungen werden verworfen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Methode aufgerufen wird, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die <codeph class="+ topic/ph pr-d/codeph ">connected</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn aktuell keine Transaktion offen ist (die <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph>-Eigenschaft weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">rollback</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Macht eine vorhandene Transaktion, die mit der Methode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> erstellt wurde, rückgängig, d. h. alle in der Transaktion durch SQL-Anweisungen vorgenommen Änderungen werden verworfen.
     
	 <p class="- topic/p ">Innerhalb einer Transaktion können dazwischenliegende Speicherpunkte mit einem Aufruf der <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>-Methode erstellt werden. Durch das Verwenden von Speicherpunkten können Sie Teile einer Transaktion übernehmen, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>-Methode aufrufen, oder Teile einer Transaktion zurücknehmen, indem Sie <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> aufrufen. Mit einem Aufruf der <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>-Methode werden jedoch alle Änderungen in einer Transaktion verworfen, unabhängig davon, ob bereits einzelne Speicherpunkte übernommen wurden, bevor die Transaktion zurückgenommen wird.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollback_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollback_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Erstellt einen Speicherpunkt, der eine Art Lesezeichen innerhalb einer Datenbanktransaktion ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameterwert ein leerer String (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) ist.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn diese Methode aufgerufen wird und die SQLConnection-Instanz an keine Datenbank angeschlossen ist (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> hat den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String Der Name des Speicherpunkts. Wenn kein Wert angegeben wird oder wenn dieser Parameter den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> hat (der Standardwert), werden mit dem nächsten Aufruf von <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> ohne Angabe des <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameters die seit dem letzten unbenannten Speicherpunkt ausgeführten SQL-Vorgänge übernommen oder zurückgenommen.
	 <p class="- topic/p ">Wenn der angegebene Name ein Duplikat eines bereits zuvor gespeicherten Speicherpunkts ist, werden mit dem nächsten Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.rollbackToSavepoint()</codeph> Änderungen übernommen (angewendet) oder zurückgenommen, die seit dem neuesten Speicherpunkt mit diesem Namen ausgeführt wurden.</p>
	 <p class="- topic/p "> Der Wert von <codeph class="+ topic/ph pr-d/codeph ">name</codeph> kann kein leerer String <codeph class="+ topic/ph pr-d/codeph ">""</codeph>) sein.</p>
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn im asynchronen Ausführungsmodus das responder-Argument den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung ein <codeph class="+ topic/ph pr-d/codeph ">setSavepoint</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erstellt einen Speicherpunkt, der eine Art Lesezeichen innerhalb einer Datenbanktransaktion ist. Ein Speicherpunkt stellt einen Punkt innerhalb einer Transaktion dar. Die SQL-Vorgänge, die zwischen Speicherpunkten ausgeführt wurden, können separat von anderen Vorgängen übernommen oder zurückgenommen werden, indem die Methode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> aufgerufen wird. Mithilfe eines Speicherpunkts können Sie also eine Gruppe von SQL-Vorgängen als verschachtelte Transaktion behandeln.
	 
	 <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>-Methode aufgerufen wird und noch keine Transaktion geöffnet wurde (durch einen Aufruf der <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>-Methode), wird mit dieser Methode eine Transaktion gestartet und ein Speicherpunkt am Anfang der Transaktion erstellt. Wenn bereits eine Transaktion geöffnet ist, wird mit dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> ein Speicherpunkt in dieser Transaktion erstellt.</p>
	 
	 <p class="- topic/p ">Beachten Sie, dass Änderungen erst dann dauerhaft in der Datenbank gespeichert werden, wenn die gesamte Transaktion übernommen wird. Wenn die Transaktion mit der <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>-Methode gestartet wurde, müssen Sie die <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode aufrufen, um die gesamte Transaktion zu übernehmen. Wenn eine Transaktion durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> gestartet wurde, während <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> hat, können Sie die gesamte Transaktion beenden, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>-Methode aufrufen. Die Transaktion wird auch automatisch beendet, wenn Sie <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> für den Speicherpunkt, der die Transaktion gestartet hat, aufrufen.</p>
	 
	 <p class="- topic/p ">Sie können einen Namen für einen Speicherpunkt festlegen, indem Sie einen Wert für den <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Parameter angeben. Dies ermöglicht es Ihnen, alle Änderungen, die nach diesem Speicherpunkt vorgenommen wurden, dauerhaft anzuwenden oder zurückzunehmen. Wenn kein Name angegeben wird (Standardeinstellung), wird ein unbenannter Speicherpunkt erstellt.</p>
	 
	 <p class="- topic/p ">Nachdem ein Speicherpunkt übernommen oder zurückgenommen wurde, werden dieser Speicherpunkt und ggf. vorhandene neuere Speicherpunkte entfernt. Wenn der Code nach dem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> weitere SQL-Vorgänge ausführt, gehören diese Vorgänge zu dem neuesten verbleibenden Speicherpunkt. (Anders ausgedrückt, sie gehören zu dem Speicherpunkt, der als letztes vor dem entfernten Speicherpunkt erstellt wurde.) Wenn kein Speicherpunkt verbleibt, gehören die Vorgänge zur Haupttransaktion.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang erfolgreich abgeschlossen wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLConnection:autoCompact:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoCompact</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob bei der Erstellung der aktuellen Datenbank das automatische Verdichten aktiviert wurde (der Wert, der für den autoCompact-Parameter beim Aufrufen von open() oder openAsync(), durch den die Datenbank erstellt wurde, angegeben wurde).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob bei der Erstellung der aktuellen Datenbank das automatische Verdichten aktiviert wurde (der Wert, der für den <codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph>-Parameter beim Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>, durch den die Datenbank erstellt wurde, angegeben wurde). Weist diese Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf, wird nach jedem Schreibvorgang automatisch nicht benutzter Platz aus der Datenbankdatei entfernt, um die Größe der Datei zu minimieren. Weist diese Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf, verbleibt der durch entfernte Daten eingenommene Platz in der Datenbankdatei und wird bei Bedarf wiederverwendet. Selbst wenn <codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> aufweist, können Sie die Zurückgewinnung von nicht benutztem Platz in der Datenbank erzwingen, indem Sie die Methode <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> aufrufen.
     
     <p class="- topic/p ">Wenn die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> aufweist, wird diese Eigenschaft auf <codeph class="+ topic/ph pr-d/codeph ">false</codeph> gesetzt.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:cacheSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheSize</apiName><shortdesc class="- topic/shortdesc ">
     Bietet Zugriff auf die Cachegröße dieser Verbindung, die die Höchstzahl der jeweils auf der Festplatte gespeicherten Datenbankseiten darstellt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn versucht wird, diese Eigenschaft einzustellen, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> weist den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf) oder wenn es aktuell eine offene Transaktion gibt (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> weist den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Bietet Zugriff auf die Cachegröße dieser Verbindung, die die Höchstzahl der jeweils auf der Festplatte gespeicherten Datenbankseiten darstellt. Pro Seite sind etwa 1,5 KB Speicher erforderlich (abhängig vom Wert des Parameters <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> im Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>, mit der die Datenbank erstellt wurde). Die standardmäßige Cache-Größe ist 2000. Wenn eine Anwendung <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Vorgänge ausführt, durch die viele Zeilen der Datenbank geändert werden, können Sie durch eine Erhöhung der Cache-Größe die Geschwindigkeit auf Kosten eines erhöhten Speicherverbrauchs verbessern.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:columnNameStyle:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, wie Spaltennamen im Ergebnis einer „SELECT“-Anweisung wiedergegeben werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn versucht wird, diese Eigenschaft einzustellen, während die SQLConnection-Instanz nicht mit einer Datenbank verbunden ist (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> hat den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, wie Spaltennamen im Ergebnis einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung wiedergegeben werden.
     
     <p class="- topic/p ">Die in der „SQLColumnNameStyle“-Klasse definierten Konstanten repräsentieren die möglichen Werte dieser Eigenschaft:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.LONG</codeph> gibt an, dass Spaltennamen im Format <codeph class="+ topic/ph pr-d/codeph ">[tabellenname]_[spaltenname]</codeph> zurückgegeben werden.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.SHORT</codeph> gibt an, dass Spaltennamen im Format <codeph class="+ topic/ph pr-d/codeph ">[spaltenname]</codeph> zurückgegeben werden. Gibt es mehrere Spalten mit demselben Namen, wird nur eine Eigenschaft mit diesem Namen zum Ergebnisobjekt hinzugefügt.</li><li class="- topic/li ">Der Standardwert ist <codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.DEFAULT</codeph>. Kommt dieser Wert zur Anwendung, werden die Ergebnisspaltennamen gemäß der Anzahl Tabellen in der <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung, die ähnliche Spaltennamen aufweisen, formatiert. Wenn die Anweisung <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> nur eine Tabelle enthält, wird das kurze Namensformat <codeph class="+ topic/ph pr-d/codeph ">[spaltenname]</codeph> verwendet. Enthält die <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung mehrere verbundene Tabellen und weisen zwei Spalten identische Namen auf, wird für diese das lange Namensformat <codeph class="+ topic/ph pr-d/codeph ">[tabellenname]_[spaltenname]</codeph> verwendet.</li></ul>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob die „SQLConnection“-Instanz über eine offene Verbindung zu einer Datenbankdatei verfügt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob die „SQLConnection“-Instanz über eine offene Verbindung zu einer Datenbankdatei verfügt.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:inTransaction:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">inTransaction</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, ob diese Verbindung aktuell an einer Transaktion beteiligt ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, ob diese Verbindung aktuell an einer Transaktion beteiligt ist.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     Der letzte von einer SQL „INSERT“-Anweisung erzeugte Zeilenbezeichner.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der letzte von einer SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung erzeugte Zeilenbezeichner. Ein Zeilenbezeichner dient zur eindeutigen Kennzeichnung einer Zeile in einer Tabelle in der Datenbank. Der Wert wird häufig von der Datenbank erzeugt.
	 
     <p class="- topic/p ">Der Wert lautet „zero“, wenn keine Datenbank verbunden ist oder wenn keine <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung ausgeführt wurde.</p>
	 
	 <p class="- topic/p ">Den Zeilenbezeichner für die Ausführung einer SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung erhalten Sie über die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> des „SQLResult“-Objekts, das durch die Methode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> des „SQLStatement“-Objekts zurückgegeben wird (wenn sie aufgerufen wird, nachdem SQLStatement das <codeph class="+ topic/ph pr-d/codeph ">result</codeph>-Ereignis ausgelöst hat).</p>
	 
	 <p class="- topic/p ">Weitere Informationen zu Primärschlüsseln und generierten Zeilenbezeichnern finden Sie in den Abschnitten „<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_data_de" scope="external" class="- topic/xref ">CREATE TABLE</xref>“ und „<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_de" scope="external" class="- topic/xref ">Expressions</xref>“ im Anhang „<xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_de" scope="external" class="- topic/xref ">SQL-Unterstützung in lokalen Datenbanken</xref>“.</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:pageSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pageSize</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die Datenbankseitengröße (in Byte) an, die bei der Erstellung der aktuellen Datenbank angegeben wurde (der Wert, der für den Parameter „pageSize“ beim Aufrufen von „open()“ oder „openAsync()“, durch den die Datenbank erstellt wurde, angegeben wurde).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die Datenbankseitengröße (in Byte) an, die bei der Erstellung der aktuellen Datenbank angegeben wurde (der Wert, der für den Parameter <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> beim Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>, durch den die Datenbank erstellt wurde, angegeben wurde).
     
     <p class="- topic/p ">Wenn die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> aufweist, lautet der Wert dieser Eigenschaft 0.</p>
     
	 <p class="- topic/p ">Sie können die Seitengröße einer Datenbank ändern (mithilfe der Methoden <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>), solange noch keine Tabelle in der Datenbank erstellt wurde.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:totalChanges:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalChanges</apiName><shortdesc class="- topic/shortdesc ">
     Gibt die Gesamtzahl der Datenänderungen an, die vorgenommen wurden, seit die Verbindung zur Datenbank hergestellt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt die Gesamtzahl der Datenänderungen an, die vorgenommen wurden, seit die Verbindung zur Datenbank hergestellt wurde. Zusätzlich zu den Änderungen, die durch <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>-Anweisungen vorgenommen wurden, enthält dieser Wert auch die durch Auslöser verursachten Änderungen.
	 
	 <p class="- topic/p ">Ist die Datenbankverbindung geschlossen, wird der Wert auf „0“ zurückgesetzt. Wenn die SQLConnection-Instanz mit keiner Datenbank verbunden ist, lautet der Wert „0“.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/rowsAffected" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.rowsAffected</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
 Die in einer „SQLTriggerSchema“-Instanz enthaltenen Informationen beschreiben einen bestimmten Auslöser in einer Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die in einer „SQLTriggerSchema“-Instanz enthaltenen Informationen beschreiben einen bestimmten Auslöser in einer Datenbank. Zu den verfügbaren Informationen gehören der Name des Auslösers (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">name</codeph>), der Name der zugewiesenen Tabelle (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">table</codeph>) und die SQL-Anweisung, mit der der Auslöser erstellt wurde (die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>).
 
 <p class="- topic/p ">Um die Auslöserschemainformationen für eine Datenbank zu erhalten, laden Sie die Schemainformationen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Achten Sie dabei darauf, dass <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph> als Wert für das Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> angegeben ist. Die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> der resultierenden „SQLSchemaResult“-Instanz enthält ein Array mit „SQLTriggerSchema“-Instanzen, die die Auslöser in der Datenbank repräsentieren.</p>
 
 <p class="- topic/p ">Im Allgemeinen werden „SQLTriggerSchema“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLTriggerSchema:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLTriggerSchema“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der zugeordneten Datenbank. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name des Auslösers.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die SQL-Anweisung, mit der der Auslöser erstellt wurde.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Tabelle, die dem Auslöser zugeordnet ist.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLTriggerSchema“-Instanz. Im Allgemeinen wird der „SQLTriggerSchema“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLTriggerSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     Der Name der Tabelle, für die der Auslöser definiert wurde, oder der Name der Ansicht, falls der Auslöser für eine Ansicht definiert wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Name der Tabelle, für die der Auslöser definiert wurde, oder der Name der Ansicht, falls der Auslöser für eine Ansicht definiert wurde.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
 Eine SQL-Anweisung wird mithilfe einer „SQLStatement“-Instanz an einer lokalen SQL-Datenbank ausgeführt, die über eine „SQLConnection“-Instanz geöffnet ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Eine SQL-Anweisung wird mithilfe einer „SQLStatement“-Instanz an einer lokalen SQL-Datenbank ausgeführt, die über eine „SQLConnection“-Instanz geöffnet ist.
 
 <p class="- topic/p ">Eine SQLStatement-Instanz wird mit einem SQLConnection-Objekt verknüpft, indem Sie die SQLConnection-Instanz als Wert der <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph>-Eigenschaft des SQLConnection-Objekts einstellen. Der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> wird der Text der auszuführenden SQL-Anweisung zugewiesen. Bei Bedarf werden die Parameterwerte der SQL-Anweisung mithilfe der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> angegeben; die Anweisung wird durch Aufrufen der Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ausgeführt.</p>
 
 <p class="- topic/p ">Eine umfassende Beschreibung des von der lokalen SQL-Datenbank unterstützten SQL-Dialekts finden Sie im Anhang <xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL-Unterstützung in lokalen Datenbanken</xref>.</p>
 
 <p class="- topic/p ">Im asynchronen Ausführungsmodus werden die Methoden <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> im Hintergrund ausgeführt, und zur Laufzeit werden beim Abschluss oder Fehlschlagen der Vorgänge Ereignisse an registrierte Ereignis-Listener oder an eine angegebene Responder-Instanz ausgelöst. Im synchronen Modus werden die Methoden auf dem Hauptanwendungs-Thread ausgeführt, was bedeutet, dass erst nach Abschluss der Datenbankvorgänge ein anderer Code ausgeführt werden kann. Außerdem wird im synchronen Modus beim Fehlschlagen der Methoden zur Laufzeit kein Fehlerereignis sondern eine Ausnahme ausgelöst.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn während des Vorgangs ein Fehler auftritt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn während des Vorgangs ein Fehler auftritt.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLEvent.RESULT_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><shortdesc class="- topic/shortdesc ">
 Wird ausgelöst, wenn die Methode „execute()“ oder „next()“ erfolgreich ausgeführt wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RESULT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Wird ausgelöst, wenn die Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> erfolgreich ausgeführt wurde. Nachdem das Ereignis <codeph class="+ topic/ph pr-d/codeph ">result</codeph> ausgelöst wurde, können Sie die Methode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> aufrufen, um Anweisungsergebnisse abzurufen.
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLStatement:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLStatement“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Konstruktor aus einer Sandbox außerhalb der Hauptanwendungs-Sandbox aufgerufen wird. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLStatement“-Instanz.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLStatement:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     Bricht die Ausführung dieser Anweisung ab.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Bricht die Ausführung dieser Anweisung ab. Mithilfe dieser Methode können Sie, wie mit der <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph>-Methode, eine noch nicht abgeschlossene Abfrage abbrechen. Im Gegensatz zu <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> wird mithilfe dieser Methode jedoch nur eine Anweisung abgebrochen. Wird diese Anweisung gerade nicht ausgeführt, hat das Aufrufen dieser Methode keine Auswirkung.
	 
	 <p class="- topic/p ">Als direkte Reaktion auf den Abschluss des Vorgangs <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> werden keine Ereignisse ausgelöst. Sobald der Vorgang <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> abgeschlossen und die Ausführung der Anweisung abgebrochen ist, wird von der „SQLStatement“-Instanz ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst, mit dem angegeben wird, dass die Ausführung der Anweisung (der Aufruf <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>) nicht abgeschlossen wurde. Wenn für den Parameter <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> des Aufrufs <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> ein Wert angegeben wurde, wird die angegebene Fehlerprozedurmethode aufgerufen. In beiden Fällen weist die an die Listener übergebene SQLError-Instanz eine <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph>-Eigenschaft mit dem Wert „3118“ (Vorgang abgebrochen) auf.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLStatement:clearParameters" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clearParameters</apiName><shortdesc class="- topic/shortdesc ">
     Löscht alle aktuellen Parametereinstellungen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Löscht alle aktuellen Parametereinstellungen.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/parameters" class="- topic/link "><linktext class="- topic/linktext ">parameters</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:execute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">execute</apiName><shortdesc class="- topic/shortdesc ">
     Führt die in der Eigenschaft „text“ enthaltene SQL in der Datenbank aus, die mit dem „SQLConnection“-Objekt in der Eigenschaft „sqlConnection“ verbunden ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">text</codeph>-Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> hat oder einen leeren String (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) enthält; wenn die <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph>-Eigenschaft nicht eingestellt ist; wenn die der <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph>-Eigenschaft zugewiesene SQLConnection-Instanz nicht verbunden ist; oder wenn die Anweisung gerade ausgeführt wird.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> der Anweisung um eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung handelt, gibt dieser Wert an, wieviele Zeilen die zurückgegebene Anweisung enthält. Der Standardwert ist „-1“, was bedeutet, dass alle Ergebniszeilen zurückgegeben werden. Dieser Parameter wird in Verbindung mit der Methode <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> verwendet, um umfangreiche Ergebnissätze in kleinere Datensätze zu unterteilen. Das kann die Beurteilung der Anwendungsleistung durch den Benutzer verbessern, da die ersten Ergebnisse schneller geliefert und Ergebnisverarbeitungsvorgänge unterteilt werden.
     
     <p class="- topic/p ">Wenn es sich bei der SQL-Anweisung um eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Abfrage handelt und ein <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argument größer Null angegeben wurde, wird die Anweisung ausgeführt, bis der gesamte Ergebnissatz zurückgegeben ist oder entweder die Methode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> aufgerufen wird. Da die Anzahl der Zeilen in einem Ergebnissatz bei der Ausführung nicht bekannt ist, gilt die Anweisung erst als abgeschlossen, wenn sich der Cursor in der Datenbank jenseits der letzten Zeile im Ergebnissatz befindet. Wenn ein <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argument in einem <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>-Aufruf angegeben ist, muss mindestens eine Zeile mehr als die Gesamtzahl der im Ergebnissatz enthaltenen Zeilen angefordert werden (entweder durch einen <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Wert, der größer als die Anzahl der im Ergebnissatz enthaltenen Zeilen ist, oder durch weitere Aufrufe der Methode <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>); erst dann weist die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> der resultierenden „SQLResult“-Instanz den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> auf.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Falls im asynchronen Ausführungsmodus das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> gleich <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist, wird ein <codeph class="+ topic/ph pr-d/codeph ">result</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst, sobald die Ausführung abgeschlossen ist.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Führt die in der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> enthaltene SQL an der Datenbank aus, die mit dem „SQLConnection“-Objekt in der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> verbunden ist.
     
	 <p class="- topic/p ">Falls das <codeph class="+ topic/ph pr-d/codeph ">responder</codeph>-Argument nicht gleich <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist, gibt das festgelegte Responder-Objekt die Methoden an, die aufgerufen werden, um die Ergebnisse des Vorgangs zu verarbeiten. Wenn das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> hat, wird im asynchronen Ausführungsmodus bei einem erfolgreichen Abschluss des Vorgangs ein <codeph class="+ topic/ph pr-d/codeph ">result</codeph>-Ereignis ausgelöst. Schlägt der Vorgang fehl, wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.</p>
	 
	 <p class="- topic/p ">Um auf die Ergebnisse einer Anweisung zuzugreifen, zum Beispiel auf die Ergebniszeilen einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung oder auf den von der Datenbank generierten primären Schlüssel einer <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung, rufen Sie die <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>-Methode auf. Die Ergebnisse sind im synchronen Modus sofort nach der Ausführung der Anweisung verfügbar; im asynchronen Modus nach dem Absetzen des <codeph class="+ topic/ph pr-d/codeph ">result</codeph>-Ereignisses.</p>
     
     <p class="- topic/p ">Eine Anweisung kann erst ausgeführt werden, nachdem sie vorbereitet (kompiliert) wurde. Beim ersten Aufrufen der Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> einer „SQLStatement“-Instanz wird die Anweisung zur Laufzeit vorbereitet. Eine einmal vorbereitete Anweisung braucht nur aufgrund einer Änderung der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> erneut vorbereitet zu werden. Durch die Einstellung von Parameterwerten wird keine erneute Vorbereitung der Anweisung erforderlich.</p>
	 
     </apiDesc><example conref="examples\SQLStatement.execute.1.as" class="- topic/example "> Im folgenden Beispiel für die Ausführung eines SQLStatements wird demonstriert, wie die erfolgreiche Ausführung oder das Fehlschlagen mithilfe von Ereignis-Listenern bestimmt wird.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example><example conref="examples\SQLStatement.execute.2.as" class="- topic/example "> Im folgenden Beispiel für die Ausführung eines SQLStatements wird demonstriert, wie mithilfe eines Responder-Objekts angegeben wird, welche Funktionen bei der erfolgreichen Ausführung oder dem Fehlschlagen der Anweisung aufgerufen werden.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;
var employeeResponder:Responder;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    employeeResponder = new Responder(resultHandler, errorHandler);
    dbStatement.execute(-1, employeeResponder);
}

function resultHandler(result:SQLResult):void
{
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(error:SQLError):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:execute_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn die Anweisung erfolgreich ausgeführt wurde oder ein Wert für ein <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argument angegeben ist und eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung eine oder mehrere Datenzeilen zurückgibt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn die Anweisung erfolgreich ausgeführt wurde oder ein Wert für ein „prefetch“-Argument angegeben ist und eine „SELECT“-Anweisung eine oder mehrere Datenzeilen zurückgibt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:execute_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLStatement:getResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getResult</apiName><shortdesc class="- topic/shortdesc ">
     Bietet Zugriff auf ein „SQLResult“-Objekt, das die Ergebnisse der Anweisungsausführung enthält, und zwar einschließlich der Ergebniszeilen einer „SELECT“-Anweisung sowie weiterer Informationen über die Anweisungsausführung für alle ausgeführten Anweisungen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein „SQLResult“-Objekt, das das Ergebnis eines Aufrufs der Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> enthält.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Bietet Zugriff auf ein „SQLResult“-Objekt, das die Ergebnisse der Anweisungsausführung enthält, und zwar einschließlich der Ergebniszeilen einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung sowie weiterer Informationen über die Anweisungsausführung für alle ausgeführten Anweisungen. Im asynchronen Modus stehen die Ergebnisinformationen erst nach Auslösung des <codeph class="+ topic/ph pr-d/codeph ">result</codeph>-Ergebnisses zur Verfügung.
     
     <p class="- topic/p ">Wenn bei der Ausführung einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung die Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> aufgerufen wird, wobei das Standardargument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> den Wert „-1“ hat, enthält das zurückgegebene „SQLResult“-Objekt den vollständigen Ergebnissatz der Abfrage.</p>
     
     <p class="- topic/p ">Wurde das Argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> für den Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> angegeben, werden von der Methode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> die ältesten Ergebnisse in der Warteschlange zuerst verarbeitet. Jedesmal, wenn das Ereignis <codeph class="+ topic/ph pr-d/codeph ">result</codeph> ausgelöst wird, wird der Warteschlange ein neues „SQLResult“-Objekt hinzugefügt. Bei jedem Aufrufen der Methode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> wird das „SQLResult“-Objekt, das sich am längsten in der Warteschlange befindet, zurückgegeben und aus der Warteschlange entfernt. Enthält die Warteschlange keine „SQLResult“-Objekte mehr, gibt <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück.</p>
	 
	 <p class="- topic/p ">Beachten Sie, dass „SQLResult“-Objekte in der Warteschlange verbleiben, bis sie durch einen Aufruf von <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> daraus entfernt werden. Beispiel: Wenn die <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>-Methode mehrfach aufgerufen wird, <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> jedoch nicht, verbleiben die mit jedem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> verknüpften SQLResult-Objekte in der Warteschlange.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/event:result" class="- topic/link "><linktext class="- topic/linktext ">result-Ereignis</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:next" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">next</apiName><shortdesc class="- topic/shortdesc ">
     Ruft den nächsten Teil des Ergebnissatzes einer „SELECT“-Anweisung ab.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn die Methode aufgerufen wird, während die Anweisung nicht ausgeführt wird, weist die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">executing</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> auf.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">wenn der Vorgang im synchronen Ausführungsmodus fehlschlägt.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn es sich bei der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> der Anweisung um eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung handelt, gibt dieser Wert an, wieviele Zeilen die zurückgegebene Anweisung enthält. Der Standardwert ist „-1“, was bedeutet, dass alle Ergebniszeilen zurückgegeben werden. Das kann die Beurteilung der Anwendungsleistung durch den Benutzer verbessern, da die ersten Ergebnisse schneller geliefert und Ergebnisverarbeitungsvorgänge unterteilt werden.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Objekt, das die Methoden angibt, die im Anschluss an einen erfolgreich abgeschlossenen oder fehlgeschlagenen Vorgang aufgerufen werden. Wenn das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> aufweist, wird bei Abschluss der Ausführung das Ereignis <codeph class="+ topic/ph pr-d/codeph ">result</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">error</codeph> ausgelöst.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ruft den nächsten Teil des Ergebnissatzes einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung ab. Wenn der Ergebnissatz keine weiteren Zeilen mehr enthält, wird ein <codeph class="+ topic/ph pr-d/codeph ">result</codeph>-Ereignis ausgelöst, aber kein weiteres „SQLResult“-Objekt zur Warteschlange <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> hinzugefügt.
     
     <p class="- topic/p ">Falls im asynchronen Ausführungsmodus das <codeph class="+ topic/ph pr-d/codeph ">responder</codeph>-Argument nicht gleich <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ist, gibt das festgelegte Responder-Objekt die Methoden an, die aufgerufen werden, um die Ergebnisse des Vorgangs zu verarbeiten. Wenn das Argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph> hat, wird bei einem erfolgreichen Abschluss des Vorgangs ein <codeph class="+ topic/ph pr-d/codeph ">result</codeph>-Ereignis ausgelöst. Schlägt der Vorgang fehl, wird ein <codeph class="+ topic/ph pr-d/codeph ">error</codeph>-Ereignis ausgelöst.</p>
     
     <p class="- topic/p ">Diese Methode kann nur aufgerufen werden, solange die Anweisung ausgeführt wird. Wenn es sich bei der Anweisung um eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Abfrage handelt und ein <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argument größer Null angegeben wurde, wird die Anweisung ausgeführt, bis der gesamte Ergebnissatz zurückgegeben ist oder entweder die Methode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> aufgerufen wird.</p>
     
     </apiDesc><example conref="examples\SQLStatement.next.1.as" class="- topic/example "> Das folgende Beispiel demonstriert die Ausführung eines SQLStatements, in dem ausdrücklich festgelegt wurde, dass bei der ersten Rückgabe des Ergebnisses nur die ersten zehn Zeilen des Ergebnissatzes enthalten sein sollen. Der Code überprüft die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> von SQLResult und ruft die Methode <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> auf, falls nicht alle Zeilen abgerufen wurden.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute(10);
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
        if (!result.complete)
        {
            dbStatement.next(10);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:next_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn die Anweisung erfolgreich ausgeführt wurde oder ein Wert für ein <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argument angegeben ist und der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> eine oder mehrere Datenzeilen zurückgibt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn die Anweisungsausführung erfolgreich abgeschlossen wird, oder wenn ein Wert für ein „prefetch“-Argument angegeben ist und der Aufruf von „next()“ eine oder mehrere Datenzeilen zurückgibt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:next_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Wird ausgelöst, wenn der Vorgang im asynchronen Ausführungsmodus fehlschlägt.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLStatement:executing:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">executing</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob die Anweisung aktuell ausgeführt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob die Anweisung aktuell ausgeführt wird.
     
     <p class="- topic/p ">Diese Eigenschaft hat den Wert „true“, wenn <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> aufgerufen wurde und von der Datenbank nicht alle Ergebnisse zurückgegeben wurden.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:itemClass:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">itemClass</apiName><shortdesc class="- topic/shortdesc ">
     Gibt eine Klasse (Datentyp) an, die für jede als Ergebnis der Anweisungsausführung zurückgebenene Zeile verwendet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Class</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt eine Klasse (Datentyp) an, die für jede als Ergebnis der Anweisungsausführung zurückgebenene Zeile verwendet wird.
     
     
     
     <p class="- topic/p ">Standardmäßig wird jede von einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegebene Zeile als „Object“-Instanz erstellt. Dabei treten die Spaltennamen des Ergebnissatzes als Eigenschaftsnamen des Objekts auf und die Werte der Spalten als die Werte der jeweiligen Eigenschaften.</p>
     
     <p class="- topic/p ">Durch die Angabe einer Klasse für die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> wird jede Zeile, die bei der Ausführung dieser „SQLStatement“-Instanz von einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegeben wird, als Instanz der angegebenen Klasse erstellt. Jeder Eigenschaft der Instanz <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> wird der Wert aus der gleichnamigen Spalte zugewiesen.</p>
     
     <p class="- topic/p ">Eine dieser Eigenschaft zugewiesene Klasse muss über einen Konstruktor verfügen, der keine Parameter erfordert. Außerdem muss die Klasse je eine Eigenschaft für jede von der Anweisung <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> zurückgegebene Spalte aufweisen. Es gilt als Fehler, wenn es für eine Spalte der Liste <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> keinen entsprechenden Eigenschaftsnamen in der Klasse <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> gibt.</p>
     
     </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> Das folgende Beispiel demonstriert, wie mithilfe der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> zur Laufzeit Instanzen einer benutzerdefinierten Klasse aus den Ergebnissen einer SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung erstellt werden.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/data" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.data</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:parameters:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parameters</apiName><shortdesc class="- topic/shortdesc ">
     Dient als assoziatives Array, dem Sie Werte für die in der Eigenschaft „text“ der SQL-Anweisung angegebenen Parameter hinzufügen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dient als assoziatives Array, dem Sie Werte für die in der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> der SQL-Anweisung angegebenen Parameter hinzufügen. Bei den Array-Schlüsseln handelt es sich um die Namen der Parameter. Wenn im Anweisungstext ein unbenannter Parameter angegeben wird, handelt es sich bei seinem Schlüssel um den Index des Parameters.
     
     <p class="- topic/p ">Im Text einer SQL-Anweisung wird ein Parameter mit einem der folgenden Zeichen gekennzeichnet: „?“, „:“ oder „@“.</p>
     
     <p class="- topic/p ">Mit den Token „:“ und „@“ wird ein benannter Parameter gekennzeichnet; die darauf folgenden Zeichen geben den Namen des Parameters an.</p>
     
     <p class="- topic/p ">Beispiel: In der folgenden SQL-Anweisung wird ein Parameter namens <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph> mit dem Token „:“ gekennzeichnet:</p>
     
     <pre xml:space="preserve" class="- topic/pre ">SELECT FROM employees WHERE firstName = :firstName</pre>
     
     <p class="- topic/p ">Das Token „?“ kennzeichnet einen indizierten (nummerierten) Parameter; gemäß der Reihenfolge der Parameter im Anweisungstext erhält jeder Parameter automatisch eine Indexposition. Die Indexpositionswerte der Parameter basieren auf null. d. h. die Indexposition des ersten Parameters lautet 0.</p>
     
     <p class="- topic/p ">Parameter dienen zur typisierten Ersetzung von Werten, die bei der Konstruktion der SQL-Anweisung unbekannt sind. Nur mithilfe von Parameter kann die Speicherklasse eines an die Datenbank übergebenen Wertes sichergestellt werden. Ohne Parameter werden alle Werte auf der Basis der Typenaffinität der zugewiesenen Spalte von ihrer Textrepräsentation in eine Speicherklasse konvertiert. Weitere Informationen zu Speicherklassen und Spaltenaffinität finden Sie im Abschnitt „Datentypunterstützung“ im Anhang „<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL-Unterstützung in lokalen Datenbanken</xref>“.</p>
     
     <p class="- topic/p ">Parameter werden auch als Sicherheitsmaßnahmen zur Verhinderung eines böswilligen Verfahrens, das als SQL-Injektionsangriff bekannt ist, eingesetzt. Bei einem SQL-Injektionsangriff gibt ein Benutzer einen SQL-Code an einer für Benutzer zugänglichen Stelle ein (z. B. ein Dateneingabefeld). Wenn der Anwendungscode eine SQL-Anweisung durch die direkte Verkettung einer Benutzereingabe mit dem SQL-Text erstellt, wird der vom Benutzer eingegebene SQL-Code an der Datenbank ausgeführt. Das folgende Beispiel zeigt die Verkettung der Benutzereingabe mit dem SQL-Text. <b class="+ topic/ph hi-d/b ">Verwenden Sie dieses Verfahren nicht</b>:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     </codeblock>
     
     
     
     <p class="- topic/p ">Ein SQL-Injektionsangriff lässt sich verhindern, indem Anweisungsparameter verwendet werden, anstatt durch Benutzer eingegebene Werte mit dem Anweisungstext zu verketten. Die Parameterwerte werden ausdrücklich als ersetzte Werte behandelt und werden nicht Teil des eigentlichen Anweisungstexts. Folgendes ist die empfohlene Alternative zur vorherigen Notierung:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     
     
     <p class="- topic/p ">Alle Parameterwerte müssen vor der Ausführung der Anweisung eingestellt sein. Im Array <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> angegebene Parameter werden gebunden (d. h. mit dem Anweisungstext kombiniert), wenn die Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> aufgerufen wird. Nachdem <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> aufgerufen wurde, werden alle späteren Werteänderungen nicht auf die ausführende Anweisung angewendet. Bei einem anschließenden Aufrufen von <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> werden die geänderten Werte jedoch angewendet. Enthält der Anweisungstext einen Parameter, für den in der <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph>-Eigenschaft kein Wert angegeben ist, tritt ein Fehler auf.</p>
     
     <p class="- topic/p ">Sie können alle Parameterwerte aus der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">clearParameters()</codeph> löschen.</p>
     
	 </apiDesc><example conref="examples\SQLStatement.parameters.1.as" class="- topic/example "> Das folgende Beispiel demonstriert die Verwendung des benannten Parameters <codeph class="+ topic/ph pr-d/codeph ">:firstName</codeph> in einer SQL-Anweisung.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = :firstName";
employees.parameters[":firstName"] = "Sam";
employees.execute();
</codeblock></example><example conref="examples\SQLStatement.parameters.2.as" class="- topic/example "> Das folgende Beispiel demonstriert die Verwendung eines unbenannten Parameters in einer SQL-Anweisung.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = ?";
employees.parameters[0] = "Sam";
employees.execute();
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link><link href="flash.data.xml#SQLStatement/clearParameters()" class="- topic/link "><linktext class="- topic/linktext ">clearParameters()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:sqlConnection:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sqlConnection</apiName><shortdesc class="- topic/shortdesc ">
     Das SQLConnection-Objekt, das die Verbindung zu den Datenbanken verwaltet, auf denen die Anweisung ausgeführt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.data:SQLConnection</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn versucht wird, den Wert dieser Eigenschaft während der Anweisungsausführung zu ändern.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Das SQLConnection-Objekt, das die Verbindung zu den Datenbanken verwaltet, auf denen die Anweisung ausgeführt wird.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLStatement:text:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
     Der tatsächliche SQL-Text der Anweisung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Wenn versucht wird, die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">text</codeph> während der Anweisungausführung zu ändern.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der tatsächliche SQL-Text der Anweisung.
	 
     <p class="- topic/p ">Beim Text kann es sich um jede unterstützte SQL handeln. Eine umfassende Beschreibung des von der lokalen SQL-Datenbank unterstützten SQL-Dialekts finden Sie im Anhang „<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL-Unterstützung in lokalen Datenbanken</xref>“.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLMode</apiName><shortdesc class="- topic/shortdesc ">
 Diese Klasse enthält die Konstanten, die die möglichen Werte des Parameters „openMode“ der Methoden „SQLConnection.open()“ und „SQLConnection.openAsync()“ darstellen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Diese Klasse enthält die Konstanten, die die möglichen Werte des Parameters <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> der Methoden <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.open()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.openAsync()</codeph> darstellen.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links><apiValue id="flash.data:SQLMode:CREATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CREATE</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, dass die Verbindung für Aktualisierungen geöffnet wird und dass eine Datenbankdatei erstellt wird, wenn die angegebene Datei nicht existiert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, dass die Verbindung für Aktualisierungen geöffnet wird und dass eine Datenbankdatei erstellt wird, wenn die angegebene Datei nicht existiert. In diesem Modus ist Lesen und Schreiben in der Datenbank zulässig. Falls die Datenbank nicht existiert, wird sie vor Abschluss des Vorgangs erstellt.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, dass die Verbindung im schreibgeschützten Modus geöffnet wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, dass die Verbindung im schreibgeschützten Modus geöffnet wird. In diesem Modus ist Schreiben in der Datenbank nicht zulässig. Falls die Datenbank nicht existiert, schlägt der Vorgang fehl.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt an, dass die Verbindung für Aktualisierungen geöffnet wird und dass eine neue Datenbankdatei erstellt wird, wenn die angegebene Datei nicht existiert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt an, dass die Verbindung für Aktualisierungen geöffnet wird und dass eine neue Datenbankdatei erstellt wird, wenn die angegebene Datei nicht existiert. In diesem Modus ist Lesen und Schreiben in der Datenbank zulässig. Falls die Datenbank nicht existiert, schlägt der Vorgang fehl.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:EncryptedLocalStore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EncryptedLocalStore</apiName><shortdesc class="- topic/shortdesc ">
	Die EncryptedLocalStore-Klasse bietet eine Funktion zur dauerhaften, verschlüsselten Speicherung von Daten.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die EncryptedLocalStore-Klasse bietet eine Funktion zur dauerhaften, verschlüsselten Speicherung von Daten.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Unterstützung von AIR-Profilen:</i> Diese Funktion wird auf allen Desktopbetriebssystemen unterstützt, jedoch nicht auf mobilen Geräten oder Geräten mit AIR für TV. Mit der <codeph class="+ topic/ph pr-d/codeph ">EncryptedLocalStore.isSupported</codeph>-Eigenschaft können Sie testen, ob zur Laufzeit Unterstützung gegeben ist. Weitere Informationen zum AIR-Support über mehrere Profile finden Sie unter <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Unterstützung von AIR-Profilen</xref>.</p>
	 
	 <p class="- topic/p ">AIR stellt einen verschlüsselten lokalen Speicher (encrypted local store, ELS) für jede auf dem Computer eines Benutzers installierte AIR-Anwendung bereit. Dadurch können Daten auf der lokalen Festplatte des Benutzers in einem verschlüsselten Format gespeichert und abgerufen werden, das von anderen Benutzern nicht leicht entschlüsselt werden kann. Für jede AIR-Anwendung wird jeweils ein separater verschlüsselter lokaler Speicher verwendet, und jede AIR-Anwendung verwendet jeweils einen separaten verschlüsselten lokalen Speicher für jedes Benutzerkonto auf dem Computer. </p>
	
	<p class="- topic/p ">Verwenden Sie den verschlüsselten lokalen Speicher für die Zwischenspeicherung von Daten, die gesichert werden müssen (z. B. Anmeldeinformationen für Webdienste). Der ELS eignet sich für die Speicherung von Informationen, die für andere Benutzer nicht zugänglich sein sollen. Er schützt die Daten jedoch nicht vor anderen Prozessen, die unter demselben Benutzerkonto ausgeführt werden. ELS eignet sich deshalb nicht für den Schutz geheimer Anwendungsdaten wie DRM oder Verschlüsselungsschlüssel. </p>
	
	<p class="- topic/p ">AIR verwendet DPAPI unter Windows, KeyChain unter Mac OS und KeyRing oder KWallet unter Linux, um den verschlüsselten lokalen Speicher den einzelnen Anwendungen und Benutzern zuzuordnen. Die Verschlüsselung im lokalen Speicher erfolgt mit AES-CBC 128 Bit-Verschlüsselung.</p>
	
	<p class="- topic/p ">Die im verschlüsselten lokalen Speicher enthaltenen Informationen stehen nur als AIR-Anwendungsinhalt in der Sicherheits-Sandbox application zur Verfügung. </p>
	
	<p class="- topic/p ">Wenn Sie eine AIR-Anwendung aktualisieren, behält die aktualisierte Version den Zugriff auf alle vorhandenen Daten im verschlüsselten lokalen Speicher, es sei denn:</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">Die Elemente wurden hinzugefügt, während ihr <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph>-Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt war</li><li class="- topic/li ">Die vorhandene und die aktualisierte Version wurden beide vor AIR 1.5.3 veröffentlicht und das Update wurde mit einer Migrationssignatur signiert</li></ul>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Einschränkungen des verschlüsselten lokalen Speichers</b></p>
	<p class="- topic/p ">Die Daten im verschlüsselten lokalen Speicher sind durch die Authentifizierungsdaten des Betriebssystems des Benutzers geschützt. Andere Entitäten haben keinen Zugriff auf den Speicher, solange sie sich nicht als der betreffende Benutzer anmelden können. Die Daten sind jedoch nicht vor dem Zugriff durch andere Anwendungen, die von einem authentifizierten Benutzer ausgeführt werden, geschützt. Daten, die Ihre Anwendung vor Benutzern geheim halten möchte, zum Beispiel Lizenzschlüssel oder DRM-Schlüssel, sind deshalb nicht sicher. Der verschlüsselte lokale Speicher ist nicht der geeignete Ort für die Speicherung dieser Informationen. Er ist lediglich ein geeigneter Speicherort für die persönlichen Daten eines Benutzers, zum Beispiel Kennwörter.</p>
	
	<p class="- topic/p ">Daten im ELS können aus verschiedenen Gründen verloren gehen. Der Benutzer könnte die Anwendung zum Beispiel deinstallieren und die verschlüsselte Datei löschen. Oder die Herausgeber-ID wird im Rahmen eines Updates geändert. Deshalb sollte der ELS als privater Cachespeicher, nicht als permanenter Datenspeicher betrachtet werden. </p>
	
	<p class="- topic/p ">Der <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph>-Parameter ist veraltet und sollte nicht auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> gesetzt werden. Das Einstellen des Parameters auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> bringt keinerlei zusätzlichen Schutz für Daten. Gleichzeitig geht der Zugriff auf die Daten verloren, wenn die Anwendung aktualisiert wird, selbst wenn die Herausgeber-ID gleich bleibt. </p>
	
	<p class="- topic/p ">Der verschlüsselte lokale Speicher kann langsamer sein, wenn die gespeicherte Datenmenge 10 MB übersteigt.</p>
	
	<p class="- topic/p ">Bei der Deinstallation einer AIR-Anwendung werden die Daten im verschlüsselten lokalen Speicher nicht gelöscht. </p>
	
	<p class="- topic/p ">Zu den bewährten Verfahren bei der Verwendung des verschlüsselten lokalen Speicher gehört Folgendes:</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">Speichern Sie vertrauliche Benutzerdaten, wie Kennwörter, im verschlüsselten lokalen Speicher (indem Sie <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">false</codeph> setzen)</li><li class="- topic/li ">Speichern Sie im verschlüsselten lokalen Speicher keine vertraulichen Anwendungsdaten, wie DRM-Schlüssel oder Lizenz-Token</li><li class="- topic/li ">Stellen Sie für Ihre Anwendung eine Möglichkeit bereit, die im ELS gespeicherten Daten wiederherzustellen, falls sie verloren gehen sollten. Dies ist zum Beispiel möglich, indem der Benutzer ggf. zur erneuten Eingabe seiner Benutzerkontodaten aufgefordert wird. </li><li class="- topic/li ">Verwenden Sie nicht den <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph>-Parameter.</li><li class="- topic/li ">Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> setzen, migrieren Sie gespeicherte Elemente während eines Updates nicht. Erstellen Sie die Daten stattdessen nach dem Update erneut.</li><li class="- topic/li ">Speichen Sie nur relativ kleine Datenmengen. Für große Datenmengen sollten Sie eine AIR-SQL-Datenbank mit Verschlüsselung verwenden.</li></ul>
	
	<p class="- topic/p ">Die Elemente im verschlüsselten lokalen Speicher werden mit einem String gekennzeichnet. Alle Elemente werden als Byte-Array-Daten gespeichert.</p>
	
	<p class="- topic/p ">Daten im verschlüsselten lokalen Speicher werden in einem Unterverzeichnis des Anwendungsdatenverzeichnisses gespeichert; der Unterverzeichnispfad lautet Adobe/AIR/ELS/ gefolgt von der Anwendungs-ID.</p>
	
	</apiDesc><example conref="examples\EncryptedLocalStore.1.as" class="- topic/example "> Mit dem folgenden Codebeispiel wird ein String im verschlüsselten lokalen Speicher gespeichert, abgerufen und dann gelöscht:
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "Bob";
var bytes:ByteArray = new ByteArray();
bytes.writeUTFBytes(str);
EncryptedLocalStore.setItem("firstName", bytes);

var storedValue:ByteArray = EncryptedLocalStore.getItem("firstName");
trace(storedValue.readUTFBytes(storedValue.length)); // "Bob"

EncryptedLocalStore.removeItem("firstName");
</codeblock></example></apiClassifierDetail><apiOperation id="flash.data:EncryptedLocalStore:getItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getItem</apiName><shortdesc class="- topic/shortdesc ">
		Die Daten, die dem angegebenen Namen entsprechen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Wert ist <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder ein leerer String.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die ByteArray-Daten. Wenn für den angegebenen <codeph class="+ topic/ph pr-d/codeph ">name</codeph> keine Daten vorhanden sind, gibt die Methode <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück.
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name des Elements im verschlüsselten lokalen Speicher.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Die Daten, die dem angegebenen Namen entsprechen.
		 
		<p class="- topic/p ">Wenn es kein Element mit dem angegebenen Namen gibt, gibt diese Methode <codeph class="+ topic/ph pr-d/codeph ">null</codeph> zurück.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:removeItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeItem</apiName><shortdesc class="- topic/shortdesc ">
		Entfernt das Element mit dem angegebenen Namen aus dem verschlüsselten lokalen Speicher.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Wert ist <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder ein leerer String.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name des Elements im verschlüsselten lokalen Speicher.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Entfernt das Element mit dem angegebenen Namen aus dem verschlüsselten lokalen Speicher.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:reset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reset</apiName><shortdesc class="- topic/shortdesc ">
		Löscht alle Daten im verschlüsselten lokalen Speicher. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Löscht alle Daten im verschlüsselten lokalen Speicher. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:setItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setItem</apiName><shortdesc class="- topic/shortdesc ">
		Speichert ein ByteArray-Objekt unter dem angegebenen Namen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Wert ist <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder ein leerer String.
		
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name des Elements im verschlüsselten lokalen Speicher.
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Daten.
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stronglyBound</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">(veraltet) Der <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph>-Parameter sollte auf <codeph class="+ topic/ph pr-d/codeph ">false</codeph> (Standardwert) gesetzt werden. Bei der Einstellung auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> kann das gespeicherte Element nicht abgerufen werden, falls Anwendungsdaten geändert werden. Wenn ein Benutzer zum Beispiel ein Update Ihrer Anwendung installiert, kann die aktualisierte Anwendung keine stark gebundenen („strongly bound“) Daten lesen, die zuvor in den verschlüsselten lokalen Speicher geschrieben wurden.
		 
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Speichert ein ByteArray-Objekt unter dem angegebenen Namen.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.data:EncryptedLocalStore:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        Die isSupported-Eigenschaft hat den Wert „true“, wenn die EncryptedLocalStore-Klasse von der aktuellen Plattform unterstützt wird, andernfalls hat sie den Wert „false“.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Meldet, ob der verschlüsselte lokale Speicher im Clientsystem verfügbar ist.
        
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Die <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph>-Eigenschaft hat den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn die EncryptedLocalStore-Klasse von der aktuellen Plattform unterstützt wird, andernfalls hat sie den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
        
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
 Die in einer „SQLIndexSchema“-Instanz enthaltenen Informationen beschreiben einen bestimmten Index in einer Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die in einer „SQLTableSchema“-Instanz enthaltenen Informationen beschreiben eine bestimmte Tabelle in einer Datenbank. Zu den verfügbaren Informationen gehören der Name der verknüpften Tabelle (die <codeph class="+ topic/ph pr-d/codeph ">table</codeph>-Eigenschaft), die SQL-Anweisung, mit der die Indexposition erstellt wurde (die <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>-Eigenschaft) und der Name derIndexposition (die <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Eigenschaft).
 
 <p class="- topic/p ">Um die Indexschemainformationen für eine Datenbank zu erhalten, laden Sie die Schemainformationen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Achten Sie dabei darauf, dass <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph> als Wert für das Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> angegeben ist. Die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> der resultierenden „SQLSchemaResult“-Instanz enthält ein Array mit „SQLIndexSchema“-Instanzen, die die Indizes in der Datenbank repräsentieren.</p>
 
 <p class="- topic/p ">Im Allgemeinen werden „SQLIndexSchema“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLIndexSchema:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLIndexSchema“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der zugeordneten Datenbank. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name des Index.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die SQL-Anweisung, mit der dieser Index erstellt wurde.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Tabelle, mit der dieser Index verbunden ist.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLIndexSchema“-Instanz. Im Allgemeinen wird der „SQLIndexSchema“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/indices" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.indices</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLIndexSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     Der Name der Tabelle, mit der dieser Index verbunden ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Name der Tabelle, mit der dieser Index verbunden ist.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
 Die in einer „SQLTableSchema“-Instanz enthaltenen Informationen beschreiben eine bestimmte Tabelle in einer Datenbank.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die in einer „SQLTableSchema“-Instanz enthaltenen Informationen beschreiben eine bestimmte Tabelle in einer Datenbank. Zu den verfügbaren Informationen gehören der Name der Tabelle (die <codeph class="+ topic/ph pr-d/codeph ">name</codeph>-Eigenschaft), die SQL-Anweisung, mit der die Tabelle erstellt wurde (die <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>-Eigenschaft) und Informationen zu den Tabellenspalten (die <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>-Eigenschaft).
 
 <p class="- topic/p ">Um die Tabellenschemainformationen für eine Datenbank zu erhalten, laden Sie die Schemainformationen mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Achten Sie dabei darauf, dass <codeph class="+ topic/ph pr-d/codeph ">null</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph> als Wert für das Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> angegeben ist. Die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">tables</codeph> der resultierenden „SQLSchemaResult“-Instanz enthält ein Array mit „SQLTableSchema“-Instanzen, die die Tabellen in der Datenbank repräsentieren.</p>
 
 <p class="- topic/p ">Im Allgemeinen werden „SQLTableSchema“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLTableSchema:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLTableSchema“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der zugeordneten Datenbank. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Name der Tabelle.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die SQL-Anweisung, mit der die Tabelle erstellt wurde.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Array mit „SQLColumnSchema“-Instanzen, die die Tabellenspalten beschreiben.
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLTableSchema“-Instanz. Im Allgemeinen wird der „SQLTableSchema“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Schemainformationen für eine Datenbank erhalten Sie durch einen Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/tables" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.tables</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLTableSchema:columns:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columns</apiName><shortdesc class="- topic/shortdesc ">
     Ein Array mit „SQLColumnSchema“-Instanzen, die Schemainformationen zu den Tabellenspalten enthalten.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Array mit „SQLColumnSchema“-Instanzen, die Schemainformationen zu den Tabellenspalten enthalten. Wenn der Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQlConnection.loadSchema()</codeph> angibt, dass Spalteninformationen aus dem Ergebnis ausgeschlossen werden sollen, handelt es sich bei der <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>-Eigenschaft um ein leeres Array (ein Array, dessen <codeph class="+ topic/ph pr-d/codeph ">length</codeph>-Eigenschaft den Wert „0“ hat).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
 Die „SQLResult“-Klasse bietet Zugriff auf Daten, die auf die Ausführung einer SQL-Anweisung (eine „SQLStatement“-Instanz) hin zurückgegeben wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die „SQLResult“-Klasse bietet Zugriff auf Daten, die auf die Ausführung einer SQL-Anweisung (eine „SQLStatement“-Instanz) hin zurückgegeben wurden.
 
 <p class="- topic/p ">Der Zugriff auf die SQLResult-Instanz einer SQL-Anweisung erfolgt durch den Aufruf der <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.getResult()</codeph>-Methode, oder sie wird als Argument an die Ergebnisprozedur einer Responder-Instanz übergeben, die in einem Aufruf von <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> angegeben wird. Im Allgemeinen werden „SQLResult“-Instanzen nicht direkt aufgrund von Entwicklercode erstellt.</p>
 
 <p class="- topic/p ">Mit einem SQLResult-Objekt können Sie: auf die von einer <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zurückgegebenen Datenzeilen zugreifen (mithilfe der <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft), die Zeilenbezeichnerinformationen einer <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung abrufen (mithilfe der <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph>-Eigenschaft), die Anzahl der von einer <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Anweisung betroffenen Zeilen bestimmen (mithilfe der <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph>-Eigenschaft) oder bestimmen, ob es weitere <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Ergebniszeilen gibt, die nicht abgerufen wurden (mithilfe der <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>-Eigenschaft).</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.getResult()</linktext></link><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links><apiConstructor id="flash.data:SQLResult:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine „SQLResult“-Instanz.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Zeilen-Array, das nach der Anweisungsausführung zurückgegeben wurde. Wenn die Anweisung keine Zeilen zurückgibt, muss dieser Wert „null“ lauten.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowsAffected</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, auf wie viele Zeilen sich die ausgeführte Anweisung ausgewirkt hat.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">complete</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt an, ob weitere Zeilen aufgerufen werden können oder ob alle Daten zurückgegeben wurden.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Handelte es sich bei der Anweisung um einen SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Vorgang, ist dies der neue eindeutige Bezeichner der Zeile.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine „SQLResult“-Instanz. Im Allgemeinen wird der „SQLResult“-Konstruktor nicht direkt durch den Entwicklercode aufgerufen. Um eine SQLResult-Instanz abzurufen, die mit einer bestimmten SQLStatement-Instanz verknüpft ist, müssen Sie die <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>-Methode dieser Instanz aufrufen. Außerdem wird eine SQLResult-Instanz als Argument an die Ergebnisprozedurfunktion übergeben, wenn eine Responder-Instanz in einem Aufruf der <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>-Methode angegeben wird.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLResult:complete:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, ob alle aus einer Anweisungsausführung resultierenden Daten zurückgegeben wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, ob alle aus einer Anweisungsausführung resultierenden Daten zurückgegeben wurden.
     
     <p class="- topic/p ">Wenn die Anweisung eine oder mehrere Zeilen zurückgibt, gibt diese Eigenschaft an, ob alle Zeilen zurückgegeben wurden. Wird die Methode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> eines „SQLStatement“-Objekts mit einem <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argumentwert aufgerufen, wird nur die angegebene Anzahl Zeilen der resultierenden Daten in der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">data</codeph> des „SQLResult“-Objekts zurückgegeben. Durch spätere Aufrufe von <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> werden weitere Daten zur Verfügung gestellt. Mit dieser Eigenschaft wird die Rückgabe der letzten Ergebnisse bestimmt.</p>
     
     <p class="- topic/p ">Da die Anzahl der Zeilen bei der Ausführung nicht bekannt ist, gilt die Anweisungsausführung erst als abgeschlossen, wenn sich der Datenbankcursor jenseits der letzten Zeile befindet. Wenn die Methode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> mit einem <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>-Argument aufgerufen wird, muss die Abfrage mindestens eine Zeile mehr enthalten als die Gesamtzahl der Zeilen im Ergebnis, damit die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> der resultierenden „SQLResult“-Instanz den Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> aufweist.</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     Die als Ergebnis der Anweisungsausführung zurückgegebenen Daten, insbesondere wenn eine SQL „SELECT“-Anweisung ausgeführt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die als Ergebnis der Anweisungsausführung zurückgegebenen Daten, insbesondere wenn eine SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung ausgeführt wird.
     
     <p class="- topic/p ">Wenn eine Anweisung eine oder mehrere Zeilen zurückgibt, ist diese Eigenschaft ein Array mit Objekten, die die Zeilen der Ergebnisdaten repräsentiert. Jedes Objekt in diesem Array verfügt über Eigenschaftennamen, die den Spaltennamen aus den Ergebnisdaten entsprechen.</p>
	 
	 <p class="- topic/p ">Angenommen, Sie führen die SQL-<codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung aus:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT lastName, firstName
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">employees</codeph>-Tabelle 10 Zeilen enthält, ist die <codeph class="+ topic/ph pr-d/codeph ">SQLResult.data</codeph>-Eigenschaft ein Array mit 10 Elementen. Jedes Element ist ein Objekt mit zwei Eigenschaften, <codeph class="+ topic/ph pr-d/codeph ">lastName</codeph> und <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph>.</p>
	 
	 <p class="- topic/p ">Die Situation ist komplexer, wenn Sie eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung mit einer komplexen Ergebnisspalte, zum Beispiel einer Aggregatfunktion, verwenden. Angenommen, Sie führen die folgende SQL aus:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary)
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">In den Ergebnissen dieser Anweisung hat jedes Objekt im <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Array zwei Eigenschaften, nämlich <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> und <codeph class="+ topic/ph pr-d/codeph ">SUM(salary)</codeph>. „SUM(salary)“ ist jedoch kein gültiger Bezeichner. Wenn Sie eine berechnete Spalten verwenden, zum Beispiel ein Aggregat oder eine andere Funktion, geben Sie in Ihrer SQL-Anweisung einen Aliasnamen für die berechnete Spalte an. Der Aliasname wird als Eigenschaftenname in den Ergebnisdatenobjekten verwendet. Betrachten Sie zum Beispiel die folgende Alternative zur vorherigen Anweisung:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary) AS salarySubtotal
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">Im <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Array dieser Anweisung haben die Ergebnisobjekte zwei Eigenschaften mit den Namen <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> und <codeph class="+ topic/ph pr-d/codeph ">salarySubtotal</codeph>.</p>
	 
	 <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft ist immer ein Array, unabhängig davon, wie viele Reihen und Spalten im Ergebnissatz enthalten sind. Die folgende <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung resultiert in einer Zeile und einer Spalte, was einem einzelnen Wert entspricht:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT COUNT(~~) AS numEmployees
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">Nach dem Ausführen der Abfrage enthält die <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Eigenschaft ein Array-Objekt mit einem Element. Dieses Element ist ein Objekt mit einer einzelnen Eigenschaft, <codeph class="+ topic/ph pr-d/codeph ">numEmployees</codeph>.</p>
	 
	 <p class="- topic/p ">Falls es in den Ergebnisdaten doppelte Spaltennamen gibt, zum Beispiel, wenn die <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung zwei verschiedene <codeph class="+ topic/ph pr-d/codeph ">id</codeph>-Spalten aus zwei verschiedenen Tabellen enthält, erhalten die doppelten Namen Eigenschaftennamen entsprechend dem Wert der <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph>-Eigenschaft. Standardmäßig werden die Namen der einzelnen Spalten als Eigenschaftennamen verwendet, wenn es jedoch mehrere Spalten mit demselben Namen im Ergebnissatz gibt, wird für die identisch benannten Spalten die lange Namensform <codeph class="+ topic/ph pr-d/codeph ">[table-name]_[column-name]</codeph> verwendet. Dieses Verhalten kann durch das Festlegen der <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph>-Eigenschaft geändert werden.</p>
	 
	 <p class="- topic/p ">Standardmäßig handelt es sich bei den Objekten im <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Array um Object-Instanzen. Wenn der Wert der <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.itemClass</codeph>-Eigenschaft jedoch auf eine Klasse gesetzt wird, werden die Elemente des <codeph class="+ topic/ph pr-d/codeph ">data</codeph>-Arrays stattdessen als Instanzen dieser Klasse erstellt. Für jede Spalte im Ergebnisdatensatz muss die <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph>-Klasse eine Eigenschaft aufweisen, deren Name genau dem Spaltennamen entspricht.</p> 
	 
	 <p class="- topic/p ">Wenn eine Anweisung keine Daten zurückgibt, hat diese Eigenschaft den Wert <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Dies ist der Fall, wenn die Anweisung keine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung ist oder wenn sie eine <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung ist, die 0 Zeilen zurückgibt.</p>
     
	 </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> Das folgende Beispiel demonstriert, wie mithilfe der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> zur Laufzeit Instanzen einer benutzerdefinierten Klasse aus den Ergebnissen einer SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>-Anweisung erstellt werden.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">SQLConnection.columnNameStyle</linktext></link><link href="flash.data.xml#SQLStatement/itemClass" class="- topic/link "><linktext class="- topic/linktext ">SQLStatement.itemClass</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     Der letzte von einer SQL „INSERT“-Anweisung erzeugte Zeilenbezeichner.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der letzte von einer SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung erzeugte Zeilenbezeichner.
	 
     <p class="- topic/p ">Handelt es sich bei der ausgeführten Anweisung nicht um eine <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-Anweisung, lautet der Wert „0“.</p>
	 
	 <p class="- topic/p ">Ein Zeilenbezeichner dient zur eindeutigen Kennzeichnung einer Zeile in einer Tabelle in der Datenbank. Der Wert wird häufig von der Datenbank erzeugt.</p>
	 
	 <p class="- topic/p ">Weitere Informationen zu Primärschlüsseln und generierten Zeilenbezeichnern finden Sie in den Abschnitten „CREATE TABLE“ und „Ausdrücke“ im Anhang „<xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">SQL-Unterstützung in lokalen Datenbanken</xref>“.</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:rowsAffected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rowsAffected</apiName><shortdesc class="- topic/shortdesc ">
     Gibt an, wieviele Zeilen von dem Vorgang betroffen wurden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt an, wieviele Zeilen von dem Vorgang betroffen wurden. Es werden nur Änderungen gezählt, die direkt von einer <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Anweisung angegeben werden.
     
     <p class="- topic/p ">Zusätzliche Änderungen, die von Auslösern verursacht werden, werden nicht gezählt. Mithilfe der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.totalChanges</codeph> können Sie die Gesamtzahl aller Änderungen, einschließlich derjenigen, die von Auslösern verursacht wurden, in Erfahrung bringen.</p>
	 
	 <p class="- topic/p ">Wenn es sich bei der entsprechenden SQL-Methode um eine <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>-Anweisung ohne <codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph>-Klausel handelt (d. h. alle in der Tabelle enthaltenen Zeilen werden durch die Anweisung gelöscht), hat die <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph>-Eigenschaft immer den Wert „0“. Dabei ist es gleichgültig, wie viele Zeilen gelöscht wurden. Wenn Sie wissen müssen, wie viele Zeilen gelöscht wurden, können Sie die <codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph>-Klausel <codeph class="+ topic/ph pr-d/codeph ">WHERE 1 = 1</codeph> einschließen. In diesem Fall werden alle Zeilen gelöscht, und die <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph>-Eigenschaft gibt die genaue Anzahl der gelöschten Zeilen wieder. Werden viele Zeilen gelöscht, kann sich dies jedoch nachteilig auf die Leistung der Anweisung auswirken.</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/totalChanges" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.totalChanges</linktext></link></related-links></apiValue></apiClassifier></apiPackage>