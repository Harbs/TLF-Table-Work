<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.geom" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.geom</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.geom:Utils3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Utils3D</apiName><shortdesc class="- topic/shortdesc "> 
 Die Utils3D-Klasse enthält statische Methoden, die die Implementierung bestimmter dreidimensionaler Matrixvorgänge vereinfachen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Dienstklasse mit statischen Methoden, die die Implementierung bestimmter dreidimensionaler Matrixvorgänge vereinfachen. 
 
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 Die Utils3D-Klasse enthält statische Methoden, die die Implementierung bestimmter dreidimensionaler Matrixvorgänge vereinfachen.
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Vector3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Vector3D</linktext></link><link href="flash.geom.xml#Transform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform</linktext></link><link href="flash.geom.xml#PerspectiveProjection" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.PerspectiveProjection</linktext></link><link href="flash.display.xml#Graphics" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics</linktext></link><link href="flash.display.xml#GraphicsTrianglePath" class="- topic/link "><linktext class="- topic/linktext ">flash.display.GraphicsTrianglePath</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links><apiOperation id="flash.geom:Utils3D:pointTowards" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pointTowards</apiName><shortdesc class="- topic/shortdesc ">
    Interpoliert die Ausrichtung eines Objekts gegenüber einer Position.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine geänderte Version des Matrix3D-Objekts, wie im zweiten Parameter angegeben. Um ein Anzeigeobjekt mithilfe der <codeph class="+ topic/ph pr-d/codeph ">pointTowards()</codeph>-Methode zu transformieren, setzen Sie die Matrix3D-Eigenschaft des Anzeigeobjekts auf das zurückgegebene Matrix3D-Objekt.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">percent</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine Zahl zwischen 0 und 1, die das Objekt inkrementell in Richtung Ziel dreht.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">mat</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Matrix3D-Eigenschaft des Objekts, das transformiert wird. 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pos</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die auf die Welt bezogene Position des Zielobjekts. „Auf die Welt bezogen“ bezeichnet die Transformation des Objekts relativ zum Raum der Welt und den Koordinaten, die angeben wo die Objekte dort platziert sind.  
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">at</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der objektbezogene Vektor, der festlegt, in welche Richtung das Anzeigeobjekt weist. „Objektbezogen“ bezeichnet die Transformation des Objekts relativ zum Objektraum, dem eigenen Bezugsrahmen des Objekts mit seinem eigenen Koordinatensystem. Der Standardwert ist (0,0,-1).
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">up</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der objektbezogene Vektor, der die Aufwärtsrichtung des Anzeigeobjekts definiert. Wenn das Objekt so gezeichnet ist, dass es von oben nach unten zeigt, dann ist die <i class="+ topic/ph hi-d/i ">+z</i>-Achse der nach oben zeigende Vektor. „Objektbezogen“ bezeichnet die Transformation des Objekts relativ zum Objektraum, dem eigenen Bezugsrahmen des Objekts mit seinem eigenen Koordinatensystem. Der Standardwert ist (0,-1,0).
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Interpoliert die Ausrichtung eines Objekts gegenüber einer Position. Die <codeph class="+ topic/ph pr-d/codeph ">pointTowards()</codeph>-Methode kombiniert die Funktionen der <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.pointAt()</codeph>- und der <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.interpolateTo()</codeph>-Methode.  
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">pointTowards()</codeph>-Methode ermöglicht die direkte Änderung der Ausrichtung. Sie zerlegt die Matrix3D des Anzeigeobjekts und ersetzt die Drehungselemente durch Elemente, die eine prozentweise Drehung in Richtung der Zielposition bewirken. Das Objekt kann sich inkrementell in Richtung Ziel drehen, während es sich weiterhin in seine eigene Richtung bewegt. Aufeinanderfolgende Aufrufe der <codeph class="+ topic/ph pr-d/codeph ">pointTowards()</codeph>-Methode gefolgt von einer Versetzungsmethode ermöglichen eine Animation, bei der ein Objekt einem sich bewegenden Ziel folgt. Versetzen Sie das Objekt zuerst einen Prozentpunkt in Richtung Ziel und bewegen Sie es dann inkrementell entlang der Achse.</p> 
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/pointAt()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.pointAt()</linktext></link><link href="flash.geom.xml#Matrix3D/interpolateTo()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.interpolateTo()</linktext></link><link href="flash.geom.xml#Matrix3D/interpolate()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.interpolate()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Utils3D:projectVectors" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">projectVectors</apiName><shortdesc class="- topic/shortdesc ">
    Mithilfe eines Matrix3D-Objekts wird ein Vektor dreidimensionaler Raumkoordinaten („verts“) auf einen Vektor zweidimensionaler Raumkoordinaten („projectedVerts“) projiziert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">m</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Matrix3D-Projektionsobjekt, das die Projektionstransformation implementiert. Sie können ein Matrix3D-Projektionsobjekt mithilfe der <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.rawData</codeph>-Eigenschaft erstellen.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">verts</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Zahlenvektor, bei dem jeweils 3 Zahlen die <i class="+ topic/ph hi-d/i ">x</i>-, <i class="+ topic/ph hi-d/i ">y</i>- und <i class="+ topic/ph hi-d/i ">z</i>-Koordinaten eines dreidimensionalen Raums darstellen, beispielsweise <codeph class="+ topic/ph pr-d/codeph ">Vector3D(x,y,z)</codeph>. 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">projectedVerts</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Zahlenvektor, bei dem jeweils zwei Zahlen eine projizierte zweidimensionale Koordinate darstellen, beispielsweise <codeph class="+ topic/ph pr-d/codeph ">Point(x,y)</codeph>. Sie sollten den Vektor vorab zuweisen. Die <codeph class="+ topic/ph pr-d/codeph ">projectVectors()</codeph>-Methode füllt die Werte für jeden projizierten Punkt aus.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uvts</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Zahlenvektor, bei dem jeweils drei Zahlen die <i class="+ topic/ph hi-d/i ">u</i>-, <i class="+ topic/ph hi-d/i ">v</i>- und <i class="+ topic/ph hi-d/i ">t</i>-Elemente der <codeph class="+ topic/ph pr-d/codeph ">uvt</codeph>-Daten darstellen. Die Elemente <i class="+ topic/ph hi-d/i ">u</i>- und <i class="+ topic/ph hi-d/i ">v</i> stellen die Texturkoordinate für jeden projizierten Punkt dar. Der <i class="+ topic/ph hi-d/i ">t</i>-Wert ist der Projektionstiefenwert, die Entfernung zwischen Auge und Vector3D-Objekt im Anzeige- oder Sichtraum. Sie sollten den Vektor vorab zuweisen und den <i class="+ topic/ph hi-d/i ">u</i>- und <i class="+ topic/ph hi-d/i ">v</i>-Wert festlegen. Die <codeph class="+ topic/ph pr-d/codeph ">projectVectors()</codeph>-Methode füllt den <i class="+ topic/ph hi-d/i ">t</i>-Wert für jeden projizierten Punkt aus.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Projiziert einen Vektor dreidimensionaler Raumkoordinaten auf einen Vektor zweidimensionaler Raumkoordinaten.
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Mithilfe eines Matrix3D-Objekts wird ein Vektor dreidimensionaler Raumkoordinaten (<i class="+ topic/ph hi-d/i ">verts</i>) auf einen Vektor zweidimensionaler Raumkoordinaten (<codeph class="+ topic/ph pr-d/codeph ">projectedVerts</codeph>) projiziert. Das projizierte Vector-Objekt sollte zugewiesen werden, bevor es als Parameter verwendet wird. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">projectVectors()</codeph>-Methode setzt auch den <i class="+ topic/ph hi-d/i ">t</i>-Wert der <i class="+ topic/ph hi-d/i ">uvt</i>-Daten. Sie sollten vorab einen Vektor zuweisen, der die <i class="+ topic/ph hi-d/i ">uvts</i>-Daten für jeden Koordinatensatz des projizierten Vektors enthält. Legen Sie auch den <i class="+ topic/ph hi-d/i ">u</i>- und <i class="+ topic/ph hi-d/i ">v</i>-Wert der <i class="+ topic/ph hi-d/i ">uvt</i>-Daten fest. Die <i class="+ topic/ph hi-d/i ">uvt</i>-Daten sind ein Vektor normalisierter Koordinaten, die für Texturmapping verwendet werden. Die UV-Koordinaten (0,0) entsprechen dem linken oberen Bereich der Bitmap, während (1,1) dem rechten unteren Bereich entspricht.</p>
    
    <p class="- topic/p ">Diese Methode kann gemeinsam mit der <codeph class="+ topic/ph pr-d/codeph ">Graphics.drawTriangles()</codeph>-Methode und der <codeph class="+ topic/ph pr-d/codeph ">GraphicsTrianglePath</codeph>-Klasse verwendet werden.</p>  
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Graphics/drawTriangles()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.drawTriangles()</linktext></link><link href="flash.display.xml#GraphicsTrianglePath" class="- topic/link "><linktext class="- topic/linktext ">flash.display.GraphicsTrianglePath</linktext></link><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Utils3D/projectVector()" class="- topic/link "><linktext class="- topic/linktext ">projectVector()</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Utils3D:projectVector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">projectVector</apiName><shortdesc class="- topic/shortdesc ">
    Mithilfe eines Matrix3D-Projektionsobjekts wird ein Vector3D-Objekt von einer Raumkoordinate auf eine andere projiziert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Vector3D-Objekt mit einer transformierten Raumkoordinate.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">m</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Matrix3D-Projektionsobjekt, das die Projektionstransformation implementiert. Wenn ein Anzeigeobjekt über ein PerspectiveProjection-Objekt verfügt, können Sie die <codeph class="+ topic/ph pr-d/codeph ">perspectiveProjection.toMatrix()</codeph>-Methode verwenden, um ein Matrix3D-Projektionsobjekt zu erstellen, das auf die untergeordneten Objekte des Anzeigeobjekts angewendet wird. Für komplexere Projektionen verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">matrix3D.rawData</codeph>-Eigenschaft zur Erstellung einer benutzerdefinierten Projektionsmatrix. Es gibt keine integrierte Matrix3D-Methode zur Erstellung eines Matrix3D-Projektionsobjekts.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">v</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das auf eine neue Raumkoordinate projiziert wird.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Mithilfe eines Matrix3D-Projektionsobjekts wird ein Vector3D-Objekt von einer Raumkoordinate an eine andere projiziert. Die <codeph class="+ topic/ph pr-d/codeph ">projectVector()</codeph>-Methode funktioniert wie die <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.transformVector()</codeph>-Methode, mit dem Unterschied, dass die <codeph class="+ topic/ph pr-d/codeph ">projectVector()</codeph>-Methode das <i class="+ topic/ph hi-d/i ">x</i>-, <i class="+ topic/ph hi-d/i ">y</i>- und <i class="+ topic/ph hi-d/i ">z</i>-Element des ursprünglichen Vector3D-Objekts durch den Projektionstiefenwert dividiert. Der Tiefenwert ist die Entfernung zwischen Auge und Vector3D-Objekt im Anzeige- oder Sichtraum. Der Standardwert dieser Entfernung ist der Wert des <i class="+ topic/ph hi-d/i ">z</i>-Elements.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/transformVector()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.transformVector()</linktext></link><link href="flash.geom.xml#Utils3D/projectVectors()" class="- topic/link "><linktext class="- topic/linktext ">projectVectors()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="flash.geom:Vector3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Vector3D</apiName><shortdesc class="- topic/shortdesc "> 
 Die Vector3D-Klasse stellt einen Punkt oder eine Position im dreidimensionalen Raum unter Verwendung der kartesischen Koordinaten x, y und z dar.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 Die Vector3D-Klasse stellt einen Punkt oder eine Position im dreidimensionalen Raum unter Verwendung der kartesischen Koordinaten x, y und z dar. Wie in einem zweidimensionalen Raum stellt die <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-Eigenschaft die horizontale und die <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaft die vertikale Achse dar. Die <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft stellt im dreidimensionalen Raum die Tiefe dar. Der Wert der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-Eigenschaft erhöht sich, wenn sich das Objekt nach rechts bewegt. Der Wert der <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaft erhöht sich, wenn sich das Objekt nach unten bewegt. Der Wert der <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft erhöht sich, wenn sich das Objekt vom Blickpunkt wegbewegt. Durch perspektivische Projektion und Skalierung erscheint das Objekt größer, wenn es näher, und kleiner, wenn es weiter vom Bildschirm entfernt ist. Wie bei einem rechtsseitigen dreidimensionalen Koordinatensystem zeigt die positive z-Achse vom Betrachter weg und der Wert der <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft erhöht sich, wenn sich das Objekt vom Auge des Betrachters wegbewegt. Der Ursprungspunkt (0,0,0) des globalen Raums ist die linke obere Ecke der Bühne. 
   
 <p class="- topic/p "><adobeimage alt="X, Y, Z-Achsen" href="../../images/xyzAxes.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
 <p class="- topic/p ">Die Vector3D-Klasse kann auch eine Richtung darstellen, einen Pfeil, der vom Ursprung der Koordinaten, z. B. (0,0,0) zu einem Endpunkt zeigt, oder eine Gleitkommakomponente eines RGB (Rot, Grün, Blau)-Farbmodells.</p> 
 
 <p class="- topic/p ">Die Quaternionschreibweise führt ein viertes Element ein, die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft, die zusätzliche Ausrichtungsinformationen bereitstellt. Die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft kann beispielsweise einen Drehwinkel eines Vector3D-Objekts bestimmen. Die Kombination aus Drehwinkel und den Koordinaten x, y, und z bestimmt die Ausrichtung des Anzeigeobjekts. Hier sehen Sie eine Darstellung eines Vector3D-Elements in Matrixschreibweise:</p>
 
 <p class="- topic/p "><adobeimage alt="Vector3D-Elemente" href="../../images/Vector3Delements.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Utils3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Utils3D</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links><apiConstructor id="flash.geom:Vector3D:Vector3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Vector3D</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine Instanz eines Vector3D-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das erste Element, beispielsweise die x-Koordinate. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das zweite Element, beispielsweise die y-Koordinate. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">z</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das dritte Element, beispielsweise die z-Koordinate. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">w</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein optionales Element für zusätzliche Daten wie etwa den Drehwinkel. 
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine Instanz eines Vector3D-Objekts. Wenn Sie keinen Parameter für den Konstruktor festlegen, wird ein Vector3D-Objekt mit den Elementen (0,0,0,0) erstellt.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:Vector3D:add" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">add</apiName><shortdesc class="- topic/shortdesc ">
    Addiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts zum Wert des x-, y- und z-Elements eines anderen Vector3D-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt, das das Ergebnis der Addition des aktuellen Vector3D-Objekts zu einem anderen Vector3D-Objekt ist.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das zum aktuellen Vector3D-Objekt addiert wird.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Addiert das aktuelle Vector3D-Objekt zu einem anderen, sodass ein neues Vector3D-Objekt entsteht. 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Addiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts zum Wert des x-, y- und z-Elements eines anderen Vector3D-Objekts. Die <codeph class="+ topic/ph pr-d/codeph ">add()</codeph>-Methode verändert das aktuelle Vector3D-Objekt nicht. Stattdessen gibt es ein neues Vector3D-Objekt mit den neuen Werten zurück.
    
    <p class="- topic/p ">Werden zwei Vektoren addiert, so ist das Ergebnis ein Ergebnisvektor. Die Visualisierung des Ergebnisses kann erfolgen, indem ein Vektor vom Ausgangs- oder Startpunkt des ersten Vektors zur Spitze bzw. zum Endpunkt des zweiten Vektors gezeichnet wird. Der Ergebnisvektor ist die Entfernung zwischen dem Ausgangspunkt des ersten und dem Endpunkt des zweiten Vektors.</p>   
    
    <p class="- topic/p "><adobeimage alt="Vector3D-Ergebnisvektor" href="../../images/resultantVector3D.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/incrementBy()" class="- topic/link "><linktext class="- topic/linktext ">incrementBy()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:angleBetween" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">angleBetween</apiName><shortdesc class="- topic/shortdesc ">
    Gibt den Wert im Bogenmaß (in Radiant) zwischen zwei Vektoren zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Winkel zwischen zwei Vector3D-Objekten.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das erste Vector3D-Objekt.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">b</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das zweite Vector3D-Objekt.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt den Wert im Bogenmaß (in Radiant) zwischen zwei Vektoren zurück. Der zurückgegebene Winkel ist das kleinste Bogenmaß (in Radiant), um den das erste Vector3D-Objekt gedreht wird, bis es mit dem zweiten Vector3D-Objekt zusammenfällt. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">angleBetween()</codeph>-Methode ist eine statische Methode. Sie können sie direkt als Methode der Vector3D-Klasse verwenden.</p>
    
    <p class="- topic/p ">Für die Umrechnung zwischen Grad und Radiant verwenden Sie die folgende Formel:</p> 
    
    <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Radiant = Math.PI/180 ~~ Grad</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    Gibt ein neues Vector3D-Objekt zurück, das eine genaue Kopie des aktuellen Vector3D-Objekts ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Vector3D-Objekt, das eine Kopie des aktuellen Vector3D-Objekts ist.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt ein neues Vector3D-Objekt zurück, das eine genaue Kopie des aktuellen Vector3D-Objekts ist.
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:crossProduct" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">crossProduct</apiName><shortdesc class="- topic/shortdesc ">
    Gibt ein neues Vector3D-Objekt zurück, das senkrecht (im rechten Winkel) zum aktuellen und einem weiteren Vector3D-Objekt steht.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Vector3D-Objekt, das senkrecht (im rechten Winkel) zum aktuellen und dem als Parameter angegebenen Vector3D-Objekt steht.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein zweites Vector3D-Objekt. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt ein neues Vector3D-Objekt zurück, das senkrecht (im rechten Winkel) zum aktuellen und einem weiteren Vector3D-Objekt steht. Wenn die Koordinaten des zurückgegebenen Vector3D-Objekts (0,0,0) sind, stehen die beiden Vector3D-Objekte im rechten Winkel zueinander.
    
    <p class="- topic/p "><adobeimage alt="Kreuzprodukt" href="../../images/crossproduct.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    <p class="- topic/p ">Sie können das normalisierte Kreuzprodukt zweier Scheitelpunkte einer Polygonoberfläche mit dem normalisierten Vektor des Kamera- oder Betrachterblickpunkts verwenden, um ein Punktprodukt zu erhalten. Der Wert des Punktprodukts gibt an, ob eine Oberfläche eines dreidimensionalen Objekts vom Blickpunkt aus verborgen ist.</p>
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/dotProduct()" class="- topic/link "><linktext class="- topic/linktext ">dotProduct()</linktext></link><link href="flash.geom.xml#Vector3D/normalize()" class="- topic/link "><linktext class="- topic/linktext ">normalize()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:decrementBy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decrementBy</apiName><shortdesc class="- topic/shortdesc ">
    Dekrementiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts um den Wert des x-, y- und z-Elements des angegebenen Vector3D-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das die Werte enthält, die vom aktuellen Vector3D-Objekt subtrahiert werden.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Dekrementiert das aktuelle Vector3D-Objekt um ein anderes Vector3D-Objekt.  
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dekrementiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts um den Wert des x-, y- und z-Elements des angegebenen Vector3D-Objekts. Anders als die <codeph class="+ topic/ph pr-d/codeph ">Vector3D.subtract()</codeph>-Methode ändert die <codeph class="+ topic/ph pr-d/codeph ">decrementBy()</codeph>-Methode das aktuelle Vector3D-Objekt und gibt kein neues Vector3D-Objekt zurück.
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/subtract()" class="- topic/link "><linktext class="- topic/linktext ">subtract()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:distance" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">distance</apiName><shortdesc class="- topic/shortdesc ">
    Gibt die Entfernung zwischen zwei Vector3D-Objekten zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Entfernung zwischen zwei Vector3D-Objekten.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pt1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt als erster dreidimensionaler Punkt. 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pt2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt als zweiter dreidimensionaler Punkt.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt die Entfernung zwischen zwei Vector3D-Objekten zurück. Die <codeph class="+ topic/ph pr-d/codeph ">distance()</codeph>-Methode ist eine statische Methode. Sie können sie direkt als Methode der Vector3D-Klasse verwenden, um den euklidischen Abstand zwischen zwei dreidimensionalen Punkten zu erhalten.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:dotProduct" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">dotProduct</apiName><shortdesc class="- topic/shortdesc ">
    Wenn es sich beim aktuellen und bei dem als Parameter angegebenen Vector3D-Objekt um Einheitsscheitelpunkte handelt, gibt diese Methode den Kosinus des Winkels zwischen den beiden Scheitelpunkten zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Skalar, der das Punktprodukt des aktuellen Vector3D-Objekts und des angegebenen Vector3D-Objekts ist.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das zweite Vector3D-Objekt. 
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt das Punktprodukt des aktuellen Vector3D-Objekts und eines anderen Vector3D-Objekts zurück.
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Wenn es sich beim aktuellen Vector3D-Objekt und bei dem als Parameter angegebenen um Einheitsscheitelpunkte handelt, gibt diese Methode den Kosinus des Winkels zwischen den beiden Scheitelpunkten zurück. Einheitsscheitelpunkte sind Scheitelpunkte, die in dieselbe Richtung zeigen, deren Länge jedoch eins ist. Sie entfernen die Länge des Vektors als Faktor im Ergebnis. Mit der <codeph class="+ topic/ph pr-d/codeph ">normalize()</codeph>-Methode können Sie einen Vektor in einen Einheitsvektor konvertieren. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">dotProduct()</codeph>-Methode sucht den Winkel zwischen zwei Scheitelpunkten. Sie wird auch beim Backface Culling oder bei Beleuchtungsberechnungen verwendet. Backface Culling (Verdeckungsberechnung) ist ein Verfahren zur Bestimmung, welche Oberflächen vom Blickpunkt aus verborgen sind. Sie können die normalisierten Scheitelpunkte vom Blickpunkt (Kamera oder Auge) und das Kreuzprodukt der Scheitelpunkte einer Polygonoberfläche verwenden, um das Punktprodukt zu berechnen. Wenn das Punktprodukt kleiner als null ist, zeigt die Oberfläche zur Kamera bzw. zum Betrachter. Wenn die beiden Einheitsscheitelpunkte im rechten Winkel zueinander stehen, sind sie orthogonal und das Punktprodukt ist null. Wenn die beiden Scheitelpunkte parallel zueinander liegen, ist das Punktprodukt eins.</p>
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/crossProduct()" class="- topic/link "><linktext class="- topic/linktext ">crossProduct()</linktext></link><link href="flash.geom.xml#Vector3D/normalize()" class="- topic/link "><linktext class="- topic/linktext ">normalize()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:equals" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">equals</apiName><shortdesc class="- topic/shortdesc ">
    Ermittelt, ob zwei Vector3D-Objekte gleich sind, indem das x-, y- und z-Element des aktuellen Vector3D-Objekts mit einem angegebenen Vector3D-Objekt verglichen werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert lautet <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn das angegebene Vector3D-Objekt dem aktuellen entspricht; andernfalls ist er <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toCompare</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das mit dem aktuellen Vector3D-Objekt verglichen wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allFour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein optionaler Parameter, der festlegt, ob die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft des Vector3D-Objekts im Vergleich verwendet wird.  
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Ermittelt, ob zwei Vector3D-Objekte gleich sind, indem das x-, y- und z-Element des aktuellen Vector3D-Objekts mit einem angegebenen Vector3D-Objekt verglichen werden. Wenn die Werte dieser Elemente gleich sind, sind die beiden Vector3D-Objekte gleich. Wenn der zweite optionale Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> eingestellt ist, werden alle vier Elemente des Vector3D-Objekts einschließlich der <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft verglichen. 
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/nearEquals()" class="- topic/link "><linktext class="- topic/linktext ">nearEquals()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:incrementBy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">incrementBy</apiName><shortdesc class="- topic/shortdesc ">
    Inkrementiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts um den Wert des x-, y- und z-Elements des angegebenen Vector3D-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das dem aktuellen Vector3D-Objekt hinzugefügt wird.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Inkrementiert das aktuelle Vector3D-Objekt um ein anderes. 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Inkrementiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts um den Wert des x-, y- und z-Elements des angegebenen Vector3D-Objekts. Anders als bei der <codeph class="+ topic/ph pr-d/codeph ">Vector3D.add()</codeph>-Methode ändert die <codeph class="+ topic/ph pr-d/codeph ">incrementBy()</codeph>-Methode das aktuelle Vector3D-Objekt und gibt kein neues Vector3D-Objekt zurück.
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/add()" class="- topic/link "><linktext class="- topic/linktext ">add()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:nearEquals" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">nearEquals</apiName><shortdesc class="- topic/shortdesc ">
    Vergleicht die Elemente des aktuellen Vector3D-Objekts mit den Elementen eines angegebenen Vector3D-Objekts, um festzustellen, ob sie annähernd gleich sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert lautet <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn das angegebene Vector3D-Objekt dem aktuellen annähernd entspricht; andernfalls ist er <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toCompare</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das mit dem aktuellen Vector3D-Objekt verglichen wird. 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tolerance</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine Zahl, die den Toleranzfaktor festlegt. Wenn die Differenz zwischen den Werten des Vector3D-Elements, das im <codeph class="+ topic/ph pr-d/codeph ">toCompare-Parameter</codeph> angegeben ist, und dem aktuellen Vector3D-Element kleiner als die Toleranzzahl ist, werden die beiden Werte als annähernd gleich betrachtet.  
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allFour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein optionaler Parameter, der festlegt, ob die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft des Vector3D-Objekts im Vergleich verwendet wird.  
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Vergleicht die Elemente des aktuellen Vector3D-Objekts mit den Elementen eines angegebenen Vector3D-Objekts, um festzustellen, ob sie annähernd gleich sind. Die beiden Vector3D-Objekte sind annähernd gleich, wenn die Werte aller Elemente der beiden Scheitelpunkte gleich sind oder wenn das Ergebnis des Vergleichs innerhalb des Toleranzbereichs liegt. Die Differenz zwischen zwei Elementen muss kleiner als die im <codeph class="+ topic/ph pr-d/codeph ">tolerance</codeph>-Parameter angegebene Zahl sein. Wenn der dritte optionale Parameter auf <codeph class="+ topic/ph pr-d/codeph ">true</codeph> eingestellt ist, werden alle vier Elemente des Vector3D-Objekts einschließlich der <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft verglichen. Andernfalls werden nur die x-, y- und z-Elemente in den Vergleich einbezogen.
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/equals()" class="- topic/link "><linktext class="- topic/linktext ">equals()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:negate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">negate</apiName><shortdesc class="- topic/shortdesc ">
    Stellt das aktuelle Vector3D-Objekt auf den inversen Wert ein.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Stellt das aktuelle Vector3D-Objekt auf den inversen Wert ein. Das invertierte Objekt wird auch als Spiegelung des ursprünglichen Objekts betrachtet. Der Wert der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft des aktuellen Vector3D-Objekts wird zu <codeph class="+ topic/ph pr-d/codeph ">-x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">-y</codeph> und <codeph class="+ topic/ph pr-d/codeph ">-z</codeph> geändert. 
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
    Konvertiert ein Vector3D-Objekt in einen Einheitsvektor, indem die ersten drei Elemente (x, y, z) durch die Länge des Vektors dividiert werden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Länge des aktuellen Vector3D-Objekts.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Konvertiert ein Vector3D-Objekt in einen Einheitsvektor, indem die ersten drei Elemente (x, y, z) durch die Länge des Vektors dividiert werden. Einheitsscheitelpunkte sind Scheitelpunkte, die eine Richtung aufweisen, deren Länge jedoch eins ist. Sie vereinfachen Vektorberechnungen, indem die Länge als Faktor entfernt wird.
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:project" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">project</apiName><shortdesc class="- topic/shortdesc ">
     Dividiert den Wert der x-, y- und z-Eigenschaft des aktuellen Vector3D-Objekts durch den Wert der w-Eigenschaft.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dividiert den Wert der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft des aktuellen Vector3D-Objekts durch den Wert der <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft. 
     
     <p class="- topic/p ">Wenn das aktuelle Vector3D-Objekt das Ergebnis der Multiplikation eines Vector3D-Objekts mit einem Matrix3D-Projektionsobjekt ist, kann die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft den Transformationswert enthalten. Die <codeph class="+ topic/ph pr-d/codeph ">project()</codeph>-Methode kann die Projektion dann abschließen, indem die Elemente durch die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft dividiert werden. Verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.rawData</codeph>-Eigenschaft, um ein Matrix3D-Projektionsobjekt zu erstellen.</p>
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:scaleBy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">scaleBy</apiName><shortdesc class="- topic/shortdesc ">
    Skaliert das aktuelle Vector3D-Objekt um einen Skalar, eine Größe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">s</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikationswert (Skalar), mit dem ein Vector3D-Objekt skaliert wird.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Skaliert das aktuelle Vector3D-Objekt um einen Skalar, eine Größe. Das x-, y- und z-Element des Vector3D-Objekts wird mit der im Parameter angegebenen Skalarzahl multipliziert. Wenn der Vektor zum Beispiel um zehn skaliert wird, ist das Ergebnis ein zehnmal so langer Vektor. Der Skalar kann auch die Richtung des Vektors ändern. Durch das Multiplizieren des Vektors mit einer negativen Zahl wird die Richtung des Vektors umgekehrt.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Vector3D:subtract" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">subtract</apiName><shortdesc class="- topic/shortdesc ">
    Subtrahiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts vom x-, y- und z-Element eines anderen Vector3D-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Vector3D-Objekt, das der Differenz zwischen dem aktuellen Vector3D-Objekt und dem angegebenen Vector3D-Objekt entspricht.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Vector3D-Objekt, das vom aktuellen Vector3D-Objekt subtrahiert wird.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Subtrahiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts vom Wert des x-, y- und z-Elements eines anderen, sodass ein neues Vector3D-Objekt erstellt wird. 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Subtrahiert den Wert des x-, y- und z-Elements des aktuellen Vector3D-Objekts vom x-, y- und z-Element eines anderen Vector3D-Objekts. Die <codeph class="+ topic/ph pr-d/codeph ">subtract()</codeph>-Methode ändert das aktuelle Vector3D-Objekt nicht. Stattdessen gibt diese Methode ein neues Vector3D-Objekt mit neuen Werten zurück.
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/decrementBy()" class="- topic/link "><linktext class="- topic/linktext ">decrementBy()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Vector3D:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Gibt das aktuelle Vector3D-Objekt als String zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein String, der den Wert der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft enthält.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt das aktuelle Vector3D-Objekt als String zurück. Der String enthält den Wert der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Vector3D:X_AXIS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">X_AXIS</apiName><shortdesc class="- topic/shortdesc ">
    Die x-Achse, definiert als Vector3D-Objekt mit Koordinaten (1,0,0).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die x-Achse, definiert als Vector3D-Objekt mit Koordinaten (1,0,0).
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:Y_AXIS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">Y_AXIS</apiName><shortdesc class="- topic/shortdesc ">
    Die y-Achse, definiert als Vector3D-Objekt mit Koordinaten (0,1,0).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die y-Achse, definiert als Vector3D-Objekt mit Koordinaten (0,1,0).
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:Z_AXIS" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">Z_AXIS</apiName><shortdesc class="- topic/shortdesc ">
    Die z-Achse, definiert als Vector3D-Objekt mit Koordinaten (0,0,1).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die z-Achse, definiert als Vector3D-Objekt mit Koordinaten (0,0,1).
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:w" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">w</apiName><shortdesc class="- topic/shortdesc ">
     Das vierte Element eines Vector3D-Objekts (zusätzlich zu den x-, y- und z-Eigenschaften) kann Daten wie zum Beispiel den Drehwinkel enthalten.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Das vierte Element eines Vector3D-Objekts (zusätzlich zu den <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaften) kann Daten wie zum Beispiel den Drehwinkel enthalten. Der Standardwert ist 0.
     
     <p class="- topic/p ">Die Quaternionschreibweise verwendet einen Winkel als viertes Element bei der Berechnung der dreidimensionalen Drehung. Mit der <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft kann der Drehwinkel um das Vector3D-Objekt definiert werden. Die Kombination des Drehwinkels und der Koordinaten (x,y,z) bestimmt die Ausrichtung des Anzeigeobjekts. </p>
     <p class="- topic/p ">Zusätzlich kann die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft als perspektivischer Verzerrungsfaktor für eine projizierte dreidimensionale Position oder als ein Projektionstransformationswert bei der Darstellung einer dreidimensionalen Koordinate, die in den zweidimensionalen Raum projiziert wird, verwendet werden. Sie können zum Beispiel eine Projektionsmatrix mit der <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.rawData</codeph>-Eigenschaft erstellen, die bei Anwendung auf ein Vector3D-Objekt einen Transformationswert im vierten Element des Vector3D-Objekts (der <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft) erzeugt. Das Dividieren der anderen Elemente des Vector3D-Objekts durch den Transformationswert erzeugt dann ein projiziertes Vector3D-Objekt. Mit der <codeph class="+ topic/ph pr-d/codeph ">Vector3D.project()</codeph>-Methode können Sie die ersten drei Elemente eines Vector3D-Objekts durch sein viertes Element dividieren.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/project()" class="- topic/link "><linktext class="- topic/linktext ">project()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Vector3D:x" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">x</apiName><shortdesc class="- topic/shortdesc ">
     Das erste Element eines Vector3D-Objekts, beispielsweise die x-Koordinate eines Punkts im dreidimensionalen Raum.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Das erste Element eines Vector3D-Objekts, beispielsweise die x-Koordinate eines Punkts im dreidimensionalen Raum. Der Standardwert ist 0.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:y" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">y</apiName><shortdesc class="- topic/shortdesc ">
     Das zweite Element eines Vector3D-Objekts, beispielsweise die y-Koordinate eines Punkts im dreidimensionalen Raum.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Das zweite Element eines Vector3D-Objekts, beispielsweise die y-Koordinate eines Punkts im dreidimensionalen Raum. Der Standardwert ist 0.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:z" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">z</apiName><shortdesc class="- topic/shortdesc ">
     Das dritte Element eines Vector3D-Objekts, beispielsweise die z-Koordinate eines Punkts im dreidimensionalen Raum.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Das dritte Element eines Vector3D-Objekts, beispielsweise die z-Koordinate eines Punkts im dreidimensionalen Raum. Der Standardwert ist 0.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Vector3D:lengthSquared:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lengthSquared</apiName><shortdesc class="- topic/shortdesc ">
    Das Quadrat der Länge des aktuellen Vector3D-Objekts, berechnet mithilfe der x-, y- und z-Eigenschaften.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Das Quadrat der Länge des aktuellen Vector3D-Objekts. 
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Das Quadrat der Länge des aktuellen Vector3D-Objekts, berechnet mithilfe der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaften. Die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft wird nicht berücksichtigt. Verwenden Sie nach Möglichkeit die <codeph class="+ topic/ph pr-d/codeph ">lengthSquared()</codeph>-Methode anstelle des langsameren <codeph class="+ topic/ph pr-d/codeph ">Math.sqrt()</codeph>-Methodenaufrufs der <codeph class="+ topic/ph pr-d/codeph ">Vector3D.length()</codeph>-Methode.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/length" class="- topic/link "><linktext class="- topic/linktext ">length</linktext></link></related-links></apiValue><apiValue id="flash.geom:Vector3D:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
    Die Länge, Ausdehnung des aktuellen Vector3D-Objekts vom Ursprung (0,0,0) zur x-, y-, und z-Koordinate des Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Länge des aktuellen Vector3D-Objekts. 
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die Länge, Ausdehnung des aktuellen Vector3D-Objekts vom Ursprung (0,0,0) zur x-, y-, und z-Koordinate des Objekts. Die <codeph class="+ topic/ph pr-d/codeph ">w</codeph>-Eigenschaft wird nicht berücksichtigt. Ein Einheitsvektor hat eine Länge bzw. Ausdehnung von eins.
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Vector3D/lengthSquared" class="- topic/link "><linktext class="- topic/linktext ">lengthSquared</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:Matrix3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Matrix3D</apiName><shortdesc class="- topic/shortdesc ">
 Die Matrix3D-Klasse stellt eine Transformationsmatrix dar, die die Position und Ausrichtung eines dreidimensionalen (3D-)Anzeigeobjekts bestimmt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Removed the following since it was very unclear. It could be used for a future example however:
 <p class="- topic/p ">To support a camera viewpoint and motion, create a camera class that keeps a Matrix3D object for 
 handling the movement of the display objects relative to the camera. In the camera space, the display objects 
 move in the opposite direction of the camera movement. For example, when the camera moves closer, the objects 
 become bigger. In other words, if the camera moves down the world z axis, the objects moves up 
 the z axis. One way to produce this effect is by setting the Matrix3D object of the camera class 
 to the inverse of the display objects' transformation. If the display objects are children of the <code>root</code> 
 display object, the Matrix3D object of the camera class can be set to the inverse of the <code>root</code> 
 display object. Another option is to have the display objects as children of a camera object.</p>
 
 </internal></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die Matrix3D-Klasse stellt eine Transformationsmatrix dar, die die Position und Ausrichtung eines dreidimensionalen (3D-)Anzeigeobjekts bestimmt. Die Matrix kann Transformationsfunktionen, einschließlich Versetzungen (Neupositionierung entlang der x-, y- oder z-Achse), Drehungen und Skalierungen (Größenänderungen) ausführen. Mithilfe der Matrix3D-Klasse können auch perspektivische Projektionen durchgeführt werden, d. h. Punkte aus dem dreidimensionalen Koordinatenraum werden einer zweidimensionalen (2D-)Ansicht zugeordnet. 
 
 <p class="- topic/p ">In einer Matrix können mehrere Transformationen kombiniert und in einem Vorgang auf ein 3D-Anzeigeobjekt angewendet werden. Eine Matrix kann zum Beispiel auf dreidimensionale Koordinaten angewendet werden, um eine Drehung gefolgt von einer Versetzung auszuführen. </p> 
 
 <p class="- topic/p ">Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft oder eine der Drehungs- oder Skalierungseigenschaften eines Anzeigeobjekts explizit einstellen, wird automatisch ein entsprechendes Matrix3D-Objekt erstellt.</p>
 
 <p class="- topic/p ">Der Zugriff auf das Matrix3D-Objekt eines 3D-Anzeigeobjekts erfolgt über die <codeph class="+ topic/ph pr-d/codeph ">transform.matrix3d</codeph>-Eigenschaft. 2D-Objekte weisen kein Matrix3D-Objekt auf. </p>
 
 <p class="- topic/p ">Der Wert der <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft eines 2D-Objekts ist null und der Wert seiner <codeph class="+ topic/ph pr-d/codeph ">matrix3D</codeph>-Eigenschaft ist <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p> 
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Wenn ein Matrix3D-Objekt zwei verschiedenen Anzeigeobjekten zugewiesen wird, wird ein Laufzeitfehler ausgegeben.</p>
 
 <p class="- topic/p ">Die Matrix3D-Klasse verwendet eine quadratische 4x4-Matrix: eine Tabelle mit vier Zeilen und vier Spalten von Zahlen, die die Daten für die Transformation enthalten. Die ersten drei Zeilen der Matrix enthalten die Daten für die dreidimensionalen Achsen (x,y,z). Die Versetzungsinformationen befinden sich in der letzten Spalte. Die Daten für Ausrichtung und Skalierung befinden sich in den ersten drei Spalten. Die Skalierungsfaktoren sind die diagonalen Zahlen in den ersten drei Spalten. Dies ist eine Darstellung von Matrix3D-Elementen:</p>  
 
 <p class="- topic/p "><adobeimage alt="Matrix3D-Elemente" href="../../images/Matrix3Delements.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
 <p class="- topic/p ">Sie brauchen keine Matrizenrechnung zu beherrschen, um mit der Matrix3D-Klasse zu arbeiten. Sie bietet spezifische Methoden, die Transformationen und Projektionen vereinfachen, zum Beispiel die <codeph class="+ topic/ph pr-d/codeph ">appendTranslation()</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">appendRotation()</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">interpolateTo()</codeph>-Methode. Außerdem können Sie mithilfe der <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode oder der <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph>-Eigenschaft auf die zugrunde liegenden Matrizenelemente zugreifen.</p>
 
 <p class="- topic/p ">Die Eigenschafen für die Achsendrehung von Anzeigeobjekten können zwischengespeichert werden. Das ermöglicht das separate Drehen der Achsen sowie die Verwaltung der verschiedenen Drehungskombinationen. Wird eine Methode eines Matrix3D-Objekts aufgerufen, um ein Anzeigeobjekt zu transformieren, so wird der Drehungszwischenspeicher des Objekts ungültig.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Transform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform</linktext></link><link href="flash.geom.xml#PerspectiveProjection" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.PerspectiveProjection</linktext></link><link href="flash.geom.xml#Vector3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Vector3D</linktext></link><link href="flash.geom.xml#Orientation3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Orientation3D</linktext></link><link href="flash.geom.xml#Utils3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Utils3D</linktext></link><link href="flash.geom.xml#Matrix" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix</linktext></link></related-links><apiConstructor id="flash.geom:Matrix3D:Matrix3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Matrix3D</apiName><shortdesc class="- topic/shortdesc ">
    Erstellt ein Matrix3D-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">v</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vektor von 16 Zahlen, wobei jeweils vier Elemente eine Zeile oder eine Spalte einer 4x4-Matrix darstellen.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Erstellt ein Matrix3D-Objekt. Matrix3D-Objekte können mit einem Vektor von 16 Zahlen initialisiert werden, wobei jeweils vier Elemente eine Zeile oder eine Spalte darstellen. Nachdem das Matrix3D-Objekt erstellt wurde, können Sie mit der <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph>-Eigenschaft auf seine Matrixelemente zugreifen. 
    
    <p class="- topic/p ">Wenn kein Parameter definiert ist, erstellt der Konstruktor ein Identitäts- oder Einheits-Matrix3D-Objekt. In der Matrixschreibweise hat eine Identitätsmatrix einen Wert von eins für alle Elemente in der diagonalen Hauptposition und einen Wert von null für alle anderen Elemente. Der Wert der <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph>-Eigenschaft einer Identitätsmatrix lautet <codeph class="+ topic/ph pr-d/codeph ">1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1</codeph>. Der Positions- oder Versetzungswert der Identitätsmatrix lautet <codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,0)</codeph>, die Rotationseinstellung ist <codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,0)</codeph> und der Skalenwert ist <codeph class="+ topic/ph pr-d/codeph ">Vector3D(1,1,1)</codeph>.</p> 
    
    </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/identity()" class="- topic/link "><linktext class="- topic/linktext ">identity()</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links></apiConstructor><apiOperation id="flash.geom:Matrix3D:appendRotation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendRotation</apiName><shortdesc class="- topic/shortdesc ">
    Hängt eine inkrementelle Drehung an ein Matrix3D-Objekt an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">degrees</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Drehungsgrad.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">axis</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Drehachse oder -richtung. Die üblichen Achsen sind <codeph class="+ topic/ph pr-d/codeph ">X_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(1,0,0)</codeph>), <codeph class="+ topic/ph pr-d/codeph ">Y_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,1,0)</codeph>) und <codeph class="+ topic/ph pr-d/codeph ">Z_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,1)</codeph>). 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pivotPoint</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Punkt, der den Mittelpunkt der Drehung eines Objekts bestimmt. Der Standarddrehpunkt eines Objekts ist sein Registrierungspunkt.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Hängt eine inkrementelle Drehung an ein Matrix3D-Objekt an. Wenn das Matrix3D-Objekt auf ein Anzeigeobjekt angewendet wird, führt die Matrix die Drehung nach den anderen Transformationen im Matrix3D-Objekt aus. 
    
    <p class="- topic/p ">Die Drehung eines Anzeigeobjekts wird durch eine Achse, einen inkrementellen Drehwinkel um die Achse und einen optionalen Drehpunkt als Mittelpunkt der Drehung des Objekts bestimmt. Die Achse kann in jede Richtung zeigen. Die üblichen Achsen sind <codeph class="+ topic/ph pr-d/codeph ">X_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(1,0,0)</codeph>), <codeph class="+ topic/ph pr-d/codeph ">Y_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,1,0)</codeph>) und <codeph class="+ topic/ph pr-d/codeph ">Z_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,1)</codeph>). In der Luftfahrtterminologie wird die Drehung um die y-Achse als Gieren bezeichnet. Die Drehung um die x-Achse heißt Nicken. Die Drehung um die z-Achse wird als Rollen bezeichnet.</p> 
    
    <p class="- topic/p ">Die Transformationsreihenfolge ist von Bedeutung. Eine Drehung gefolgt von einer Versetzungstransformation erzeugt einen anderen Effekt als eine Versetzung gefolgt von einer Drehungstransformation.</p>
    
    <p class="- topic/p ">Der Drehungseffekt ist nicht absolut. Er ist relativ zur aktuellen Position und Ausrichtung. Um absolute Änderungen der Transformationsmatrix vorzunehmen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode. Die <codeph class="+ topic/ph pr-d/codeph ">appendRotation()</codeph>-Methode unterscheidet sich auch von der Achsendrehungseigenschaft des Anzeigeobjekts, zum Beispiel von der <codeph class="+ topic/ph pr-d/codeph ">rotationX</codeph>-Eigenschaft. Die Drehungseigenschaft wird immer vor einer Versetzung angewendet, während die <codeph class="+ topic/ph pr-d/codeph ">appendRotation()</codeph>-Methode relativ zu dem bereits in der Matrix Vorhandenen ausgeführt wird. Um sicherzustellen, dass Sie einen ähnlichen Effekt erzielen wie mit der Achsendrehungseigenschaft des Anzeigeobjekts, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">prependRotation</codeph>-Methode, die die Drehung vor allen anderen Transformationen in der Matrix ausführt.</p>
    
    <p class="- topic/p ">Wenn die Transformation der ￼￼<codeph class="+ topic/ph pr-d/codeph ">appendRotation()</codeph>-Methode auf ein Matrix3D-Objekt eines Anzeigeobjekts angewendet wird, werden die zwischengespeicherten Werte der Drehungseigenschaft des Anzeigeobjekts ungültig.</p> 
    
    <p class="- topic/p ">Eine Möglichkeit, ein Anzeigeobjekt um einen bestimmten Punkt relativ zu seiner Position zu drehen, besteht darin, die Versetzung des Objekts auf den angegebenen Punkt festzulegen, das Objekt mithilfe der <codeph class="+ topic/ph pr-d/codeph ">appendRotation</codeph>-Methode zu drehen und das Objekt dann an die ursprüngliche Position zurückzuversetzen. Im folgenden Beispiel führt das <codeph class="+ topic/ph pr-d/codeph ">myObject</codeph>-3D-Anzeigeobjekt eine Drehung um die y-Achse um die Koordinate (10,10,0) aus.</p>
    
    <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    
    myObject.z = 1; 
    myObject.transform.matrix3D.appendTranslation(10,10,0);
    myObject.transform.matrix3D.appendRotation(1, Vector3D.Y_AXIS);
    myObject.transform.matrix3D.appendTranslation(-10,-10,0);
     
    </codeblock>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/prependRotation()" class="- topic/link "><linktext class="- topic/linktext ">prependRotation()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:appendScale" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendScale</apiName><shortdesc class="- topic/shortdesc ">
    Hängt ein Matrix3D-Objekt durch inkrementelles Skalieren entlang der x-, y- und z-Achse an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">xScale</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der x-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">yScale</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der y-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">zScale</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der z-Achse.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Hängt ein Matrix3D-Objekt durch inkrementelles Skalieren entlang der x-, y- und z-Achse an. Wenn das Matrix3D-Objekt auf ein Anzeigeobjekt angewendet wird, führt die Matrix die Skalierungsänderungen nach den anderen Transformationen im Matrix3D-Objekt aus. Der Standardskalierungsfaktor ist (1.0, 1.0, 1.0).
    
    <p class="- topic/p ">Die Skalierung ist als Satz dreier inkrementeller Änderungen entlang der drei Achsen (x, y, z) definiert. Jede Achse kann mit einer anderen Zahl multipliziert werden. Wenn Skalierungsänderungen auf ein Anzeigeobjekt angewendet werden, erhöht oder verringert sich dessen Größe. Beispiel: Wird die x-, y- und z-Achse auf „2“ gesetzt, so wird die Größe verdoppelt. Dagegen wird sie halbiert wird, wenn die Achsen auf <codeph class="+ topic/ph pr-d/codeph ">0.5</codeph> gesetzt werden. Um sicherzustellen, dass sich die Skalierungstransformation nur auf eine bestimmte Achse auswirkt, setzen Sie die anderen Parameter auf eins. Der Parameter „1“ bedeutet, dass keine Skalierung an der betroffenen Achse stattfindet.</p>
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">appendScale()</codeph>-Methode kann sowohl zum Ändern der Größe als auch zum Verwalten von Verzerrungen, zum Beispiel Strecken oder Stauchen eines Anzeigeobjekts, oder zum Zoomen verwendet werden. Skalierungstransformationen werden während der Drehung und Versetzung eines Anzeigeobjekts automatisch durchgeführt.</p>
    
    <p class="- topic/p ">Die Transformationsreihenfolge ist von Bedeutung. Eine Größenänderung gefolgt von einer Versetzungstransformation erzeugt einen anderen Effekt als eine Versetzung gefolgt von einer Größentransformation.</p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/prependScale()" class="- topic/link "><linktext class="- topic/linktext ">prependScale()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:appendTranslation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendTranslation</apiName><shortdesc class="- topic/shortdesc ">
    Hängt eine inkrementelle Versetzung, eine Neupositionierung entlang der x-, y- und z-Achsen, an ein Matrix3D-Objekt an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine inkrementelle Versetzung entlang der x-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine inkrementelle Versetzung entlang der y-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">z</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine inkrementelle Versetzung entlang der z-Achse.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Hängt eine inkrementelle Versetzung, eine Neupositionierung entlang der x-, y- und z-Achsen, an ein Matrix3D-Objekt an. Wenn das Matrix3D-Objekt auf ein Anzeigeobjekt angewendet wird, führt die Matrix die Versetzungsänderungen nach den anderen Transformationen im Matrix3D-Objekt aus.
    
    <p class="- topic/p ">Die Versetzung ist als ein Satz von drei inkrementellen Änderung entlang der drei Achsen (x,y,z) definiert. Wenn die Transformation auf ein Anzeigeobjekt angewendet wird, bewegt sich das Anzeigeobjekt von seiner aktuellen Position entlang der x-, y- und z-Achse, wie in den Parametern angegeben. Damit die Versetzung nur eine bestimmte Achse betrifft, setzen Sie die anderen Parameter auf null. Der Parameter „0“ bedeutet, dass keine Veränderung an der betroffenen Achse stattfindet.</p> 
    
    <p class="- topic/p ">Die Änderungen durch Versetzung sind nicht absolut. Sie sind relativ zur aktuellen Position und Ausrichtung der Matrix. Um absolute Änderungen der Transformationsmatrix vorzunehmen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode. Die Transformationsreihenfolge ist ebenfalls von Bedeutung. Eine Versetzung gefolgt von einer Drehungstransformation erzeugt einen anderen Effekt als eine Drehung gefolgt von einer Versetzung.</p>
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/prependTranslation()" class="- topic/link "><linktext class="- topic/linktext ">prependTranslation()</linktext></link><link href="flash.geom.xml#Matrix3D/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:append" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">append</apiName><shortdesc class="- topic/shortdesc ">
    Hängt die Matrix an, indem ein anderes Matrix3D-Objekt mit dem aktuellen Matrix3D-Objekt multipliziert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">lhs</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die linke Matrix, die mit dem aktuellen Matrix3D-Objekt multipliziert wird.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Hängt die Matrix an, indem ein anderes Matrix3D-Objekt mit dem aktuellen Matrix3D-Objekt multipliziert wird. Das Ergebnis kombiniert beide Matrixtransformationen. Sie können ein Matrix3D-Objekt mit vielen Matrizen multiplizieren. Das endgültige Matrix3D-Objekt enthält das Ergebnis aller Transformationen.
    
    <p class="- topic/p ">Die Matrixmultiplikation unterscheidet sich von der Matrixaddition. Die Matrixmultiplikation ist nicht kommutativ. Anders ausgedrückt, A mal B ist nicht gleich B mal A. Mit der <codeph class="+ topic/ph pr-d/codeph ">append()</codeph>-Methode wird die Multiplikation von links ausgeführt, das heißt, das <codeph class="+ topic/ph pr-d/codeph ">lhs</codeph>-Matrix3D-Objekt befindet sich links vom Multiplikationsoperator.</p>
    
    <codeph class="+ topic/ph pr-d/codeph ">thisMatrix = lhs ~~ thisMatrix;</codeph>
      
    <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">append()</codeph>-Methode zum ersten Mal aufgerufen wird, nimmt sie eine Änderung relativ zum übergeordneten Raum vor. Nachfolgende Aufrufe sind relativ zum Referenzrahmen des angehängten Matrix3D-Objekts.</p>
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">append()</codeph>-Methode ersetzt die aktuelle Matrix durch die angehängte Matrix. Wenn Sie zwei Matrizen anhängen möchten, ohne die aktuelle Matrix zu ändern, kopieren Sie die aktuelle Matrix mithilfe der <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>-Methode und wenden dann die <codeph class="+ topic/ph pr-d/codeph ">append()</codeph>-Methode auf die Kopie an.</p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/prepend()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.prepend()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    Gibt ein neues Matrix3D-Objekt zurück, das eine genaue Kopie des aktuellen Matrix3D-Objekts ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Matrix3D-Objekt, das eine genaue Kopie des aktuellen Matrix3D-Objekts ist.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt ein neues Matrix3D-Objekt zurück, das eine genaue Kopie des aktuellen Matrix3D-Objekts ist.      
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix3D:decompose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decompose</apiName><shortdesc class="- topic/shortdesc ">
    Gibt die Versetzungs-, Drehungs- und Skalierungseinstellungen der Transformationsmatrix als Vektor dreier Vector3D-Objekte zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vektor aus drei Vector3D-Objekten, die jeweils die Einstellungen für die Versetzung, Drehung und Skalierung enthalten. 
    
    </apiDesc><apiType value="Vector$flash.geom:Vector3D" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">orientationStyle</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">eulerAngles</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein optionaler Parameter, der den Ausrichtungsstil für die Matrixtransformation bestimmt. Die drei Ausrichtungsstile sind <codeph class="+ topic/ph pr-d/codeph ">eulerAngles</codeph> (Konstante <codeph class="+ topic/ph pr-d/codeph ">EULER_ANGLES</codeph>), <codeph class="+ topic/ph pr-d/codeph ">axisAngle</codeph> (Konstante <codeph class="+ topic/ph pr-d/codeph ">AXIS_ANGLE</codeph>) und <codeph class="+ topic/ph pr-d/codeph ">quaternion</codeph> (Konstante <codeph class="+ topic/ph pr-d/codeph ">QUATERNION</codeph>). Weitere Informationen zu den verschiedenen Ausrichtungsstilen finden Sie im Abschnitt über die <codeph class="+ topic/ph pr-d/codeph ">geom.Orientation3D</codeph>-Klasse.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt die Versetzungs-, Drehungs- und Skalierungseinstellungen der Transformationsmatrix als Vektor dreier Vector3D-Objekte zurück. Das erste Vector3D-Objekt enthält die Versetzungselemente. Das zweite Vector3D-Objekt enthält die Drehungselemente. Das dritte Vector3D-Objekt enthält die Skalierungselemente. 
    
    <p class="- topic/p ">Einige Matrix3D-Methoden, beispielsweise die <codeph class="+ topic/ph pr-d/codeph ">interpolateTo()</codeph>-Methode, führen die Transformation aus, indem sie die Matrix automatisch zerlegen und wieder zusammensetzen.</p> 
       
    <p class="- topic/p ">Um die Transformation der Matrix mithilfe eines absoluten übergeordneten Referenzrahmens zu ändern, rufen Sie die Einstellungen mithilfe der <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>-Methode ab und nehmen die entsprechenden Änderungen vor. Sie können das Matrix3D-Objekt auf die geänderte Transformation setzen, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode verwenden.</p>
    
    <p class="- topic/p ">Der Parameter der <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>-Methode legt den Ausrichtungsstil für die Transformation fest. Die Standardausrichtung ist <codeph class="+ topic/ph pr-d/codeph ">eulerAngles</codeph>. Dabei wird die Ausrichtung durch einen separaten Drehwinkel pro Achse festgelegt. Die Drehungen folgen aufeinander und ändern die Achsen der jeweils anderen Drehungen nicht. Die Achsendrehungseigenschaften des Anzeigeobjekts bewirken eine Transformation des Ausrichtungsstils gemäß Eulerschen Winkeln. Weitere Optionen für den Ausrichtungsstil sind <codeph class="+ topic/ph pr-d/codeph ">axisAngle</codeph> und <codeph class="+ topic/ph pr-d/codeph ">quaternion</codeph>. Die Achsenwinkelausrichtung verwendet zur Bestimmung der Ausrichtung eine Kombination von Achse und Winkel. Die Achse, um die sich das Objekt dreht, ist ein Einheitsvektor, der die Richtung darstellt. Der Winkel stellt die Stärke der Drehung um den Vektor dar. Die Richtung bestimmt auch, wohin das Anzeigeobjekt zeigt und der Winkel bestimmt, wo oben liegt. Die <codeph class="+ topic/ph pr-d/codeph ">appendRotation()</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">prependRotation()</codeph>-Methode verwendet die Achsenwinkelausrichtung. Die Quaternionausrichtung verwendet komplexe Zahlen und das vierte Element eines Vektors. Die drei Drehsachsen (x, y, z) und der Drehwinkel (w) stellen die Ausrichtung dar. Die <codeph class="+ topic/ph pr-d/codeph ">interpolate()</codeph>-Methode verwendet Quaternionen.</p> 
    
    </apiDesc><example conref="examples\Matrix3DdecomposeExample.as" class="- topic/example "> In diesem Beispiel werden die <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode verwendet, damit sich die Ellipse horizontal ausdehnt, während sie sich auf den Fluchtpunkt zubewegt. Das erste von der <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>-Methode zurückgegebene Vector3D-Objekt enthält die Koordinaten für die Versetzung. Das dritte Vector3D-Objekt enthält die Skalierungseinstellungen. Die <codeph class="+ topic/ph pr-d/codeph ">incrementBy()</codeph>-Methode des Vector3D-Objekts inkrementiert die absoluten Versetzungs- und Skalierungseinstellungen der Matrix.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.geom.*;
    import flash.events.Event;
    
    public class Matrix3DdecomposeExample extends MovieClip {
        private var ellipse:Shape = new Shape();

        public function Matrix3DdecomposeExample():void {
            
            ellipse.x = (this.stage.stageWidth / 2);
            ellipse.y = (this.stage.stageHeight - 40);
            ellipse.z = 1;
            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(0, 0, 50, 40);
            ellipse.graphics.endFill();
            addChild(ellipse);

            ellipse.addEventListener(Event.ENTER_FRAME, enterFrameHandler);
        }

        private function enterFrameHandler(e:Event):void {  

            var v3:Vector.&lt;Vector3D> = new Vector.&lt;Vector3D>(3);
            v3 = ellipse.transform.matrix3D.decompose();
            v3[0].incrementBy(new Vector3D(0,0,1));
            v3[2].incrementBy(new Vector3D(0.01,0,0));
            ellipse.transform.matrix3D.recompose(v3);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Orientation3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Orientation3D</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()" class="- topic/link "><linktext class="- topic/linktext ">recompose()</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:deltaTransformVector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deltaTransformVector</apiName><shortdesc class="- topic/shortdesc ">
    Verwendet die Transformationsmatrix ohne deren Versetzungselemente, um ein Vector3D-Objekt von einer Raumkoordinate zu einer anderen zu transformieren.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt mit den transformierten Koordinaten.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">v</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt, das die zu transformierenden Koordinaten enthält.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Verwendet die Transformationsmatrix ohne deren Versetzungselemente, um ein Vector3D-Objekt von einer Raumkoordinate zu einer anderen zu transformieren. Das zurückgegebene Vector3D-Objekt enthält die neuen Koordinaten nach Anwendung der Drehungs- und Skalierungsinformationen. Wendet die <codeph class="+ topic/ph pr-d/codeph ">deltaTransformVector()</codeph>-Methode eine Matrix an, die nur eine Versetzungstransformation enthält, so ist das zurückgegebene Vector3D-Objekt mit dem ursprünglichen Vector3D-Objekt identisch.
    
    <p class="- topic/p ">Sie können die <codeph class="+ topic/ph pr-d/codeph ">deltaTransformVector()</codeph>-Methode verwenden, um zu bewirken, dass ein Anzeigeobjekt in einem Koordinatenraum auf die Drehungstransformation eines zweiten Anzeigeobjekts reagiert. Das Objekt kopiert die Drehung nicht; es ändert nur seine Position, um die Änderungen der Drehung wiederzuspiegeln. Um zum Beispiel mit der <codeph class="+ topic/ph pr-d/codeph ">display.Graphics</codeph>-API ein sich drehendes dreidimensionales Objekt zu zeichnen, müssen Sie die sich drehenden Koordinaten des Objekts einem zweidimensionalen Punkt zuordnen. Rufen Sie zunächst mit der <codeph class="+ topic/ph pr-d/codeph ">deltaTransformVector()</codeph>-Methode die dreidimensionalen Koordinaten des Objekts nach jeder Drehung ab. Wenden Sie als Nächstes die <codeph class="+ topic/ph pr-d/codeph ">local3DToGlobal()</codeph>-Methode des Anzeigeobjekts an, um die dreidimensionalen Koordinaten in zweidimensionale Punkte zu übersetzen. Mithilfe der zweidimensionalen Punkte können Sie dann das sich drehende dreidimensionale Objekt zeichnen.</p> 
    
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/transformVectors()" class="- topic/link "><linktext class="- topic/linktext ">transformVectors()</linktext></link><link href="flash.geom.xml#Matrix3D/transformVector()" class="- topic/link "><linktext class="- topic/linktext ">transformVector()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:identity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">identity</apiName><shortdesc class="- topic/shortdesc ">
    Konvertiert die aktuelle Matrix in eine Identitäts- oder Einheitsmatrix.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Konvertiert die aktuelle Matrix in eine Identitäts- oder Einheitsmatrix. Eine Identitätsmatrix hat einen Wert von 1 für alle Elemente in der Hauptdiagonale und einen Wert von 0 für alle anderen Elemente. Das Ergebnis ist eine Matrix mit den folgenden Einstellungen: Der <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph>-Wert ist <codeph class="+ topic/ph pr-d/codeph ">1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1</codeph>, die Drehungseinstellung ist auf <codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,0)</codeph> gesetzt, die Positions- oder Versetzungseinstellungen sind auf <codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,0)</codeph> gesetzt und die Skalierung auf <codeph class="+ topic/ph pr-d/codeph ">Vector3D(1,1,1)</codeph>. Hier sehen Sie eine Darstellung einer Identitätsmatrix.
    
    <p class="- topic/p "><adobeimage alt="Identitätsmatrix" href="../../images/identityMatrix.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    <p class="- topic/p ">Ein Objekt, das durch Anwenden einer Identitätsmatrix transformiert wird, führt keine Transformation aus. Anders ausgedrückt, wenn eine Matrix mit einer Identitätsmatrix multipliziert wird, ist das Ergebnis eine Matrix, die mit der ursprünglichen Matrix identisch ist.</p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix3D:interpolateTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">interpolateTo</apiName><shortdesc class="- topic/shortdesc ">
    Interpoliert die Matrix des Anzeigeobjekts um ein Prozent näher an die Matrix des Zielobjekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toMat</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Matrix3D-Zielobjekt.  
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">percent</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Wert zwischen <codeph class="+ topic/ph pr-d/codeph ">0</codeph> und <codeph class="+ topic/ph pr-d/codeph ">1</codeph>, der die Position des Anzeigeobjekts in Bezug auf sein Ziel bestimmt. Je näher der Wert an <codeph class="+ topic/ph pr-d/codeph ">1.0</codeph> liegt, desto näher ist das Anzeigeobjekt seiner aktuellen Position. Je näher der Wert an <codeph class="+ topic/ph pr-d/codeph ">0</codeph> liegt, desto näher ist das Anzeigeobjekt dem Ziel.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Interpoliert die Matrix des Anzeigeobjekts um ein Prozent näher an die Matrix des Zielobjekts. Alle Elemente des Anzeigeobjekts für Versetzung, Drehung und Skalierung werden auf Werte zwischen der aktuellen Position und der Zielposition der Matrix des Anzeigeobjekts interpoliert. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">interpolateTo()</codeph>-Methode vermeidet die unerwünschten Ergebnisse, die auftreten können, wenn Methoden wie zum Beispiel die Eigenschaften für die Achsendrehung des Anzeigeobjekts verwendet werden. Die <codeph class="+ topic/ph pr-d/codeph ">interpolateTo()</codeph>-Methode macht den zwischengespeicherten Wert der Drehungseigenschaft des Anzeigeobjekts ungültig und rechnet die Ausrichtungselemente der Matrix des Anzeigeobjekts vor der Interpolation in Quaternionen um. Diese Methode gewährleistet den kürzesten, effizientesten Drehungspfad. Sie erzeugt auch eine ruckfreie Drehung und vermeidet eine Blockade der kardanischen Aufhängung (Gimbal Lock). Ein Gimbal Lock kann bei Eulerschen Winkeln auftreten, da die Achsen unabhängig voneinander behandelt werden. Bei der Drehung um zwei oder mehr Achsen können die Achsen zusammenfallen, was zu unerwarteten Ergebnissen führt. Das Gimbal Lock wird durch die Drehung mittels Quaternionen vermieden.</p> 
    
    <p class="- topic/p ">Aufeinanderfolgende Aufrufe der <codeph class="+ topic/ph pr-d/codeph ">interpolateTo()</codeph>-Methode können einen Effekt erzeugen, bei dem ein Anzeigeobjekt schnell startet und sich dann langsam einem anderen Anzeigeobjekt nähert. Wenn der percent-Parameter beispielsweise auf <codeph class="+ topic/ph pr-d/codeph ">0.1</codeph> gesetzt ist, bewegt sich das Anzeigeobjekt um zehn Prozent in Richtung des im <codeph class="+ topic/ph pr-d/codeph ">toMat</codeph>-Parameter angegebenen Zielobjekts. Durch aufeinanderfolgende Aufrufe oder in aufeinanderfolgenden Bildern bewegt sich das Objekt um zehn Prozent der verbleibenden 90 Prozent, dann um zehn Prozent der verbleibenden 80 Prozent, bis das Ziel erreicht ist.</p>  
    
    </apiDesc><example conref="examples\InterpolateToExample.as" class="- topic/example "> In diesem Beispiel bewegt sich das dreidimensionale Anzeigeobjekt <codeph class="+ topic/ph pr-d/codeph ">ellipse2</codeph> in Richtung eines anderen dreidimensionalen Anzeigeobjekts <codeph class="+ topic/ph pr-d/codeph ">ellipse1</codeph>. <codeph class="+ topic/ph pr-d/codeph ">ellipse2</codeph> folgt <codeph class="+ topic/ph pr-d/codeph ">ellipse1</codeph> wie bei einer Verfolgungsjagd. Wenn <codeph class="+ topic/ph pr-d/codeph ">ellipse1</codeph> nicht um seine y-Achse rotiert, erreicht <codeph class="+ topic/ph pr-d/codeph ">ellipse2</codeph> das <codeph class="+ topic/ph pr-d/codeph ">ellipse1</codeph>-Objekt und „landet“ auf ihm. Die beiden Ellipsen werden auf die gleiche Weise gezeichnet, aber an unterschiedlichen dreidimensionalen Positionen des globalen Raums platziert. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.display.Graphics;
    import flash.geom.*;
    import flash.events.Event;

    public class InterpolateToExample extends MovieClip {
        private var ellipse1:Shape = new Shape();
        private var ellipse2:Shape = new Shape();

        public function InterpolateToExample():void {

            ellipse1 = myEllipses(250, 100, 500, 0xFF0000);
            addChild(ellipse1);
            
            ellipse2 = myEllipses(-30, 120, 1, 0x00FF00);
            addChild(ellipse2);

            addEventListener(Event.ENTER_FRAME, enterFrameHandler);
        }

        private function myEllipses(x:Number, y:Number, z:Number, c:Number):Shape {
            var s:Shape = new Shape();                            
            s.x = x;
            s.y = y;
            s.z = z;
            s.graphics.beginFill(c);
            s.graphics.lineStyle(2);
            s.graphics.drawEllipse(100, 50, 100, 80);
            s.graphics.endFill();
            return s;
        }

        private function enterFrameHandler(e:Event) {
            ellipse1.rotationY += 1;

            ellipse2.transform.matrix3D.interpolateTo(ellipse1.transform.matrix3D, 0.1);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/interpolate()" class="- topic/link "><linktext class="- topic/linktext ">interpolate()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:interpolate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">interpolate</apiName><shortdesc class="- topic/shortdesc ">
    Vereinfacht die Interpolation von einem Referenzrahmen zu einem anderen, indem ein Anzeigeobjekt einen Prozentpunkt näher an ein Zielanzeigeobjekt interpoliert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Matrix3D-Objekt mit Elementen, die die Werte der Matrix zwischen der Original- und der Zielmatrix anordnen. Wird die zurückgegebene Matrix auf das <codeph class="+ topic/ph pr-d/codeph ">this</codeph>-Anzeigeobjekt angewendet, so bewegt sich das Objekt um die angegebene Prozentzahl näher zum Zielobjekt.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisMat</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Matrix3D-Objekt, das interpoliert wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toMat</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Matrix3D-Zielobjekt.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">percent</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Wert zwischen <codeph class="+ topic/ph pr-d/codeph ">0</codeph> und <codeph class="+ topic/ph pr-d/codeph ">1</codeph>, der den Prozentwert angibt, um den das <codeph class="+ topic/ph pr-d/codeph ">thisMat</codeph>-Matrix3D-Objekt in Richtung des Matrix3D-Zielobjekts interpoliert wird.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Interpoliert ein Anzeigeobjekt um einen Prozentpunkt näher an das Zielanzeigeobjekt.
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Vereinfacht die Interpolation von einem Referenzrahmen zu einem anderen, indem ein Anzeigeobjekt einen Prozentpunkt näher an ein Zielanzeigeobjekt interpoliert wird. Das Ergebnis ist ein neues Matrix3D-Objekt, bei dem alle Elemente für die Versetzung, Drehung und Skalierung auf Werte interpoliert werden, die zwischen dem aktuellen Anzeigeobjekt und dem Zielanzeigeobjekt liegen.
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">interpolate()</codeph>-Methode vermeidet einige der unerwünschten Ergebnisse, die auftreten können, wenn Methoden wie zum Beispiel die Eigenschaften für die Achsendrehung des Anzeigeobjekts verwendet werden. Die <codeph class="+ topic/ph pr-d/codeph ">interpolate()</codeph>-Methode macht den zwischengespeicherten Wert der Drehungseigenschaft des Anzeigeobjekts ungültig und rechnet die Ausrichtungselemente der Matrix des Anzeigeobjekts vor der Interpolation in Quaternionen um. Diese Methode gewährleistet den kürzesten, effizientesten Drehungspfad. Sie erzeugt auch eine ruckfreie Drehung und vermeidet eine Blockade der kardanischen Aufhängung (Gimbal Lock). Ein Gimbal Lock kann bei Eulerschen Winkeln auftreten, da die Achsen unabhängig voneinander behandelt werden. Bei der Drehung um zwei oder mehr Achsen können die Achsen zusammenfallen, was zu unerwarteten Ergebnissen führt. Das Gimbal Lock wird durch die Drehung mittels Quaternionen vermieden.</p> 
    
    <p class="- topic/p ">Aufeinanderfolgende Aufrufe der <codeph class="+ topic/ph pr-d/codeph ">interpolate()</codeph>-Methode können einen Effekt erzeugen, bei dem ein Anzeigeobjekt schnell startet und sich dann langsam einem anderen Anzeigeobjekt nähert. Wenn Sie zum Beispiel den <codeph class="+ topic/ph pr-d/codeph ">thisMat</codeph>-Parameter auf das zurückgegebene Matrix3D-Objekt setzen, den <codeph class="+ topic/ph pr-d/codeph ">toMat</codeph>-Parameter auf das mit dem Zielanzeigeobjekt verknüpfte Matrix3D-Objekt und den <codeph class="+ topic/ph pr-d/codeph ">percent</codeph>-Parameter auf <codeph class="+ topic/ph pr-d/codeph ">0.1</codeph>, so bewegt sich das Anzeigeobjekt um zehn Prozent in Richtung des Zielobjekts. Durch aufeinanderfolgende Aufrufe oder in aufeinanderfolgenden Bildern bewegt sich das Objekt um zehn Prozent der verbleibenden 90 Prozent, dann um zehn Prozent der verbleibenden 80 Prozent, bis das Ziel erreicht ist.</p>  
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/interpolateTo()" class="- topic/link "><linktext class="- topic/linktext ">interpolateTo()</linktext></link><link href="flash.geom.xml#Utils3D/pointTowards()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Utils3D.pointTowards()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:invert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">invert</apiName><shortdesc class="- topic/shortdesc ">
    Invertiert die aktuelle Matrix.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt <codeph class="+ topic/ph pr-d/codeph ">true </codeph> zurück, wenn die Matrix erfolgreich invertiert wurde. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Invertiert die aktuelle Matrix. Eine invertierte Matrix hat dieselbe Größe wie das Original, führt jedoch die der Originalmatrix entgegengesetzte Transformation aus. Wenn die Originalmatrix zum Beispiel ein Objekt in eine Richtung um die x-Achse dreht, dreht die invertierte Matrix das Objekt in die entgegengesetzte Richtung um diese Achse. Durch das Anwenden einer invertierten Matrix auf ein Objekt wird die von der Originalmatrix durchgeführte Transformation rückgängig gemacht. Wenn eine Matrix mit ihrer invertierten Matrix multipliziert wird, ist das Ergebnis eine Identitätsmatrix. 
    
    <p class="- topic/p ">Mit einer invertierten Matrix kann eine Matrix durch eine andere dividiert werden. Um Matrix A durch Matrix B zu dividieren, wird Matrix A mit der invertierten Matrix B multipliziert. Die invertierte Matrix kann auch bei einem Kameraraum verwendet werden. Wenn sich die Kamera im Raum der Welt bewegt, muss sich das Objekt in dieser Welt in die entgegengesetzte Richtung bewegen, damit die Transformation von der Weltsicht in den Kameraraum bzw. Sichtraum erfolgt. Wenn die Kamera zum Beispiel näher kommt, werden die Objekte größer. Anders ausgedrückt, wenn sich die Kamera entlang der z-Achse der Welt nach unten (nach hinten) bewegt, bewegen sich die Objekte entlang der z-Achse der Welt nach oben (nach vorn).</p> 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">invert()</codeph>-Methode ersetzt die aktuelle Matrix durch die invertierte Matrix. Wenn Sie eine Matrix invertieren möchten, ohne die aktuelle Matrix zu ändern, kopieren Sie zunächst die aktuelle Matrix mithilfe der <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>-Methode und wenden dann die <codeph class="+ topic/ph pr-d/codeph ">invert()</codeph>-Methode auf die Kopie an.</p>
    
    <p class="- topic/p ">Das Matrix3D-Objekt muss invertierbar sein.</p> 
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/determinant" class="- topic/link "><linktext class="- topic/linktext ">determinant</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:pointAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pointAt</apiName><shortdesc class="- topic/shortdesc ">
    Dreht das Anzeigeobjekt, sodass es auf eine bestimmte Position zeigt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pos</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die auf die Welt bezogene Position des Zielobjekts. „Auf die Welt bezogen“ bezeichnet die Transformation des Objekts relativ zum Raum der Welt und den Koordinaten, die angeben wo die Objekte dort platziert sind.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">at</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der objektbezogene Vektor, der festlegt, in welche Richtung das Anzeigeobjekt weist. „Objektbezogen“ bezeichnet die Transformation des Objekts relativ zum Objektraum, dem eigenen Bezugsrahmen des Objekts mit seinem eigenen Koordinatensystem. Der Standardwert ist die <i class="+ topic/ph hi-d/i ">+y</i>-Achse (0,1,0).
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">up</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der objektbezogene Vektor, der die Aufwärtsrichtung des Anzeigeobjekts definiert. Wenn das Objekt so gezeichnet ist, dass es von oben nach unten zeigt, dann ist die <i class="+ topic/ph hi-d/i ">+z</i>-Achse der Aufwärtsvektor. „Objektbezogen“ bezeichnet die Transformation des Objekts relativ zum Objektraum, dem eigenen Bezugsrahmen des Objekts mit seinem eigenen Koordinatensystem. Der Standardwert ist die <i class="+ topic/ph hi-d/i ">+z</i>-Achse (0,0,1).
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Dreht das Anzeigeobjekt, sodass es auf eine bestimmte Position zeigt. Diese Methode ermöglicht die direkte Änderung der Ausrichtung. Der vorwärts zeigende Vektor des Anzeigeobjekts (das <codeph class="+ topic/ph pr-d/codeph ">at</codeph>-Vector3D-Objekt) zeigt auf die angegebene auf die Welt bezogene Position. Die Aufwärtsrichtung des Anzeigeobjekts wird mit dem <codeph class="+ topic/ph pr-d/codeph ">up</codeph>-Vector3D-Objekt festgelegt. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">pointAt()</codeph>-Methode macht den zwischengespeicherten Wert der Drehungseigenschaft des Anzeigeobjekts ungültig. Die Methode zerlegt die Matrix des Anzeigeobjekts und ändert die Drehungselemente, damit sich das Objekt in die angegebene Position dreht. Danach wird die Matrix des Anzeigeobjekts wieder zusammengesetzt (aktualisiert), wodurch die Transformation ausgeführt wird. Wenn das Objekt auf ein sich bewegendes Ziel zeigt, zum Beispiel die Position eines sich bewegenden Objekts, wird das Objekt bei jedem folgenden Aufruf der Methode in Richtung des sich bewegenden Ziels gedreht.</p>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Wenn Sie die <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.pointAt()</codeph>-Methode verwenden, ohne die optionalen Parameter festzulegen, nimmt ein Zielobjekt nicht standardmäßig die angegebene erdbezogene Position ein. Sie müssen die Werte für <codeph class="+ topic/ph pr-d/codeph ">at</codeph> auf die -y-Achse (0,-1,0) und <codeph class="+ topic/ph pr-d/codeph ">up</codeph> auf die -z-Achse (0,0,-1) festlegen.</p>
    
    </apiDesc><example conref="examples\PointAtExample.as" class="- topic/example "> In diesem Beispiel zeigt ein Dreieck auf den Bewegungspfad einer Ellipse und folgt dieser. Die Ellipse und das Dreieck sind auf verschiedene Positionen eingestellt. Die Ellipse bewegt sich dann nach oben zur Ecke der Bühne. Das Dreieck folgt den Versetzungsänderungen der Ellipse. Sie können die Form des Dreiecks und die „at“- und „up“-Parameter von <codeph class="+ topic/ph pr-d/codeph ">pointAt()</codeph> ändern, um die Auswirkungen auf die Bewegung des Dreiecks zu sehen.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.display.Graphics;
    import flash.geom.*;
    import flash.events.Event;

    public class PointAtExample extends MovieClip {
        private var ellipse:Shape = new Shape();
        private var triangle:Shape = new Shape();

        public function PointAtExample():void {
            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(30, 40, 50, 40);
            ellipse.graphics.endFill();
            ellipse.x = 100;
            ellipse.y = 150;
            ellipse.z = 1;

            triangle.graphics.beginFill(0x0000FF);
            triangle.graphics.moveTo(0, 0);
            triangle.graphics.lineTo(40, 40);
            triangle.graphics.lineTo(80, 0);
            triangle.graphics.lineTo(0, 0);
            triangle.graphics.endFill();
            triangle.x = 200;
            triangle.y = 50;
            triangle.z = 1;

            addChild(ellipse);
            addChild(triangle);

            ellipse.addEventListener(Event.ENTER_FRAME, ellipseEnterFrameHandler);
            triangle.addEventListener(Event.ENTER_FRAME, triangleEnterFrameHandler);
        }

        private function ellipseEnterFrameHandler(e:Event) {
            if(e.target.y > 0) {
                e.target.y -= 1;
                e.target.x -= 1;
            }
        }
        
        private function triangleEnterFrameHandler(e:Event) {
            e.target.transform.matrix3D.pointAt(ellipse.transform.matrix3D.position,
                                                Vector3D.X_AXIS, Vector3D.Y_AXIS);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Utils3D/pointTowards()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Utils3D.pointTowards()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prependRotation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prependRotation</apiName><shortdesc class="- topic/shortdesc ">
    Stellt einem Matrix3D-Objekt eine inkrementelle Drehung voran.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">degrees</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Drehungsgrad.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">axis</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Drehachse oder -richtung. Die üblichen Achsen sind <codeph class="+ topic/ph pr-d/codeph ">X_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(1,0,0)</codeph>), <codeph class="+ topic/ph pr-d/codeph ">Y_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,1,0)</codeph>) und <codeph class="+ topic/ph pr-d/codeph ">Z_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,1)</codeph>). 
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pivotPoint</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Punkt, der die Mitte der Drehung bestimmt. Der Standarddrehpunkt eines Objekts ist sein Registrierungspunkt.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Stellt einem Matrix3D-Objekt eine inkrementelle Drehung voran. Wenn das Matrix3D-Objekt auf ein Anzeigeobjekt angewendet wird, führt die Matrix die Drehung vor den anderen Transformationen im Matrix3D-Objekt aus. 
    
    <p class="- topic/p ">Die Drehung eines Anzeigeobjekts wird durch eine Achse, einen inkrementellen Drehwinkel um die Achse und einen optionalen Drehpunkt als Mittelpunkt der Drehung des Objekts bestimmt. Die Achse kann in jede Richtung zeigen. Die üblichen Achsen sind <codeph class="+ topic/ph pr-d/codeph ">X_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(1,0,0)</codeph>), <codeph class="+ topic/ph pr-d/codeph ">Y_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,1,0)</codeph>) und <codeph class="+ topic/ph pr-d/codeph ">Z_AXIS</codeph> (<codeph class="+ topic/ph pr-d/codeph ">Vector3D(0,0,1)</codeph>). In der Luftfahrtterminologie wird die Drehung um die y-Achse als Gieren bezeichnet. Die Drehung um die x-Achse heißt Nicken. Die Drehung um die z-Achse wird als Rollen bezeichnet.</p> 
    
    <p class="- topic/p ">Die Transformationsreihenfolge ist von Bedeutung. Eine Drehung gefolgt von einer Versetzungstransformation hat andere Auswirkungen als eine Versetzung gefolgt von einer Drehung.</p>
    
    <p class="- topic/p ">Der Drehungseffekt ist nicht absolut. Die Auswirkung ist objektbezogen, relativ zum Bezugsrahmen der ursprünglichen Position und Ausrichtung. Um absolute Änderungen der Transformation vorzunehmen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode.</p>
    
    <p class="- topic/p ">Wenn die Transformation der ￼￼<codeph class="+ topic/ph pr-d/codeph ">prependRotation()</codeph>-Methode auf ein Matrix3D-Objekt eines Anzeigeobjekts angewendet wird, werden die zwischengespeicherten Werte der Drehungseigenschaft des Anzeigeobjekts ungültig.</p> 
    
    <p class="- topic/p ">Eine Möglichkeit, ein Anzeigeobjekt um einen bestimmten Punkt relativ zu seiner Position zu drehen, besteht darin, die Versetzung des Objekts auf den angegebenen Punkt festzulegen, das Objekt mithilfe der <codeph class="+ topic/ph pr-d/codeph ">prependRotation</codeph>-Methode zu drehen und das Objekt dann an die ursprüngliche Position zurückzuversetzen. Im folgenden Beispiel führt das <codeph class="+ topic/ph pr-d/codeph ">myObject</codeph>-3D-Anzeigeobjekt eine Drehung um die y-Achse um die Koordinate (10,10,0) aus.</p>
    
    <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    
    myObject.z = 1; 
    myObject.transform.matrix3D.prependTranslation(10,10,0);
    myObject.transform.matrix3D.prependRotation(1, Vector3D.Y_AXIS);
    myObject.transform.matrix3D.prependTranslation(-10,-10,0);
     
    </codeblock>
    
    </apiDesc><example conref="examples\Matrix3DprependRotationExample.as" class="- topic/example "> In diesem Beispiel kann der Benutzer eine Maus verwenden, um eine Ellipse um ihre <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Achsen zu drehen. Die Ellipse wird mit ihrem Registrierungspunkt in ihrer Mitte gezeichnet. Die Ellipse dreht sich um ihre <i class="+ topic/ph hi-d/i ">y</i>-Achse, indem sie die <i class="+ topic/ph hi-d/i ">x</i>-Koordinate der Maus verwendet. Sie dreht sich um ihre <i class="+ topic/ph hi-d/i ">x</i>-Achse, indem sie die <i class="+ topic/ph hi-d/i ">y</i>-Koordinate der Maus verwendet.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.MovieClip;
    import flash.display.Shape;
    import flash.geom.*;
    import flash.events.MouseEvent;
    
    public class Matrix3DprependRotationExample extends MovieClip {
        private var ellipse:Shape = new Shape();

        public function Matrix3DprependRotationExample():void {

            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(-50, -40, 100, 80);
            ellipse.graphics.endFill();

            ellipse.x = (this.stage.stageWidth / 2);
            ellipse.y = (this.stage.stageHeight / 2);
            ellipse.z = 1;
            
            addChild(ellipse);

            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function mouseMoveHandler(e:MouseEvent):void {
            var y:int;
            var x:int;
            
            if(e.localX > ellipse.x) {
                y = (Math.round(e.localX) / 100);   
            } else {
                y = -(Math.round(e.localX) / 10);   
            }
            
            if(e.localY > ellipse.y) {
                x = (Math.round(e.localY) / 100);
            } else {
                x = -(Math.round(e.localY) / 100);
            }
            
            ellipse.transform.matrix3D.prependRotation(y, Vector3D.Y_AXIS);
            ellipse.transform.matrix3D.prependRotation(x, Vector3D.X_AXIS);
        }
        
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/appendRotation()" class="- topic/link "><linktext class="- topic/linktext ">appendRotation()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prependScale" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prependScale</apiName><shortdesc class="- topic/shortdesc ">
    Stellt einem Matrix3D-Objekt eine inkrementelle Skalierungsänderung der x-, y- und z-Achse voran.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">xScale</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der x-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">yScale</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der y-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">zScale</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der z-Achse.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Stellt einem Matrix3D-Objekt eine inkrementelle Skalierungsänderung der x-, y- und z-Achse voran. Wenn das Matrix3D-Objekt auf ein Anzeigeobjekt angewendet wird, führt die Matrix die Skalierungsänderungen vor den anderen Transformationen im Matrix3D-Objekt aus. Die Änderungen sind objektbezogen, relativ zum Bezugsrahmen der ursprünglichen Position und Ausrichtung. Der Standardskalierungsfaktor ist (1.0, 1.0, 1.0).
    
    <p class="- topic/p ">Die Skalierung ist als Satz dreier inkrementeller Änderungen entlang der drei Achsen (x, y, z) definiert. Jede Achse kann mit einer anderen Zahl multipliziert werden. Wenn Skalierungsänderungen auf ein Anzeigeobjekt angewendet werden, erhöht oder verringert sich dessen Größe. Beispiel: Wird die x-, y- und z-Achse auf „2“ gesetzt, so wird die Größe verdoppelt. Dagegen wird sie halbiert wird, wenn die Achsen auf <codeph class="+ topic/ph pr-d/codeph ">0.5</codeph> gesetzt werden. Um sicherzustellen, dass sich die Skalierungstransformation nur auf eine bestimmte Achse auswirkt, setzen Sie die anderen Parameter auf eins. Der Parameter „1“ bedeutet, dass keine Skalierung an der betroffenen Achse stattfindet.</p>
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">prependScale()</codeph>-Methode kann sowohl zum Ändern der Größe als auch zum Verwalten von Verzerrungen, zum Beispiel Strecken oder Stauchen eines Anzeigeobjekts, verwendet werden. Sie kann auch für das Ein- und Auszoomen auf eine Position verwendet werden. Skalierungstransformationen werden während der Drehung und Versetzung eines Anzeigeobjekts automatisch durchgeführt.</p>
    
    <p class="- topic/p ">Die Transformationsreihenfolge ist von Bedeutung. Eine Größenänderung gefolgt von einer Versetzungstransformation erzeugt einen anderen Effekt als eine Versetzung gefolgt von einer Größentransformation.</p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/appendScale()" class="- topic/link "><linktext class="- topic/linktext ">appendScale()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prependTranslation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prependTranslation</apiName><shortdesc class="- topic/shortdesc ">
    Stellt einem Matrix3D-Objekt eine inkrementelle Versetzung, eine Neupositionierung entlang der x-, y- und z-Achse voran.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine inkrementelle Versetzung entlang der x-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine inkrementelle Versetzung entlang der y-Achse.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">z</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Eine inkrementelle Versetzung entlang der z-Achse.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Stellt einem Matrix3D-Objekt eine inkrementelle Versetzung, eine Neupositionierung entlang der x-, y- und z-Achse voran. Wenn das Matrix3D-Objekt auf ein Anzeigeobjekt angewendet wird, führt die Matrix die Versetzungsänderungen vor den anderen Transformationen im Matrix3D-Objekt aus. 
       
    <p class="- topic/p ">Die Versetzung gibt die Entfernung an, um die sich das Anzeigeobjekt von seiner aktuellen Position weg entlang der x-, y- und z-Achse entfernt. Die <codeph class="+ topic/ph pr-d/codeph ">prependTranslation()</codeph>-Methode definiert die Versetzung als einen Satz dreier inkrementeller Änderungen entlang der drei Achsen (x,y,z). Damit die Versetzung nur eine bestimmte Achse betrifft, setzen Sie die anderen Parameter auf null. Der Parameter „0“ bedeutet, dass keine Veränderung an der betroffenen Achse stattfindet.</p>
    
    <p class="- topic/p ">Die Änderungen durch Versetzung sind nicht absolut. Die Auswirkung ist objektbezogen, relativ zum Bezugsrahmen der ursprünglichen Position und Ausrichtung. Um absolute Änderungen der Transformationsmatrix vorzunehmen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode. Die Transformationsreihenfolge ist ebenfalls von Bedeutung. Eine Versetzung gefolgt von einer Drehungstransformation erzeugt einen anderen Effekt als eine Drehung gefolgt von einer Versetzungstransformation. Wenn Sie <codeph class="+ topic/ph pr-d/codeph ">prependTranslation()</codeph> verwenden, bewegt sich das Anzeigeobjekt weiterhin in die Richtung, in die es zeigt, unabhängig von den anderen Transformationen. Beispiel: Wenn ein Anzeigeobjekt in Richtung einer positiven x-Achse zeigte, so bewegt es sich weiterhin in die Richtung, die von der <codeph class="+ topic/ph pr-d/codeph ">prependTranslation()</codeph>-Methode festgelegt wird, unabhängig von der Drehung des Objekts. Um Versetzungsänderungen nach anderen Transformationen auszuführen, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">appendTranslation()</codeph>-Methode.</p> 
    
    
    </apiDesc><example conref="examples\Matrix3DprependTranslationExample.as" class="- topic/example "> In diesem Beispiel kann der Benutzer die Ellipse mithilfe einer Maus an der <i class="+ topic/ph hi-d/i ">y</i>-Achse der Bühne nach oben schieben. Bewegt der Benutzer die Maus über die Ellipse, so springt diese zehn Koordinaten an der <i class="+ topic/ph hi-d/i ">y</i>-Achse nach oben. Verlässt die Maus die Ellipse, bevor diese die obere Grenze erreicht, so springt die Ellipse an der <i class="+ topic/ph hi-d/i ">y</i>-Achse wieder um zehn Koordinaten nach oben. Sobald die Ellipse die obere Grenze erreicht hat, wird sie wieder zurück an das untere Ende der Bühne bewegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.MovieClip;
    import flash.display.Sprite;
    import flash.geom.*;
    import flash.events.MouseEvent;

    public class Matrix3DprependTranslationExample extends MovieClip {
        private var ellipse:Sprite = new Sprite();

        public function Matrix3DprependTranslationExample():void {
            ellipse.x = this.stage.stageWidth / 2;
            ellipse.y = this.stage.stageHeight - 100;
            ellipse.z = 1;
            ellipse.graphics.beginFill(0xFF0000);
            ellipse.graphics.lineStyle(2);
            ellipse.graphics.drawEllipse(0, 0, 60, 50);
            ellipse.graphics.endFill();
            addChild(ellipse);

            ellipse.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
            ellipse.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        }

        private function mouseOverHandler(e:MouseEvent):void {
            if(ellipse.y > 0) { 
                ellipse.transform.matrix3D.prependTranslation(0, -10, 0);
            } 
        }
        
        private function mouseOutHandler(e:MouseEvent):void {
            if(ellipse.y > 0) { 
                ellipse.transform.matrix3D.prependTranslation(0, -10, 0);
            } else {
                ellipse.transform.matrix3D.prependTranslation(0, 
                                     (this.stage.stageHeight - 100), 0);
            }   
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/appendTranslation()" class="- topic/link "><linktext class="- topic/linktext ">appendTranslation()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:prepend" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prepend</apiName><shortdesc class="- topic/shortdesc ">
    Stellt eine Matrix voran, indem das aktuelle Matrix3D-Objekt mit einem anderen Matrix3D-Objekt multipliziert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rhs</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Rechte Seite der Matrix, mit der das aktuelle Matrix3D-Objekt multipliziert wird.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Stellt eine Matrix voran, indem das aktuelle Matrix3D-Objekt mit einem anderen Matrix3D-Objekt multipliziert wird. Das Ergebnis kombiniert beide Matrixtransformationen. 
    
    <p class="- topic/p ">Die Matrixmultiplikation unterscheidet sich von der Matrixaddition. Die Matrixmultiplikation ist nicht kommutativ. Anders ausgedrückt, A mal B ist nicht gleich B mal A. Mit der <codeph class="+ topic/ph pr-d/codeph ">prepend()</codeph>-Methode wird die Multiplikation von rechts ausgeführt, das heißt, das <codeph class="+ topic/ph pr-d/codeph ">rhs</codeph>-Matrix3D-Objekt befindet sich rechts vom Multiplikationsoperator.</p>
    
    <codeph class="+ topic/ph pr-d/codeph ">thisMatrix = thisMatrix ~~ rhs</codeph>
      
    <p class="- topic/p ">Die durch die <codeph class="+ topic/ph pr-d/codeph ">prepend()</codeph>-Methode ausgeführten Änderungen sind relativ zum Objektraum. Anders ausgedrückt beziehen Sie sich immer auf den ursprünglichen Referenzrahmen des Objekts.</p>
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">prepend()</codeph>-Methode ersetzt die aktuelle Matrix durch die vorangestellte Matrix. Wenn Sie zwei Matrizen voranstellen möchten, ohne die aktuelle Matrix zu ändern, kopieren Sie zuerst die aktuelle Matrix mithilfe der <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>-Methode und wenden dann die <codeph class="+ topic/ph pr-d/codeph ">prepend()</codeph>-Methode auf die Kopie an.</p>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/append()" class="- topic/link "><linktext class="- topic/linktext ">append()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:recompose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">recompose</apiName><shortdesc class="- topic/shortdesc ">
    Legt die Einstellungen der Transformationsmatrix für die Versetzung, Drehung und Skalierung fest.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Gibt den Wert <codeph class="+ topic/ph pr-d/codeph ">false</codeph> zurück, wenn eines der Skalierungselemente „0“ ist.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">components</apiItemName><apiType value="Vector$flash.geom:Vector3D" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vektor aus drei Vector3D-Objekten, die die Versetzungs-, Drehungs- und Skalierungselemente des Matrix3D-Objekts ersetzen. 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">orientationStyle</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">eulerAngles</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein optionaler Parameter, der den Ausrichtungsstil für die Matrixtransformation bestimmt. Die drei Ausrichtungsstile sind <codeph class="+ topic/ph pr-d/codeph ">eulerAngles</codeph> (Konstante <codeph class="+ topic/ph pr-d/codeph ">EULER_ANGLES</codeph>), <codeph class="+ topic/ph pr-d/codeph ">axisAngle</codeph> (Konstante <codeph class="+ topic/ph pr-d/codeph ">AXIS_ANGLE</codeph>) und <codeph class="+ topic/ph pr-d/codeph ">quaternion</codeph> (Konstante <codeph class="+ topic/ph pr-d/codeph ">QUATERNION</codeph>). Weitere Informationen zu den verschiedenen Ausrichtungsstilen finden Sie im Abschnitt über die <codeph class="+ topic/ph pr-d/codeph ">geom.Orientation3D</codeph>-Klasse.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Legt die Einstellungen der Transformationsmatrix für die Versetzung, Drehung und Skalierung fest. Die Änderungen aufgrund der <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode sind absolut, anders als die inkrementellen Änderungen aufgrund der Drehungseigenschaften des Anzeigeobjekts oder der Drehungsmethoden des Matrix3D-Objekts. Die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode überschreibt die Transformation der Matrix.
    
    <p class="- topic/p ">Um die Transformation der Matrix mithilfe eines absoluten übergeordneten Referenzrahmens zu ändern, rufen Sie die Einstellungen mithilfe der <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>-Methode ab und nehmen die entsprechenden Änderungen vor. Sie können das Matrix3D-Objekt auf die geänderte Transformation setzen, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode verwenden.</p>
    
    <p class="- topic/p ">Der Parameter der <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode gibt den Ausrichtungsstil an, der für die Transformation verwendet wurde. Die Standardausrichtung ist <codeph class="+ topic/ph pr-d/codeph ">eulerAngles</codeph>. Dabei wird die Ausrichtung durch einen separaten Drehwinkel pro Achse festgelegt. Die Drehungen folgen aufeinander und ändern die Achsen der jeweils anderen Drehungen nicht. Die Achsendrehungseigenschaften des Anzeigeobjekts bewirken eine Transformation des Ausrichtungsstils gemäß Eulerschen Winkeln. Weitere Optionen für den Ausrichtungsstil sind <codeph class="+ topic/ph pr-d/codeph ">axisAngle</codeph> und <codeph class="+ topic/ph pr-d/codeph ">quaternion</codeph>. Die Achsenwinkelausrichtung verwendet zur Bestimmung der Ausrichtung eine Kombination von Achse und Winkel. Die Achse, um die sich das Objekt dreht, ist ein Einheitsvektor, der die Richtung darstellt. Der Winkel stellt die Stärke der Drehung um den Vektor dar. Die Richtung bestimmt auch, wohin das Anzeigeobjekt zeigt und der Winkel bestimmt, wo oben liegt. Die <codeph class="+ topic/ph pr-d/codeph ">appendRotation()</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">prependRotation()</codeph>-Methode verwendet die Achsenwinkelausrichtung. Die Quaternionausrichtung verwendet komplexe Zahlen und das vierte Element eines Vektors. Die Ausrichtung wird durch die drei Drehachsen (x, y, z) und den Drehwinkel (w) dargestellt. Die <codeph class="+ topic/ph pr-d/codeph ">interpolate()</codeph>-Methode verwendet Quaternionen.</p> 
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Orientation3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Orientation3D</linktext></link><link href="flash.geom.xml#Matrix3D/decompose()" class="- topic/link "><linktext class="- topic/linktext ">decompose()</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:transformVector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">transformVector</apiName><shortdesc class="- topic/shortdesc ">
    Verwendet die Transformationsmatrix zum Transformieren eines Vector3D-Objekts von einer Raumkoordinate zu einer anderen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt mit den transformierten Koordinaten.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">v</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Vector3D</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vector3D-Objekt, das die zu transformierenden Koordinaten enthält.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Verwendet die Transformationsmatrix zum Transformieren eines Vector3D-Objekts von einer Raumkoordinate zu einer anderen. Das zurückgegebene Vector3D-Objekt enthält die neuen Koordinaten nach der Transformation. Alle Matrixtransformationen einschließlich Versetzung werden auf das Vector3D-Objekt angewendet.
    
    <p class="- topic/p ">Wurde das Ergebnis der <codeph class="+ topic/ph pr-d/codeph ">transformVector()</codeph>-Methode auf die Position eines Anzeigeobjekts angewendet, so ändert sich nur seine Position. Die Drehungs- und Skalierungselemente des Anzeigeobjekts bleiben unverändert.</p> 
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/transformVectors()" class="- topic/link "><linktext class="- topic/linktext ">transformVectors()</linktext></link><link href="flash.geom.xml#Matrix3D/deltaTransformVector()" class="- topic/link "><linktext class="- topic/linktext ">deltaTransformVector()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:transformVectors" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">transformVectors</apiName><shortdesc class="- topic/shortdesc ">
    Verwendet die Transformationsmatrix zum Transformieren eines Zahlenvektors von einem Koordinatenraum in einen anderen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">vin</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vektor von Zahlen, wobei jeweils drei Zahlen eine dreidimensionale Koordinate (x,y,z) bilden, die transformiert wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">vout</apiItemName><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Vektor von Zahlen, wobei jeweils drei Zahlen eine transformierte dreidimensionale Koordinate (x,y,z) bilden.
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Verwendet die Transformationsmatrix zum Transformieren eines Zahlenvektors von einem Koordinatenraum in einen anderen. Die <codeph class="+ topic/ph pr-d/codeph ">transformVectors()</codeph>-Methode liest jeweils drei Zahlen im Vector-Objekt <codeph class="+ topic/ph pr-d/codeph ">vin</codeph> als eine dreidimensionale Koordinate (x,y,z) und platziert eine transformierte dreidimensionale Koordinate in das Vector-Objekt <codeph class="+ topic/ph pr-d/codeph ">vout</codeph>. Alle Matrixtransformationen, einschließlich der Versetzung, werden auf das Vector-Objekt <codeph class="+ topic/ph pr-d/codeph ">vin</codeph> angewendet. Mit der <codeph class="+ topic/ph pr-d/codeph ">transformVectors()</codeph>-Methode können Sie ein dreidimensionales Objekt als Gitter darstellen und transformieren. Ein Gitter ist eine Sammlung von Scheitelpunkten, die die Form des Objekts definieren.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/transformVector()" class="- topic/link "><linktext class="- topic/linktext ">transformVector()</linktext></link><link href="flash.geom.xml#Matrix3D/deltaTransformVector()" class="- topic/link "><linktext class="- topic/linktext ">deltaTransformVector()</linktext></link><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix3D:transpose" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">transpose</apiName><shortdesc class="- topic/shortdesc ">
    Konvertiert das aktuelle Matrix3D-Objekt in eine Matrix, deren Zeilen und Spalten vertauscht sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Konvertiert das aktuelle Matrix3D-Objekt in eine Matrix, deren Zeilen und Spalten vertauscht sind. Wenn beispielsweise <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph> des aktuellen Matrix3D-Objekts die folgenden 16 Zahlen enthält, <codeph class="+ topic/ph pr-d/codeph ">1,2,3,4,11,12,13,14,21,22,23,24,31,32,33,34</codeph>, so liest die <codeph class="+ topic/ph pr-d/codeph ">transpose()</codeph>-Methode jeweils vier Elemente als Zeilen und wandelt sie in Spalten um. Das Ergebnis ist eine Matrix mit folgenden <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph>: <codeph class="+ topic/ph pr-d/codeph ">1,11,21,31,2,12,22,32,3,13,23,33,4,14,24,34</codeph>. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">transpose()</codeph>-Methode ersetzt die aktuelle Matrix mit einer transponierten Matrix. Wenn Sie eine Matrix transponieren möchten, ohne die aktuelle Matrix zu ändern, kopieren Sie zunächst die aktuelle Matrix mithilfe der <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph>-Methode und wenden dann die <codeph class="+ topic/ph pr-d/codeph ">transpose()</codeph>-Methode auf die Kopie an.</p>
    
    <p class="- topic/p ">Eine orthogonale Matrix ist eine quadratische Matrix, deren transponierte gleich ihrer invertierten Matrix ist.</p> 
    
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Matrix3D:determinant:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">determinant</apiName><shortdesc class="- topic/shortdesc ">
    Eine Zahl, die festlegt, ob eine Matrix invertierbar ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Eine Zahl, die festlegt, ob eine Matrix invertierbar ist. 
    
    <p class="- topic/p ">Ein Matrix3D-Objekt muss invertierbar sein. Mit der <codeph class="+ topic/ph pr-d/codeph ">determinant</codeph>-Eigenschaft können Sie sicherstellen, dass ein Matrix3D-Objekt invertierbar ist. Wenn die Determinante null ist, ist keine invertierte Matrix vorhanden. Wenn zum Beispiel eine ganze Zeile oder Spalte einer Matrix null ist oder zwei Zeilen oder Spalten gleich sind, ist die Determinante null. Die Determinante wird auch verwendet, um eine Reihe von Gleichungen zu lösen.</p> 
    
    <p class="- topic/p ">Nur eine quadratische Matrix, wie die Matrix3D-Klasse, hat eine Determinante.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/invert()" class="- topic/link "><linktext class="- topic/linktext ">invert()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Matrix3D:position:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">position</apiName><shortdesc class="- topic/shortdesc ">
    Ein Vector3D-Objekt, das die Position, die 3D-Koordinate (x, y, z) eines Anzeigeobjekts innerhalb des Bezugsrahmens der Transformation, enthält.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Vector3D</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Ein Vector3D-Objekt, das die Position, die 3D-Koordinate (x, y, z) eines Anzeigeobjekts innerhalb des Bezugsrahmens der Transformation, enthält. Die <codeph class="+ topic/ph pr-d/codeph ">position</codeph>-Eigenschaft gewährt unmittelbaren Zugriff auf den Versetzungsvektor der Matrix des Anzeigeobjekts, ohne dass die Matrix zerlegt und wieder zusammengesetzt werden muss. 
    
    <p class="- topic/p ">Mit der <codeph class="+ topic/ph pr-d/codeph ">position</codeph>-Eigenschaft können Sie auf die Versetzungselemente der Transformationsmatrix zugreifen und diese festlegen.</p>
    
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/appendTranslation()" class="- topic/link "><linktext class="- topic/linktext ">appendTranslation()</linktext></link><link href="flash.geom.xml#Matrix3D/prependTranslation()" class="- topic/link "><linktext class="- topic/linktext ">prependTranslation()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Matrix3D:rawData:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rawData</apiName><shortdesc class="- topic/shortdesc ">
    Ein Vektor aus 16 Zahlen, wobei jeweils vier Elemente eine Reihe oder Spalte einer 4x4-Matrix bilden.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiType value="Vector$Number" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Ein Vektor aus 16 Zahlen, wobei jeweils vier Elemente eine Reihe oder Spalte einer 4x4-Matrix bilden. 
    
    <p class="- topic/p ">Wird die <codeph class="+ topic/ph pr-d/codeph ">rawData</codeph>-Eigenschaft auf eine nicht invertierbare Matrix gesetzt, so wird eine Ausnahme ausgegeben. Das Matrix3D-Objekt muss invertierbar sein. Wenn Sie eine nicht-invertierbare Matrix benötigen, erstellen Sie eine Unterklasse des Matrix3D-Objekts.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Vector</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:Transform" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Transform</apiName><shortdesc class="- topic/shortdesc ">
 Die Transform-Klasse erlaubt den Zugriff auf Farbanpassungseigenschaften und zwei- oder dreidimensionale Transformationsobjekte, die auf ein Anzeigeobjekt angewendet werden können.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erlaubt den Zugriff auf die Farbe und zwei- oder dreidimensionale Transformationsobjekte und Matrizem, die auf ein Anzeigeobjekt angewendet werden können.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die Transform-Klasse erlaubt den Zugriff auf Farbanpassungseigenschaften und zwei- oder dreidimensionale Transformationsobjekte, die auf ein Anzeigeobjekt angewendet werden können. Während der Transformation wird die Farbe oder die Ausrichtung und Position eines Anzeigeobjekts von den aktuellen Werten oder Koordinaten auf neue Werte oder Koordinaten geändert (versetzt). Die Transform-Klasse sammelt auch Daten über Farb- und zweidimensionale Matrixtransformationen, die auf das Anzeigeobjekt und alle seine übergeordneten Elemente angewendet werden. Auf diese kombinierten Transformationen können Sie über die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">concatenatedColorTransform</codeph> und <codeph class="+ topic/ph pr-d/codeph ">concatenatedMatrix</codeph> zugreifen.
 
 <p class="- topic/p ">So wenden Sie Farbtransformationen an: Erstellen Sie ein ColorTransform-Objekt, stellen Sie die Farbanpassungen mit den Methoden und Eigenschaften des Objekts ein und weisen Sie dann die <codeph class="+ topic/ph pr-d/codeph ">colorTransformation</codeph>-Eigenschaft der <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft des Anzeigeobjekts dem neuen ColorTransformation-Objekt zu.</p>
 
 <p class="- topic/p ">So wenden Sie zweidimensionale Transformationen an: Erstellen Sie ein Matrixobjekt, legen Sie die zweidimensionale Transformation fest und weisen Sie dann die <codeph class="+ topic/ph pr-d/codeph ">transform.matrix</codeph>-Eigenschaft des Anzeigeobjekts dem neuen Matrixobjekt zu.</p>
 
 <p class="- topic/p ">So wenden Sie dreidimensionale Transformationen an: Beginnen Sie mit einem dreidimensionalen Anzeigeobjekt. Die <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Eigenschaft eines dreidimensionalen Anzeigeobjekts weist einen von null verschiedenen Wert auf. Sie brauchen das Matrix3D-Objekt nicht zu erstellen. Für alle dreidimensionalen Objekte wird automatisch ein Matrix3D-Objekt erstellt, wenn Sie einem Anzeigeobjekt einen <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Wert zuweisen. Sie können über die <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft des Anzeigeobjekts auf das Matrix3D-Objekt des Anzeigeobjekts zugreifen. Mit den Methoden der Matrix3D-Klasse können Sie Transformationseinstellungen hinzufügen oder die vorhandenen ändern. Sie können auch ein benutzerdefiniertes Matrix3D-Objekt erstellen, die Transformationselemente des benutzerdefinierten Matrix3D-Objekts einstellen und das neue Matrix3D-Objekt dann mit der <codeph class="+ topic/ph pr-d/codeph ">transform.matrix</codeph>-Eigenschaft dem Anzeigeobjekt zuweisen.</p>
 
 <p class="- topic/p ">So ändern Sie eine Perspektivenprojektion der Bühne oder des Stammobjekts: Verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">transform.matrix</codeph>-Eigenschaft des Stammanzeigeobjekts, um Zugriff auf das PerspectiveProjection-Objekt zu erlangen. Oder wenden Sie andere Perspektivenprojektionseigenschaften auf ein Anzeigeobjekt an, indem Sie die Perspektivenprojektionseigenschaften des übergeordneten Objekts des Anzeigeobjekts einstellen. Das untergeordnete Anzeigeobjekt übernimmt die neuen Eigenschaften. Erstellen Sie ein PerspectiveProjection-Objekt und stellen Sie seine Eigenschaften ein; weisen Sie das PerspectiveProjection-Objekt dann der <codeph class="+ topic/ph pr-d/codeph ">perspectiveProjection</codeph>-Eigenschaft der <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft des übergeordneten Anzeigeobjekts zu. Die angegebene Projektionstransformation wird dann auf alle untergeordneten dreidimensionalen Objekte des Anzeigeobjekts angewendet.</p>
 
 <p class="- topic/p ">Da sowohl PerspectiveProjection- als auch Matrix3D-Objekte Perspektiventransformationen ausführen, sollten Sie nicht beide gleichzeitig einem Anzeigeobjekt zuweisen. Verwenden Sie das PerspectiveProjection-Objekt für Änderungen der Brennweite und der Projektionsmitte. Um die Perspektiventransformation besser steuern zu können, erstellen Sie ein Perspektivenprojektions-Matrix3D-Objekt.</p>
 
 
 </apiDesc><example conref="examples\TransformExample.as" class="- topic/example "> Im folgenden Beispiel wird mithilfe der TransformExample-Klasse die untere Seite eines quadratischen Sprites mit Farbverlaufsfüllung geneigt. Jedes Mal, wenn der Benutzer auf das Quadrat klickt, transformiert die Anwendung das Sprite, indem es dieses mithilfe der folgenden Schritte neigt:
 
 <ol class="- topic/ol "><li class="- topic/li ">Der <codeph class="+ topic/ph pr-d/codeph ">TransformExample()</codeph>-Konstruktor erstellt ein neues Sprite-Objekt mit dem Namen <codeph class="+ topic/ph pr-d/codeph ">target</codeph>.</li><li class="- topic/li ">Der <codeph class="+ topic/ph pr-d/codeph ">TransformExample()</codeph>-Konstruktor ruft die Methode <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> auf, die ein Quadrat mit Farbverlaufsfüllung im Sprite zeichnet.</li><li class="- topic/li ">Der <codeph class="+ topic/ph pr-d/codeph ">TransformExample()</codeph>-Konstruktor fügt dem Sprite einen click-Ereignis-Listener hinzu, der von der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode verarbeitet wird. </li><li class="- topic/li ">Mithilfe der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode wird ein neues Matrix-Objekt erstellt (<codeph class="+ topic/ph pr-d/codeph ">skewMatrix</codeph>), durch das ein Neigungseffekt angewendet wird. Eine weitere Matrix (<codeph class="+ topic/ph pr-d/codeph ">tempMatrix</codeph>) wird der aktuellen Transformationsmatrix des Sprites zugewiesen und dann mithilfe der <codeph class="+ topic/ph pr-d/codeph ">concat()</codeph>-Methode mit <codeph class="+ topic/ph pr-d/codeph ">skewMatrix</codeph> kombiniert. Diese Matrix wird der <codeph class="+ topic/ph pr-d/codeph ">transform.matrix</codeph>-Eigenschaft des quadratischen Sprites zugewiesen. Jedes Mal, wenn der Benutzer auf das Quadrat klickt, wird <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph> aufgerufen, wodurch die Form des Quadrats geneigt wird.  </li><li class="- topic/li ">Darüber hinaus erstellt die <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode ein neues ColorTransform-Objekt. Die <codeph class="+ topic/ph pr-d/codeph ">redOffset</codeph>-Eigenschaft des neuen ColorTransform-Objekts wird auf den um 25 erhöhten aktuellen Wert von „redOffset“ gesetzt. Entsprechend wird der Wert der <codeph class="+ topic/ph pr-d/codeph ">blueOffset</codeph>-Eigenschaft um 25 verringert. Bei jedem Klicken ändern sich die Farben des Sprites. </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.GradientType;
    import flash.geom.Matrix;
    import flash.geom.ColorTransform;
    import flash.events.MouseEvent;

    public class TransformExample extends Sprite {
        public function TransformExample() { 
            var target:Sprite = new Sprite();
            draw(target);
            addChild(target);
            target.useHandCursor = true;
            target.buttonMode = true;
            target.addEventListener(MouseEvent.CLICK, clickHandler)
        }
        public function draw(sprite:Sprite):void {
            var red:uint = 0xFF0000;
            var green:uint = 0x00FF00;
            var blue:uint = 0x0000FF;
            var size:Number = 100;
            sprite.graphics.beginGradientFill(GradientType.LINEAR, [red, blue, green], [1, 0.5, 1], [0, 200, 255]);
            sprite.graphics.drawRect(0, 0, 100, 100);
        }
        public function clickHandler(event:MouseEvent):void {
            var skewMatrix:Matrix = new Matrix();
            skewMatrix.c = 0.25;
            var tempMatrix:Matrix = this.transform.matrix;
            tempMatrix.concat(skewMatrix);
            this.transform.matrix = tempMatrix;
            
            var rOffset:Number = this.transform.colorTransform.redOffset + 25;
            var bOffset:Number = this.transform.colorTransform.blueOffset - 25;
            this.transform.colorTransform = new ColorTransform(1, 1, 1, 1, rOffset, 0, bOffset, 0);            
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/transform" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.transform</linktext></link><link href="flash.geom.xml#ColorTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.ColorTransform</linktext></link><link href="flash.geom.xml#Matrix" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix</linktext></link><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#PerspectiveProjection" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.PerspectiveProjection</linktext></link></related-links><apiOperation id="flash.geom:Transform:getRelativeMatrix3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRelativeMatrix3D</apiName><shortdesc class="- topic/shortdesc ">
     Gibt ein Matrix3D-Objekt zurück, das den Raum eines angegebenen Anzeigeobjekts relativ zu seinem derzeitigen Raum transformiert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Matrix3D-Objekt, das den Raum des <codeph class="+ topic/ph pr-d/codeph ">relativeTo</codeph>-Anzeigeobjekts in den Raum des aktuellen Anzeigeobjekts transformiert.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">relativeTo</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.display:DisplayObject</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Anzeigeobjekt, auf das sich die Transformation bezieht. Um ein auf die Bühne bezogenes Matrix3D-Objekt zu erhalten, setzen Sie den Parameter auf das <codeph class="+ topic/ph pr-d/codeph ">root</codeph>- oder <codeph class="+ topic/ph pr-d/codeph ">stage</codeph>-Objekt. Um ein auf die Welt bezogenes Matrix3D-Objekt zu erhalten, stellen Sie den Parameter auf ein mit einer perspektivischen Transformation verändertes Anzeigeobjekt ein.
         
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt ein Matrix3D-Objekt zurück, das den Raum eines angegebenen Anzeigeobjekts relativ zu seinem derzeitigen Raum transformiert. Mit der <codeph class="+ topic/ph pr-d/codeph ">getRelativeMatrix3D()</codeph>-Methode bewegen Sie ein dreidimensionales Anzeigeobjekt relativ zu einem anderen dreidimensionalen Anzeigeobjekt. 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link></related-links></apiOperation><apiValue id="flash.geom:Transform:colorTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">colorTransform</apiName><shortdesc class="- topic/shortdesc ">
     Ein ColorTransform-Objekt mit Werten, die sämtliche Farben im Anzeigeobjekt ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example applies the ColorTransform object <code>blueColorTransform</code> to 
    the Transform object <code>trans</code>.  This ColorTransform converts the color of the MovieClip 
    <code>rect</code> from red to blue.
    <listing version="2.0">
    import flash.geom.Transform;
    import flash.geom.ColorTransform;
    
    var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
    
    var trans:Transform = new Transform(rect);
    trace(trans.colorTransform);          
    // (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=0, alphaOffset=0)
    
    var blueColorTransform:ColorTransform = new ColorTransform(0, 1, 1, 1, 0, 0, 255, 0);
    
    parentTrans.colorTransform = blueColorTransform;
    trace(trans.colorTransform);          
    // (redMultiplier=0, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=255, alphaOffset=0)
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     
     </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:ColorTransform</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert von colorTransform lautet beim Einstellen „null“.
     
    </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein ColorTransform-Objekt mit Werten, die sämtliche Farben im Anzeigeobjekt ändern.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#ColorTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.ColorTransform</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:concatenatedColorTransform:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">concatenatedColorTransform</apiName><shortdesc class="- topic/shortdesc ">
     Ein ColorTransform-Objekt, das die kombinierten auf das Anzeigeobjekt und alle übergeordneten Objekte angewendeten Farbtransformationen bis hin zur Stammebene angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example applies two Transform objects to both a parent and child MovieClip.
    A <code>blueColorTransform</code> is then applied to the Transform object <code>parentTrans</code> which
    adjusts the color of both parent and child MovieClips towards blue.  Notice how <code>child.concatenatedColorTransform</code> is the
    combination of <code>parentTrans</code> and <code>childTrans</code>. 
    <listing version="2.0">
    import flash.geom.Transform;
    import flash.geom.ColorTransform;
    
    var parentRect:MovieClip = createRectangle(20, 80, 0xFF0000);
    var childRect:MovieClip = createRectangle(10, 40, 0x00FF00, parentRect);
    
    var parentTrans:Transform = new Transform(parentRect);
    var childTrans:Transform = new Transform(childRect);
    
    var blueColorTransform:ColorTransform = new ColorTransform(0, 1, 1, 1, 0, 0, 255, 0);
    
    parentTrans.colorTransform = blueColorTransform;
    
    trace(childTrans.concatenatedColorTransform);     
    // (redMultiplier=0, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=255, alphaOffset=0)
    trace(childTrans.colorTransform);                 
    // (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=0, alphaOffset=0)
    trace(parentTrans.concatenatedColorTransform);    
    // (redMultiplier=0, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=0, greenOffset=0, blueOffset=255, alphaOffset=0)
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     
     </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:ColorTransform</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein ColorTransform-Objekt, das die kombinierten auf das Anzeigeobjekt und alle übergeordneten Objekte angewendeten Farbtransformationen bis hin zur Stammebene angibt. Wenn verschiedene Farbtransformationen auf unterschiedlichen Ebenen angewendet wurden, werden diese bei dieser Eigenschaft in einem ColorTransform-Objekt verknüpft.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#ColorTransform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.ColorTransform</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:concatenatedMatrix:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">concatenatedMatrix</apiName><shortdesc class="- topic/shortdesc ">
     Ein Matrix-Objekt, das die kombinierten Transformationsmatrizen des Anzeigeobjekts und aller übergeordneten Objekte bis hin zur Stammebene angibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example applies two Transform objects to a parent movie clip and to a child movie clip.
    A <code>scaleMatrix</code> is then applied to the Transform object <code>parentTrans</code> which
    scales both parent and child MovieClips.  Notice how <code>child.concatenatedMatrix</code> is the
    combination of <code>parentTrans</code> and <code>childTrans</code>. 
    
    <listing version="2.0">
    import flash.geom.Transform;
    import flash.geom.Matrix;
    
    var parentRect:MovieClip = createRectangle(20, 80, 0xFF0000);
    var childRect:MovieClip = createRectangle(10, 40, 0x00FF00, parentRect);
    
    var parentTrans:Transform = new Transform(parentRect);
    var childTrans:Transform = new Transform(childRect);
    
    var scaleMatrix:Matrix = new Matrix();
    scaleMatrix.scale(2, 2);
    
    parentTrans.matrix = scaleMatrix;
    
    trace(childTrans.concatenatedMatrix);     // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(childTrans.matrix);                 // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    trace(parentTrans.concatenatedMatrix);    // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     
     </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Matrix</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Matrix-Objekt, das die kombinierten Transformationsmatrizen des Anzeigeobjekts und aller übergeordneten Objekte bis hin zur Stammebene angibt. Wenn verschiedene Transformationsmatrizen auf unterschiedlichen Ebenen angewendet wurden, werden sie für diese Eigenschaft in einer Matrix verknüpft. Bei größenveränderbaren, im Browser ausgeführten SWF-Inhalten berücksichtigt diese Eigenschaft auch den Unterschied zwischen Bühnenkoordinaten und Fensterkoordinaten, der durch die Änderung der Fenstergröße entsteht. Somit konvertiert diese Eigenschaft lokale Koordinaten in Fensterkoordinaten, die nicht notwendigerweise dem Koordinatenraum der Bühne entsprechen.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Transform:matrix3D:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">matrix3D</apiName><shortdesc class="- topic/shortdesc ">
     Erlaubt den Zugriff auf das Matrix3D-Objekt eines dreidimensionalen Anzeigeobjekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Matrix3D</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erlaubt den Zugriff auf das Matrix3D-Objekt eines dreidimensionalen Anzeigeobjekts. Das Matrix3D-Objekt stellt eine Transformationsmatrix dar, die die Position und Ausrichtung des Anzeigeobjekts bestimmt. Ein Matrix3D-Objekt kann auch perspektivische Projektionen ausführen.
     
     
     <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">matrix</codeph>-Eigenschaft auf einen Wert (nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) eingestellt ist, ist die <codeph class="+ topic/ph pr-d/codeph ">matrix3D</codeph>-Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Und wenn die <codeph class="+ topic/ph pr-d/codeph ">matrix3D</codeph>-Eigenschaft auf einen Wert (nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) eingestellt ist, ist die <codeph class="+ topic/ph pr-d/codeph ">matrix</codeph>-Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:matrix:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">matrix</apiName><shortdesc class="- topic/shortdesc ">
     Ein Matrix-Objekt mit Werten, die die Skalierung, Drehung und Versetzung des Anzeigeobjekts ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example applies the Matrix object <code>scaleMatrix</code> to the Transform
     object <code>trans</code>.  This Matrix scales the MovieClip <code>rect</code> by a factor of two.
     <listing version="2.0">
     import flash.geom.Transform;
     import flash.geom.Matrix;
     
     var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
     
     var trans:Transform = new Transform(rect);
     trace(trans.matrix);         // (a=1, b=0, c=0, d=1, tx=0, ty=0)
          
     var scaleMatrix:Matrix = new Matrix();
     scaleMatrix.scale(2, 2);
     
     trans.matrix = scaleMatrix;
     trace(trans.matrix);         // (a=2, b=0, c=0, d=2, tx=0, ty=0)
     
     function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
     }
    </listing>
     
     </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Matrix</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Matrix ist leer, wenn gesetzt.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Matrix-Objekt mit Werten, die die Skalierung, Drehung und Versetzung des Anzeigeobjekts ändern.
     
     
     <p class="- topic/p ">Wenn die <codeph class="+ topic/ph pr-d/codeph ">matrix</codeph>-Eigenschaft auf einen Wert (nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) eingestellt ist, ist die <codeph class="+ topic/ph pr-d/codeph ">matrix3D</codeph>-Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Und wenn die <codeph class="+ topic/ph pr-d/codeph ">matrix3D</codeph>-Eigenschaft auf einen Wert (nicht <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) eingestellt ist, ist die <codeph class="+ topic/ph pr-d/codeph ">matrix</codeph>-Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:perspectiveProjection:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">perspectiveProjection</apiName><shortdesc class="- topic/shortdesc ">
     Erlaubt den Zugriff auf das PerspectiveProjection-Objekt eines dreidimensionalen Anzeigeobjekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:PerspectiveProjection</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erlaubt den Zugriff auf das PerspectiveProjection-Objekt eines dreidimensionalen Anzeigeobjekts. Das PerspectiveProjection-Objekt kann verwendet werden, um die Perspektiventransformation der Bühne zu ändern oder um allen untergeordneten dreidimensionalen Objekten eines Anzeigeobjekts eine Perspektiventransformation zuzuweisen.
     
     <p class="- topic/p ">Basierend auf dem Sichtfeld und dem Seitenverhältnis (Abmessungen) der Bühne wird dem Stammobjekt ein PerspectiveProjection-Standardobjekt zugewiesen.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#PerspectiveProjection" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.PerspectiveProjection</linktext></link></related-links></apiValue><apiValue id="flash.geom:Transform:pixelBounds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pixelBounds</apiName><shortdesc class="- topic/shortdesc ">
     Ein Rectangle-Objekt, das das Begrenzungsrechteck des Anzeigeobjekts auf der Bühne definiert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a Transform object <code>trans</code> and traces out
    its <code>pixelBounds</code>.  Notice that pixel bounds returns a bounding box with values 
    equal to MovieClip's <code>getBounds()</code> and <code>getRect()</code> methods.
    <listing version="2.0">
    import flash.geom.Transform;
    
    var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
    var trans:Transform = new Transform(rect);
    trace(trans.pixelBounds);         // (x=0, y=0, w=20, h=80)
    
    var boundsObj:Object = rect.getBounds();
    trace(boundsObj.xMin);            // 0
    trace(boundsObj.yMin);            // 0
    trace(boundsObj.xMax);            // 20
    trace(boundsObj.yMax);            // 80
    
    var rectObj:Object = rect.getRect();
    trace(rectObj.xMin);              // 0
    trace(rectObj.yMin);              // 0
    trace(rectObj.xMax);              // 20
    trace(rectObj.yMax);              // 80
    
    function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
      scope = (scope == undefined) ? this : scope;
      var depth:Number = scope.getNextHighestDepth();
      var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     
     </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein Rectangle-Objekt, das das Begrenzungsrechteck des Anzeigeobjekts auf der Bühne definiert.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:Matrix" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Matrix</apiName><shortdesc class="- topic/shortdesc ">
 Die Matrix-Klasse stellt eine Transformationsmatrix dar, die festlegt, wie Punkte eines Koordinatenraums einem anderen Koordinatenraum zugeordnet sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 
 </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine standardmäßige zweidimensionale und homogene Matrix-Klasse.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Die Matrix-Klasse stellt eine Transformationsmatrix dar, die festlegt, wie Punkte eines Koordinatenraums einem anderen Koordinatenraum zugeordnet sind. Sie können verschiedene grafische Transformationen für ein Anzeigeobjekt durchführen, indem Sie die Eigenschaften eines Matrix-Objekts festlegen, dieses Matrix-Objekt auf die <codeph class="+ topic/ph pr-d/codeph ">matrix</codeph>-Eigenschaft eines Transform-Objekts anwenden und dieses Transform-Objekt dann als <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft des Anzeigeobjekts anwenden. Die verfügbaren Transformationsfunktionen sind Schieben (<i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Neupositionierung), Drehen, Skalieren und Neigen. 
 
 <p class="- topic/p ">Diese Transformationsfunktionen werden als <i class="+ topic/ph hi-d/i ">affine Transformationen</i> bezeichnet. Bei affinen Transformationen bleiben gerade Linien erhalten, d. h., parallele Linien bleiben parallel.</p>
 
 <p class="- topic/p ">Wenn Sie eine Transformationsmatrix auf ein Anzeigeobjekt anwenden möchten, erstellen Sie ein Transform-Objekt, und legen Sie die entsprechende <codeph class="+ topic/ph pr-d/codeph ">matrix</codeph>-Eigenschaft für die Transformationsmatrix und dann die <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft des Anzeigeobjekts für das Transform-Objekt fest. Matrix-Objekte werden auch als Parameter für bestimmte Methoden verwendet. Dazu zählen u. a. die folgenden Methoden:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">die <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>-Methode eines BitmapData-Objekts</li><li class="- topic/li ">die Methoden <codeph class="+ topic/ph pr-d/codeph ">beginBitmapFill()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">beginGradientFill()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">lineGradientStyle()</codeph> eines Graphics-Objekts</li></ul>
 
 <p class="- topic/p ">Ein Transformationsmatrixobjekt ist eine 3x3-Matrix mit dem folgenden Inhalt:</p>
 
 <p class="- topic/p "><adobeimage alt="Eigenschaften der Matrix-Klasse in Matrixschweibweise" href="../../images/matrix_props1.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
 <p class="- topic/p ">In herkömmlichen Transformationsmatrizen werden zusätzliche Funktionen über die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">u</codeph>, <codeph class="+ topic/ph pr-d/codeph ">v</codeph> und <codeph class="+ topic/ph pr-d/codeph ">w</codeph> bereitgestellt. Die Matrix-Klasse kann nur im zweidimensionalen Raum verwendet werden. Es wird daher vorausgesetzt, dass der Wert der Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">u</codeph> und <codeph class="+ topic/ph pr-d/codeph ">v</codeph> 0,0 ist und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">w</codeph> 1,0. Die effektiven Werte der Matrix sind wie folgt:</p>
 
 <p class="- topic/p "><adobeimage alt="Bei den Eigenschaften der Matrix-Klasse in Matrixschreibweise werden für u, v und w angenommene Werte angezeigt." href="../../images/matrix_props2.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
 <p class="- topic/p ">Auch die Werte aller anderen sechs Eigenschaften eines Matrix-Objekts lassen sich abrufen und setzen: <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, <codeph class="+ topic/ph pr-d/codeph ">c</codeph>, <codeph class="+ topic/ph pr-d/codeph ">d</codeph>, <codeph class="+ topic/ph pr-d/codeph ">tx</codeph> und <codeph class="+ topic/ph pr-d/codeph ">ty</codeph>.</p>
 
 <p class="- topic/p ">Die Matrix-Klasse unterstützt die vier Haupttypen der Transformationsfunktionen: Schieben, Skalieren, Drehen und Neigen. Sie können drei dieser Transformationen über spezielle Methoden festlegen, die in der folgenden Tabelle beschrieben sind. </p>
 
 <adobetable class="innertable"><tgroup cols="5" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Transformation</entry><entry class="- topic/entry ">Methode</entry><entry class="- topic/entry ">Matrixwerte</entry><entry class="- topic/entry ">Anzeigeergebnis</entry><entry class="- topic/entry ">Beschreibung</entry></row></thead><tbody class="- topic/tbody "><row valign="top" class="- topic/row "><entry class="- topic/entry ">Versetzen (Verschieben)</entry><entry outputclass="nowrap" class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">translate(tx, ty)</codeph> </entry><entry class="- topic/entry "><adobeimage alt="Matrixschreibweise von translate-Methodenparametern" height="104" href="../../images/matrix_translate.jpg" width="150" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry "><adobeimage alt="Darstellung von Auswirkungen der translate-Methode" height="91" href="../../images/matrix_translate_image.jpg" width="111" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry ">Verschiebt das Bild um <codeph class="+ topic/ph pr-d/codeph ">tx</codeph> Pixel nach rechts und <codeph class="+ topic/ph pr-d/codeph ">ty</codeph> Pixel nach unten.</entry></row><row valign="top" class="- topic/row "><entry class="- topic/entry ">Skalieren</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">scale(sx, sy)</codeph></entry><entry class="- topic/entry "><adobeimage alt="Matrixschreibweise von scale-Methodenparametern" height="105" href="../../images/matrix_scale.jpg" width="140" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry "><adobeimage alt="Darstellung von Auswirkungen der scale-Methode" height="84" href="../../images/matrix_scale_image.jpg" width="111" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry ">Ändert die Bildgröße, wobei die Position jedes Pixels mit <codeph class="+ topic/ph pr-d/codeph ">sx</codeph> auf der <i class="+ topic/ph hi-d/i ">x</i>-Achse und mit <codeph class="+ topic/ph pr-d/codeph ">sy</codeph> auf der <i class="+ topic/ph hi-d/i ">y</i>-Achse multipliziert wird.</entry></row><row valign="top" class="- topic/row "><entry class="- topic/entry ">Drehen</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">rotate(q)</codeph></entry><entry class="- topic/entry "><adobeimage alt="Matrixschreibweise von rotate-Methodeneigenschaften" height="105" href="../../images/matrix_rotate.jpg" width="219" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry "><adobeimage alt="Darstellung von Auswirkungen der rotate-Methode" height="91" href="../../images/matrix_rotate_image.jpg" width="111" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry ">Dreht das Bild um den Winkel <codeph class="+ topic/ph pr-d/codeph ">q</codeph>, der im Bogenmaß angegeben wird.</entry></row><row valign="top" class="- topic/row "><entry class="- topic/entry ">Neigen oder Scheren </entry><entry class="- topic/entry ">Keine Methode. Die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">b</codeph> und <codeph class="+ topic/ph pr-d/codeph ">c</codeph> müssen festgelegt werden.</entry><entry class="- topic/entry "><adobeimage alt="Matrixschreibweise von Eigenschaften der skew-Funktion" href="../../images/matrix_skew.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry "><adobeimage alt="Darstellung von Auswirkungen der skew-Funktion" height="77" href="../../images/matrix_skew_image.jpg" width="111" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry><entry class="- topic/entry ">Verschiebt das Bild stufenweise in paralleler Richtung zur <i class="+ topic/ph hi-d/i ">x</i>- oder <i class="+ topic/ph hi-d/i ">y</i>-Achse. Die <codeph class="+ topic/ph pr-d/codeph ">b</codeph>-Eigenschaft des Matrix-Objekts gibt die Tangente des Neigungswinkels entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse an und die <codeph class="+ topic/ph pr-d/codeph ">c</codeph>-Eigenschaft des Matrix-Objekts die Tangente des Neigungswinkels entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse.</entry></row></tbody></tgroup></adobetable>
 <p class="- topic/p ">Bei jeder Transformation werden die aktuellen Matrixeigenschaften geändert. Daher können Sie mehrere Transformationen miteinander kombinieren. Rufen Sie dazu mehrere Transformationsfunktionen auf, bevor Sie die Matrix auf das entsprechende Anzeigeobjekt anwenden (mithilfe der <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft des Anzeigeobjekts).</p>
 
 <p class="- topic/p ">Erstellen Sie mit dem <codeph class="+ topic/ph pr-d/codeph ">new Matrix()</codeph>-Konstruktor ein Matrix-Objekt, bevor Sie die Methoden des Matrix-Objekts aufrufen können.</p>
 
 </apiDesc><example conref="examples\MatrixExample.as" class="- topic/example "> Im folgenden Beispiel wird mithilfe der <codeph class="+ topic/ph pr-d/codeph ">MatrixExample</codeph>-Klasse demonstriert, wie ein großes Quadrat mit Farbverlaufsfüllung erstellt werden kann. Dies wird in den folgenden Schritten erreicht:
 <ol class="- topic/ol "><li class="- topic/li ">Die Anwendung erstellt ein neues Matrix-Objekt (<codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph>) und mithilfe der <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>-Methode werden die Standardeigenschaftswerte für das <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph>-Objekt ausgegeben.</li><li class="- topic/li ">Die Anwendung ruft <codeph class="+ topic/ph pr-d/codeph ">createGradientBox()</codeph> auf, wobei die Parameter <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> auf 200 Pixel gesetzt sind. Es wurde keine Drehung eingestellt, und der Abstand für die Verschiebung entlang der <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Achse ist auf 50 Pixel gesetzt.</li><li class="- topic/li ">Die Anwendung druckt das <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph>-Objekt erneut, um die Änderungen durch den Aufruf von <codeph class="+ topic/ph pr-d/codeph ">createGradientBox()</codeph> zu verdeutlichen.</li><li class="- topic/li ">Von der Anwendung werden drei Variablen eingerichtet, mit denen das Farbverlaufsfeld gesteuert wird:
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">colors</codeph>: Setzt die Farben des Farbverlaufs auf einen Bereich zwischen reinem Rot und reinem Blau.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">alphas</codeph>: Setzt die Deckkraft auf undurchsichtig.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ratios</codeph>: Legt fest, dass beide Farben gleichmäßig verteilt sind.</li></ul></li><li class="- topic/li ">Die Anwendung ruft die Graphics-Methode <codeph class="+ topic/ph pr-d/codeph ">beginGradientFill()</codeph> auf, die sich auf das <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph>-Objekt auswirkt. Außerdem ruft sie die <codeph class="+ topic/ph pr-d/codeph ">lineTo()</codeph>-Methode auf, und daraufhin wird das Feld mit Farbverlaufsfüllung erstellt.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.geom.Matrix;
    import flash.display.Sprite;
    import flash.display.GradientType;

    public class MatrixExample extends Sprite {

        public function MatrixExample() {
            var myMatrix:Matrix = new Matrix();
            trace(myMatrix.toString());    // (a=1, b=0, c=0, d=1, tx=0, ty=0)

            myMatrix.createGradientBox(200, 200, 0, 50, 50);
            trace(myMatrix.toString());    // (a=0.1220703125, b=0, c=0, d=0.1220703125, tx=150, ty=150)

            var colors:Array = [0xFF0000, 0x0000FF];
            var alphas:Array = [1, 1];
            var ratios:Array = [0, 0xFF];
            graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, myMatrix);
            graphics.lineTo(0, 300);
            graphics.lineTo(300, 300);
            graphics.lineTo(300, 0);
            graphics.lineTo(0, 0);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/transform" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.transform</linktext></link><link href="flash.geom.xml#Transform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform</linktext></link><link href="flash.display.xml#BitmapData/draw()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.draw()</linktext></link><link href="flash.display.xml#Graphics/beginBitmapFill()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.beginBitmapFill()</linktext></link><link href="flash.display.xml#Graphics/beginGradientFill()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.beginGradientFill()</linktext></link><link href="flash.display.xml#Graphics/lineGradientStyle()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.lineGradientStyle()</linktext></link></related-links><apiConstructor id="flash.geom:Matrix:Matrix" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Matrix</apiName><shortdesc class="- topic/shortdesc ">
    Erstellt ein neues Matrix-Objekt mit den angegebenen Parametern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
    
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">a</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">b</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">c</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">d</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Strecke, um die jeder Punkt entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse geschoben werden soll.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ty</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Abstand, um den jeder Punkt entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse verschoben werden soll.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erstellt ein neues zweidimensionales Matrix-Objekt.
    
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Erstellt ein neues Matrix-Objekt mit den angegebenen Parametern. In der Matrixschreibweise sind die Eigenschaften wie folgt angeordnet:
    
    <p class="- topic/p "><adobeimage alt="Bei den Eigenschaften der Matrix-Klasse in Matrixschreibweise werden für u, v und w angenommene Werte angezeigt." href="../../images/matrix_props2.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    <p class="- topic/p ">Wenn Sie für den <codeph class="+ topic/ph pr-d/codeph ">new Matrix()</codeph>-Konstruktor keine Parameter angeben, wird eine <i class="+ topic/ph hi-d/i ">Identitätsmatrix</i> mit den folgenden Werten erstellt:</p>
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">a = 1</pre></entry><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">b = 0</pre></entry></row><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">c = 0</pre></entry><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">d = 1</pre></entry></row><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">tx = 0</pre></entry><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">ty = 0</pre></entry></row></tbody></tgroup></adobetable>
    <p class="- topic/p ">In der Matrixschreibweise sieht die Identitätsmatrix wie folgt aus:</p>
    
    <p class="- topic/p "><adobeimage alt="Eigenschaften der Matrix-Klasse in Matrixschweibweise" href="../../images/matrix_identity.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    </apiDesc><example conref="examples\Matrix.1.as" class="- topic/example "> Im folgenden Beispiel wird <codeph class="+ topic/ph pr-d/codeph ">matrix_1</codeph> erstellt, indem keine Parameter an den <codeph class="+ topic/ph pr-d/codeph ">Matrix()</codeph>-Konstruktor gesendet werden, und <codeph class="+ topic/ph pr-d/codeph ">matrix_2</codeph>, indem Parameter gesendet werden. Beachten Sie, dass <codeph class="+ topic/ph pr-d/codeph ">matrix_1</codeph>, die ohne Parameter erstellt wurde, eine Identitätsmatrix mit den Werten <codeph class="+ topic/ph pr-d/codeph ">a</codeph>=1, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>=0, <codeph class="+ topic/ph pr-d/codeph ">c</codeph>=0, <codeph class="+ topic/ph pr-d/codeph ">d</codeph>=1, <codeph class="+ topic/ph pr-d/codeph ">tx</codeph>=0, <codeph class="+ topic/ph pr-d/codeph ">ty</codeph>=0 ergibt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;

var matrix_1:Matrix = new Matrix();
trace(matrix_1);  // (a=1, b=0, c=0, d=1, tx=0, ty=0)

var matrix_2:Matrix = new Matrix(1, 2, 3, 4, 5, 6);
trace(matrix_2);  // (a=1, b=2, c=3, d=4, tx=5, ty=6)
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:Matrix:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
    Gibt ein neues Matrix-Objekt zurück, das ein Klon dieser Matrix ist, mit einer exakten Kopie des enthaltenen Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates <code>clonedMatrix</code> from <code>myMatrix</code>.
    Notice that the Matrix class does not have an equals method, so the following example
    uses a custom written function to test the equality of two Matricies.
    
    <listing version="2.0">
    import flash.geom.Matrix;
       
    var myMatrix:Matrix = new Matrix(2, 0, 0, 2, 0, 0);
    var clonedMatrix:Matrix = new Matrix();
    
    trace(myMatrix);                        // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(clonedMatrix);                    // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    trace(equals(myMatrix, clonedMatrix));  // false
    
    clonedMatrix = myMatrix.clone(); 
    
    trace(myMatrix);                        // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(clonedMatrix);                    // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    trace(equals(myMatrix, clonedMatrix));  // true
    
    function equals(m1:Matrix, m2:Matrix):Boolean {
        return m1.toString() == m2.toString();
    }
    </listing>
      
      </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Matrix-Objekt.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt ein neues Matrix-Objekt zurück, das eine Kopie der aktuellen Matrix ist.
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Gibt ein neues Matrix-Objekt zurück, das ein Klon dieser Matrix ist, mit einer exakten Kopie des enthaltenen Objekts.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
    Verkettet eine Matrix mit der aktuellen Matrix und kombiniert auf diese Weise die geometrischen Effekte der beiden Matrizen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates three Matricies that define transformations for
    three rectangle MovieClips.  The first two Matricies <code>rotate45Matrix</code>
    and <code>doubleScaleMatrix</code> are applied to the two rectangles 
    <code>rectangleMc_1</code> and <code>rectangleMc_2</code>.  Then, the third
    Matrix is created using the <code>concat()</code> method on <code>rotate45Matrix</code> and 
    <code>doubleScaleMatrix</code> to create <code>scaleAndRotateMatrix</code>. 
    This Matrix is then applied to <code>rectangleMc_3</code> to scale and rotate it.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    var rectangleMc_0:MovieClip = createRectangle(20, 80, 0x000000);
    var rectangleMc_1:MovieClip = createRectangle(20, 80, 0xFF0000);   
    var rectangleMc_2:MovieClip = createRectangle(20, 80, 0x00FF00);   
    var rectangleMc_3:MovieClip = createRectangle(20, 80, 0x0000FF);
    
    var rectangleTrans_1:Transform = new Transform(rectangleMc_1);
    var rectangleTrans_2:Transform = new Transform(rectangleMc_2);
    var rectangleTrans_3:Transform = new Transform(rectangleMc_3);
    
    var rotate45Matrix:Matrix = new Matrix();
    rotate45Matrix.rotate(Math.PI/4);
    rectangleTrans_1.matrix = rotate45Matrix;
    rectangleMc_1._x = 100;
    trace(rotate45Matrix.toString());    // (a=0.707106781186548, b=0.707106781186547, c=-0.707106781186547, d=0.707106781186548, tx=0, ty=0)
    
    var doubleScaleMatrix:Matrix = new Matrix();
    doubleScaleMatrix.scale(2, 2);
    rectangleTrans_2.matrix = doubleScaleMatrix;
    rectangleMc_2._x = 200;
    trace(doubleScaleMatrix.toString());  // (a=2, b=0, c=0, d=2, tx=0, ty=0)
    
    var scaleAndRotateMatrix:Matrix = doubleScaleMatrix.clone();
    scaleAndRotateMatrix.concat(rotate45Matrix);
    rectangleTrans_3.matrix = scaleAndRotateMatrix;
    rectangleMc_3._x = 300;
    trace(scaleAndRotateMatrix.toString());   // (a=1.4142135623731, b=1.41421356237309, c=-1.41421356237309, d=1.4142135623731, tx=0, ty=0)
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
        var depth:Number = this.getNextHighestDepth();
        var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
        mc.beginFill(color);
        mc.lineTo(0, height);
        mc.lineTo(width, height);
        mc.lineTo(width, 0);
        mc.lineTo(0, 0);
        return mc;
    }
    
    </listing>
    
    </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">m</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die mit der Quellmatrix zu verkettende Matrix.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Verkettet eine Matrix mit der aktuellen Matrix und kombiniert auf diese Weise die geometrischen Effekte der beiden Matrizen. In mathematischer Hinsicht entspricht die Verkettung zweier Matrizen der Kombination der beiden Matrizen durch eine Matrixmultiplikation.
    
    <p class="- topic/p ">Wenn die Matrix <codeph class="+ topic/ph pr-d/codeph ">m1</codeph> beispielsweise ein Objekt um einen Faktor von vier skaliert und Matrix <codeph class="+ topic/ph pr-d/codeph ">m2</codeph> ein Objekt um einen Bogenmaßwert von 1,5707963267949 dreht (<codeph class="+ topic/ph pr-d/codeph ">Math.PI/2</codeph>), dann wandelt <codeph class="+ topic/ph pr-d/codeph ">m1.concat(m2)</codeph> <codeph class="+ topic/ph pr-d/codeph ">m1</codeph> in eine Matrix um, die ein Objekt um den Faktor vier skaliert und es um einen Bogenmaßwert von <codeph class="+ topic/ph pr-d/codeph ">Math.PI/2</codeph> dreht. </p>
    
    <p class="- topic/p ">Diese Methode ersetzt die Quellmatrix durch die verkettete Matrix. Wenn Sie zwei Matrizen ohne eine Änderung der beiden Quellmatrizen verketten möchten, kopieren Sie zuerst die Quellmatrix mit der Methode <codeph class="+ topic/ph pr-d/codeph ">clone()</codeph> (siehe dazu den Abschnitt mit Beispielen für Klassen).</p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:createBox" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createBox</apiName><shortdesc class="- topic/shortdesc ">
     Enthält Parameter zur Skalierung, Drehung und Versetzung.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">scaleX</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Faktor für die horizontale Skalierung. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">scaleY</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Faktor für die vertikale Skalierung. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rotation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Drehungswert im Bogenmaß. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Anzahl der entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse nach rechts umzusetzenden (zu verschiebenden) Pixel. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ty</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Anzahl der entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse nach unten umzusetzenden (zu verschiebenden) Pixel.  
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erstellt ein Matrix-Objekt mit Skalierungs-, Drehungs- und Umsetzungswerten.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Enthält Parameter zur Skalierung, Drehung und Versetzung. Wenn diese Methode auf eine Matrix angewendet wird, legt sie die Werte der Matrix entsprechend diesen Parametern fest.
     
     <p class="- topic/p ">Mit der Methode <codeph class="+ topic/ph pr-d/codeph ">createBox()</codeph> können Sie die gleiche Matrix erstellen wie beim Anwenden der Methoden <codeph class="+ topic/ph pr-d/codeph ">identity()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">rotate()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">scale()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">translate()</codeph> nacheinander. So hat beispielsweise <codeph class="+ topic/ph pr-d/codeph ">mat1.createBox(2,2,Math.PI/4, 100, 100)</codeph> denselben Effekt wie:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     import flash.geom.Matrix;
     
     var mat1:Matrix = new Matrix();
     mat1.identity();
     mat1.rotate(Math.PI/4);
     mat1.scale(2,2);
     mat1.translate(10,20);
     </codeblock>
     
     
     
     </apiDesc><example conref="examples\Matrix_createBox.as" class="- topic/example "> Im folgenden Beispiel werden die x-Skalierung, y-Skalierung, Drehung, x-Position und y-Position von <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> gesetzt, indem die Methode <codeph class="+ topic/ph pr-d/codeph ">createBox()</codeph> aufgerufen wird.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package
{
    import flash.display.Shape;
    import flash.display.Sprite;
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    public class Matrix_createBox extends Sprite
    {
        public function Matrix_createBox()
        {
             var myMatrix:Matrix = new Matrix();
             trace(myMatrix.toString());  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
             
             myMatrix.createBox(1, 2, Math.PI/4, 50, 100);
             trace(myMatrix.toString());  
             // (a=0.7071067811865476, b=1.414213562373095, c=-0.7071067811865475, 
             //  d=1.4142135623730951, tx=100, ty=200)
             
             var rectangleShape:Shape = createRectangle(20, 80, 0xFF0000);   
             addChild(rectangleShape);
              
             var rectangleTrans:Transform = new Transform(rectangleShape);
             rectangleTrans.matrix = myMatrix;
        }
        
        public function createRectangle(w:Number, h:Number, color:Number):Shape 
        {
            var rect:Shape = new Shape();
            rect.graphics.beginFill(color);
            rect.graphics.drawRect(0, 0, w, h);
            addChild(rect);
            return rect;
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Graphics/beginBitmapFill()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.beginBitmapFill()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix:createGradientBox" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createGradientBox</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt den speziellen Matrixstil, der durch die beginGradientFill()- und lineGradientStyle()-Methoden der Graphics-Klasse vorgegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Method
     
     </category></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">width</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Breite des Farbverlaufsfelds.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">height</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Höhe des Farbverlaufsfelds.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rotation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Drehungswert im Bogenmaß. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse nach rechts zu verschiebende Abstand in Pixel. Dieser Wert wird um die Hälfte des <codeph class="+ topic/ph pr-d/codeph ">width</codeph>-Parameters versetzt. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ty</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse nach unten zu verschiebende Abstand in Pixel. Dieser Wert wird um die Hälfte des <codeph class="+ topic/ph pr-d/codeph ">height</codeph>-Parameters versetzt. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erstellt den speziellen Matrixstil, der durch die beginGradientFill()-Methode der Graphics-Klasse vorgegeben wird.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt den speziellen Matrixstil, der durch die Methoden <codeph class="+ topic/ph pr-d/codeph ">beginGradientFill()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">lineGradientStyle()</codeph> der Graphics-Klasse vorgegeben wird. Breite und Höhe werden auf ein <codeph class="+ topic/ph pr-d/codeph ">scaleX</codeph>/<codeph class="+ topic/ph pr-d/codeph ">scaleY</codeph>-Paar skaliert und die <codeph class="+ topic/ph pr-d/codeph ">tx</codeph>/<codeph class="+ topic/ph pr-d/codeph ">ty</codeph>-Werte werden um die halbe Breite und Höhe abgesetzt.
     
     <p class="- topic/p ">Dies wird an einem Beispiel für einen Farbverlauf mit den folgenden Merkmalen verdeutlicht:</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">GradientType.LINEAR</codeph></li><li class="- topic/li ">Zwei Farben, Grün und Blau, bei denen das ratios-Array auf <codeph class="+ topic/ph pr-d/codeph ">[0, 255]</codeph> gesetzt ist.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SpreadMethod.PAD</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">InterpolationMethod.LINEAR_RGB</codeph></li></ul>
     
     <p class="- topic/p ">In den folgenden Abbildungen sind Farbverläufe, bei denen die Matrix mit der <codeph class="+ topic/ph pr-d/codeph ">createGradientBox()</codeph>-Methode definiert wurde, mit verschiedenen Parametereinstellungen dargestellt:</p>
     
     <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Einstellungen für <codeph class="+ topic/ph pr-d/codeph ">createGradientBox()</codeph></entry><entry class="- topic/entry ">Resultierender Farbverlauf</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">width = 25;
     height = 25; 
     rotation = 0; 
     tx = 0; 
     ty = 0;</pre></entry><entry align="center" class="- topic/entry "><adobeimage alt="daraus resultierender linearer Verlauf" href="../../images/createGradientBox-1.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry></row><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">width = 25; 
     height = 25; 
     rotation = 0; 
     tx = 25; 
     ty = 0;</pre></entry><entry align="center" class="- topic/entry "><adobeimage alt="daraus resultierender linearer Verlauf" href="../../images/createGradientBox-2.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry></row><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">width = 50; 
     height = 50; 
     rotation = 0; 
     tx = 0; 
     ty = 0;</pre></entry><entry align="center" class="- topic/entry "><adobeimage alt="daraus resultierender linearer Verlauf" href="../../images/createGradientBox-3.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry></row><row class="- topic/row "><entry class="- topic/entry "><pre xml:space="preserve" class="- topic/pre ">width = 50;
     height = 50; 
     rotation = Math.PI / 4; // 45 degrees
     tx = 0; 
     ty = 0;</pre></entry><entry align="center" class="- topic/entry "><adobeimage alt="daraus resultierender linearer Verlauf" href="../../images/createGradientBox-4.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></entry></row></tbody></tgroup></adobetable>
     
     </apiDesc><example conref="examples\Matrix_createGradientBox.as" class="- topic/example "> Im folgenden Beispiel werden die x-Skalierung, y-Skalierung, Drehung, x-Position und y-Position von <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> gesetzt, indem die Methode <codeph class="+ topic/ph pr-d/codeph ">createBox()</codeph> aufgerufen wird.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package
{
    import flash.display.GradientType;
    import flash.display.Sprite;
    import flash.geom.Matrix;
    
    public class Matrix_createGradientBox extends Sprite
    {
        public function Matrix_createGradientBox()
        {
             var myMatrix:Matrix = new Matrix();
             trace(myMatrix.toString());          // (a=1, b=0, c=0, d=1, tx=0, ty=0)
             
             myMatrix.createGradientBox(200, 200, 0, 50, 50);
             trace(myMatrix.toString());          // (a=0.1220703125, b=0, c=0, d=0.1220703125, tx=150, ty=150)
             
             var colors:Array = [0xFF0000, 0x0000FF];
             var alphas:Array = [100, 100];
             var ratios:Array = [0, 0xFF];
             
             this.graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, myMatrix);
             this.graphics.drawRect(0, 0, 300, 200);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Graphics/beginGradientFill()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.beginGradientFill()</linktext></link><link href="flash.display.xml#Graphics/lineGradientStyle()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Graphics.lineGradientStyle()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Matrix:deltaTransformPoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deltaTransformPoint</apiName><shortdesc class="- topic/shortdesc ">
    Diese Methode gibt für einen Punkt im noch nicht transformierten Koordinatenraum die entsprechenden Punktkoordinaten nach der Transformation zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example uses the <code>deltaTransformPoint()</code> method 
    to create <code>deltaTransformedPoint</code> from <code>myPoint</code>.  Notice that
    the <code>translate()</code> method has no affect on the position of <code>deltaTransformedPoint</code>.
    In the example, however, <code>scale()</code> does affect the position.  It
    increases the original <code>x</code> value by a factor of three from 50 to 150.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Point;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    myMatrix.translate(100, 0);
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=100, ty=0)
    
    myMatrix.scale(3, 3);
    trace(myMatrix);  // (a=3, b=0, c=0, d=3, tx=300, ty=0)
    
    var myPoint:Point = new Point(50,0);
    trace(myPoint);   // (50, 0)              
    
    var deltaTransformedPoint:Point = myMatrix.deltaTransformPoint(myPoint);
    trace(deltaTransformedPoint); // (150, 0)
    
    var pointMc_0:MovieClip = createRectangle(10, 10, 0xFF0000);
    pointMc_0._x = myPoint.x;
    
    var pointMc_1:MovieClip = createRectangle(10, 10, 0x00FF00);
    pointMc_1._x = deltaTransformedPoint.x;
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
     
     </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der sich aus der Matrixtransformation ergebende Punkt.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">point</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Punkt, für den das Ergebnis der Matrixtransformation abgerufen werden soll.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Diese Methode gibt für einen Punkt im noch nicht transformierten Koordinatenraum die entsprechenden Punktkoordinaten nach der Transformation zurück. Im Gegensatz zur Standardtransformation, die mithilfe der Methode <codeph class="+ topic/ph pr-d/codeph ">transformPoint()</codeph> angewendet wird, werden die Umsetzungsparameter <codeph class="+ topic/ph pr-d/codeph ">tx</codeph> und <codeph class="+ topic/ph pr-d/codeph ">ty</codeph> bei einer Transformation durch die Methode <codeph class="+ topic/ph pr-d/codeph ">deltaTransformPoint()</codeph> nicht berücksichtigt.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:identity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">identity</apiName><shortdesc class="- topic/shortdesc ">
    Setzt jede Matrixeigenschaft auf einen Wert, der zu einer Nulltransformation führt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Method
    </category></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Setzt jede Matrixeigenschaft auf einen Wert, der zu einer Nulltransformation führt. Ein durch Anwenden einer Identitätsmatrix transformiertes Objekt entspricht dem Original.
    
    <p class="- topic/p ">Nach Aufruf der Methode <codeph class="+ topic/ph pr-d/codeph ">identity()</codeph> hat die resultierende Matrix die folgenden Eigenschaften: <codeph class="+ topic/ph pr-d/codeph ">a</codeph> =1, <codeph class="+ topic/ph pr-d/codeph ">b</codeph> =0, <codeph class="+ topic/ph pr-d/codeph ">c</codeph> =0, <codeph class="+ topic/ph pr-d/codeph ">d</codeph> =1, <codeph class="+ topic/ph pr-d/codeph ">tx</codeph> =0, <codeph class="+ topic/ph pr-d/codeph ">ty</codeph> =0.</p>
    
    <p class="- topic/p ">In der Matrixschreibweise sieht die Identitätsmatrix wie folgt aus:</p>
    
    <p class="- topic/p "><adobeimage alt="Eigenschaften der Matrix-Klasse in Matrixschweibweise" href="../../images/matrix_identity.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:invert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">invert</apiName><shortdesc class="- topic/shortdesc ">
     Führt die umgekehrte Transformation der ursprünglichen Matrix durch.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Führt die umgekehrte Transformation der ursprünglichen Matrix durch. Sie können eine umgekehrte Matrix auf ein Objekt anwenden, um die bei der Anwendung der ursprünglichen Matrix vorgenommene Transformation rückgängig zu machen.
     
     </apiDesc><example conref="examples\Matrix_invert.as" class="- topic/example "> Im folgenden Beispiel wird <codeph class="+ topic/ph pr-d/codeph ">halfScaleMatrix</codeph> erstellt, und zwar durch den Aufruf der Methode<codeph class="+ topic/ph pr-d/codeph ">invert()</codeph> aus <codeph class="+ topic/ph pr-d/codeph ">doubleScaleMatrix</codeph>. Anschließend wird demonstriert, dass die beiden Matrizen Umkehrungen voneinander sind, d. h., dass sie verwendet werden können, um Transformationen der jeweils anderen Matrix rückgängig zu machen, und zwar durch die Erstellung von <codeph class="+ topic/ph pr-d/codeph ">originalAndInverseMatrix</codeph>, die identisch ist mit <codeph class="+ topic/ph pr-d/codeph ">noScaleMatrix</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package
{
    import flash.display.Shape;
    import flash.display.Sprite;
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    public class Matrix_invert extends Sprite
    {
        public function Matrix_invert()
        {
            var rect0:Shape = createRectangle(20, 80, 0xFF0000);   
            var rect1:Shape = createRectangle(20, 80, 0x00FF00);   
            var rect2:Shape = createRectangle(20, 80, 0x0000FF);
            var rect3:Shape = createRectangle(20, 80, 0x000000);
            
            var trans0:Transform = new Transform(rect0);
            var trans1:Transform = new Transform(rect1);
            var trans2:Transform = new Transform(rect2);
            var trans3:Transform = new Transform(rect3);
             
            var doubleScaleMatrix:Matrix = new Matrix(2, 0, 0, 2, 0, 0);
            trans0.matrix = doubleScaleMatrix;
            trace(doubleScaleMatrix.toString());  // (a=2, b=0, c=0, d=2, tx=0, ty=0)
             
            var noScaleMatrix:Matrix = new Matrix(1, 0, 0, 1, 0, 0);
            trans1.matrix = noScaleMatrix;
            rect1.x = 50;
            trace(noScaleMatrix.toString());  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
             
            var halfScaleMatrix:Matrix = doubleScaleMatrix.clone();
            halfScaleMatrix.invert();
            trans2.matrix = halfScaleMatrix;
            rect2.x = 100;
            trace(halfScaleMatrix.toString());  // (a=0.5, b=0, c=0, d=0.5, tx=0, ty=0)
             
            var originalAndInverseMatrix:Matrix = doubleScaleMatrix.clone();
            originalAndInverseMatrix.concat(halfScaleMatrix);
            trans3.matrix = originalAndInverseMatrix;
            rect3.x = 150;
            trace(originalAndInverseMatrix.toString());  // (a=1, b=0, c=0, d=1, tx=0, ty=0)            
        }
        
        public function createRectangle(w:Number, h:Number, color:Number):Shape 
        {
            var rect:Shape = new Shape();
            rect.graphics.beginFill(color);
            rect.graphics.drawRect(0, 0, w, h);
            addChild(rect);
            return rect;
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:rotate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rotate</apiName><shortdesc class="- topic/shortdesc ">
     Wendet eine Drehung auf das Matrix-Objekt an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example the <code>rotate()</code> method rotates <code>rectangleMc</code>
    30 degrees clockwise.  Notice that applying <code>myMatrix</code> to <code>rectangleMc</code>
    resets its <i class="+ topic/ph hi-d/i ">_x</i> value leaving us to reset it to 100 manually.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix.toString());           // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    var degrees:Number = 30;
    var radians:Number = (degrees/180) ~~ Math.PI;
    myMatrix.rotate(radians);
    trace(myMatrix.toString());           // (a=0.866025403784439, b=0.5, c=-0.5, d=0.866025403784439, tx=0, ty=0)
    
    var rectangleMc:MovieClip = createRectangle(20, 80, 0xFF0000);
    trace(rectangleMc._x);                // 0
    rectangleMc._x = 100;
    trace(rectangleMc._x);                // 100
    
    var rectangleTrans:Transform = new Transform(rectangleMc);
    rectangleTrans.matrix = myMatrix;
    trace(rectangleMc._x);                // 0
    rectangleMc._x = 100;
    trace(rectangleMc._x);                // 100
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
    The above example uses the <code>_x</code> property of the MovieClip object 
    to position <code>rectangleMc</code>.  Generally, when dealing with Matrix
    positioning, mixing positioning techniques is considered bad style.  The  
    example above written in good style would concatenate a translation Matrix to
    <code>myMatrix</code> to change the horizontal location of <code>rectangleMc</code>. 
    The following example demonstrates this. 
    <listing version="2.0">
    import flash.geom.Matrix;
    import flash.geom.Transform;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix.toString());   // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    var degrees:Number = 30;
    var radians:Number = (degrees/180) ~~ Math.PI;
    myMatrix.rotate(radians);
    trace(myMatrix.toString());   // (a=0.866025403784439, b=0.5, c=-0.5, d=0.866025403784439, tx=0, ty=0)
    
    var translateMatrix:Matrix = new Matrix();
    translateMatrix.translate(100, 0);
    myMatrix.concat(translateMatrix);
    trace(myMatrix.toString());   // (a=0.866025403784439, b=0.5, c=-0.5, d=0.866025403784439, tx=100, ty=0)
    
    var rectangleMc:MovieClip = createRectangle(20, 80, 0xFF0000);
    trace(rectangleMc._x);        // 0
    rectangleMc._x = 100;
    trace(rectangleMc._x);        // 100
    
    var rectangleTrans:Transform = new Transform(rectangleMc);
    rectangleTrans.matrix = myMatrix;
    trace(rectangleMc._x);        // 100
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
      
      </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angle</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Drehwinkel im Bogenmaß.
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Wendet eine Drehung auf das Matrix-Objekt an. 
     
     <p class="- topic/p ">Durch die Methode <codeph class="+ topic/ph pr-d/codeph ">rotate()</codeph> werden die <codeph class="+ topic/ph pr-d/codeph ">a</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>-, <codeph class="+ topic/ph pr-d/codeph ">c</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">d</codeph>-Eigenschaften des Matrix-Objekts geändert. In der Matrixschreibweise entspricht dies der Verkettung der aktuellen Matrix mit der folgenden Matrix:</p>
     
     <p class="- topic/p "><adobeimage alt="Matrixschreibweise von scale-Methodenparametern" height="105" href="../../images/matrix_rotate.jpg" width="219" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:scale" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">scale</apiName><shortdesc class="- topic/shortdesc ">
     Wendet eine Skalierung auf die Matrix an.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example uses the <code>scale()</code> method to
    scale <code>myMatrix</code> by a factor of 3 horizontally and a factor of 4 
    vertically.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    
    var myMatrix:Matrix = new Matrix(2, 0, 0, 2, 100, 100);
    trace(myMatrix.toString());   // (a=2, b=0, c=0, d=2, tx=100, ty=100)
    
    myMatrix.scale(3, 4);
    trace(myMatrix.toString());   // (a=6, b=0, c=0, d=8, tx=300, ty=400)
    </listing>
      
      </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Multiplikator zur Skalierung des Objekts entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Wendet eine Skalierung auf die Matrix an. Die <i class="+ topic/ph hi-d/i ">x</i>-Achse wird mit <codeph class="+ topic/ph pr-d/codeph ">sx</codeph> und die <i class="+ topic/ph hi-d/i ">y</i>-Achse mit <codeph class="+ topic/ph pr-d/codeph ">sx</codeph> multipliziert.
     
     <p class="- topic/p ">Die Methode <codeph class="+ topic/ph pr-d/codeph ">scale()</codeph> ändert die <codeph class="+ topic/ph pr-d/codeph ">a</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">d</codeph>-Eigenschaften des Matrix-Objekts. In der Matrixschreibweise entspricht dies der Verkettung der aktuellen Matrix mit der folgenden Matrix:</p>
     <p class="- topic/p "><adobeimage alt="Matrixschreibweise von scale-Methodenparametern" height="105" href="../../images/matrix_scale.jpg" width="140" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Gibt einen Textwert zurück, der eine Eigenschaftenliste des Matrix-Objekts enthält.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates <code>myMatrix</code> and converts its values 
     to a String in the format of (a=A, b=B, c=C, d=D, tx=TX, ty=TY).
     
     <listing version="2.0">
     import flash.geom.Matrix;
     
     var myMatrix:Matrix = new Matrix();
     trace("myMatrix: " + myMatrix.toString()); // (a=1, b=0, c=0, d=1, tx=0, ty=0)
     </listing>
      
      
      </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein String mit den Werten für die folgenden Eigenschaften des Matrix-Objekts: <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, <codeph class="+ topic/ph pr-d/codeph ">c</codeph>, <codeph class="+ topic/ph pr-d/codeph ">d</codeph>, <codeph class="+ topic/ph pr-d/codeph ">tx</codeph> und <codeph class="+ topic/ph pr-d/codeph ">ty</codeph>.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt einen Textwert zurück, der die Eigenschaften des Matrix-Objekts enthält.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt einen Textwert zurück, der eine Eigenschaftenliste des Matrix-Objekts enthält.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:transformPoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">transformPoint</apiName><shortdesc class="- topic/shortdesc ">
     Gibt das Ergebnis der geometrischen Transformation, die durch das Matrix-Objekt dargestellt wird, für den angegebenen Punkt zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example uses the <code>transformPoint()</code> method 
    to create <code>transformedPoint</code> from <code>myPoint</code>.  Notice that
    the <code>translate()</code> method does have an affect on the position of <code>transformedPoint</code>.
    In the example, <code>scale()</code> increases the original <code>x</code> 
    value by a factor of three from 50 to 150, and <code>translate()</code> increases 
    <code>x</code> by 300 for a total value of 450.
    
    <listing version="2.0">
    import flash.geom.Matrix;     
    import flash.geom.Point;
    
    var myMatrix:Matrix = new Matrix();
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=0, ty=0)
    
    myMatrix.translate(100, 0);
    trace(myMatrix);  // (a=1, b=0, c=0, d=1, tx=100, ty=0)
    
    myMatrix.scale(3, 3);
    trace(myMatrix);  // (a=3, b=0, c=0, d=3, tx=300, ty=0)
    
    var myPoint:Point = new Point(50,0);
    trace(myPoint);                   // (50, 0)
          
    var transformedPoint:Point = myMatrix.transformPoint(myPoint);
    trace(transformedPoint);  // (450, 0)
    
    var pointMc_0:MovieClip = createRectangle(10, 10, 0xFF0000);
    pointMc_0._x = myPoint.x;
    
    var pointMc_1:MovieClip = createRectangle(10, 10, 0x00FF00);
    pointMc_1._x = transformedPoint.x;
    
    function createRectangle(width:Number, height:Number, color:Number):MovieClip {
      var depth:Number = this.getNextHighestDepth();
      var mc:MovieClip = this.createEmptyMovieClip("mc_" + depth, depth);
      mc.beginFill(color);
      mc.lineTo(0, height);
      mc.lineTo(width, height);
      mc.lineTo(width, 0);
      mc.lineTo(0, 0);
      return mc;
    }
    </listing>
      
      </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der sich aus der Matrixtransformation ergebende Punkt.
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">point</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Punkt, für den das Ergebnis der Matrixtransformation abgerufen werden soll.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt das Ergebnis einer geometrischen Transformation für ein Point-Objekt zurück.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt das Ergebnis der geometrischen Transformation, die durch das Matrix-Objekt dargestellt wird, für den angegebenen Punkt zurück. 
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Matrix:translate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">translate</apiName><shortdesc class="- topic/shortdesc ">
    Verschiebt die Matrix entsprechend den Angaben durch die Parameter „dx“ und „dy“ entlang der x- und y-Achse.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example uses the <code>translate()</code> method to position 
    <code>rectangleMc</code> x:100 and y:50. Notice that <code>translate()</code> affects 
    the translate values <code>tx</code> and <code>ty</code> but not <code>a</code>, <code>b</code>,
    <code>c</code>, or <code>d</code>.
    
    <listing version="2.0">
    import flash.geom.Matrix;
    
    var myMatrix:Matrix = new Matrix(2, 0, 0, 2, 100, 100);
    trace(myMatrix.toString());   // (a=2, b=0, c=0, d=2, tx=100, ty=100)
    
    myMatrix.translate(100, 50);
    trace(myMatrix.toString());   // (a=2, b=0, c=0, d=2, tx=200, ty=150)
    </listing>
     
     </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Verschiebung entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse nach rechts in Pixel.
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Verschiebung entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse nach unten in Pixel.
    
    
    </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Verschiebt die Matrix entlang der x- und y-Achse.
    
    <p class="- topic/p ">Die Methode <codeph class="+ topic/ph pr-d/codeph ">translate()</codeph> ändert die <codeph class="+ topic/ph pr-d/codeph ">tx</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">ty</codeph>-Eigenschaften des Matrix-Objekts. In der Matrixschreibweise entspricht dies der Verkettung der aktuellen Matrix mit der folgenden Matrix:</p>
    
    <p class="- topic/p "><adobeimage alt="Matrixschreibweise von scale-Methodenparametern" height="105" href="../../images/matrix_translate.jpg" width="150" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Verschiebt die Matrix entsprechend den Angaben durch die Parameter <codeph class="+ topic/ph pr-d/codeph ">dx</codeph> und <codeph class="+ topic/ph pr-d/codeph ">dy</codeph> entlang der <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Achse.
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Matrix:a" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">a</apiName><shortdesc class="- topic/shortdesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der x-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Der Wert, der sich auf die Positionierung der Pixel entlang der x-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.
     
     </apiDesc><example conref="examples\Matrix.a.1.as" class="- topic/example "> Im folgenden Beispiel wird das Matrix-Objekt <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> erstellt und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">a</codeph> festgelegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.a);  // 1

myMatrix.a = 2;
trace(myMatrix.a);  // 2
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:b" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">b</apiName><shortdesc class="- topic/shortdesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der y-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Der Wert, der sich auf die Positionierung der Pixel entlang der y-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.
     
     </apiDesc><example conref="examples\Matrix.b.1.as" class="- topic/example "> Im folgenden Beispiel wird das Matrix-Objekt <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> erstellt und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">b</codeph> festgelegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;
 
var myMatrix:Matrix = new Matrix();
trace(myMatrix.b);  // 0

var degrees:Number = 30;
var radians:Number = (degrees/180) ~~ Math.PI;
myMatrix.b = Math.tan(radians);
trace(myMatrix.b);  // 0.5773502691896257
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:c" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">c</apiName><shortdesc class="- topic/shortdesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der x-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Der Wert, der sich auf die Positionierung der Pixel entlang der x-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse auswirkt, wenn ein Bild gedreht oder geneigt wird.
     
     </apiDesc><example conref="examples\Matrix.c.1.as" class="- topic/example "> Im folgenden Beispiel wird das Matrix-Objekt <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> erstellt und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">c</codeph> festgelegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.c);  // 0

var degrees:Number = 30;
var radians:Number = (degrees/180) ~~ Math.PI;
myMatrix.c = Math.tan(radians);
trace(myMatrix.c);  // 0.5773502691896257
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:d" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">d</apiName><shortdesc class="- topic/shortdesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der y-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Der Wert, der sich auf die Positionierung der Pixel entlang der y-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Wert, der sich auf die Positionierung der Pixel entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse auswirkt, wenn ein Bild skaliert oder gedreht wird.
     
     </apiDesc><example conref="examples\Matrix.d.1.as" class="- topic/example "> Im folgenden Beispiel wird das Matrix-Objekt <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> erstellt und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">d</codeph> festgelegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.d);  // 1

myMatrix.d = 2;
trace(myMatrix.d);  // 2
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:tx" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tx</apiName><shortdesc class="- topic/shortdesc ">
     Der Abstand, um den jeder Punkt entlang der x-Achse verschoben werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Der Abstand, um den jeder Punkt entlang der x-Achse verschoben werden soll.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Die Strecke, um die jeder Punkt entlang der <i class="+ topic/ph hi-d/i ">x</i>-Achse geschoben werden soll.
     
     </apiDesc><example conref="examples\Matrix.tx.1.as" class="- topic/example "> Im folgenden Beispiel wird das Matrix-Objekt <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> erstellt und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">tx</codeph> wird festgelegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.tx);  // 0

myMatrix.tx = 50;  // 50
trace(myMatrix.tx);
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.geom:Matrix:ty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ty</apiName><shortdesc class="- topic/shortdesc ">
     Der Abstand, um den jeder Punkt entlang der y-Achse verschoben werden soll.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     
     </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Der Abstand, um den jeder Punkt entlang der y-Achse verschoben werden soll.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Abstand, um den jeder Punkt entlang der <i class="+ topic/ph hi-d/i ">y</i>-Achse verschoben werden soll.
     
     </apiDesc><example conref="examples\Matrix.ty.1.as" class="- topic/example "> Im folgenden Beispiel wird das Matrix-Objekt <codeph class="+ topic/ph pr-d/codeph ">myMatrix</codeph> erstellt und der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">ty</codeph> festgelegt.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.geom.Matrix;

var myMatrix:Matrix = new Matrix();
trace(myMatrix.ty);  // 0

myMatrix.ty = 50;
trace(myMatrix.ty);  // 50
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:Rectangle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Rectangle</apiName><shortdesc class="- topic/shortdesc ">
 Ein Rectangle-Objekt ist ein Bereich, der durch die Position seines linken oberen Eckpunkts (x, y) sowie durch seine Breite und Höhe definiert ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Ein Rectangle-Objekt ist ein Bereich, der durch die Position seines linken oberen Eckpunkts (x, y) sowie durch seine Breite und Höhe definiert ist.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Ein Rectangle-Objekt ist ein Bereich, der durch die Position seines oberen linken Eckpunkts (<i class="+ topic/ph hi-d/i ">x</i>, <i class="+ topic/ph hi-d/i ">y</i>) sowie durch seine Breite und Höhe definiert ist. 
 
 <p class="- topic/p ">Die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> der Rectangle-Klasse sind voneinander unabhängig. Eine Wertänderung einer dieser Eigenschaften hat keinen Einfluss auf die anderen Eigenschaften. Die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">right</codeph> und <codeph class="+ topic/ph pr-d/codeph ">bottom</codeph> stehen jedoch im unmittelbaren Bezug zu diesen vier Eigenschaften. Wenn Sie beispielsweise den Wert der <codeph class="+ topic/ph pr-d/codeph ">right</codeph>-Eigenschaft ändern, ändert sich auch der Wert der <codeph class="+ topic/ph pr-d/codeph ">width</codeph>-Eigenschaft. Bei einer Änderung der <codeph class="+ topic/ph pr-d/codeph ">bottom</codeph>-Eigenschaft ändert sich auch der Wert der <codeph class="+ topic/ph pr-d/codeph ">height</codeph>-Eigenschaft. </p>
 
 <p class="- topic/p ">Bei den folgenden Methoden und Eigenschaften werden Rectangle-Objekte verwendet:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Die Methoden <codeph class="+ topic/ph pr-d/codeph ">applyFilter()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">colorTransform()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">copyChannel()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">copyPixels()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">fillRect()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">generateFilterRect()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getColorBoundsRect()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getPixels()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">merge()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">paletteMap()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">pixelDisolve()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">setPixels()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">threshold()</codeph> sowie die <codeph class="+ topic/ph pr-d/codeph ">rect</codeph>-Eigenschaft der BitmapData-Klasse</li><li class="- topic/li ">die Methoden <codeph class="+ topic/ph pr-d/codeph ">getBounds()</codeph> und <codeph class="+ topic/ph pr-d/codeph ">getRect()</codeph> sowie die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">scrollRect</codeph> und <codeph class="+ topic/ph pr-d/codeph ">scale9Grid</codeph> der DisplayObject-Klasse</li><li class="- topic/li ">die Methode <codeph class="+ topic/ph pr-d/codeph ">getCharBoundaries()</codeph> der TextField-Klasse</li><li class="- topic/li ">die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">pixelBounds</codeph> der Transform-Klasse</li><li class="- topic/li ">der Parameter <codeph class="+ topic/ph pr-d/codeph ">bounds</codeph> der <codeph class="+ topic/ph pr-d/codeph ">startDrag()</codeph>-Methode der Sprite-Klasse</li><li class="- topic/li ">der Parameter <codeph class="+ topic/ph pr-d/codeph ">printArea</codeph> der <codeph class="+ topic/ph pr-d/codeph ">addPage()</codeph>-Methode der PrintJob-Klasse</li></ul>
 
 <p class="- topic/p ">Mit dem <codeph class="+ topic/ph pr-d/codeph ">new Rectangle()</codeph>-Konstruktor können Sie ein Rectangle-Objekt erstellen.</p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Mit der Rectangle-Klasse wird kein rechteckiges Shape-Anzeigeobjekt definiert. Wenn Sie ein rechteckiges Shape-Objekt zeichnen möchten, verwenden Sie die <codeph class="+ topic/ph pr-d/codeph ">drawRect()</codeph>-Methode der Graphics-Klasse.</p>
 
 </apiDesc><example conref="examples\RectangleExample.as" class="- topic/example "> Im folgenden Beispiel werden mithilfe der RectangleExample-Klasse drei neue Rectangle-Objekte an verschiedenen <i class="+ topic/ph hi-d/i ">x</i>,<i class="+ topic/ph hi-d/i ">y</i>-Koordinaten mit unterschiedlichen Höhen und Breiten erstellt. Anschließend wird die erfolgreiche Erstellung der Rectangle-Instanzen mithilfe der <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>-Methode bestätigt. Dann wird die boolesche Variable <codeph class="+ topic/ph pr-d/codeph ">isContained</codeph> dem Ergebnis zugeordnet, das sich aus dem Aufruf der <codeph class="+ topic/ph pr-d/codeph ">containsRect()</codeph>-Methode ergibt. Damit wird festgelegt, dass das dritte Rechteck nicht vollständig vom zweiten Rechteck eingeschlossen wird.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.geom.Rectangle;

    public class RectangleExample extends Sprite {

        public function RectangleExample() {
            var firstRect:Rectangle = new Rectangle();
            trace(firstRect);  // (x=0, y=0, w=0, h=0)
            var secondRect:Rectangle = new Rectangle(1, 3, 11, 13);
            trace(secondRect); // (x=1, y=3, w=11, h=13)
            var thirdRect:Rectangle = new Rectangle(5, 8, 17, 19);
            trace(thirdRect);  // (x=5, y=8, w=17, h=19)
            var isContained:Boolean = secondRect.containsRect(thirdRect);
            trace(isContained); // false
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/scrollRect" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.scrollRect</linktext></link><link href="flash.display.xml#BitmapData" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData</linktext></link><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link><link href="flash.text.xml#TextField/getCharBoundaries()" class="- topic/link "><linktext class="- topic/linktext ">flash.text.TextField.getCharBoundaries()</linktext></link><link href="flash.geom.xml#Transform/pixelBounds" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform.pixelBounds</linktext></link><link href="flash.display.xml#Sprite/startDrag()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.Sprite.startDrag()</linktext></link><link href="flash.printing.xml#PrintJob/addPage()" class="- topic/link "><linktext class="- topic/linktext ">flash.printing.PrintJob.addPage()</linktext></link></related-links><apiConstructor id="flash.geom:Rectangle:Rectangle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Rectangle</apiName><shortdesc class="- topic/shortdesc ">
	Erstellt ein neues Rectangle-Objekt mit der angegebenen Breite und Höhe, dessen linke obere Ecke durch die Parameter x und y festgelegt ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a new Rectangle with with specific parameters.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 10, 50, 100);
	trace(rect.toString()); // (x=5, y=10, w=50, h=100)
	</listing>
	  
	  </maelexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die <i class="+ topic/ph hi-d/i ">x</i>-Koordinate der oberen linken Ecke des Rechtecks.
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die <i class="+ topic/ph hi-d/i ">y</i>-Koordinate der linken oberen Ecke des Rechtecks.
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">width</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Breite des Rechtecks in Pixel.
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">height</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Höhe des Rechtecks in Pixel.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erstellt ein neues Rectangle-Objekt mit der angegebenen Breite und Höhe, dessen linke obere Ecke durch die Parameter x und y festgelegt ist.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Erstellt ein neues Rectangle-Objekt, dessen linke obere Ecke durch die Parameter <codeph class="+ topic/ph pr-d/codeph ">x</codeph> und <codeph class="+ topic/ph pr-d/codeph ">y</codeph> festgelegt ist, und mit den angegebenen <codeph class="+ topic/ph pr-d/codeph ">width</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">height</codeph>-Parametern. Wenn Sie diese Funktion ohne Parameter aufrufen, wird ein Rechteck erstellt, bei dem die Eigenschaften<codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> auf 0 gesetzt sind.
	
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiConstructor><apiOperation id="flash.geom:Rectangle:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	Gibt ein neues Rectangle-Objekt mit denselben Werten für die Eigenschaften „x“, „y“, „width“ und „height“ wie die des ursprünglichen Rectangle-Objekts zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example demonstrates the <code>clone</code> member.
	<listing version="2.0">
	import flash.geom.Rectangle;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	var shadow:Rectangle = rect.clone();
	shadow.offset(5, 5);
	trace(rect); // (x=1, y=2, w=4, h=8)
	trace(shadow); // (x=6, y=7, w=4, h=8)
	</listing>

	  

	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Rectangle-Objekt mit den gleichen Werten für die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> wie die des ursprünglichen Rectangle-Objekts.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt eine Kopie dieses Rectangle-Objekts zurück.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Gibt ein neues Rectangle-Objekt mit den gleichen Werten <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> wie die des ursprünglichen Rectangle-Objekts zurück.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:containsPoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">containsPoint</apiName><shortdesc class="- topic/shortdesc ">
	Legt fest, ob der angegebene Punkt innerhalb des rechteckigen Bereichs liegt, der durch das Rectangle-Objekt definiert ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Do the specified Points fall inside of the Rectangle?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(10, 10, 50, 50);
	var containsPoint_1:Boolean = rect.containsPoint(new Point(10, 10));
	trace(containsPoint_1); // true
	var containsPoint_2:Boolean = rect.containsPoint(new Point(59, 59));
	trace(containsPoint_2); // true
	var containsPoint_3:Boolean = rect.containsPoint(new Point(60, 60));
	trace(containsPoint_3); // false
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn das Rectangle-Objekt den angegebenen Punkt enthält, andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">point</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Punkt, der durch die <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Koordinaten angegeben wird.  
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Legt fest, ob der angegebene Punkt innerhalb des rechteckigen Bereichs liegt, der durch das Rectangle-Objekt definiert ist, bei dem ein Point-Objekt als Parameter verwendet wird.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Legt fest, ob der angegebene Punkt innerhalb des rechteckigen Bereichs liegt, der durch das Rectangle-Objekt definiert ist. Diese Methode entspricht der Methode <codeph class="+ topic/ph pr-d/codeph ">Rectangle.contains()</codeph>, das Point-Objekt wird jedoch als Parameter angenommen.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/contains()" class="- topic/link "><linktext class="- topic/linktext ">contains()</linktext></link><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:containsRect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">containsRect</apiName><shortdesc class="- topic/shortdesc ">
	Legt fest, ob sich das von dem Parameter „rect“ angegebene Rectangle-Objekt innerhalb dieses Rectangle-Objekts befindet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>A Rectangle is said to contain another if that second 
	Rectangle falls entirely within the boundaries of the first.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rectA:Rectangle = new Rectangle(10, 10, 50, 50);
	var rectB:Rectangle = new Rectangle(10, 10, 50, 50);
	var rectC:Rectangle = new Rectangle(10, 10, 51, 51);
	var rectD:Rectangle = new Rectangle(15, 15, 45, 45);
	var rectAContainsB:Boolean = rectA.containsRect(rectB); // true
	var rectAContainsC:Boolean = rectA.containsRect(rectC); // false
	var rectAContainsD:Boolean = rectA.containsRect(rectD); // true
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn das angegebene Rectangle-Objekt in diesem Rectangle-Objekt enthalten ist, andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rect</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das überprüfte Rectangle-Objekt.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Legt fest, ob sich das durch den Parameter rect angegebene Rectangle-Objekt innerhalb dieses Rectangle-Objekts befindet.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Legt fest, ob sich das von dem Parameter <codeph class="+ topic/ph pr-d/codeph ">rect</codeph> angegebene Rectangle-Objekt innerhalb dieses Rectangle-Objekts befindet. Ein Rechteck enthält ein anderes Rechteck, wenn Letzteres vollständig innerhalb der Grenzen des Ersteren liegt.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
	Legt fest, ob der angegebene Punkt innerhalb des rechteckigen Bereichs liegt, der durch das Rectangle-Objekt definiert ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Do the coordinates fall inside of the Rectangle?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(10, 10, 50, 50);
	var doesContain_1:Boolean = rect.contains(59, 59);
	trace(doesContain_1); // true
	var doesContain_2:Boolean = rect.contains(10, 10);
	trace(doesContain_2); // true
	var doesContain_3:Boolean = rect.contains(60, 60);
	trace(doesContain_3); // false
	</listing>

	 

	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn das Rectangle-Objekt den angegebenen Punkt enthält, andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die <i class="+ topic/ph hi-d/i ">x</i>-Koordinate (horizontale Position) des Punkts.  
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die <i class="+ topic/ph hi-d/i ">y</i>-Koordinate (vertikale Position) des Punkts.
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Ermittelt, ob der angegebene Punkt innerhalb des rechteckigen Bereichs liegt.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Legt fest, ob der angegebene Punkt innerhalb des rechteckigen Bereichs liegt, der durch das Rectangle-Objekt definiert ist.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:equals" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">equals</apiName><shortdesc class="- topic/shortdesc ">
	Bestimmt, ob das im Parameter „toCompare“ angegebene Objekt und dieses Rectangle-Objekt gleich sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Even though the method signature only expects an abstract Object
	only other Rectangle instances will ever be treated as equal.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(0, 0, 50, 100);
	var nonRect:Object = new Object();
	nonRect.x = 0;
	nonRect.y = 0;
	nonRect.width = 50;
	nonRect.height = 100;
	trace(rect_1.equals(nonRect));
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph> wenn das Objekt exakt die gleichen Werte für die Parameter <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> aufweist wie dieses Rectangle-Objekt; andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toCompare</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Rechteck, das mit diesem Rectangle-Objekt verglichen werden soll.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Legt fest, ob das im Parameter toCompare angegebene Objekt und dieses Rectangle-Objekt gleich sind.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Legt fest, ob das im Parameter <codeph class="+ topic/ph pr-d/codeph ">toCompare</codeph> angegebene Objekt und dieses Rectangle-Objekt gleich sind. Bei dieser Methode wird ein Objekt anhand der gleichen Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> mit diesem Rectangle-Objekt verglichen.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:inflatePoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">inflatePoint</apiName><shortdesc class="- topic/shortdesc ">
	 Ändert die Größe des Rectangle-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a Rectangle and inflate it by the <i class="+ topic/ph hi-d/i ">x</i> <i class="+ topic/ph hi-d/i ">horizontal</i> and <i class="+ topic/ph hi-d/i ">y</i> <i class="+ topic/ph hi-d/i ">vertical</i> amounts found in Point
	 
	 <listing version="2.0">
	 import flash.geom.~~;
	 var rect:Rectangle = new Rectangle(0, 0, 2, 5);
	 var myPoint:Point = new Point(2, 2);
	 rect.inflatePoint(myPoint);
	 trace(rect.toString()); // (x=-2, y=-2, w=6, h=9)
	 </listing>
	 
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">point</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Mit der <codeph class="+ topic/ph pr-d/codeph ">x</codeph>-Eigenschaft dieses Point-Objekts wird die horizontale Abmessung des Rectangle-Objekts vergrößert. Mit der <codeph class="+ topic/ph pr-d/codeph ">y</codeph>-Eigenschaft wird die vertikale Abmessung des Rectangle-Objekts vergrößert.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Vergrößert das Rectangle-Objekt mit einem Point-Objekt als Parameter.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ändert die Größe des Rectangle-Objekts. Diese Methode ähnelt der Methode <codeph class="+ topic/ph pr-d/codeph ">Rectangle.inflate()</codeph>, als Parameter wird jedoch ein Point-Objekt verwendet.
	 
	  <p class="- topic/p ">Die folgenden beiden Codebeispiele führen zum gleichen Ergebnis:</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var rect1:Rectangle = new Rectangle(0,0,2,5);
	 rect1.inflate(2,2)
	 </codeblock>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var rect1:Rectangle = new Rectangle(0,0,2,5);
	 var pt1:Point = new Point(2,2);
	 rect1.inflatePoint(pt1)
	 </codeblock>
	 
	 
	 
	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:inflate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">inflate</apiName><shortdesc class="- topic/shortdesc ">
	Vergrößert das Rectangle-Objekt um die in Pixeln angegebenen Werte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a Rectangle and increase its <code>width</code> by 16 ~~ 2 (32) and it's <code>height</code> by 32 ~~ 2 (64)
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	trace(rect.toString()); // (x=1, y=2, w=4, h=8)
	rect.inflate(16, 32);
	trace(rect.toString()); // (x=-15, y=-30, w=36, h=72)	
	</listing>
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, der links und rechts zum Rectangle-Objekt addiert wird. Zur Berechnung der neuen Breite und Position des Rechtecks wird die folgende Gleichung verwendet:
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	x -= dx;
	width += 2 ~~ dx;
	</codeblock>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, der oben und unten zum Rectangle-Objekt addiert wird. Zur Berechnung der neuen Höhe und Position des Rechtecks wird die folgende Gleichung verwendet:
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	y -= dy;
	height += 2 ~~ dy;
	</codeblock>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Vergrößert das Rectangle-Objekt um die in Pixeln angegebenen Werte. Der Mittelpunkt des Rectangle-Objekts bleibt gleich, und die Größe wird mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">dx</codeph> nach links und rechts und mit dem Wert <codeph class="+ topic/ph pr-d/codeph ">dy</codeph> nach oben und unten erweitert.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:intersection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">intersection</apiName><shortdesc class="- topic/shortdesc ">
	Wenn sich das im Parameter toIntersect angegebene Rectangle-Objekt mit diesem Rectangle-Objekt überschneidet, gibt die Methode die Schnittfläche als Rectangle-Objekt zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>What area overlaps <code>rect_1</code> between <code>rect_2</code>?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(0, 0, 50, 50);
	var rect_2:Rectangle = new Rectangle(25, 25, 100, 100);
	var intersectingArea:Rectangle = rect_1.intersection(rect_2);
	trace(intersectingArea.toString()); // (x=25, y=25, w=25, h=25)
	</listing>
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Rectangle-Objekt, das der Schnittfläche entspricht. Wenn sich die Rechtecke nicht überschneiden, wird mit dieser Methode ein leeres Rectangle-Objekt zurückgegeben. Dabei handelt es sich um Rechteck, bei dem die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> auf 0 gesetzt sind.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toIntersect</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Rectangle-Objekt, bei dem überprüft werden soll, ob es sich mit diesem Rectangle-Objekt überschneidet.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt die Schnittfläche zurück.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Wenn sich das im Parameter <codeph class="+ topic/ph pr-d/codeph ">toIntersect</codeph> angegebene Rectangle-Objekt mit diesem Rectangle-Objekt überschneidet, gibt die Methode die Schnittfläche als Rectangle-Objekt zurück. Wenn sich die Rechtecke nicht überschneiden, wird mit dieser Methode ein leeres Rectangle-Objekt zurückgegeben, dessen Eigenschaften auf 0 gesetzt sind.
	
    <p class="- topic/p "><adobeimage alt="Das sich daraus übergebende Übeschneidungs-Rechteck." href="../../images/rectangle_intersect.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:intersects" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">intersects</apiName><shortdesc class="- topic/shortdesc ">
	Legt fest, ob sich das im Parameter „toIntersect“ angegebene Objekt mit diesem Rectangle-Objekt überschneidet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Does <code>rect_1</code> intersect with <code>rect_2</code>?
	
	<listing version="2.0">
	import flash.geom.~~;
	var rectA:Rectangle = new Rectangle(10, 10, 50, 50);
	var rectB:Rectangle = new Rectangle(59, 59, 50, 50);
	var rectC:Rectangle = new Rectangle(60, 60, 50, 50);
	var rectAIntersectsB:Boolean = rectA.intersects(rectB);
	var rectAIntersectsC:Boolean = rectA.intersects(rectC);
	trace(rectAIntersectsB); // true
	trace(rectAIntersectsC); // false
	
	var firstPixel:Rectangle = new Rectangle(0, 0, 1, 1);
	var adjacentPixel:Rectangle = new Rectangle(1, 1, 1, 1);
	var pixelsIntersect:Boolean = firstPixel.intersects(adjacentPixel);
	trace(pixelsIntersect); // false
	</listing>
	 
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn sich das angegebene Objekt mit dem Rectangle-Objekt überschneidet, andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toIntersect</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das Rectangle-Objekt, das mit diesem Rectangle-Objekt verglichen werden soll. 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Legt fest, ob sich das im Parameter toIntersect angegebene Objekt mit diesem Rectangle-Objekt überschneidet.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Legt fest, ob sich das im Parameter <codeph class="+ topic/ph pr-d/codeph ">toIntersect</codeph> angegebene Objekt mit diesem Rectangle-Objekt überschneidet. Bei dieser Methode wird anhand der Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> des angegebenen Rectangle-Objekts überprüft, ob es sich mit diesem Rectangle-Objekt überschneidet.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:isEmpty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isEmpty</apiName><shortdesc class="- topic/shortdesc ">
	Legt fest, ob dieses Rectangle-Objekt leer ist.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a non-empty Rectangle and make it become empty.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	trace(rect.isEmpty()); // false
	rect.width = 0;
	trace(rect.isEmpty()); // true
	rect.width = 4;
	trace(rect.isEmpty()); // false
	rect.height = 0;
	trace(rect.isEmpty()); // true
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn die Breite oder Höhe des Rectangle-Objekts kleiner oder gleich 0 ist, andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Legt fest, ob dieses Rectangle-Objekt leer ist. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:offsetPoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">offsetPoint</apiName><shortdesc class="- topic/shortdesc ">
	 Ändert die Position des Rectangle-Objekts, wobei ein Point-Objekt als Parameter dient.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Offset a Rectangle by using the values found in a Point
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	var myPoint:Point = new Point(16, 32);
	rect.offsetPoint(myPoint);
	trace(rect.toString()); // (x=17, y=34, w=4, h=8)
	</listing>
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">point</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Point-Objekt, mit dem dieses Rectangle-Objekt versetzt werden kann.
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Ändert die Position des Rectangle-Objekts, wobei ein Point-Objekt als Parameter dient.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ändert die Position des Rectangle-Objekts, wobei ein Point-Objekt als Parameter dient. Diese Methode entspricht der Methode <codeph class="+ topic/ph pr-d/codeph ">Rectangle.offset()</codeph>, das Point-Objekt wird jedoch als Parameter angenommen.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:offset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">offset</apiName><shortdesc class="- topic/shortdesc ">
	 Ändert die Position des Rectangle-Objekts ausgehend von seiner oberen linken Ecke um die angegebenen Beträge.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a Rectangle and offset it's <i class="+ topic/ph hi-d/i ">x</i> and <i class="+ topic/ph hi-d/i ">y</i> values by 5 and 10 respectively
	 
	 <listing version="2.0">
	 import flash.geom.~~;
	 var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	 rect.offset(16, 32);
	 trace(rect.toString()); // (x=17, y=34, w=4, h=8)
	 </listing>
	 
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Verschiebt den Wert <i class="+ topic/ph hi-d/i ">x</i> des Rectangle-Objekts um diesen Wert.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Verschiebt den Wert <i class="+ topic/ph hi-d/i ">y</i> des Rectangle-Objekts um diesen Wert.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Ändert die Position des Rectangle-Objekts.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ändert die Position des Rectangle-Objekts ausgehend von seiner oberen linken Ecke um die angegebenen Beträge.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Rectangle:setEmpty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setEmpty</apiName><shortdesc class="- topic/shortdesc ">
	Setzt alle Eigenschaften des Rectangle-Objekts auf 0.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a non-empty Rectangle and make it empty.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 10, 50, 100);
	trace(rect.isEmpty()); // false
	rect.setEmpty();
	trace(rect.isEmpty()); // true
	</listing>
	  
	  </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Setzt alle Eigenschaften auf 0.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Setzt alle Eigenschaften des Rectangle-Objekts auf 0. Ein Rectangle-Objekt ist leer, wenn seine Breite oder Höhe kleiner oder gleich 0 ist.
	
	<p class="- topic/p "> Diese Methode setzt die Werte der Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> auf 0.</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Erstellt und übergibt einen String, der die horizontalen und vertikalen Positionen sowie die Breite und Höhe des Rectangle-Objekts enthält.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Concatenate a String representation of <code>rect_1</code> with some helpful 
	debugging text.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(0, 0, 50, 100);
	trace("Rectangle 1 : " + rect_1.toString()); // Rectangle 1 : (x=0, y=0, w=50, h=100)
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein String, der die Werte der folgenden Eigenschaften des Rectangle-Objekts angibt: <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Erstellt und übergibt einen String, der die horizontalen und vertikalen Positionen sowie die Breite und Höhe des Rectangle-Objekts enthält.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Rectangle:union" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">union</apiName><shortdesc class="- topic/shortdesc "> 
	 Vereinigt zwei Rechtecke miteinander, indem der vertikale und horizontale Bereich zwischen ihnen gefüllt wird, sodass ein neues Rectangle-Objekt entsteht.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a new Rectangle out of the Union of two others.
	<p class="- topic/p ">For example, consider a rectangle with properties <code>x=20</code>, <code>y=50</code>, <code>width=60</code>, and 
	<code>height=30</code> (20, 50, 60, 30) and a second rectangle with properties (150, 130, 50, 30). 
	The union of these two rectangles would be a larger rectangle encompassing the two rectangles 
	with the properties (20, 50, 180, 110).</p>
	<listing version="2.0">
	import flash.geom.~~;
	var rect_1:Rectangle = new Rectangle(20, 50, 60, 30);
	var rect_2:Rectangle = new Rectangle(150, 130, 50, 30);
	var combined:Rectangle = rect_1.union(rect_2);
	trace(combined.toString()); // (x=20, y=50, w=180, h=110)
	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein neues Rectangle-Objekt aus der Vereinigung der beiden Rechtecke.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toUnion</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein Rectangle-Objekt, das diesem Rectangle-Objekt hinzugefügt wird.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Fügt zwei Rechtecke zusammen und erstellt so ein neues Rectangle-Objekt.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	 Vereinigt zwei Rechtecke miteinander, indem der vertikale und horizontale Bereich zwischen ihnen gefüllt wird, sodass ein neues Rectangle-Objekt entsteht.
	 
    <p class="- topic/p "><adobeimage alt="Das sich daraus übergebende Vereinigungs-Rechteck." href="../../images/rectangle_union.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Hinweis:</b> Die <codeph class="+ topic/ph pr-d/codeph ">union()</codeph>-Methode ignoriert Rechtecke mit dem Höhen- oder Breitenwert <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, wie beispielsweise: <codeph class="+ topic/ph pr-d/codeph ">var rect2:Rectangle = new Rectangle(300,300,50,0);</codeph></p>
	
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Rectangle:height" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">height</apiName><shortdesc class="- topic/shortdesc ">
	Die Höhe des Rechtecks in Pixel.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a Rectangle and change its <i class="+ topic/ph hi-d/i ">width</i> property 
	from 10 to 20. Notice that <code>rect.right</code> is also
	changed.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.width); // 10
	trace(rect.right); // 15
	rect.width = 20;
	trace(rect.width); // 20
	trace(rect.right); // 25
	</listing>
	
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Höhe des Rechtecks in Pixel.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Höhe des Rechtecks in Pixel. Änderungen des Werts <codeph class="+ topic/ph pr-d/codeph ">height</codeph> eines Rectangle-Objekts haben keinen Einfluss auf die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph> und <codeph class="+ topic/ph pr-d/codeph ">width</codeph>.
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:width" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">width</apiName><shortdesc class="- topic/shortdesc ">
	Die Breite des Rechtecks in Pixel.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a Rectangle object and change its <code>width</code> property 
	from 10 to 20. Notice that <code>rect.right</code> also
	changes.

	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.width); // 10
	trace(rect.right); // 15
	rect.width = 20;
	trace(rect.width); // 20
	trace(rect.right); // 25
	</listing>
     
     </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Breite des Rechtecks.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Breite des Rechtecks in Pixel. Änderungen des Werts <codeph class="+ topic/ph pr-d/codeph ">width</codeph> eines Rectangle-Objekts haben keinen Einfluss auf die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph>.
	
	<p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:x" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">x</apiName><shortdesc class="- topic/shortdesc ">
	Die x-Koordinate der linken oberen Ecke des Rechtecks.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates an empty Rectangle and sets its <i class="+ topic/ph hi-d/i ">x</i> property 
	to 10. Notice that <code>rect.left</code> is also changed.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.x); // 0
	trace(rect.left); // 0
	rect.x = 10;
	trace(rect.x); // 10
	trace(rect.left); // 10
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die x-Koordinate der linken oberen Ecke des Rechtecks.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die <i class="+ topic/ph hi-d/i ">x</i>-Koordinate der oberen linken Ecke des Rechtecks. Änderungen des Werts der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">x</codeph> eines Rectangle-Objekts wirken sich nicht auf die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> aus. 
	
	<p class="- topic/p ">Der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">x</codeph> entspricht dem Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">left</codeph>.</p>
	
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/left" class="- topic/link "><linktext class="- topic/linktext ">left</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:y" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">y</apiName><shortdesc class="- topic/shortdesc ">
	Die y-Koordinate der linken oberen Ecke des Rechtecks.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates an empty Rectangle and sets its <i class="+ topic/ph hi-d/i ">y</i> property
	to 10. Notice that <code>rect.top</code> is also changed.
	
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.y); // 0
	trace(rect.top); // 0
	rect.y = 10;
	trace(rect.y); // 10
	trace(rect.top); // 10
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die y-Koordinate der linken oberen Ecke.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die <i class="+ topic/ph hi-d/i ">y</i>-Koordinate der linken oberen Ecke des Rechtecks. Änderungen des Werts der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">y</codeph> eines Rectangle-Objekts wirken sich nicht auf die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> aus.
	
	<p class="- topic/p ">Der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">y</codeph> entspricht dem Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">top</codeph>.</p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link><link href="flash.geom.xml#Rectangle/top" class="- topic/link "><linktext class="- topic/linktext ">top</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:bottomRight:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bottomRight</apiName><shortdesc class="- topic/shortdesc ">
	Die Position der rechten unteren Ecke des Rectangle-Objekts, definiert durch die Werte der Eigenschaften right und bottom.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Get the Rectangle <code>bottomRight</code> property as a Point object.
	<listing version="2.0">
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	trace(rect.bottom); // 5
	trace(rect.right); // 10
	var myBottomRight:Point = rect.bottomRight;
	trace(myBottomRight.x); // 5
	trace(myBottomRight.y); // 10
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Point</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Position der rechten unteren Ecke des Rectangle-Objekts, die durch die Eigenschaften right und bottom angegeben wird.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Position der rechten unteren Ecke des Rectangle-Objekts, die durch die Werte der Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">right</codeph> und <codeph class="+ topic/ph pr-d/codeph ">bottom</codeph> angegeben wird.
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:bottom:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bottom</apiName><shortdesc class="- topic/shortdesc ">
	Die Summe der Eigenschaften y und height.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a Rectangle and change its <i class="+ topic/ph hi-d/i ">bottom</i> property 
	from 15 to 30. Notice that <code>rect.height</code> is also
	changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.height); // 10
	trace(rect.bottom); // 15
	rect.bottom = 30;
	trace(rect.height); // 25
	trace(rect.bottom); // 30
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Summe der Eigenschaften y und height.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Summe der Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">y</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph>.
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:left:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">left</apiName><shortdesc class="- topic/shortdesc ">
	Die x-Koordinate der linken oberen Ecke des Rechtecks.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Change the <i class="+ topic/ph hi-d/i ">left</i> property and notice that 
	<code>rect.x</code> is also changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.left); // 0
	trace(rect.x); // 0
	rect.left = 10;
	trace(rect.left); // 10
	trace(rect.x); // 10
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die x-Koordinate der linken oberen Ecke des Rechtecks.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die <i class="+ topic/ph hi-d/i ">x</i>-Koordinate der oberen linken Ecke des Rechtecks. Änderungen der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">left</codeph> eines Rectangle-Objekts wirken sich nicht auf die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">y</codeph> und <codeph class="+ topic/ph pr-d/codeph ">height</codeph> aus. Sie wirken sich jedoch auf die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">width</codeph> aus; Änderungen des Werts <codeph class="+ topic/ph pr-d/codeph ">x</codeph> betreffen dagegen <i class="+ topic/ph hi-d/i ">nicht</i> die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">width</codeph>.
	
	<p class="- topic/p ">Der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">left</codeph> entspricht dem Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">x</codeph>.</p>
	
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:right:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">right</apiName><shortdesc class="- topic/shortdesc ">
	Die Summe der Eigenschaften x und width.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Create a Rectangle and change its <i class="+ topic/ph hi-d/i ">right</i> property 
	from 15 to 30. Notice that <code>rect.width</code> is also
	changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle(5, 5, 10, 10);
	trace(rect.width); // 10
	trace(rect.right); // 15
	rect.right = 30;
	trace(rect.width); // 25
	trace(rect.right); // 30
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Summe der Eigenschaften x und width.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Summe der Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph> und <codeph class="+ topic/ph pr-d/codeph ">width</codeph>.
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:size:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">size</apiName><shortdesc class="- topic/shortdesc ">
	Die Größe des Rectangle-Objekts, ausgedrückt als Point-Objekt, mit den Werten der Eigenschaften width und height.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a new Rectangle, retrieves it's <code>size</code>,
	changes the <code>size</code> and sets the new values on the Rectangle instance.
	It is critical to remember that the <code>Point</code> object used by <code>size</code>
	uses x and y values to represent the <code>width</code> and <code>height</code> properties
	of the Rectangle.
	<listing version="2.0">
	import flash.geom.Rectangle;
	import flash.geom.Point;
	var rect:Rectangle = new Rectangle(1, 2, 4, 8);
	
	var size:Point = rect.size;
	trace(size.x); // 4;
	trace(size.y); // 8;
	
	size.x = 16;
	size.y = 32;
	rect.size = size;
	trace(rect.x); // 1
	trace(rect.y); // 2
	trace(rect.width); // 16
	trace(rect.height); // 32
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Point</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Größe des Rectangle“-Objekts, angegeben als Point-Objekt mit Werten für width und height.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Größe des Rectangle-Objekts, ausgedrückt als Point-Objekt, mit <codeph class="+ topic/ph pr-d/codeph ">width</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">height</codeph>-Werten.
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:topLeft:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">topLeft</apiName><shortdesc class="- topic/shortdesc ">
	Die Position der linken oberen Ecke des Rectangle-Objekts, die durch den x- und y-Wert des Punkts angegeben wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Get the Rectangle <code>topLeft</code> property as a Point object.
	<listing version="2.0">
	var rect:Rectangle = new Rectangle(5, 15);
	var myTopLeft:Point = rect.topLeft;
	trace(myTopLeft.x); // 5;
	trace(myTopLeft.y); // 15;
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Point</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Position der linken oberen Ecke des Rectangle-Objekts, die durch den x- und y-Wert des Punkts angegeben wird.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die Position der linken oberen Ecke des Rectangle-Objekts, die durch die <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Koordinate des Punkts angegeben wird.
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Point</linktext></link><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link></related-links></apiValue><apiValue id="flash.geom:Rectangle:top:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">top</apiName><shortdesc class="- topic/shortdesc ">
	Die y-Koordinate der linken oberen Ecke des Rechtecks.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>Change the <i class="+ topic/ph hi-d/i ">top</i> property and notice that 
	<code>rect.y</code> is also changed.
	<listing version="2.0">
	import flash.geom.~~;
	var rect:Rectangle = new Rectangle();
	trace(rect.top); // 0
	trace(rect.y); // 0
	rect.top = 10;
	trace(rect.top); // 10
	trace(rect.y); // 10
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die y-Koordinate der linken oberen Ecke des Rechtecks.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Die <i class="+ topic/ph hi-d/i ">y</i>-Koordinate der linken oberen Ecke des Rechtecks. Änderungen der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">top</codeph> eines Rectangle-Objekts wirken sich nicht auf die Eigenschaften <codeph class="+ topic/ph pr-d/codeph ">x</codeph> und <codeph class="+ topic/ph pr-d/codeph ">width</codeph> aus. Sie wirken sich jedoch auf die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">height</codeph> aus; Änderungen des Werts <codeph class="+ topic/ph pr-d/codeph ">y</codeph> betreffen dagegen <i class="+ topic/ph hi-d/i ">nicht</i> die Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">height</codeph>.
	
	<p class="- topic/p ">Der Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">top</codeph> entspricht dem Wert der Eigenschaft <codeph class="+ topic/ph pr-d/codeph ">y</codeph>.</p>
	
    <p class="- topic/p "><adobeimage alt="Ein Bild eines Rechtecks, das Standort- und Abmessungseigenschaften anzeigt." href="../../images/rectangle.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Rectangle/x" class="- topic/link "><linktext class="- topic/linktext ">x</linktext></link><link href="flash.geom.xml#Rectangle/y" class="- topic/link "><linktext class="- topic/linktext ">y</linktext></link><link href="flash.geom.xml#Rectangle/width" class="- topic/link "><linktext class="- topic/linktext ">width</linktext></link><link href="flash.geom.xml#Rectangle/height" class="- topic/link "><linktext class="- topic/linktext ">height</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:ColorTransform" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ColorTransform</apiName><shortdesc class="- topic/shortdesc ">
 Mit der ColorTransform-Klasse können Sie die Farbwerte in einem Anzeigeobjekt ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Mit der ColorTransform-Klasse können Sie die Farbwerte in einem Anzeigeobjekt ändern. Die auch als <i class="+ topic/ph hi-d/i ">Farbtransformation</i> bezeichnete Farbanpassungsfunktion kann auf alle vier Kanäle angewendet werden: Rot, Grün, Blau oder Alpha-Transparenz.
 
 <p class="- topic/p ">Wenn ein ColorTransform-Objekt auf ein Anzeigeobjekt angewendet wird, wird der neue Wert der einzelnen Farbkanäle folgendermaßen berechnet:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Neuer Rotwert = (Alter Rotwert * <codeph class="+ topic/ph pr-d/codeph ">redMultiplier</codeph>) + <codeph class="+ topic/ph pr-d/codeph ">redOffset</codeph></li><li class="- topic/li ">Neuer Grünwert = (Alter Grünwert * <codeph class="+ topic/ph pr-d/codeph ">greenMultiplier</codeph>) + <codeph class="+ topic/ph pr-d/codeph ">greenOffset</codeph></li><li class="- topic/li ">Neuer Blauwert = (Alter Blauwert * <codeph class="+ topic/ph pr-d/codeph ">blueMultiplier</codeph>) + <codeph class="+ topic/ph pr-d/codeph ">blueOffset</codeph></li><li class="- topic/li ">Neuer Alphawert = (Alter Alphawert * <codeph class="+ topic/ph pr-d/codeph ">alphaMultiplier</codeph>) + <codeph class="+ topic/ph pr-d/codeph ">alphaOffset</codeph></li></ul>
 
 <p class="- topic/p ">Wenn einer der Farbkanalwerte nach der Berechnung größer als 255 ist, wird er auf 255 gesetzt. Wenn ein Wert kleiner 0 ist, wird er auf 0 gesetzt.</p>
 
 <p class="- topic/p ">Sie können ColorTransform-Objekte folgendermaßen verwenden:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">im Parameter <codeph class="+ topic/ph pr-d/codeph ">colorTransform</codeph> für die <codeph class="+ topic/ph pr-d/codeph ">colorTransform()</codeph>-Methode der BitmapData-Klasse</li><li class="- topic/li ">als <codeph class="+ topic/ph pr-d/codeph ">colorTransform</codeph>-Eigenschaft eines Transform-Objekts (das als <codeph class="+ topic/ph pr-d/codeph ">transform</codeph>-Eigenschaft eines Anzeigeobjekts verwendet werden kann)</li></ul>
 
 <p class="- topic/p ">Bevor Sie die Methoden des ColorTransform-Objekts aufrufen können, müssen Sie zuerst ein ColorTransform-Objekt mithilfe des <codeph class="+ topic/ph pr-d/codeph ">new ColorTransform()</codeph>-Konstruktors erstellen.</p>
 
 <p class="- topic/p ">Farbtransformationen können nicht auf die Hintergrundfarbe eines Movieclips (z. B. eines geladenen SWF-Objekts) angewendet werden. Sie gelten nur für Grafiken und Symbole, die mit dem Movieclip verknüpft sind.</p>
 
 </apiDesc><example conref="examples\ColorTransformExample.as" class="- topic/example "> Im folgenden Beispiel wird mithilfe der TransformExample-Klasse ein einfaches Sprite in Form eines Quadrats mit Farbverlaufsfüllung erstellt. Bei jedem Klicken des Benutzers auf das Quadrat werden die Farben des quadratischen Sprites transformiert, und zwar wird der Wert des Rotkanals erhöht und der Wert des Blaukanals gesenkt. Dies wird in den folgenden Schritten erreicht:
 
 <ol class="- topic/ol "><li class="- topic/li ">Der Konstruktor erstellt ein neues Sprite-Objekt <codeph class="+ topic/ph pr-d/codeph ">target</codeph>.</li><li class="- topic/li ">Der <codeph class="+ topic/ph pr-d/codeph ">CustomButton()</codeph>-Konstruktor ruft die <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>-Methode auf, die ein Quadrat mit Farbverlaufsfüllung im Sprite zeichnet.</li><li class="- topic/li ">Der <codeph class="+ topic/ph pr-d/codeph ">CustomButton()</codeph>-Konstruktor fügt einen click-Ereignis-Listener für das Sprite hinzu, der von der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode verarbeitet wird.  </li><li class="- topic/li ">In der <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode wurden zwei Eigenschaften auf die <codeph class="+ topic/ph pr-d/codeph ">redOffset</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">blueOffset</codeph>-Eigenschaften der aktuellen Farbtransformation gesetzt. Bei beiden wurde der Wert um 25 geändert. Anschließend werden die neuen Offset-Werte der <codeph class="+ topic/ph pr-d/codeph ">transform.colorTransform</codeph>-Eigenschaft des quadratischen Sprites zugewiesen. Bei jedem Klicken des Benutzers auf das Quadrat wird die <codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>-Methode aufgerufen. Dadurch wird die Farbe des Quadrats geändert, da der Wert des Rotkanals erhöht und der Wert des Blaukanals gesenkt wird.  </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.display.GradientType;
    import flash.geom.ColorTransform;
    import flash.events.MouseEvent;

    public class ColorTransformExample extends Sprite {
        public function ColorTransformExample() {
            var target:Sprite = new Sprite();
            draw(target);
            addChild(target);
            target.useHandCursor = true;
            target.buttonMode = true;
            target.addEventListener(MouseEvent.CLICK, clickHandler)
        }
        public function draw(sprite:Sprite):void {
            var red:uint = 0xFF0000;
            var green:uint = 0x00FF00;
            var blue:uint = 0x0000FF;
            var size:Number = 100;
            sprite.graphics.beginGradientFill(GradientType.LINEAR, [red, blue, green], [1, 0.5, 1], [0, 200, 255]);
            sprite.graphics.drawRect(0, 0, 100, 100);
        }
        public function clickHandler(event:MouseEvent):void {
            var rOffset:Number = transform.colorTransform.redOffset + 25;
            var bOffset:Number = transform.colorTransform.redOffset - 25;
            this.transform.colorTransform = new ColorTransform(1, 1, 1, 1, rOffset, 0, bOffset, 0);
        }
    }
}    
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Transform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform</linktext></link><link href="flash.display.xml#DisplayObject/transform" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.transform</linktext></link><link href="flash.display.xml#BitmapData/colorTransform()" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData.colorTransform()</linktext></link></related-links><apiConstructor id="flash.geom:ColorTransform:ColorTransform" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ColorTransform</apiName><shortdesc class="- topic/shortdesc ">
	 Erstellt von einem Anzeigeobjekt anhand der angegebenen Farb- und Alphakanalparameter ein ColorTransform-Objekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new ColorTransform, constructor
 	 </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">redMultiplier</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert des Multiplikators für den Rotkanal im Bereich zwischen 0 und 1.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">greenMultiplier</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert des Multiplikators für den Grünkanal im Bereich zwischen 0 und 1.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">blueMultiplier</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert des Multiplikators für den Blaukanal zwischen 0 und 1.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">alphaMultiplier</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert des Multiplikators für den Alphatransparenzkanal im Bereich zwischen 0 und 1.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">redOffset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Offset-Wert für den Rotkanal zwischen -255 und 255.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">greenOffset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Offset-Wert für den Grünkanal im Bereich zwischen -255 und 255.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">blueOffset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Offset-Wert für den Blaukanal zwischen -255 und 255.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">alphaOffset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Offset-Wert für den Alphatransparenzkanal zwischen -255 und 255.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erstellt ein ColorTransform-Objekt für ein Anzeigeobjekt.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erstellt von einem Anzeigeobjekt anhand der angegebenen Farb- und Alphakanalparameter ein ColorTransform-Objekt. 
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:ColorTransform:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
	 Verkettet das durch den „second“-Parameter angegebene ColorTransform-Objekt mit dem aktuellen ColorTransform-Objekt und legt das aktuelle Objekt als Ergebnis fest. Dabei handelt es sich um eine additive Kombination der beiden Farbtransformationen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example concatenates the ColorTransform object <code>colorTrans_2</code>
	to <code>colorTrans_1</code> resulting in a full red offset combined with a .5 alpha multiplier.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans_1:ColorTransform = new ColorTransform(1, 1, 1, 1, 255, 0, 0, 0);
	trace(colorTrans_1);		// (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=1, redOffset=255, greenOffset=0, blueOffset=0, alphaOffset=0)
	
	var colorTrans_2:ColorTransform = new ColorTransform(1, 1, 1, .5, 0, 0, 0, 0);
	trace(colorTrans_2);		// (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=0.5, redOffset=0, greenOffset=0, blueOffset=0, alphaOffset=0)
	
	colorTrans_1.concat(colorTrans_2);
	trace(colorTrans_1);		// (redMultiplier=1, greenMultiplier=1, blueMultiplier=1, alphaMultiplier=0.5, redOffset=255, greenOffset=0, blueOffset=0, alphaOffset=0)
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans_1;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:ColorTransform</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das ColorTransform-Objekt, das mit dem aktuellen ColorTransform-Objekt kombiniert wird.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Verkettet das durch den Parameter <codeph class="+ topic/ph pr-d/codeph ">second</codeph> angegebene ColorTransform-Objekt mit dem aktuellen ColorTransform-Objekt und legt das aktuelle Objekt als Ergebnis fest. Dabei handelt es sich um eine additive Kombination der beiden Farbtransformationen. Die Anwendung des verketteten ColorTransform-Objekts hat die gleichen Auswirkungen wie die Anwendung der <codeph class="+ topic/ph pr-d/codeph ">second</codeph>-Farbtransformation nach der <i class="+ topic/ph hi-d/i ">original</i>-Farbtransformation.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:ColorTransform:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Formatiert und gibt einen String zurück, der alle Eigenschaften des ColorTransform-Objekts beschreibt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and calls its <code>toSting()</code> method.  This method results in a string with the format
	(redMultiplier=RM, greenMultiplier=GM, blueMultiplier=BM, alphaMultiplier=AM, redOffset=RO, greenOffset=GO, blueOffset=BO, alphaOffset=AO).
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
 	var colorTrans:ColorTransform = new ColorTransform(1, 2, 3, 4, -255, -128, 128, 255);
 	trace(colorTrans.toString());		// (redMultiplier=1, greenMultiplier=2, blueMultiplier=3, alphaMultiplier=4, redOffset=-255, greenOffset=-128, blueOffset=128, alphaOffset=255)
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ein String, der alle Eigenschaften des ColorTransform-Objekts angibt.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Formatiert und gibt einen String zurück, der alle Eigenschaften des ColorTransform-Objekts beschreibt.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:ColorTransform:alphaMultiplier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">alphaMultiplier</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Dezimalwert, der mit dem Wert des Alphatransparenzkanals multipliziert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>alphaMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	import flash.geom.Transform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.alphaMultiplier);		// 1
	
	colorTrans.alphaMultiplier = .5;	
	trace(colorTrans.alphaMultiplier);		// .5
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Dezimalwert, der mit dem Wert des Alphatransparenzkanals multipliziert wird.
	 
	 <p class="- topic/p ">Wenn Sie den Alphatransparenzwert eines Anzeigeobjekts direkt über die <codeph class="+ topic/ph pr-d/codeph ">alpha</codeph>-Eigenschaft der DisplayObject-Instanz festlegen, ändert sich dadurch der Wert der <codeph class="+ topic/ph pr-d/codeph ">alphaMultiplier</codeph>-Eigenschaft der <codeph class="+ topic/ph pr-d/codeph ">transform.colorTransform</codeph>-Eigenschaft des Anzeigeobjekts.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/alpha" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.geom:ColorTransform:alphaOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">alphaOffset</apiName><shortdesc class="- topic/shortdesc ">
	 Eine Zahl zwischen -255 und 255, die zum Alphakanalwert addiert wird, nachdem dieser mit dem „alphaMultiplier“-Wert multipliziert wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>alphaOffset</code> from 0 to -128.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.alphaOffset);			// 0
	
	colorTrans.alphaOffset = -128;
	trace(colorTrans.alphaOffset);			// -128
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Zahl zwischen -255 und 255, die zum Alphakanalwert addiert wird, nachdem dieser mit dem „alphaMultiplier“-Wert multipliziert wurde.
   	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Eine Zahl zwischen -255 und 255, die zum Alphakanalwert addiert wird, nachdem dieser mit dem <codeph class="+ topic/ph pr-d/codeph ">alphaMultiplier</codeph>-Wert multipliziert wurde.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:blueMultiplier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">blueMultiplier</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Dezimalwert, der mit dem Wert des Blaukanals multipliziert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>blueMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.blueMultiplier);		// 1
	
	colorTrans.blueMultiplier = .5;
	trace(colorTrans.blueMultiplier);		// .5
	
	var rect:MovieClip = createRectangle(20, 80, 0x0000FF);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Dezimalwert, der mit dem Wert des Blaukanals multipliziert wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:blueOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">blueOffset</apiName><shortdesc class="- topic/shortdesc ">
	 Eine Zahl zwischen -255 und 255, die zum Blau-Kanalwert addiert wird, nachdem dieser mit dem „blueMultiplier“-Wert multipliziert wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>blueOffset</code> from 0 to 255.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.blueOffset);			// 0
	
	colorTrans.blueOffset = 255;
	trace(colorTrans.blueOffset);			// 255
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Zahl zwischen -255 und 255, die zum Blau-Kanalwert addiert wird, nachdem dieser mit dem „blueMultiplier“-Wert multipliziert wurde.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Eine Zahl zwischen -255 und 255, die zum Blaukanalwert addiert wird, nachdem dieser mit dem <codeph class="+ topic/ph pr-d/codeph ">blueMultiplier</codeph>-Wert multipliziert wurde.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:greenMultiplier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">greenMultiplier</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Dezimalwert, der mit dem Wert des Grünkanals multipliziert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>greenMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.greenMultiplier);		// 1
	
	colorTrans.greenMultiplier = .5;
	trace(colorTrans.greenMultiplier);		// .5
	
	var rect:MovieClip = createRectangle(20, 80, 0x00FF00);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Dezimalwert, der mit dem Wert des Grünkanals multipliziert wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:greenOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">greenOffset</apiName><shortdesc class="- topic/shortdesc ">
	 Eine Zahl zwischen -255 und 255, die zum Grün-Kanalwert addiert wird, nachdem dieser mit dem „greenMultiplier“-Wert multipliziert wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>greenOffset</code> from 0 to 255.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.greenOffset);			// 0
	
	colorTrans.redOffset = 255;
	trace(colorTrans.greenOffset);			// 255
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Zahl zwischen -255 und 255, die zum Grün-Kanalwert addiert wird, nachdem dieser mit dem „greenMultiplier“-Wert multipliziert wurde.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Eine Zahl zwischen -255 und 255, die zum Grünkanalwert addiert wird, nachdem dieser mit dem <codeph class="+ topic/ph pr-d/codeph ">greenMultiplier</codeph>-Wert multipliziert wurde.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:redMultiplier" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">redMultiplier</apiName><shortdesc class="- topic/shortdesc ">
	 Ein Dezimalwert, der mit dem Wert des Rotkanals multipliziert wird.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>redMultiplier</code> from 1 to .5.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
 	var colorTrans:ColorTransform = new ColorTransform();
 	trace(colorTrans.redMultiplier);		// 1
 	
 	colorTrans.redMultiplier = .5;
 	trace(colorTrans.redMultiplier);		// .5
 	
 	var rect:MovieClip = createRectangle(20, 80, 0xFF0000);
 	var trans:Transform = new Transform(rect);
 	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ein Dezimalwert, der mit dem Wert des Rotkanals multipliziert wird. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:redOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">redOffset</apiName><shortdesc class="- topic/shortdesc ">
	 Eine Zahl zwischen -255 und 255, die zum Rot-Kanalwert addiert wird, nachdem dieser mit dem „redMultiplier“-Wert multipliziert wurde.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates the ColorTransform object <code>colorTrans</code>
	and adjusts its <code>redOffset</code> from 0 to 255.
	<listing version="2.0">
	import flash.geom.ColorTransform;
	
	var colorTrans:ColorTransform = new ColorTransform();
	trace(colorTrans.redOffset);			// 0
	
	colorTrans.redOffset = 255;
	trace(colorTrans.redOffset);			// 255
	
	var rect:MovieClip = createRectangle(20, 80, 0x000000);
	var trans:Transform = new Transform(rect);
	trans.colorTransform = colorTrans;
	
	function createRectangle(width:Number, height:Number, color:Number, scope:MovieClip):MovieClip {
		scope = (scope == undefined) ? this : scope;
		var depth:Number = scope.getNextHighestDepth();
		var mc:MovieClip = scope.createEmptyMovieClip("mc_" + depth, depth);
		mc.beginFill(color);
		mc.lineTo(0, height);
		mc.lineTo(width, height);
		mc.lineTo(width, 0);
		mc.lineTo(0, 0);
		return mc;
	}
	</listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Eine Zahl zwischen -255 und 255, die zum Rot-Kanalwert addiert wird, nachdem dieser mit dem „redMultiplier“-Wert multipliziert wurde.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Eine Zahl zwischen -255 und 255, die zum Rotkanalwert addiert wird, nachdem dieser mit <codeph class="+ topic/ph pr-d/codeph ">redMultiplier</codeph> multiplizert wurde.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:ColorTransform:color:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">color</apiName><shortdesc class="- topic/shortdesc ">
	 Der RGB-Farbwert eines ColorTransform-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>This example sets the RGB color value for the movie clip <code>my_mc</code>.<span class="flashonly"> To see this code work, place a movie clip on the Stage with the instance name <code>my_mc</code>. Then place the following code on Frame 1 in the main Timeline and select Control > Test Movie:</span>
	 <pre xml:space="preserve" class="- topic/pre ">
	 <code>var my_color:Color = new Color(my_mc);</code>
	 <code>my_color.setRGB(0xFF0000); // my_mc turns red</code>
	 </pre>
	  
	  </oldexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Der RGB-Farbwert eines ColorTransform-Objekts.
	 
	 <p class="- topic/p ">Wenn Sie diese Eigenschaft festlegen, werden die drei Offset-Farbwerte (<codeph class="+ topic/ph pr-d/codeph ">redOffset</codeph>, <codeph class="+ topic/ph pr-d/codeph ">greenOffset</codeph> und <codeph class="+ topic/ph pr-d/codeph ">blueOffset</codeph>) entsprechend geändert und die drei Farbmultiplikatorwerte (<codeph class="+ topic/ph pr-d/codeph ">redMultiplier</codeph>, <codeph class="+ topic/ph pr-d/codeph ">greenMultiplier</codeph> und <codeph class="+ topic/ph pr-d/codeph ">blueMultiplier</codeph>) auf 0 gesetzt. Die Multiplikator- und Offset-Werte der Alphatransparenz ändern sich nicht.</p>
	 
	 <p class="- topic/p ">Verwenden Sie beim Übergeben eines Werts für diese Eigenschaft das Format 0x<i class="+ topic/ph hi-d/i ">RRGGBB</i>. <i class="+ topic/ph hi-d/i ">RR</i>, <i class="+ topic/ph hi-d/i ">GG</i> und <i class="+ topic/ph hi-d/i ">BB</i> setzen sich aus jeweils zwei Hexadezimalziffern zusammen, die den Offset für jede Farbkomponente festlegen. 0x teilt dem ActionScript-Compiler mit, dass die Zahl ein Hexadezimalwert ist.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:Point" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Point</apiName><shortdesc class="- topic/shortdesc ">
 Das Point-Objekt stellt eine Position in einem 2D-Koordinatensystem dar, in dem x die horizontale Achse und y die vertikale Achse bildet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Point-Klasse gibt eine Position in einem zweidimensionalen Koordinatensystem an.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Das Point-Objekt gibt eine Position in einem zweidimensionalen Koordinatensystem an, in dem <i class="+ topic/ph hi-d/i ">x</i> die horizontale Achse und <i class="+ topic/ph hi-d/i ">y</i> die vertikale Achse darstellt. 
 
 <p class="- topic/p ">Mit dem folgenden Code wird ein Punkt bei (0,0) erstellt:</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var myPoint:Point = new Point();</codeblock>
 
 
 
 <p class="- topic/p ">Point-Objekte werden mit den Methoden und Eigenschaften der folgenden Klassen verwendet:</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">BitmapData</li><li class="- topic/li ">DisplayObject</li><li class="- topic/li ">DisplayObjectContainer</li><li class="- topic/li ">DisplacementMapFilter</li><li class="- topic/li ">NativeWindow</li><li class="- topic/li ">Matrix</li><li class="- topic/li ">Rectangle</li></ul>
 
 <p class="- topic/p ">Mit dem <codeph class="+ topic/ph pr-d/codeph ">new Point()</codeph>-Konstruktor können Sie ein Point-Objekt erstellen.</p>
 
 </apiDesc><example conref="examples\PointExample.as" class="- topic/example "> Im folgenden Beispiel werden mithilfe der PointExample-Klasse mehrere neue Point-Objekte an verschiedenen <i class="+ topic/ph hi-d/i ">x,y</i>-Koordinaten erstellt. Anschließend werden die Ergebnisse der Methoden von verschiedenen Klassen mithilfe der <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>-Methode ausgegeben.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.geom.Point;

    public class PointExample extends Sprite {

        public function PointExample() {
        var point1:Point = new Point();
        trace(point1);  // (x=0, y=0)
        
        var point2:Point = new Point(6, 8);
        trace(point2); // (x=6, y=8)
        
        trace(Point.interpolate(point1, point2, 0.5)); // (x=3, y=4)
        
        trace(Point.distance(point1, point2)); // 10
        
        trace(point1.add(point2)); // (x=6, y=8)
        
        var point3:Point = point2.clone();
        trace(point2.equals(point3)); // true
        
        point3.normalize(2.5);
        trace(point3); // (x=1.5, y=2)
        
        trace(point2.subtract(point3)); // (x=4.5, y=6)
        
        trace(point1.offset(2, 3)); // 
        
        var angle:Number = Math.PI * 2 * (30 / 360); // 30 degrees
        trace(Point.polar(4, angle)) // (x=3.464101615137755, y=1.9999999999999998)   
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#BitmapData" class="- topic/link "><linktext class="- topic/linktext ">flash.display.BitmapData</linktext></link><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link><link href="flash.display.xml#DisplayObjectContainer" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObjectContainer</linktext></link><link href="flash.filters.xml#DisplacementMapFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.filters.DisplacementMapFilter</linktext></link><link href="flash.geom.xml#Matrix" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix</linktext></link><link href="flash.display.xml#NativeWindow" class="- topic/link "><linktext class="- topic/linktext ">flash.display.NativeWindow</linktext></link><link href="flash.geom.xml#Rectangle" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Rectangle</linktext></link></related-links><apiConstructor id="flash.geom:Point:Point" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Point</apiName><shortdesc class="- topic/shortdesc ">
	 Erstellt einen neuen Punkt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The first example creates <code>point_1</code> with the default constructor.
	 <listing version="2.0">
	 import flash.geom.Point;
	 var point_1:Point = new Point();
	 trace(point_1.x); // 0
	 trace(point_1.y); // 0
	 </listing>
	 The second example creates <code>point_2</code> with the coordinates x = 1 and y = 2.
     <listing version="2.0">
	 import flash.geom.Point;
	 var point_2:Point = new Point(1, 2);
	 trace(point_2.x); // 1
	 trace(point_2.y); // 2
	 </listing>
	 
	  
	  
	  </maelexample></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die horizontale Koordinate. 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die vertikale Koordinate. 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erstellt einen neuen Punkt. Wenn Sie keine Parameter für diese Methode übergeben, wird ein Punkt bei (0,0) erstellt.
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:Point:add" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">add</apiName><shortdesc class="- topic/shortdesc ">
      	 Addiert die Koordinaten eines anderen Punkts zu den Koordinaten dieses Punkts, um einen neuen Punkt zu erstellen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a Point object <code>resultPoint</code> by adding <code>point_2</code> to 
	 <code>point_1</code>.
   	 
   	 <listing version="2.0">
   	 import flash.geom.Point;
   	 var point_1:Point = new Point(4, 8);
   	 var point_2:Point = new Point(1, 2);
   	 var resultPoint:Point = point_1.add(point_2);
   	 trace(resultPoint.toString()); // (x=5, y=10)
   	 </listing>
	 
   	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der neue Punkt.
   	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">v</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der zu addierende Punkt.
	 
      	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      	 Addiert die Koordinaten eines anderen Punkts zu den Koordinaten dieses Punkts, um einen neuen Punkt zu erstellen.
	 
      	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 Erstellt eine Kopie des Point-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a <code>clonedPoint</code> from the values found in 
 	 <code>myPoint</code>.  The <code>clonedPoint</code> contains all the
	 the values from <code>myPoint</code> but is not the same object.
	 
	 <listing version="2.0">
	 import flash.geom.Point;
	 var myPoint:Point = new Point(1, 2);
	 var clonedPoint:Point = myPoint.clone();
	 trace(clonedPoint.x); // 1
	 trace(clonedPoint.y); // 2
	 trace(myPoint.equals(clonedPoint)); // true
	 trace(myPoint === clonedPoint); // false
	 </listing>
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das neue Point-Objekt.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Erstellt eine Kopie des Point-Objekts.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Erstellt eine Kopie des Point-Objekts.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:distance" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">distance</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt die Entfernung zwischen pt1 und pt2 zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Abstand zwischen dem ersten und dem zweiten Punkt.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pt1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der erste Punkt.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pt2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der zweite Punkt.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt den Abstand zwischen <codeph class="+ topic/ph pr-d/codeph ">pt1</codeph> und <codeph class="+ topic/ph pr-d/codeph ">pt2</codeph> zurück.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:equals" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">equals</apiName><shortdesc class="- topic/shortdesc ">
	 Stellt fest, ob zwei Punkte gleich sind.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert lautet <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, wenn das Objekt diesem Point-Objekt entspricht; andernfalls <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">toCompare</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der zu vergleichende Punkt.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Stellt fest, ob zwei Punkte gleich sind. Zwei Punkte sind gleich, wenn sie dieselben <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Werte haben.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:interpolate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">interpolate</apiName><shortdesc class="- topic/shortdesc ">
    Legt einen Punkt zwischen zwei angegebenen Punkten fest.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example locates the interpolated point (<code>interpolatedPoint</code>) half way (50%) between <code>point_1</code> and <code>point_2</code>.
   	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var point_1:Point = new Point(-100, -100);
   	var point_2:Point = new Point(50, 50);
   	var interpolatedPoint:Point = Point.interpolate(point_1, point_2, .5);
   	trace(interpolatedPoint.toString()); // (x=-25, y=-25)
   	</listing> 
	
	
	</maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der neue interpolierte Punkt. 
   	
   	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pt1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der erste Punkt.
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pt2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der zweite Punkt.
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">f</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Grad der Interpolation zwischen den beiden Punkten. Zeigt an, wo sich der neue Punkt auf der Linie zwischen <codeph class="+ topic/ph pr-d/codeph ">pt1</codeph> und <codeph class="+ topic/ph pr-d/codeph ">pt2</codeph> befinden wird. Wenn <codeph class="+ topic/ph pr-d/codeph ">f</codeph> =1, wird <codeph class="+ topic/ph pr-d/codeph ">pt1</codeph> zurückgegeben; wenn <codeph class="+ topic/ph pr-d/codeph ">f</codeph> =0, wird <codeph class="+ topic/ph pr-d/codeph ">pt2</codeph> zurückgegeben.
   	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Legt einen Punkt zwischen zwei angegebenen Punkten fest. Mit dem Parameter <codeph class="+ topic/ph pr-d/codeph ">f</codeph> wird die Position des neuen interpolierten Punkts relativ zu den beiden durch <codeph class="+ topic/ph pr-d/codeph ">pt1</codeph> und <codeph class="+ topic/ph pr-d/codeph ">pt2</codeph> angegebenen Endpunkten festgelegt. Je näher der Wert des Parameters <codeph class="+ topic/ph pr-d/codeph ">f</codeph> bei <codeph class="+ topic/ph pr-d/codeph ">1,0</codeph> liegt, desto näher liegt der interpolierte Punkt beim ersten Punkt (Parameter <codeph class="+ topic/ph pr-d/codeph ">pt1</codeph>). Je näher der Wert des Parameters <codeph class="+ topic/ph pr-d/codeph ">f</codeph> bei 0 liegt, desto näher liegt der interpolierte Punkt beim zweiten Punkt (Parameter <codeph class="+ topic/ph pr-d/codeph ">pt2</codeph>).
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
	Skaliert das Liniensegment zwischen (0,0) und dem aktuellen Punkt auf eine bestimmte Länge.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example extends the length of the <code>normalizedPoint</code> object from 5 to 10.
   	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var normalizedPoint:Point = new Point(3, 4);
   	trace(normalizedPoint.length); // 5
   	trace(normalizedPoint.toString()); // (x=3, y=4)
   	normalizedPoint.normalize(10);
   	trace(normalizedPoint.length); // 10
   	trace(normalizedPoint.toString()); // (x=6, y=8)
   	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der normalisierte Punkt.
	
   	</apiDesc><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thickness</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Skalierungswert. Wenn der aktuelle Punkt beispielsweise bei (0,5) liegt und Sie eine Normalisierung auf 1 vornehmen, liegt der zurückgegebene Punkt bei (0,1).
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Skaliert das Liniensegment zwischen (0,0) und dem aktuellen Punkt auf eine bestimmte Länge. 
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point/length" class="- topic/link "><linktext class="- topic/linktext ">length</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Point:offset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">offset</apiName><shortdesc class="- topic/shortdesc ">
	 Versetzt das Point-Objekt um den angegebenen Betrag.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dx</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, um den die horizontale Koordinate <i class="+ topic/ph hi-d/i ">x</i> versetzt werden soll.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dy</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Wert, um den die vertikale Koordinate <i class="+ topic/ph hi-d/i ">y</i> versetzt werden soll.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Versetzt das Point-Objekt um den angegebenen Betrag. Der Wert von <codeph class="+ topic/ph pr-d/codeph ">dx</codeph> wird zum ursprünglichen Wert von <i class="+ topic/ph hi-d/i ">x</i> addiert, um den neuen <i class="+ topic/ph hi-d/i ">x</i>-Wert zu erstellen. Der Wert von <codeph class="+ topic/ph pr-d/codeph ">dy</codeph> wird zum ursprünglichen Wert von <i class="+ topic/ph hi-d/i ">yx</i> addiert, um den neuen <i class="+ topic/ph hi-d/i ">y</i>-Wert zu erstellen.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:polar" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">polar</apiName><shortdesc class="- topic/shortdesc ">
	Konvertiert ein Polarkoordinatenpaar in eine kartesische Punktkoordinate.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a Point object <code>cartesianPoint</code> from the value of <code>angleInRadians</code>
	and a line length of 5.  The <code>angleInRadians</code> value equal to Math.atan(3/4)
   	is used because of the characteristics of right triangles with sides that 
   	have ratios of 3:4:5.
	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var len:Number = 5;
   	var angleInRadians:Number = Math.atan(3/4);
   	var cartesianPoint:Point = Point.polar(len, angleInRadians);
   	trace(cartesianPoint.toString()); // (x=4, y=3)
   	</listing>
	
	When computers work with transcendental numbers such as pi, some round-off
	error occurs because floating-point arithmetic has only finite precision.
	When you use <code>Math.PI</code>, consider using the <code>Math.round()</code> function, as shown 
	in the following example.
	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var len:Number = 10;
   	var angleInRadians:Number = Math.PI;
    	var cartesianPoint:Point = Point.polar(len, angleInRadians);
   	trace(cartesianPoint.toString()); // should be (x=-10, y=0), but is (x=-10, y=1.22460635382238e-15)
   	trace(Math.round(cartesianPoint.y)); // 0
   	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der kartesische Punkt.
   	
   	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">len</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Längenkoordinate des Polarpaars.
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angle</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der Winkel des Polarpaars in Bogenmaß.
   	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Konvertiert ein Polarkoordinatenpaar in eine kartesische Punktkoordinate.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point/length" class="- topic/link "><linktext class="- topic/linktext ">length</linktext></link><link href="#Math/round()" class="- topic/link "><linktext class="- topic/linktext ">Math.round()</linktext></link></related-links></apiOperation><apiOperation id="flash.geom:Point:subtract" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">subtract</apiName><shortdesc class="- topic/shortdesc ">
	Subtrahiert von den Koordinaten dieses Punkts die Koordinaten eines anderen Punkts, um einen neuen Punkt zu erstellen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates <code>point_3</code> by subtracting <code>point_2</code> from <code>point_1</code>.
   	
   	<listing version="2.0">
   	import flash.geom.Point;
   	var point_1:Point = new Point(4, 8);
   	var point_2:Point = new Point(1, 2);
   	var resultPoint:Point = point_1.subtract(point_2);
   	trace(resultPoint.toString()); // (x=3, y=6)
   	</listing>
	
	</maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der neue Punkt.
   	
     	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">v</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Point</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Der zu subtrahierende Punkt.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Subtrahiert von den Koordinaten dieses Punkts die Koordinaten eines anderen Punkts, um einen neuen Punkt zu erstellen.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.geom:Point:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Gibt einen String zurück, der die Werte der x- und y-Koordinaten enthält.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Die Stringdarstellung der Koordinaten.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Gibt einen String zurück, der die Werte der x- und y-Koordinaten enthält. 

	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Gibt einen String zurück, der die Werte der <i class="+ topic/ph hi-d/i ">x</i>- und <i class="+ topic/ph hi-d/i ">y</i>-Koordinaten enthält. Der String hat das Format <codeph class="+ topic/ph pr-d/codeph ">"(x=<i class="+ topic/ph hi-d/i ">x</i>, y=<i class="+ topic/ph hi-d/i ">y</i>)"</codeph>, sodass beim Aufrufen der <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>-Methode für einen Punkt bei 23,17 <codeph class="+ topic/ph pr-d/codeph ">"(x=23, y=17)"</codeph> zurückgegeben wird.
   	 
   	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.geom:Point:x" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">x</apiName><shortdesc class="- topic/shortdesc ">
	 Die horizontale Koordinate des Punkts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example sets the <i class="+ topic/ph hi-d/i ">x</i> (horizontal) coordinate of <code>myPoint</code> and gets <code>myX</code> from <code>myPoint.x</code>.
	 
     <listing version="2.0">	
	 import flash.geom.Point;
	 var myPoint:Point = new Point();
	 trace(myPoint.x); // 0
	 myPoint.x = 5;
	 trace(myPoint.x); // 5
	 var myX:Number = myPoint.x;
	 trace(myX); // 5
     </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die horizontale Koordinate des Punkts. Der Standardwert ist 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Point:y" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">y</apiName><shortdesc class="- topic/shortdesc ">
	 Die vertikale Koordinate des Punkts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example sets the <i class="+ topic/ph hi-d/i ">y</i> (vertical) coordinate of <code>myPoint</code> and gets <code>myY</code> from <code>myPoint.y</code>.
     
     <listing version="2.0">	
	 import flash.geom.Point;
	 var myPoint:Point = new Point();
	 trace(myPoint.y); // 0
	 myPoint.y = 5;
	 trace(myPoint.y); // 5
	 var myY:Number = myPoint.y;
	 trace(myY); // 5
  	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die vertikale Koordinate des Punkts. Der Standardwert ist 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:Point:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	 Die Länge des Liniensegments von (0,0) bis zu diesem Punkt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a new Point, <code>myPoint</code>, and determines the length of a line from (0, 0) to that Point.
	 
	 <listing version="2.0">
	 import flash.geom.Point;
	 var myPoint:Point = new Point(3,4);
	 trace(myPoint.length); // 5
	 </listing>
	 
   	  
   	  
   	  </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Die Länge des Liniensegments von (0,0) bis zu diesem Punkt. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Point/polar()" class="- topic/link "><linktext class="- topic/linktext ">Point.polar()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:Orientation3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Orientation3D</apiName><shortdesc class="- topic/shortdesc ">
Die Orientation3D-Klasse ist eine Aufzählung von Konstantenwerten zur Darstellung des Ausrichtungsstils eines Matrix3D-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Die Orientation3D-Klasse ist eine Aufzählung von Konstantenwerten zur Darstellung des Ausrichtungsstils eines Matrix3D-Objekts. Die drei Ausrichtungstypen sind Eulersche Winkel, Achsenwinkel und Quaternionen. Die <codeph class="+ topic/ph pr-d/codeph ">decompose</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">recompose</codeph>-Methode des Matrix3D-Objekts verwendet einen der aufgezählten Typen, um die Drehungskomponenten der Matrix zu bestimmen.

</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Transform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform</linktext></link><link href="flash.geom.xml#PerspectiveProjection" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.PerspectiveProjection</linktext></link></related-links><apiValue id="flash.geom:Orientation3D:AXIS_ANGLE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">AXIS_ANGLE</apiName><shortdesc class="- topic/shortdesc ">
    Die Achsenwinkelausrichtung verwendet zur Bestimmung der Ausrichtung eine Kombination von Achse und Winkel.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">axisAngle</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die Achsenwinkelausrichtung verwendet zur Bestimmung der Ausrichtung eine Kombination von Achse und Winkel. Ein Beispiel für eine Achse ist eine Linie oder ein Vektor von der Mitte einer dreidimensionalen Kugel zu deren Oberfläche. Die Achse, um die sich das Objekt dreht, ist ein Einheitsvektor, der die Richtung im dreidimensionalen Raum darstellt. Der Winkel stellt die Stärke der Drehung um den Vektor dar. Die Richtung bestimmt, wohin ein Anzeigeobjekt zeigt, und der Rollwinkel bestimmt, wo oben ist. Sie können Vector3D- und Matrix3D-Objekte verwenden, um die verschiedenen Matrixtransformationen und wichtige dreidimensionale Programmierungswerte zu bestimmen, zum Beispiel den Abstand bis zur Überschneidung zweier Objekte, der verwendet werden kann, um einfache Kollisionen dreidimensionaler Objekten zu erkennen.
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.appendRotation()</codeph>- und die <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.prependRotation()</codeph>-Methode verwendet die Achsenwinkelausrichtung.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/decompose()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.decompose()</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.recompose()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Orientation3D:EULER_ANGLES" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EULER_ANGLES</apiName><shortdesc class="- topic/shortdesc "> 
    Eulersche Winkel ist die Standardausrichtung für die decompose()- und recompose()-Methode. Damit wird die Ausrichtung anhand separater Drehwinkel für jede der drei Achsen definiert.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">eulerAngles</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Legt die Ausrichtung anhand separater Drehwinkel für jede der drei Achsen fest.
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Eulersche Winkel ist die Standardausrichtung für die <codeph class="+ topic/ph pr-d/codeph ">decompose()</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">recompose()</codeph>-Methode. Damit wird die Ausrichtung anhand separater Drehwinkel für jede der drei Achsen definiert. Normalerweise folgt auf eine Drehung um die x-Achse eine Drehung um die y-Achse und dann eine Drehung um die z-Achse. 
    
    <p class="- topic/p ">Eulersche Winkel können unter Umständen zu Animationsfehlern führen, da Probleme wie Singularitäten beim Drehen um die x-Achse oder Gimbal Locks auftreten können. Zu einem Gimbal Lock kann es z. B. bei der Drehung um zwei oder mehr Achsen kommen, da bei Eulerschen Winkeln jede Achse unabhängig behandelt wird. Die Achsen können dabei zusammenfallen, was zu unerwarteten Ergebnissen führt.</p>
    
    <p class="- topic/p ">Die Achsendrehungseigenschaften des Anzeigeobjekts führen eine Drehung vom Typ Eulersche Winkel aus.</p>
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/decompose()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.decompose()</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.recompose()</linktext></link></related-links></apiValue><apiValue id="flash.geom:Orientation3D:QUATERNION" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">QUATERNION</apiName><shortdesc class="- topic/shortdesc ">
    Die Quaternionausrichtung verwendet komplexe Zahlen.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">quaternion</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Die Quaternionausrichtung verwendet die drei Drehsachsen (x, y, z) und den Drehwinkel (w).
    
    </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Die Quaternionausrichtung verwendet komplexe Zahlen. Die Ausrichtung in Quaternionen mithilfe der drei Drehachsen (x, y, z) und des Drehwinkels (w). Quaternionen gewährleisten den kürzesten, effizientesten Drehungspfad. Sie erzeugt auch eine ruckfreie Drehung und vermeidet eine Blockade der kardanischen Aufhängung (Gimbal Lock). Ein Gimbal Lock kann auftreten, wenn bei der Drehung um zwei oder mehr Achsen die Achsen zusammenfallen, was zu unerwarteten Ergebnissen führen kann. 
    
    <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">Matrix3D.interpolate()</codeph>-Methode verwendet Quaternionen.</p> 
    
    </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D/decompose()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.decompose()</linktext></link><link href="flash.geom.xml#Matrix3D/recompose()" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D.recompose()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.geom:PerspectiveProjection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">PerspectiveProjection</apiName><shortdesc class="- topic/shortdesc "> 
 Die PerspectiveProjection-Klasse bietet eine einfache Möglichkeit, die perspektivischen Tansformationen eines Anzeigeobjekts oder seiner untergeordneten Objekte zuzuweisen oder zu ändern.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
 </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
 Die PerspectiveProjection-Klasse bietet eine einfache Möglichkeit, die perspektivischen Tansformationen eines Anzeigeobjekts oder seiner untergeordneten Objekte zuzuweisen oder zu ändern. Für komplexere oder benutzerdefinierte perspektivische Projektionen verwenden Sie die Matrix3D-Klasse. Während die PerspectiveProjection-Klasse grundlegende dreidimensionale Präsentationseigenschaften bereitstellt, ermöglicht die Matrix3D-Klasse eine bessere Steuerung der dreidimensionalen Darstellung eines Anzeigeobjekts.
 
 <p class="- topic/p ">Die Projektion ist eine Möglichkeit, ein dreidimensionales Objekt in einem zweidimensionalen Raum darzustellen. So lässt sich zum Beispiel ein Würfel auf einen Computerbildschirm projizieren. Die Perspektivenprojektion verwendet ein sogenanntes Sichtfrustum (ein Abschnitt einer rechteckigen Pyramide), um eine dreidimensionale Welt und deren Objekte zu modellieren und auf den Bildschirm zu projizieren. Das Sichtfrustum wird breiter, wenn es sich vom Ursprung des Blickpunkts wegbewegt. Der Ursprung des Blickpunkts kann eine Kamera oder das Auge des Betrachters sein, der auf den Bildschirm blickt. Die projizierte Perspektive erzeugt die Illusion von drei Dimensionen mit Tiefe und Entfernung, wobei Objekte näher am Bildschirm größer erscheinen als weiter vom Bildschirm entfernte Objekte.</p>
 
 <p class="- topic/p "><adobeimage alt="Frustumvolumen" href="../../images/frustum.jpg" placement="inline" class="+ topic/image adobe-d/adobeimage "/></p>
 
 <p class="- topic/p ">Bei einem PerspectiveProjection-Standardobjekt handelt es sich um ein für die perspektivische Transformation des Stammobjekts definiertes Rahmenobjekt. Es basiert auf dem Sichtfeld und dem Seitenverhältnis (Abmessungen) der Bühne. Die Projektionsmitte, der Fluchtpunkt, ist auf die Mitte der Bühne eingestellt, was bedeutet, dass dreidimensionale Anzeigeobjekte zur Mitte der Bühne verschoben werden, wenn sie entlang der z-Achse nach hinten bewegt werden. Der Standardblickpunkt liegt beim Punkt (0,0), mit Blickrichtung nach unten entlang der positiven z-Achse. Die y-Achse weist zum unteren Rand des Bildschirms. Sie können auf die Einstellungen für die Perspektivenprojektion des <codeph class="+ topic/ph pr-d/codeph ">root</codeph>-Anzeigeobjekts zugreifen und die Eigenschaften für das Sichtfeld und die Projektionsmitte der <codeph class="+ topic/ph pr-d/codeph ">perspectiveProjection</codeph>-Eigenschaft ändern, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.transform</codeph>-Eigenschaft des <codeph class="+ topic/ph pr-d/codeph ">root</codeph>-Objekts verwenden.</p> 
 
 <p class="- topic/p ">Über die Perspektivenprojektion des übergeordneten Elements können Sie auch eine andere Einstellung für die Perspektivenprojektion eines Anzeigeobjekts festlegen. Erstellen Sie zunächst ein PerspectiveProjection-Objekt und stellen Sie dessen <codeph class="+ topic/ph pr-d/codeph ">fieldOfView</codeph>- und <codeph class="+ topic/ph pr-d/codeph ">projectionCenter</codeph>-Eigenschaften ein. Als Nächstes weisen Sie das PerspectiveProjection-Objekt dem übergeordneten Anzeigeobjekt zu, indem Sie die <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.transform</codeph>-Eigenschaft verwenden. Die angegebene Projektionsmatrix und Transformation wird dann auf alle untergeordneten dreidimensionalen Objekte des Anzeigeobjekts angewendet.</p>
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/transform" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.transform</linktext></link><link href="flash.geom.xml#Transform" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Transform</linktext></link><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link><link href="flash.geom.xml#Utils3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Utils3D</linktext></link></related-links><apiConstructor id="flash.geom:PerspectiveProjection:PerspectiveProjection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">PerspectiveProjection</apiName><shortdesc class="- topic/shortdesc ">
     Erstellt eine Instanz eines PerspectiveProjection-Objekts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
     </helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Erstellt eine Instanz eines PerspectiveProjection-Objekts. 
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.geom:PerspectiveProjection:toMatrix3D" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toMatrix3D</apiName><shortdesc class="- topic/shortdesc ">
     Gibt das dem Anzeigeobjekt zugrundeliegende Matrix3D-Objekt zurück.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Das zugrundeliegende Matrix3D-Objekt. 
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Matrix3D</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Gibt das dem Anzeigeobjekt zugrundeliegende Matrix3D-Objekt zurück.  
     
     <p class="- topic/p ">Ein Anzeigeobjekt kann, wie das Stammobjekt, ein PerspectiveProjection-Objekt haben, ohne dass eine Matrix3D-Eigenschaft für seine Transformationen definiert sein muss. Verwenden Sie entweder ein PerspectiveProjection- oder ein Matrix3D-Objekt, um die Perspektiventransformation festzulegen. Wenn bei Verwendung des PerspectiveProjection-Objekts ein Matrix3D-Objekt benötigt wurde, kann die <codeph class="+ topic/ph pr-d/codeph ">toMatrix3D()</codeph>-Methode das zugrundeliegende Matrix3D-Objekt des Anzeigeobjekts abrufen. Zum Beispiel kann die <codeph class="+ topic/ph pr-d/codeph ">toMatrix3D()</codeph>-Methode mit der <codeph class="+ topic/ph pr-d/codeph ">Utils3D.projectVectors()</codeph>-Methode verwendet werden.</p> 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#Matrix3D" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Matrix3D</linktext></link></related-links></apiOperation><apiValue id="flash.geom:PerspectiveProjection:fieldOfView:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fieldOfView</apiName><shortdesc class="- topic/shortdesc ">
     Legt einen Winkel als Gradwert zwischen 0 und 180 für das dreidimensionale Blickfeld fest.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Legt einen Winkel als Gradwert zwischen 0 und 180 für das dreidimensionale Blickfeld fest.
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Legt einen Winkel als Gradwert zwischen <codeph class="+ topic/ph pr-d/codeph ">0</codeph> und <codeph class="+ topic/ph pr-d/codeph ">180</codeph> für das dreidimensionale Sichtfeld fest. Dieser Wert legt fest, wie stark die perspektivische Transformation und Verzerrung auf ein dreidimensionales Anzeigeobjekt angewendet werden, dessen z-Koordinate nicht null ist.
     
     <p class="- topic/p ">Ein Wert nahe <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, bedeutet das, dass die zweidimensionalen x- und y-Koordinaten des Bildschirms nahezu dieselben sind wie die dreidimensionalen x-, y- und z-Koordinaten und wenig oder keine Verzerrung auftritt. Anders ausgedrückt bewegt sich ein Anzeigeobjekt bei einem kleinen Winkel nur wenig entlang der z-Achse nach unten und seine Größe scheint sich kaum zu ändern. </p>
     
     <p class="- topic/p ">Ein Wert nahe <codeph class="+ topic/ph pr-d/codeph ">180</codeph> Grad führt zu einem Fischaugenobjektiveffekt: Positionen mit einem <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Wert kleiner als <codeph class="+ topic/ph pr-d/codeph ">0</codeph> werden vergrößert, dagegen werden Positionen mit einem <codeph class="+ topic/ph pr-d/codeph ">z</codeph>-Wert größer als <codeph class="+ topic/ph pr-d/codeph ">0</codeph> verkleinert. Bei einem großen Winkel bewegt sich das Anzeigeobjekt entlang der z-Achse weit nach unten und seine Größe ändert sich rasch. Ist das Sichtfeld auf <codeph class="+ topic/ph pr-d/codeph ">0</codeph> oder <codeph class="+ topic/ph pr-d/codeph ">180</codeph> gesetzt, ist auf dem Bildschirm nichts zu sehen.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.geom:PerspectiveProjection:focalLength:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">focalLength</apiName><shortdesc class="- topic/shortdesc ">
     Der Abstand zwischen dem Auge oder dem Ursprung des Blickpunkts (0,0,0) und dem auf der z-Achse liegenden Anzeigeobjekt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Der Abstand zwischen dem Auge oder dem Ursprung des Blickpunkts (0,0,0) und dem auf der z-Achse liegenden Anzeigeobjekt. Während der perspektivischen Transformation wird <codeph class="+ topic/ph pr-d/codeph ">focalLength</codeph> dynamisch anhand des Sichtfeldwinkels und des Seitenverhältnisses der Bühne (Bühnenbreite dividiert durch Bühnenhöhe) berechnet.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.geom.xml#PerspectiveProjection/fieldOfView" class="- topic/link "><linktext class="- topic/linktext ">fieldOfView</linktext></link></related-links></apiValue><apiValue id="flash.geom:PerspectiveProjection:projectionCenter:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">projectionCenter</apiName><shortdesc class="- topic/shortdesc ">
     Ein zweidimensionaler Punkt, der den Mittelpunkt der Projektion, den Fluchtpunkt des Anzeigeobjekts darstellt.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.geom:Point</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ein zweidimensionaler Punkt, der den Mittelpunkt der Projektion, den Fluchtpunkt des Anzeigeobjekts darstellt. 
     
     <p class="- topic/p ">Die <codeph class="+ topic/ph pr-d/codeph ">projectionCenter</codeph>-Eigenschaft ist ein Versetzungspunkt zum ursprünglichen Registrierungspunkt oben links auf der Bühne (0,0). Standardmäßig ist die Mitte der Projektionstransformation auf die Mitte der Bühne eingestellt, was bedeutet, dass dreidimensionale Anzeigeobjekte zur Mitte der Bühne verschoben werden, wenn sie entlang der z-Achse nach hinten bewegt werden.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>