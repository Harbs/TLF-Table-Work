<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.accessibility" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.accessibility</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.accessibility:ISimpleTextSelection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ISimpleTextSelection</apiName><shortdesc class="- topic/shortdesc ">
	
	Utilisez la classe ISimpleTextSelection pour que la classe AccessibilityImplementation prenne en charge l’interface ISimpleTextSelection de MSAA.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	Utilisez la classe ISimpleTextSelection pour que la classe AccessibilityImplementation prenne en charge l’interface ISimpleTextSelection de MSAA.
	
	<p class="- topic/p ">Si une sous-classe d’AccessibilityImplementation implémente les deux accesseurs Get de cette classe, un lecteur d’écran (tel que JAWS) peut déterminer la plage de sélection de texte en les appelant. Il n’est pas nécessaire qu’une sous-classe d’AccessibilityImplementation déclare formellement qu’elle implémente cette interface ; il vous suffit de déclarer les accesseurs Get pour ces deux propriétés, en procédant de la façon suivante :</p>
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	class TextAreaAccImpl extends AccesibilityImplementation
	{
	...
		public function get selectionAnchorIndex():int
		{
		...
		}
		public function get selectionActiveIndex():int
		{
		...
	}
	}
	</codeblock>
	</apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.AccessibilityImplementation</linktext></link></related-links><apiValue id="flash.accessibility:ISimpleTextSelection:flash.accessibility:ISimpleTextSelection:selectionActiveIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">selectionActiveIndex</apiName><shortdesc class="- topic/shortdesc "> 
		 Valeur d’index de base zéro du dernier caractère de la sélection actuelle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 Valeur d’index de base zéro du dernier caractère de la sélection actuelle. Si vous souhaitez qu’un composant prenne en charge l’Editeur de méthode d’entrée intégré ou l’accessibilité, remplacez cette méthode.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:ISimpleTextSelection:flash.accessibility:ISimpleTextSelection:selectionAnchorIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">selectionAnchorIndex</apiName><shortdesc class="- topic/shortdesc "> 
		 Valeur d’index de base zéro du premier caractère de la sélection actuelle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 Valeur d’index basée sur zéro du premier caractère de la sélection actuelle. Si vous souhaitez qu’un composant prenne en charge l’Editeur de méthode d’entrée intégré ou l’accessibilité, remplacez cette méthode.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:AccessibilityImplementation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityImplementation</apiName><shortdesc class="- topic/shortdesc ">
 
 La classe AccessibilityImplementation est la classe de base de Flash Player qui permet l’implémentation de l’accessibilité dans les composants. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 
 La classe AccessibilityImplementation est la classe de base de Flash Player qui permet l’implémentation de l’accessibilité dans les composants. Cette classe autorise les communications entre un composant et un logiciel de lecture d’écran. Les lecteurs d’écran servent à traduire le contenu de l’écran en message vocal synthétisé ou en braille pour les utilisateurs mal-voyants.
 
 <p class="- topic/p ">La classe AccessibilityImplementation fournit un ensemble de méthodes permettant à un développeur de composants d’assurer l’accès aux informations sur les rôles système, les événements basés sur les objets et les états aux technologies d’assistance. </p>
 
 <p class="- topic/p ">Adobe Flash Player utilise Microsoft Active Accessibility (MSAA), lequel offre un moyen descriptif et standardisé d’établir une communication entre les applications et les logiciels de lecture d’écran. Pour plus d’informations sur le fonctionnement de Flash Player avec MSAA, voir le chapitre sur l’accessibilité dans <i class="+ topic/ph hi-d/i ">Utilisation du SDK Flex</i>. </p>
 
 <p class="- topic/p ">Les méthodes de la classe AccessibilityImplementation sont un sous-ensemble de l’interface <xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx" class="- topic/xref ">IAccessible</xref> d’une occurrence de composant. </p>
 
 <p class="- topic/p ">La manière dont la classe AccessibilityImplementation implémente l’interface IAccessible et les événements qu’elle envoie varient selon le type de composant implémenté. </p>
 
 <p class="- topic/p ">N’instanciez pas directement la classe AccessibilityImplementation en appelant son constructeur. Créez plutôt de nouvelles implémentations d’accessibilité en étendant la classe AccImpl pour chaque nouveau composant. Dans Flash, voir le package fl.accessibility. Dans Flex, voir le package mx.accessibility et le chapitre concernant l’accessibilité dans <i class="+ topic/ph hi-d/i ">Utilisation du kit de développement Flex</i>. </p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> la classe AccessibilityImplementation n’est pas prise en charge dans les versions du moteur d’exécution d’AIR antérieures à AIR 2. Cette classe est disponible pour la compilation dans les versions d’AIR antérieures à AIR 2, mais n’est pas prise en charge dans les versions du moteur d’exécution antérieures à AIR 2.</p>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityImplementation</apiName><shortdesc class="- topic/shortdesc ">
	 Constructeur statique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Constructeur statique. N’instanciez pas directement la classe AccessibilityImplementation en appelant son constructeur. Créez plutôt de nouvelles implémentations d’accessibilité par l’extension de la classe mx.accessibility.AccImpl pour chaque nouveau composant. 
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="" invalidHref="mx.accessibility.AccImpl.xml" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl</linktext></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">accDoDefaultAction</apiName><shortdesc class="- topic/shortdesc ">
	 Une méthode IAccessible qui exécute l’action par défaut associée au composant représenté par cette classe AccessibilityImplementation ou l’un de ses éléments enfant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Effectue l’action par défaut associée au composant.
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Une méthode IAccessible qui exécute l’action par défaut associée au composant représenté par cette classe AccessibilityImplementation ou l’un de ses éléments enfant. 
	 
	 <p class="- topic/p ">Implémentez cette méthode uniquement si la classe AccessibilityImplementation représente un élément d’interface utilisateur avec une action par défaut dans le modèle MSAA. </p>
	 
	 <p class="- topic/p ">Si vous implémentez <codeph class="+ topic/ph pr-d/codeph ">accDoDefaultAction()</codeph> uniquement pour la classe AccessibilityImplementation ou uniquement pour ses éléments enfant, vous devrez dans certains cas indiquer qu’aucune action par défaut du paramètre childID n’a été transmise. Pour ce faire, définissez la propriété <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">E_MEMBERNOTFOUND</codeph>. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment implémenter cette méthode pour exécuter l’action Flex par défaut dans la classe mx.accessibility.ListBaseAccImpl (implémentation d’accessibilité ListBase). Pour ListBase et les classes qui en héritent, l’exécution de l’action par défaut « Double-clic » sur l’un de ses éléments de liste enfant sélectionne ce dernier. 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">accLocation</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer un objet DisplayObject ou Rectangle spécifiant le cadre de sélection d’un élément enfant dans la classe AccessibilityImplementation. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph> spécifiant le cadre de sélection de l’élément enfant spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">childID</codeph>. 
	 
	 
	 </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie un objet Display ou un objet Rectangle qui spécifie le cadre de sélection d’un élément enfant.
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer un objet <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph> spécifiant le cadre de sélection d’un élément enfant dans la classeAccessibilityImplementation. 
	 
	 <p class="- topic/p ">Cette méthode n’est jamais appelée avec un <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> dont la valeur est zéro. Si la classe AccessibilityImplementation ne contiendra jamais d’éléments enfant, vous ne devez pas implémenter cette méthode. Si la classe AccessibilityImplementation est susceptible de contenir des éléments enfant, cette méthode est obligatoire. </p>
	 
	 <p class="- topic/p ">Vous pouvez généralement satisfaire aux exigences de cette méthode en renvoyant un objet représentant l’élément enfant lui-même. Cela est valable tant que l’élément enfant est un objet <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph>. Dans ce cas, il suffit de renvoyer l’objet <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> qui correspond au nom de l’occurrence associée à l’objet visuel concerné dans la liste d’affichage. </p>	
	 
	 <p class="- topic/p ">Si un élément enfant ne remplit pas les conditions d’utilisation de la technique décrite ci-dessus, vous pouvez effectuer vous-même le calcul du cadre de sélection et renvoyer un <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph> avec les propriétés suivantes : <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> et <codeph class="+ topic/ph pr-d/codeph ">height</codeph>. Les membres <codeph class="+ topic/ph pr-d/codeph ">x</codeph> et <codeph class="+ topic/ph pr-d/codeph ">y</codeph> spécifient le coin supérieur gauche du cadre de sélection, tandis que les membres <codeph class="+ topic/ph pr-d/codeph ">width</codeph> et <codeph class="+ topic/ph pr-d/codeph ">heigth</codeph> spécifient sa taille. La valeur des quatre membres doit être en unités de pixels de l’objet Stage, par rapport à l’origine du composant représenté par la classe AccessibilityImplementation. Les propriétés <codeph class="+ topic/ph pr-d/codeph ">x</codeph> et <codeph class="+ topic/ph pr-d/codeph ">y</codeph> peuvent posséder des valeurs négatives, étant donné que l’origine d’un objet <codeph class="+ topic/ph pr-d/codeph ">DisplayObject</codeph> n’est pas nécessairement dans le coin supérieur gauche. </p>
	 
	 <p class="- topic/p ">Si l’élément enfant spécifié par <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> n’est pas visible (dans le cas où, par exemple, <codeph class="+ topic/ph pr-d/codeph ">get_accState</codeph> pour cet enfant renvoie une valeur incluant <codeph class="+ topic/ph pr-d/codeph ">STATE_SYSTEM_INVISIBLE</codeph>), vous pouvez renvoyer <codeph class="+ topic/ph pr-d/codeph ">null</codeph> à partir de <codeph class="+ topic/ph pr-d/codeph ">accLocation</codeph>. Vous pouvez également renvoyer un objet <codeph class="+ topic/ph pr-d/codeph ">Rectangle</codeph> représentant les coordonnées de l’emplacement où l’élément enfant s’affiche s’il est visible. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant présente l’implémentation de cette méthode pour renvoyer l’emplacement d’un élément enfant dans la classe mx.accessibility.ListBaseAccImpl Flex, l’implémentation d’accessibilité ListBase. 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle" class="- topic/link "><linktext class="- topic/linktext ">flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::accLocation</linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">accSelect</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode IAccessible permettant de modifier la sélection dans le composant représenté par la classe AccessibilityImplementation. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">operation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un champ de bits composé d’une ou de plusieurs constantes d’indicateur de sélection indiquant la manière dont l’élément est sélectionné ou prend le focus.   
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode IAccessible permettant de modifier la sélection dans le composant représenté par la classe AccessibilityImplementation.  
	 
	 <p class="- topic/p ">La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> est toujours différente de zéro. Cette méthode s’applique toujours à un élément enfant plutôt qu’à l’ensemble du composant ; Flash Player gère la sélection de l’ensemble du composant lui-même. </p>
	 
	 <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> est un champ de bits composé d’une ou de plusieurs constantes d’indicateur de sélection qui permet à un client MSAA d’indiquer la manière dont l’élément référencé par le paramètre <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> doit être sélectionné ou prendre le focus. Ce qui suit sont des descriptions des constantes d’indicateur de sélection et des éléments qu’ils communiquent à l’implémentation d’accessibilité. Dans la pratique, la plupart des implémentations de cette méthode dans les implémentations d’accessibilité qui héritent de la classe Flex mx.accessibility.ListBaseAccImpl ignorent la constante <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> et s’appuient sur le comportement de sélection de clavier du composant pour gérer la multi-sélection. </p>
	 
	 <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> peut contenir ou non l’indicateur <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKEFOCUS</codeph>. Si tel est le cas, vous devez également définir le focus enfant sur le <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> spécifié, puis, à moins que <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph> soit également présent, transformer cet élément enfant en ancrage de sélection. Dans le cas contraire, le focus enfant et l’ancrage de sélection ne doivent pas être modifiés, en dépit du fait que d’autres indicateurs décrits ci-dessous puissent modifier la sélection. </p>
	 
	 <p class="- topic/p ">L’argument <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> contient toujours l’un des quatre indicateurs suivants, qui représentent le type de modification de sélection souhaité : </p>
	 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKESELECTION</codeph> : effacez toute sélection existante, puis définissez la sélection en fonction du paramètre <codeph class="+ topic/ph pr-d/codeph ">childID</codeph>. </p>
	 </li><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph> : calculez la plage d’éléments enfant entre l’ancrage de sélection et le paramètre <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> spécifié, incluant ces derniers. Si <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_ADDSELECTION</codeph> est présent, ajoutez l’ensemble de ces éléments enfant à la sélection. Si <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph> est présent, supprimez tous ces éléments enfant de la sélection. En l’absence de <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_ADDSELECTION</codeph> et <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph>, tous ces éléments enfant doivent prendre l’état de sélection de l’ancrage de sélection : si l’ancrage de sélection est sélectionné, ajoutez ces éléments enfant à la sélection ; sinon supprimez-les. </p>
	 </li><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_ADDSELECTION</codeph> (sans <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph>) : ajoutez l’élément <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> à la sélection. </p>
	 </li><li class="- topic/li "><p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph> (sans <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_EXTENDSELECTION</codeph>) : supprimez l’élément <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> de la sélection. </p></li></ul>
	 
	 <p class="- topic/p ">Notez que pour un composant non multi-sélectionnable, les seules valeurs valides pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">selFlag</codeph> sont <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKEFOCUS</codeph> et <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_TAKESELECTION</codeph>. Vous pouvez également, en théorie, choisir de prendre en charge <codeph class="+ topic/ph pr-d/codeph ">SELFLAG_REMOVESELECTION</codeph> pour un composant non multi-sélectionnable ayant autorisé l’utilisateur à forcer une sélection <codeph class="+ topic/ph pr-d/codeph ">null</codeph> mais, en pratique, la plupart des composants non multi-sélectionnables ne fonctionnent pas de cette façon et les clients MSAA ne doivent pas effectuer ce type d’opération. </p>
	 
	 <p class="- topic/p ">Si des indicateurs vous semblent non valides, définissez <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">E_INVALIDARG</codeph>. </p>
	 <p class="- topic/p ">Enfin, notez que lorsque la méthode <codeph class="+ topic/ph pr-d/codeph ">accSelect</codeph> est appelée, Flash Player s’assure qu’elle possède le <i class="+ topic/ph hi-d/i ">focus hôte</i> (la fenêtre de focus de son application conteneur) et que votre composant a le focus dans Flash Player. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment cette méthode est implémentée pour sélectionner un élément enfant dans la classe Flex mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase. 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::accSelect </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getChildIDArray</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie un tableau contenant les ID d’entiers non signés de l’ensemble des éléments enfant de la classe AccessibilityImplementation. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau contenant les ID d’entiers non signés de l’ensemble des éléments enfant de la classe AccessibilityImplementation. 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie un tableau contenant les ID d’entiers non signés de l’ensemble des éléments enfant de la classe AccessibilityImplementation.  
	 
	 <p class="- topic/p ">La longueur du tableau peut être égale à zero. Les ID du tableau doivent apparaître dans le même ordre logique que les éléments enfant qu’ils représentent. Si votre classe AccessibilityImplementation peut contenir des éléments enfant, cette méthode est obligatoire ; sinon, ne l’implémentez pas. </p>
	 
	 <p class="- topic/p ">Lors de l’affectation d’ID enfant à vos éléments enfant, utilisez un modèle qui conserve l’unicité de chaque occurrence de la classe AccessibilityImplementation. Les ID enfant ne doivent pas être contigus et leur ordre ne doit pas correspondre à l’ordre logique des éléments enfant. Vous devez organiser les ID enfant de manière à <i class="+ topic/ph hi-d/i ">ne pas</i> les réutiliser ; si un élément enfant est supprimé, son ID ne doit jamais être réutilisé pendant la durée d’utilisation de cette occurrence AccessibilityImplementation. N’oubliez pas que les choix d’implémentation du code Flash Player peuvent entraîner un comportement indésirable si vous utilisez des ID enfant dépassant le million. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment cette méthode est implémentée pour renvoyer un tableau de childID dans la classe Flex mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase. 
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accDefaultAction</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer l’action par défaut du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La chaîne d’action par défaut spécifiée dans le modèle MSAA pour la classe AccessibilityImplementation ou pour l’un de ses éléments enfant. 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie l’action par défaut du composant.
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer l’action par défaut du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. 
	 
	 <p class="- topic/p ">Implémentez cette méthode uniquement si la classe AccessibilityImplementation représente un élément d’interface utilisateur exécutant une action par défaut dans le modèle MSAA. Pensez à renvoyer la chaîne exacte spécifiée par le modèle MSAA. Par exemple, la chaîne d’action par défaut d’un composant Button est « Press ». </p>
	 
	 <p class="- topic/p ">Si vous implémentez <codeph class="+ topic/ph pr-d/codeph ">get_accDefaultAction</codeph> uniquement pour la classe AccessibilityImplementation ou ses éléments enfant, vous aurez besoin dans certains cas d’indiquer qu’il n’existe aucune action par défaut pour l’identifiant <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> qui a été transmis. Pour ce faire, il suffit de renvoyer la valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment cette méthode est implémentée pour renvoyer les actions par défaut appropriées dans la classe Flex mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase. 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accDefaultAction </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accFocus</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer, le cas échéant, l’ID d’entier non signé de l’élément enfant possédant le focus au sein du composant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’ID d’entier non signé de l’élément enfant, le cas échéant, qui possède le focus au sein du composant. 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie l’ID d’entier non signé de l’élément enfant qui a le focus au sein du composant.
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer, le cas échéant, l’ID d’entier non signé de l’élément enfant possédant le focus au sein du composant. Si aucun enfant ne possède de focus enfant, la méthode renvoie zéro. 
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment cette méthode est implémentée pour renvoyer l’identifiant childID ayant le focus dans la classe Flex mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase. 
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accFocus </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accName</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer le nom du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le nom du composant ou de l’un de ses éléments enfant. 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le nom du composant 
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer le nom du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. 
	 
	 <p class="- topic/p ">Dans le cas de la classe AccessibilityImplementation (<codeph class="+ topic/ph pr-d/codeph ">childID == 0</codeph>), si cette méthode n’est pas implémentée ou ne renvoie pas de valeur, Flash Player utilise la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph>, si elle existe. </p>
	 
	 <p class="- topic/p ">Pour les classes AccessibilityImplementation pouvant avoir des éléments enfant, cette méthode doit être implémentée et doit renvoyer une valeur de chaîne lorsque <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> n’est pas égal à zéro. </p>
	 
	 <p class="- topic/p ">Selon le type d’élément d’interface utilisateur, les noms peuvent représenter deux choses différentes dans MSAA : un nom attribué par l’auteur ou le contenu textuel réel de l’élément. Généralement, la classe AccessibilityImplementation appartient à la première catégorie. Sa propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est un nom attribué par l’auteur. Les éléments enfant appartiennent toujours à la deuxième catégorie. Leurs noms indiquent leur contenu de texte. </p>
	 
	 <p class="- topic/p ">Lorsque la propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph> d’une classe AccessibilityImplementation représente le nom attribué par l’auteur, les composants peuvent acquérir des noms provenant des auteurs de deux façons. La première implique des noms présents dans le composant. Par exemple, un composant Checkbox peut inclure une étiquette de texte qui lui fait office de nom. La deuxième, une option de secours à la première, implique des noms spécifiés dans l’interface utilisateur et aboutissant dans <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph>. Cette option de secours autorise les utilisateurs à spécifier des noms tout comme ils le feraient pour n’importe quelle autre classe Sprite ou MovieClip. </p>
	 
	 <p class="- topic/p ">Il en découle trois possibilités pour la classe AccessibilityImplementation (<codeph class="+ topic/ph pr-d/codeph ">childID == zéro</codeph>) : </p>
	 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Nom attribué par l’auteur au sein du composant. </b> La méthode <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> doit être implémentée et doit renvoyer une valeur de chaîne contenant le nom de la classe AccessibilityImplementation lorsque la valeur de <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> est zéro. Si la valeur de <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> est zéro mais la classe AccessibilityImplementation n’a pas de nom, <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> doit renvoyer une chaîne vide pour empêcher le lecteur de retourner à la propriété <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph>. </p>
	 </li><li class="- topic/li "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Nom attribué par l’auteur provenant de l’interface utilisateur. </b> Si la classe AccessibilityImplementation peut avoir des éléments enfant, la méthode <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> doit être implémentée, mais ne doit pas renvoyer de valeur lorsque <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> est égal à zéro. Si la classe AccessibilityImplementation ne possédera jamais d’éléments enfant, <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> ne doit pas être implémentée. </p>
     	 </li><li class="- topic/li "><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Le nom indiquant le contenu. </b> La méthode <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> doit être implémentée et doit renvoyer une valeur de chaîne appropriée lorsque la valeur de <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> est zéro. Si la valeur de <codeph class="+ topic/ph pr-d/codeph ">childId</codeph> est zéro mais la classe AccessibilityImplementation ne possède pas de contenu, <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> doit renvoyer une chaîne vide pour empêcher le lecteur de retourner à la propriété <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph>. </p>
     	 </li></ul>
     	 <p class="- topic/p ">Notez que pour les éléments enfant (si la classe AccessibilityImplementation peut en posséder), le troisième cas s’applique toujours. La méthode <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> doit être implémentée et doit renvoyer une valeur de chaîne appropriée lorsque la valeur de <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> n’est pas zéro.  </p>
     	 
     	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment cette méthode est implémentée dans la classe Flex mx.accessibility.AccImpl, l’implémentation d’accessibilité de base dans Flex. 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.AccessibilityProperties.name</linktext></link><link href="" invalidHref="mx.accessibility.xml#AccImpl/get_accName()" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl.get_accName()</linktext></link><link href="" invalidHref="mx.accessibility.xml#AccImpl/getName()" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl.getName()</linktext></link><link href="" invalidHref="mx.accessibility.xml#AccImpl/getStatusName()" class="- topic/link "><linktext class="- topic/linktext ">mx.accessibility.AccImpl.getStatusName()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accName </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accRole</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer le rôle système pour le composant que cette AccessibilityImplementation représente ou pour l’un de ses éléments enfant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Code d’erreur <xref href="../../runtimeErrors.html#2143" class="- topic/xref ">2143</xref>, AccessibilityImplementation.get_accRole() doit être remplacée par une autre valeur que sa valeur par défaut. 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Rôle système associé au composant.  
	  
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le rôle système du composant 
	  
	 
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer le rôle système du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. Les rôles système sont prédéfinis pour tous les composants de MSAA. 	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="../../accessibilityImplementationConstants.html" class="- topic/link "><linktext class="- topic/linktext ">Constantes AccessibilityImplementation : Constantes de rôles d’objet</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accRole </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accSelection</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer un tableau contenant les ID de tous les éléments enfant sélectionnés. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un tableau contenant les ID de tous les éléments enfant sélectionnés. 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie un tableau contenant les ID de tous les éléments enfants sélectionnés.
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer un tableau contenant les ID de tous les éléments enfant sélectionnés. Le tableau renvoyé peut contenir aucun, un ou plusieurs ID, tous des entiers non signés. 
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment implémenter cette méthode pour renvoyer les identifiants childID sélectionnés dans la classe Flex mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase. 
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accSelection </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accState</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode IAccessible permettant de renvoyer l’état d’exécution actuel du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Code d’erreur <xref href="../../runtimeErrors.html#2144" class="- topic/xref ">2144</xref>, AccessibilityImplementation.get_accState() doit être remplacée par sa valeur par défaut. 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une combinaison de zéro, une ou plusieurs constantes d’état du système. Les constantes multiples sont assemblées dans un champ de bits à l’aide de <codeph class="+ topic/ph pr-d/codeph ">|</codeph>, l’opérateur OR au niveau du bit.  
	 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie l’état du composant 
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode IAccessible permettant de renvoyer l’état d’exécution actuel du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. 
	 
	 <p class="- topic/p ">Cette méthode doit renvoyer une combinaison de zéro, une ou plusieurs <xref href="../../accessibilityImplementationConstants.html" class="- topic/xref ">constantes d’état d’objet</xref> prédéfinies pour les composants de MSAA. Lorsque plusieurs états s’appliquent, les constantes d’état doivent être combinées en un champ de bits à l’aide de <codeph class="+ topic/ph pr-d/codeph ">|</codeph>, l’opérateur OR au niveau du bit. </p>
	 
	 <p class="- topic/p ">Pour indiquer qu’aucune des constantes d’état n’est en cours d’application, cette méthode doit renvoyer zéro. </p>
	 
	 <p class="- topic/p ">Vous ne devez pas suivre ou signaler les états STATE_SYSTEM_FOCUSABLE ou STATE_SYSTEM_FOCUSED. Flash Player gère automatiquement ces états. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment implémenter cette méthode pour combiner plusieurs constantes d’état dans mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase Flex. 
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="../../accessibilityImplementationConstants.html" class="- topic/link "><linktext class="- topic/linktext ">Constantes AccessibilityImplementation : Constantes d’objet d’état</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accState </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">get_accValue</apiName><shortdesc class="- topic/shortdesc ">
	 La méthode MSAA permettant de renvoyer la valeur d’exécution du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une chaîne représentant la valeur d’exécution du composant ou de l’un de ses éléments enfant. 
	  
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">childID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier non signé correspondant à l’un des éléments enfant du composant, tel que défini par <codeph class="+ topic/ph pr-d/codeph ">getChildIDArray()</codeph>. 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur du composant 
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 La méthode MSAA permettant de renvoyer la valeur d’exécution du composant représenté par cette classe AccessibilityImplementation ou de l’un de ses éléments enfant. 
	 
	 <p class="- topic/p ">Implémentez cette méthode uniquement si la classe AccessibilityImplementation représente un élément d’interface utilisateur ayant une valeur dans le modèle MSAA. N’oubliez pas que certains éléments d’interface utilisateur possédant une valeur apparente exposent en fait cette valeur de différentes manières, notamment <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> (texte, par exemple), <codeph class="+ topic/ph pr-d/codeph ">get_accState</codeph> (case à cocher, par exemple) ou <codeph class="+ topic/ph pr-d/codeph ">get_accSelection</codeph> (zones de liste, par exemple). </p>
	 
	 <p class="- topic/p ">Si vous implémentez <codeph class="+ topic/ph pr-d/codeph ">get_accValue</codeph> uniquement pour la classe AccessibilityImplementation ou pour ses éléments enfant, vous aurez besoin dans certains cas d’indiquer qu’il n’existe aucun concept de valeur pour l’identifiant <codeph class="+ topic/ph pr-d/codeph ">childID</codeph> qui a été transmis. Pour ce faire, il suffit de renvoyer la valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. </p>
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant indique comment implémenter cette méthode pour renvoyer la valeur appropriée en fonction de la valeur <codeph class="+ topic/ph pr-d/codeph ">selectedIndex</codeph> du composant dans la classe Flex mx.accessibility.ListBaseAccImpl, l’implémentation d’accessibilité ListBase. 
	 
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()" class="- topic/link "><linktext class="- topic/linktext ">getChildIDArray()</linktext></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx" class="- topic/link "><linktext class="- topic/linktext ">Microsoft Accessibility Developer Center : IAccessible::get_accValue </linktext></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:isLabeledBy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isLabeledBy</apiName><shortdesc class="- topic/shortdesc ">
	 
	 Renvoie true ou false pour indiquer si un objet de texte dont le cadre de sélection est spécifié par x, y, width et height doit être considéré comme une étiquette pour le composant que représente cette classe AccessibilityImplementation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><codeph class="+ topic/ph pr-d/codeph ">true</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour indiquer si un objet de texte disposant des limites d’étiquette correspondantes doit être considéré comme une étiquette pour le composant que représente la classe AccessibilityImplementation.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">labelBounds</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.geom:Rectangle</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Rectangle représentant le cadre de sélection d’un objet de texte.
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Indique si un objet de texte voisin est un étiquette pour ce composant. 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 
	 Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour indiquer si un objet de texte dont le cadre de sélection est spécifié par <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, <codeph class="+ topic/ph pr-d/codeph ">width</codeph> et <codeph class="+ topic/ph pr-d/codeph ">height</codeph> doit être considéré comme une étiquette pour le composant que représente cette classe AccessibilityImplementation. 
	 
	 <p class="- topic/p ">Les coordonnées <codeph class="+ topic/ph pr-d/codeph ">x</codeph> et <codeph class="+ topic/ph pr-d/codeph ">y</codeph> sont relatives à l’angle supérieur gauche du composant auquel la classe AccessibilityImplementation s’applique et peuvent être négatives. Toutes les coordonnées sont en unités de scène pixels. </p>
	 
	 <p class="- topic/p ">Cette méthode permet d’inclure les composants accessibles dans la recherche de relations d’étiquetage automatique de Flash Player ; ces relations permettent au texte externe à un objet de fournir le nom de l’objet. Cette méthode est fournie, car il est fort probable que les critères de reconnaissance des étiquettes diffèrent d’un composant à l’autre. Si vous implémentez cette méthode, vous devez utiliser des critères géométriques similaires à ceux utilisés dans le code du lecteur pour les boutons et les champs de texte. Ces critères sont les suivants :</p>
	 
	 <p class="- topic/p "><ul class="- topic/ul "><li class="- topic/li ">Pour les boutons, tout texte faisant partie intégrale du bouton est considéré comme une étiquette.</li><li class="- topic/li ">Pour les champs de texte, tout texte qui apparaît juste au-dessus et aligné à gauche ou qui apparaît à gauche est considéré comme une étiquette.</li></ul></p>
	 
	 <p class="- topic/p ">Si le composant que cette classe AccessibilityImplementation représente ne doit jamais participer à des relations d’étiquetage automatique, n’implémentez pas la méthode <codeph class="+ topic/ph pr-d/codeph ">isLabeledBy</codeph>. Cela équivaut à toujours renvoyer <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. Par exemple, la méthode <codeph class="+ topic/ph pr-d/codeph ">isLabeledBy</codeph> ne doit pas être implémentée lorsque la classe AccessibilityImplementation tombe dans le cas « Nom attribué par l’auteur au sein du composant » décrit dans la méthode <codeph class="+ topic/ph pr-d/codeph ">get_accName</codeph> ci-dessus. </p>
	 <p class="- topic/p ">Notez que cette méthode n’est basée sur aucune méthode <b class="+ topic/ph hi-d/b ">IAccessible</b>, mais qu’elle est propre à Flash. </p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">errno</apiName><shortdesc class="- topic/shortdesc ">
	 Indique un code d’erreur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique un code d’erreur. Les erreurs sont signalées hors bande, plutôt que dans les valeurs renvoyées. Pour indiquer une erreur, définissez la propriété <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> sur l’un des codes d’erreur documentés dans l’annexe Constantes AccessibilityImplementation. La valeur renvoyée est alors ignorée. La propriété <codeph class="+ topic/ph pr-d/codeph ">errno</codeph> de la classe AccessibilityImplementation est toujours effacée (définie sur zéro) par le lecteur avant tout appel de la méthode AccessibilityImplementation. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="../../accessibilityImplementationConstants.html" class="- topic/link "><linktext class="- topic/linktext ">Constantes AccessibilityImplementation </linktext></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">stub</apiName><shortdesc class="- topic/shortdesc ">
	 S’utilise pour créer un stub d’accessibilité de composant.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 S’utilise pour créer un stub d’accessibilité de composant. Si un composant est publié sans une implémentation d’accessibilité ActionScript, Adobe vous recommande d’ajouter un stub d’accessibilité de composant. Pour des raisons d’accessibilité, ce stub entraîne le traitement par Flash Player du composant comme un simple graphique plutôt que l’exposition de la structure interne des boutons, des champs de texte, etc., dans le composant.  
	 
	 <p class="- topic/p ">Pour créer un stub d’accessibilité de composant, créez une sous-classe de la classe AccImpl en remplaçant le stub de propriété par la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. </p> 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="" class="- topic/link "><linktext class="- topic/linktext ">La classe mx.accessibility.AccImpl dans Flex (\sdks\4.0.0\frameworks\projets\Structure\src\mx\Accessibility\AccImpl.as)</linktext></link><link href="" class="- topic/link "><linktext class="- topic/linktext ">La classe fl.accessibility.AccImpl dans Flash (\Local Settings\Application Data\Adobe\Flash CS5\fr_FR\Configuration\Classes\mx\Accessibility\AccImpl.as)</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:AccessibilityProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityProperties</apiName><shortdesc class="- topic/shortdesc ">
 La classe AccessibilityProperties vous permet de contrôler la présentation des objets Flash aux outils d’aide à l’accessibilité, tels que les lecteurs d’écran.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe AccessibilityProperties vous permet de contrôler la présentation des objets Flash aux outils d’aide à l’accessibilité, tels que les lecteurs d’écran.
 
 <p class="- topic/p ">Vous pouvez joindre un objet AccessibilityProperties à tout objet à afficher. Cependant, Flash Player ne lira votre objet AccessibilityProperties que pour certains types d’objet : les fichiers SWF complets (représentés par <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.root</codeph>), les objets conteneur (<codeph class="+ topic/ph pr-d/codeph ">DisplayObjectContainer</codeph> et les sous-classes), les boutons (<codeph class="+ topic/ph pr-d/codeph ">SimpleButton</codeph> et les sous-classes) et le texte (<codeph class="+ topic/ph pr-d/codeph ">TextField</codeph> et les sous-classes).</p>
 
 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph> de ces objets est la plus importante à indiquer car les outils d’aide à l’accessibilité fournissent le nom des objets aux utilisateurs comme principal moyen de navigation. Ne confondez pas <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> et <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.name</codeph> ; il s’agit de deux propriétés distinctes et sans rapport entre elles. La propriété <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties.name</codeph> est le nom qui est lu à haute voix par l’outil d’aide à l’accessibilité, alors que <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.name</codeph> est un nom de variable visible uniquement dans le code ActionScript.</p>
 
 <p class="- topic/p ">Dans Flash Professional, les propriétés des objets <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties</codeph> remplacent les paramètres correspondants du panneau Accessibilité pendant la création.</p>
 
 <p class="- topic/p ">Pour savoir si Flash Player s’exécute dans un environnement qui prend en charge les fonctions d’accessibilité, utilisez la propriété <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasAccessibility</codeph>. Si vous modifiez des objets AccessibilityProperties, vous devez appeler la méthode <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> pour que les modifications deviennent effectives.</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as" class="- topic/example "> L’exemple suivant utilise les classes <codeph class="+ topic/ph pr-d/codeph ">AccessibilityExample</codeph>, <codeph class="+ topic/ph pr-d/codeph ">CustomAccessibleButton</codeph>, <codeph class="+ topic/ph pr-d/codeph ">CustomSimpleButton</codeph> et <codeph class="+ topic/ph pr-d/codeph ">ButtonDisplayState</codeph> pour créer un menu d’accessibilité qui fonctionne avec les lecteurs d’écran les plus courants. Voici les principales fonctionnalités de la classe <codeph class="+ topic/ph pr-d/codeph ">AccessibilityProperties</codeph> :
 
 <ol TYPE="1" class="- topic/ol "><li class="- topic/li "> Appelez <codeph class="+ topic/ph pr-d/codeph ">configureAssets</codeph>, qui crée un bouton personnalisé et définit son intitulé et sa description. Voici les valeurs que le lecteur d’écran envoie à l’utilisateur final.</li><li class="- topic/li ">Appelez <codeph class="+ topic/ph pr-d/codeph ">setTimeOut()</codeph> pour vous assurer que Flash Player dispose de suffisamment de temps pour détecter le lecteur d’écran avant de mettre les propriétés à jour.</li></ol>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> appelez <codeph class="+ topic/ph pr-d/codeph ">setTimeout()</codeph> avant de vérifier <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph>. pour accorder à Flash Player les 2 secondes dont il a besoin pour se connecter à un lecteur d’écran, le cas échéant. Si vous ne laissez pas suffisamment de temps au lecteur, l’appel de <codeph class="+ topic/ph pr-d/codeph ">setTimeout</codeph> risque de renvoyer la valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> même lorsqu’un lecteur d’écran est disponible.</p>
 
 <p class="- topic/p ">L’exemple suivant ne traite la méthode <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> que si l’appel à <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Cette situation ne se produit que lorsque Flash Player est déjà connecté à un lecteur d’écran actif. Si la méthode <codeph class="+ topic/ph pr-d/codeph ">updateProperties</codeph> est appelée sans lecteur d’écran actif, elle émet une exception <codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph>.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#Accessibility/updateProperties()" class="- topic/link "><linktext class="- topic/linktext ">flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex" class="- topic/link "><linktext class="- topic/linktext ">flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">AccessibilityProperties</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un nouvel objet AccessibilityProperties.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un nouvel objet AccessibilityProperties.
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">description</apiName><shortdesc class="- topic/shortdesc ">
	 Fournit une description de cet objet d’affichage dans la présentation accessible.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Fournit une description de cet objet d’affichage dans la présentation accessible. Si vous avez beaucoup d’informations à mentionner à propos de l’objet, choisissez un nom concis et gardez le reste pour la propriété <codeph class="+ topic/ph pr-d/codeph ">description</codeph>. S'applique aux fichiers SWF entiers, aux conteneurs, aux boutons et au texte. La valeur par défaut est une chaîne vide.
     <p class="- topic/p ">Dans Flash Professional, cette propriété correspond au champ Description du panneau Accessibilité.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">forceSimple</apiName><shortdesc class="- topic/shortdesc ">
	 Si la valeur est true, Flash Player exclut les objets enfant contenus dans cet objet d’affichage de la présentation accessible.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, Flash Player exclut les objets enfant contenus dans cet objet d’affichage de la présentation accessible. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. S’applique aux fichiers SWF entiers et aux conteneurs.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	 Affecte un nom à cet objet d’affichage dans la présentation accessible.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Affecte un nom à cet objet d’affichage dans la présentation accessible. S'applique aux fichiers SWF entiers, aux conteneurs, aux boutons et au texte. Ne confondez pas avec la propriété <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.name</codeph>, qui n’a aucun rapport. La valeur par défaut est une chaîne vide.
     <p class="- topic/p ">Dans Flash Professional, cette propriété correspond au champ Nom du panneau Accessibilité.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">noAutoLabeling</apiName><shortdesc class="- topic/shortdesc ">
	 Si la valeur est true, le système d’étiquetage automatique par défaut de Flash Player est désactivé.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, le système d’étiquetage automatique par défaut de Flash Player est désactivé. Avec l’étiquetage automatique, les objets texte placés dans les boutons sont traités comme des noms de bouton, et ceux qui sont placés à côté des champs de texte sont traités comme des noms de champ de texte. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. S’applique aux fichiers SWF entiers uniquement.
     <p class="- topic/p ">La valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">noAutoLabeling</codeph> est ignorée, sauf si vous la spécifiez avant la première lecture de votre fichier SWF par une aide d’accessibilité. Si vous envisagez de définir <codeph class="+ topic/ph pr-d/codeph ">noAutoLabeling</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, faites-le aussi tôt que possible dans votre code.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">shortcut</apiName><shortdesc class="- topic/shortdesc ">
	 Indique un raccourci clavier associé à l’objet d’affichage.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique un raccourci clavier associé à l’objet d’affichage. Ne spécifiez cette chaîne que pour les contrôles de l’interface utilisateur que vous avez associés à une touche de raccourci. S’applique aux conteneurs, aux boutons et au texte. La valeur par défaut est une chaîne vide.
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque </b>: l’affectation de cette propriété n’affecte pas automatiquement la combinaison de touches spécifiée à cet objet ; pour ce faire, vous devez utiliser vous-même un écouteur d’événements <codeph class="+ topic/ph pr-d/codeph ">KeyboardEvent</codeph>.</p>
	 
	 <p class="- topic/p ">La syntaxe de cette chaîne utilise des noms longs pour les touches de modification et le signe plus(+) pour signaler une combinaison de touches. Ctrl+F, Ctrl+Maj+Z sont des exemples de chaînes valides.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">silent</apiName><shortdesc class="- topic/shortdesc ">
	 Si la valeur est true, l’objet d’affichage est exclu de la présentation accessible.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’objet d’affichage est exclu de la présentation accessible. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. S’applique aux fichiers SWF entiers, aux conteneurs, aux boutons et au texte.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:ISearchableText" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ISearchableText</apiName><shortdesc class="- topic/shortdesc ">
	L’interface ISearchableText peut être implémentée par des objets qui contiennent du texte pouvant faire l’objet d’une recherche sur le Web.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiInterface class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiInterface "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	L’interface ISearchableText peut être implémentée par des objets qui contiennent du texte pouvant faire l’objet d’une recherche sur le Web. 
	
	</apiDesc></apiClassifierDetail><apiValue id="flash.accessibility:ISearchableText:flash.accessibility:ISearchableText:searchText:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">searchText</apiName><shortdesc class="- topic/shortdesc "> 
		 Récupère le texte de recherche à partir d’un composant implémentant l’interface ISearchableText.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
		 Récupère le texte de recherche à partir d’un composant implémentant l’interface ISearchableText.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.accessibility:Accessibility" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Accessibility</apiName><shortdesc class="- topic/shortdesc ">
 La classe Accessibility gère les communications avec les logiciels de lecture d’écran.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Accessibility gère les communications avec les logiciels de lecture d’écran. Les logiciels de lecture d’écran offrent une technologie d’assistance conçue spécialement pour les utilisateurs malvoyants : ils fournissent une version sonore du contenu de l’écran. Les méthodes de la classe Accessibility sont statiques : ainsi, vous n’avez pas besoin de créer d’occurrence de la classe pour utiliser ses méthodes.
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Prise en charge du navigateur mobile :</b> cette classe n’est pas prise en charge sur les navigateurs mobiles.</p>
 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Prise en charge du profil AIR :</i> cette fonctionnalité est prise en charge sur tous les systèmes d’exploitation de bureau, mais ne l’est pas sur les périphériques mobiles ou sur les périphériques AIR pour TV. Voir <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Prise en charge du profil AIR</xref> pour plus d’informations sur la prise en charge de l’API dans plusieurs profils.</p>
 
 <p class="- topic/p ">Pour récupérer et définir les propriétés disponibles pour un certain objet, tel qu’un bouton, un clip ou un champ de texte, utilisez la propriété <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.accessibilityProperties</codeph>. Pour savoir si le lecteur ou le moteur d’exécution s’exécute dans un environnement qui prend en charge les fonctions d’accessibilité, utilisez la propriété <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasAccessibility</codeph>. </p>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> AIR 2 prend en charge le logiciel de lecture d’écran JAWS 11 (ou ultérieur). Pour plus d’informations, voir http://www.adobe.com/fr/accessibility/.</p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as" class="- topic/example "> L’exemple suivant utilise les classes <codeph class="+ topic/ph pr-d/codeph ">AccessibilityExample</codeph>, <codeph class="+ topic/ph pr-d/codeph ">CustomAccessibleButton</codeph>, <codeph class="+ topic/ph pr-d/codeph ">CustomSimpleButton</codeph> et <codeph class="+ topic/ph pr-d/codeph ">ButtonDisplayState</codeph> pour créer un menu d’accessibilité qui fonctionne avec la plupart des lecteurs d’écran. L’exemple exécute les tâches suivantes :
 <ol class="- topic/ol "><li class="- topic/li ">Il recherche la propriété <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> pour déterminer si un lecteur d’écran est actif actuellement et si Flash Player communique avec lui.</li><li class="- topic/li ">Si la propriété <codeph class="+ topic/ph pr-d/codeph ">active</codeph> renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’exemple appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">updateProperties()</codeph> pour appliquer les modifications d’accessibilité apportées aux boutons dans cet exemple.</li><li class="- topic/li ">L’exemple appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">flash.utils.setTimeout()</codeph> en indiquant que la méthode de fermeture <codeph class="+ topic/ph pr-d/codeph ">updateAccessibility()</codeph> doit être appelée dans 2 secondes.</li></ol>
 
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque : </b>appelez <codeph class="+ topic/ph pr-d/codeph ">setTimeout()</codeph> avant de vérifier que <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> accorde à Flash Player les 2 secondes dont il a besoin pour se connecter à un lecteur d’écran, le cas échéant. Si vous ne laissez pas suffisamment de temps au lecteur, l’appel de <codeph class="+ topic/ph pr-d/codeph ">setTimeout</codeph> risque de renvoyer la valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> même lorsqu’un lecteur d’écran est disponible.
 </p>
 <p class="- topic/p ">L’exemple suivant ne traite la méthode <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> que si l’appel à <codeph class="+ topic/ph pr-d/codeph ">Accessibility.active</codeph> renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Cette situation ne se produit que lorsque Flash Player est déjà connecté à un lecteur d’écran actif. Si la méthode <codeph class="+ topic/ph pr-d/codeph ">updateProperties</codeph> est appelée sans lecteur d’écran actif, elle émet une exception <codeph class="+ topic/ph pr-d/codeph ">IllegalOperationError</codeph>.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#DisplayObject/accessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket" class="- topic/link "><linktext class="- topic/linktext ">Socket</linktext></link><link href="http://www.adobe.com/accessibility/" class="- topic/link "><linktext class="- topic/linktext ">http://www.adobe.com/fr/accessibility/</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:updateProperties" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">updateProperties</apiName><shortdesc class="- topic/shortdesc ">
	Indique à Flash Player d’appliquer toute modification de l’accessibilité effectuée à l’aide de la propriété DisplayObject.accessibilityProperties.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’accessibilité n’est pas prise en charge par cette version de Flash Player. N’appelez pas la méthode <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> si la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">flash.system.Capabilities.hasAccessibility</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Indique à Flash Player d’appliquer toute modification de l’accessibilité effectuée à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">DisplayObject.accessibilityProperties</codeph>. Vous devez appeler cette méthode pour que vos modifications soient activées. 
	
	<p class="- topic/p ">Si vous modifiez les propriétés d’accessibilité de plusieurs objets, un seul appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">Accessibility.updateProperties()</codeph> est nécessaire ; plusieurs appels risquent de réduire les performances et de provoquer des erreurs dans le logiciel de lecture d’écran.</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.accessibility.xml#Accessibility/active" class="- topic/link "><linktext class="- topic/linktext ">active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties" class="- topic/link "><linktext class="- topic/linktext ">flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">active</apiName><shortdesc class="- topic/shortdesc ">
	Indique si un lecteur d’écran est actif et si l’application communique avec lui.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Indique si un lecteur d’écran est actif et si l’application communique avec lui. Utilisez cette méthode lorsque vous souhaitez que votre application se comporte différemment en présence d’un lecteur d’écran. 
	
	<p class="- topic/p ">Une fois que cette propriété est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, elle reste <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour la durée de l’application. (En règle générale, un utilisateur ne désactive pas le lecteur d’écran après l’avoir démarré.)</p>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque : </b>avant d’appeler cette méthode, attendez 1 à 2 secondes après le lancement de votre application AIR ou après la première ouverture de la fenêtre de Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player dans laquelle votre document s’affiche. Dans le cas contraire, la valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> risque d’être renvoyée même s’il existe un client d’accessibilité actif. Ce comportement est dû à un mécanisme de communication asynchrone entre les clients d’accessibilité et Flash Player ou AIR.</p>
	
	Pour savoir si Flash Player s’exécute dans un environnement qui prend en charge les lecteurs d’écran, utilisez la propriété <codeph class="+ topic/ph pr-d/codeph ">Capabilities.hasAccessibility</codeph>. 
	
	</apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.system.xml#Capabilities/hasAccessibility" class="- topic/link "><linktext class="- topic/linktext ">flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()" class="- topic/link "><linktext class="- topic/linktext ">updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>