<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.filesystem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.filesystem</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.filesystem:FileStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileStream</apiName><shortdesc class="- topic/shortdesc ">
 Un objet FileStream est utilisé pour lire et écrire des fichiers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Un objet FileStream est utilisé pour lire et écrire des fichiers. Les fichiers peuvent être ouverts de façon synchrone en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou de façon asynchrone en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>.
 
 <p class="- topic/p ">L’avantage de l’ouverture asynchrone des fichiers est qu’un autre code peut s’exécuter pendant que Adobe AIR exécute des processus de lecture et d’écriture en arrière-plan. Dans le cas d’une ouverture asynchrone, des événements <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> sont distribués au fur et à mesure des opérations.</p>
 
 <p class="- topic/p ">Un objet File ouvert de façon synchrone se comporte un peu comme un objet ByteArray ; un fichier ouvert de façon asynchrone se comporte un peu comme un objet Socket ou URLStream Lorsqu’un objet File est ouvert de façon synchrone, l’appelant fait une pause pendant la lecture ou l’écriture des données demandées dans le fichier sous-jacent. Lorsqu’un fichier est ouvert de façon asynchrone, les données écrites dans le flux sont immédiatement mises en mémoire tampon et écrites ultérieurement dans le fichier.</p>
 
 <p class="- topic/p ">Que la lecture d’un fichier soit synchrone ou asynchrone, les méthodes de lecture réelles sont synchrones. Dans les deux cas, elles lisent les données actuellement « disponibles ». Lorsque les données sont lues de façon synchrone, elles sont toutes disponibles à tout moment. Alors que lors d’une lecture asynchrone, les données deviennent disponibles au fur et à mesure de leur arrivée dans le tampon de lecture. Dans les deux cas, les données pouvant être lues de façon synchrone à un moment donné sont représentées par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>.</p>
 
 <p class="- topic/p ">Une application qui traite une entrée de façon asynchrone s’enregistre généralement pour les événements <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> et consomme les données au fur et à mesure qu’elles deviennent disponibles en appelant des méthodes de lecture. L’application peut également se contenter d’attendre que toutes les données soient disponibles en s’enregistrant pour l’événement <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> et en traitant l’ensemble des données lorsque cet événement <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> est distribué. </p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Indique que la fin du flux a été atteint.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indique que la fin du flux a été atteint.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.OutputProgressEvent.OUTPUT_PROGRESS_outputProgress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">outputProgress</apiName><shortdesc class="- topic/shortdesc ">
 Indique que les données placées en mémoire tampon ont été écrites dans le fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.OutputProgressEvent.OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.OutputProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indique que les données placées en mémoire tampon ont été écrites dans le fichier.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.ProgressEvent.PROGRESS_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><shortdesc class="- topic/shortdesc ">
 Signale la disponibilité de nouvelles données dans le flux.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Signale la disponibilité de nouvelles données dans le flux.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Indique qu’une erreur s’est produite lors d’une opération d’E/S de fichier asynchrone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indique qu’une erreur s’est produite lors d’une opération d’E/S de fichier asynchrone.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Indique que le flux a été fermé par un appel explicite à la méthode close().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Indique que le flux a été fermé par un appel explicite à la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.filesystem:FileStream:FileStream" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">FileStream</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet FileStream. Utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> pour ouvrir un fichier.
	 
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:FileStream:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
	 Ferme l’objet FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ferme l’objet FileStream. 
	 
	 <p class="- topic/p ">Vous ne pouvez plus lire ni écrire des données après avoir appelé la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>. Si le fichier a été ouvert de façon asynchrone (l’objet FileStream a utilisé la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> pour ouvrir le fichier), un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> entraîne la distribution de l’événement <codeph class="+ topic/ph pr-d/codeph ">close</codeph> par l’objet. </p>
	 
	 <p class="- topic/p ">La fermeture de l’application entraîne la fermeture automatique de tous les fichiers associés aux objets FileStream de l’application. Toutefois, il est préférable d’enregistrer un événement <codeph class="+ topic/ph pr-d/codeph ">closed</codeph> pour tous les objets FileStream ouverts de façon asynchrone et qui ont des données en attente d’écriture avant de fermer l’application (afin de s’assurer que ces données soient écrites).</p>
	 
	 <p class="- topic/p ">Vous pouvez réutiliser l’objet FileStream en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>. Tous les fichiers associés à l’objet FileStream sont ainsi fermés, mais l’objet ne déclenche pas l’événement <codeph class="+ topic/ph pr-d/codeph ">close</codeph>.</p>
	 
	 <p class="- topic/p ">Dans le cas d’un objet FileStream ouvert de façon asynchrone (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>), même si vous appelez l’événement <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> pour un objet FileStream et supprimez les propriétés et les variables qui référence l’objet, l’objet FileStream n’est pas nettoyé tant que des opérations sont en cours et que des gestionnaires d’événement sont enregistrés. En particulier, un objet FileStream non référencé autrement persiste tant que l’un des scénarios suivants est encore possible : </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Pour les opérations de lecture de fichiers, la fin du fichier n’a pas été atteinte (et l’événement <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> n’a pas été déclenché). </li><li class="- topic/li ">Des données de sortie sont toujours disponibles pour l’écriture et des événements liés à la sortie (par exemple <codeph class="+ topic/ph pr-d/codeph ">outputProgress</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph>) ont des écouteurs d’événement enregistrés. </li></ul>
	 
	 </apiDesc><example conref="examples\FileStream.close.1.as" class="- topic/example ">     Le code suivant ouvre un objet FileStream <i class="+ topic/ph hi-d/i ">de façon asynchrone</i> et écrit un fichier texte nommé test.txt dans le sous-répertoire Apollo Test du répertoire documents de l’utilisateur. Un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> de l’objet FileStream ferme le fichier lorsque les données sont écrites. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.WRITE);
fileStream.writeUTFBytes("Hello");
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();

function fileClosed(event:Event):void {
    trace("closed");
}            
</codeblock></example><example conref="examples\FileStream.close.2.as" class="- topic/example ">     Le code suivant ouvre un objet FileStream <i class="+ topic/ph hi-d/i ">de façon asynchrone</i> et écrit un fichier texte nommé test.txt dans le sous-répertoire Apollo Test du répertoire documents de l’utilisateur. Un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> de l’objet FileStream ferme le fichier lorsque les données sont écrites.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF("Hello");
fileStream.close();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.filesystem.xml#FileStream/event:close" class="- topic/link "><linktext class="- topic/linktext ">événement close</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ouvert de façon asynchrone est fermé.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ouvert de façon asynchrone est fermé.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Ouvre l’objet FileStream de façon asynchrone, en pointant vers le fichier spécifié par le paramètre file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier se trouve dans le répertoire de l’application et le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> est défini sur le mode « append », « update » ou « write ». 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">file</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet File désignant le fichier à ouvrir.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne provenant de la classe FileMode qui définit les capacités de l’objet FileStream, par exemple la capacité à lire ou écrire dans le fichier.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ouvre l’objet FileStream de façon asynchrone, en pointant vers le fichier spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">file</codeph>. 
	 
	 <p class="- topic/p ">Si l’objet FileStream est déjà ouvert, un appel à la méthode ferme le fichier avant l’ouverture et aucun autre événement (y compris <codeph class="+ topic/ph pr-d/codeph ">close</codeph>) n’est délivré pour le fichier précédemment ouvert.</p>
	 
	 <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> ou sur <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>, AIR lit les données dans la mémoire tampon d’entrée dès l’ouverture du fichier, et des événements <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> et <codeph class="+ topic/ph pr-d/codeph ">open</codeph> sont déclenchés au fur et à mesure de la lecture des données dans la mémoire tampon d’entrée.</p>
	 
	 <p class="- topic/p ">Dans les systèmes qui prennent en charge le verrouillage de fichiers, un fichier ouvert en mode « écriture » ou en mode « mise à jour » (<codeph class="+ topic/ph pr-d/codeph ">FileMode.WRITE</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>) n’est plus lisible jusqu’à sa fermeture.</p>
	 
	 <p class="- topic/p ">Une fois que vous avez terminé de réaliser des opérations sur le fichier, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> de l’objet FileStream. Certains systèmes d’exploitation limitent le nombre de fichiers ouverts simultanément. </p>
	 
`	 </apiDesc><example conref="examples\FileStream.openAsync.1.as" class="- topic/example "> Le code suivant illustre l’ouverture asynchrone du fichier test.txt situé dans le sous-répertoire Apollo Test du répertoire documents de l’utilisateur, puis la lecture du fichier dans une chaîne, le jeu de caractères du système étant utilisé comme codage de texte.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.addEventListener(Event.COMPLETE, fileCompleteHandler)
fileStream.openAsync(file, FileMode.READ);

function fileCompleteHandler(event:Event):void {
    var str:String = fileStream.readMultiByte(fileStream.bytesAvailable, File.systemCharset);
    trace(str);
    fileStream.close();
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.filesystem.xml#FileStream/event:complete" class="- topic/link "><linktext class="- topic/linktext ">événement complete</linktext></link><link href="flash.filesystem.xml#FileStream/event:ioError" class="- topic/link "><linktext class="- topic/linktext ">événement ioError</linktext></link><link href="flash.filesystem.xml#FileStream/event:progress" class="- topic/link "><linktext class="- topic/linktext ">événement progress</linktext></link><link href="flash.filesystem.xml#FileMode" class="- topic/link "><linktext class="- topic/linktext ">FileMode</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:openAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’existe pas ; vous ne disposez pas des autorisations appropriées pour l’ouvrir ; vous ouvrez un fichier pour un accès en lecture et vous ne disposez pas d’autorisations de lecture ; ou vous ouvrez un fichier pour un accès en écriture et vous ne disposez pas d’autorisations d’écriture. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier n’existe pas ; vous ne disposez pas des autorisations appropriées pour l’ouvrir ; vous ouvrez un fichier pour un accès en lecture et vous ne disposez pas d’autorisations de lecture ; ou vous ouvrez un fichier pour un accès en écriture et vous ne disposez pas d’autorisations d’écriture.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_progress" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">progress</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque les données sont lues dans la mémoire tampon d’entrée (le fichier doit être ouvert avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> ou sur <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>).
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque les données sont lues dans la mémoire tampon d’entrée.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les données du fichier ont été lues dans la mémoire tampon d’entrée (le fichier doit être ouvert avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">FileMode.READ</codeph> ou sur <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>).
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Les données du fichier ont été lues dans la mémoire tampon d’entrée.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
	 Ouvre l’objet FileStream de façon synchrone, en pointant vers le fichier spécifié par le paramètre file.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’existe pas ; vous ne disposez pas des autorisations appropriées pour l’ouvrir ; vous ouvrez un fichier pour un accès en lecture et vous ne disposez pas d’autorisations de lecture ; ou vous ouvrez un fichier pour un accès en écriture et vous ne disposez pas d’autorisations d’écriture. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier se trouve dans le répertoire de l’application et le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> est défini sur le mode « append », « update » ou « write ». 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">file</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet File désignant le fichier à ouvrir.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne provenant de la classe FileMode qui définit les capacités de l’objet FileStream, par exemple la capacité à lire ou écrire dans le fichier.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ouvre l’objet FileStream de façon synchrone, en pointant vers le fichier spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">file</codeph>. 
	 
	 <p class="- topic/p ">Si l’objet FileStream est déjà ouvert, un appel à la méthode ferme le fichier avant l’ouverture et aucun autre événement (y compris <codeph class="+ topic/ph pr-d/codeph ">close</codeph>) n’est délivré pour le fichier précédemment ouvert.</p>
	 
	 <p class="- topic/p ">Dans les systèmes qui prennent en charge le verrouillage de fichiers, un fichier ouvert en mode « écriture » ou en mode « mise à jour » (<codeph class="+ topic/ph pr-d/codeph ">FileMode.WRITE</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">FileMode.UPDATE</codeph>) n’est plus lisible jusqu’à sa fermeture.</p>
	 
	 <p class="- topic/p ">Une fois que vous avez terminé de réaliser des opérations sur le fichier, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> de l’objet FileStream. Certains systèmes d’exploitation limitent le nombre de fichiers ouverts simultanément. </p>
	 
	 </apiDesc><example conref="examples\FileStream.open.1.as" class="- topic/example "> Le code suivant illustre l’ouverture synchrone du fichier test.txt situé dans le sous-répertoire Apollo Test du répertoire documents de l’utilisateur, puis la lecture du fichier dans une chaîne, le jeu de caractères du système étant utilisé comme codage de texte.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);
fileStream.close();
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.filesystem.xml#File" class="- topic/link "><linktext class="- topic/linktext ">Fichier</linktext></link><link href="flash.filesystem.xml#FileMode" class="- topic/link "><linktext class="- topic/linktext ">FileMode</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:readBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBoolean</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit une valeur booléenne dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur booléenne, <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’octet correspond à une valeur non nulle, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit une valeur booléenne dans le flux de fichiers, le flux d’octets ou le tableau d’octets. Un seul octet est lu, et la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> est renvoyée s’il n’est pas nul, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBoolean_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un octet signé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée est comprise entre -128 et 127.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un octet signé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit le nombre d’octets de données spécifié par le paramètre length dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet <codeph class="+ topic/ph pr-d/codeph ">ByteArray</codeph> contenant les données à lire.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Décalage dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph> où la lecture des données doit commencer.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre d’octets à lire. La valeur 0 (par défaut) provoque la lecture de toutes les données disponibles.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit le nombre d’octets de données spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">length</codeph> dans le flux de fichiers, le flux d’octets ou le tableau d’octets. Les octets sont lus dans l’objet ByteArray spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>, à partir de la position indiquée par <codeph class="+ topic/ph pr-d/codeph ">offset</codeph>.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readDouble</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un nombre à virgule flottante à deux décimales, conforme à IEEE 754, extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à virgule flottante à deux décimales et conforme au standard IEEE 754.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un nombre à virgule flottante à deux décimales, conforme à IEEE 754, extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readDouble_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readFloat</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un nombre à virgule flottante à une décimale, conforme à IEEE 754, extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à virgule flottante à une décimale et conforme au standard IEEE 754.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un nombre à virgule flottante à une décimale, conforme à IEEE 754, extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readFloat_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un entier signé de 32 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée est comprise entre -2147483648 et 2147483647.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un entier signé de 32 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readMultiByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit une chaîne multi-octets de longueur spécifiée dans le flux de fichiers, le flux d’octets ou le tableau d’octets en utilisant le jeu de caractères spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne au format UTF-8.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre d’octets à lire dans le flux d’octets.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne désignant le le jeu de caractères à utiliser pour interpréter les octets. Parmi les chaînes de jeu de caractères possibles figurent <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, etc. Pour obtenir la liste complète, voir la section <xref href="../../charset-codes.html" class="- topic/xref ">Jeux de caractères pris en charge</xref>. 
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> si la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> n’est pas reconnue par le système actuel, <ph class="- topic/ph ">Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player ou </ph>Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup> utilise la page de code par défaut du système comme jeu de caractères. Par exemple, une valeur pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph>, comme dans <codeph class="+ topic/ph pr-d/codeph ">myTest.readMultiByte(22, "iso-8859-01")</codeph>, qui utilise <codeph class="+ topic/ph pr-d/codeph ">01</codeph> au lieu de <codeph class="+ topic/ph pr-d/codeph ">1</codeph> pourra éventuellement fonctionner sur votre système de développement, mais pas sur un autre système. Sur l’autre système, <ph class="- topic/ph ">Flash Player ou</ph> le moteur d’exécution d’AIR utilise la page de code par défaut du système.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit une chaîne multi-octets de longueur spécifiée dans le flux de fichiers, le flux d’octets ou le tableau d’octets en utilisant le jeu de caractères spécifié.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/systemCharset" class="- topic/link "><linktext class="- topic/linktext ">File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readMultiByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readObject</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un objet codé au format AMF sérialisé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet désérialisé
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un objet codé au format AMF sérialisé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readObject_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un entier signé de 16 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée est comprise entre -32768 et 32767.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un entier signé de 16 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit une séquence d’octets UTF-8 dans le flux ou le tableau d’octets et renvoie une chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne UTF-8 de longueur spécifiée, générée par la représentation des caractères sous forme d’octets.     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre d’octets à lire.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit une séquence d’octets UTF-8 dans le flux ou le tableau d’octets et renvoie une chaîne.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTFBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUTF</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit une chaîne UTF-8 dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne UTF-8 générée par la représentation des caractères sous forme d’octets.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit une chaîne UTF-8 dans le flux de fichiers, le flux d’octets ou le tableau d’octets. La chaîne doit être précédée d’un caractère non signé indiquant la longueur en octets.
     
     <p class="- topic/p ">Cette méthode est similaire à la méthode <codeph class="+ topic/ph pr-d/codeph ">readUTF()</codeph> de l’interface IDataInput Java<sup class="+ topic/ph hi-d/sup ">®</sup>.</p>
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTF_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un octet non signé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée est comprise entre 0 et 255.        
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un octet non signé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un entier non signé de 32 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée est comprise entre 0 et 4294967295.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un entier non signé de 32 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">readUnsignedShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Lit un entier non signé de 16 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités de lecture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être lu (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position spécifiée pour la lecture des données excède le nombre d’octets disponibles (défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">EOFError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée est comprise entre 0 et 65535. 
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Lit un entier non signé de 16 bits extrait du flux de fichiers, du flux d’octets ou du tableau d’octets.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier ne peut pas être lu ou n’est pas ouvert. Cet événement n’est distribué que pour les fichiers ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier ne peut pas être lu ou n’est pas ouvert.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:truncate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">truncate</apiName><shortdesc class="- topic/shortdesc ">
	 Tronque le fichier placé à la position spécifiée par la propriété position de l’objet FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’est pas ouvert pour l’écriture.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Tronque le fichier placé à la position spécifiée par la propriété <codeph class="+ topic/ph pr-d/codeph ">position</codeph> de l’objet FileStream. 
	 
	 <p class="- topic/p ">Les octets situés entre la position spécifiée par la propriété <codeph class="+ topic/ph pr-d/codeph ">position</codeph> et la fin du fichier sont supprimés. Le fichier doit être ouvert pour l’écriture.</p>
	 
	 </apiDesc><example conref="examples\FileStream.truncate.1.as" class="- topic/example "> Le code suivant ouvre de façon synchrone le fichier test.txt situé dans le sous-répertoire Apollo Test du répertoire documents de l’utilisateur, puis réduit le fichier à une longueur de 100 caractères lorsqu’il est plus long.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.UPDATE);
if (file.size > 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.close();
</codeblock></example><example conref="examples\FileStream.truncate.2.as" class="- topic/example "> Le code suivant ouvre <i class="+ topic/ph hi-d/i ">de façon asynchrone</i> le fichier test.txt situé dans le sous-répertoire Apollo Test du répertoire documents de l’utilisateur, puis réduit le fichier à une longueur de 100 caractères lorsqu’il est plus long.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.UPDATE);
trace("start", file.size)
if (file.size > 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();
function fileClosed(event:Event):void {
    trace("closed", file.size); 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/position" class="- topic/link "><linktext class="- topic/linktext ">position</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBoolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBoolean</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit une valeur booléenne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur booléenne qui détermine l’octet écrit. Si le paramètre a pour valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, 1 est écrit ; s’il a pour valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, 0 est écrit.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit une valeur booléenne. Un seul octet est écrit, conformément au paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph>, soit 1 si <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ou 0 si <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBoolean_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un octet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur d’octet exprimée comme un entier.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un octet. Les 8 bits inférieurs du paramètre sont utilisés. Les 24 bits supérieurs ne sont pas pris en compte.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit une séquence d’octets à partir du tableau d’octets ou des octets spécifiés, en partant de l’octet spécifié par l’offset (à l’aide d’un index de base zéro) dont la longueur est indiquée par le paramètre length dans le flux de fichiers ou d’octets, ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">bytes</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’octets à écrire.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">offset</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Index de base zéro qui indique où débuter l’écriture dans le tableau.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier non signé qui indique l’emplacement du début d’écriture dans la mémoire tampon.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit une séquence d’octets à partir du tableau d’octets ou des <codeph class="+ topic/ph pr-d/codeph ">octets</codeph> spécifiés, en partant de l’octet spécifié par l’<codeph class="+ topic/ph pr-d/codeph ">offset</codeph> (à l’aide d’un index de base zéro) dont la longueur est indiquée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">length</codeph> dans le flux de fichiers ou d’octets, ou le tableau d’octets.
     
     <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est omis, la longueur par défaut est utilisée (à savoir 0) et tout le contenu de la mémoire tampon à partir de <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> est écrit. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> est également omis, toute la mémoire tampon est écrite. </p>
     
     <p class="- topic/p ">Si les paramètres <codeph class="+ topic/ph pr-d/codeph ">offset</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">length</codeph> ne sont pas compris dans la plage supportée, ils sont réglés sur le début et la fin du tableau d’octets (<codeph class="+ topic/ph pr-d/codeph ">bytes</codeph>).</p>
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeDouble" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeDouble</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un nombre à virgule flottante à deux décimales (64 bits) et conforme à IEEE 754.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à virgule flottante à deux décimales (64 bits).
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un nombre à virgule flottante à deux décimales (64 bits) et conforme à IEEE 754.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeDouble_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeFloat</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un nombre à virgule flottante à une décimale (32 bits) et conforme à IEEE 754.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à virgule flottante à une décimale (32 bits).
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un nombre à virgule flottante à une décimale (32 bits) et conforme à IEEE 754.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeFloat_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un entier signé de 32 bits.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur d’octet exprimée comme un entier signé.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un entier signé de 32 bits.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeMultiByte" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeMultiByte</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit une chaîne multi-octets dans le flux de fichiers, le flux d’octets ou le tableau d’octets en utilisant le jeu de caractères spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de la chaîne à écrire.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charSet</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne indiquant le jeu de caractères à utiliser. Parmi les chaînes de jeu de caractères possibles figurent <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, etc. Pour obtenir la liste complète, voir la section <xref href="../../charset-codes.html" class="- topic/xref ">Jeux de caractères pris en charge</xref>. 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit une chaîne multi-octets dans le flux de fichiers, le flux d’octets ou le tableau d’octets en utilisant le jeu de caractères spécifié. 
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/systemCharset" class="- topic/link "><linktext class="- topic/linktext ">File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeMultiByte_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeObject" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeObject</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un objet codé au format AMF sérialisé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">object</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à sérialiser.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un objet codé au format AMF sérialisé dans le flux de fichiers, le flux d’octets ou le tableau d’octets.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="../../flash/net/package.html#registerClassAlias()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeObject_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeShort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeShort</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un entier de 16 bits.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur d’octet exprimée comme un entier.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un entier de 16 bits. Les 16 bits inférieurs du paramètre sont utilisés. Les 16 bits supérieurs ne sont pas pris en compte.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeShort_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTFBytes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTFBytes</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit une chaîne UTF-8.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de la chaîne à écrire.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit une chaîne UTF-8. Comme <codeph class="+ topic/ph pr-d/codeph ">writeUTF()</codeph>, mais n’insère pas dans la chaîne un préfixe correspondant à un mot de 16 bits.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTFBytes_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTF" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUTF</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit une chaîne UTF-8 dans le flux de fichiers, le flux d’octets ou le tableau d’octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la longueur de la chaîne est supérieure à 65535.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de la chaîne à écrire.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit une chaîne UTF-8 dans le flux de fichiers, le flux d’octets ou le tableau d’octets. La longueur de la chaîne UTF-8 exprimée en octets est d’abord écrite sous forme d’entier de 16 bits, suivi des octets représentant les caractères de la chaîne.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTF_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUnsignedInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">writeUnsignedInt</apiName><shortdesc class="- topic/shortdesc ">
	
     Ecrit un entier non signé de 32 bits.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’a pas été ouvert ; le fichier a été ouvert mais pas avec des capacités d’écriture ; ou, dans le cas d’un fichier ouvert pour des opérations synchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>), le fichier ne peut pas être écrit (par exemple, parce qu’il est absent).
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur d’octet exprimée comme un entier non signé.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ecrit un entier non signé de 32 bits.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUnsignedInt_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent). Cet événement n’est distribué que pour les fichiers qui ont été ouverts pour des opérations asynchrones (avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>).
	
	</apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne pouvez pas écrire dans le fichier (par exemple parce qu’il est absent).</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.filesystem:FileStream:bytesAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">bytesAvailable</apiName><shortdesc class="- topic/shortdesc ">
	
     Renvoie le nombre d’octets de données disponibles pour la lecture dans le tampon de saisie.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Renvoie le nombre d’octets de données disponibles pour la lecture dans le tampon de saisie. Le code utilisateur doit appeler <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> pour garantir que les données disponibles sont suffisantes avant leur lecture à l’aide de l’une des méthodes read.
     </apiDesc><example conref="examples\FileStream.bytesAvailable.1.as" class="- topic/example "/></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:endian:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">endian</apiName><shortdesc class="- topic/shortdesc ">
	
     Ordre d’octet des données, à savoir la constante BIG_ENDIAN ou LITTLE_ENDIAN de la classe Endian.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
     Ordre d’octet des données, à savoir la constante <codeph class="+ topic/ph pr-d/codeph ">BIG_ENDIAN</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">LITTLE_ENDIAN</codeph> de la classe Endian.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:objectEncoding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">objectEncoding</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie si le format AMF3 ou AMF0 est utilisé lors de l’écriture ou de la lecture de données binaires avec la méthode readObject() ou writeObject().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie si le format AMF3 ou AMF0 est utilisé lors de l’écriture ou de la lecture de données binaires avec la méthode <codeph class="+ topic/ph pr-d/codeph ">readObject()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">writeObject()</codeph>.
	 
	 <p class="- topic/p ">La valeur est une constante extraite de la classe ObjectEncoding. Par défaut, le format AMF3 est utilisé.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.net.xml#ObjectEncoding" class="- topic/link "><linktext class="- topic/linktext ">ObjectEncoding</linktext></link><link href="flash.filesystem.xml#FileStream/readObject()" class="- topic/link "><linktext class="- topic/linktext ">readObject()</linktext></link><link href="flash.filesystem.xml#FileStream/writeObject()" class="- topic/link "><linktext class="- topic/linktext ">writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:FileStream:position:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">position</apiName><shortdesc class="- topic/shortdesc ">
	 Position actuelle dans le fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Position actuelle dans le fichier. 
	 
	 <p class="- topic/p ">Cette valeur est modifiée dans l’un des cas suivants :</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Lorsque vous définissez la propriété explicitement</li><li class="- topic/li ">Lors d’une lecture de l’objet FileStream (avec l’une les méthodes de lecture)</li><li class="- topic/li ">Lors d’une écriture dans l’objet FileStream</li></ul>
	 
	 <p class="- topic/p ">La position est définie sous forme numérique (à la place d’uint) pour que les fichiers dont la longueur est supérieure à 2<sup class="+ topic/ph hi-d/sup ">32</sup> octets puissent être pris en charge. La valeur de cette propriété est toujours un nombre entier inférieur à 2<sup class="+ topic/ph hi-d/sup ">53</sup>. Si vous définissez cette valeur sur un nombre décimal, la valeur est arrondie au nombre entier le plus proche.</p>
	 
	 <p class="- topic/p ">Lorsqu’un fichier est lu de façon asynchrone, si vous définissez la propriété <codeph class="+ topic/ph pr-d/codeph ">position</codeph>, l’application commence à remplir la mémoire tampon de lecture par les données en commençant à la position spécifiée, et la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> peut être définie sur 0. Attendez un événement <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> avant d’utiliser une méthode de lecture pour lire des données ; ou attendez un événement <codeph class="+ topic/ph pr-d/codeph ">progress</codeph> et vérifiez la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph> avant d’utiliser une méthode de lecture.</p>
	  
	 </apiDesc><example conref="examples\FileStream.position.1.as" class="- topic/example "> Le code suivant illustre la mise à jour de la propriété <codeph class="+ topic/ph pr-d/codeph ">position</codeph> de l’objet FileStream lorsque l’application lit des données dans un fichier.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.fileSystem.*;
import flash.utils.ByteArray;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory.resolvePath("Apollo Test/test.txt");
var stream:FileStream = new FileStream();
stream.addEventListener(Event.COMPLETE, readBytes);
stream.openAsync(sourceFile, FileMode.READ);

function readBytes(e:Event):void {
    var bytes:ByteArray = new ByteArray();
    trace("position 0:", stream.position); // 0
    bytes[0] = stream.readByte();
    trace("position 1:", stream.position); // 1
    fileStream.readBytes(bytes, stream.position, 4); 
    trace("position 2:", stream.position); // 5
    stream.close();
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:readAhead:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">readAhead</apiName><shortdesc class="- topic/shortdesc ">
	 Quantité minimale de données à lire à partir du disque lors de la lecture asynchrone des fichiers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>Should the readAhead value dwindle to 0 as the data is read in.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Quantité minimale de données à lire à partir du disque lors de la lecture asynchrone des fichiers.
	 
	 <p class="- topic/p ">Cette propriété spécifie la quantité de données qu’un flux asynchrone tentera de lire à partir de la position actuelle. Les données sont lues en blocs en fonction de la taille de page du système de fichiers. Ainsi, si vous définissez <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> sur 9 000 sur un système informatique dont la taille de page est de 8 Ko (8 192 octets), le moteur d’exécution lit 2 blocs ou 16 384 octets à la fois. La valeur par défaut de cette propriété est infinity : par défaut, un fichier ouvert pour une lecture asynchrone est lu jusqu’à la fin du fichier.</p>
	 
	 <p class="- topic/p ">La lecture de données dans la mémoire tampon de lecture ne change pas la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph>. Lorsque des données sont lues dans la mémoire tampon, de nouvelles données sont lues pour remplir la mémoire tampon de lecture. 
	  </p>
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> n’a aucune incidence sur un fichier ouvert de façon synchrone.</p>
	 
	 <p class="- topic/p ">Lorsque des données sont lues de façon asynchrone, l’objet FileStream déclenche des événements <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>. Dans la méthode du gestionnaire de l’événement <codeph class="+ topic/ph pr-d/codeph ">progress</codeph>, vérifiez que le nombre requis d’octets est disponible (en vérifiant la propriété <codeph class="+ topic/ph pr-d/codeph ">bytesAvailable</codeph>), puis lisez les données dans la mémoire tampon de lecture à l’aide d’une méthode de lecture.</p>
	 
	 </apiDesc><example conref="examples\FileStream.readAhead.1.as" class="- topic/example ">     Le code suivant illustre l’utilisation de la propriété <codeph class="+ topic/ph pr-d/codeph ">readAhead</codeph> pour limiter la quantité de données lues dans un fichier à 100 octets :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.desktopDirectory.resolvePath("test.txt");
var fileStream:FileStream = new FileStream();
fileStream.readAhead = 100;
fileStream.addEventListener(ProgressEvent.PROGRESS, readProgressHandler)
fileStream.openAsync(file, FileMode.READ);
var results:ByteArray;

function readProgressHandler(event:ProgressEvent):void {
    if (fileStream.bytesAvailable >= 100) {
        fileStream.readBytes(results, 0, 100);
    }
}
</codeblock><swfblock conref="examples\FileStream.readAhead.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:FileMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">FileMode</apiName><shortdesc class="- topic/shortdesc ">
 La classe FileMode définit les constantes de chaîne utilisées dans le paramètre fileMode des méthodes open() et openAsync() de la classe FileStream.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe FileMode définit les constantes de chaîne utilisées dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> des méthodes <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> de la classe FileStream. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> de ces méthodes déterminent les capacités disponibles pour l’objet FileStream après l’ouverture du fichier. 
 
 <p class="- topic/p ">Les capacités suivantes sont disponibles, dans différentes combinaisons, selon la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> spécifiée dans la méthode d’ouverture :</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Lecture—L’objet FileStream peut lire des données dans le fichier.</li><li class="- topic/li ">Ecriture—L’objet FileStream peut écrire des données dans le fichier.</li><li class="- topic/li ">Création—L’objet FileStream crée un fichier non existant, à l’ouverture.</li><li class="- topic/li ">Troncature à l’ouverture—Les données du fichier sont supprimées à l’ouverture (avant que d’autres ne soient écrites).</li><li class="- topic/li ">Ajout de données—Les données sont toujours écrites à la fin du fichier (lorsqu’une méthode d’écriture est appelée).</li></ul>
 
 <p class="- topic/p ">Le tableau suivant montre les capacités fournies par chaque constante de la classe FileMode lorsqu’elles sont appliquées sous forme de paramètre <codeph class="+ topic/ph pr-d/codeph ">fileMode</codeph> d’une méthode d’ouverture d’un objet FileStream :</p>
 
 <adobetable class="innertable"><tgroup cols="6" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Constante FileMode</entry><entry align="center" class="- topic/entry ">Lecture</entry><entry align="center" class="- topic/entry ">Ecriture</entry><entry align="center" class="- topic/entry ">Création</entry><entry align="center" class="- topic/entry ">Troncature à l’ouverture</entry><entry align="center" class="- topic/entry ">Ajout de données</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">READ</codeph></entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry><entry class="- topic/entry "> </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">WRITE</codeph></entry><entry class="- topic/entry "> </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "> </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">APPEND</codeph></entry><entry class="- topic/entry "> </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry class="- topic/entry "/><entry align="center" class="- topic/entry "> • </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph></entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "> • </entry><entry align="center" class="- topic/entry "/><entry class="- topic/entry "> </entry></row></tbody></tgroup></adobetable>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/open()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.openAsync()</linktext></link></related-links><apiValue id="flash.filesystem:FileMode:APPEND" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">APPEND</apiName><shortdesc class="- topic/shortdesc "> 
	Utilisé pour ouvrir un fichier en mode écriture, toutes les données écrites étant ajoutées à la fin du fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">append</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Utilisé pour ouvrir un fichier en mode écriture, toutes les données écrites étant ajoutées à la fin du fichier. A l’ouverture, tout fichier qui n’existe pas est créé. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc "> 
	Utilisé pour ouvrir un fichier en mode lecture seule.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Utilisé pour ouvrir un fichier en mode lecture seule. Le fichier doit exister (les fichiers absents ne sont pas créés).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc "> 
	Utilisé pour ouvrir un fichier en mode lecture/écriture.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Utilisé pour ouvrir un fichier en mode lecture/écriture. A l’ouverture, tout fichier qui n’existe pas est créé. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:WRITE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">WRITE</apiName><shortdesc class="- topic/shortdesc "> 
	Utilisé pour ouvrir un fichier en mode écriture seule.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">write</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Utilisé pour ouvrir un fichier en mode écriture seule. A l’ouverture, tout fichier qui n’existe pas est créé et les fichiers existants sont tronqués (leurs données sont supprimées).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:StorageVolumeInfo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolumeInfo</apiName><shortdesc class="- topic/shortdesc ">
	L’objet StorageVolumeInfo distribue un objet StorageVolumeChangeEvent lors du montage ou du démontage d’un volume de stockage.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	L’objet StorageVolumeInfo distribue un objet StorageVolumeChangeEvent lors du montage ou du démontage d’un volume de stockage. La propriété statique <codeph class="+ topic/ph pr-d/codeph ">StorageVolume.storageVolume</codeph> fait référence à l’objet singleton StorageVolumeInfo, qui distribue les événements. La classe StorageVolumeInfo définit également une méthode <codeph class="+ topic/ph pr-d/codeph ">getStorageVolumes</codeph> pour répertorier les volumes de stockage actuellement montés.
	
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Prise en charge du profil AIR :</i> cette fonctionnalité est prise en charge sur tous les systèmes d’exploitation de bureau, mais ne l’est pas sur tous les périphériques AIR pour TV. Elle n’est en outre pas prise en charge sur les périphériques mobiles. Vous pouvez tester la prise en charge lors de l’exécution à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.isSupported</codeph>. Voir <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Prise en charge du profil AIR</xref> pour plus d’informations sur la prise en charge de l’API dans plusieurs profils.</p>
	 
	<p class="- topic/p ">Sur les distributions Linux modernes, l’objet StorageVolumeInfo distribue uniquement les événements <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> et <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> pour les périphériques physiques et les lecteurs réseau montés à des emplacements spécifiques.</p>
	
	</apiDesc><example conref="examples\StorageVolume.as" class="- topic/example "/><example conref="examples\StorageVolumeChangeEvent.as" class="- topic/example "/></apiClassifierDetail><adobeApiEvent id="flash.filesystem:StorageVolumeInfo_flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT_storageVolumeUnmount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeUnmount</apiName><shortdesc class="- topic/shortdesc ">
	 Distribué lorsqu’un volume de stockage a été démonté.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StorageVolumeChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Distribué lorsqu’un volume de stockage a été démonté.
	 
	 <p class="- topic/p ">Sur les distributions Linux modernes, l’objet StorageVolumeInfo distribue uniquement les événements <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> et <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> pour les périphériques physiques et les lecteurs réseau montés à des emplacements spécifiques.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:StorageVolumeInfo_flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT_storageVolumeMount" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeMount</apiName><shortdesc class="- topic/shortdesc ">
	 Distribué lorsqu’un volume de stockage a été monté.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.StorageVolumeChangeEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Distribué lorsqu’un volume de stockage a été monté.
	 
	 <p class="- topic/p ">Sur les distributions Linux modernes, l’objet StorageVolumeInfo distribue uniquement les événements <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> et <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> pour les périphériques physiques et les lecteurs réseau montés à des emplacements spécifiques.</p>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.filesystem:StorageVolumeInfo:getStorageVolumes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getStorageVolumes</apiName><shortdesc class="- topic/shortdesc ">
		Renvoie le vecteur des objets StorageVolume correspondant aux volumes de stockage actuellement montés.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="Vector$flash.filesystem:StorageVolume" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Renvoie le vecteur des objets StorageVolume correspondant aux volumes de stockage actuellement montés.
		
		<p class="- topic/p ">Sur les distributions Linux modernes, cette méthode renvoie les objets correspondant aux périphériques physiques et aux lecteurs réseau montés à des emplacements spécifiques.</p>
		
		</apiDesc><example conref="examples\StorageVolume.rootDirectory.1.as" class="- topic/example "> Le code suivant indique le chemin d’accès natif correspondant au répertoire racine de chaque volume de stockage monté :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath);
}
</codeblock><swfblock conref="examples\StorageVolume.rootDirectory.1.swf" xml:space="preserve"/></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolume</linktext></link></related-links></apiOperation><apiValue id="flash.filesystem:StorageVolumeInfo:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        La propriété isSupported est définie sur true si la classe StorageVolumeInfo est disponible sur la plate-forme actuelle ; dans le cas contraire, elle est définie sur false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        La propriété <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la classe StorageVolumeInfo est disponible sur la plate-forme actuelle ; dans le cas contraire, elle est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolumeInfo:storageVolumeInfo:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">storageVolumeInfo</apiName><shortdesc class="- topic/shortdesc ">
		Occurrence singleton de l’objet StorageVolumeInfo.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:StorageVolumeInfo</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Occurrence singleton de l’objet StorageVolumeInfo. Enregistrez les écouteurs d’événement dans cet objet pour les événements <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> et <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph>.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:File" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">File</apiName><shortdesc class="- topic/shortdesc ">
 Un objet File représente un chemin vers un fichier ou un répertoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.net:FileReference</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Un objet File représente un chemin vers un fichier ou un répertoire. Il peut s’agir d’un fichier ou d’un répertoire existant ou qui n’existe pas encore ; par exemple, il peut représenter le chemin vers un fichier ou un répertoire que vous envisagez de créer. 
 
  <p class="- topic/p ">La classe File possède un certain nombre de propriétés et de méthodes qui lui permettent d’obtenir des informations sur le système de fichiers et d’exécuter des opérations, par exemple la copie de fichiers et de répertoires.</p>
  
  <p class="- topic/p ">Vous pouvez utiliser des objets File avec la classe FileStream pour lire et écrire des fichiers. </p>
  
  <p class="- topic/p ">La classe File étend la classe FileReference. La classe FileReference, disponible dans Flash<sup class="+ topic/ph hi-d/sup ">®</sup> Player et dans Adobe<sup class="+ topic/ph hi-d/sup ">®</sup> AIR<sup class="+ topic/ph hi-d/sup ">®</sup>, représente un pointeur vers un fichier, mais la classe File ajoute des propriétés et des méthodes qui ne sont pas exposées dans Flash Player (dans un fichier SWF s’exécutant dans un navigateur) pour des raisons de sécurité.</p>
  
  <p class="- topic/p ">La classe File contient des propriétés statiques qui vous permettent de référencer les emplacements de répertoire les plus fréquemment utilisés. Voici quelques unes de ces propriétés statiques :</p>
  
  <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph> : un répertoire de stockage spécifique à chaque application AIR installée</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph> : le répertoire en lecture seule dans lequel est installée l’application (et qui contient tout autre actif installé)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> : le répertoire Bureau de l’utilisateur</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph> : le répertoire documents de l’utilisateur</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph> : le répertoire de l’utilisateur</li></ul>
  
  <p class="- topic/p ">Ces propriétés ont des valeurs différentes selon le système d’exploitation. Par exemple, les chemins natifs vers le répertoire Bureau de l’utilisateur sont différents sous Mac OS, Linux et Windows. Néanmoins, la propriété <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> pointe vers le chemin du répertoire Bureau correct sur chacune de ces plateformes. Pour développer des applications qui fonctionnent correctement sur toutes les plateformes, utilisez ces propriétés comme base pour référencer d’autres fichiers dont se sert l’application. Utilisez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> pour affiner le chemin. Par exemple, le code suivant pointe vers le fichier preferences.xml dans le répertoire de stockage de l’application :</p>
  
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var prefsFile:File = File.applicationStorageDirectory;
  prefsFile = prefsFile.resolvePath("preferences.xml");</codeblock>
  
  
  
  <p class="- topic/p ">Si vous utilisez un chemin natif littéral lors du référencement d’un fichier, il ne fonctionnera que sur une seule plateforme. Par exemple, l’objet File suivant ne fonctionnerait que sous Windows :</p> 
  
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">new File("C:\Documents and Settings\joe\My Documents\test.txt")</codeblock>
  
  
  <p class="- topic/p ">Le répertoire de stockage de l’application est particulièrement utile. Il fournit un répertoire de stockage spécifique à l’application pour l’application AIR. Il est défini par la propriété <codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>.</p>
  
  <p class="- topic/p ">N’ajoutez ni ne supprimez aucun contenu du répertoire de l’application (dans lequel est installée l’application AIR). Vous risquez en effet de rendre l’application AIR inutilisable et d’invalider la signature de l’application. Par défaut, AIR ne permet pas d’écrire dans le répertoire de l’application ; en effet, tous les comptes utilisateur ne sont pas habilités à écrire dans ce répertoire sur tous les systèmes d’exploitation. Utilisez le répertoire de stockage de l’application pour écrire des fichiers internes. Utilisez le répertoire documents pour écrire des fichiers que l’utilisateur pourra utiliser hors de l’application, notamment des images éditées ou des fichiers texte.</p>
  
  
  </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream" class="- topic/link "><linktext class="- topic/linktext ">FileStream</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.DIRECTORY_LISTING_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une liste de répertoires est disponible après un appel à la méthode getDirectoryListingAsync().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.FileListEvent.DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une liste de répertoires est disponible après un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph>.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">File.getDirectoryListingAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.SELECT_MULTIPLE_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque l’utilisateur sélectionne des fichiers dans la boîte de dialogue ouverte par un appel à la méthode browseForOpenMultiple().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.FileListEvent.SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque l’utilisateur sélectionne des fichiers dans la boîte de dialogue ouverte par un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph>. 
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForOpenMultiple()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpenMultiple()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.SELECT_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque l’utilisateur sélectionne un fichier ou un répertoire dans une boîte de dialogue de recherche de fichier ou de répertoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque l’utilisateur sélectionne un fichier ou un répertoire dans une boîte de dialogue de recherche de fichier ou de répertoire. 
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">securityError</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération viole une contrainte de sécurité.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération viole une contrainte de sécurité.
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.IOErrorEvent.IO_ERROR_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une erreur se produit au cours d’une opération de fichier asynchrone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une erreur se produit au cours d’une opération de fichier asynchrone.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.COMPLETE_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération asynchrone se termine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération asynchrone se termine.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération asynchrone en attente est annulée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération asynchrone en attente est annulée.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.filesystem:File:File" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">File</apiName><shortdesc class="- topic/shortdesc ">
	Fonction constructeur de la classe File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La syntaxe du paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> n’est pas valide.
	
	</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chemin d’accès au fichier. Vous pouvez spécifier le chemin à l’aide d’une URL ou en utilisant une notation de chemin natif (spécifique à la plateforme). 
	
	<p class="- topic/p ">Si vous spécifiez une URL, vous pouvez utiliser l’un des modèles d’URL suivants : <codeph class="+ topic/ph pr-d/codeph ">file</codeph>, <codeph class="+ topic/ph pr-d/codeph ">app</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph>. Voici quelques valeurs valides pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> avec la notation URL : </p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"app:/DesktopPathTest.xml"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"app-storage:/preferences.xml"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"file:///C:/Documents%20and%20Settings/bob/Desktop"</codeph> (le bureau de l’ordinateur Windows de Bob)</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"file:///Users/bob/Desktop"</codeph> (le bureau de l’ordinateur Mac de Bob)</li></ul>
	
	<p class="- topic/p ">Les modèles d’URL <codeph class="+ topic/ph pr-d/codeph ">app</codeph> et <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> sont utiles, car ils peuvent pointer vers un fichier valide sur tous les systèmes de fichier. Toutefois, dans les deux autres exemples qui utilisent le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">file</codeph> pour pointer vers le répertoire desktop de l’utilisateur, il serait préférable de transmettre l’argument <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">path</codeph> au constructeur <codeph class="+ topic/ph pr-d/codeph ">File()</codeph>, puis d’affecter <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> à l’objet File car cette manière d’accéder au répertoire desktop est indépendante de la plateforme et de l’utilisateur.</p>
	
	<p class="- topic/p ">Si vous spécifiez un chemin natif, sous Windows vous pouvez utiliser la barre oblique inversée ou la barre oblique comme séparateur de chemin dans cet argument ; sous Mac OS et Linux, utilisez la barre oblique. Voici quelques valeurs valides pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> avec la notation de chemin natif :</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"C:/Documents and Settings/bob/Desktop"</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">"/Users/bob/Desktop"</codeph></li></ul>
	
	<p class="- topic/p ">Toutefois, pour les deux exemples, il est préférable de transmettre l’argument <i class="+ topic/ph hi-d/i ">no</i> <codeph class="+ topic/ph pr-d/codeph ">path</codeph> au constructeur <codeph class="+ topic/ph pr-d/codeph ">File()</codeph>, puis d’affecter <codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph> à l’objet File car cette manière d’accéder au répertoire desktop est indépendante de la plateforme et de l’utilisateur.</p>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Fonction constructeur de la classe File. 
	
	<p class="- topic/p ">Si vous transmettez un argument <codeph class="+ topic/ph pr-d/codeph ">path</codeph>, l’objet File pointe vers le chemin spécifié et les propriétés <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> et <codeph class="+ topic/ph pr-d/codeph ">url</codeph> sont définies de manière à refléter ce chemin.</p>
	
	
	<p class="- topic/p ">Bien que vous puissiez transmettre un argument <codeph class="+ topic/ph pr-d/codeph ">path</codeph> pour spécifier un chemin de fichier, cela peut impliquer l’utilisation de code spécifique à une plateforme. Par exemple, un chemin natif tel que <codeph class="+ topic/ph pr-d/codeph ">"C:\\\\Documents and Settings\\bob\\Desktop"</codeph> ou une URL telle que <codeph class="+ topic/ph pr-d/codeph ">"file:///C:/Documents%20and%20Settings/bob/Desktop"</codeph> n’est valable que sous Windows. Il est donc préférable d’utiliser les propriétés statiques suivantes, qui représentent les répertoires les plus fréquemment utilisés et qui sont valables sur toutes les plateformes :</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph></li></ul>
	
	<p class="- topic/p ">Vous pouvez alors utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> pour obtenir un chemin relatif à ces répertoires. Par exemple, le code suivant définit un objet File de sorte qu’il pointe vers le fichier settings.xml du répertoire de stockage de l’application :</p>
	
	<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var file:File = File.applicationStorageDirectory.resolvePath("settings.xml");</codeblock>
	
	
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Important :</b> si vous transmettez une chaîne URL dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph>, l’URL est décodée pour résoudre le chemin du fichier. Par exemple, l’instruction <codeph class="+ topic/ph pr-d/codeph ">new File("file:///c:/test/demo%20file%201%2e0.txt")</codeph> crée un objet File avec le chemin natif "c:\test\demo file 1.0.txt". (Une URL utilise les préfixes file:, app: ou app-storage:.) Toutefois, en cas d’omission des préfixes d’URL corrects, la chaîne du chemin est traitée comme un chemin natif et aucun décodage n’est effectué. Vous devez tenir compte de ce comportement lors de la validation de chemins dérivés de sources potentiellement non approuvées. Si vous vous contentez de valider la chaîne d’entrée, le décodage de l’URL peut permettre à un attaquant d’échapper à vos contrôles de validation. Nous vous conseillons de toujours valider le chemin final de l’objet File instancié :</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var file:File = new File( taintedString );
	 validate( file.nativePath ); //where validate() is your path validation function
	 </codeblock> 
	  
	 
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/nativePath" class="- topic/link "><linktext class="- topic/linktext ">nativePath</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:File:browseForDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Ouvre une boîte de dialogue permettant à l’utilisateur de sélectionner un répertoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une opération de recherche (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()) est en cours d’exécution.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne affichée dans la barre de titres de la boîte de dialogue.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ouvre une boîte de dialogue permettant à l’utilisateur de sélectionner un répertoire. Lorsque l’utilisateur sélectionne le répertoire, l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est distribué. La propriété <codeph class="+ topic/ph pr-d/codeph ">target</codeph> de l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est l’objet File qui pointe vers le répertoire sélectionné.
	 
	 <p class="- topic/p ">La boîte de dialogue de sélection d’un répertoire n’est pas toujours affichée devant les fenêtres appartenant à une autre fenêtre (fenêtres dont la propriété <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> n’est pas nulle). Pour éviter des problèmes de classement de fenêtres, masquez les fenêtres possédées avant d’appeler cette méthode.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> <codeph class="+ topic/ph pr-d/codeph ">browseForDirectory()</codeph> n’est pas prise en charge sur les périphériques Android. L’objet File distribue immédiatement un événement cancel.</p>
	 
	 </apiDesc><example conref="examples\File.browseForDirectory.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">File.browseForDirectory()</codeph> pour laisser l’utilisateur choisir un répertoire. Une fois le répertoire sélectionné, le code énumère le contenu du répertoire sélectionné dans le résultat de la méthode <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var directory:File = File.documentsDirectory;

try
{
    directory.browseForDirectory("Select Directory");
    directory.addEventListener(Event.SELECT, directorySelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function directorySelected(event:Event):void 
{
    directory = event.target as File;
    var files:Array = directory.getDirectoryListing();
    for(var i:uint = 0; i &lt; files.length; i++)
    {
        trace(files[i].name);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForDirectory_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Ouvrir. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Ouvrir.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur sélectionne un répertoire et ferme la boîte de dialogue de sélection des répertoires. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur sélectionne un répertoire et ferme la boîte de dialogue de sélection des répertoires.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpenMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForOpenMultiple</apiName><shortdesc class="- topic/shortdesc ">
	 Affiche la boîte de dialogue Ouvrir qui permet à l’utilisateur de sélectionner un ou plusieurs fichiers à ouvrir.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une opération de recherche (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()) est en cours d’exécution.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne affichée dans la barre de titres de la boîte de dialogue.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences de FileFilter utilisé pour filtrer les fichiers qui s’affichent dans la boîte de dialogue. Si vous omettez ce paramètre, tous les fichiers s’affichent. Pour plus d’informations, voir la classe FileFilter.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Affiche la boîte de dialogue Ouvrir qui permet à l’utilisateur de sélectionner un ou plusieurs fichiers à ouvrir.
	 
	 <p class="- topic/p ">Lorsque l’utilisateur sélectionne plusieurs fichiers, l’événement <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph> est distribué. La propriété <codeph class="+ topic/ph pr-d/codeph ">target</codeph> de l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est cet objet File. Contrairement à <codeph class="+ topic/ph pr-d/codeph ">browseForOpen()</codeph>, avec la méthode <codeph class="+ topic/ph pr-d/codeph ">browseForOpenMultiple()</codeph>, cet objet File n’est pas mis à jour pour référencer l’un des fichiers choisis. A l’inverse, l’événement <codeph class="+ topic/ph pr-d/codeph ">selectMultiple</codeph> contient un tableau des fichiers choisis.</p>
	 
	 <p class="- topic/p ">La boîte de dialogue Ouvrir n’est pas toujours affichée devant les fenêtres appartenant à une autre fenêtre (fenêtres dont la propriété <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> n’est pas nulle). Pour éviter des problèmes de classement de fenêtres, masquez les fenêtres possédées avant d’appeler cette méthode.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> il est impossible de définir le titre de la boîte de dialogue du fichier sur les périphériques Android. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">title</codeph> est ignoré.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpenMultiple.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpenMultiple()</codeph> pour laisser l’utilisateur choisir plusieurs fichiers. Une fois les fichiers sélectionnés, le code renvoie les chemins correspondants.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.FileListEvent;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForOpenMultiple("Select Files");
    docsDir.addEventListener(FileListEvent.SELECT_MULTIPLE, filesSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function filesSelected(event:FileListEvent):void 
{
    for (var i:uint = 0; i &lt; event.files.length; i++) 
    {
        trace(event.files[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:selectMultiple" class="- topic/link "><linktext class="- topic/linktext ">selectMultiple</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Ouvrir. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Ouvrir.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_selectMultiple" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">selectMultiple</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur sélectionne des fichiers et ferme la boîte de dialogue Ouvrir. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur sélectionne des fichiers et ferme la boîte de dialogue Ouvrir.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpen" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForOpen</apiName><shortdesc class="- topic/shortdesc ">
	 Affiche la boîte de dialogue Ouvrir qui permet à l’utilisateur de sélectionner un fichier à ouvrir.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une opération de recherche (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()) est en cours d’exécution.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne affichée dans la barre de titres de la boîte de dialogue.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">typeFilter</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences de FileFilter utilisé pour filtrer les fichiers qui s’affichent dans la boîte de dialogue. Si vous omettez ce paramètre, tous les fichiers s’affichent. Pour plus d’informations, voir la classe FileFilter.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Affiche la boîte de dialogue Ouvrir qui permet à l’utilisateur de sélectionner un fichier à ouvrir.
	 
	 <p class="- topic/p ">Lorsque l’utilisateur sélectionne le fichier, l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est distribué. La propriété <codeph class="+ topic/ph pr-d/codeph ">target</codeph> de l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est l’objet File qui pointe vers le fichier sélectionné.</p>
	 
	 <p class="- topic/p ">La boîte de dialogue Ouvrir n’est pas toujours affichée devant les fenêtres appartenant à une autre fenêtre (fenêtres dont la propriété <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> n’est pas nulle). Pour éviter des problèmes de classement de fenêtres, masquez les fenêtres possédées avant d’appeler cette méthode.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> il est impossible de définir le titre de la boîte de dialogue du fichier sur les périphériques Android. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">title</codeph> est ignoré.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpen.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">File.browseForOpen()</codeph> pour laisser l’utilisateur choisir un fichier texte. Lorsque le fichier est sélectionné, le code lit les données du fichier dans une chaîne.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;
import flash.net.FileFilter;

var fileToOpen:File = new File();
var txtFilter:FileFilter = new FileFilter("Text", "*.as;*.css;*.html;*.txt;*.xml");

try 
{
    fileToOpen.browseForOpen("Open", [txtFilter]);
    fileToOpen.addEventListener(Event.SELECT, fileSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function fileSelected(event:Event):void 
{
    var stream:FileStream = new FileStream();
    stream.open(event.target, FileMode.READ);
    var fileData:String = stream.readUTFBytes(stream.bytesAvailable);
    trace(fileData);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForSave()" class="- topic/link "><linktext class="- topic/linktext ">browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpenMultiple()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpenMultiple()</linktext></link><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpen_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Ouvrir. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Ouvrir.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur sélectionne un fichier et ferme la boîte de dialogue Ouvrir. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur sélectionne un fichier et ferme la boîte de dialogue Ouvrir.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForSave" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">browseForSave</apiName><shortdesc class="- topic/shortdesc ">
	 Affiche la boîte de dialogue Enregistrer le fichier dans laquelle l’utilisateur peut sélectionner la destination du fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une opération de recherche (browseForOpen(), browseForOpenMultiple(), browseForSave(), browseForDirectory()) est en cours d’exécution.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">title</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne affichée dans la barre de titres de la boîte de dialogue.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Affiche la boîte de dialogue Enregistrer le fichier dans laquelle l’utilisateur peut sélectionner la destination du fichier. 
	 
	 <p class="- topic/p ">Lorsque l’utilisateur sélectionne le fichier, l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est distribué. La propriété <codeph class="+ topic/ph pr-d/codeph ">target</codeph> de l’événement <codeph class="+ topic/ph pr-d/codeph ">select</codeph> est l’objet File qui pointe vers la destination d’enregistrement sélectionnée.</p>
	 
	 <p class="- topic/p ">La boîte de dialogue Enregistrer le fichier n’est pas toujours affichée devant les fenêtres appartenant à une autre fenêtre (fenêtres dont la propriété <codeph class="+ topic/ph pr-d/codeph ">owner</codeph> n’est pas nulle). Pour éviter des problèmes de classement de fenêtres, masquez les fenêtres possédées avant d’appeler cette méthode.</p>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> il est impossible de définir le titre de la boîte de dialogue du fichier sur les périphériques Android. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">title</codeph> est ignoré.</p>
	 
	 </apiDesc><example conref="examples\File.browseForSave.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">File.browseForSave()</codeph> pour permettre à l’utilisateur de sélectionner le chemin d’enregistrement d’un fichier. Une fois les fichiers sélectionnés, le code enregistre les données sur le chemin de fichier sélectionné.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;
import flash.events.Event;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForSave("Save As");
    docsDir.addEventListener(Event.SELECT, saveData);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function saveData(event:Event):void 
{
    var newFile:File = event.target as File;
    var str:String = "Hello.";
    if (!newFile.exists)
    {
        var stream:FileStream = new FileStream();
        stream.open(newFile, FileMode.WRITE);
        stream.writeUTFBytes(str);
        stream.close();
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/browseForDirectory()" class="- topic/link "><linktext class="- topic/linktext ">browseForDirectory()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()" class="- topic/link "><linktext class="- topic/linktext ">browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/event:select" class="- topic/link "><linktext class="- topic/linktext ">select</linktext></link><link href="flash.net.xml#FileFilter" class="- topic/link "><linktext class="- topic/linktext ">flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForSave_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Enregistrer le fichier. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur clique sur le bouton Annuler dans la boîte de dialogue Enregistrer le fichier.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_select" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">select</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’utilisateur sélectionne un fichier et ferme la boîte de dialogue Enregistrer le fichier. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’utilisateur sélectionne un fichier et ferme la boîte de dialogue Enregistrer le fichier.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">L’opération de recherche n’est pas prise en charge sur cette plate-forme.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
	 Annule toute opération asynchrone en attente.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Annule toute opération asynchrone en attente.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:canonicalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">canonicalize</apiName><shortdesc class="- topic/shortdesc ">
	 Rend le chemin de l’objet File canonique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Rend le chemin de l’objet File canonique.
	 
	 <p class="- topic/p ">Si l’objet File représente un fichier ou un répertoire existant, sa mise en forme canonique ajuste le chemin de sorte qu’il corresponde à la casse du nom réel du fichier ou du répertoire. Si l’objet File est un lien symbolique, sa mise en forme canonique ajuste le chemin de sorte qu’il corresponde au fichier ou au répertoire vers lequel pointe le lien, que ce fichier ou ce répertoire existe ou non. Sur les systèmes de fichiers sensibles à la casse (tels que Linux), lorsque plusieurs noms de fichier ne diffèrent que par la casse, la méthode <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> ajuste le chemin de sorte qu’il corresponde au premier fichier détecté (dans l’ordre déterminé par le système de fichiers).</p>
	 
	 <p class="- topic/p ">De plus, la mise en forme canonique convertit les noms de fichier courts en noms de fichier longs sous Windows.</p>
	 
	 </apiDesc><example conref="examples\File.canonicalize.2.as" class="- topic/example ">     Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> pour identifier la casse correcte du nom d’un répertoire. Avant d’exécuter cet exemple, créez un répertoire AIR Test sur le bureau de votre ordinateur.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var path:File = File.desktopDirectory.resolvePath("air test");
trace(path.nativePath); 
path.canonicalize();
trace(path.nativePath); // ...\AIR Test

</codeblock></example><example conref="examples\File.canonicalize.1.as" class="- topic/example ">     Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">canonicalize()</codeph> pour rechercher le nom long d’un répertoire Windows à partir de son nom court. Cet exemple présume qu’un répertoire AIR Test existe à la racine du lecteur C: et que le système lui a attribué le nom court AIR~1.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var path:File = new File();
path.nativePath = "C:\\AIR~1";
path.canonicalize();
trace(path.nativePath); // C:\AIR Test
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:clone" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clone</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une copie de cet objet File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une copie de cet objet File. Les inscriptions d’événements ne sont pas copiées.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Remarque :</i> cette méthode ne copie <i class="+ topic/ph hi-d/i ">pas</i> le fichier lui-même. Elle effectue simplement une copie de l’occurrence de l’objet File <ph class="- topic/ph ">ActionScript</ph>. Pour copier un fichier, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:copyToAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copyToAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Commence par copier le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File à l’emplacement spécifié par le paramètre destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour écrire dans la destination.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement de destination du nouveau fichier. Notez que cet objet File spécifie le fichier ou le répertoire résultant (copié), <i class="+ topic/ph hi-d/i ">pas</i> le chemin du répertoire conteneur.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, la copie échoue si le fichier spécifié par le fichier <codeph class="+ topic/ph pr-d/codeph ">target</codeph> existe déjà. Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier ou répertoire portant le même nom.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Commence par copier le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File à l’emplacement spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">destination</codeph>. 
	 
	 <p class="- topic/p ">Lorsque l’opération est terminée, un événement <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> (réussite) ou <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph> (échec) est renvoyé. Le processus de copie crée tous les répertoires parent requis (si possible).</p>
	 
	 </apiDesc><example conref="examples\File.copyToAsync.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">copyToAsync()</codeph> pour copier un fichier. Avant d’exécuter ce code, assurez-vous de créer un fichier test1.txt dans le sous-répertoire AIR Test du répertoire documents de votre ordinateur. Le fichier résultant est nommé test2.txt et est également situé dans le sous-répertoire AIR Test. Lorsque vous définissez le paramètre <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier test2.txt existant.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

sourceFile.copyToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileCopiedHandler);

function fileCopiedHandler(event:Event):void {
    trace("Done.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyTo()" class="- topic/link "><linktext class="- topic/linktext ">copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:copyToAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque le fichier ou le répertoire a bien été copié. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque le fichier ou le répertoire a bien été copié.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:copyToAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La source n’existe pas ou la destination existe et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph> ; ou la source n’a pas pu être copiée à destination ; ou la source et la destination font référence au même fichier ou dossier et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Windows ne permet pas à l’utilisateur de copier un fichier ouvert ou un répertoire contenant un fichier ouvert.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">La source n’existe pas ou la destination existe et overwrite est false ; ou la source n’a pas pu être copiée à destination ; ou la source et la destination font référence au même fichier ou dossier et overwrite est défini sur true.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:copyTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copyTo</apiName><shortdesc class="- topic/shortdesc ">
	 Copie le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File à l’emplacement spécifié par le paramètre newLocation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La source n’existe pas ou la destination existe et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph> ; ou la source n’a pas pu être copiée à destination ; ou la source et la destination font référence au même fichier ou dossier et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Windows ne permet pas à l’utilisateur de copier un fichier ouvert ou un répertoire contenant un fichier ouvert.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour écrire dans la destination.
	  
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement de destination du nouveau fichier. Notez que cet objet File spécifie le fichier ou le répertoire résultant (copié), <i class="+ topic/ph hi-d/i ">pas</i> le chemin du répertoire conteneur.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, la copie échoue si le fichier spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">target</codeph> existe déjà. Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier ou répertoire portant le même nom.  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Copie le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File à l’emplacement spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">newLocation</codeph>. Le processus de copie crée tous les répertoires parent requis (si possible).
	 
	 </apiDesc><example conref="examples\File.copyTo.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph> pour copier un fichier. Avant d’exécuter ce code, créez un fichier test1.txt dans le sous-répertoire AIR Test du répertoire documents de votre ordinateur. Le fichier résultant est nommé test2.txt et est également situé dans le sous-répertoire AIR Test. Lorsque vous définissez le paramètre <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier test2.txt existant.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:FileReference = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:FileReference = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

if (sourceFile.copyTo(destination, true)) {
    trace("Done.");
}
</codeblock></example><example conref="examples\File.copyTo.2.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">copyTo()</codeph> pour copier un fichier. Avant d’exécuter ce code, créez un fichier test1.txt dans le sous-répertoire AIR Test du répertoire d’accueil de votre ordinateur. Le fichier résultant est nommé test2.txt. Les instructions <codeph class="+ topic/ph pr-d/codeph ">try</codeph> et <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> indiquent comment répondre aux erreurs.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

try 
{
    sourceFile.copyTo(destination, true);
}
catch (error:Error)
{
    trace("Error:", error.message);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyToAsync()" class="- topic/link "><linktext class="- topic/linktext ">copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()" class="- topic/link "><linktext class="- topic/linktext ">moveTo()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Crée le répertoire spécifié et tous les répertoires parent nécessaires.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le répertoire n’existait pas et n’a pas pu être créé. 
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée le répertoire spécifié et tous les répertoires parent nécessaires. Si le répertoire existe déjà, aucune action n’est effectuée.
	 
	 </apiDesc><example conref="examples\File.createDirectory.1.as" class="- topic/example ">     Le code suivant déplace le fichier test.txt situé sur le bureau vers le sous-répertoire AIR Test du répertoire documents. L’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">createDirectory()</codeph> vérifie l’existence du répertoire AIR Test avant de déplacer le fichier.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var source:File = File.desktopDirectory.resolvePath("test.txt");
var target:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var targetParent:File = target.parent;
targetParent.createDirectory();
source.moveTo(target, true);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:createTempDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createTempDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une référence à un nouveau répertoire temporaire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet File référençant le nouveau répertoire temporaire.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une référence à un nouveau répertoire temporaire. Il s’agit d’un nouveau répertoire dans le chemin de répertoire temporaire du système.
	 
	 <p class="- topic/p ">Cette méthode permet d’identifier un nouveau répertoire unique sans avoir à demander au système de vérifier qu’il est nouveau et unique.</p>
	 
	 <p class="- topic/p ">Vous pouvez supprimer le répertoire temporaire avant de fermer l’application, puisqu’il n’est pas supprimé automatiquement sur certains périphériques.</p>
	 
	 </apiDesc><example conref="examples\File.createTempDirectory.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">createTempFile()</codeph> pour obtenir une référence à un nouveau répertoire temporaire.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.File;

var temp:File = File.createTempDirectory();
trace(temp.nativePath);
</codeblock> Chaque fois que vous exécutez ce code, un nouveau fichier (unique) est créé. 
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/createTempFile()" class="- topic/link "><linktext class="- topic/linktext ">createTempFile()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createTempFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">createTempFile</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une référence à un nouveau fichier temporaire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet File référençant le nouveau fichier temporaire.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une référence à un nouveau fichier temporaire. Il s’agit d’un nouveau fichier dans le chemin de répertoire temporaire du système.
	 
	 <p class="- topic/p ">Cette méthode permet d’identifier un nouveau fichier unique sans avoir à demander au système de vérifier que le fichier est nouveau et unique.</p>
	 
	 <p class="- topic/p ">Vous pouvez supprimer le fichier temporaire avant de fermer l’application puisqu’il n’est pas supprimé automatiquement.</p>
	 
	 </apiDesc><example conref="examples\File.createTempFile.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">createTempFile()</codeph> pour obtenir une référence à un nouveau fichier temporaire.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.File;

var temp:File = File.createTempFile();
trace(temp.nativePath);
</codeblock> Chaque fois que vous exécutez ce code, un nouveau fichier (unique) est créé. 
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/createTempDirectory()" class="- topic/link "><linktext class="- topic/linktext ">createTempDirectory()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectoryAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteDirectoryAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Supprime le répertoire de façon asynchrone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour supprimer le répertoire.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteDirectoryContents</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si le répertoire qui contient des fichiers ou des sous-répertoires doit être supprimé. Si <codeph class="+ topic/ph pr-d/codeph ">false</codeph> et si le répertoire contient des fichiers ou des répertoires, l’objet File renvoie un événement <codeph class="+ topic/ph pr-d/codeph ">ioError</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Supprime le répertoire de façon asynchrone. Si ce fichier est un lien symbolique à un répertoire, seul le lien (et non le répertoire) est supprimé.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectory()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque le répertoire a bien été supprimé. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque le répertoire a bien été supprimé.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le répertoire n’existe pas ou n’a pas pu être supprimé. Windows ne permet pas à l’utilisateur de supprimer un répertoire qui contient un fichier ouvert.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le répertoire n’existe pas ou n’a pas pu être supprimé.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectory" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Supprime le répertoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le répertoire n’existe pas ou n’a pas pu être supprimé. Windows ne permet pas à l’utilisateur de supprimer un répertoire qui contient un fichier ouvert.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour supprimer le répertoire.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteDirectoryContents</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si le répertoire qui contient des fichiers ou des sous-répertoires doit être supprimé. Si <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, et que le répertoire contient des fichiers ou des sous-répertoires, un appel à cette méthode renvoie une exception.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Supprime le répertoire. Si ce fichier est un lien symbolique à un répertoire, seul le lien (et non le répertoire) est supprimé.
	 
	 </apiDesc><example conref="examples\File.deleteDirectory.1.as" class="- topic/example "> Le code suivant crée un répertoire vide, puis utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">deleteDirectory()</codeph> pour le supprimer. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Empty Junk Directory/");
File.createDirectory(directory);
trace(directory.exists); // true
directory.deleteDirectory();
trace(directory.exists); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectoryAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()" class="- topic/link "><linktext class="- topic/linktext ">deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteFileAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteFileAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Supprime le fichier de façon asynchrone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour supprimer le fichier.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Supprime le fichier de façon asynchrone. Si ce fichier est un lien symbolique, seul le lien (et non le fichier cible) est supprimé.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectoryAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()" class="- topic/link "><linktext class="- topic/linktext ">deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque le fichier a bien été supprimé. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque le fichier a bien été supprimé.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’existe pas ou n’a pas pu être supprimé. Windows ne permet pas de supprimer un fichier ouvert.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le fichier n’existe pas ou n’a pas pu être supprimé.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteFile" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deleteFile</apiName><shortdesc class="- topic/shortdesc ">
	 Supprime le fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’existe pas ou n’a pas pu être supprimé. Windows ne permet pas de supprimer un fichier ouvert.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour supprimer le fichier.

	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Supprime le fichier. Si ce fichier est un lien symbolique, seul le lien (et non le fichier cible) est supprimé.
	 
	 </apiDesc><example conref="examples\File.deleteFile.1.as" class="- topic/example "> Le code suivant crée un fichier temporaire, puis appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">deleteFile()</codeph> pour le supprimer.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var file:File = File.createTempFile();
trace(file.exists); // true
file.deleteFile();
trace(file.exists); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/deleteDirectory()" class="- topic/link "><linktext class="- topic/linktext ">deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()" class="- topic/link "><linktext class="- topic/linktext ">deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListingAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDirectoryListingAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Récupère de façon asynchrone un tableau d’objets File correspondant au contenu du répertoire représenté par cet objet File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Récupère de façon asynchrone un tableau d’objets File correspondant au contenu du répertoire représenté par cet objet File. 
	 
	 </apiDesc><example conref="examples\File.getDirectoryListingAsync.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListingAsync()</codeph> pour énumérer le contenu du répertoire user.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.FileListEvent;

var directory:File = File.userDirectory;
directory.getDirectoryListingAsync();
directory.addEventListener(FileListEvent.DIRECTORY_LISTING, directoryListingHandler);

function directoryListingHandler(event:FileListEvent):void {
    var list:Array = event.files;
    for (var i:uint = 0; i &lt; list.length; i++) {
        trace(list[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListing()" class="- topic/link "><linktext class="- topic/linktext ">getDirectoryListing()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()" class="- topic/link "><linktext class="- topic/linktext ">getRootDirectories()</linktext></link><link href="flash.filesystem.xml#File/event:directoryListing" class="- topic/link "><linktext class="- topic/linktext ">événement directoryListing</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous ne disposez pas des autorisations appropriées pour lire ce répertoire, ou le répertoire n’existe pas.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Vous ne disposez pas des autorisations appropriées pour lire ce répertoire, ou le répertoire n’existe pas.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_directoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">directoryListing</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le contenu du répertoire a bien été énuméré. L’événement <codeph class="+ topic/ph pr-d/codeph ">contents</codeph> comprend une propriété <codeph class="+ topic/ph pr-d/codeph ">files</codeph> correspondant au tableau résultant d’objets File.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le contenu du répertoire a bien été énuméré.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListing" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDirectoryListing</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie un tableau d’objets File correspondant aux fichiers et aux répertoires du répertoire représenté par cet objet File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’objets File.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie un tableau d’objets File correspondant aux fichiers et aux répertoires du répertoire représenté par cet objet File. Cette méthode n’explore pas le contenu des sous-répertoires.
	 
	 </apiDesc><example conref="examples\File.getDirectoryListing.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">getDirectoryListing()</codeph> pour énumérer le contenu du répertoire user.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.userDirectory;
var list:Array = directory.getDirectoryListing();
for (var i:uint = 0; i &lt; list.length; i++) {
    trace(list[i].nativePath);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/getDirectoryListingAsync()" class="- topic/link "><linktext class="- topic/linktext ">getDirectoryListingAsync()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()" class="- topic/link "><linktext class="- topic/linktext ">getRootDirectories()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getRelativePath" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRelativePath</apiName><shortdesc class="- topic/shortdesc ">
	 Recherche le chemin relatif entre deux chemins File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La référence est définie sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’appelant n’est pas dans le sandbox de sécurité de l’application.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chemin relatif entre ce fichier (ou répertoire) et le fichier <codeph class="+ topic/ph pr-d/codeph ">ref</codeph> (ou répertoire), si possible ; autrement, <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ref</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Objet File pour lequel le chemin est donné.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useDotDot</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Spécifie si le chemin relatif résultant peut utiliser des composants « .. » .
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Recherche le chemin relatif entre deux chemins File.
	 
	 <p class="- topic/p ">Le chemin relatif est la liste des composants qui peuvent être ajoutés (résolus par) à cette référence pour localiser la seconde référence (paramètre). Le chemin relatif est renvoyé avec le caractère de séparation « / ».</p>
	 
	 <p class="- topic/p ">Les chemins relatifs peuvent éventuellement contenir des références « .. », mais de tels chemins ne traversent pas les limites de volumes visibles.</p>
	 
	 </apiDesc><example conref="examples\File.getRelativePath.1.as" class="- topic/example "/></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:getRootDirectories" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getRootDirectories</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie un tableau d’objets File, indiquant les répertoires racine du système de fichiers.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’objets File énumérant les répertoires racine. 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie un tableau d’objets File, indiquant les répertoires racine du système de fichiers. 
	 
	 <p class="- topic/p ">Sous Windows, par exemple, il s’agit de la liste des volumes tels que les lecteurs C: et D:. Les lecteurs vides, tels que des lecteurs CD ou DVD, dans lesquels aucun disque n’était inséré ne sont pas inclus dans ce tableau. Sous Mac et Linux, cette méthode renvoie le répertoire racine unique de la machine (le répertoire « / »).</p>
	 
	 <p class="- topic/p ">Sur les systèmes de fichiers pour lesquels la racine n’est plus lisible, notamment le système de fichiers d’Android, les propriétés de l’objet File renvoyé ne reflètent pas toujours la valeur true. Par exemple, sur Android, la propriété <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> indique 0.</p>
	 
	 </apiDesc><example conref="examples\File.getRootDirectories.1.as" class="- topic/example "> Le code suivant renvoie la liste des répertoires racine :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
var rootDirs:Array = File.getRootDirectories();

for (var i:uint = 0; i &lt; rootDirs.length; i++) {
    trace(rootDirs[i].nativePath);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:moveToAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Commence par déplacer le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File vers l’emplacement spécifié par le paramètre newLocation.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour déplacer le fichier.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement cible du déplacement. Cet objet spécifie le chemin du fichier ou du répertoire résultant (déplacé), <i class="+ topic/ph hi-d/i ">pas</i> le chemin du répertoire conteneur.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, le déplacement échoue si le fichier <codeph class="+ topic/ph pr-d/codeph ">target</codeph> existe déjà. Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier ou répertoire portant le même nom.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Commence par déplacer le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File vers l’emplacement spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">newLocation</codeph>. 
	 
	 <p class="- topic/p ">Pour renommer un fichier, définissez le paramètre <codeph class="+ topic/ph pr-d/codeph ">destination</codeph> de sorte qu’il pointe vers un chemin situé dans le répertoire du fichier, mais avec un autre nom.</p>
	 
	 <p class="- topic/p ">Le processus de déplacement crée tous les répertoires parent requis (si possible).</p>
	 
	 </apiDesc><example conref="examples\File.moveToAsync.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">moveToAsync()</codeph> pour renommer un fichier. Le nom d’origine du fichier est test1.txt et le nom résultant test2.txt. Comme les objets File source et cible pointent vers le même répertoire (le sous-répertoire Apollo Test du répertoire documents de l’utilisateur), la méthode <codeph class="+ topic/ph pr-d/codeph ">moveToAsync()</codeph> renomme le fichier au lieu de le déplacer vers un nouveau répertoire. Avant d’exécuter ce code, créez un fichier test1.txt dans le sous-répertoire Apollo Test du répertoire documents de votre ordinateur. Lorsque vous définissez le paramètre <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier test2.txt existant.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("Apollo Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

var sourceFile.moveToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileMoveCompleteHandler);

function fileMoveCompleteHandler(event:Event):void 
{
    trace("Done.")
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyToAsync()" class="- topic/link "><linktext class="- topic/linktext ">copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()" class="- topic/link "><linktext class="- topic/linktext ">moveTo()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque le fichier ou le répertoire a bien été déplacé. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque le fichier ou le répertoire a bien été déplacé.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La source n’existe pas ; ou la destination existe et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> ; ou la source n’a pas pu être déplacée vers la cible ; ou la source et la destination font référence au même fichier ou dossier et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Windows ne permet pas à l’utilisateur de déplacer un fichier ouvert ou un répertoire contenant un fichier ouvert.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">La source n’existe pas ; ou la cible existe et overwrite est défini sur false ; ou la source n’a pas pu être déplacée vers la cible ; ou la source et la définition font référence au même fichier ou dossier et overwrite est défini sur true.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrashAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToTrashAsync</apiName><shortdesc class="- topic/shortdesc ">
	 Déplace un fichier ou un répertoire vers la corbeille de façon asynchrone.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour déplacer le fichier vers la corbeille.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Déplace un fichier ou un répertoire vers la corbeille de façon asynchrone. 
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> sur les systèmes d’exploitation qui ne prennent pas en charge le concept d’un dossier de corbeille récupérable, ces fichiers sont immédiatement supprimés.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_ioError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">ioError</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le système d’exploitation n’a pas autorisé l’opération ou le fichier ou le répertoire n’existe pas. Windows ne permet pas à l’utilisateur de déplacer un fichier ouvert ou un répertoire contenant un fichier ouvert.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Le système d’exploitation n’a pas autorisé l’opération ou le fichier ou le répertoire n’existe pas. </shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_complete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque le fichier ou le répertoire a bien été déplacé vers la corbeille.  
	 
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque le fichier ou le répertoire a bien été déplacé vers la corbeille. </shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrash" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveToTrash</apiName><shortdesc class="- topic/shortdesc ">
	 Déplace un fichier ou un répertoire vers la corbeille.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le système d’exploitation n’a pas autorisé l’opération ou le fichier ou le répertoire n’existe pas. Windows ne permet pas à l’utilisateur de déplacer un fichier ouvert ou un répertoire contenant un fichier ouvert.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour déplacer le fichier vers la corbeille.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Déplace un fichier ou un répertoire vers la corbeille.
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> sur les systèmes d’exploitation qui ne prennent pas en charge le concept d’un dossier de corbeille récupérable, ces fichiers sont immédiatement supprimés.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/moveToTrashAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrashAsync()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:moveTo" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">moveTo</apiName><shortdesc class="- topic/shortdesc ">
	 Déplace le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File vers l’emplacement spécifié par le paramètre destination.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La source n’existe pas ou la destination existe et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> ; ou le fichier source n’a pas pu être déplacé vers l’emplacement cible ; ou la source et la destination font référence au même fichier ou dossier et <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Windows ne permet pas à l’utilisateur de déplacer un fichier ouvert ou un répertoire contenant un fichier ouvert.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’application ne dispose pas des autorisations nécessaires pour déplacer le fichier.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newLocation</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:FileReference</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement cible du déplacement. Cet objet spécifie le chemin du fichier ou du répertoire résultant (déplacé), <i class="+ topic/ph hi-d/i ">pas</i> le chemin du répertoire conteneur.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">overwrite</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, le déplacement échoue si le fichier <codeph class="+ topic/ph pr-d/codeph ">target</codeph> existe déjà. Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier ou répertoire portant le même nom. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Déplace le fichier ou le répertoire situé à l’emplacement spécifié par cet objet File vers l’emplacement spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">destination</codeph>. 
	 
	 <p class="- topic/p ">Pour renommer un fichier, définissez le paramètre <codeph class="+ topic/ph pr-d/codeph ">destination</codeph> de sorte qu’il pointe vers un chemin situé dans le répertoire du fichier, mais avec un autre nom.</p>
	 
	 <p class="- topic/p ">Le processus de déplacement crée tous les répertoires parent requis (si possible).</p>
	 
	 </apiDesc><example conref="examples\File.moveTo.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> pour renommer un fichier. Le nom d’origine du fichier est test1.txt et le nom résultant test2.txt. Comme les objets File source et cible pointent vers le même répertoire (le sous-répertoire Apollo Test du répertoire documents de l’utilisateur), la méthode <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> renomme le fichier au lieu de le déplacer vers un nouveau répertoire. Avant d’exécuter ce code, créez un fichier test1.txt dans le sous-répertoire AIR Test du répertoire documents de votre ordinateur. Lorsque vous définissez le paramètre <codeph class="+ topic/ph pr-d/codeph ">overwrite</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’opération remplace tout fichier test2.txt existant.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

try  
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" + error.message);
}
</codeblock></example><example conref="examples\File.moveTo.2.as" class="- topic/example "> Le code suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">moveTo()</codeph> pour déplacer un fichier. Le fichier d’origine est le fichier test1.txt du sous-répertoire Apollo Test du répertoire documents de l’utilisateur, et la méthode le déplace vers le sous-répertoire Results. Avant d’exécuter ce code, créez un fichier test1.txt dans le sous-répertoire AIR Test du répertoire d’accueil de votre ordinateur. Les instructions <codeph class="+ topic/ph pr-d/codeph ">try</codeph> et <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> indiquent comment répondre aux erreurs.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/Results/test1.txt");

try 
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" + error.message);
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/copyTo()" class="- topic/link "><linktext class="- topic/linktext ">copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()" class="- topic/link "><linktext class="- topic/linktext ">moveToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()" class="- topic/link "><linktext class="- topic/linktext ">moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:openWithDefaultApplication" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openWithDefaultApplication</apiName><shortdesc class="- topic/shortdesc ">
	 Ouvre le fichier dans l’application désignée par le système d’exploitation pour ouvrir ce type de fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">(Mac OS et Linux) Aucune application capable d’ouvrir le fichier n’a été trouvée. (Sous Windows, toute tentative d’ouverture d’un fichier auquel aucune application n’est associée échoue silencieusement, sans aucune exception.)
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">Error</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Error</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier se trouve dans le répertoire de l’application, ou il appartient à un type de fichier interdit. Cette erreur ne s’applique pas aux applications AIR installées avec un programme d’installation appartenant à l’application native (applications dotées d’un profil de bureau étendu).
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’existe pas ou aucune application n’est désignée pour ouvrir le fichier.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IOError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IOError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le fichier n’existe pas.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ReferenceError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ReferenceError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Ouvre le fichier dans l’application désignée par le système d’exploitation pour ouvrir ce type de fichier.
	 
	 <p class="- topic/p ">AIR vous empêche d’utiliser la méthode File.openWithDefaultApplication() pour ouvrir certains fichiers. Sous Windows, AIR vous empêche d’ouvrir les fichiers d’un certain type (fichiers avec des extensions spécifiques, répertoriées ci-dessous). Sous Mac OS et Linux, AIR vous empêche d’ouvrir les fichiers qui s’ouvrent dans des applications spécifiques, indiquées ci-dessous. Toute tentative d’ouvrir l’un de ces fichiers à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">openWithDefaultApplication()</codeph> renvoie une exception. Toutefois, les applications AIR installées avec un programme d’installation natif (applications dotées d’un profil étendu de bureau) ne sont pas soumises à ces limitations et peuvent ouvrir tous types de fichiers.</p>
	 
	 <p class="- topic/p ">Vous ne pouvez pas ouvrir les documents à partir du répertoire de l’application.</p>
	 
	 <p class="- topic/p ">Les tableaux ci-dessous répertorient les extensions de fichier qui ne sont pas autorisées sous Windows, ainsi que les applications non autorisées sous Mac OS et Linux : </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Extension du document sous Windows </entry><entry class="- topic/entry "> Type </entry><entry class="- topic/entry "> Application équivalente sous Mac OS </entry><entry class="- topic/entry "> Application équivalente sous Linux </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> bat </entry><entry class="- topic/entry "> Commande de traitement de fichiers par lots </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> Aucune application par défaut </entry></row><row class="- topic/row "><entry class="- topic/entry "> cmd </entry><entry class="- topic/entry "> DOS et fichier de commande Windows </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> Aucune application par défaut </entry></row><row class="- topic/row "><entry class="- topic/entry "> com </entry><entry class="- topic/entry "> Commande </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> Aucune application par défaut </entry></row><row class="- topic/row "><entry class="- topic/entry "> csh </entry><entry class="- topic/entry "> Script de shell csh UNIX </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/csh </entry></row><row class="- topic/row "><entry class="- topic/entry "> dash </entry><entry class="- topic/entry "> Script de shell dash UNIX </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/dash </entry></row><row class="- topic/row "><entry class="- topic/entry "> ksh </entry><entry class="- topic/entry "> Script de shell ksh UNIX </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/ksh </entry></row><row class="- topic/row "><entry class="- topic/entry "> sh </entry><entry class="- topic/entry "> Script de shell UNIX </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/bash </entry></row><row class="- topic/row "><entry class="- topic/entry "> tcsh </entry><entry class="- topic/entry "> Script de shell tcsh UNIX </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/tcsh </entry></row><row class="- topic/row "><entry class="- topic/entry "> zsh </entry><entry class="- topic/entry "> Script de shell zsh UNIX </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> /bin/zsh </entry></row><row class="- topic/row "><entry class="- topic/entry "> exe </entry><entry class="- topic/entry "> Fichier exécutable </entry><entry class="- topic/entry "> Bit exécutable, extension .app </entry><entry class="- topic/entry "> /lib/ld.so </entry></row><row class="- topic/row "><entry class="- topic/entry "> lnk </entry><entry class="- topic/entry "> Fichier de raccourci Windows </entry><entry class="- topic/entry "> Bit exécutable, extension .app </entry><entry class="- topic/entry "> Liens sous Linux, jeu de bits exécutables, aucune application par défaut </entry></row><row class="- topic/row "><entry class="- topic/entry "> pif </entry><entry class="- topic/entry "> Fichier d’informations du programme </entry><entry class="- topic/entry "> Bit exécutable, extension .app </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> reg </entry><entry class="- topic/entry "> Informations/clé de registre pour Windows 95/98, Fichier de registre de données </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> scf </entry><entry class="- topic/entry "> Commande de Windows Explorer </entry><entry class="- topic/entry "> ScriptEditor, AutomatorRunner </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> shb, shs </entry><entry class="- topic/entry "> Fichier Shell Scrap Objet </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> prg </entry><entry class="- topic/entry "> Fichier de programme </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> vb, vbe, vbs </entry><entry class="- topic/entry "> Fichiers VBScript </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> vsmacros </entry><entry class="- topic/entry "> Projet macro binaire Visual Studio .NET </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> ws, wsc, wsf, wsh </entry><entry class="- topic/entry "> Fichiers de script Windows </entry><entry class="- topic/entry "> ScriptEditor, AutomatorRunner </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> fxp </entry><entry class="- topic/entry "> Code source compilé Fox Pro </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> mas </entry><entry class="- topic/entry "> Procédures stockées de Microsoft Access </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> scr </entry><entry class="- topic/entry "> Economiseur d’écran de Windows </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> py, pyc </entry><entry class="- topic/entry "> Fichier de script Python </entry><entry class="- topic/entry "> Python </entry><entry class="- topic/entry "> Python </entry></row><row class="- topic/row "><entry class="- topic/entry "> pl </entry><entry class="- topic/entry "> Fichier de script Perl </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> perl </entry></row><row class="- topic/row "><entry class="- topic/entry "> cgi </entry><entry class="- topic/entry "> Fichier de script Common Gateway Interface </entry><entry class="- topic/entry "> Terminal </entry><entry class="- topic/entry "> perl </entry></row><row class="- topic/row "><entry class="- topic/entry "> msi, msm, msp, mst, idt, cub, pcp </entry><entry class="- topic/entry "> Fichier d’installation Windows </entry><entry class="- topic/entry "> Programme d’installation </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> job </entry><entry class="- topic/entry "> Objet de tâche du Planificateur de tâches de Windows </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> jar, js, jse </entry><entry class="- topic/entry "> Fichier d’archive Java, fichier JavaScript, fichier de script codé JScript </entry><entry class="- topic/entry "> <ph class="- topic/ph ">JarLauncher</ph> </entry><entry class="- topic/entry "> jar </entry></row><row class="- topic/row "><entry class="- topic/entry "> url </entry><entry class="- topic/entry "> Raccourci Internet </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> hta </entry><entry class="- topic/entry "> Application HTML </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> S/O </entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Mac OS X uniquement </entry><entry class="- topic/entry "> Type </entry><entry class="- topic/entry "> Application de Mac OS X </entry><entry class="- topic/entry "> Application équivalente sous Linux </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> Applet Java Mac OS X </entry><entry class="- topic/entry "> AppletLauncher </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> Plug-in AppleScript Mac OS X </entry><entry class="- topic/entry "> systemevents </entry><entry class="- topic/entry "> S/O </entry></row><row class="- topic/row "><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> Widget Mac OS X </entry><entry class="- topic/entry "> dock, dashboardlauncher </entry><entry class="- topic/entry "> S/O </entry></row></tbody></tgroup></adobetable>
	 </p>
	 
	 <p class="- topic/p ">
	 <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry "> Extension de document sous Linux uniquement </entry><entry class="- topic/entry "> Type </entry><entry class="- topic/entry "> Application équivalente sous Mac OS X </entry><entry class="- topic/entry "> Application Linux </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "> rb </entry><entry class="- topic/entry "> Script de shell Ruby </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> ruby </entry></row><row class="- topic/row "><entry class="- topic/entry "> desktop </entry><entry class="- topic/entry "> Fichiers et raccourcis du bureau </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> Aucune application par défaut </entry></row><row class="- topic/row "><entry class="- topic/entry "> directory </entry><entry class="- topic/entry "> Fichiers et raccourcis du répertoire </entry><entry class="- topic/entry "> S/O </entry><entry class="- topic/entry "> Aucune application par défaut </entry></row></tbody></tgroup></adobetable>
	 </p>
	 	 
	 	 
	 </apiDesc><example conref="examples\File.openWithDefaultApplication.1.as" class="- topic/example "> Le code suivant permet à l’utilisateur de naviguer vers un fichier MP3 et de l’ouvrir dans l’application par défaut destinée à la lecture de fichiers MP3. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.net.FileFilter;

var file:File = File.documentsDirectory; 
var mp3Filter:FileFilter = new FileFilter("MP3 Files", "*.mp3"); 
file.browseForOpen("Open", [mp3Filter]); 
file.addEventListener(Event.SELECT, fileSelected); 
 
function fileSelected(e:Event):void 
{ 
    file.openWithDefaultApplication(); 
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/downloaded" class="- topic/link "><linktext class="- topic/linktext ">downloaded</linktext></link><link href="flash.desktop.xml#NativeProcess" class="- topic/link "><linktext class="- topic/linktext ">NativeProcess</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:resolvePath" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">resolvePath</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un nouvel objet File avec un chemin relatif au chemin de cet objet File, en fonction du paramètre path (une chaîne).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvel objet File pointant vers le chemin résultant.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">path</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chemin à ajouter à la fin du chemin de cet objet File (si le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> est un chemin relatif) ; ou chemin à renvoyer (si le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> est un chemin absolu).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un nouvel objet File avec un chemin relatif au chemin de cet objet File, en fonction du paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> (une chaîne).
	 
	 <p class="- topic/p ">Vous pouvez utiliser un chemin relatif ou absolu comme paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph>.</p>
	 
	 <p class="- topic/p ">Si vous spécifiez un chemin relatif, le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> fourni est ajouté à la fin du chemin de l’objet File. Toutefois, l’utilisation de « .. » dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph> peut renvoyer un chemin résultant qui n’est pas un enfant de l’objet File. La référence résultante n’a pas besoin de faire référence à un emplacement réel du système de fichiers.</p>
	 
	 <p class="- topic/p ">Si vous spécifiez une référence de fichier absolu, la méthode renvoie l’objet File pointant vers ce chemin. La référence de fichier absolu doit utiliser une syntaxe de chemin native valide pour le système d’exploitation de l’utilisateur (par exemple <codeph class="+ topic/ph pr-d/codeph ">"C:\\test"</codeph> sous Windows). N’utilisez <i class="+ topic/ph hi-d/i ">pas</i> d’URL (par exemple <codeph class="+ topic/ph pr-d/codeph ">"file:///c:/test"</codeph>) comme paramètre <codeph class="+ topic/ph pr-d/codeph ">path</codeph>.</p>
	 
	 <p class="- topic/p ">Tous les chemins résultants sont normalisés comme suit : </p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Tout élément « . » est ignoré.</li><li class="- topic/li ">Tout élément « .. » détruit son entrée parent.  </li><li class="- topic/li ">Aucune référence « .. » qui atteint la racine du système de fichiers ou la racine de stockage de l’application ne passe ce noeud ; elle est ignorée.</li></ul>
	 
	 <p class="- topic/p ">Veillez à toujours utiliser la barre oblique ( <codeph class="+ topic/ph pr-d/codeph ">/</codeph> ) comme séparateur de chemin. Sous Windows, vous <i class="+ topic/ph hi-d/i ">pouvez</i> également utiliser la barre oblique inverse (<codeph class="+ topic/ph pr-d/codeph ">\</codeph>), bien que cela ne soit pas recommandé. Si vous utilisez la barre oblique inverse, certaines applications risquent de ne pas fonctionner sur d’autres plates-formes.</p>
	 
	 <p class="- topic/p ">Sous Linux, les noms de fichier et les noms de répertoire sont sensibles à la casse.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.filesystem:File:applicationDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Dossier contenant les fichiers installés de l’application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dossier contenant les fichiers installés de l’application.
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">url</codeph> de cet objet utilise le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">app</codeph> (pas le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">file</codeph>). Cela signifie que la chaîne <codeph class="+ topic/ph pr-d/codeph ">url</codeph> est spécifiée en commençant par <codeph class="+ topic/ph pr-d/codeph ">"app:"</codeph> (pas par <codeph class="+ topic/ph pr-d/codeph ">"file:"</codeph>). De même, si vous créez un objet File relatif au répertoire <codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph> (en utilisant la méthode <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>), la propriété <codeph class="+ topic/ph pr-d/codeph ">url</codeph> de l’objet File utilise également le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">app</codeph>. 
	 </p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Remarque :</i> vous ne pouvez pas écrire dans des fichiers ou des répertoires dont le chemin utilise le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">app:</codeph>. Vous ne pouvez pas non plus supprimer ni créer des fichiers ou des dossiers dont le chemin utilise le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">app:</codeph>. Pour des raisons de sécurité, il n’est pas conseillé de modifier le contenu du répertoire de l’application ; ce contenu est bloqué sur les systèmes d’exploitation de certaines plates-formes. Pour stocker des données spécifiques à l’application, pensez à utiliser son répertoire de stockage (<codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>). Si vous souhaitez qu’une partie du contenu du répertoire de stockage de l’application ait accès aux fonctionnalités de l’application (les API AIR), vous pouvez exposer cette fonctionnalité à l’aide d’un pont de sandbox.</p>
	 
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">applicationDirectory</codeph> permet de référencer le répertoire de l’application de façon à ce qu’il fonctionne sur toutes les plateformes. Si vous définissez un objet File pour référencer le répertoire de l’application à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, il ne fonctionne que sur la plateforme pour laquelle ce chemin est valide.</p>
	 
	 <p class="- topic/p ">Sur Android, la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath,</codeph> d’un objet File pointant vers le répertoire de l’application est une chaîne vide. Utilisez la propriété <codeph class="+ topic/ph pr-d/codeph ">url</codeph> pour accéder aux fichiers d’application.</p> 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/applicationStorageDirectory" class="- topic/link "><linktext class="- topic/linktext ">applicationStorageDirectory</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:applicationStorageDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">applicationStorageDirectory</apiName><shortdesc class="- topic/shortdesc ">
     Répertoire de stockage privé de l’application.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Répertoire de stockage privé de l’application. 
	 
	 <p class="- topic/p ">Chaque application AIR possède un répertoire de stockage permanent et unique créé lors du premier accès à <codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph>. Ce répertoire est très pratique pour stocker les données propres à l’application.</p>
	 
	 <p class="- topic/p ">Lors de la désinstallation d’une application AIR, le programme de désinstallation peut supprimer le répertoire de stockage de l’application et ses fichiers ou les conserver, selon la plate-forme.</p>
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">url</codeph> de cet objet utilise le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> (pas le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">file</codeph>). Cela signifie que la chaîne <codeph class="+ topic/ph pr-d/codeph ">url</codeph> est spécifiée en commençant par <codeph class="+ topic/ph pr-d/codeph ">"app-storage:"</codeph> (pas par <codeph class="+ topic/ph pr-d/codeph ">"file:"</codeph>). De même, si vous créez un objet File relatif au répertoire <codeph class="+ topic/ph pr-d/codeph ">File.applicationStoreDirectory</codeph> (en utilisant la méthode <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph>), l’<codeph class="+ topic/ph pr-d/codeph ">url</codeph> de l’objet File utilise également le modèle d’URL <codeph class="+ topic/ph pr-d/codeph ">app-storage</codeph> (comme dans l’exemple).</p>
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">applicationStorageDirectory</codeph> permet de référencer le répertoire de stockage de l’application de façon à ce qu’il fonctionne sur toutes les plateformes. Si vous définissez un objet File pour référencer le répertoire de stockage de l’application à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, il ne fonctionne que sur la plateforme pour laquelle ce chemin est valide.</p>
	 
	 
	 </apiDesc><example conref="examples\File.applicationStorageDirectory.1.as" class="- topic/example "> Le code suivant crée un objet File qui pointe vers le sous-répertoire « images » du répertoire de stockage de l’application.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var tempFiles:File = File.applicationStorageDirectory;
tempFiles = tempFiles.resolvePath("images/");
trace(tempFiles.url); // app-storage:/images
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:desktopDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">desktopDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Répertoire Bureau de l’utilisateur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Répertoire Bureau de l’utilisateur.
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">desktopDirectory</codeph> permet de référencer le répertoire Bureau de façon à ce qu’il fonctionne sur toutes les plateformes. Si vous définissez un objet File pour référencer le répertoire Bureau à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, il ne fonctionne que sur la plateforme pour laquelle ce chemin est valide.</p>
	 
	 <p class="- topic/p ">Si un système d’exploitation ne prend pas en charge un répertoire du bureau, un répertoire du système de fichiers est utilisé à la place.</p>
	 
  	 <p class="- topic/p ">Les périphériques AIR pour TV n’ont aucun concept d’un répertoire du bureau de l’utilisateur. Par conséquent, la propriété <codeph class="+ topic/ph pr-d/codeph ">desktopDirectory</codeph> fait référence au même emplacement de répertoire que la propriété <codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph> . Le répertoire de l’utilisateur est propre à l’application.</p>	 
	 	 
	 
	 </apiDesc><example conref="examples\File.desktopDirectory.1.as" class="- topic/example "> Le code suivant fournit la liste des fichiers et des répertoires contenus dans le répertoire Bureau de l’utilisateur.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
var desktop:File = File.desktopDirectory;

var files:Array = desktop.getDirectoryListing();

for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock><swfblock conref="examples\File.desktopDirectory.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:documentsDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">documentsDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Répertoire documents de l’utilisateur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Répertoire documents de l’utilisateur.
	 
	 <p class="- topic/p ">Sous Windows, il s’agit du répertoire Mes documents (par exemple C:\Documents and Settings\nomUtilisateur\Mes documents). Sous Mac OS, l’emplacement par défaut est le suivant : /Utilisateurs/nomUtilisateur/Documents. Sous Linux, l’emplacement par défaut est le suivant : /home/nomUtilisateur/Documents (système anglais) et la propriété tient compte du paramètre <codeph class="+ topic/ph pr-d/codeph ">xdg-user-dirs</codeph>. </p>
	 
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">documentsDirectory</codeph> permet de référencer le répertoire documents de façon à ce qu’il fonctionne sur toutes les plateformes. Si vous définissez un objet File pour référencer le répertoire documents à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">url</codeph>, il ne fonctionne que sur la plateforme pour laquelle ce chemin est valide.</p>
	 
	 <p class="- topic/p ">Si un système d’exploitation ne prend pas en charge un répertoire de documents, un répertoire du système de fichiers est utilisé à la place.</p>
	 
  	 <p class="- topic/p ">Les périphériques AIR pour TV n’ont aucun concept d’un répertoire de documents de l’utilisateur. Par conséquent, la propriété <codeph class="+ topic/ph pr-d/codeph ">documentsDirectory</codeph> fait référence au même emplacement de répertoire que la propriété <codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph>. Le répertoire de l’utilisateur est propre à l’application.</p>	 
	 
	 </apiDesc><example conref="examples\File.documentsDirectory.1.as" class="- topic/example "> Le code suivant utilise la propriété <codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph> et la méthode <codeph class="+ topic/ph pr-d/codeph ">File.createDirectory()</codeph> pour vérifier l’existence du répertoire « AIR Test » dans le répertoire documents de l’utilisateur.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory;
directory = directory.resolvePath("AIR Test");

File.createDirectory(directory);
trace(directory.exists); // true
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:downloaded:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">downloaded</apiName><shortdesc class="- topic/shortdesc ">
	 Indique si le fichier ou le répertoire référencé a été téléchargé (depuis Internet) ou non.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique si le fichier ou le répertoire référencé a été téléchargé (depuis Internet) ou non.
	 
	 <p class="- topic/p ">Cette propriété est utile uniquement sur les systèmes d’exploitation dans lesquels les fichiers peuvent être marqués comme téléchargés :</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Windows XP Service Pack 2 et versions ultérieures, et Windows Vista</li><li class="- topic/li ">Mac OS 10.5 et versions ultérieures</li></ul>
	 
	 <p class="- topic/p ">Sur les systèmes qui ne marquent pas les fichiers comme téléchargés, tels que Linux, cette propriété n’est pas utile (et est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/openWithDefaultApplication()" class="- topic/link "><linktext class="- topic/linktext ">openWithDefaultApplication()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:exists:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">exists</apiName><shortdesc class="- topic/shortdesc ">
     Indique si le fichier ou le répertoire référencé existe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si le fichier ou le répertoire référencé existe. La valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet File pointe vers un fichier ou répertoire existant et <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	 
	 </apiDesc><example conref="examples\File.exists.1.as" class="- topic/example "> Le code suivant crée un fichier temporaire, puis le supprime et utilise la propriété <codeph class="+ topic/ph pr-d/codeph ">File.exists</codeph> pour vérifier l’existence du fichier.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var temp:File = File.createTempFile();
trace(temp.exists); // true
temp.deleteFile();
trace(temp.exists); // false
</codeblock><swfblock conref="examples\File.exists.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:icon:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">icon</apiName><shortdesc class="- topic/shortdesc ">
	 Objet Icon contenant les icônes définies pour le fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.desktop:Icon</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Objet Icon contenant les icônes définies pour le fichier. Un objet Icon est un tableau d’objets BitmapData correspondant aux différents états des icônes. Sous Linux, l’objet Icon ne contient aucune icône. Sur Android, la propriété <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	 
	 </apiDesc><example conref="examples\File.icon.1.as" class="- topic/example "> Le code suivant illustre la recherche de l’image du tableau <codeph class="+ topic/ph pr-d/codeph ">icon</codeph> dont la hauteur est la plus grande, et définit un objet Bitmap sur cette image.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;
import flash.display.*;

var directory:File = File.documentsDirectory;
var bitmaps:Array = directory.icon.bitmaps;
var bmpData:BitmapData = new BitmapData(1, 1);
for (var i:uint = 0; i &lt; bitmaps.length; i++) {
    if (bitmaps[i].height > bmpData.height) {
        bmpData = directory.icon.bitmaps[i];
    }
}
var iconBmp:Bitmap = new Bitmap(bmpData);
</codeblock> Vous pouvez ajouter cet objet Bitmap en tant qu’enfant d’un conteneur d’objet d’affichage, par exemple un objet Sprite ou un objet Flex UIComponent.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isDirectory</apiName><shortdesc class="- topic/shortdesc ">
     Indique si la référence pointe vers un répertoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si la référence pointe vers un répertoire. La valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet File pointe vers un répertoire ; <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	 
	 </apiDesc><example conref="examples\File.isDirectory.1.as" class="- topic/example "> Le code suivant crée un tableau d’objets File pointant vers les fichiers et les répertoires du dossier utilisateur, puis utilise la propriété <codeph class="+ topic/ph pr-d/codeph ">isDirectory</codeph> pour répertorier uniquement les objets File pointant vers des répertoires (pas vers des fichiers).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isDirectory) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isDirectory.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isHidden:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isHidden</apiName><shortdesc class="- topic/shortdesc ">
     Indique si le fichier ou le répertoire référencé est « masqué ». La valeur est true si le fichier ou le répertoire référencé est masqué, et false dans le cas contraire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(Waiting for Stan's OK:)
	 
	 <ul class="- topic/ul "><li class="- topic/li ">On Windows, a file or directory is designated as hidden by specifying the 
	 Hidden attribute (for example, in the File Properties dialog box) for the file.</li><li class="- topic/li ">On Mac OS and Linux, files can be designated as hidden for a number of reasons. Files with 
	 names that begin with the dot (.) character are designated as hidden. A .hidden file 
	 in the root directory lists other hidden files. Also, there is a bit in the file that, 
	 when set, makes it hidden.</li></ul>
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si le fichier ou le répertoire référencé est « masqué ». La valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si le fichier ou le répertoire référencé est masqué, et <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	 
	 </apiDesc><example conref="examples\File.isHidden.1.as" class="- topic/example "> Le code suivant crée un tableau d’objets File pointant vers les fichiers et répertoires du dossier utilisateur, puis utilise la propriété <codeph class="+ topic/ph pr-d/codeph ">isHidden</codeph> pour répertorier les fichiers et les répertoires masqués.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isHidden) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isHidden.1.swf" xml:space="preserve"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isPackage:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isPackage</apiName><shortdesc class="- topic/shortdesc ">
     Indique si le répertoire référencé est un package.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si le répertoire référencé est un package.
     
	 <p class="- topic/p ">La valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si le fichier ou le répertoire est un package, et <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire. Notez que la classe File ne permet pas de créer des packages directement.</p>
	 
	 <ul class="- topic/ul "><li class="- topic/li ">Sous Mac OS, les répertoires peuvent être désignés comme des packages et s’affichent dans le Finder sous la forme d’un seul fichier plutôt que sous la forme d’un répertoire. Cette propriété est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si le répertoire référencé est un package, et sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> si le fichier n’est pas un répertoire, n’existe pas ou n’est pas un package.</li><li class="- topic/li ">Sous les autres systèmes d’exploitation, cette propriété est toujours définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</li></ul>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isSymbolicLink:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSymbolicLink</apiName><shortdesc class="- topic/shortdesc ">
     Indique si la référence est un lien symbolique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si la référence est un lien symbolique.
     
	 <p class="- topic/p ">La valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet File pointe vers un lien symbolique, et <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire. Notez que la classe File ne permet pas de créer des liens symboliques directement.</p>
	 
	 <p class="- topic/p ">Les liens symboliques permettent à un fichier de pointer vers un autre fichier ou un répertoire du disque. Bien que similaires, les liens symboliques ne correspondent pas aux alias de Mac OS ni aux raccourcis de Windows. Un alias ou un raccourci est toujours signalé sous forme de fichier (plutôt que sous forme de répertoire) et la lecture ou l’écriture dans un alias ou un raccourci n’affecte jamais le fichier ou le répertoire original cible. En revanche, un lien symbolique se comporte généralement comme le fichier ou le répertoire vers lequel il pointe. Il peut être signalé comme un fichier ou un répertoire, et la lecture ou l’écriture dans un lien symbolique affecte le fichier ou le répertoire vers lequel il pointe, pas le lien symbolique lui-même. Notez toutefois que la suppression d’un lien symbolique supprime le lien mais pas la cible du lien.</p>
	 
	 <p class="- topic/p ">Mac<sup class="+ topic/ph hi-d/sup ">®</sup> OS<sup class="+ topic/ph hi-d/sup ">®</sup>, Linux et Windows<sup class="+ topic/ph hi-d/sup ">®</sup> Vista<sup class="+ topic/ph hi-d/sup ">®</sup> prennent en charge les liens symboliques. De plus, sous Windows, la propriété <codeph class="+ topic/ph pr-d/codeph ">isSymbolicLink</codeph> d’un objet File référençant un point de jonction (utilisé dans le système de fichiers NTFS) est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:lineEnding:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lineEnding</apiName><shortdesc class="- topic/shortdesc ">
	 Suite de caractères de fin de ligne utilisée par le système d’exploitation hôte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Suite de caractères de fin de ligne utilisée par le système d’exploitation hôte.
	 
	 <p class="- topic/p ">Sous Mac OS et Linux, il s’agit du caractère de changement de ligne (code hexadécimal 0x0A). Sous Windows, il s’agit du caractère de retour chariot (code hexadécimal 0x0D) suivi du caractère de changement de ligne (code hexadécimal 0x0A).</p>
	 
	 </apiDesc><example conref="examples\File.lineEnding.1.as" class="- topic/example "> Le code suivant écrit une chaîne (<codeph class="+ topic/ph pr-d/codeph ">str</codeph>) dans un fichier texte et utilise la propriété statique <codeph class="+ topic/ph pr-d/codeph ">File.lineEnding</codeph> pour remplacer toutes les occurrences du caractère de nouvelle ligne (représenté dans le code par l’expression régulière <codeph class="+ topic/ph pr-d/codeph ">/\n/g</codeph>) par le caractère de fin de ligne favori du système d’exploitation hôte.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.*;

var str:String = "Hello\n" + 
        "World\n";
str = str.replace(/\n/g, File.lineEnding);
var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF(str);
fileStream.close();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:nativePath:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">nativePath</apiName><shortdesc class="- topic/shortdesc ">
	 Chemin complet dans la représentation du système d’exploitation hôte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La syntaxe du chemin n’est pas valide.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’appelant n’est pas dans le sandbox de sécurité de l’application.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Chemin complet dans la représentation du système d’exploitation hôte. Sous Mac OS et Linux, la barre oblique (/) est utilisée comme séparateur de chemin. Toutefois, sous Windows, vous pouvez <i class="+ topic/ph hi-d/i ">définir</i> la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> en utilisant le caractère barre oblique ou barre oblique inverse (\) comme séparateur de chemin, et AIR remplace automatiquement la barre oblique par le caractère barre oblique inverse approprié.
	 
	<p class="- topic/p ">Avant d’écrire du code en vue de <i class="+ topic/ph hi-d/i ">définir</i> la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> directement, tenez compte du fait que cela peut impliquer l’utilisation de code spécifique à une application. Par exemple, un chemin natif tel que <codeph class="+ topic/ph pr-d/codeph ">"C:\\Documents and Settings\\bob\\Desktop"</codeph> n’est valable que sous Windows. Il est donc préférable d’utiliser les propriétés statiques suivantes, qui représentent les répertoires les plus fréquemment utilisés et qui sont valables sur toutes les plateformes :</p>
	
	<ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.applicationStorageDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.desktopDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.documentsDirectory</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">File.userDirectory</codeph></li></ul>
	
	<p class="- topic/p ">Vous pouvez utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">resolvePath()</codeph> pour obtenir un chemin relatif à ces répertoires.</p>
	
	<p class="- topic/p ">Certaines API de Flex, telles que la propriété <codeph class="+ topic/ph pr-d/codeph ">source</codeph> de la classe SWFLoader utilisent une URL (la propriété <codeph class="+ topic/ph pr-d/codeph ">url</codeph> d’un objet File), et non un chemin natif (la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph>).</p>
	
	
	
	 </apiDesc><example conref="examples\File.nativePath.1.as" class="- topic/example "> Le code suivant montre la différence entre les propriétés <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> et <codeph class="+ topic/ph pr-d/codeph ">url</codeph> d’un objet File. Les commentaires montrent les résultats sur un ordinateur Windows.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:parent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
     Répertoire qui contient le fichier ou le répertoire référencé par cet objet File.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Répertoire qui contient le fichier ou le répertoire référencé par cet objet File. 
	 
	 <p class="- topic/p ">Si le fichier ou le répertoire n’existe pas, la propriété <codeph class="+ topic/ph pr-d/codeph ">parent</codeph> renvoie toujours l’objet File pointant vers le répertoire conteneur, même si ce dernier n’existe pas.</p>
	 
	 <p class="- topic/p ">Cette propriété est identique à la valeur renvoyée par <codeph class="+ topic/ph pr-d/codeph ">resolvePath("..")</codeph> si ce n’est que le parent d’un répertoire racine est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 </apiDesc><example conref="examples\File.parent.1.as" class="- topic/example "> Le code suivant utilise la propriété <codeph class="+ topic/ph pr-d/codeph ">parent</codeph> pour indiquer le répertoire contenant un fichier temporaire.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var tempFile:File = File.createTempDirectory();
trace(tempFile.parent.nativePath);
tempFile.deleteFile();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:separator:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">separator</apiName><shortdesc class="- topic/shortdesc ">
	 Caractère de séparation des composants du chemin du système d’exploitation hôte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Caractère de séparation des composants du chemin du système d’exploitation hôte.
	 
	 <p class="- topic/p ">Sous Mac OS et Linux, il s’agit de la barre oblique (/). Sous Windows, il s’agit du caractère barre oblique inversée (\).</p>
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Remarque :</i> lorsque vous utilisez le caractère barre oblique inversée dans une chaîne littérale, pensez à taper le caractère à deux reprises (comme dans <codeph class="+ topic/ph pr-d/codeph ">"directory\\file.ext"</codeph>). Chaque paire de barres obliques inversées insérée dans une chaîne représentent une seule barre oblique inversée dans la chaîne.</p>
	 
	 </apiDesc><example conref="examples\File.separator.1.as" class="- topic/example "> Le code suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">getRelativePath()</codeph> pour obtenir le chemin relatif entre un répertoire et un fichier. Le code utilise ensuite la propriété statique <codeph class="+ topic/ph pr-d/codeph ">File.separator</codeph> pour remplacer les caractères barre oblique (/) du chemin par le caractère de séparation utilisé par le système d’exploitation, c’est-à-dire par une barre oblique inversée (\) sous Windows et une barre oblique dans les autres systèmes d’exploitation.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Apollo Test");
var file:File = File.documentsDirectory.resolvePath("Apollo Test/employees/bob/test.txt");

var relativePath:String = directory.getRelativePath(file); // employees/bob/test.txt
relativePath = relativePath.replace(/\//g, File.separator);
trace(relativePath); 
</codeblock> Dans cet exemple, la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> utilise une expression régulière <codeph class="+ topic/ph pr-d/codeph ">/\//g</codeph> pour la correspondance de <i class="+ topic/ph hi-d/i ">tous</i> les caractères barre oblique.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:spaceAvailable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">spaceAvailable</apiName><shortdesc class="- topic/shortdesc ">
	 Espace disponible pour cet emplacement File, en octets.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.1" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Espace disponible pour cet emplacement File, en octets. 
	 
	 <p class="- topic/p "> Si l’objet File fait référence à un répertoire, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> désigne l’espace pouvant être utilisé par des fichiers dans le répertoire. Si l’objet File fait référence à un fichier, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> désigne l’espace que le fichier peut occuper. Si l’emplacement du fichier n’existe pas, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> est défini sur 0. Si l’objet File fait référence à un lien symbolique, <codeph class="+ topic/ph pr-d/codeph ">spaceAvailable</codeph> désigne l’espace disponible à l’emplacement vers lequel pointe le lien symbolique.</p>
	 
	 <p class="- topic/p ">En général, l’espace disponible pour un répertoire ou un fichier correspond à l’espace disponible sur le volume contenant le répertoire ou le fichier. Toutefois, l’espace disponible peut tenir compte de quotas et de limites par répertoire.</p>
	 
	 <p class="- topic/p ">L’ajout d’un fichier ou d’un répertoire dans un volume nécessite généralement plus d’espace que la taille réelle du fichier ou du contenu du répertoire. Par exemple, le système d’exploitation peut requérir davantage d’espace pour stocker les informations d’index. De même, les secteurs du disque requis peuvent utiliser un espace supplémentaire. Enfin, l’espace disponible change de façon dynamique. Vous ne pouvez donc pas envisager d’affecter <i class="+ topic/ph hi-d/i ">tout</i> l’espace signalé au stockage des fichiers.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:systemCharset:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">systemCharset</apiName><shortdesc class="- topic/shortdesc ">
	 Codage par défaut utilisé par le système d’exploitation hôte.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Codage par défaut utilisé par le système d’exploitation hôte. 
	 
	 <p class="- topic/p ">Les valeurs possibles comprennent <codeph class="+ topic/ph pr-d/codeph ">"windows-1252"</codeph> <codeph class="+ topic/ph pr-d/codeph ">"shift-jis"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"cn-gb"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"iso-8859-1"</codeph>, etc. Pour obtenir la liste complète, voir la section <xref href="../../charset-codes.html" class="- topic/xref ">Jeux de caractères pris en charge</xref>.</p>
	 
	 <p class="- topic/p ">Vous pouvez utiliser cette valeur lorsque vous utilisez les méthodes <codeph class="+ topic/ph pr-d/codeph ">readMultiByte()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">writeMultiByte()</codeph> de la classe FileStream.</p>
	 
	 </apiDesc><example conref="examples\File.systemCharSet.1.as" class="- topic/example "> Le code suivant ouvre un fichier (le fichier test.txt situé dans le sous-répertoire AIR Test du répertoire documents de l’utilisateur) et utilise la propriété <codeph class="+ topic/ph pr-d/codeph ">File.systemCharset</codeph> comme paramètre <codeph class="+ topic/ph pr-d/codeph ">charSet</codeph> d’un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">readMultiByte()</codeph> d’un objet FileStream.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);    
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#FileStream/readMultiByte()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.readMultiByte()</linktext></link><link href="flash.filesystem.xml#FileStream/writeMultiByte()" class="- topic/link "><linktext class="- topic/linktext ">FileStream.writeMultiByte()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:url:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">url</apiName><shortdesc class="- topic/shortdesc ">
	 URL de ce chemin de fichier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>The URL will have a null "host" specification. (As opposed to "localhost". This is more confusing than 
	 informative.
	 
	 </internal></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La syntaxe de l’URL n’est pas valide.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’appelant n’est pas dans le sandbox de sécurité de l’application.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 URL de ce chemin de fichier.
	 
	 <p class="- topic/p ">S’il s’agit d’une référence à un chemin dans le répertoire de stockage de l’application, le modèle d’URL est <codeph class="+ topic/ph pr-d/codeph ">"app-storage"</codeph> ; s’il s’agit d’une référence à un chemin dans le répertoire de l’application, le modèle d’URL est <codeph class="+ topic/ph pr-d/codeph ">"app"</codeph> ; autrement le modèle est <codeph class="+ topic/ph pr-d/codeph ">"file"</codeph>. </p>
	 
	 <p class="- topic/p ">Vous pouvez utiliser des caractères d’espace vide (au lieu de <codeph class="+ topic/ph pr-d/codeph ">"%20"</codeph>) lorsque vous <i class="+ topic/ph hi-d/i ">affectez</i> une valeur à la propriété <codeph class="+ topic/ph pr-d/codeph ">url</codeph> ; AIR encode automatiquement les chaînes (par exemple conversion des espaces en <codeph class="+ topic/ph pr-d/codeph ">"%20"</codeph>).</p>
	 
	 </apiDesc><example conref="examples\File.nativePath.1.as" class="- topic/example "> Le code suivant montre la différence entre les propriétés <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> et <codeph class="+ topic/ph pr-d/codeph ">url</codeph> d’un objet File. Les commentaires montrent les résultats sur un ordinateur Windows.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#File/nativePath" class="- topic/link "><linktext class="- topic/linktext ">nativePath</linktext></link><link href="../../package.html#decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale decodeURI()</linktext></link><link href="../../package.html#decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale decodeURIComponent()</linktext></link><link href="../../package.html#encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale decodeURI()</linktext></link><link href="../../package.html#encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale decodeURIComponent()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:userDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">userDirectory</apiName><shortdesc class="- topic/shortdesc ">
	 Répertoire de l’utilisateur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Répertoire de l’utilisateur.
	 
	 <p class="- topic/p ">Sous Windows, il s’agit du parent du répertoire Mes documents (par exemple C:\Documents and Settings\nomUtilisateur). Sous Mac OS, il s’agit de /Utilisateurs/nomUtilisateur. Sous Linux, il s’agit de /home/nomUtilisateur.</p>
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">userDirectory</codeph> permet de référencer le répertoire de l’utilisateur de façon à ce qu’il fonctionne sur toutes les plateformes. Si vous définissez la propriété <codeph class="+ topic/ph pr-d/codeph ">nativePath</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">url</codeph> d’un objet File directement, elle ne fonctionne que sur la plateforme pour laquelle ce chemin est valide.</p>
	 
	 <p class="- topic/p ">Si un système d’exploitation ne prend pas en charge un répertoire de l’utilisateur, un répertoire du système de fichiers est utilisé à la place.</p>
	 
     <p class="- topic/p ">Sur les périphériques AIR pour TV, la propriété <codeph class="+ topic/ph pr-d/codeph ">userDirectory</codeph> fait référence à un répertoire de l’utilisateur propre à l’application.</p>	
     
	 </apiDesc><example conref="examples\File.userDirectory.1.as" class="- topic/example "> Le code suivant donne la liste des fichiers et répertoires contenus au niveau racine du répertoire de l’utilisateur :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
import flash.filesystem.File;

var files:Array = File.userDirectory.listDirectory();
for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.filesystem:StorageVolume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolume</apiName><shortdesc class="- topic/shortdesc ">
      Un objet StorageVolume contient des propriétés qui définissent un volume de stockage de masse.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Un objet StorageVolume contient des propriétés qui définissent un volume de stockage de masse. Cette valeur s’utilise de deux manières :
      
      <ul class="- topic/ul "><li class="- topic/li ">La propriété <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> d’un objet StorageVolumeChangeEvent représente un objet StorageVolume. Cet objet représente le volume de stockage qui a été monté ou démonté.</li><li class="- topic/li ">La méthode <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</codeph> renvoie un vecteur d’objets StorageVolume. Chacun de ces objets StorageVolume représente un volume de stockage monté.</li></ul>
      
      </apiDesc><example conref="examples\StorageVolumeExample.as" class="- topic/example "> Le code suivant répertorie les propriétés de chaque volume de stockage monté :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.filesystem.StorageVolume;
    import flash.filesystem.StorageVolumeInfo;

    public class StorageVolumeExample extends Sprite
    {
        public function StorageVolumeExample()
        {
            var volumes:Vector.&lt;StorageVolume> = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
            for (var i:int = 0; i &lt; volumes.length; i++)
            {
                var volume:StorageVolume = volumes[i];
                trace("nativePath:", volume.rootDirectory.nativePath);
                trace("fileSystemType:", volume.fileSystemType);
                trace("isRemovable:", volume.isRemovable);
                trace("isWritable:", volume.isWritable);
                trace("drive:", volume.drive);
                trace("name:", volume.name);
                trace("________________________________________________________");
            }
        }
    }
}
</codeblock></example><example conref="examples\StorageVolumeChangeEventExample.as" class="- topic/example "> Le code suivant répertorie les propriétés de chaque volume de stockage monté ou démonté. Notez que la propriété <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> de l’objet StorageVolumeChangeEvent est uniquement définie pour l’événement <codeph class="+ topic/ph pr-d/codeph ">storageVolumeMount</codeph> ; sa valeur est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> pour l’événement <codeph class="+ topic/ph pr-d/codeph ">storageVolumeUnmount</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    import flash.events.StorageVolumeChangeEvent;
    import flash.filesystem.StorageVolume;
    import flash.filesystem.StorageVolumeInfo;

    public class StorageVolumeChangeEventExample extends Sprite
    {
        public function StorageVolumeChangeEventExample()
        {
            StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT, mountEventHandler);
            StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT, unmountEventHandler);
        }
        public function mountEventHandler(event:StorageVolumeChangeEvent):void
        {            
            var volume:StorageVolume = event.storageVolume;
            trace("VOLUME MOUNTED:");
            trace("nativePath:", event.rootDirectory.nativePath);
            trace("fileSystemType:", volume.fileSystemType);
            trace("isRemovable:", volume.isRemovable);
            trace("isWritable:", volume.isWritable);
            trace("drive:", volume.drive);
            trace("name:", volume.name);
            trace();
        }
        public function unmountEventHandler(event:StorageVolumeChangeEvent):void
        {            
            trace("VOLUME UNMOUNTED:");
            trace("nativePath:", event.rootDirectory.nativePath);
            trace();
        }        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.filesystem.xml#StorageVolumeInfo/getStorageVolumes()" class="- topic/link "><linktext class="- topic/linktext ">flash.filesystem.StorageVolumeInfo.getStorageVolumes()</linktext></link><link href="flash.events.xml#StorageVolumeChangeEvent/storageVolume" class="- topic/link "><linktext class="- topic/linktext ">flash.events.StorageVolumeChangeEvent.storageVolume</linktext></link></related-links><apiConstructor id="flash.filesystem:StorageVolume:StorageVolume" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">StorageVolume</apiName><shortdesc class="- topic/shortdesc "> 
	    Fonction du constructeur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rootDirPath</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.filesystem:File</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">writable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">removable</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fileSysType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">drive</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	    Fonction du constructeur. En règle générale, vous n’appelez pas la fonction de ce constructeur directement (pour créer de nouveaux objets StorageVolume). Au lieu de cela, vous référencez les objets StorageVolume en accédant à la propriété <codeph class="+ topic/ph pr-d/codeph ">storageVolume</codeph> d’un objet StorageVolumeChangeEvent ou en appelant <codeph class="+ topic/ph pr-d/codeph ">StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</codeph>.
	    
	    </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.filesystem:StorageVolume:drive:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">drive</apiName><shortdesc class="- topic/shortdesc ">
	     Lettre de lecteur d’un volume sous Windows. </shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Lettre de lecteur d’un volume sous Windows. Sur d’autres plates-formes, cette propriété est définie sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	     
	     </apiDesc><example conref="examples\StorageVolume.drive.1.as" class="- topic/example "/></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:fileSystemType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fileSystemType</apiName><shortdesc class="- topic/shortdesc "> 
             Type de système de fichiers sur le volume de stockage (tel que "FAT", "NTFS", "HFS" ou "UFS").</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
             Type de système de fichiers sur le volume de stockage (tel que <codeph class="+ topic/ph pr-d/codeph ">"FAT"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"NTFS"</codeph>, <codeph class="+ topic/ph pr-d/codeph ">"HFS"</codeph>ou <codeph class="+ topic/ph pr-d/codeph ">"UFS"</codeph>).
             
	     </apiDesc><example conref="examples\StorageVolume.fileSystemType.1.as" class="- topic/example "> Le code suivant indique le chemin d’accès natif correspondant au répertoire racine, ainsi que le type de système de fichiers de chaque volume de stockage monté :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath, "(" + volumes[i].fileSystemType + ")");
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:isRemovable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isRemovable</apiName><shortdesc class="- topic/shortdesc ">
             Indique si le système d’exploitation considère que le volume de stockage peut être retiré (true) ou pas (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             Indique si le système d’exploitation considère que le volume de stockage peut être retiré (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) ou pas (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
             
             <p class="- topic/p ">Le tableau suivant répertorie les valeurs de la propriété <codeph class="+ topic/ph pr-d/codeph ">StorageVolume.isRemovable</codeph> pour divers types de périphériques :</p>
             
	     <adobetable class="innertable"><tgroup cols="4" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type de périphérique</entry><entry class="- topic/entry ">Mac OS</entry><entry class="- topic/entry ">Windows</entry><entry class="- topic/entry ">Linux</entry></row></thead><tbody class="- topic/tbody "><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">CD/DVD (intégré)</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Lecteur flash USB</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Disque dur USB</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Disque dur FireWire</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">true</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Volume partagé</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">1</sup></entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Lecteur de réseau</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">false</entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Lecteur de carte de stockage (vide)</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">2</sup></entry><entry align="center" class="- topic/entry ">false</entry><entry align="center" class="- topic/entry ">- <sup class="+ topic/ph hi-d/sup ">2</sup></entry></row><row align="center" class="- topic/row "><entry align="left" class="- topic/entry ">Lecteur de carte de stockage (avec carte SD/CF) </entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry><entry align="center" class="- topic/entry ">true</entry></row></tbody></tgroup></adobetable>
	     
	     <p class="- topic/p "><sup class="+ topic/ph hi-d/sup ">1</sup> Linux ne possède pas de concept de volume partagé.</p>
	     
	     <p class="- topic/p "><sup class="+ topic/ph hi-d/sup ">2</sup> Sous Windows, un lecteur de carte vide est répertorié en tant que périphérique non amovible. Sous Mac OS et Linux, les lecteurs de carte vides ne sont pas répertoriés en tant que volumes de stockage.</p>
             
	     </apiDesc><example conref="examples\StorageVolume.isRemovable.1.as" class="- topic/example "> Le code suivant génère une liste des volumes de stockage non amovibles, ainsi qu’une liste des volumes de stockage amovibles :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();

trace("Non-removeable volumes:");
for (var i:int = 0; i &lt; volumes.length; i++)
{
    if (!volumes[i].isRemovable)
    {
        trace(volumes[i].rootDirectory.nativePath);
    }
}

trace("\nRemoveable volumes:");
for (i = 0; i &lt; volumes.length; i++)
{
    if (volumes[i].isRemovable)
    {
        trace(volumes[i].rootDirectory.nativePath);
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:isWritable:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isWritable</apiName><shortdesc class="- topic/shortdesc ">
             Indique s’il est possible d’écrire sur un volume (true) ou pas (false).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
             Indique s’il est possible d’écrire sur un volume (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) ou pas (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
             
             <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> vous pouvez déterminer la quantité d’espace disponible sur un volume en appelant la propriété <codeph class="+ topic/ph pr-d/codeph ">rootDirectory.spaceAvailble</codeph> de l’objet StorageVolume.</p>
             
             </apiDesc><example conref="examples\StorageVolume.isWritable.1.as" class="- topic/example "> Le code suivant génère une liste des volumes de stockage accessibles en écriture et indique l’espace disponible sur chacun d’eux :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();

for (var i:int = 0; i &lt; volumes.length; i++)
{
    if(volumes[i].isWritable)
    {         
        trace(volumes[i].rootDirectory.nativePath, volumes[i].rootDirectory.spaceAvailable);
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="" invalidHref="flash.fileSystem.File.spaceAvailable.xml" class="- topic/link "><linktext class="- topic/linktext ">flash.fileSystem.File.spaceAvailable</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:StorageVolume:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	     Nom du volume.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Nom du volume. Si aucun nom n’est défini, cette propriété est définie sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
	     
	     </apiDesc><example conref="examples\StorageVolume.name.1.as" class="- topic/example "> Le code suivant indique le chemin d’accès natif correspondant au répertoire racine, ainsi que le nom du système de fichiers de chaque volume de stockage monté :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    var name:String = new String();
    if (volumes[i].name)
    {
        name = "(" + volumes[i].name + ")";
    }
    trace(volumes[i].rootDirectory.nativePath, name);
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:StorageVolume:rootDirectory:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rootDirectory</apiName><shortdesc class="- topic/shortdesc ">
	     Objet File correspondant au répertoire racine du volume.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	     Objet File correspondant au répertoire racine du volume.
	     
	     </apiDesc><example conref="examples\StorageVolume.rootDirectory.1.as" class="- topic/example "> Le code suivant indique le chemin d’accès natif correspondant au répertoire racine de chaque volume de stockage monté :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var volumes:Vector.&lt;StorageVolume> = new Vector.&lt;StorageVolume>;
volumes = StorageVolumeInfo.storageVolumeInfo.getStorageVolumes();
for (var i:int = 0; i &lt; volumes.length; i++)
{
    trace(volumes[i].rootDirectory.nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier></apiPackage>