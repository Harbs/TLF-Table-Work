<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="flash.data" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">flash.data</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="flash.data:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLViewSchema fournit des informations décrivant une vue spécifique dans une base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLTableSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLViewSchema fournit des informations décrivant une vue spécifique dans une base de données. Elle contient le nom de la vue (la propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph>), l’instruction SQL utilisée pour créer la vue (la propriété <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>) et des informations sur les colonnes de la vue (la propriété <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>).
 
 <p class="- topic/p ">Pour obtenir les informations du schéma d’une vue d’une base de données, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> pour charger les informations du schéma, en vous assurant d’utiliser <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> comme valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph>. Dans l’occurrence SQLSchemaResult résultante, la propriété <codeph class="+ topic/ph pr-d/codeph ">views</codeph> contient un tableau d’occurrences SQLViewSchema représentant les vues de la base de données.</p>
 
 <p class="- topic/p ">En général, le code du développeur ne construit pas directement d’occurrences SQLViewSchema.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLViewSchema:SQLViewSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLViewSchema</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLViewSchema.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données associée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la vue.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Instruction SQL utilisée pour créer la vue.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences SQLColumnSchema décrivant les colonnes de cette vue.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLViewSchema. En général, le code du développeur n’appelle pas directement le constructeur SQLViewSchema. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
 La classe SQLColumnSchema fournit des informations décrivant les caractéristiques d’une colonne spécifique dans une table de base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe SQLColumnSchema fournit des informations décrivant les caractéristiques d’une colonne spécifique dans une table de base de données.
 
 <p class="- topic/p ">Pour obtenir les informations du schéma des colonnes pour une ou plusieurs tables de base de données, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> pour charger les informations du schéma, en vous assurant d’utiliser <codeph class="+ topic/ph pr-d/codeph ">true</codeph> comme valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">includeColumnSchema</codeph>. Dans l’occurrence SQLSchemaResult résultante, chaque définition de table et de vue inclut une propriété <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>, tableau d’occurrences SQLColumnSchema représentant les colonnes de la table ou de la vue.</p>
 
 <p class="- topic/p ">En général, le code du développeur ne construit pas directement d’occurrences SQLColumnSchema.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLColumnSchema:SQLColumnSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnSchema</apiName><shortdesc class="- topic/shortdesc ">
     Construit une occurrence SQLColumnSchema.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la colonne.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">primaryKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si cette colonne fait partie de la clé primaire de la table associée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">allowNull</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si cette colonne peut contenir des valeurs <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoIncrement</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique s’il s’agit d’une colonne à incrémentation automatique.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">dataType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Type déclaré de la colonne.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">defaultCollationType</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ordre de classement défini pour cette colonne. Cette valeur correspond à l’une des constantes de la classe SQLCollationType :
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> indique que la colonne utilise l’ordre de classement <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> indique que la colonne utilise l’ordre de classement <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph>, c’est-à-dire que les comparaisons de textes ne respectent pas la casse.</li></ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Construit une occurrence SQLColumnSchema. En général, le code du développeur n’appelle pas directement le constructeur SQLColumnSchema. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLColumnSchema:allowNull:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">allowNull</apiName><shortdesc class="- topic/shortdesc ">
     Indique si les valeurs NULL sont autorisées dans cette colonne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si les valeurs <codeph class="+ topic/ph pr-d/codeph ">NULL</codeph> sont autorisées dans cette colonne. Une colonne déclarée avec une contrainte <codeph class="+ topic/ph pr-d/codeph ">NOT NULL</codeph> a une valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour la propriété <codeph class="+ topic/ph pr-d/codeph ">allowNull</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:autoIncrement:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoIncrement</apiName><shortdesc class="- topic/shortdesc ">
     Indique s’il s’agit d’une colonne à incrémentation automatique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique s’il s’agit d’une colonne à incrémentation automatique. Une colonne à incrémentation automatique est un type spécial de colonnes <codeph class="+ topic/ph pr-d/codeph ">PRIMARY KEY</codeph> dont la valeur est automatiquement générée en tant que valeur suivante d’une suite de nombres entiers lorsqu’une nouvelle ligne est insérée dans la table.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:dataType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dataType</apiName><shortdesc class="- topic/shortdesc ">
     Extrait le type de données de la colonne sous la forme d’une chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Extrait le type de données de la colonne sous la forme d’une chaîne. La valeur est le nom du type de données littéral spécifié dans l’instruction <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph> utilisée pour définir la table, ou <codeph class="+ topic/ph pr-d/codeph ">null</codeph> lorsque aucun type de données n’a été spécifié.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:defaultCollationType:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">defaultCollationType</apiName><shortdesc class="- topic/shortdesc ">
     Indique l’ordre de classement défini pour cette colonne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique l’ordre de classement défini pour cette colonne. La valeur de cette propriété correspond à l’une des constantes de la classe SQLCollationType :
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> indique que la colonne utilise l’ordre de classement <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> indique que la colonne utilise l’ordre de classement <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph>, c’est-à-dire que les comparaisons de textes ne respectent pas la casse.</li></ul>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     Extrait le nom de la colonne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Extrait le nom de la colonne.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLColumnSchema:primaryKey:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">primaryKey</apiName><shortdesc class="- topic/shortdesc ">
     Indique si cette colonne est celle de la clé primaire (ou l’une des colonnes de clé primaire dans le cas d’une clé composite) de la table associée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si cette colonne est celle de la clé primaire (ou l’une des colonnes de clé primaire dans le cas d’une clé composite) de la table associée.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLColumnNameStyle" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLColumnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
 Cette classe contient les constantes représentant les valeurs possibles de la propriété SQLConnection.columnNameStyle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Cette classe contient les constantes représentant les valeurs possibles de la propriété <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph>. Ces valeurs indiquent les différentes options qui contrôlent le formatage des noms de colonnes (noms des propriétés) dans les objets renvoyés en tant que résultat d’une instruction SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links><apiValue id="flash.data:SQLColumnNameStyle:DEFAULT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFAULT</apiName><shortdesc class="- topic/shortdesc ">
     Indique que les noms de colonnes renvoyées par une instruction SELECT utilisent le format par défaut.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">default</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique que les noms de colonnes renvoyées par une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> utilisent le format par défaut. Dans le format par défaut, les noms de colonnes ont la forme <codeph class="+ topic/ph pr-d/codeph ">[nom tableau]_[nom colonne]</codeph> lorsque plusieurs tables sont incluses dans l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">[nom colonne]</codeph> lorsque l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ne comprend qu’une seule table.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:LONG" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LONG</apiName><shortdesc class="- topic/shortdesc ">
     Indique que les noms de colonnes renvoyées par une instruction SELECT utilisent le format nom-colonne-long.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">long</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique que les noms de colonnes renvoyées par une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> utilisent le format nom-colonne-long. Dans ce format, les noms de colonnes utilisent la forme <codeph class="+ topic/ph pr-d/codeph ">[nom tableau]_[nom colonne]</codeph> quel que soit le nombre de tables incluses dans l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLColumnNameStyle:SHORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SHORT</apiName><shortdesc class="- topic/shortdesc ">
     Indique que les noms de colonnes renvoyées par une instruction SELECT utilisent le format nom-colonne-court.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">short</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique que les noms de colonnes renvoyées par une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> utilisent le format nom-colonne-court. Dans ce format, les noms de colonnes utilisent la forme <codeph class="+ topic/ph pr-d/codeph ">[nom colonne]</codeph> quel que soit le nombre de tables incluses dans l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>.
	 
	 <p class="- topic/p ">Si le jeu de résultats contient plusieurs colonnes portant le même nom, une seule propriété portant ce nom est ajoutée à l’objet de résultat. La valeur affectée à cette propriété provient de la dernière colonne portant ce nom dans la ligne de résultats. Examinons par exemple l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> suivante :</p>
	 
	 <pre xml:space="preserve" class="- topic/pre ">
	 SELECT customers.customerId, addresses.customerId
	 FROM customers INNER JOIN addresses
	    ON customers.customerId = addresses.customerId
	 </pre>
	 
	 <p class="- topic/p ">Lorsque cette instruction est exécutée sur une occurrence SQLConnection avec un format de nom de colonne court, chaque objet de résultat a une propriété nommée <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph>, contenant la valeur de la colonne <codeph class="+ topic/ph pr-d/codeph ">customerId</codeph> de la table <codeph class="+ topic/ph pr-d/codeph ">addresses</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.columnNameStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
 La classe SQLSchema est la classe de base pour les informations du schéma relatif aux objets de base de données; tels que les tables, les vues et les index.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe SQLSchema est la classe de base pour les informations du schéma relatif aux objets de base de données; tels que les tables, les vues et les index.
 
 <p class="- topic/p ">Pour obtenir les informations du schéma d’une base de données, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> pour charger les informations du schéma. L’occurrence SQLSchemaResult résultante contient des tableaux d’occurrences représentant les objets de la base de données.</p>
 
 <p class="- topic/p ">En général, le code du développeur ne construit pas directement d’occurrences SQLSchema.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchema:SQLSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchema</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLSchema.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données associée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’objet de base de données.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Code SQL utilisé pour construire l’objet de base de données.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLSchema. En général, le code du développeur n’appelle pas directement le constructeur SQLSchema. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLSchema:database:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">database</apiName><shortdesc class="- topic/shortdesc ">
     Nom de la base de données à laquelle cet objet de schéma appartient.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Nom de la base de données à laquelle cet objet de schéma appartient. Le nom est « main » pour la base de données principale associée à une occurrence SQLConnection (le fichier de bases de données est ouvert en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> d’une occurrence SQLConnection). Pour les autres bases de données associées à la connexion à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.attach()</codeph>, la valeur est le nom spécifié dans l’appel de méthode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>.
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchema:name:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
     Nom de cet objet de schéma.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Nom de cet objet de schéma. Dans une base de données, chaque objet porte un nom unique. Le nom est défini dans l’instruction SQL qui crée l’objet (telle que l’instruction <codeph class="+ topic/ph pr-d/codeph ">CREATE TABLE</codeph> pour une table).
	 
	 <p class="- topic/p ">Par exemple, si un index de base de données est créé avec l’instruction SQL suivante, la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph> du schéma de cet index est <codeph class="+ topic/ph pr-d/codeph ">« customer_index »</codeph> :</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLSchema:sql:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sql</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie l’ensemble du texte de l’instruction SQL utilisée pour créer cet objet de schéma.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie l’ensemble du texte de l’instruction SQL utilisée pour créer cet objet de schéma. Chaque objet d’une base de données est créé par une instruction SQL.
	 
	 <p class="- topic/p ">Par exemple, si un index de base de données est créé par l’instruction SQL suivante :</p>
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">CREATE INDEX customer_index ON customers (id)</codeblock>
	 <p class="- topic/p ">la propriété <codeph class="+ topic/ph pr-d/codeph ">sql</codeph> de ce schéma d’index est l’ensemble du texte de l’instruction.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLCollationType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLCollationType</apiName><shortdesc class="- topic/shortdesc ">
 Cette classe contient les constantes représentant les valeurs possibles pour le paramètre defaultCollationType du constructeur SQLColumnSchema, ainsi que la propriété SQLColumnSchema.defaultCollationType.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Cette classe contient les constantes représentant les valeurs possibles pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">defaultCollationType</codeph> du constructeur SQLColumnSchema, ainsi que la propriété <codeph class="+ topic/ph pr-d/codeph ">SQLColumnSchema.defaultCollationType</codeph>.
 
 <p class="- topic/p ">Ces valeurs représentent les différents ordres de classement pouvant être spécifiés pour une colonne dans une table de la base de données. Un <i class="+ topic/ph hi-d/i ">ordre de classement</i> est une façon de trier et de comparer les données, par exemple en indiquant si la base de données fait la différence entre les caractères majuscules et minuscules.</p>
 
 <p class="- topic/p ">Pour plus d’informations sur la définition et l’utilisation des ordres de classement, voir la section « COLLATE » dans l’annexe « <xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_fr" scope="external" class="- topic/xref ">Prise en charge de SQL dans les bases de données locales</xref> ».</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links><apiValue id="flash.data:SQLCollationType:BINARY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">BINARY</apiName><shortdesc class="- topic/shortdesc ">
     Indique que la colonne est définie pour utiliser la séquence d’interclassement BINARY.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">binary</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique que la colonne est définie pour utiliser la séquence d’interclassement <codeph class="+ topic/ph pr-d/codeph ">BINARY</codeph>. Un interclassement <codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.BINARY</codeph> compare deux valeurs en fonction de leurs valeurs d’octets, quel que soit le codage du texte des caractères.
	 
	 <p class="- topic/p ">Lorsqu’un classement binaire est utilisé avec des valeurs de la classe de stockage <codeph class="+ topic/ph pr-d/codeph ">TEXT</codeph>, la base de données fait la différence entre les caractères minuscules et majuscules lors du tri et de la comparaison des valeurs de la colonne.</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLCollationType:NO_CASE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NO_CASE</apiName><shortdesc class="- topic/shortdesc ">
     Indique que la colonne est définie pour utiliser la séquence d’interclassement NOCASE.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">noCase</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique que la colonne est définie pour utiliser la séquence d’interclassement <codeph class="+ topic/ph pr-d/codeph ">NOCASE</codeph>. Un classement <codeph class="+ topic/ph pr-d/codeph ">SQLCollationType.NO_CASE</codeph> ignore la casse pour trier et comparer deux valeurs.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema/defaultCollationType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema.defaultCollationType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLSchemaResult contient les informations résultant d’un appel à la méthode SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLSchemaResult contient les informations résultant d’un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Elle contient quatre propriétés Array qui gèrent les données de schéma demandées, sur la base des valeurs d’argument utilisées lors de l’appel à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
 
 <p class="- topic/p ">Pour récupérer l’occurrence SQLSchemaResult d’un appel à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> de l’occurrence SQLConnection. En général, le code du développeur ne crée pas directement d’occurrences SQLSchemaResult.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link></related-links><apiConstructor id="flash.data:SQLSchemaResult:SQLSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLSchemaResult.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">tables</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences SQLTableSchema tel que spécifié dans la requête <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">views</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences SQLViewSchema tel que spécifié dans la requête <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">indices</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences SQLIndexSchema tel que spécifié dans la requête <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">triggers</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences SQLTriggerSchema tel que spécifié dans la requête <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLSchemaResult. En général, le code du développeur n’appelle pas directement le constructeur SQLSchemaResult. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLSchemaResult:indices:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">indices</apiName><shortdesc class="- topic/shortdesc ">
     Tableau d’occurrences SQLIndexSchema demandé dans un appel à SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Tableau d’occurrences SQLIndexSchema demandé dans un appel à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Si les bases de données spécifiées ne contiennent pas d’index ou si l’appel <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> indique que les index doivent être exclus du résultat, la propriété <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> est un tableau vide (un tableau dont la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:tables:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">tables</apiName><shortdesc class="- topic/shortdesc ">
     Tableau d’occurrences SQLTableSchema demandé dans un appel à SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Tableau d’occurrences SQLTableSchema demandé dans un appel à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Si les bases de données spécifiées ne contiennent pas de table ou si l’appel à <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> indique que les tables doivent être exclues du résultat, la propriété <codeph class="+ topic/ph pr-d/codeph ">tables</codeph> est un tableau vide (un tableau dont la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:triggers:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">triggers</apiName><shortdesc class="- topic/shortdesc ">
     Tableau d’occurrences SQLTriggerSchema demandé dans un appel à SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Tableau d’occurrences SQLTriggerSchema demandé dans un appel à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Si les bases de données spécifiées ne contiennent pas de déclencheur ou si l’appel à <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> indique que les déclencheurs doivent être exclus du résultat, la propriété <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> est un tableau vide (un tableau dont la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLSchemaResult:views:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">views</apiName><shortdesc class="- topic/shortdesc ">
     Tableau d’occurrences SQLViewSchema demandé dans un appel à SQLConnection.loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Tableau d’occurrences SQLViewSchema demandé dans un appel à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>. Si les bases de données spécifiées ne contiennent pas de vue ou si l’appel à <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> indique que les vues doivent être exclues du résultat, la propriété <codeph class="+ topic/ph pr-d/codeph ">views</codeph> est un tableau vide (un tableau dont la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTransactionLockType" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTransactionLockType</apiName><shortdesc class="- topic/shortdesc ">
 Cette classe contient les constantes représentant les valeurs potentielles du paramètre option de la méthode SQLConnection.begin().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Cette classe contient les constantes représentant les valeurs potentielles du paramètre <codeph class="+ topic/ph pr-d/codeph ">option</codeph> de la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.begin()</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links><apiValue id="flash.data:SQLTransactionLockType:DEFERRED" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DEFERRED</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie l’option de transaction à verrouillage différé.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">deferred</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie l’option de transaction à verrouillage différé. Une transaction à verrouillage différé n’obtient aucun verrouillage de la base de données tant que celle-ci n’a pas été accédée une première fois. Avec une transaction différée, le verrouillage n’est pas obtenu avant la première opération de lecture ou d’écriture.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:EXCLUSIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">EXCLUSIVE</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie l’option de transaction à verrouillage exclusif.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">exclusive</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie l’option de transaction à verrouillage exclusif. Une transaction verrouillée exclusivement obtient immédiatement le verrouillage de la base de données. Les autres objets SQLStatement qui s’exécutent sur la même base de données par l’intermédiaire d’un objet SQLConnection différent (dans la même application AIR ou dans une autre application) ne peuvent pas lire ou écrire des données dans la base de données.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLTransactionLockType:IMMEDIATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">IMMEDIATE</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie l’option de transaction à verrouillage immédiat.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">immediate</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie l’option de transaction à verrouillage immédiat. Une transaction à verrouillage immédiat obtient immédiatement le verrouillage de la base de données. Les autres objets SQLStatement qui s’exécutent sur la même base de données par l’intermédiaire d’un objet SQLConnection différent (dans la même application AIR ou dans une autre application) peuvent lire les données de la base de données mais ne peuvent pas en écrire. Toutefois, dans le cas des autres connexions qui peuvent lire les données de la base de données, l’état initial des données de la base est identique à l’état de la base de données avant l’appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> de l’occurrence SQLConnection de la transaction entrante. Toutes les modifications de données non engagées apportées à la transaction à verrouillage immédiat ne sont pas disponibles pour les autres connexions.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLConnection est utilisée pour gérer la création et la connexion à des fichiers d’une base de données SQL locale (bases de données locales).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLConnection est utilisée pour gérer la création et la connexion à des fichiers d’une base de données SQL locale (bases de données locales).
 
 
 <p class="- topic/p ">La fonctionnalité de la classe SQLConnection appartient à plusieurs catégories :</p>
 
 <ul class="- topic/ul "><li class="- topic/li "><p class="- topic/p ">Un fichier de base de données SQL locale est créé ou ouvert en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou l’occurrence de SQLConnection sur la propriété <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> de la classe SQLStatement.</p></li><li class="- topic/li "><p class="- topic/p ">La classe SQLConnection fournit également l’état des instructions SQL, y compris un mécanisme permettant d’exécuter plusieurs instructions dans une transaction. Les transactions sont gérées à l’aide des méthodes <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>et <codeph class="+ topic/ph pr-d/codeph ">rollback(),</codeph>. En outre, les méthodes <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> permettent au code de définir et de gérer des points de sauvegarde. Elles sont utilisées pour subdiviser les transactions en jeux d’opérations. </p></li><li class="- topic/li "><p class="- topic/p ">La classe SQLConnection fournit un accès aux informations du schéma de base de données pour les bases de données connectées. Le schéma d’une base de données décrit les définitions de ses tables, colonnes, indices et déclencheurs. Reportez-vous à la méthode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> pour plus d’informations.</p></li><li class="- topic/li "><p class="- topic/p ">La classe SQLConnection permet de chiffrer les bases de données à l’aide de AES avec CCM. Cela permet d’authentifier les données et d’en assurer la privacité. Pour chiffrer une base de données, une clé de 16 octets doit être spécifiée (à l’aide d’un ByteArray) lors de la création de la base de données. Cette clé peut être modifiée ultérieurement à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.reencrypt()</codeph>. Le chiffrement ralentit les performances d’écriture et de lecture de la base de données. Le chiffrement est appliqué aux données stockées sur le disque, mais pas aux données temporaires mises en mémoire cache. Le chiffrement n’est <i class="+ topic/ph hi-d/i ">pas</i> pris en charge par les bases de données en mémoire.</p></li><li class="- topic/li "><p class="- topic/p ">Une occurrence de SQLConnection peut être utilisée pour recevoir des notifications d’événement au niveau de la base de données et permettre de contrôler la configuration de tous les aspects d’une base de données, notamment la taille de la page de cache, l’annulation de processus et les options d’exécution des instructions.</p></li></ul>
 
 <p class="- topic/p ">Une occurrence <codeph class="+ topic/ph pr-d/codeph ">SQLConnection</codeph> opère dans l’un des deux modes d’exécution distincts : asynchrone ou synchrone. Pour utiliser l’exécution synchrone, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> pour la connexion à la base de données principale de l’occurrence SQLConnection. Pour utiliser l’exécution asynchrone, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> pour la connexion à la base de données principale de l’occurrence.</p>
 
 <p class="- topic/p ">Lorsque vous utilisez l’exécution asynchrone, vous utilisez des écouteurs d’événement ou une occurrence Responder pour déterminer le moment où une opération se termine ou échoue. Les opérations s’exécutent en arrière-plan plutôt que dans le thread principal de l’application ; ainsi, l’application continue de s’exécuter et de répondre aux interactions de l’utilisateur même pendant l’exécution des opérations de la base de données. Chaque occurrence de SQLConnection asynchrone exécute les instructions SQL dans son propre thread.</p>
 
 <p class="- topic/p ">En mode d’exécution asynchrone, vous commencez une opération spécifique en appelant la méthode appropriée, et vous pouvez détecter la fin (ou l’échec) de l’opération en enregistrant un écouteur pour l’événement approprié. Chaque opération est associée à un événement qui se déclenche lorsque l’opération se termine avec succès. Par exemple, lorsqu’un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> se termine avec succès (lorsque la connexion à la base de données est établie), l’événement <codeph class="+ topic/ph pr-d/codeph ">open</codeph> se déclenche. Lorsqu’une opération échoue, un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué. L’occurrence SQLError de la propriété <codeph class="+ topic/ph pr-d/codeph ">error</codeph> de l’objet SQLErrorEvent contient des informations sur l’erreur spécifique, y compris l’opération tentée et la raison de son échec.</p>
 
 <p class="- topic/p ">Lorsque vous utilisez une exécution synchrone, il n’est pas nécessaire d’enregistrer des écouteurs d’événement pour déterminer le moment où une opération se termine ou échoue. Pour identifier les erreurs, placez les instructions rejetant l’erreur dans un bloc <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph>. Les opérations synchrones s’exécutant dans la thread d’exécution principale, toutes les fonctionnalités de l’application (y compris l’actualisation de l’écran et les interactions avec la souris et le clavier) sont interrompues pendant l’exécution de la ou des opérations de base de données. Dans le cas d’opérations à exécution longue, cela peut entraîner une interruption notable de l’application.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link><link href="flash.events.xml#SQLEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLEvent</linktext></link><link href="flash.events.xml#SQLErrorEvent" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLErrorEvent</linktext></link><link href="flash.errors.xml#SQLError" class="- topic/link "><linktext class="- topic/linktext ">flash.errors.SQLError</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_en" class="- topic/link "><linktext class="- topic/linktext ">Démarrage rapide : Utilisation asynchrone d’une base de données SQL locale (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">Démarrage rapide : Utilisation asynchrone d’une base de données SQL locale (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLasynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">Démarrage rapide : Utilisation asynchrone d’une base de données SQL locale (HTML)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_en" class="- topic/link "><linktext class="- topic/linktext ">Démarrage rapide : Utilisation asynchrone d’une base de données SQL locale (Flex)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_flash_en" class="- topic/link "><linktext class="- topic/linktext ">Démarrage rapide : Utilisation asynchrone d’une base de données SQL locale (Flash)</linktext></link><link href="http://www.adobe.com/go/learn_air_qs_SQLsynch_html_en" class="- topic/link "><linktext class="- topic/linktext ">Démarrage rapide : Utilisation asynchrone d’une base de données SQL locale (HTML)</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.UPDATE_update" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">update</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque les données d’une table de l’une des bases de données connectées changent après une commande SQL UPDATE.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.UPDATE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque les données d’une table de l’une des bases de données connectées changent après une commande SQL <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>. La modification des données peut résulter directement d’une instruction <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> exécutée par une occurrence SQLStatement, ou résulter indirectement du déclenchement d’un déclencheur en réponse à une exécution d’instruction.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SET_SAVEPOINT_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’un appel de la méthode setSavepoint() aboutit.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SET_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> aboutit.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.SCHEMA_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque l’opération d’un appel de la méthode loadSchema() se termine avec succès et que les résultats du schéma sont prêts.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.SCHEMA</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque l’opération d’un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> se termine avec succès et que les résultats du schéma sont prêts.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’un appel de la méthode rollbackToSavepoint() aboutit.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK_TO_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> aboutit.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ROLLBACK_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque une opération d’appel de la méthode rollback() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ROLLBACK</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.RELEASE_SAVEPOINT_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’un appel de la méthode releaseSavepoint() aboutit.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RELEASE_SAVEPOINT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> aboutit.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.REENCRYPT_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode reencrypt() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.REENCRYPT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/reencrypt()" class="- topic/link "><linktext class="- topic/linktext ">reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.OPEN_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode openAsync() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.OPEN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.INSERT_insert" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">insert</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque les données d’une table de l’une des bases de données connectées changent après une commande SQL INSERT.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.INSERT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque les données d’une table de l’une des bases de données connectées changent après une commande SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>. La modification des données peut résulter directement de l’exécution d’une instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> par l’intermédiaire d’une occurrence SQLStatement, ou résulter indirectement du déclenchement d’un déclencheur en réponse à l’exécution d’une instruction.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque l’une des opérations asynchrones de l’objet SQLConnection provoque une erreur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque l’une des opérations asynchrones de l’objet SQLConnection provoque une erreur. L’occurrence SQLErrorEvent déclenchée en tant qu’objet d’événement a une propriété <codeph class="+ topic/ph pr-d/codeph ">error</codeph> qui contient des informations sur l’opération tentée et sur la cause de l’échec.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DETACH_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode detach() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DETACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLUpdateEvent.DELETE_delete" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">delete</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque les données d’une table de l’une des bases de données connectées changent après une commande SQL DELETE.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLUpdateEvent.DELETE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLUpdateEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque les données d’une table de l’une des bases de données connectées changent après une commande SQL <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>. La modification des données peut résulter directement de l’exécution d’une instruction <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> par une occurrence SQLStatement, ou résulter indirectement du déclenchement d’un déclencheur en réponse à l’exécution d’une instruction.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.DEANALYZE_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode deanalyze() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.DEANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMMIT_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode commit() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMMIT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CLOSE_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode close() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CLOSE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.COMPACT_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode compact() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.COMPACT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/compact()" class="- topic/link "><linktext class="- topic/linktext ">compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.CANCEL_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode cancel() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.CANCEL</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/cancel()" class="- topic/link "><linktext class="- topic/linktext ">cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.BEGIN_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode begin() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.BEGIN</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ATTACH_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération d’appel de la méthode attach() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ATTACH</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération d’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection_flash.events.SQLEvent.ANALYZE_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une opération analyze() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.ANALYZE</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une opération <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> se termine avec succès.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLConnection:SQLConnection" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLConnection</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLConnection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">si un constructeur est appelé à partir d’un sandbox extérieur à celui de l’application principale. 
      
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLConnection.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLConnection:addEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	Enregistre un objet écouteur d’événement auprès d’un objet EventDispatcher afin que l’écouteur soit averti d’un événement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Type d’événement.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction d’auditeur qui traite l’événement. Cette fonction doit accepter un objet Event comme paramètre unique et ne rien renvoyer<ph class="- topic/ph ">, comme illustré ci-dessous :</ph>
	
	
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function(evt:Event):void</codeblock>
	
	<p class="- topic/p ">Le nom de cette fonction n’a aucune importance.</p>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Détermine si l’écouteur est actif pendant la phase de capture ou pendant les phases cible et de propagation. Si la propriété <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’écouteur traite l’événement uniquement pendant la phase de capture et non pendant les phases cible et de propagation. Si la propriété <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, l’écouteur traite l’événement uniquement pendant les phases cible et de propagation. Pour écouter l’événement dans les trois phases, appelez <codeph class="+ topic/ph pr-d/codeph ">addEventListener</codeph> à deux reprises, une première fois en définissant <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, puis une nouvelle fois en définissant <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. </ph>
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">priority</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0.0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Niveau de priorité de l’écouteur d’événement. La priorité est indiquée par un entier signé de 32 bits. Plus le nombre est élevé, plus la priorité est élevée. Tous les écouteurs dont la priorité correspond à <i class="+ topic/ph hi-d/i ">n</i> sont traités avant les écouteurs dotés de la priorité <i class="+ topic/ph hi-d/i ">n</i> -1. Les écouteurs dont la priorité est identique sont traités dans l’ordre où ils ont été ajoutés. La priorité par défaut est 0.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useWeakReference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Détermine si la référence à l’écouteur est forte ou faible. Une référence forte (valeur par défaut) empêche le nettoyage de votre écouteur, Cela n’est pas le cas avec une référence faible. <p class="- topic/p ">Les fonctions de membres de niveau classe n’étant pas soumises au nettoyage, vous pouvez définir <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour ces fonctions. Si vous définissez <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour un écouteur correspondant à une fonction imbriquée interne, la fonction sera nettoyée et ne sera donc pas permanente. Si vous créez des références à la fonction interne (enregistrée dans une autre variable), celle-ci n’est pas nettoyée et reste permanente.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	Enregistre un objet écouteur d’événement auprès d’un objet EventDispatcher afin que l’écouteur soit averti d’un événement. <ph class="- topic/ph ">Vous pouvez enregistrer les écouteurs d’événement dans tous les nœuds de la liste d’affichage pour un type spécifique d’événement, de phase et de priorité.</ph>
	
	
	
	<p class="- topic/p ">Après l’enregistrement d’un écouteur d’événement, vous ne pouvez plus modifier sa priorité par d’autres appels de <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph>. Pour modifier la priorité d’un écouteur, vous devez d’abord appeler <codeph class="+ topic/ph pr-d/codeph ">removeListener()</codeph>. Vous pouvez ensuite réenregistrer l’écouteur avec le nouveau niveau de priorité. </p>
	
	<p class="- topic/p ">N’oubliez pas qu’une fois l’écouteur enregistré, tous les prochains appels de <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> avec une valeur <codeph class="+ topic/ph pr-d/codeph ">type</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> différente entraîneront la création d’un autre enregistrement d’écouteur. <ph class="- topic/ph ">Si, par exemple, vous enregistrez un écouteur dans lequel la propriété <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, il écoute uniquement pendant la phase de capture. Si vous appelez <codeph class="+ topic/ph pr-d/codeph ">addEventListener()</codeph> à l’aide du même objet écouteur, mais en définissant <codeph class="+ topic/ph pr-d/codeph ">useCapture</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, vous obtenez deux écouteurs distincts : l’un qui écoute pendant la phase de capture et l’autre qui écoute pendant les phases cible et de propagation vers le haut (bubbling).</ph>
	</p>
	
	<p class="- topic/p ">Il est impossible d’enregistrer un écouteur d’événement uniquement pour la phase cible ou la phase de propagation vers le haut. Ces deux phases sont associées pendant l’enregistrement car la propagation vers le haut s’applique uniquement aux ancêtres du nœud cible.</p>
	
	<p class="- topic/p ">Si vous n’avez plus besoin d’un écouteur d’événements, supprimez-le en appelant <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph>, afin d’éviter tout problème de mémoire. Les écouteurs d’événement ne sont pas automatiquement supprimés de la mémoire, car le nettoyeur de mémoire ne supprime pas l’écouteur tant que l’objet de distribution existe (à moins que le paramètre <codeph class="+ topic/ph pr-d/codeph ">useWeakReference</codeph> ne soit défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).</p>
		
	<p class="- topic/p ">Lors de la copie d’une occurrence d’EventDispatcher, les écouteurs d’événement qui lui sont associés ne sont pas pris en compte (si le nouveau nœud nécessite un écouteur d’événement, vous devez associer celui-ci après la création du nœud). Toutefois, si vous déplacez une occurrence d’EventDispatcher, les écouteurs d’événement qui lui sont associés la suivent.</p>
	
	
	<p class="- topic/p ">Si un écouteur d’événement est enregistré sur un nœud alors qu’un événement est en cours de traitement sur ce nœud, l’écouteur n’est pas déclenché pendant la phase actuelle, mais il peut l’être pendant une phase ultérieure du flux d’événements, telle que la phase de propagation vers le haut (bubbling).</p>
	
	<p class="- topic/p ">Si un écouteur d’événement est supprimé d’un nœud sur lequel un événement est en cours de traitement, il est cependant déclenché par les actions en cours. Une fois supprimé, l’écouteur d’événement n’est plus jamais appelé (à moins d’être réenregistré à des fins de traitement ultérieur). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><shortdesc class="- topic/shortdesc ">
     Collecte des statistiques sur les index de base de données et les stocke dans la base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque cette méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">resourceName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données ou de la table dont les indices doivent être analysés. Si la ressource spécifiée est une table dont le nom est unique parmi toutes les bases de données associées, seul le nom de la table doit être spécifié. Toutefois, un nom de table peut être spécifié au format <codeph class="+ topic/ph pr-d/codeph ">[nom-base de données].[nom-table]</codeph> afin d’éviter toute ambiguïté lorsque le nom de la table n’est pas unique. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (par défaut), tous les indices de toutes les bases de données associées sont analysés.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">analyze</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué lorsque l’exécution se termine.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Collecte des statistiques sur les index de base de données et les stocke dans la base de données. Ces statistiques peuvent alors être utilisées par l’optimiseur de requêtes (la partie du moteur de base de données qui détermine le moyen le plus efficace pour exécuter chaque instruction). Les statistiques permettent à l’optimiseur de requêtes d’améliorer ses choix quant aux index ou index à utiliser pour exécuter une requête particulière.
	 
	 <p class="- topic/p ">Si des indices ont été définis pour une base de données mais que la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> n’a pas été appelée, l’exécution continue à utiliser ces indices pour exécuter les instructions. Toutefois, sans les informations statistiques supplémentaires générées par la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>, il est possible que le moteur d’exécution ne choisisse pas l’index le plus efficace pour une requête particulière.</p>
	 
	 <p class="- topic/p ">Lorsque les données d’une table changent (après des instructions <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph>), les indices associés à cette table changent également. Les informations statistiques générées par la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> ne sont pas mises à jour automatiquement. Par conséquent, après un grand nombre de changements de données, un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> peut être bénéfique. L’avantage apporté par un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> dépend toutefois de plusieurs facteurs : le nombre d’indices définis sur une table, le rapport entre le nombre de lignes modifiées et le nombre total de lignes de la table, la quantité de variations existant dans les données indexées de la table et l’importance de la différence entre les données modifiées et les données d’origine.</p>
     
     <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> indique si l’opération est exécutée sur les indices de toutes les bases de données attachées, d’une base de données spécifique ou d’une table spécifique.</p>
     
     <p class="- topic/p ">A chaque appel de cette méthode, toutes les données statistiques précédemment créées sont purgées et recréées pour la base de données ou la table spécifiée dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> (ou toutes les tables de toutes les bases de données connectées si <codeph class="+ topic/ph pr-d/codeph ">resourceName</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>). Cette méthode peut être appelée à tout moment lorsque que la connexion à la base de données est établie. L’opération <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> et ses données statistiques ne sont pas incluses dans une transaction. Toutefois, il est préférable de ne pas appeler <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> lorsqu’une transaction est en cours dans la base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph><codeph class="+ topic/ph pr-d/codeph "> est true</codeph>). Cela est dû au fait que toutes les modifications de données, de schéma de table ou d’index exécutées dans la transaction mais non encore validées ne seront pas pris en compte par l’appel <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> et les données d’<codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> seront obsolètes dès la validation de la transaction.</p>
     
     <p class="- topic/p ">Pour supprimer les données statistiques créées avec la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/deanalyze()" class="- topic/link "><linktext class="- topic/linktext ">deanalyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:analyze_analyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">analyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:analyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute une autre base de données à l’occurrence SQLConnection, en lui attribuant le nom spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) ou <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> n’est pas une occurrence de flash.filesystem.File
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque l’argument <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et sa propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> n’est pas de 16 octets
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et l’argument <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque l’occurrence de SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ; ou si une transaction est actuellement en cours (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom utilisé pour identifier la nouvelle base de données attachée. Ce nom peut être utilisé dans les instructions SQL pour indiquer explicitement qu’une table appartient à la base de données spécifiée, lorsque le format <codeph class="+ topic/ph pr-d/codeph ">[nom-base de données].[nom-table]</codeph> est utilisé. Les noms « main » et « temp » sont réservés et ne peuvent pas être choisis.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Référence au fichier de base de données à associer (une occurrence flash.filesystem.File). Si la référence désigne un fichier qui n’existe pas, un nouveau fichier de base de données est créé ou une erreur est renvoyée selon la valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> dans l’appel <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> qui effectuait la connexion à la base de données principale.
	 
     <p class="- topic/p ">Si la valeur du paramètre est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, une base de données en mémoire est créée et associée.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">attach</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué lorsque l’exécution se termine.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La clé de chiffrement pour le fichier de base de données. Si l’appel de <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> crée une base de données, celle-ci est chiffrée et la clé spécifiée est utilisée comme clé de chiffrement. Si l’appel joint une base de données chiffrée existante, la valeur doit correspondre à la clé de chiffrement de la base de données ; dans le cas contraire, une erreur se produit. Si la base de données actuellement jointe n’est pas chiffrée, ou pour créer une base de données non chiffrée, la valeur doit être <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (valeur par défaut).
	 
	 <p class="- topic/p ">Pour qu’une clé de chiffrement soit valide, sa longueur doit être de 16 octets. Une base de données en mémoire ne peut pas être chiffrée ; par conséquent, ce paramètre doit être <codeph class="+ topic/ph pr-d/codeph ">null</codeph> lorsque la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">Lorsque vous joignez une base de données chiffrée, si la clé de chiffrement fournie ne correspond pas à celle de la base de données, une exception est renvoyée. En mode d’exécution synchrone, une exception SQLError est renvoyée. En mode d’exécution asynchrone, un SQLErrorEvent est distribué et la propriété <codeph class="+ topic/ph pr-d/codeph ">error</codeph> de l’objet événement contient une occurrence de SQLError. Dans les deux cas, la propriété <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> de l’objet SQLError est 3138 (« Le fichier ouvert n’est pas un fichier de base de données »).</p>
	 
	 <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> est disponible à partir de la version 1.5 d’AIR.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute une autre base de données à l’occurrence SQLConnection, en lui attribuant le nom spécifié. L’association d’une base de données permet d’utiliser cette dernière dans les instructions SQL exécutées sur l’occurrence SQLConnection.
     
     <p class="- topic/p ">Si une base de données est déjà associée à l’aide du nom spécifié, un appel à <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> entraîne une erreur. Toutefois, la même base de données peut être associée plusieurs fois à l’aide de noms uniques. Au maximum, dix bases de données peuvent être associées à une même occurrence SQLConnection.</p>
     
     <p class="- topic/p ">Toute instruction SQL peut être exécutée sur une base de données connectée par la méthode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph> qui peut être exécutée sur la base de données principale (celle qui est connectée avec <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>). Une instruction SQL peut accéder aux tables de toute base de données associée à l’occurrence SQLConnection conjointe de l’instruction, y compris en accédant aux tables de plusieurs bases de données dans une même instruction. Lorsque le moteur d’exécution résout les noms de table en instruction, elle lance une recherche dans les bases de données de l’occurrence SQLConnection dans l’ordre dans lequel celles-ci ont été associées, en commençant par la base de données connectée à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>. Pour qualifier un nom de table de façon explicite, utilisez le nom de sa base de données (tel que spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> de la méthode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>) dans l’instruction.</p>
     
     <p class="- topic/p ">Pour supprimer une base de données associée à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">detach()</codeph>. A la fermeture de l’occurrence SQLConnection (par un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>), toutes les bases de données associées sont dissociées.</p>
     
     <p class="- topic/p ">La base de données associée utilise le même mode d’exécution (synchrone ou asynchrone) que la base de données principale, selon que cette dernière a été connectée à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/detach()" class="- topic/link "><linktext class="- topic/linktext ">detach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:attach_attach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">attach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:attach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><shortdesc class="- topic/shortdesc ">
     Commence une transaction, dans laquelle toutes les instructions SQL exécutées sur la ou les bases de données de la connexion sont regroupées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque cette méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’option spécifiée n’est pas l’une des constantes SQLTransactionLockType.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">option</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique la stratégie de verrouillage utilisée par la transaction. La valeur peut correspondre à l’une des constantes définies dans la classe SQLTransactionLockType :
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph> indique que le verrouillage n’est pas effectif avant la première opération de lecture ou d’écriture.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.EXCLUSIVE</codeph> indique que le verrouillage est effectif dès que possible, et qu’aucune autre occurrence SQLConnection ne peut lire ou écrire dans la base de données.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.IMMEDIATE</codeph> indique que le verrouillage est effectif dès que possible, et que les autres occurrences SQLConnection peuvent lire mais pas écrire dans la base de données.</li></ul>
	 <p class="- topic/p ">La valeur par défaut (<codeph class="+ topic/ph pr-d/codeph ">null</codeph>) équivaut à <codeph class="+ topic/ph pr-d/codeph ">SQLTransactionLockType.DEFERRED</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">begin</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Commence une transaction, dans laquelle toutes les instructions SQL exécutées sur la ou les bases de données de la connexion sont regroupées.
     
     <p class="- topic/p ">Par défaut, chaque instruction SQL est exécutée dans sa propre transaction et celle-ci se termine lorsque l’exécution de l’instruction réussit ou échoue. La création d’une transaction à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> entraîne la création d’une nouvelle transaction manuelle. A partir de ce point, toutes les instructions SQL exécutées sur l’occurrence SQLConnection le sont dans la transaction, et toutes les actions ou modifications exécutées par les instructions peuvent être validées (rendues permanentes) ou annulées en un seul lot.</p>
     
	 <p class="- topic/p ">Pour terminer une transaction, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>, selon que les modifications apportées par les instructions de la transaction doivent devenir permanentes ou être annulées.</p>
	 
     <p class="- topic/p ">Les appels imbriqués à <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph> sont ignorés. Vous pouvez créer des points de sauvegarde (semblables aux signets dans une transaction) en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>. Vous pouvez ensuite partiellement valider ou restaurer les instructions SQL en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>. Toutefois, si une transaction est lancée en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, les modifications ne sont pas définitivement validées dans la base de données tant que la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> n’est pas appelée.</p>
     
	 <p class="- topic/p ">Si la connexion à la base de données se ferme lorsqu’une transaction est en cours, AIR restaure automatiquement la transaction (remarque : pour AIR 1.1 et versions antérieures, une transaction en cours est automatiquement validée lorsqu’une connexion se ferme).</p>
     
     <p class="- topic/p ">Une transaction n’est pas limitée aux exécutions d’instructions dans une seule base de données, mais peut comprendre des instructions exécutées sur d’autres bases de données associées.</p>
     
     </apiDesc><example conref="examples\SQLConnection.transactions.1.as" class="- topic/example "> L’exemple suivant explique comment exécuter plusieurs instructions SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> dans une transaction. Une ligne est tout d’abord ajoutée à la table « employees ». La clé primaire de la ligne nouvellement insérée est ensuite récupérée, puis utilisée en vue d’ajouter une ligne à la table « phoneNumbers » associée.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiInsertTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var insertEmployee:SQLStatement;
        private var insertPhoneNumber:SQLStatement;
        
        public function MultiInsertTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // create and execute the first SQL statement:
            // insert an employee record
            insertEmployee = new SQLStatement();
            insertEmployee.sqlConnection = conn;
            insertEmployee.text = 
                "INSERT INTO employees (lastName, firstName, email) " + 
                "VALUES (:lastName, :firstName, :email, :birthday)";
            insertEmployee.parameters[":lastName"] = "Smith";
            insertEmployee.parameters[":firstName"] = "Bob";
            insertEmployee.parameters[":email"] = "bsmith@example.com";
            insertEmployee.parameters[":birthday"] = new Date(1971, 8, 12);
            
            insertEmployee.addEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertEmployee.execute();
        }
        
        // Called after the employee record is inserted
        private function insertEmployeeHandler(event:SQLEvent):void
        {
            insertEmployee.removeEventListener(SQLEvent.RESULT, insertEmployeeHandler);
            insertEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // Get the employee id of the newly created employee row
            var result:SQLResult = insertEmployee.getResult();
            var employeeId:Number = result.lastInsertRowID;
            
            // Add a phone number to the related phoneNumbers table
            insertPhoneNumber = new SQLStatement();
            insertPhoneNumber.sqlConnection = conn;
            insertPhoneNumber.text =
                "INSERT INTO phoneNumbers (employeeId, type, number) " +
                "VALUES (:employeeId, :type, :number)";
            insertPhoneNumber.parameters[":employeeId"] = employeeId;
            insertPhoneNumber.parameters[":type"] = "Home";
            insertPhoneNumber.parameters[":number"] = "(555) 555-1234";
            
            insertPhoneNumber.addEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            insertPhoneNumber.execute();
        }
        
        // Called after the phone number record is inserted
        private function insertPhoneNumberHandler(event:SQLEvent):void
        {
            insertPhoneNumber.removeEventListener(SQLEvent.RESULT, insertPhoneNumberHandler);
            insertPhoneNumber.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example><example conref="examples\SQLConnection.transactions.2.as" class="- topic/example "> L’exemple suivant explique comment exécuter plusieurs instructions SQL <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> dans une transaction. Cette transaction permet de supprimer un employé. Les lignes correspondantes dans la table « phoneNumbers » sont tout d’abord supprimées. La ligne correspondant à l’employé est ensuite supprimée de la table « employees ».
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.data.SQLConnection;
    import flash.data.SQLResult;
    import flash.data.SQLStatement;
    import flash.display.Sprite;
    import flash.events.SQLErrorEvent;
    import flash.events.SQLEvent;
    import flash.filesystem.File;
    
    public class MultiDeleteTransactionExample extends Sprite
    {
        private var conn:SQLConnection;
        private var deleteEmployee:SQLStatement;
        private var deletePhoneNumbers:SQLStatement;
        
        private var employeeIdToDelete:Number = 25;
        
        public function MultiDeleteTransactionExample():void
        {
            // define where to find the database file
            var appStorage:File = File.applicationStorageDirectory;
            var dbFile:File = appStorage.resolvePath("ExampleDatabase.db");
            
            // open the database connection
            conn = new SQLConnection();
            conn.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            conn.addEventListener(SQLEvent.OPEN, openHandler);
            conn.openAsync(dbFile);
        }
        
        // Called when the database is connected
        private function openHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.OPEN, openHandler);
            
            // start a transaction
            conn.addEventListener(SQLEvent.BEGIN, beginHandler);
            conn.begin();
        }
        
        // Called when the transaction begins
        private function beginHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.BEGIN, beginHandler);
            
            // Create and execute the first SQL statement:
            // Delete an employee's phone number records
            deletePhoneNumbers = new SQLStatement();
            deletePhoneNumbers.sqlConnection = conn;
            deletePhoneNumbers.text =
                "DELETE FROM phoneNumbers " +
                "WHERE employeeId = :employeeId";
            deletePhoneNumbers.parameters[":employeeId"] = employeeIdToDelete;
            
            deletePhoneNumbers.addEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deletePhoneNumbers.execute();
        }
        
        // Called after the phone number records are deleted
        private function deletePhoneNumbersHandler(event:SQLEvent):void
        {
            deletePhoneNumbers.removeEventListener(SQLEvent.RESULT, deletePhoneNumbersHandler);
            deletePhoneNumbers.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee = new SQLStatement();
            deleteEmployee.sqlConnection = conn;
            deleteEmployee.text = 
                "DELETE FROM employees " + 
                "WHERE employeeId = :employeeId";
            deleteEmployee.parameters[":employeeId"] = employeeIdToDelete;
            
            deleteEmployee.addEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.addEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            deleteEmployee.execute();
        }
        
        // Called after the employee record is deleted
        private function deleteEmployeeHandler(event:SQLEvent):void
        {
            deleteEmployee.removeEventListener(SQLEvent.RESULT, deleteEmployeeHandler);
            deleteEmployee.removeEventListener(SQLErrorEvent.ERROR, errorHandler);
            
            // No errors so far, so commit the transaction
            conn.addEventListener(SQLEvent.COMMIT, commitHandler);
            conn.commit();
        }
        
        // Called after the transaction is committed
        private function commitHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.COMMIT, commitHandler);
            
            trace("Transaction complete");
        }
        
        // Called whenever an error occurs
        private function errorHandler(event:SQLErrorEvent):void
        {
            // If a transaction is happening, roll it back
            if (conn.inTransaction)
            {
                conn.addEventListener(SQLEvent.ROLLBACK, rollbackHandler);
                conn.rollback();
            }
            
            trace(event.error.message);
            trace(event.error.details);
        }
        
        // Called when the transaction is rolled back
        private function rollbackHandler(event:SQLEvent):void
        {
            conn.removeEventListener(SQLEvent.ROLLBACK, rollbackHandler);
            
            // add additional error handling, close the database, etc.
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLTransactionLockType" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTransactionLockType</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:begin_begin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">begin</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:begin_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     Annule toutes les instructions SQL en cours d’exécution sur les bases de données connectées à l’occurrence SQLConnection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque cette méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">cancel</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Annule toutes les instructions SQL en cours d’exécution sur les bases de données connectées à l’occurrence SQLConnection. Cette méthode peut être utilisée pour interrompre des requêtes d’exécution longue ou des requêtes qui s’emballent.
     
     <p class="- topic/p ">Si des instructions s’exécutent lors de l’appel à <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph>, cette méthode annule les opérations des instructions et toutes les mises à jour ou transactions incomplètes sont annulées. Lorsque aucune instruction n’est en cours d’exécution, l’appel à cette méthode annule la transaction ouverte, sinon elle est sans effet.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:cancel_cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
	 
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:cancel_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><shortdesc class="- topic/shortdesc ">
     Ferme la connexion à la base de données en cours.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">close</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ferme la connexion à la base de données en cours. Toutes les bases de données associées sont également dissociées.
     
     <p class="- topic/p ">Si une transaction est ouverte lors de l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>, la transaction est validée. Lorsqu’une occurrence SQLConnection est nettoyée, le moteur d’exécution appelle automatiquement <codeph class="+ topic/ph pr-d/codeph ">close()</codeph>, y compris si une application AIR est fermée alors qu’une occurrence SQLConnection est toujours connectée à une base de données.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:close_close" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">close</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:close_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><shortdesc class="- topic/shortdesc ">
     Valide une transaction existante, en rendant permanentes toutes les actions effectuées par ses instructions dans la base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ; ou si aucune transaction n’est actuellement ouverte (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">commit</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué lorsque l’exécution se termine.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Valide une transaction existante, en rendant permanentes toutes les actions effectuées par ses instructions dans la base de données.
     
	 <p class="- topic/p ">Il est possible de créer des points de sauvegarde intermédiaires, semblables aux signets dans une transaction, en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>. Les points de sauvegarde permettent de valider (via l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>) ou de restaurer (via l’appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>) certaines parties d’une transaction. Toutefois, si une transaction est ouverte à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, les modifications ne sont pas définitivement enregistrées dans la base de données tant que l’ensemble de la transaction n’est pas validée via l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>.</p>
	 
	 <p class="- topic/p ">Si une transaction utilise des points de sauvegarde, les instructions qui ont été restaurées à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> ne sont pas validées lorsque l’intégralité de la transaction est validée. Les instructions qui ont été validées à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>, ou dont les points de sauvegarde n’ont pas été publiés ou restaurés, sont validées dans la base de données.</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:commit_commit" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">commit</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:commit_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec un échec.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec un échec.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><shortdesc class="- topic/shortdesc ">
     Récupère tout l’espace non utilisé dans la base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ; ou si une transaction est actuellement en cours (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">compact</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Récupère tout l’espace non utilisé dans la base de données. Lorsqu’un objet (table, index ou déclencheur) est abandonné dans la base de données, il laisse un espace vide. Le fichier de bases de données est alors plus volumineux que nécessaire, mais cela peut accélérer les opérations <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>. Avec le temps, les opérations <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> et <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> peuvent fragmenter la structure du fichier de la base de données, ce qui ralentit les accès disque au contenu de la base de données. Cette méthode compacte le fichier de base de données en éliminant les pages libres, en alignant les données de la table de façon contiguë et en nettoyant la structure du fichier de base de données.
     
     <p class="- topic/p ">L’opération <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph> ne peut pas être exécutée sur un fichier d’une base de données associée, mais uniquement sur le fichier de la base de données principale (originale) ouvert par l’occurrence SQLConnection. Cette opération échoue si une transaction est active et n’a pas d’effet sur une base de données en mémoire.</p>
     
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.data:SQLConnection:compact_compact" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">compact</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:compact_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><shortdesc class="- topic/shortdesc ">
     Supprime toutes les informations statistiques créées par un appel de la méthode analyze().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque cette méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">deanalyze</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Supprime toutes les informations statistiques créées par un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph>.
	 
	 <p class="- topic/p ">Les statistiques générées par la méthode <codeph class="+ topic/ph pr-d/codeph ">analyze()</codeph> occupant de l’espace dans une base de données, un appel à <codeph class="+ topic/ph pr-d/codeph ">deanalyze()</codeph> vous permet de récupérer cet espace, par exemple après l’abandon de plusieurs indices ou tables.</p>
     
     <p class="- topic/p ">Cette opération n’est pas incluse dans une transaction active.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/analyze()" class="- topic/link "><linktext class="- topic/linktext ">analyze()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:deanalyze_deanalyze" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">deanalyze</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:deanalyze_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><shortdesc class="- topic/shortdesc ">
     Dissocie une base de données supplémentaire précédemment associée à l’occurrence SQLConnection à l’aide de la méthode attach().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou contient une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si cette méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ou si une transaction est actuellement ouverte dans l’occurrence SQLConnection (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données à dissocier.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">detach</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dissocie une base de données supplémentaire précédemment associée à l’occurrence SQLConnection à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">attach()</codeph>. Il est possible d’associer le même fichier de base de données plusieurs fois à l’aide de noms différents et de dissocier une connexion à un fichier sans toucher aux autres connexions. Il est impossible de dissocier une base de données si la connexion contient une transaction ouverte (c’est-à-dire si la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:detach_detach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">detach</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:detach_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:getSchemaResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSchemaResult</apiName><shortdesc class="- topic/shortdesc ">
     Permet d’accéder au résultat d’un appel à la méthode loadSchema().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLSchemaResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Permet d’accéder au résultat d’un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> se comporte comme une file d’attente de résultats premier entré-premier sorti. Chaque fois qu’un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> se termine (chaque fois que l’événement <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> est déclenché en mode d’exécution asynchrone), un nouvel objet SQLSchemaResult est ajouté à la file d’attente. Chaque fois que la méthode <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> est appelée, le premier résultat (celui qui a été ajouté en premier à la file d’attente) est renvoyé et retiré de la file. Lorsqu’il ne reste plus aucun objet dans la file d’attente, <codeph class="+ topic/ph pr-d/codeph ">getSchemaResult()</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     <p class="- topic/p ">Lorsque la connexion à la base de données est fermée, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">loadSchema()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">schéma, événement</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLConnection:loadSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">loadSchema</apiName><shortdesc class="- topic/shortdesc ">
     Charge les informations de schéma depuis la base de données connectées ou depuis l’une des bases de données associées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’occurrence de SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la valeur de l’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> spécifié n’est pas l’un des types autorisés.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lors d’une utilisation en mode d’exécution synchrone, si une valeur non valide est fournie pour les paramètres name ou database.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Class</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique le type de schéma à charger. Une valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (définie par défaut) indique que toutes les informations du schéma doivent être chargées. La définition d’une valeur non <codeph class="+ topic/ph pr-d/codeph ">null</codeph> pour ce paramètre limite l’étendue du schéma résultant, en supprimant les informations potentiellement inutiles des résultats et en rendant l’opération plus efficace. La valeur doit être le nom de l’une des classes suivantes :
	 <ul class="- topic/ul "><li class="- topic/li ">SQLIndexSchema</li><li class="- topic/li ">SQLTableSchema</li><li class="- topic/li ">SQLTriggerSchema</li><li class="- topic/li ">SQLViewSchema</li></ul>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique quel schéma de ressources est chargé. La manière dont cette valeur est utilisée dépend de l’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> spécifié. En général, il s’agit du nom d’un objet de base de données, tel que le nom d’une table, d’un index ou d’une vue, etc. Lorsqu’une valeur est spécifiée, seules les informations du schéma de l’objet de base de données portant le nom spécifié sont incluses dans le résultat.
	 
	 <p class="- topic/p ">Si la valeur spécifiée n’est pas valide, un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est déclenché (ou une erreur est renvoyée en mode d’exécution synchrone). La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">type</codeph> doit correspondre au type de l’objet nommé pour que la valeur soit valide, selon la description de la méthode.</p>
	 
	 <p class="- topic/p ">Si l’argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, toutes les données de schéma du type spécifié sont incluses. Si la valeur spécifiée n’est pas valide, un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est déclenché.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">main</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données dont le schéma est chargé. Si la valeur spécifiée n’est pas valide, un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est déclenché.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">includeColumnSchema</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si le résultat comprend les informations du schéma des colonnes des tables et des vues.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Charge les informations de schéma depuis la base de données connectées ou depuis l’une des bases de données associées. Le schéma indique la structure des tables, des colonnes, des index et des déclencheurs de la base de données.
	 
     <p class="- topic/p ">Pour accéder au schéma chargé, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.getSchemaResult()</codeph>.</p>
	 
     <p class="- topic/p ">En mode d’exécution asynchrone, un événement <codeph class="+ topic/ph pr-d/codeph ">schema</codeph> est déclenché si l’opération réussit, ou un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est déclenché si elle échoue.</p>
	 
	 <p class="- topic/p ">La combinaison des valeurs des paramètres <codeph class="+ topic/ph pr-d/codeph ">type</codeph> et <codeph class="+ topic/ph pr-d/codeph ">name</codeph> détermine le type de données du schéma généré par la méthode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph>, et par conséquent les valeurs des propriétés de l’occurrence SQLSchemaResult générées. Le tableau suivant présente la liste des paires <codeph class="+ topic/ph pr-d/codeph ">type</codeph> et <codeph class="+ topic/ph pr-d/codeph ">name</codeph> valides et les données de schéma générées en résultat :</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph></entry><entry class="- topic/entry ">Argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph></entry><entry class="- topic/entry ">Récupère les données de schéma pour : </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">tous les objets de la base de données (tables, vues, déclencheurs et indices)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">tous les indices de la base de données</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">nom de table valide</entry><entry class="- topic/entry ">tous les indices définis dans la table spécifiée</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph></entry><entry class="- topic/entry ">nom d’index valide</entry><entry class="- topic/entry ">index spécifié</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">toutes les tables de la base de données</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph></entry><entry class="- topic/entry ">nom de table valide</entry><entry class="- topic/entry ">la table spécifiée</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">tous les déclencheurs de la base de données</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">nom de table valide</entry><entry class="- topic/entry ">tous les déclencheurs associés à la table spécifiée</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">nom de vue valide</entry><entry class="- topic/entry ">tous les déclencheurs associés à la vue spécifiée </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph></entry><entry class="- topic/entry ">nom de déclencheur valide</entry><entry class="- topic/entry ">le déclencheur spécifié </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry ">toutes les vues de la base de données</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph></entry><entry class="- topic/entry ">nom de vue valide</entry><entry class="- topic/entry ">la vue spécifiée </entry></row></tbody></tgroup></adobetable>
	 
	 <p class="- topic/p ">Si la combinaison d’arguments <codeph class="+ topic/ph pr-d/codeph ">type</codeph> et <codeph class="+ topic/ph pr-d/codeph ">name</codeph> ne correspond pas à l’une des combinaisons spécifiées, un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est déclenché en mode d’exécution asynchrone ou une exception est renvoyée en mode d’exécution synchrone. Par exemple si l’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph> est <codeph class="+ topic/ph pr-d/codeph ">SQLViewSchema</codeph> et que l’argument <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est le nom d’une table (au lieu de celui d’une vue), une erreur est renvoyée pour indiquer que la base de données ne contient pas d’objet présentant le type spécifié avec le nom spécifié.</p>
	 
	 
	 <p class="- topic/p ">Si la base de données est vide (elle ne contient pas de table, ni de vue, ni de déclencheur, ni d’indice), l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">loadSchema()</codeph> déclenche une erreur.</p>
	 
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">getSchemaResult()</linktext></link><link href="flash.data.xml#SQLConnection/event:schema" class="- topic/link "><linktext class="- topic/linktext ">schéma, événement</linktext></link><link href="flash.data.xml#SQLIndexSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLIndexSchema</linktext></link><link href="flash.data.xml#SQLTableSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTableSchema</linktext></link><link href="flash.data.xml#SQLTriggerSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLTriggerSchema</linktext></link><link href="flash.data.xml#SQLViewSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLViewSchema</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:loadSchema_schema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">schema</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:loadSchema_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec un échec.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec un échec.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:openAsync" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">openAsync</apiName><shortdesc class="- topic/shortdesc ">
     Ouvre une connexion asynchrone au fichier de base de données à l’emplacement spécifié dans le système de fichiers, crée et ouvre un nouveau fichier de base de données à cet emplacement, ou crée et ouvre une base de données en mémoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque l’occurrence SQLConnection a déjà une connexion établie avec une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> n’est pas une occurrence de flash.filesystem.File
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque l’argument <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et sa propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> n’est pas de 16 octets
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et l’argument <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si un paramètre <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> non valide est spécifié. Cela comprend la transmission de la taille d’une page lorsque le mode est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement du fichier de base de données ouvert. Cette valeur doit être une occurrence flash.filesystem.File. Si la valeur du paramètre est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, une base de données est créée en mémoire et ouverte.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique comment la base de données est ouverte. La valeur peut être l’une des constantes définies dans la classe SQLMode. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph> et indique que, si le fichier de base de données est introuvable à l’emplacement spécifié, il doit être créé. Si <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> et que le fichier spécifié n’existe pas, un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est déclenché. Ce paramètre est ignoré lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">open</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si l’espace non utilisé dans la base de données est récupéré automatiquement. Ce paramètre n’est valide que pour la création d’un nouveau fichier de base de données ou pour l’ouverture d’un fichier de base de données dans lequel aucune table n’a été créée. Par défaut, l’espace récupéré lors de la suppression des données est conservé dans le fichier de base de données et réutilisé lorsque nécessaire. Si ce paramètre est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, la base de données récupère automatiquement l’espace non utilisé. Cela peut avoir un impact négatif sur les performances car un traitement supplémentaire est nécessaire à chaque opération d’écriture dans la base de données. De plus, les données de la base de données peuvent également se fragmenter avec le temps. Pour forcer la base de données à récupérer à tout moment l’espace non utilisé dans un fichier de base de données et à le défragmenter, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph>.
	 
	 <p class="- topic/p ">Ce paramètre est ignoré lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique la taille de la page (en octets) de la base de données. Ce paramètre n’est valide que pour la création d’un nouveau fichier de base de données ou pour l’ouverture d’un fichier de base de données dans lequel aucune table n’a été créée. La valeur doit être une puissance de deux supérieure ou égale à 512 et inférieure ou égale à 32768. La valeur par défaut est 1024 octets. Cette valeur ne peut être définie qu’avant la création des tables. Une fois que des tables ont été créées, la tentative de modification de cette valeur entraîne une erreur. 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La clé de chiffrement pour le fichier de base de données. Si l’appel de <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> crée une base de données, celle-ci est chiffrée et la clé spécifiée est utilisée comme clé de chiffrement. Si l’appel ouvre une base de données chiffrée, la valeur doit correspondre à la clé de chiffrement de la base de données. Dans le cas contraire, une erreur se produit. Si la base de données en cours d’ouverture n’est pas chiffrée, la valeur doit être <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (valeur par défaut). Dans le cas contraire, une erreur se produit.
	 
	 <p class="- topic/p ">Pour qu’une clé de chiffrement soit valide, sa longueur doit être de 16 octets. Une base de données en mémoire ne peut pas être chiffrée ; par conséquent, ce paramètre doit être <codeph class="+ topic/ph pr-d/codeph ">null</codeph> lorsque la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">Lors de l’ouverture d’une base de données chiffrée, si la clé de chiffrement fournie ne correspond pas à celle de la base de données, une exception SQLErrorEvent est renvoyée. La propriété <codeph class="+ topic/ph pr-d/codeph ">error</codeph> de l’objet événement contient une occurrence de SQLError. La propriété <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> de l’objet SQLError est 3138 (« Le fichier ouvert n’est pas un fichier de base de données »).</p>
	 
	 <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> est disponible à partir de la version 1.5 d’AIR.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ouvre une connexion asynchrone au fichier de base de données à l’emplacement spécifié dans le système de fichiers, crée et ouvre un nouveau fichier de base de données à cet emplacement, ou crée et ouvre une base de données en mémoire. Les opérations de création et d’ouverture de base de données, comme toutes les autres opérations exécutées avec cette occurrence SQLConnection (y compris l’exécution d’instructions et d’autres opérations exécutées par une occurrence SQLStatement associée à cette occurrence SQLConnection) sont exécutées de façon <i class="+ topic/ph hi-d/i ">asynchrone</i> lorsque la base de données est ouverte avec cette méthode. Pour exécuter des opérations de façon synchrone, ouvrez la connexion de la base de données à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph>.
     
	 <p class="- topic/p ">Après la connexion d’une base de données, utilisez une occurrence de <xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref> pour exécuter les commandes SQL. Les opérations au niveau de la base de données, notamment le lancement ou la finalisation de transactions, ainsi que le chargement d’informations de schéma sont exécutées à l’aide de l’occurrence de SQLConnection.</p>
     
     <p class="- topic/p ">Une base de données connectée avec la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> se voit automatiquement attribuer le nom de base de données « main ». Ce nom peut être utilisé pour qualifier explicitement les noms de table dans les instructions SQL utilisant le format <codeph class="+ topic/ph pr-d/codeph ">[nom-base de données].[nom-table]</codeph>. </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:openAsync_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:openAsync_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue. La connexion ne résiste jamais à un échec d’opération.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><shortdesc class="- topic/shortdesc ">
     Ouvre une connexion synchrone au fichier de base de données à l’emplacement spécifié dans le système de fichiers, crée et ouvre un nouveau fichier de base de données à cet emplacement, ou crée et ouvre une base de données en mémoire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque l’occurrence SQLConnection a déjà une connexion établie avec une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue. La connexion ne résiste jamais à un échec d’opération.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> n’est pas une occurrence de flash.filesystem.File
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque l’argument <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et sa propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> n’est pas de 16 octets
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et l’argument <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph>
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si un paramètre <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> non valide est spécifié. Cela comprend la transmission de la taille d’une page lorsque le mode est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">reference</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement du fichier de base de données ouvert. Cette valeur doit être une occurrence flash.filesystem.File. Si la valeur du paramètre est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, une base de données est créée en mémoire et ouverte.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">openMode</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique comment la base de données est ouverte. La valeur peut être l’une des constantes définies dans la classe SQLMode. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.CREATE</codeph> et indique que, si le fichier de base de données est introuvable à l’emplacement spécifié, il doit être créé. Si <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph> et que le fichier spécifié n’existe pas, une erreur se produit. Ce paramètre est ignoré lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">autoCompact</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si l’espace non utilisé dans la base de données est récupéré automatiquement. Ce paramètre n’est valide que pour la création d’un nouveau fichier de base de données ou pour l’ouverture d’un fichier de base de données dans lequel aucune table n’a été créée. Par défaut, l’espace récupéré lors de la suppression des données est conservé dans le fichier de base de données et réutilisé lorsque nécessaire. Si ce paramètre est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, la base de données récupère automatiquement l’espace non utilisé. Cela peut avoir un impact négatif sur les performances car un traitement supplémentaire est nécessaire à chaque opération d’écriture dans la base de données. De plus, les données de la base de données peuvent également se fragmenter avec le temps. Vous pouvez à tout moment forcer la base de données à récupérer l’espace non utilisé dans un fichier de base de données et défragmenter le fichier de base de données à l’aide la méthode <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph>.
	 
	 <p class="- topic/p ">Ce paramètre est ignoré lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> est <codeph class="+ topic/ph pr-d/codeph ">SQLMode.READ</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pageSize</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1024</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique la taille de la page (en octets) de la base de données. Ce paramètre n’est valide que pour la création d’un nouveau fichier de base de données ou pour l’ouverture d’un fichier de base de données dans lequel aucune table n’a été créée. La valeur doit être une puissance de deux supérieure ou égale à 512 et inférieure ou égale à 32768. La valeur par défaut est 1024 octets. Cette valeur ne peut être définie qu’avant la création des tables. Une fois que des tables ont été créées, la tentative de modification de cette valeur entraîne une erreur. 
     
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">encryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La clé de chiffrement pour le fichier de base de données. Si l’appel de <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> crée une base de données, celle-ci est chiffrée et la clé spécifiée est utilisée comme clé de chiffrement. Si l’appel ouvre une base de données chiffrée, la valeur doit correspondre à la clé de chiffrement de la base de données. Dans le cas contraire, une erreur se produit. Si la base de données en cours d’ouverture n’est pas chiffrée, ou si vous souhaitez créer une base de données non chiffrée, la valeur doit être <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (valeur par défaut) ; dans le cas contraire, une erreur se produit.
	 
	 <p class="- topic/p ">Pour qu’une clé de chiffrement soit valide, sa longueur doit être de 16 octets. Une base de données en mémoire ne peut pas être chiffrée ; par conséquent, ce paramètre doit être <codeph class="+ topic/ph pr-d/codeph ">null</codeph> lorsque la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">reference</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">Lors de l’ouverture d’une base de données chiffrée, si la clé de chiffrement fournie ne correspond pas à celle de la base de données, une exception SQLError est renvoyée. Le cas échéant, la propriété <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> de l’objet SQLError est 3138 (« Le fichier ouvert n’est pas un fichier de base de données »).</p>
	 
	 <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">encryptionKey</codeph> est disponible à partir de la version 1.5 d’AIR.</p>
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ouvre une connexion synchrone au fichier de base de données à l’emplacement spécifié dans le système de fichiers, crée et ouvre un nouveau fichier de base de données à cet emplacement, ou crée et ouvre une base de données en mémoire. Les opérations de création et d’ouverture de base de données, comme toutes les autres opérations exécutées avec cette occurrence SQLConnection (y compris l’exécution d’instructions et d’autres opérations exécutées par une occurrence SQLStatement associée à cette occurrence SQLConnection) sont exécutées de façon <i class="+ topic/ph hi-d/i ">synchrone</i> lorsque la base de données est ouverte avec cette méthode. Pour exécuter des opérations de façon asynchrone, ouvrez la connexion de la base de données à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>.
	 
	 <p class="- topic/p ">Après la connexion d’une base de données, utilisez une occurrence de <xref href="SQLStatement.html" class="- topic/xref ">SQLStatement</xref> pour exécuter les commandes SQL. Les opérations au niveau de la base de données, notamment le lancement ou la finalisation de transactions, ainsi que le chargement d’informations de schéma sont exécutées à l’aide de l’occurrence de SQLConnection.</p>
     
     <p class="- topic/p ">Une base de données connectée avec la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> se voit automatiquement attribuer le nom de base de données « main ». Ce nom peut être utilisé pour qualifier explicitement les noms de table dans les instructions SQL qui utilisent le format <codeph class="+ topic/ph pr-d/codeph ">[nom-base de données].[nom-table]</codeph>. </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link><link href="flash.data.xml#SQLMode" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLMode</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:open_open" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">open</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><shortdesc class="- topic/shortdesc ">
	 Modifie la clé de chiffrement d’une base de donnée chiffrée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la valeur de <codeph class="+ topic/ph pr-d/codeph ">newEncryptionKey</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou si sa propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> n’est pas de 16 octets.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la connexion n’est pas ouverte ou si une transaction est ouverte.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">newEncryptionKey</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un ByteArray contenant la nouvelle clé de chiffrement de la base de données. Pour qu’une clé de chiffrement soit valide, sa longueur doit être de 16 octets. 
	 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">reencrypt</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Modifie la clé de chiffrement d’une base de donnée chiffrée. Cette méthode affecte uniquement la clé de chiffrement de la base de données principale (c’est-à-dire la base de données connectée à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>). Vous pouvez appeler <codeph class="+ topic/ph pr-d/codeph ">reencrypt()</codeph> uniquement sur une base de données ayant été chiffrée lors de sa création. Après avoir créé une base de données chiffrée, il est impossible de la déchiffrer. De la même manière, si une base de données non chiffrée est créée, celle-ci ne peut pas être chiffrée ultérieurement.
	 
	 <p class="- topic/p ">La nouvelle tentative de chiffrement est exécutée dans sa propre transaction. Si la nouvelle tentative de chiffrement est interrompue, la base de données restaure la transaction et la clé de chiffrement reste inchangée.</p> 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/attach()" class="- topic/link "><linktext class="- topic/linktext ">attach()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:reencrypt_reencrypt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">reencrypt</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:reencrypt_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Cette méthode valide les opérations SQL effectuées depuis le point de sauvegarde le plus récent ou le point de sauvegarde désigné si un nom est spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ; ou si aucune transaction n’est actuellement ouverte (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String Nom du point de sauvegarde à partir duquel toutes les opérations SQL doivent être validées. Si aucune valeur n’est fournie ou si ce paramètre est défini sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (valeur par défaut), le point de sauvegarde non désigné nom le plus récent (créé via un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> dont le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> n’a pas été pas défini) est utilisé. La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> ne peut pas être une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument responder est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Cette méthode valide les opérations SQL effectuées depuis le point de sauvegarde le plus récent ou le point de sauvegarde désigné si un nom est spécifié.
	 
	 <p class="- topic/p ">Notez que jusqu’à ce que l’ensemble de la transaction soit validée, les modifications ne sont pas définitivement enregistrées dans la base de données. Si la transaction est lancée à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, vous devez appeler la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> pour valider l’ensemble de la transaction. Si la transaction est lancée via un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> alors que la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, vous pouvez finaliser l’ensemble de la transaction soit en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> soit en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> pour le premier point de sauvegarde de la transaction.</p>
	 
	 <p class="- topic/p ">Si le code appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph>, il supprime définitivement toutes les modifications effectuées dans la transaction, même si la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> est appelée avant la restauration de la transaction. </p>
	 
	 <p class="- topic/p ">Si cette méthode est appelée sans paramètre (ou si le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>), elle valide toutes les modifications dans la base de données depuis le point de sauvegarde non désigné le plus récent (point de sauvegarde le plus récent créé via un appel de méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> dont le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> n’a pas été défini). Par exemple, si la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> a été appelée trois fois, trois points de sauvegarde sont définis. L’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> au niveau de ce point valide les opérations SQL exécutées depuis le troisième point de sauvegarde (le plus récent).</p>
	 
	 <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est défini sur une valeur, cette méthode valide toutes les opérations SQL exécutées depuis le point de sauvegarde portant le nom spécifié. Si d’autres points de sauvegarde ont été créés plus récemment que le point de sauvegarde spécifié, les opérations exécutées après ces points de sauvegarde sont également validées.</p>
	 
	 <p class="- topic/p ">Après la publication ou la restauration d’un point de sauvegarde, ce dernier, ainsi que les points de sauvegarde plus récents, sont supprimés. Si le code exécute d’autres opérations SQL après qu’un appel à <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> supprime un point de sauvegarde, ces opérations appartiennent au point de sauvegarde restant le plus récent. (En d’autres termes, elles appartiennent au point de sauvegarde créé le plus récemment avant le point de sauvegarde supprimé.) S’il ne reste aucun point de sauvegarde, les opérations appartiennent à la transaction principale.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_releaseSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">releaseSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:releaseSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:removeEventListener" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeEventListener</apiName><shortdesc class="- topic/shortdesc ">
     
	Supprime un écouteur de l’objet EventDispatcher.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">type</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Type d’événement.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">listener</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet écouteur à supprimer.
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">useCapture</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	<ph class="- topic/ph ">Détermine si l’écouteur a été enregistré pendant la phase de capture ou pendant les phases cible et de propagation. Si l’écouteur a été enregistré pendant la phase de capture et pendant les phases cible et de propagation, il est nécessaire d’appeler <codeph class="+ topic/ph pr-d/codeph ">removeEventListener()</codeph> à deux reprises pour le supprimer. Appelez <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> une première fois en la définissant sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, puis une seconde fois <codeph class="+ topic/ph pr-d/codeph ">useCapture()</codeph> en la définissant sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
	Supprime un écouteur de l’objet EventDispatcher. Si aucun écouteur correspondant n’est enregistré auprès de l’objet EventDispatcher, l’appel de cette méthode n’a aucun effet.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLConnection:rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Restaure toutes les opérations SQL depuis le point de sauvegarde le plus récent ou le point de sauvegarde désigné si un nom est spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ; ou si aucune transaction n’est actuellement ouverte (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne Nom du point de sauvegarde auquel lequel l’état de la base de données doit revenir. Si aucune valeur n’est fournie ou si ce paramètre est défini sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (valeur par défaut), le point de sauvegarde non désigné nom le plus récent (créé via un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> dont le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> n’a pas été défini) est utilisé. La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> ne peut pas être une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument responder est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Restaure toutes les opérations SQL depuis le point de sauvegarde le plus récent ou le point de sauvegarde désigné si un nom est spécifié.
	 
	 <p class="- topic/p ">Notez que si l’ensemble de la transaction est validée via l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>, les modifications apportées à la transaction qui ne sont pas déjà restaurées à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> sont définitivement enregistrées dans la base de données. En outre, l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> supprime définitivement toutes les modifications, même si des points de sauvegarde individuels ont été publiés (validés) ou restaurés avant la restauration de la transaction. </p>
	 
	 <p class="- topic/p ">Si cette méthode est appelée sans paramètre (ou si le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>), elle restaure toutes les modifications effectuées dans la base de données depuis le point de sauvegarde non désigné le plus récent (l’appel le plus récent de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> dont le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> n’a pas été défini).</p>
	 
	 <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est défini sur une valeur, cette méthode restaure toutes les opérations SQL exécutées depuis le point de sauvegarde portant le nom spécifié. Si d’autres points de sauvegarde ont été créés plus récemment que le point de sauvegarde spécifié, les opérations exécutées depuis ces points de sauvegarde sont également restaurées.</p>
	 
	 <p class="- topic/p ">Après la publication ou la restauration d’un point de sauvegarde, ce dernier, ainsi que les points de sauvegarde plus récents, sont supprimés. Si le code exécute d’autres opérations SQL après qu’un appel à <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> supprime un point de sauvegarde, ces opérations appartiennent au point de sauvegarde restant le plus récent. (En d’autres termes, elles appartiennent au point de sauvegarde créé le plus récemment avant le point de sauvegarde supprimé.) S’il ne reste aucun point de sauvegarde, les opérations appartiennent à la transaction principale.</p>
	 
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_rollbackToSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollbackToSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollbackToSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><shortdesc class="- topic/shortdesc ">
     Annule une transaction existante créée avec la méthode begin(), ce qui signifie que toutes les modifications apportées à la transaction par les instructions SQL sont annulées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ; ou si aucune transaction n’est actuellement ouverte (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">rollback</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Annule une transaction existante créée avec la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, ce qui signifie que toutes les modifications apportées à la transaction par les instructions SQL sont annulées.
     
	 <p class="- topic/p ">Les points de sauvegarde intermédiaires peuvent être marqués au sein d’une transaction via un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>. Les points de sauvegarde permettent de valider (via l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph>) ou de restaurer (via l’appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>) certaines parties d’une transaction. Toutefois, l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">rollback()</codeph> supprime définitivement toutes les modifications effectuées dans une transaction, même si des points de sauvegarde individuels ont été publiés (validés) avant la restauration de la transaction. </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/setSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">setSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:rollback_rollback" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">rollback</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:rollback_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLConnection:setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un point de sauvegarde, similaire à un signet dans une transaction de bases de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’occurrence de SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">String Nom du point de sauvegarde. Si aucune valeur n’est fournie ou si ce paramètre est défini sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> (valeur par défaut), l’appel suivant de la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> dont le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> n’est pas spécifié, valide ou restaure les opérations SQL exécutées depuis le point de sauvegarde non désigné.
	 <p class="- topic/p ">Si le nom fourni est le même que celui d’un point de sauvegarde précédent, l’appel suivant de la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.rollbackToSavepoint()</codeph>, valide ou restaure les modifications effectuées depuis le point de sauvegarde le plus récent portant ce nom.</p>
	 <p class="- topic/p "> La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> ne peut pas être une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>).</p>
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Responder Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument responder est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">setSavepoint</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué à la fin de l’exécution. 
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un point de sauvegarde, similaire à un signet dans une transaction de bases de données. Un point de sauvegarde représente un point au sein d’une transaction. La série d’opérations SQL exécutées entre des points de sauvegarde peut être validée ou restaurées séparément des autres opérations à l’aide des méthodes <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph>. L’utilisation d’un point de sauvegarde permet ainsi de traiter une série d’opérations SQL en tant que transaction imbriquée.
	 
	 <p class="- topic/p ">Lors de l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph>, si une transaction n’a pas encore été ouverte (via l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>), l’appel de cette méthode lance la transaction et crée un point de sauvegarde au début de la transaction. Si une transaction est déjà ouverte, l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> crée un point de sauvegarde dans la transaction.</p>
	 
	 <p class="- topic/p ">Notez que jusqu’à ce que l’ensemble de la transaction soit validée, les modifications ne sont pas définitivement enregistrées dans la base de données. Si la transaction est lancée à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">begin()</codeph>, vous devez appeler la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph> pour valider l’ensemble de la transaction. Si la transaction est lancée via un appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setSavepoint()</codeph> alors que la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, vous pouvez finaliser l’ensemble de la transaction en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">commit()</codeph>. En outre, la transaction se termine automatiquement lorsque vous appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> pour le point de sauvegarde ayant déclenché la transaction.</p>
	 
	 <p class="- topic/p ">Vous pouvez attribuer un nom à un point de sauvegarde en affectant une valeur au paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph>. Vous pouvez ainsi restaurer ou valider toutes les modifications effectuées depuis ce point de sauvegarde spécifique. Si aucun nom n’est spécifié (valeur par défaut), un point de sauvegarde non désigné est créé.</p>
	 
	 <p class="- topic/p ">Après la publication ou la restauration d’un point de sauvegarde, ce dernier, ainsi que les points de sauvegarde plus récents, sont supprimés. Si le code exécute d’autres opérations SQL après qu’un appel à <codeph class="+ topic/ph pr-d/codeph ">releaseSavepoint()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">rollbackToSavepoint()</codeph> supprime un point de sauvegarde, ces opérations appartiennent au point de sauvegarde restant le plus récent. (En d’autres termes, elles appartiennent au point de sauvegarde créé le plus récemment avant le point de sauvegarde supprimé.) S’il ne reste aucun point de sauvegarde, les opérations appartiennent à la transaction principale.</p>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/releaseSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">releaseSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/rollbackToSavepoint()" class="- topic/link "><linktext class="- topic/linktext ">rollbackToSavepoint()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_setSavepoint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">setSavepoint</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération se termine avec succès.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération se termine avec succès.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLConnection:setSavepoint_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
	 </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLConnection:autoCompact:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">autoCompact</apiName><shortdesc class="- topic/shortdesc ">
     Indique si l’auto-compactage était activé lors de la création de la base de données en cours (valeur spécifiée pour le paramètre autoCompact dans l’appel à open() ou openAsync() qui a créé la base de données).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si l’auto-compactage était activé lors de la création de la base de données en cours (valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph> dans l’appel à <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> qui a créé la base de données). Si cette propriété est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’espace non utilisé est automatiquement supprimé du fichier de base de données après chaque opération d’écriture, ce qui réduit la taille du fichier. Si la propriété est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, l’espace précédemment occupé par les données supprimées est conservé dans le fichier de base de données et réutilisé lorsque nécessaire. Même lorsque <codeph class="+ topic/ph pr-d/codeph ">autoCompact</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, vous pouvez forcer la base de données à récupérer l’espace non utilisé en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">compact()</codeph>.
     
     <p class="- topic/p ">Si la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, cette propriété est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:cacheSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">cacheSize</apiName><shortdesc class="- topic/shortdesc ">
     Permet d’accéder à la taille du cache de cette connexion, représentant le nombre maximal de pages de disque de base de données pouvant être conservé en mémoire simultanément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lors d’une tentative de définition de cette propriété alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>) ou si une transaction est actuellement en cours (la propriété <codeph class="+ topic/ph pr-d/codeph ">inTransaction</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>).
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Permet d’accéder à la taille du cache de cette connexion, représentant le nombre maximal de pages de disque de base de données pouvant être conservé en mémoire simultanément. Chaque page utilise environ 1,5 Ko de mémoire (selon la valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> de l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> qui a créé la base de données). La taille par défaut est 2 000. Si une application exécute des opérations <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> qui modifient un grand nombre de lignes d’une base de données, l’augmentation de la taille du cache peut améliorer la vitesse, mais accroît la consommation de mémoire.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:columnNameStyle:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columnNameStyle</apiName><shortdesc class="- topic/shortdesc ">
     Indique comment les noms de colonne sont reportés dans le résultat d’une instruction SELECT.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lors d’une tentative de définition de cette propriété alors que l’occurrence SQLConnection n’est pas connectée à une base de données (la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique comment les noms de colonne sont reportés dans le résultat d’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>.
     
     <p class="- topic/p ">Les constantes définies dans la classe SQLColumnNameStyle représentent les valeurs possibles pour cette propriété :</p>
     
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.LONG</codeph> indique que les noms de colonne sont renvoyés au format <codeph class="+ topic/ph pr-d/codeph ">[nom-table]_[nom-colonne]</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.SHORT</codeph> spécifie que les noms de colonne sont donnés au format <codeph class="+ topic/ph pr-d/codeph ">[nom-colonne]</codeph>. Si plusieurs colonnes portent le même nom, une seule propriété portant ce nom est ajoutée à l’objet de résultats.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">SQLColumnNameStyle.DEFAULT</codeph> est la valeur par défaut. Lorsque cette valeur est utilisée, les noms de colonne du résultat sont mis en forme en fonction du nombre de tables portant des noms de colonnes similaires dans l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>. Si l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ne comprend qu’une table, le format de nom court <codeph class="+ topic/ph pr-d/codeph ">[nom-colonne]</codeph> est utilisé, et si l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> contient plusieurs tables réunies, le format de nom long <codeph class="+ topic/ph pr-d/codeph ">[nom-table]_[nom-colonne]</codeph> est utilisé chaque fois que le nom de deux colonnes est identique.</li></ul>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnNameStyle</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:connected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">connected</apiName><shortdesc class="- topic/shortdesc ">
     Indique si l’occurrence SQLConnection a une connexion établie avec un fichier de base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si l’occurrence SQLConnection a une connexion établie avec un fichier de base de données.
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link><link href="flash.data.xml#SQLConnection/close()" class="- topic/link "><linktext class="- topic/linktext ">close()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:inTransaction:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">inTransaction</apiName><shortdesc class="- topic/shortdesc ">
	 Indique si cette connexion est actuellement impliquée dans une transaction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique si cette connexion est actuellement impliquée dans une transaction.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/begin()" class="- topic/link "><linktext class="- topic/linktext ">begin()</linktext></link><link href="flash.data.xml#SQLConnection/commit()" class="- topic/link "><linktext class="- topic/linktext ">commit()</linktext></link><link href="flash.data.xml#SQLConnection/rollback()" class="- topic/link "><linktext class="- topic/linktext ">rollback()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     Dernier identifiant généré par une instruction SQL INSERT.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dernier identifiant généré par une instruction SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>. Un identifiant de ligne est utilisé pour identifier une ligne de façon unique dans un tableau au sein d’une base de données. La valeur est générée fréquemment par la base de données.
	 
     <p class="- topic/p ">La valeur est zéro si aucune base de données n’est connectée ou si aucune instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> n’a été exécutée.</p>
	 
	 <p class="- topic/p ">L’identifiant de ligne pour une seule exécution de l’instruction SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> peut être obtenu via la propriété <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph> de l’objet SQLResult renvoyé par la méthode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> de l’objet SQLStatement (lorsqu’il est appelé une fois que SQLStatement distribue son événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph>).</p>
	 
	 <p class="- topic/p ">Pour plus d’informations sur les clés primaires et les identifiants de ligne générés, voir les sections « <xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_data_fr" scope="external" class="- topic/xref ">CREATE TABLE</xref> » et « <xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_statements_fr" scope="external" class="- topic/xref ">Expressions</xref> » dans l’annexe « <xref href="http://www.adobe.com/go/learn_as3_sqlsupportdb_fr" scope="external" class="- topic/xref ">Prise en charge de SQL dans les bases de données locales</xref> ».</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:pageSize:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">pageSize</apiName><shortdesc class="- topic/shortdesc ">
     Indique la taille de la page de base de données (en octets) spécifiée lors de la création de la base de données en cours (valeur spécifiée pour le paramètre pageSize dans l’appel à open() ou openAsync() qui a créé la base de données).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique la taille de la page de base de données (en octets) spécifiée lors de la création de la base de données en cours (valeur spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">pageSize</codeph> dans l’appel à <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph> qui a créé la base de données).
     
     <p class="- topic/p ">Si la propriété <codeph class="+ topic/ph pr-d/codeph ">connected</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, la valeur de cette propriété est 0.</p>
     
	 <p class="- topic/p ">La taille de la page d’une base de données peut être modifiée (à l’aide des méthodes <codeph class="+ topic/ph pr-d/codeph ">open()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">openAsync()</codeph>) jusqu’à la création de la première table dans la base de données.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLConnection:totalChanges:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">totalChanges</apiName><shortdesc class="- topic/shortdesc ">
     Contient le nombre total de modifications de données effectuées depuis l’ouverture de la connexion à la base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Contient le nombre total de modifications de données effectuées depuis l’ouverture de la connexion à la base de données. En plus du suivi des modifications effectuées par les instructions <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> et <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph>, cette valeur comprend les modifications dues aux déclencheurs.
	 
	 <p class="- topic/p ">Lorsque la connexion à la base de données est fermée, la valeur est réinitialisée sur 0. Lorsque l’occurrence de SQLConnection n’est pas connectée à une base de données, la valeur est 0.</p>
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/rowsAffected" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.rowsAffected</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLTriggerSchema fournit des informations décrivant un déclencheur spécifique dans une base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLTriggerSchema fournit des informations décrivant un déclencheur spécifique dans une base de données. Elle contient le nom du déclencheur (propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph>), le nom de la table associée (propriété <codeph class="+ topic/ph pr-d/codeph ">table</codeph>) et l’instruction SQL utilisée pour créer le déclencheur (propriété <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>).
 
 <p class="- topic/p ">Pour obtenir les informations du schéma des déclencheurs d’une base de données, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> pour charger les informations du schéma, en vous assurant d’utiliser <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLTriggerSchema</codeph> comme valeur de l’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph>. Dans l’occurrence SQLSchemaResult résultante, la propriété <codeph class="+ topic/ph pr-d/codeph ">triggers</codeph> contient un tableau d’occurrences SQLTriggerSchema représentant les déclencheurs de la base de données.</p>
 
 <p class="- topic/p ">En général, le code du développeur ne construit pas directement d’occurrences SQLTriggerSchema.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLTriggerSchema:SQLTriggerSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTriggerSchema</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLTriggerSchema.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données associée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom du déclencheur.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Instruction SQL utilisée pour créer le déclencheur.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom du déclencheur de la table associée.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLTriggerSchema. En général, le code du développeur n’appelle pas directement le constructeur SQLTriggerSchema. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLTriggerSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     Nom de la table dans laquelle ce déclencheur est défini ou le nom de la vue si le déclencheur est défini dans une vue.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Nom de la table dans laquelle ce déclencheur est défini ou le nom de la vue si le déclencheur est défini dans une vue.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLStatement permet d’exécuter une instruction SQL sur une base de données SQL locale ouverte par une occurrence SQLConnection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLStatement permet d’exécuter une instruction SQL sur une base de données SQL locale ouverte par une occurrence SQLConnection.
 
 <p class="- topic/p ">Une occurrence SQLStatement est reliée à une occurrence SQLConnection en définissant l’occurrence SQLConnection comme valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> de l’occurrence SQLStatement. La propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> est renseignée par le véritable texte de l’instruction SQL à exécuter. Si nécessaire, les valeurs des paramètres de l’instruction SQL sont spécifiées à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph>, et l’instruction est exécutée par un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>.</p>
 
 <p class="- topic/p ">Pour obtenir une description complète du dialecte SQL pris en charge par les bases de données SQL locales, consultez l’annexe <xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">Prise en charge de SQL dans les bases de données locales</xref>.</p>
 
 <p class="- topic/p ">En mode d’exécution asynchrone, les méthodes <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> sont exécutées en arrière-plan et l’exécution distribue des événements vers les écouteurs d’événements enregistrés ou vers une occurrence Responder spécifiée lorsque les opérations sont terminées ou échouent. En mode synchrone, les méthodes sont exécutées sur la thread principale de l’application, ce que signifie que aucun autre code ne s’exécute tant que les opérations de la base de données ne sont pas terminées. De plus, en mode synchrone, si la méthode échoue, l’exécution renvoie une exception au lieu de déclencher un événement d’erreur.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLErrorEvent.ERROR_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsqu’une erreur se produit au cours d’une opération.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLErrorEvent.ERROR</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsqu’une erreur se produit au cours d’une opération.
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement_flash.events.SQLEvent.RESULT_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><shortdesc class="- topic/shortdesc ">
 Distribué lorsque l’opération d’un appel de méthode execute() ou next() se termine avec succès.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><apiEventType class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiEventType ">flash.events.SQLEvent.RESULT</apiEventType><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events.SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Distribué lorsque l’opération d’un appel de méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> se termine avec succès. Une fois que l’événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> est déclenché, la méthode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> peut être appelée pour récupérer les résultats de l’instruction.
 
 
 </apiDesc></adobeApiEventDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.data:SQLStatement:SQLStatement" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLStatement</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLStatement.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si le constructeur est appelé à partir d’un sandbox extérieur au sandbox de l’application principale. 
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SecurityError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">SecurityError</apiOperationClassifier></apiException></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLStatement.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.data:SQLStatement:cancel" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cancel</apiName><shortdesc class="- topic/shortdesc ">
     Annule l’exécution de cette instruction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Annule l’exécution de cette instruction. Comme <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph>, cette méthode est utilisée pour interrompre une requête d’exécution longue ou pour annuler une requête qui n’est pas encore terminée. Toutefois, contrairement à <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph>, cette méthode n’annule que la seule instruction. Si l’instruction n’est pas en cours d’exécution, l’appel à cette méthode ne donne rien.
	 
	 <p class="- topic/p ">Aucun événement n’est déclenché en réponse directe à l’achèvement de l’opération <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph>. Toutefois, une fois que l’opération <codeph class="+ topic/ph pr-d/codeph ">cancel()</codeph> est terminée et que l’exécution de l’instruction est annulée, l’occurrence SQLStatement déclenche un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> qui indique que l’exécution de l’instruction (l’appel <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>) ne s’est pas terminée. Alternativement, si une valeur a été spécifiée pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> de l’appel <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>, la méthode du gestionnaire de fautes spécifiée est appelée. Dans les deux cas, l’occurrence SQLError transmise aux écouteurs présente une propriété <codeph class="+ topic/ph pr-d/codeph ">errorID</codeph> avec la valeur 3118 (Opération annulée).</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:SQLStatement:clearParameters" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">clearParameters</apiName><shortdesc class="- topic/shortdesc ">
     Efface tous les paramètres actuels.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Efface tous les paramètres actuels.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/parameters" class="- topic/link "><linktext class="- topic/linktext ">paramètres</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:execute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">execute</apiName><shortdesc class="- topic/shortdesc ">
     Exécute l’instruction SQL de la propriété text sur la base de données connectée à l’objet SQLConnection dans la propriété sqlConnection.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou contient une chaîne vide (<codeph class="+ topic/ph pr-d/codeph ">""</codeph>) ; si la propriété <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> n’est pas définie ; si l’occurrence SQLConnection affectée à la propriété <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph> n’est pas connectée ; ou si l’instruction est en cours d’exécution.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’opération échoue en mode d’exécution synchrone.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> de l’instruction est une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>, cette valeur indique le nombre de lignes renvoyées en une seule fois par l’instruction. La valeur par défaut est -1, indiquant que toutes les lignes du résultat sont renvoyées en une seule fois. Ce paramètre est utilisé en combinaison avec la méthode <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> pour diviser les grands jeux de résultats en jeux de données plus petits. L’utilisateur peut ainsi mieux percevoir les performances de l’application, car les résultats initiaux sont renvoyés plus rapidement et les opérations de traitement des résultats sont divisées.
     
     <p class="- topic/p ">Lorsque l’instruction SQL est une requête <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> et qu’un argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> supérieur à zéro est spécifié, l’instruction est censée s’exécuter jusqu’à ce que l’ensemble du jeu de résultats soit renvoyé ou que la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> soit appelée. Notez que, le nombre de lignes du jeu de résultats étant inconnu au moment de l’exécution, le curseur de la base de données doit se déplacer au-delà de la dernière ligne du jeu de résultats pour que l’instruction soit considérée comme terminée. Lorsqu’un argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> est spécifié dans un appel <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>, au moins une ligne de plus que le nombre total de lignes du jeu de résultats doit être demandée (par l’intermédiaire d’une valeur <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> supérieure au nombre de lignes du jeu de résultats, ou par l’intermédiaire d’appels consécutifs à la méthode <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>) avant que la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> de l’occurrence SQLResult résultante soit <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué lorsque l’exécution se termine.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute l’instruction SQL de la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> sur la base de données connectée à l’objet SQLConnection dans la propriété <codeph class="+ topic/ph pr-d/codeph ">sqlConnection</codeph>.
     
	 <p class="- topic/p ">Si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, l’objet Responder spécifié désigne les méthodes appelées pour gérer les résultats de l’opération. Lorsque l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> en mode d’exécution asynchrone, un événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> est distribué si l’opération aboutit, ou un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> si l’opération échoue.</p>
	 
	 <p class="- topic/p ">Pour accéder aux résultats d’une instruction, notamment aux lignes de résultats d’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ou à la clé primaire générée via la base de données d’une instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, appelez la  méthode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>. Ces résultats sont disponibles immédiatement après l’exécution de l’instruction en mode synchrone et lors de la distribution de l’événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> en mode asynchrone.</p>
     
     <p class="- topic/p ">Chaque instruction doit être préparée (compilée) avant de pouvoir être exécutée. Lors du premier appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> de l’occurrence SQLStatement, l’instruction est préparée par le moteur d’exécution. Une fois qu’une instruction est préparée, elle n’a pas besoin de l’être à nouveau sauf si la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> change. La définition d’une ou plusieurs valeurs de paramètres n’entraîne pas la nécessité de préparer de nouveau l’instruction.</p>
	 
     </apiDesc><example conref="examples\SQLStatement.execute.1.as" class="- topic/example "> L’exemple suivant démontre l’exécution d’une occurrence SQLStatement, avec des écouteurs d’événements pour déterminer le moment où l’exécution de l’instruction se termine ou échoue.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example><example conref="examples\SQLStatement.execute.2.as" class="- topic/example "> L’exemple suivant illustre l’exécution d’une occurrence de SQLStatement, avec un objet Responder pour indiquer quelles fonctions sont appelées lorsque l’exécution de l’instruction se termine ou échoue.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;
var employeeResponder:Responder;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    employeeResponder = new Responder(resultHandler, errorHandler);
    dbStatement.execute(-1, employeeResponder);
}

function resultHandler(result:SQLResult):void
{
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
    }
}

function errorHandler(error:SQLError):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">getResult()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:execute_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’exécution de l’instruction se termine avec succès ou lorsqu’une valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> est spécifiée et qu’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> renvoie une ou plusieurs lignes de données.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’exécution de l’instruction se termine avec succès ou lorsqu’une valeur d’argument prefetch est spécifiée et qu’une instruction SELECT renvoie une ou plusieurs lignes de données.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:execute_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.data:SQLStatement:getResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getResult</apiName><shortdesc class="- topic/shortdesc ">
     Permet d’accéder à un objet SQLResult contenant les résultats de l’exécution de l’instruction, y compris les lignes de résultat d’une instruction SELECT et d’autres informations sur l’exécution de toutes les instructions exécutées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet SQLResult contenant le résultat d’un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.data:SQLResult</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Permet d’accéder à un objet SQLResult contenant les résultats de l’exécution de l’instruction, y compris les lignes de résultat d’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> et d’autres informations sur l’exécution de toutes les instructions exécutées. En mode d’exécution asynchrone, les informations de résultat ne sont pas disponibles avant le déclenchement de l’événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph>.
     
     <p class="- topic/p ">Lorsqu’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> est exécutée, si la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> est appelée avec l’argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> par défaut défini sur -1, l’objet SQLResult renvoyé contient l’ensemble du jeu de résultats de la requête.</p>
     
     <p class="- topic/p ">Lorsqu’un argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> est spécifié pour un appel de méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>, la méthode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> se comporte comme une file d’attente de résultats premier arrivé-premier sorti. Chaque fois que l’événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> est distribué, un nouvel objet SQLResult est ajouté à la file d’attente. Chaque fois que la méthode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> est appelée, le premier objet SQLResult (celui qui a été ajouté le premier à la file d’attente) est renvoyé et supprimé de la file. Lorsqu’il ne reste plus aucun objet SQLResult dans la file d’attente, <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
	 
	 <p class="- topic/p ">Notez qu’à moins d’être supprimés par un appel de <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>, les objets SQLResult demeurent dans la file d’attente. Par exemple, si la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> est appelée plusieurs fois sans appel à <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>, les objets SQLResult associés à chaque appel <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> restent dans la file d’attente.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">next()</linktext></link><link href="flash.data.xml#SQLStatement/event:result" class="- topic/link "><linktext class="- topic/linktext ">result, événement</linktext></link></related-links></apiOperation><apiOperation id="flash.data:SQLStatement:next" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">next</apiName><shortdesc class="- topic/shortdesc ">
     Récupère la partie suivante d’un jeu de résultats d’une instruction SELECT.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la méthode est appelée alors que l’instruction n’est pas en cours d’exécution (la propriété <codeph class="+ topic/ph pr-d/codeph ">executing</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">si l’opération échoue en mode d’exécution synchrone.
     
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">SQLError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:SQLError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefetch</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">-1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lorsque la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> de l’instruction est une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>, cette valeur indique le nombre de lignes renvoyées en une seule fois par l’instruction. La valeur par défaut est -1, indiquant que toutes les lignes du résultat sont renvoyées en une seule fois. L’utilisateur peut ainsi mieux percevoir les performances de l’application, car les résultats initiaux sont renvoyés plus rapidement et les opérations de traitement des résultats sont divisées.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">responder</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.net:Responder</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui désigne les méthodes à appeler lorsque l’opération réussit ou échoue. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">error</codeph> est distribué lorsque l’exécution se termine.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Récupère la partie suivante d’un jeu de résultats d’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>. Si le jeu de résultats ne contient plus aucune ligne, un événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> est distribué, mais aucun autre objet SQLResult n’est ajouté dans la file d’attente <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph>.
     
     <p class="- topic/p ">En mode d’exécution asynchrone, si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> n’est pas <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, l’objet Responder spécifié indique les méthodes appelées pour gérer les résultats de l’opération. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">responder</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, un événement <codeph class="+ topic/ph pr-d/codeph ">result</codeph> est distribué si l’opération est réussie, ou un événement <codeph class="+ topic/ph pr-d/codeph ">error</codeph> si l’opération échoue.</p>
     
     <p class="- topic/p ">Cette méthode ne peut être appelée que si l’instruction est encore en exécution. Lorsque l’instruction est une requête <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> et qu’un argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> supérieur à zéro est spécifié, l’instruction est censée s’exécuter jusqu’à ce que l’ensemble du jeu du résultats soit renvoyé ou que la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.cancel()</codeph> ou<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.cancel()</codeph> soit appelée.</p>
     
     </apiDesc><example conref="examples\SQLStatement.next.1.as" class="- topic/example "> L’exemple suivant démontre l’exécution d’une occurrence SQLStatement, indiquant explicitement que seules les 10 premières lignes du jeu de résultats doivent être renvoyées lors du premier renvoi des résultats. Le code vérifie la propriété <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> de SQLResult et, si toutes les lignes n’ont pas été récupérées, appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.addEventListener(SQLErrorEvent.ERROR, errorHandler);
    dbStatement.execute(10);
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            var row:Object = result.data[i];
            trace("id:", row.id, ", name:", row.name, ", ssn:", row.ssn);
        }
        if (!result.complete)
        {
            dbStatement.next(10);
        }
    }
}

function errorHandler(event:SQLErrorEvent):void
{
    trace("An error occured while executing the statement.");
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links><adobeApiEvent id="flash.data:SQLStatement:next_result" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">result</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’exécution de l’instruction se termine avec succès ou lorsqu’une valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph> est spécifiée et que l’appel <codeph class="+ topic/ph pr-d/codeph ">next()</codeph> renvoie une ou plusieurs lignes de données.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’exécution de l’instruction se termine avec succès ou lorsqu’une valeur d’argument prefetch est spécifiée et que l’appel next() renvoie une ou plusieurs lignes de données.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.data:SQLStatement:next_error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef adobeApiEvent/adobeApiEvent "><apiName class="- topic/title reference/title apiRef/apiName ">error</apiName><prolog class="- topic/prolog "/><adobeApiEventDetail class="- topic/body reference/refbody apiRef/apiDetail adobeApiEvent/adobeApiEventDetail "><adobeApiEventDef class="- topic/section reference/section apiRef/apiDef adobeApiEvent/adobeApiEventDef "><adobeApiEventClassifier class="- topic/xref reference/xref apiRef/apiRelation adobeApiEvent/adobeApiEventClassifier ">flash.events:SQLErrorEvent</adobeApiEventClassifier><apiGeneratedEvent class="- topic/state reference/state apiRef/apiQualifier adobeApiEvent/apiGeneratedEvent "/></adobeApiEventDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.
     
     </apiDesc></adobeApiEventDetail><shortdesc class="- topic/shortdesc ">Distribué lorsque l’opération échoue en mode d’exécution asynchrone.</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.data:SQLStatement:executing:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">executing</apiName><shortdesc class="- topic/shortdesc ">
     Indique si l’instruction est en cours d’exécution.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si l’instruction est en cours d’exécution.
     
     <p class="- topic/p ">Cette propriété est true si la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> a été appelée et que tous les résultats n’ont pas été renvoyés de la base de données.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">execute()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:itemClass:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">itemClass</apiName><shortdesc class="- topic/shortdesc ">
     Indique une classe (type de données) utilisée pour chaque ligne renvoyée en tant que résultat de l’exécution de l’instruction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Class</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique une classe (type de données) utilisée pour chaque ligne renvoyée en tant que résultat de l’exécution de l’instruction.
     
     
     
     <p class="- topic/p ">Par défaut, chaque ligne renvoyée par une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> est créée en tant qu’occurrence Object, avec les noms de colonnes du jeu de résultats correspondant au nom des propriétés de l’objet, et la valeur de chaque colonne correspondant à la valeur de sa propriété associée.</p>
     
     <p class="- topic/p ">En spécifiant la classe de la propriété <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph>, chaque ligne renvoyée par une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> exécutée par cette occurrence SQLStatement et créée sous la forme d’une occurrence de la classe désignée. Chaque propriété de l’occurrence <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> se voit affecter la valeur de la colonne portant le même nom que la propriété.</p>
     
     <p class="- topic/p ">Toute classe affectée à cette propriété doit avoir un constructeur qui ne requiert aucun paramètre. En outre, la classe doit avoir une seule propriété pour chaque colonne renvoyée par l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>. Le fait qu’une colonne de la liste <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ne présente pas de nom de propriété correspondant dans la classe <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> est considéré comme une erreur.</p>
     
     </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la propriété <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> pour que l’exécution crée des occurrences d’une classe personnalisée à partir des résultats de l’instruction SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLResult/data" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLResult.data</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:parameters:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">parameters</apiName><shortdesc class="- topic/shortdesc ">
     Joue le rôle de tableau associatif dans lequel vous ajoutez des valeurs pour les paramètres spécifiés dans la propriété text de l’instruction SQL.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Joue le rôle de tableau associatif dans lequel vous ajoutez des valeurs pour les paramètres spécifiés dans la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> de l’instruction SQL. Les clés du tableau sont les noms des paramètres. Si un paramètre sans nom est spécifié dans la propriété text de l’instruction, sa clé est l’index du paramètre.
     
     <p class="- topic/p ">Dans le texte d’une instruction SQL, un paramètre est indiqué avec l’un des caractères suivants : « ? », « : » ou « @ ».</p>
     
     <p class="- topic/p ">Les jetons « : » et « @ » indiquent un paramètre nommé ; les caractères qui suivent le jeton désignent le nom du paramètre.</p>
     
     <p class="- topic/p ">Par exemple, dans l’instruction SQL suivante, un paramètre nommé <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph> est spécifié à l’aide du caractère « : » :</p>
     
     <pre xml:space="preserve" class="- topic/pre ">SELECT FROM employees WHERE firstName = :firstName</pre>
     
     <p class="- topic/p ">Le jeton « ? » indique un paramètre indexé (numéroté) ; chaque paramètre se voit automatiquement attribué un index en fonction de la séquence des paramètres du texte de l’instruction. Les valeurs d’index des paramètres sont de base zéro. En d’autres termes, le premier index de paramètre est 0.</p>
     
     <p class="- topic/p ">Les paramètres autorisent la substitution avec type de valeurs inconnues au moment de la construction de l’instruction SQL. L’utilisation des paramètres est le seul moyen de garantir la classe de stockage d’une valeur transmise à la base de données. Lorsque des paramètres ne sont pas utilisés, toutes les valeurs sont converties de leur représentation texte en une classe de stockage en fonction de l’affinité du type de la colonne associée. Pour plus d’informations sur les classes de stockage et l’affinité des colonnes, voir la section « Prise en charge des types de données » dans l’annexe « <xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">Prise en charge de SQL dans les bases de données locales</xref> ».</p>
     
     <p class="- topic/p ">Les paramètres sont également utilisés comme mesure de sécurité pour empêcher une technique malveillante appelée attaque par injection de code SQL. Dans une attaque par injection de code SQL, l’utilisateur entre du code SQL dans un emplacement accessible (par exemple dans un champ de saisie de données). Si le code de l’application construit une instruction SQL en concaténant directement la saisie de l’utilisateur dans le texte SQL, le code SQL saisi par l’utilisateur est exécuté sur la base de données. L’exemple suivant illustre la concaténation de la saisie de l’utilisateur dans le texte SQL. <b class="+ topic/ph hi-d/b ">N’utilisez pas cette technique </b>:</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = '" + username + "' " +
         "    AND password = '" + password + "'";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     </codeblock>
     
     
     
     <p class="- topic/p ">L’utilisation des paramètres d’instruction à la place de la concaténation des valeurs entrées par l’utilisateur dans le texte d’une instruction empêche les attaques par injection de code SQL car les valeurs des paramètres sont traitées explicitement sous forme de valeurs substituées au lieu de devenir une partie du texte de l’instruction littérale. L’exemple suivant est l’alternative recommandée :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 // assume the variables "username" and "password"
     // contain user-entered data
     var sql:String =
         "SELECT userId " +
         "FROM users " +
         "WHERE username = :username " +
         "    AND password = :password";
     var statement:SQLStatement = new SQLStatement();
     statement.text = sql;
     // set parameter values
     statement.parameters[":username"] = username;
     statement.parameters[":password"] = password;
     </codeblock>
     
     
     
     <p class="- topic/p ">Toutes les valeurs des paramètres doivent être définies avant l’exécution de l’instruction. Les valeurs des paramètres spécifiés dans le tableau <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph> sont liées (c’est-à-dire combinées avec le texte de l’instruction) lorsque la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> est appelée. Après l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>, les modifications suivantes des valeurs ne sont pas appliquées à l’instruction en exécution. Toutefois, lors des appels consécutifs à <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph>, les valeurs modifiées sont utilisées. Si le texte de l’instruction comprend un paramètre pour lequel aucune valeur n’a été spécifiée dans la propriété <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph>, une erreur se produit.</p>
     
     <p class="- topic/p ">Pour effacer toutes les valeurs de paramètres de la propriété <codeph class="+ topic/ph pr-d/codeph ">parameters</codeph>, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">clearParameters()</codeph>.</p>
     
	 </apiDesc><example conref="examples\SQLStatement.parameters.1.as" class="- topic/example "> L’exemple suivant illustre l’utilisation d’un paramètre nommé, <codeph class="+ topic/ph pr-d/codeph ">:firstName</codeph>, dans une instruction SQL.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = :firstName";
employees.parameters[":firstName"] = "Sam";
employees.execute();
</codeblock></example><example conref="examples\SQLStatement.parameters.2.as" class="- topic/example "> L’exemple suivant explique comment utiliser un paramètre sans nom dans une instruction SQL.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// employees is a SQLStatement instance
employees.text = "SELECT FROM employees WHERE first = ?";
employees.parameters[0] = "Sam";
employees.execute();
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/text" class="- topic/link "><linktext class="- topic/linktext ">text</linktext></link><link href="flash.data.xml#SQLStatement/clearParameters()" class="- topic/link "><linktext class="- topic/linktext ">clearParameters()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLStatement:sqlConnection:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">sqlConnection</apiName><shortdesc class="- topic/shortdesc ">
     Objet SQLConnection qui gère la connexion à la ou aux bases de données dans lesquelles l’instruction est exécutée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">flash.data:SQLConnection</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lors d’une tentative de modification de la valeur de cette propriété alors que l’instruction est en cours d’exécution.
	 
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Objet SQLConnection qui gère la connexion à la ou aux bases de données dans lesquelles l’instruction est exécutée.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.data:SQLStatement:text:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
     Véritable texte SQL de l’instruction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Lors d’une tentative de modification de la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">text</codeph> alors que l’instruction est en cours d’exécution.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">IllegalOperationError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Véritable texte SQL de l’instruction.
	 
     <p class="- topic/p ">Le texte peut être n’importe quel code SQL pris en charge. Pour obtenir une description complète du dialecte SQL pris en charge par les bases de données SQL locales, consultez l’annexe « <xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">Prise en charge de SQL dans les bases de données locales</xref> ».</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLMode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLMode</apiName><shortdesc class="- topic/shortdesc ">
 Cette classe contient les constantes représentant les valeurs possibles du paramètre openMode des méthodes SQLConnection.open() et SQLConnection.openAsync().</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Cette classe contient les constantes représentant les valeurs possibles du paramètre <codeph class="+ topic/ph pr-d/codeph ">openMode</codeph> des méthodes <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.open()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.openAsync()</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links><apiValue id="flash.data:SQLMode:CREATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CREATE</apiName><shortdesc class="- topic/shortdesc ">
	 Indique que la connexion est ouverte pour les mises à jour et qu’un fichier de base de données est créé lorsque le fichier spécifié n’existe pas.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">create</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique que la connexion est ouverte pour les mises à jour et qu’un fichier de base de données est créé lorsque le fichier spécifié n’existe pas. Dans ce mode, la lecture et l’écriture sont autorisées dans la base de données. Si la base de données n’existe pas, une base de données est créée avant la fin de l’opération.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:READ" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">READ</apiName><shortdesc class="- topic/shortdesc ">
	 Indique que la connexion est ouverte en mode lecture seule.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">read</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique que la connexion est ouverte en mode lecture seule. Dans ce mode, l’écriture n’est pas autorisée dans la base de données. Si la base de données n’existe pas, l’opération d’ouverture échoue.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLMode:UPDATE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UPDATE</apiName><shortdesc class="- topic/shortdesc ">
	 Indique que la connexion est ouverte pour les mises à jour mais que aucun nouveau fichier de base de données n’est créé lorsque le fichier spécifié n’existe pas.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">update</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique que la connexion est ouverte pour les mises à jour mais que aucun nouveau fichier de base de données n’est créé lorsque le fichier spécifié n’existe pas. Dans ce mode, la lecture et l’écriture sont autorisées dans la base de données. Si la base de données n’existe pas, l’opération d’ouverture échoue.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/open()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:EncryptedLocalStore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EncryptedLocalStore</apiName><shortdesc class="- topic/shortdesc ">
	La classe EncryptedLocalStore fournit un mécanisme permanent de stockage de données chiffrées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	La classe EncryptedLocalStore fournit un mécanisme permanent de stockage de données chiffrées.
	 
	 <p class="- topic/p "><i class="+ topic/ph hi-d/i ">Prise en charge du profil AIR :</i> cette fonctionnalité est prise en charge sur tous les systèmes d’exploitation de bureau, mais ne l’est pas sur les périphériques mobiles ou les périphériques AIR pour TV. Vous pouvez tester la prise en charge lors de l’exécution à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">EncryptedLocalStore.isSupported</codeph>. Voir <xref href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html" class="- topic/xref ">Prise en charge du profil AIR</xref> pour plus d’informations sur la prise en charge de l’API dans plusieurs profils.</p>
	 
	 <p class="- topic/p ">AIR fournit un magasin local chiffré pour chaque application AIR installée sur l’ordinateur de l’utilisateur. Vous pouvez ainsi enregistrer et extraire les données stockées sur le disque dur local de l’utilisateur dans un format chiffré, que d’autres utilisateurs ne peuvent pas déchiffrer facilement. Un magasin local chiffré distinct est utilisé pour chaque application AIR et chacune d’elle fait appel à un magasin local chiffré pour chaque compte utilisateur de l’ordinateur. </p>
	
	<p class="- topic/p ">Utilisez le magasin local chiffré pour mettre en mémoire cache des informations à sécuriser, telles que les informations de connexion aux services Web. Le magasin local chiffré convient au stockage des informations devant rester confidentielles. En revanche, il ne permet pas de protéger les données des autres processus exécutés sous le même compte utilisateur. Il n’est donc pas approprié pour protéger les données secrètes d’une application, notamment les mots de passe DRM ou les clés de chiffrement.</p>
	
	<p class="- topic/p ">Pour associer le magasin local chiffré à chaque application et chaque utilisateur, AIR utilise DPAPI sous Windows, KeyChain sous Mac OS et KeyRing ou KWallet sous Linux. Le magasin local chiffré utilise un cryptage AES-CBC de 128 bits.</p>
	
	<p class="- topic/p ">Les informations conservées dans le magasin local chiffré ne sont disponibles que pour le contenu de l’application AIR dans le sandbox de sécurité de l’application. </p>
	
	<p class="- topic/p ">Si vous mettez à jour une application AIR, la version mise à jour conserve l’accès à toutes les données existantes dans le magasin local chiffré, sauf dans les cas suivants :</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">Les éléments ont été ajoutés avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</li><li class="- topic/li ">La version existante et la version mise à jour sont toutes deux publiées avant AIR 1.5.3, et la mise à jour est signée à l’aide d’une signature de migration.</li></ul>
	
	<p class="- topic/p "><b class="+ topic/ph hi-d/b ">Restrictions du magasin local chiffré</b></p>
	<p class="- topic/p ">Les données contenues dans le magasin local chiffré sont protégées par les informations d’identification du compte du système d’exploitation de l’utilisateur. Les autres entités ne peuvent pas accéder aux données contenues dans le magasin, à moins qu’elles soient en mesure d’utiliser les informations d’identification de cet utilisateur pour se connecter. Il est néanmoins possible que d’autres applications exécutées par un utilisateur authentifié puissent accéder aux données. Par conséquent, les données que votre application souhaite garder secrètes, telles que les clés utilisées pour l’obtention de licences ou la gestion des droits numériques, ne sont pas sécurisées. Le magasin local chiffré n’est pas un emplacement approprié pour le stockage de ces informations. Il convient uniquement au stockage des données privées d’un utilisateur, telles que les mots de passe.</p>
	
	<p class="- topic/p ">Les données contenues dans le magasin local chiffré peuvent être perdues pour plusieurs raisons. Par exemple, l’utilisateur n’a pas pu désinstaller l’application et supprimer le fichier chiffré. Ou l’ID de l’éditeur a été modifié suite à une mise à jour. Par conséquent, le magasin local chiffré doit être considéré comme une mémoire cache privée et non comme un emplacement de stockage permanent.  </p>
	
	<p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> est déconseillé et ne doit pas être défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Définir ce paramètre sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ne fournit pas de protection supplémentaire aux données. Par ailleurs, l’accès aux données est perdu à chaque mise à jour de l’application, même si l’ID de l’éditeur reste inchangé.</p>
	
	<p class="- topic/p ">Le magasin local chiffré peut s’exécuter plus lentement si les données stockées dépassent 10 Mo.</p>
	
	<p class="- topic/p ">Lorsque vous désinstallez une application AIR, le programme de désinstallation ne supprime pas les données stockées dans le magasin local chiffré. </p>
	
	<p class="- topic/p ">Voici les normes de bonne pratique concernant l’utilisation du magasin local chiffré :</p>
	
	<ul class="- topic/ul "><li class="- topic/li ">Utilisez le magasin local chiffré pour stocker des données utilisateur sensibles, telles que les mots de passe (en définissant <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>).</li><li class="- topic/li ">N’utilisez pas le magasin local chiffré pour stocker les données secrètes d’une application, notamment les clés DRM ou les jetons de licence.</li><li class="- topic/li ">Faites en sorte que votre application recrée les données stockées dans le magasin local chiffré en cas de perte, notamment en invitant l’utilisateur à saisir de nouveau les informations d’identification de son compte, si besoin est.</li><li class="- topic/li ">N’utilisez pas le paramètre <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph>.</li><li class="- topic/li ">Si vous définissez <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, ne migrez pas les éléments stockés lors d’une mise à jour, mais recréez les données après la mise à jour. </li><li class="- topic/li ">Stockez uniquement de petites quantités de données. Si vous souhaitez stocker de grandes quantités de données, utilisez une base de données SQL AIR avec cryptage.</li></ul>
	
	<p class="- topic/p ">Les éléments du magasin local chiffré sont identifiés par une chaîne. Tous les éléments sont stockés sous forme de données de tableau d’octets.</p>
	
	<p class="- topic/p ">Les données du magasin local chiffré sont placées dans un sous-répertoire du répertoire de données de l’application de l’utilisateur ; le chemin du sous-répertoire est Adobe/AIR/ELS/suivi de l’ID de l’application.</p>
	
	</apiDesc><example conref="examples\EncryptedLocalStore.1.as" class="- topic/example "> Le code suivant stocke une chaîne dans le magasin local chiffré, la récupère, puis la supprime :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "Bob";
var bytes:ByteArray = new ByteArray();
bytes.writeUTFBytes(str);
EncryptedLocalStore.setItem("firstName", bytes);

var storedValue:ByteArray = EncryptedLocalStore.getItem("firstName");
trace(storedValue.readUTFBytes(storedValue.length)); // "Bob"

EncryptedLocalStore.removeItem("firstName");
</codeblock></example></apiClassifierDetail><apiOperation id="flash.data:EncryptedLocalStore:getItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getItem</apiName><shortdesc class="- topic/shortdesc ">
		Données correspondant au nom spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou une chaîne vide.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Données ByteArray. S’il n’y a pas de données pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> fourni, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
		
		</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément dans le magasin local chiffré.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Données correspondant au nom spécifié.
		 
		<p class="- topic/p ">Si un élément n’existe pas avec le paramètre name spécifié, cette méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:removeItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeItem</apiName><shortdesc class="- topic/shortdesc ">
		Supprime l’élément avec le nom donné du magasin local chiffré.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou une chaîne vide.
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément dans le magasin local chiffré.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Supprime l’élément avec le nom donné du magasin local chiffré.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:reset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reset</apiName><shortdesc class="- topic/shortdesc ">
		Efface tout le stockage local crypté, en supprimant toutes les données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Efface tout le stockage local crypté, en supprimant toutes les données.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.data:EncryptedLocalStore:setItem" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setItem</apiName><shortdesc class="- topic/shortdesc ">
		Enregistre un objet ByteArray sous le nom spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou une chaîne vide.
		
		
		</apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ArgumentError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">ArgumentError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément dans le magasin local chiffré.
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">flash.utils:ByteArray</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Données.
		
		</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">stronglyBound</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">(déconseillé) Le paramètre <codeph class="+ topic/ph pr-d/codeph ">stronglyBound</codeph> doit être défini sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> (valeur par défaut). S’il est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, l’élément stocké ne pourra pas être récupéré si l’un des fichiers de l’application est endommagé. Par exemple, si un utilisateur installe une mise à jour de votre application, l’application mise à jour n’est pas en mesure de lire les données fortement liées précédemment écrites dans le magasin local chiffré.
		 
		</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
		Enregistre un objet ByteArray sous le nom spécifié.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.data:EncryptedLocalStore:isSupported:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">isSupported</apiName><shortdesc class="- topic/shortdesc ">
        La propriété isSupported est définie sur true si la classe EncryptedLocalStore est prise en charge sur la plate-forme actuelle ; dans le cas contraire, elle est définie sur false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="2" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Indique si le magasin local chiffré est disponible sur le système client.
        
        </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        La propriété <codeph class="+ topic/ph pr-d/codeph ">isSupported</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la classe EncryptedLocalStore est prise en charge sur la plate-forme actuelle ; dans le cas contraire, elle est définie sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
        
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLIndexSchema fournit des informations décrivant un index spécifique dans une base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLIndexSchema fournit des informations décrivant un index spécifique dans une base de données. Les informations disponibles incluent le nom de la table associée (la propriété <codeph class="+ topic/ph pr-d/codeph ">table</codeph>), l’instruction SQL utilisée pour créer l’index (la propriété <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>) et le nom de l’index (la propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph>).
 
 <p class="- topic/p ">Pour obtenir des informations de schéma d’index pour une base de données, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> pour charger les informations du schéma, en vous assurant d’utiliser <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLIndexSchema</codeph> comme valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph>. Dans l’occurrence SQLSchemaResult résultante, la propriété <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> contient un tableau d’occurrences SQLIndexSchema représentant les index de la base de données.</p>
 
 <p class="- topic/p ">En général, le code du développeur ne construit pas directement d’occurrences SQLIndexSchema.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links><apiConstructor id="flash.data:SQLIndexSchema:SQLIndexSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLIndexSchema</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLIndexSchema.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données associée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’index.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Instruction SQL utilisée pour créer cet index.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">table</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la table à laquelle cet index est attaché.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLIndexSchema. En général, le code du développeur n’appelle pas directement le constructeur SQLIndexSchema. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/indices" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.indices</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLIndexSchema:table:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">table</apiName><shortdesc class="- topic/shortdesc ">
     Nom de la table à laquelle cet index est attaché.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Nom de la table à laquelle cet index est attaché.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
 Une occurrence SQLTableSchema fournit des informations décrivant une table spécifique dans une base de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">flash.data:SQLSchema</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une occurrence SQLTableSchema fournit des informations décrivant une table spécifique dans une base de données. Elle contient le nom de la table (la propriété <codeph class="+ topic/ph pr-d/codeph ">name</codeph>), l’instruction SQL utilisée pour créer la table (la propriété <codeph class="+ topic/ph pr-d/codeph ">sql</codeph>) et des informations sur les colonnes de la table (la propriété <codeph class="+ topic/ph pr-d/codeph ">columns</codeph>).
 
 <p class="- topic/p ">Pour obtenir les informations du schéma des tables d’une base de données, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph> pour charger les informations du schéma, en vous assurant d’utiliser <codeph class="+ topic/ph pr-d/codeph ">null</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLTableSchema</codeph> comme valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">type</codeph>. Dans l’occurrence SQLSchemaResult résultante, la propriété <codeph class="+ topic/ph pr-d/codeph ">tables</codeph> contient un tableau d’occurrences SQLTableSchema représentant les tables de la base de données.</p>
 
 <p class="- topic/p ">En général, le code du développeur ne construit pas directement d’occurrences SQLTableSchema.</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link></related-links><apiConstructor id="flash.data:SQLTableSchema:SQLTableSchema" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLTableSchema</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLTableSchema.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">database</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la base de données associée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de la table.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sql</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Instruction SQL utilisée pour créer la table.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">columns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’occurrences SQLColumnSchema décrivant les colonnes de cette table.
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLTableSchema. En général, le code du développeur n’appelle pas directement le constructeur SQLTableSchema. Pour obtenir les informations de schéma d’une base de données, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.loadSchema()</codeph>.
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/getSchemaResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.getSchemaResult()</linktext></link><link href="flash.data.xml#SQLSchemaResult/tables" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLSchemaResult.tables</linktext></link></related-links></apiConstructor><apiValue id="flash.data:SQLTableSchema:columns:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">columns</apiName><shortdesc class="- topic/shortdesc ">
     Tableau d’occurrences SQLColumnSchema contenant les informations du schéma relatif aux colonnes de cette table.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Tableau d’occurrences SQLColumnSchema contenant les informations du schéma relatif aux colonnes de cette table. Si l’appel <codeph class="+ topic/ph pr-d/codeph ">SQlConnection.loadSchema()</codeph> indique que les informations de colonnes doivent être exclues du résultat, la propriété <codeph class="+ topic/ph pr-d/codeph ">columns</codeph> est un tableau vide (un tableau dont la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est 0).
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLColumnSchema" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLColumnSchema</linktext></link><link href="flash.data.xml#SQLConnection/loadSchema()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="flash.data:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
 La classe SQLResult fournit un accès aux données renvoyées en réponse à l’exécution d’une instruction SQL (une occurrence SQLStatement).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe SQLResult fournit un accès aux données renvoyées en réponse à l’exécution d’une instruction SQL (une occurrence SQLStatement).
 
 <p class="- topic/p ">L’occurrence SQLResult d’une instruction SQL est accédée par un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.getResult()</codeph> ou sous forme d’argument transmis au gestionnaire de résultats d’une occurrence Responder spécifiée dans un appel à <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph>. En général, le code du développeur ne construit pas directement d’occurrences SQLResult.</p>
 
 <p class="- topic/p ">Vous utilisez un objet SQLResult pour accéder aux lignes de données renvoyées par une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> (avec la propriété <codeph class="+ topic/ph pr-d/codeph ">data</codeph>), pour obtenir les informations sur l’identificateur de lignes d’une instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph> (avec la propriété <codeph class="+ topic/ph pr-d/codeph ">lastInsertRowID</codeph>), pour déterminer le nombre de lignes affectées par une instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> (avec la propriété <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph>) ou pour déterminer si d’autres lignes de résultats <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> n’ont pas été récupérées (avec la propriété <codeph class="+ topic/ph pr-d/codeph ">complete</codeph>).</p>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/getResult()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.getResult()</linktext></link><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links><apiConstructor id="flash.data:SQLResult:SQLResult" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SQLResult</apiName><shortdesc class="- topic/shortdesc ">
     Crée une occurrence SQLResult.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">data</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau de lignes renvoyées par l’exécution d’une instruction. Si l’instruction ne renvoie aucune ligne, cette valeur doit être nulle.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowsAffected</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique le nombre de ligne affectées par l’instruction exécutée.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">complete</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si d’autres lignes peuvent être récupérées ou si toutes les données ont été renvoyées.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rowID</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’instruction était une opération SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, il s’agit du nouvel identifiant unique de la ligne.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée une occurrence SQLResult. En général, le code du développeur n’appelle pas directement le constructeur SQLResult. Pour récupérer une occurrence SQLResult associée à une occurrence SQLStatement particulière, appelez la méthode <codeph class="+ topic/ph pr-d/codeph ">getResult()</codeph> de l’occurrence. Une occurrence SQLResult est également transmise sous forme d’argument à la fonction gestionnaire de résultats lorsqu’une occurrence Responder est spécifiée pour un appel de méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">next()</codeph>.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.data:SQLResult:complete:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">complete</apiName><shortdesc class="- topic/shortdesc ">
     Indique si toutes les données résultantes d’une exécution d’instruction ont été renvoyées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si toutes les données résultantes d’une exécution d’instruction ont été renvoyées.
     
     <p class="- topic/p ">Lorsqu’une instruction renvoie une ou plusieurs lignes, cette propriété indique si toutes les lignes ont été renvoyées. Lorsque la méthode <codeph class="+ topic/ph pr-d/codeph ">execute()</codeph> de l’objet SQLStatement est appelée avec une valeur d’argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>, seul le nombre de lignes de données résultantes spécifié est renvoyé dans la propriété <codeph class="+ topic/ph pr-d/codeph ">data</codeph> de l’objet SQLResult. Les appels suivants à <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.next()</codeph> rendent d’autres données disponibles. Cette propriété est utilisée pour déterminer le moment où les résultats finaux ont été renvoyés.</p>
     
     <p class="- topic/p ">Notez que, le nombre de lignes étant inconnu au moment de l’exécution, le curseur de la base de données doit se déplacer au-delà de la dernière ligne pour que l’exécution d’une instruction soit considérée comme complète. Lorsque la méthode <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.execute()</codeph> est appelée avec un argument <codeph class="+ topic/ph pr-d/codeph ">prefetch</codeph>, au moins une ligne de plus que le nombre total de lignes du jeu de résultats doit être demandée avant que la propriété <codeph class="+ topic/ph pr-d/codeph ">complete</codeph> de l’occurrence SQLResult résultante soit <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.</p>
	 
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLStatement/execute()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLStatement.next()</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:data:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">data</apiName><shortdesc class="- topic/shortdesc ">
     Données renvoyées en tant que résultat de l’exécution de l’instruction, en particulier lorsqu’une instruction SQL SELECT est exécutée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Array</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Données renvoyées en tant que résultat de l’exécution de l’instruction, en particulier lorsqu’une instruction SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> est exécutée.
     
     <p class="- topic/p ">Lorsqu’une instruction renvoie une ou plusieurs lignes, cette propriété est un tableau contenant les objets qui représentent les lignes de données de résultat. Chaque objet dans le tableau possède des noms de propriété qui correspondent aux noms des colonnes du jeu de résultats.</p>
	 
	 <p class="- topic/p ">Par exemple, supposons que vous exécutez l’instruction SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> suivante : </p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT lastName, firstName
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">En supposant que la table <codeph class="+ topic/ph pr-d/codeph ">employees</codeph> contient 10 lignes, la propriété <codeph class="+ topic/ph pr-d/codeph ">SQLResult.data</codeph> est un tableau de 10 éléments. Chaque élément est un objet avec deux propriétés : <codeph class="+ topic/ph pr-d/codeph ">lastName</codeph> et <codeph class="+ topic/ph pr-d/codeph ">firstName</codeph>.</p>
	 
	 <p class="- topic/p ">La situation est plus complexe lorsque vous utilisez une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> avec une colonne de résultats complexes, par exemple une fonction de regroupement. Par exemple, supposons que vous exécutez l’instruction SQL suivante : </p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary)
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">Dans les résultats de cette instruction, chaque objet du tableau <codeph class="+ topic/ph pr-d/codeph ">data</codeph> comprend deux propriétés nommées <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> et <codeph class="+ topic/ph pr-d/codeph ">SUM(salary)</codeph>. Toutefois, "SUM(salary)" n’est pas un identifiant valable. Si vous utilisez une colonne calculée, par exemple une fonction de regroupement ou autre, spécifiez un alias pour la colonne calculée dans l’instruction SQL. Cet alias est utilisé comme nom de la propriété dans les objets de données de résultat. Par exemple, considérons cette alternative à l’instruction précédente :</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT departmentId, SUM(salary) AS salarySubtotal
	 FROM employees
	 GROUP BY departmentId
	 </codeblock>
	 
	 <p class="- topic/p ">Dans le tableau <codeph class="+ topic/ph pr-d/codeph ">data</codeph> de cette instruction, les objets de résultat possèdent deux propriétés nommées <codeph class="+ topic/ph pr-d/codeph ">departmentId</codeph> et <codeph class="+ topic/ph pr-d/codeph ">salarySubtotal</codeph>. </p>
	 
	 <p class="- topic/p ">La propriété <codeph class="+ topic/ph pr-d/codeph ">data</codeph> est toujours un tableau, quel que soit le nombre de lignes et de colonnes du jeu de résultats. Par exemple, l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> suivante génère une ligne et une colonne, qui représentent une valeur unique :</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 SELECT COUNT(~~) AS numEmployees
	 FROM employees
	 </codeblock>
	 
	 <p class="- topic/p ">Après avoir exécuté la requête, la propriété <codeph class="+ topic/ph pr-d/codeph ">data</codeph> contient un objet Array avec un élément. Cet élément est un objet avec une seule propriété, <codeph class="+ topic/ph pr-d/codeph ">numEmployees</codeph>.</p>
	 
	 <p class="- topic/p ">Si plusieurs noms de colonne sont dupliqués dans les données de résultat, notamment si l’instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> comporte deux colonnes <codeph class="+ topic/ph pr-d/codeph ">id</codeph> différentes de deux tableaux distincts, des noms de propriété sont attribués aux noms dupliqués en fonction de la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph>. Par défaut, le nom de chaque colonne est utilisé comme nom de la propriété. Néanmoins, s’il existe plusieurs colonnes dans le jeu de résultats portant le même nom, le format de nom long <codeph class="+ topic/ph pr-d/codeph ">[nom-table]_[nom-colonne]</codeph> est utilisé chaque fois que le nom de plusieurs colonnes est identique. Ce comportement peut être modifié en définissant la propriété<codeph class="+ topic/ph pr-d/codeph ">SQLConnection.columnNameStyle</codeph>.</p>
	 
	 <p class="- topic/p ">Par défaut, les objets du tableau <codeph class="+ topic/ph pr-d/codeph ">data</codeph> sont des occurrences d’Object. Toutefois, si la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">SQLStatement.itemClass</codeph> d’une classe est définie, les éléments du tableau <codeph class="+ topic/ph pr-d/codeph ">data</codeph> sont créés sous forme d’occurrences de cette classe. Pour chaque colonne du jeu de données de résultat, la classe <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> doit avoir une propriété dont le nom correspond exactement au nom de la colonne. </p> 
	 
	 <p class="- topic/p ">Lorsque l’instruction ne renvoie aucune donnée, cette propriété est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. C’est le cas notamment s’il ne s’agit pas d’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> ou s’il s’agit d’une instruction <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph> qui renvoie 0 ligne. </p>
     
	 </apiDesc><example conref="examples\SQLStatement.itemClass.1.as" class="- topic/example "> Le code suivant illustre l’utilisation de la propriété <codeph class="+ topic/ph pr-d/codeph ">itemClass</codeph> pour que l’exécution crée des occurrences d’une classe personnalisée à partir des résultats de l’instruction SQL <codeph class="+ topic/ph pr-d/codeph ">SELECT</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
// Employee class definition
package
{
    public class Employee
    {
        public var name:String;
        public var ssn:String;
        public var id:uint;
        public override function toString():String
        {
            return "id: "+ id.toString() + " name: " + name + " ssn: " + ssn;
        }
    }
}


// using the Employee class as SQLStatement.itemClass
var conn:SQLConnection;
var dbStatement:SQLStatement;

function init():void
{
    conn = new SQLConnection();
    conn.addEventListener(SQLEvent.OPEN, connOpenHandler);
    
    dbStatement = new SQLStatement();
    dbStatement.sqlConnection = conn;
    dbStatement.text = "SELECT id, name, ssn FROM employees";
    dbStatement.itemClass = Employee;
    
    var dbFile:File = new File(File.separator + "employee.db");
    conn.open(dbFile);
}

function connOpenHandler(event:SQLEvent):void
{
    dbStatement.addEventListener(SQLEvent.RESULT, resultHandler);
    dbStatement.execute();
}

function resultHandler(event:SQLEvent):void
{
    var result:SQLResult = dbStatement.getResult();
    if (result != null)
    {
        var emp:Employee;
        var numRows:int = result.data.length;
        for (var i:int = 0; i &lt; numRows; i++)
        {
            emp = result.data[i];
            trace(emp.toString());
        }
    }
}
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/columnNameStyle" class="- topic/link "><linktext class="- topic/linktext ">SQLConnection.columnNameStyle</linktext></link><link href="flash.data.xml#SQLStatement/itemClass" class="- topic/link "><linktext class="- topic/linktext ">SQLStatement.itemClass</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:lastInsertRowID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastInsertRowID</apiName><shortdesc class="- topic/shortdesc ">
     Dernier identifiant généré par une instruction SQL INSERT.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Dernier identifiant généré par une instruction SQL <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>.
	 
     <p class="- topic/p ">La valeur est 0 si l’instruction exécutée n’était pas une instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>.</p>
	 
	 <p class="- topic/p ">Un identifiant de ligne est utilisé pour identifier une ligne de façon unique dans un tableau au sein d’une base de données. La valeur est générée fréquemment par la base de données.</p>
	 
	 <p class="- topic/p ">Pour plus d’informations sur les clés primaires et les identifiants de ligne générés, voir les sections « CREATE TABLE » et « Expressions » dans l’annexe « <xref href="http://adobe.com/go/learn_as3_sqlsupportdb_en" class="- topic/xref ">Prise en charge SQL dans les bases de données locales</xref> ».</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/lastInsertRowID" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.events.xml#SQLUpdateEvent/rowID" class="- topic/link "><linktext class="- topic/linktext ">flash.events.SQLUpdateEvent.rowID</linktext></link></related-links></apiValue><apiValue id="flash.data:SQLResult:rowsAffected:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">rowsAffected</apiName><shortdesc class="- topic/shortdesc ">
     Indique le nombre de lignes affectées par l’opération.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique le nombre de lignes affectées par l’opération. Seules les modifications spécifiées directement par une instruction <codeph class="+ topic/ph pr-d/codeph ">INSERT</codeph>, <codeph class="+ topic/ph pr-d/codeph ">UPDATE</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> sont comptées.
     
     <p class="- topic/p ">Les modifications auxiliaires causées par des déclencheurs ne sont pas prises en compte. Pour connaître le nombre total de modifications, y compris dues à des déclencheurs, utilisez la propriété <codeph class="+ topic/ph pr-d/codeph ">SQLConnection.totalChanges</codeph>.</p>
	 
	 <p class="- topic/p ">Notez que, lorsque l’opération SQL associée est une instruction <codeph class="+ topic/ph pr-d/codeph ">DELETE</codeph> sans clause <codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph> (c’est-à-dire qu’elle supprime toutes les lignes de la table), la propriété <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> est toujours 0, quel que soit le nombre de lignes supprimées. Pour connaître le nombre de lignes supprimées, vous pouvez inclure la clause <codeph class="+ topic/ph pr-d/codeph ">WHERE</codeph>, <codeph class="+ topic/ph pr-d/codeph ">WHERE 1 = 1</codeph>. Dans ce cas toutes les lignes sont supprimées et la propriété <codeph class="+ topic/ph pr-d/codeph ">rowsAffected</codeph> indique précisément le nombre de lignes supprimées. Toutefois, selon le nombre de lignes supprimées, cette opération affecte négativement les performances de l’instruction.</p>
     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="flash.data.xml#SQLConnection/totalChanges" class="- topic/link "><linktext class="- topic/linktext ">flash.data.SQLConnection.totalChanges</linktext></link></related-links></apiValue></apiClassifier></apiPackage>