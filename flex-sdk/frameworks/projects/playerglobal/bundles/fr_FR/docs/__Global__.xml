<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="__Global__" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiPackage/apiPackage "><apiName class="- topic/title reference/title apiRef/apiName ">__Global__</apiName><apiDetail class="- topic/body reference/refbody apiRef/apiDetail "/><apiClassifier languages="" id="globalClassifier:VerifyError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">VerifyError</apiName><shortdesc class="- topic/shortdesc ">
 La classe VerifyError représente une erreur qui se produit lorsqu’un fichier SWF incorrectement formé ou endommagé est détecté.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Une erreur VerifyError est renvoyée lorsqu’un fichier SWF incorrect ou endommagé est détecté.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe VerifyError représente une erreur qui se produit lorsqu’un fichier SWF incorrectement formé ou endommagé est détecté. 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.display.xml#Loader" class="- topic/link "><linktext class="- topic/linktext ">Classe Loader</linktext></link></related-links><apiConstructor id="VerifyError:VerifyError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">VerifyError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet VerifyError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contient le message associé à l’objet VerifyError.      
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet VerifyError.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:ArgumentError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ArgumentError</apiName><shortdesc class="- topic/shortdesc ">
 La classe ArgumentError représente une erreur qui se produit lorsque les arguments spécifiés dans une fonction ne correspondent pas aux arguments définis pour celle-ci.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Une erreur ArgumentError est renvoyée lorsque les valeurs de paramètre spécifiées lors d’un appel de fonction ne correspondent pas aux paramètres définis pour celle-ci.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe ArgumentError représente une erreur qui se produit lorsque les arguments spécifiés dans une fonction ne correspondent pas aux arguments définis pour celle-ci. Cette erreur se produit par exemple si vous appelez une fonction en spécifiant un nombre incorrect d’arguments, un argument de type incorrect ou un argument non valide.
 
 </apiDesc><example conref="examples\ArgumentErrorExample.as" class="- topic/example "> L’exemple suivant indique comment générer une erreur <codeph class="+ topic/ph pr-d/codeph ">ArgumentError</codeph> et la traiter avec une instruction <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph>. La fonction <codeph class="+ topic/ph pr-d/codeph ">println()</codeph> ne prend qu’un seul argument, une chaîne unique. Dans la mesure où deux chaînes sont fournies, l’erreur est renvoyée. De manière générale, le compilateur peut intercepter une erreur, mais la syntaxe <codeph class="+ topic/ph pr-d/codeph ">this[]</codeph> de cette instruction <codeph class="+ topic/ph pr-d/codeph ">try</codeph> contourne la vérification de la syntaxe du compilateur pour la fonction.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ArgumentErrorExample extends Sprite {
        public function ArgumentErrorExample() {
                println("Hello World");
                
                try {
                    this["println"]("Hello", "World");
                }
                catch(e:ArgumentError) {
                    trace(e);
                }
        }
        
        public function println(str:String):void {
            trace(str);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="ArgumentError:ArgumentError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ArgumentError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet ArgumentError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne associée à l’erreur.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet ArgumentError.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:QName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc ">

Les objets QName représentent les noms complets des éléments et attributs XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

Les objets QName représentent les noms complets des éléments et attributs XML. Chaque objet QName possède un nom local et un URI (Uniform Resource Identifier) d’espace de noms. Si la valeur de l’URI de l’espace de noms est <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, l’objet QName correspond à tout espace de noms. Utilisez le constructeur QName pour créer un objet QName correspondant soit à une copie d’un autre objet QName, soit à un nouvel objet QName dont le paramètre <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> est extrait d’un objet Namespace et le paramètre <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> est extrait d’un objet QName. 
 

<p class="- topic/p ">Les méthodes propres à E4X peuvent utiliser des objets QName, quels qu’ils soient, à l’aide de chaînes. Les méthodes E4X figurent dans les classes QName, Namespace, XML et XMLList. Parce qu’elles extraient une chaîne, elles peuvent également extraire un objet QName. Cette interchangeabilité explique comment une méthode telle que <codeph class="+ topic/ph pr-d/codeph ">XML.child()</codeph> gère la prise en charge des espaces de noms. </p>

<p class="- topic/p ">A l’instar des classes XML, XMLList et Namespace, la classe QName implémente des normes de gestion XML performantes définies dans la spécification ECMAScript pour XML (E4X) (ECMA-357, édition 2).</p>

<p class="- topic/p ">Un identificateur complet renvoie un objet QName. Si l’objet QName d’un élément XML est spécifié sans identifier d’espace de noms, la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> de l’objet QName associé est définie sur l’espace de noms global par défaut. Si l’objet QName d’un attribut XML est spécifié sans identifier d’espace de noms, la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> est définie sur une chaîne vide.</p>

</apiDesc><example conref="examples\QNameExample.as" class="- topic/example "> L’exemple suivant indique comment créer une occurrence de QName et l’utiliser pour sélectionner des éléments XML. Deux méthodes de création de QName sont indiquées :
 <ol class="- topic/ol "><li class="- topic/li ">Création d’une occurrence d’espace de noms, puis utilisation de cette dernière en tant qu’entrée pour le constructeur QName. Cette approche est préférable lorsque vous utilisez ultérieurement la propriété <codeph class="+ topic/ph pr-d/codeph ">Namespace.prefix</codeph> à d’autres fins.</li><li class="- topic/li ">Création d’une occurrence de QName utilisant une valeur de chaîne pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> dans le constructeur QName.</li></ol>
 <p class="- topic/p ">
 Ce code produit les résultats suivants :
 </p>
 <ol class="- topic/ol "><li class="- topic/li ">Définit une variable XML appelée <codeph class="+ topic/ph pr-d/codeph ">rssXML</codeph>.</li><li class="- topic/li ">Crée un nouvel objet Namespace avec le préfixe <codeph class="+ topic/ph pr-d/codeph ">dc</codeph>.</li><li class="- topic/li ">Crée un objet QName qui utilise l’objet Namespace et le <codeph class="+ topic/ph pr-d/codeph ">créateur</codeph> de nom local.</li><li class="- topic/li ">Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">showDescendants()</codeph>, qui utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">XML.descendants()</codeph> pour obtenir une occurrence XMLList contenant tous les éléments descendants dont le nom qualifié correspond à l’occurrence QName donnée.</li><li class="- topic/li ">Affiche le nom qualifié et la valeur de texte des éléments de la liste à l’aide d’une boucle <codeph class="+ topic/ph pr-d/codeph ">for each</codeph>.</li><li class="- topic/li ">Crée un autre objet QName qui utilise une valeur de chaîne pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> et la <codeph class="+ topic/ph pr-d/codeph ">date</codeph> du nom local.</li><li class="- topic/li ">Appelle à nouveau la méthode <codeph class="+ topic/ph pr-d/codeph ">showDescendants()</codeph> pour afficher le nom et la valeur de texte des éléments descendants.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    
    public class QNameExample extends Sprite
    {
        public function QNameExample()
        {
            var rssXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/">
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19">
                &lt;title>Test RSS&lt;/title>
                &lt;link>http://www.adobe.com/&lt;/link>
                &lt;description>This is a test RSS document.&lt;/description>
                &lt;language>en-us&lt;/language>
                &lt;items>
                  &lt;rdf:Seq>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/>
                  &lt;/rdf:Seq>
                &lt;/items>
              &lt;/channel>
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/">
                &lt;title>Flash Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flash/&lt;/link>
                &lt;description>Welcome to the Flash Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-08-08&lt;/dc:date>    
              &lt;/item>
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/">
                &lt;title>Flex Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flex/&lt;/link>
                &lt;description>Welcome to the Flex Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-10-16&lt;/dc:date>    
              &lt;/item>
            &lt;/rdf:RDF>;
            
            var dcNamespace:Namespace = new Namespace("dc", "http://purl.org/dc/elements/1.1/");
            var creatorQName:QName = new QName(dcNamespace, "creator");
            trace(creatorQName.uri); // http://purl.org/dc/elements/1.1/
            trace(creatorQName.localName); // creator
            
            showDescendants(rssXML, creatorQName);
            
            var dateQName:QName = new QName("http://purl.org/dc/elements/1.1/", "date");
            trace(dateQName.uri); // http://purl.org/dc/elements/1.1/
            trace(dateQName.localName); // date
            
            showDescendants(rssXML, dateQName);
        }
        
        public function showDescendants(xmlData:XML, qualifiedName:QName):void
        {
            var decendantList:XMLList = xmlData.descendants(qualifiedName);
            
            for each (var element:XML in decendantList)
            {
                trace(element.name()); // the fully qualified name, 
                                       // like "http://purl.org/dc/elements/1.1/::creator"
                trace(element); // the simple text value of each element, like "Adobe"
            }                
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Espace de nom </linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript pour la spécification XML (E4X) (ECMA-357 edition 2)</linktext></link></related-links><apiConstructor id="QName:QName_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc "> 
    Crée un objet QName qui est une copie d’un autre objet QName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><internal>(pdehaan) i changed first param from "name" to "uri" as the previous naming was very confusing
    </internal></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">qname</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet QName à copier. Les objets de tout autre type sont convertis en chaîne, qui est affectée à la propriété <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> du nouvel objet QName.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Crée un objet QName qui est une copie d’un autre objet QName. Si le paramètre transmis au constructeur est un objet QName, une copie de ce dernier est créée. Si le paramètre n’est pas un objet QName, le paramètre est converti en chaîne et affecté à la propriété <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> de la nouvelle occurrence de QName. Si le paramètre est réglé sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> ou n’est pas spécifié, un nouvel objet est créé et sa propriété <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> est définie sur la chaîne vide.
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette classe utilise deux entrées de constructeur, car chaque forme accepte des paramètres différents. Le constructeur se comporte différemment selon le type et le nombre de paramètres transmis, comme indiqué dans chaque entrée. ActionScript 3.0 ne prend pas en charge la surcharge d’une méthode ou d’un constructeur.</p>
    
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="QName:QName_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">QName</apiName><shortdesc class="- topic/shortdesc "> 
    Crée un objet QName associé à un objet URI à partir d’un objet Namespace et une valeur localName extraite d’un objet QName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName
    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet Namespace d’où sera copiée la valeur <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>. Un paramètre de tout autre type est converti en chaîne.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">localName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet QName d’où sera copiée la valeur <codeph class="+ topic/ph pr-d/codeph ">localName</codeph>. Un paramètre de tout autre type est converti en chaîne.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Crée un objet QName associé à un objet URI à partir d’un objet Namespace et une valeur <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> extraite d’un objet QName. Si l’un des paramètres ne correspond pas au type de données attendu, le paramètre est converti en chaîne et est affecté à la propriété correspondante du nouvel objet QName. Si, par exemple, les deux paramètres sont des chaînes, un nouvel objet QName est renvoyé. La propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> est définie sur le premier paramètre et la propriété <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> est définie sur le second paramètre. En d’autres termes, les permutations suivantes (qui ne constituent que quelques exemples) représentent des formes valides du constructeur :
<pre xml:space="preserve" class="- topic/pre ">
QName (uri:Namespace, localName:String);
QName (uri:String, localName: QName);
QName (uri:String, localName: String);
</pre>
    <p class="- topic/p ">Si vous transmettez <codeph class="+ topic/ph pr-d/codeph ">null</codeph> pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>, la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> du nouvel objet QName est définie sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    </p>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette classe utilise deux entrées de constructeur, car chaque forme accepte des paramètres différents. Le constructeur se comporte différemment selon le type et le nombre de paramètres transmis, comme indiqué dans chaque entrée. ActionScript 3.0 ne prend pas en charge la surcharge d’une méthode ou d’un constructeur.</p>
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="QName:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie une chaîne composée de l’URI et le nom local de l’objet QName, séparés par « :: ».</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom complet, exprimé sous forme de chaîne.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie une chaîne composée de l’URI et le nom local de l’objet QName, séparés par « :: ».
	
	<p class="- topic/p ">Le format varie selon la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> de l’objet QName :</p>
	<pre xml:space="preserve" class="- topic/pre ">If <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> == "" 
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">localName</codeph>
	else if <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> == null
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns ~~::<codeph class="+ topic/ph pr-d/codeph ">localName</codeph> 
	else
		<codeph class="+ topic/ph pr-d/codeph ">toString</codeph> returns <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>::<codeph class="+ topic/ph pr-d/codeph ">localName</codeph></pre>
	
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="QName:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie l’objet QName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur primitive d’une occurrence de QName.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">QName</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie l’objet QName.
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="QName:localName:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">localName</apiName><shortdesc class="- topic/shortdesc ">
	Nom local de l’objet QName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.localName, localName
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Nom local de l’objet QName.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="QName:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
	URI (Uniform Resource Identifier) de l’objet QName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">QName, QName.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URI (Uniform Resource Identifier) de l’objet QName.
 	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:EvalError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">EvalError</apiName><shortdesc class="- topic/shortdesc ">
 La classe EvalError représente une erreur qui se produit lorsque le code utilisateur appelle la fonction eval() ou tente d’utiliser l’opérateur new avec l’objet Function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Une erreur EvalError est renvoyée lorsque le code tente d’appeler eval() ou d’utiliser new avec l’objet Function.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe EvalError représente une erreur qui se produit lorsque le code utilisateur appelle la fonction <codeph class="+ topic/ph pr-d/codeph ">eval()</codeph> ou tente d’utiliser l’opérateur <codeph class="+ topic/ph pr-d/codeph ">new</codeph> avec l’objet Function. Les appels de <codeph class="+ topic/ph pr-d/codeph ">eval()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">new</codeph> avec l’objet Function ne sont pas pris en charge.
 
 </apiDesc></apiClassifierDetail><apiConstructor id="EvalError:EvalError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">EvalError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet EvalError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne associée à l’erreur.     
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet EvalError.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:Math" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Math</apiName><shortdesc class="- topic/shortdesc ">
 La classe Math contient des méthodes et des constantes qui représentent les fonctions et valeurs mathématiques courantes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math, math object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Math est une classe de niveau supérieur composée de propriétés et méthodes statiques qui définissent les constantes et fonctions mathématiques courantes.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Math contient des méthodes et des constantes qui représentent les fonctions et valeurs mathématiques courantes. 
 <p class="- topic/p ">Utilisez les méthodes et les propriétés de cette classe pour accéder aux constantes et fonctions mathématiques et les manipuler. Toutes les propriétés et les méthodes de la classe Math sont statiques et doivent être appelées à l’aide de la syntaxe <codeph class="+ topic/ph pr-d/codeph ">Math.method(</codeph><codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">parameter</i></codeph><codeph class="+ topic/ph pr-d/codeph ">)</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">Math.constant</codeph>. Dans ActionScript, les constantes sont définies selon la précision maximale des nombres à virgule flottante comportant deux décimales, conformément à IEEE-754.</p>
 <p class="- topic/p ">Plusieurs méthodes de la classe Math utilisent la mesure d’un angle en radians en tant que paramètre. Vous pouvez utiliser l’équation suivante pour calculer les valeurs en radian avant d’appeler la méthode, puis exprimer la valeur calculée en tant que paramètre. Vous pouvez également utiliser toutes les valeurs situées à droite de l’équation (l’angle étant exprimé en radians plutôt qu’en <codeph class="+ topic/ph pr-d/codeph ">degrees</codeph>) en tant que paramètre radian.</p>
 <p class="- topic/p ">Pour calculer une valeur radian, utilisez la formule suivante :</p>
 <pre xml:space="preserve" class="- topic/pre ">
 radians = degrees ~~ Math.PI/180
 </pre>
 <p class="- topic/p ">Pour convertir les radians en degrés, utilisez la formule suivante :</p>
 <pre xml:space="preserve" class="- topic/pre ">
 degrees = radians ~~ 180/Math.PI
 </pre>
 <p class="- topic/p ">Dans l’exemple suivant, l’équation est utilisée en tant que paramètre pour calculer le sinus d’un angle de 45° :</p>
 <p class="- topic/p "><codeph class="+ topic/ph pr-d/codeph ">Math.sin(45 ~~ Math.PI/180)</codeph> est identique à <codeph class="+ topic/ph pr-d/codeph ">Math.sin(.7854)</codeph></p>
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les fonctions Math acos, asin, atan, atan2, cos, exp, log, pow, sin et sqrt risquent de produire un résultat légèrement différent selon les algorithmes utilisés par le processeur ou le système d’exploitation. Les moteurs d’exécution de Flash font appel au processeur (ou au système d’exploitation si le processeur ne prend pas en charge les calculs en virgule flottante) lorsqu’ils effectuent des calculs pour les fonctions indiquées et que les résultats sont légèrement différents selon le processeur ou le système d’exploitation utilisé.
 </p>
 
 
 </apiDesc></apiClassifierDetail><apiOperation id="Math:abs" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">abs</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie la valeur absolue du nombre spécifié par le paramètre val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.abs, abs, absolute
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur absolue du paramètre spécifié.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre dont la valeur absolue est renvoyée.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur absolue du paramètre Number spécifié.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie la valeur absolue du nombre spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:acos" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">acos</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie l’arc cosinus du nombre spécifié dans le paramètre val, en radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.acos, acos, arc cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Arc cosinus du paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre compris entre -1,0 et 1,0.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie l’arc cosinus, en radians, du paramètre Number. 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie l’arc cosinus du nombre spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>, en radians.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:asin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">asin</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie l’arc sinus du nombre spécifié dans le paramètre val, en radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.asin, asin, arc sine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre compris entre pi négatif divisé par 2 et pi positif divisé par 2.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre compris entre -1,0 et 1,0.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur, en radians, de l’arc sinus du paramètre Number spécifié.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie l’arc sinus du nombre spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>, en radians.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:atan2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">atan2</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie l’angle du point y/x en radians, lorsqu’il est mesuré dans le sens inverse des aiguilles d’une montre à partir de l’axe x d’un cercle (où 0,0 représente le centre du cercle).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.atan2, atan2, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un nombre.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">y</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Coordonnée <i class="+ topic/ph hi-d/i ">y</i> du point.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">x</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Coordonnée <i class="+ topic/ph hi-d/i ">x</i> du point.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie l’angle du point y/x en radians, lorsqu’il est mesuré dans le sens inverse des aiguilles d’une montre à partir de l’axe x d’un cercle.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie l’angle du point <codeph class="+ topic/ph pr-d/codeph ">y</codeph>/<codeph class="+ topic/ph pr-d/codeph ">x</codeph> en radians, lorsqu’il est mesuré dans le sens inverse des aiguilles d’une montre à partir de l’axe <i class="+ topic/ph hi-d/i ">x</i> d’un cercle (où 0,0 représente le centre du cercle). La valeur renvoyée est comprise entre pi positif et pi négatif. Notez que le premier paramètre attribué à atan2 correspond toujours à la coordonnée <i class="+ topic/ph hi-d/i ">y</i>.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:atan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">atan</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie la valeur, en radians, de l’angle dont la tangente est spécifiée dans le paramètre val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.atan, atan, arc tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre compris entre pi négatif divisé par 2 et pi positif divisé par 2.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre représentant la tangente d’un angle.  
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie l’angle, en radians, dont la tangente est spécifiée par le paramètre val.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie la valeur, en radians, de l’angle dont la tangente est spécifiée dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>. La valeur renvoyée est comprise entre pi négatif divisé par 2 et pi positif divisé par 2.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:ceil" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">ceil</apiName><shortdesc class="- topic/shortdesc ">
  Renvoie la valeur maximale du nombre ou de l’expression spécifié(e).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ceil, ceil, ceiling
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier le plus proche et supérieur ou égal au paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur maximale du nombre ou de l’expression spécifié(e).
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Renvoie la valeur maximale du nombre ou de l’expression spécifié(e). La valeur maximale d’un nombre est l’entier le plus proche supérieur ou égal au nombre.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/floor()" class="- topic/link "><linktext class="- topic/linktext ">Math.floor()</linktext></link><link href="#Math/round()" class="- topic/link "><linktext class="- topic/linktext ">Math.round()</linktext></link></related-links></apiOperation><apiOperation id="Math:cos" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">cos</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie le cosinus de l’angle spécifié en radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.cos, cos, cosine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre compris entre -1,0 et 1,0.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre représentant un angle mesuré en radians. 
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le cosinus de l’angle spécifié.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie le cosinus de l’angle spécifié en radians. Pour calculer un radian, voir la présentation de la classe Math.
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:exp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exp</apiName><shortdesc class="- topic/shortdesc ">
  Renvoie la valeur de la base du logarithme népérien (e), à la puissance de l’exposant spécifié dans le paramètre x.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.exp, exp, exponent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc "><i class="+ topic/ph hi-d/i ">e</i> à la puissance du paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Exposant ; un nombre ou une expression.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur de la base du logarithme népérien (e), à la puissance de l’exposant spécifié dans le paramètre val.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Renvoie la valeur de la base du logarithme népérien (<i class="+ topic/ph hi-d/i ">e</i>), à la puissance de l’exposant spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">x</codeph>. La constante <codeph class="+ topic/ph pr-d/codeph ">Math.E</codeph> peut renvoyer la valeur <i class="+ topic/ph hi-d/i ">e</i>.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/E" class="- topic/link "><linktext class="- topic/linktext ">Math.E</linktext></link></related-links></apiOperation><apiOperation id="Math:floor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">floor</apiName><shortdesc class="- topic/shortdesc ">
  Renvoie la valeur minimale du nombre ou de l’expression spécifié(e) dans le paramètre val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.floor, floor
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier le plus proche et inférieur ou égal au paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur minimale du nombre ou de l’expression spécifié(e) dans le paramètre val.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Renvoie la valeur minimale du nombre ou de l’expression spécifié(e) dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>. La valeur minimale est l’entier le plus proche inférieur ou égal au nombre ou à l’expression spécifié(e).
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:log" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">log</apiName><shortdesc class="- topic/shortdesc ">
  Renvoie le logarithme népérien du paramètre val.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log, log, logarithm
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Logarithme népérien du paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression d’une valeur supérieure à 0.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le logarithme népérien du paramètre val. 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Renvoie le logarithme népérien du paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph>.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:max" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">max</apiName><shortdesc class="- topic/shortdesc ">
  Evalue val1 et val2 (ou plusieurs valeurs) et renvoie la valeur la plus grande.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.max, max, maximum
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie la valeur la plus élevée des paramètres <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> et <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (ou un nombre supérieur de paramètres).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression. <codeph class="+ topic/ph pr-d/codeph ">Math.max()</codeph> peut accepter plusieurs arguments.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Evalue les paramètres val1 et val2 et renvoie la valeur la plus élevée.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Evalue <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> et <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (ou un nombre supérieur de valeurs), puis renvoie la valeur supérieure.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/min()" class="- topic/link "><linktext class="- topic/linktext ">Math.min()</linktext></link></related-links></apiOperation><apiOperation id="Math:min" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">min</apiName><shortdesc class="- topic/shortdesc ">
  Evalue val1 et val2 (ou plusieurs valeurs) et renvoie la valeur inférieure.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.min, min, minimum
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie la valeur inférieure des paramètres <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> et <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (ou un nombre supérieur de paramètres).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression. <codeph class="+ topic/ph pr-d/codeph ">Math.min()</codeph> peut accepter plusieurs arguments.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Evalue les paramètres val1 et val2 et renvoie la valeur la plus faible.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Evalue <codeph class="+ topic/ph pr-d/codeph ">val1</codeph> et <codeph class="+ topic/ph pr-d/codeph ">val2</codeph> (ou un nombre supérieur de valeurs), puis renvoie la valeur inférieure.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/max()" class="- topic/link "><linktext class="- topic/linktext ">Math.max()</linktext></link></related-links></apiOperation><apiOperation id="Math:pow" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pow</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie base à la puissance de pow.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.pow, pow, power
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de <codeph class="+ topic/ph pr-d/codeph ">base</codeph> à la puissance de <codeph class="+ topic/ph pr-d/codeph ">pow</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">base</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à élever à la puissance du paramètre <codeph class="+ topic/ph pr-d/codeph ">pow</codeph>.
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pow</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre spécifiant la puissance à laquelle le paramètre <codeph class="+ topic/ph pr-d/codeph ">base</codeph> est élevé.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie val1 élevé à la puissance de val2.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie <codeph class="+ topic/ph pr-d/codeph ">base</codeph> à la puissance de <codeph class="+ topic/ph pr-d/codeph ">pow</codeph>.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:random" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">random</apiName><shortdesc class="- topic/shortdesc ">
  Renvoie un nombre pseudo-aléatoire n, où 0 &amp;lt;= n &amp;lt; 1.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.random, random
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre pseudo-aléatoire.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie un nombre pseudo-aléatoire n, où 0 &lt;= n &lt; 1.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Renvoie un nombre pseudo-aléatoire n, où 0 &lt;= n &lt; 1. Le nombre renvoyé est calculé de façon confidentielle et « pseudo-aléatoire », dans la mesure où le calcul contient inévitablement certains éléments non aléatoires.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:round" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">round</apiName><shortdesc class="- topic/shortdesc ">
  Arrondit la valeur du paramètre val à l’entier immédiatement supérieur ou inférieur et la renvoie.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.round, round
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph> arrondi à l’entier le plus proche.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à arrondir.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la valeur du paramètre val arrondi à l’entier (inférieur ou supérieur) le plus proche.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Arrondit la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph> à l’entier immédiatement supérieur ou inférieur et la renvoie. Si <codeph class="+ topic/ph pr-d/codeph ">val</codeph> est équidistant par rapport aux deux entiers les plus proches (si le nombre se termine par ,5), la valeur est arrondie à l’entier immédiatement supérieur.
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/ceil()" class="- topic/link "><linktext class="- topic/linktext ">Math.ceil()</linktext></link><link href="#Math/floor()" class="- topic/link "><linktext class="- topic/linktext ">Math.floor()</linktext></link></related-links></apiOperation><apiOperation id="Math:sin" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sin</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie le sinus de l’angle spécifié en radians.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sin, sin, sine
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ; le sinus de l’angle spécifié (compris entre -1,0 et 1,0).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre représentant un angle mesuré en radians.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le sinus de l’angle spécifié.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie le sinus de l’angle spécifié en radians. Pour calculer un radian, voir la présentation de la classe Math.
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/tan()" class="- topic/link "><linktext class="- topic/linktext ">Math.tan()</linktext></link></related-links></apiOperation><apiOperation id="Math:sqrt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sqrt</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie la racine carrée du nombre spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt, sqrt, square root 
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">val</codeph> est supérieur ou égal à zéro, un nombre. Dans le cas contraire, <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (n’est pas un nombre).
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou expression supérieur ou égal à 0. 
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la racine carrée du nombre spécifié.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie la racine carrée du nombre spécifié.
  
  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Math:tan" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">tan</apiName><shortdesc class="- topic/shortdesc ">
  Calcule et renvoie la tangente de l’angle spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.tan, tan, tangent
   
   </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tangente du paramètre <codeph class="+ topic/ph pr-d/codeph ">angleRadians</codeph>.
  
  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">angleRadians</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre représentant un angle mesuré en radians.
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la tangente de l’angle spécifié.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Calcule et renvoie la tangente de l’angle spécifié. Pour calculer un radian, voir la présentation de la classe Math.
  
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Math/acos()" class="- topic/link "><linktext class="- topic/linktext ">Math.acos()</linktext></link><link href="#Math/asin()" class="- topic/link "><linktext class="- topic/linktext ">Math.asin()</linktext></link><link href="#Math/atan()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan()</linktext></link><link href="#Math/atan2()" class="- topic/link "><linktext class="- topic/linktext ">Math.atan2()</linktext></link><link href="#Math/cos()" class="- topic/link "><linktext class="- topic/linktext ">Math.cos()</linktext></link><link href="#Math/sin()" class="- topic/link "><linktext class="- topic/linktext ">Math.sin()</linktext></link></related-links></apiOperation><apiValue id="Math:E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">E</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour la base des logarithmes népériens, exprimée en e.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.e, e
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2.71828182845905</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour la base des logarithmes népériens, exprimée en e.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour la base des logarithmes népériens, exprimée en <i class="+ topic/ph hi-d/i ">e</i>. La valeur approximative de <i class="+ topic/ph hi-d/i ">e</i><codeph class="+ topic/ph pr-d/codeph "> </codeph> est 2,71828182845905.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN10" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LN10</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour le logarithme népérien de 10, exprimée sous la forme de loge10, d’une valeur approximative de 2,302585092994046.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ln10, ln10, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2.302585092994046</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour le logarithme népérien de 10, exprimée sous la forme de loge10, d’une valeur approximative de 2,302585092994046.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour le logarithme népérien de 10, exprimée sous la forme de log<sub class="+ topic/ph hi-d/sub ">e</sub> 10, d’une valeur approximative de 2,302585092994046.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LN2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LN2</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour le logarithme népérien de 2, exprimée sous la forme de loge2, d’une valeur approximative de 0,6931471805599453.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.ln2, ln2, natural logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.6931471805599453</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour le logarithme népérien de 2, exprimée sous la forme de loge2, d’une valeur approximative de 0,6931471805599453.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour le logarithme népérien de 2, exprimée sous la forme de log<sub class="+ topic/ph hi-d/sub ">e</sub> 2, d’une valeur approximative de 0.6931471805599453.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG10E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOG10E</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour le logarithme en base 10 de la constante e (Math.E), exprimée sous la forme de log10e, d’une valeur approximative de 0,4342944819032518.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log10e, log10e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.4342944819032518</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour le logarithme en base 10 de la constante e, exprimée sous la forme de log10e, d’une valeur approximative de 0,4342944819032518.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour le logarithme en base 10 de la constante <i class="+ topic/ph hi-d/i ">e</i> (<codeph class="+ topic/ph pr-d/codeph ">Math.E</codeph>), exprimée sous la forme de log<sub class="+ topic/ph hi-d/sub ">10</sub>e, d’une valeur approximative de 0,4342944819032518. 
  <p class="- topic/p ">La méthode <codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> calcule le logarithme népérien d’un nombre. Multipliez le résultat de <codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> par <codeph class="+ topic/ph pr-d/codeph ">Math.LOG10E</codeph> pour obtenir le logarithme en base 10.</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:LOG2E" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">LOG2E</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour le logarithme en base 2 de la constante e, exprimée sous la forme de log2e, d’une valeur approximative de 1,442695040888963387.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.log2e, log2e, logarithm
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1.442695040888963387</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour le logarithme en base 2 de la constante e, exprimée sous la forme de log2e, d’une valeur approximative de 1,442695040888963387.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour le logarithme en base 2 de la constante <i class="+ topic/ph hi-d/i ">e</i>, exprimée sous la forme de log2e, d’une valeur approximative de 1,442695040888963387.
  
  <p class="- topic/p ">La méthode <codeph class="+ topic/ph pr-d/codeph ">Math.log</codeph> calcule le logarithme népérien d’un nombre. Multipliez le résultat de <codeph class="+ topic/ph pr-d/codeph ">Math.log()</codeph> par <codeph class="+ topic/ph pr-d/codeph ">Math.LOG2E</codeph> pour obtenir le logarithme en base 2.</p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:PI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">PI</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour le ratio de la circonférence d’un cercle par rapport à son diamètre, exprimée sous la forme de pi, d’une valeur de 3,141592653589793.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.pi, pi
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">3.141592653589793</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour le ratio de la circonférence d’un cercle par rapport à son diamètre, exprimée sous la forme de pi, d’une valeur de 3,141592653589793.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour le ratio de la circonférence d’un cercle par rapport à son diamètre, exprimée sous la forme de pi, d’une valeur de 3,141592653589793.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT1_2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SQRT1_2</apiName><shortdesc class="- topic/shortdesc "> 
  Constante mathématique pour la racine carrée de un demi, d’une valeur approximative de 0,7071067811865476.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt1_2, sqrt1_2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0.7071067811865476</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour la racine carrée de un demi, d’une valeur approximative de 0,7071067811865476.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
  Constante mathématique pour la racine carrée de un demi, d’une valeur approximative de 0,7071067811865476.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Math:SQRT2" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">SQRT2</apiName><shortdesc class="- topic/shortdesc ">
  Constante mathématique pour la racine carrée de 2, d’une valeur approximative de 1,4142135623730951.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">math.sqrt2, sqrt2, square root
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1.4142135623730951</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Constante mathématique pour la racine carrée de 2, d’une valeur approximative de 1,4142135623730951.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Constante mathématique pour la racine carrée de 2, d’une valeur approximative de 1,4142135623730951.
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Array" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
 La classe Array vous permet d’accéder aux tableaux et de les manipuler.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Array, Array object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Vous permet d’accéder aux tableaux indexés et de les manipuler.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Array vous permet d’accéder aux tableaux et de les manipuler. Tous les index de tableaux commencent à zéro, ce qui signifie que le premier élément du tableau est <codeph class="+ topic/ph pr-d/codeph ">[0]</codeph>, le deuxième est <codeph class="+ topic/ph pr-d/codeph ">[1]</codeph>, etc. Pour créer un objet Array, utilisez le constructeur <codeph class="+ topic/ph pr-d/codeph ">new Array()</codeph>. <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> peut également être appelé en tant que fonction. Vous pouvez en outre utiliser l’opérateur d’accès aux tableaux (<codeph class="+ topic/ph pr-d/codeph ">[]</codeph>) pour initialiser un tableau ou accéder aux éléments qu’il contient. 
 <p class="- topic/p ">Vous pouvez stocker divers types de données dans un élément de tableau, y compris les nombres, les chaînes, les objets et même d’autres tableaux. Vous pouvez créer un tableau <i class="+ topic/ph hi-d/i ">multidimensionnel</i> en concevant un tableau indexé et en affectant à chacun de ses éléments un tableau indexé différent. Ce type de tableau est considéré comme étant multidimensionnel car il peut être utilisé pour représenter des données dans un tableau.</p>
 <p class="- topic/p "> Les tableaux sont <i class="+ topic/ph hi-d/i ">sparse arrays</i>, ce qui signifie qu’un élément peut occuper la position d’index 0 et un autre la position d’index 5, mais qu’aucun autre élément n’occupe une position comprise entre 0 et 5. Dans ce cas, les éléments compris entre la position 1 et la position 4 ne sont pas définis. Ce terme indique généralement l’absence d’un élément, plutôt que la présence d’un élément doté de la valeur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.</p>
 
 <p class="- topic/p ">L’affectation au tableau s’effectue par référence plutôt que par valeur. lorsque vous affectez une variable de tableau à une autre variable de tableau, elles renvoient toutes deux au même tableau :</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var oneArray:Array = new Array("a", "b", "c");
 var twoArray:Array = oneArray; // Both array variables refer to the same array.
 twoArray[0] = "z";             
 trace(oneArray);               // Output: z,b,c.
 </codeblock>
 <p class="- topic/p ">N’utilisez pas la classe Array pour créer des <i class="+ topic/ph hi-d/i ">associative arrays</i> (également appelés <i class="+ topic/ph hi-d/i ">hashes</i>), qui sont des structures de données qui contiennent des éléments nommés et non pas des éléments chiffrés. Pour créer des tableaux associatifs, utilisez la classe Object. Bien que ActionScript vous permette de créer des tableaux associatifs à l’aide de la classe Array, vous ne pouvez pas associer les méthodes ou les propriétés de cette dernière à un tableau associatif. </p>
 <p class="- topic/p ">Vous pouvez étendre la classe Array et bloquer ou ajouter des méthodes. Vous devez cependant affecter à la sous-classe la propriété <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph>, sous peine de ne plus pouvoir stocker des données dans un tableau.</p>
 
 </apiDesc><example conref="examples\ArrayExample.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array, <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph>, sans argument et avec une longueur initiale de 0 :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ArrayExample extends Sprite {
        public function ArrayExample() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[] (accès au tableau)</linktext></link><link href="#Object" class="- topic/link "><linktext class="- topic/linktext ">Object, classe</linktext></link></related-links><apiConstructor id="Array:Array_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
     Permet de créer un tableau contenant le nombre spécifié d’éléments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’argument est un nombre autre qu’un entier supérieur ou égal à 0.    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Liste de deux valeurs arbitraires ou plus séparées par une virgule. 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque : </b>si vous transmettez un paramètre numérique unique au constructeur Array, il est implicitement interprété comme la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> du tableau.</p>
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Permet de créer un tableau contenant le nombre spécifié d’éléments. Tous les types de valeurs sont pris en charge. La valeur de l’index (ou de la position) du premier élément d’un tableau est toujours 0.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette classe contient deux entrées de constructeur, car celui-ci gère les types variables d’arguments. Le constructeur se comporte différemment selon le type et le nombre d’arguments transmis, comme indiqué dans chaque entrée. ActionScript 3.0 ne prend pas en charge la surcharge d’une méthode ou d’un constructeur.</p>
     </apiDesc><example conref="examples\Array_Array_3.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array avec une longueur initiale de 3, remplit le tableau avec les éléments de type chaîne <codeph class="+ topic/ph pr-d/codeph ">one</codeph>, <codeph class="+ topic/ph pr-d/codeph ">two</codeph> et <codeph class="+ topic/ph pr-d/codeph ">three</codeph>, puis convertit ces éléments en une chaîne unique.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array_3 extends Sprite {

        public function Array_Array_3() {
            var myArr:Array = new Array("one", "two", "three");
            trace(myArr.length); // 3
            trace(myArr);          // one,two,three
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[], accès au tableau</linktext></link><link href="#Array/length" class="- topic/link "><linktext class="- topic/linktext ">Array.length</linktext></link></related-links></apiConstructor><apiConstructor id="Array:Array_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
     Permet de créer un tableau contenant le nombre spécifié d’éléments.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’argument est un nombre autre qu’un entier supérieur ou égal à 0.    
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">numElements</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un entier spécifiant le nombre d’éléments contenus dans le tableau.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Permet de créer un tableau contenant le nombre spécifié d’éléments. Si vous ne spécifiez aucun paramètre, un tableau contenant 0 élément est créé. Si vous spécifiez un nombre d’éléments, le tableau créé contient le nombre d’éléments indiqué par <codeph class="+ topic/ph pr-d/codeph ">numElements</codeph>. 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette classe contient deux entrées de méthode de constructeur, car le constructeur gère les types variables d’arguments. Le constructeur se comporte différemment selon le type et le nombre d’arguments transmis, comme indiqué dans chaque entrée. ActionScript 3.0 ne prend pas en charge la surcharge d’une méthode ou d’un constructeur.</p>
     
     
     </apiDesc><example conref="examples\Array_Array.as" class="- topic/example "> L’exemple suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph>, sans argument et avec une longueur initiale de 0 :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array extends Sprite {

        public function Array_Array() {
            var myArr:Array = new Array();
            trace(myArr.length); // 0
        }
    }
}
</codeblock></example><example conref="examples\Array_Array_2.as" class="- topic/example "> L’exemple suivant crée un objet Array avec 5 éléments initiaux, d’une longueur de 5, et remplit le premier élément avec la chaîne <codeph class="+ topic/ph pr-d/codeph ">"one"</codeph>, puis ajoute l’élément de chaîne <codeph class="+ topic/ph pr-d/codeph ">"six"</codeph> à la fin du tableau en employant la méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class Array_Array_2 extends Sprite {

        public function Array_Array_2() {
            var myArr:Array = new Array(5);
            trace(myArr.length); // 5
            myArr[0] = "one";
            myArr.push("six");
            trace(myArr);         // one,,,,,six
            trace(myArr.length); // 6
        }
    }
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[], accès au tableau</linktext></link><link href="#Array/length" class="- topic/link "><linktext class="- topic/linktext ">Array.length</linktext></link></related-links></apiConstructor><apiOperation id="Array:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     Concatène les éléments spécifiés dans les paramètres avec ceux contenus dans un tableau et crée un nouveau tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.concat, concat, concatenate
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau qui contient les éléments de ce tableau, suivis des éléments des paramètres.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de tout type (nombre, élément ou chaîne) à concaténer dans un nouveau tableau. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Concatène les éléments spécifiés par les paramètres.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Concatène les éléments spécifiés dans les paramètres avec ceux contenus dans un tableau et crée un nouveau tableau. Si les paramètres spécifient un tableau, les éléments correspondants sont concaténés. Si vous ne transmettez aucun paramètre, le nouveau tableau est une duplication (clone superficiel) du tableau d’origine.
     
     </apiDesc><example conref="examples\Array.concat.1.as" class="- topic/example "> Le code suivant crée quatre objets Array :
 <ul class="- topic/ul "><li class="- topic/li ">Le tableau <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph>, qui contient les nombres <codeph class="+ topic/ph pr-d/codeph ">1</codeph>, <codeph class="+ topic/ph pr-d/codeph ">2</codeph> et <codeph class="+ topic/ph pr-d/codeph ">3</codeph>. </li><li class="- topic/li ">Le tableau <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, qui contient les nombres <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. </li><li class="- topic/li ">Le tableau <codeph class="+ topic/ph pr-d/codeph ">numbersAndLetters</codeph>, qui appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">concat()</codeph> pour produire le tableau <codeph class="+ topic/ph pr-d/codeph ">[1,2,3,a,b,c]</codeph>. </li><li class="- topic/li ">Le tableau <codeph class="+ topic/ph pr-d/codeph ">lettersAndNumbers</codeph>, qui appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">concat()</codeph> pour produire le tableau <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,1,2,3]</codeph>. </li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var numbers:Array = new Array(1, 2, 3);
var letters:Array = new Array("a", "b", "c");
var numbersAndLetters:Array = numbers.concat(letters);
var lettersAndNumbers:Array = letters.concat(numbers);

trace(numbers);       // 1,2,3
trace(letters);       // a,b,c
trace(numbersAndLetters); // 1,2,3,a,b,c
trace(lettersAndNumbers); // a,b,c,1,2,3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:every" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">every</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction de test sur chaque élément du tableau jusqu’à ce que l’un d’eux renvoie false pour la fonction spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur booléenne <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si tous les éléments du tableau renvoient <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour la fonction spécifiée, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du tableau. Cette fonction peut contenir une comparaison simple (<codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph>, par exemple) ou une opération plus complexe et est appelée avec trois arguments, la valeur d’un élément, l’index de ce dernier et l’objet Array :
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à utiliser comme mot-clé <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pour la fonction.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction de test sur chaque élément du tableau jusqu’à ce que l’un d’eux renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour la fonction spécifiée. Cette méthode permet de déterminer si tous les éléments d’un tableau répondent à un critère défini, tel que des valeurs inférieures à un nombre spécifique.
     
     <p product="flash" class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. Supposons que vous créez une fonction dans un clip appelé <codeph class="+ topic/ph pr-d/codeph ">me</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">every()</codeph> sur un tableau appelé <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.every(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe Timeline, qui ne peut pas être remplacée par <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, le moteur d’exécution de Flash renvoie une exception. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
     };
     myArray.every(myFunction, me);
     </pre>
     
     </apiDesc><example conref="examples\Array_every.as" class="- topic/example "> L’exemple suivant teste deux tableaux pour déterminer si tous les éléments de tous les tableaux sont numériques. Il renvoie également les résultats du test, qui indique que <codeph class="+ topic/ph pr-d/codeph ">isNumeric</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour le premier tableau et <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour le deuxième :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_every extends Sprite {
        public function Array_every() {
            var arr1:Array = new Array(1, 2, 4);
            var res1:Boolean = arr1.every(isNumeric);
            trace("isNumeric:", res1); // true
 
            var arr2:Array = new Array(1, 2, "ham");
            var res2:Boolean = arr2.every(isNumeric);
            trace("isNumeric:", res2); // false
        }
        private function isNumeric(element:*, index:int, arr:Array):Boolean {
            return (element is Number);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/some()" class="- topic/link "><linktext class="- topic/linktext ">Array.some()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:filter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">filter</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction de test sur chaque élément du tableau et construit un nouveau tableau contenant tous les éléments qui renvoient true pour la fonction spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouveau tableau contenant tous les éléments du tableau d’origine qui ont renvoyé <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du tableau. Cette fonction peut contenir une comparaison simple (<codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph>, par exemple) ou une opération plus complexe et est appelée avec trois arguments, la valeur d’un élément, l’index de ce dernier et l’objet Array :
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à utiliser comme mot-clé <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pour la fonction.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction de test sur chaque élément du tableau et construit un nouveau tableau contenant tous les éléments qui renvoient <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour la fonction spécifiée. Si un élément renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, il ne figure pas dans le nouveau tableau.
     
     <p product="flash" class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. Supposons que vous créez une fonction dans un clip appelé <codeph class="+ topic/ph pr-d/codeph ">me</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Supposons que vous utilisez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">filter()</codeph> sur un tableau appelé <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre "> 
     myArray.filter(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe Timeline, qui ne peut pas être remplacée par <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, le moteur d’exécution de Flash renvoie une exception. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.filter(myFunction, me);
     </pre>
     
     </apiDesc><example conref="examples\Array.filter.as" class="- topic/example "> L’exemple suivant crée un tableau de tous les employés qui sont des responsables :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_filter extends Sprite {
        public function Array_filter() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace("Employees:");
            employees.forEach(traceEmployee);
            
            var managers:Array = employees.filter(isManager);
            trace("Managers:");
            managers.forEach(traceEmployee);
        }
        private function isManager(element:*, index:int, arr:Array):Boolean {
            return (element.manager == true);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace("\t" + element.name + ((element.manager) ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/map()" class="- topic/link "><linktext class="- topic/linktext ">Array.map()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:forEach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">forEach</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction sur chaque élément du tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du tableau. Cette fonction peut contenir une commande simple (une instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>, par exemple) ou une opération plus complexe et est appelée avec trois arguments, la valeur d’un élément, l’index de ce dernier et l’objet Array :
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):void;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à utiliser comme mot-clé <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pour la fonction.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction sur chaque élément du tableau.
     
     <p product="flash" class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. Supposons que vous créez une fonction dans un clip appelé <codeph class="+ topic/ph pr-d/codeph ">me</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">forEach()</codeph> sur un tableau appelé <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.forEach(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe Timeline, qui ne peut pas être remplacée par <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, le moteur d’exécution de Flash renvoie une exception. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.forEach(myFunction, me);
     </pre>
     </apiDesc><example conref="examples\Array_forEach.as" class="- topic/example "> L’exemple suivant exécute l’instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> de la fonction <codeph class="+ topic/ph pr-d/codeph ">traceEmployee()</codeph> pour tous les éléments du tableau :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_forEach extends Sprite {
        public function Array_forEach() {
            var employees:Array = new Array();
            employees.push({name:"Employee 1", manager:false});
            employees.push({name:"Employee 2", manager:true});
            employees.push({name:"Employee 3", manager:false});
            trace(employees);
            employees.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:int, arr:Array):void {
            trace(element.name + " (" + element.manager + ")");
        }
    }
}
</codeblock></example><example conref="examples\Array_forEach_2.as" class="- topic/example "> L’exemple suivant exécute également l’instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> à l’aide d’une fonction <codeph class="+ topic/ph pr-d/codeph ">traceEmployee()</codeph> légèrement modifiée pour tous les éléments du tableau :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_forEach_2 extends Sprite {
        public function Array_forEach_2() {
            var employeeXML:XML = &lt;employees>
                    &lt;employee name="Steven" manager="false" />
                    &lt;employee name="Bruce" manager="true" />
                    &lt;employee name="Rob" manager="false" />
                &lt;/employees>;
            var employeesList:XMLList = employeeXML.employee;
            var employeesArray:Array = new Array();
            for each (var tempXML:XML in employeesList) {
                employeesArray.push(tempXML);
            }
            employeesArray.sortOn("@name");
            employeesArray.forEach(traceEmployee);
        }
        private function traceEmployee(element:*, index:Number, arr:Array):void {
            trace(element.@name + ((element.@manager == "true") ? " (manager)" : ""));
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     Recherche un élément dans un tableau en utilisant l’opérateur d’égalité stricte (===) et renvoie la position d’index de l’élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Position d’index commençant à zéro de l’élément du tableau. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> n’est pas détecté, la valeur renvoyée est -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Elément à trouver dans le tableau.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement à partir duquel débuter la recherche d’élément.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recherche un élément dans un tableau en utilisant l’opérateur d’égalité stricte (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>) et renvoie la position d’index de l’élément.
     </apiDesc><example conref="examples\Array_indexOf.as" class="- topic/example "> L’exemple suivant affiche la position du tableau spécifié :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_indexOf extends Sprite {
        public function Array_indexOf() {
            var arr:Array = new Array(123,45,6789);
            arr.push("123-45-6789");
            arr.push("987-65-4321");
            
            var index:int = arr.indexOf("123");
            trace(index); // -1
            
            var index2:int = arr.indexOf(123);
            trace(index2); // 0
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">Array.lastIndexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (égalité stricte)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:join" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">join</apiName><shortdesc class="- topic/shortdesc ">
     Convertit les éléments d’un tableau en chaînes, insère le séparateur spécifié entre les éléments, les concatène, puis renvoie la chaîne obtenue.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.join, join
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne composée des éléments d’un tableau convertis en chaînes et séparés par le paramètre spécifié.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sep</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Caractère ou chaîne séparant les éléments du tableau dans la chaîne renvoyée. Si vous omettez ce paramètre, une virgule est utilisée en tant que séparateur par défaut. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Convertit les éléments d’un tableau en chaînes.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Convertit les éléments d’un tableau en chaînes, insère le séparateur spécifié entre les éléments, les concatène, puis renvoie la chaîne obtenue. Un tableau imbriqué est toujours séparé par une virgule (,) et non par le séparateur transmis à la méthode <codeph class="+ topic/ph pr-d/codeph ">join()</codeph>.
     
     </apiDesc><example conref="examples\Array.join.1.as" class="- topic/example "> Le code suivant crée un objet Array <codeph class="+ topic/ph pr-d/codeph ">myArr</codeph> avec les éléments <codeph class="+ topic/ph pr-d/codeph ">one</codeph>, <codeph class="+ topic/ph pr-d/codeph ">two</codeph> et <codeph class="+ topic/ph pr-d/codeph ">three</codeph>, puis une chaîne contenant <codeph class="+ topic/ph pr-d/codeph ">one and two and three</codeph> à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">join()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var myArr:Array = new Array("one", "two", "three");
var myStr:String = myArr.join(" and ");
trace(myArr); // one,two,three
trace(myStr); // one and two and three
</codeblock></example><example conref="examples\Array.join.2.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph>, avec des éléments <codeph class="+ topic/ph pr-d/codeph ">(</codeph>, <codeph class="+ topic/ph pr-d/codeph ">)</codeph>, <codeph class="+ topic/ph pr-d/codeph ">-</codeph> et un espace blanc, puis crée une chaîne contenant <codeph class="+ topic/ph pr-d/codeph ">(888) 867-5309</codeph>. Ensuite, à l’aide d’une boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph>, il supprime tous les types de caractères spéciaux qui figurent dans la liste <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> pour produire une chaîne (<codeph class="+ topic/ph pr-d/codeph ">myStr</codeph>) qui contient uniquement le numéro de téléphone restant : <codeph class="+ topic/ph pr-d/codeph ">888675309</codeph> . De plus, il est possible d’ajouter des caractères, tels que <codeph class="+ topic/ph pr-d/codeph ">+</codeph>, à la liste <codeph class="+ topic/ph pr-d/codeph ">specialChars</codeph> pour que la routine fonctionne avec les formats internationaux de numéro de téléphone.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var phoneString:String = "(888) 867-5309";

var specialChars:Array = new Array("(", ")", "-", " ");
var myStr:String = phoneString;

var ln:uint = specialChars.length;
for(var i:uint; i &lt; ln; i++) {
    myStr = myStr.split(specialChars[i]).join("");
}

var phoneNumber:Number = new Number(myStr);

trace(phoneString); // (888) 867-5309
trace(phoneNumber); // 8888675309
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     Recherche un élément dans un tableau en travaillant à rebours à partir du dernier élément et renvoie la position d’index de l’élément correspondant en utilisant l’opérateur d’égalité stricte (===).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Position d’index commençant à zéro de l’élément du tableau. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> n’est pas détecté, la valeur renvoyée est -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Elément à trouver dans le tableau.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement à partir duquel débuter la recherche d’élément. La valeur par défaut correspond à la valeur maximale autorisée d’un index. Si vous ne spécifiez pas <codeph class="+ topic/ph pr-d/codeph ">fromIndex</codeph>, la recherche débute par le dernier élément du tableau.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recherche un élément dans un tableau en travaillant à rebours à partir du dernier élément et renvoie la position d’index de l’élément correspondant en utilisant l’opérateur d’égalité stricte (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>).
     </apiDesc><example conref="examples\Array_lastIndexOf.as" class="- topic/example "> L’exemple suivant affiche la position du tableau spécifié :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_lastIndexOf extends Sprite {
        public function Array_lastIndexOf() {
            var arr:Array = new Array(123,45,6789,123,984,323,123,32);
            
            var index:int = arr.indexOf(123);
            trace(index); // 0
            
            var index2:int = arr.lastIndexOf(123);
            trace(index2); // 6
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">Array.indexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (égalité stricte)</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:map" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">map</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction sur les éléments d’un tableau et construit un nouveau tableau en fonction des résultats de la fonction appliquée à chaque élément du tableau d’origine.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouveau tableau composé des résultats de la fonction appliquée à chaque élément du tableau d’origine.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du tableau. Cette fonction peut contenir une commande simple (la modification de la casse des chaînes d’un tableau, par exemple) ou une opération plus complexe et est appelée avec trois arguments, la valeur d’un élément, l’index de ce dernier et l’objet Array :
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):String;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à utiliser comme mot-clé <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pour la fonction.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction sur les éléments d’un tableau et construit un nouveau tableau en fonction des résultats de la fonction appliquée à chaque élément du tableau d’origine.
     
     <p product="flash" class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. Supposons que vous créez une fonction dans un clip appelé <codeph class="+ topic/ph pr-d/codeph ">me</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">map()</codeph> sur un tableau appelé <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.map(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe Timeline, qui ne peut pas être remplacée par <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, le moteur d’exécution de Flash renvoie une exception. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.map(myFunction, me);
     </pre>
     </apiDesc><example conref="examples\Array_map.as" class="- topic/example "> L’exemple suivant modifie tous les éléments du tableau pour obtenir des lettres en majuscules :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_map extends Sprite {
        public function Array_map() {
            var arr:Array = new Array("one", "two", "Three");
            trace(arr); // one,two,Three

            var upperArr:Array = arr.map(toUpper);
            trace(upperArr); // ONE,TWO,THREE
        }
        private function toUpper(element:*, index:int, arr:Array):String {
            return String(element).toUpperCase();
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/filter()" class="- topic/link "><linktext class="- topic/linktext ">Array.filter()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:pop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pop</apiName><shortdesc class="- topic/shortdesc ">
      Supprime le dernier élément d’un tableau et renvoie la valeur de cet élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.pop, pop
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur du dernier élément (de tout type de données) dans le tableau spécifié.
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Supprime le dernier élément d’un tableau et renvoie la valeur de cet élément.
     
     </apiDesc><example conref="examples\Array.pop.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. Le dernier élément (<codeph class="+ topic/ph pr-d/codeph ">c</codeph>) est ensuite supprimé du tableau à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">pop()</codeph> et affecté ensuite à l’objet String, <codeph class="+ topic/ph pr-d/codeph ">letter</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
var letter:String = letters.pop();
trace(letters); // a,b
trace(letter);     // c
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:push" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">push</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute un ou plusieurs éléments à la fin d’un tableau et renvoie la nouvelle longueur du tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.push, push
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier représentant la longueur du nouveau tableau.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une ou plusieurs valeurs à ajouter au tableau.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute un ou plusieurs éléments à la fin d’un tableau et renvoie la nouvelle longueur du tableau.
     
     </apiDesc><example conref="examples\Array.push.1.as" class="- topic/example "> Le code suivant crée un objet Array vide, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, puis le remplit avec les éléments <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph> à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array();

letters.push("a");
letters.push("b");
letters.push("c");

trace(letters.toString()); // a,b,c
</codeblock></example><example conref="examples\Array.push.2.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, qui est rempli en premier lieu avec l’élément <codeph class="+ topic/ph pr-d/codeph ">a</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> est ensuite utilisée une fois pour ajouter les éléments <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph> à la fin du tableau, soit trois éléments après l’application de la fonction push.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a");
var count:uint = letters.push("b", "c");

trace(letters); // a,b,c
trace(count);   // 3
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:reverse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reverse</apiName><shortdesc class="- topic/shortdesc ">
      Inverse le tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.reverse, reverse
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouveau tableau.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Inverse le tableau.
     
     </apiDesc><example conref="examples\Array.reverse.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. L’ordre des éléments du tableau est ensuite inversé à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">reverse()</codeph> pour produire le tableau <codeph class="+ topic/ph pr-d/codeph ">[c,b,a]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
trace(letters); // a,b,c
letters.reverse();
trace(letters); // c,b,a
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:shift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">shift</apiName><shortdesc class="- topic/shortdesc ">
     Supprime le premier élément d’un tableau et renvoie cet élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.shift, shift
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Premier élément (de tout type de données) d’un tableau.
     
     </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Supprime le premier élément d’un tableau et renvoie cet élément. Les éléments restants du tableau sont décalés de leur position d’origine, i, vers i-1.
     
     </apiDesc><example conref="examples\Array.shift.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph> est ensuite utilisée pour supprimer le premier élément (<codeph class="+ topic/ph pr-d/codeph ">a</codeph>) dans <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> et l’affecte ensuite à la chaîne <codeph class="+ topic/ph pr-d/codeph ">firstLetter</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c");
var firstLetter:String = letters.shift();
trace(letters);     // b,c
trace(firstLetter); // a
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Array.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie un nouveau tableau constitué d’un éventail d’éléments issus du tableau d’origine, sans modifier ce dernier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.slice, slice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau constitué d’un éventail d’éléments issus du tableau d’origine.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre spécifiant l’index du point de départ pour la découpe. Si <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est un nombre négatif, le point de départ se trouve à la fin du tableau, où la valeur -1 est le dernier élément.  
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">16777215</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre spécifiant l’index du point d’arrivée pour la découpe. Si vous omettez ce paramètre, la découpe inclut tous les éléments du point de départ à la fin du tableau. Si <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> est un nombre négatif, le point d’arrivée spécifié se trouve à la fin du tableau, où la valeur -1 est le dernier élément.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie un nouveau tableau constitué d’un éventail d’éléments issus du tableau d’origine.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie un nouveau tableau constitué d’un éventail d’éléments issus du tableau d’origine, sans modifier ce dernier. Le tableau renvoyé inclut l’élément <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et tous les éléments, excepté l’élément <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>.
     
     <p class="- topic/p ">Si vous ne transmettez aucun paramètre, le nouveau tableau est une duplication (clone superficiel) du tableau d’origine.</p>
     
     </apiDesc><example conref="examples\Array.slice.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph>. Le tableau <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> est ensuite créé en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> sur les éléments un (<codeph class="+ topic/ph pr-d/codeph ">b</codeph>) à trois (<codeph class="+ topic/ph pr-d/codeph ">d</codeph>), ce qui résulte en un tableau avec les éléments <codeph class="+ topic/ph pr-d/codeph ">b</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(1,3);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // b,c
</codeblock></example><example conref="examples\Array.slice.2.as" class="- topic/example "> Le code suivant crée un objet Array <codeph class="+ topic/ph pr-d/codeph ">letters</codeph> avec les éléments <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph>. Le tableau <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> est ensuite créé en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> sur l’élément deux (<codeph class="+ topic/ph pr-d/codeph ">c</codeph>), ce qui résulte en un tableau avec des éléments <codeph class="+ topic/ph pr-d/codeph ">[c,d,e,f]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // c,d,e,f
</codeblock></example><example conref="examples\Array.slice.3.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">letters</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">[a,b,c,d,e,f]</codeph>. Le tableau <codeph class="+ topic/ph pr-d/codeph ">someLetters</codeph> est ensuite créé en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">slice()</codeph> du deuxième au dernier élément à partir de la fin (<codeph class="+ topic/ph pr-d/codeph ">e</codeph>), ce qui résulte en un tableau avec les éléments <codeph class="+ topic/ph pr-d/codeph ">e</codeph> et <codeph class="+ topic/ph pr-d/codeph ">f</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var letters:Array = new Array("a", "b", "c", "d", "e", "f");
var someLetters:Array = letters.slice(-2);

trace(letters);     // a,b,c,d,e,f
trace(someLetters); // e,f
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:AS3:some" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">some</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction de test sur chaque élément du tableau jusqu’à ce que l’un d’eux renvoie true.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur booléenne <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si un élément du tableau renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour la fonction spécifiée, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du tableau. Cette fonction peut contenir une comparaison simple (<codeph class="+ topic/ph pr-d/codeph ">item &lt; 20</codeph>, par exemple) ou une opération plus complexe et est appelée avec trois arguments, la valeur d’un élément, l’index de ce dernier et l’objet Array :
     <pre xml:space="preserve" class="- topic/pre ">    function callback(item:*, index:int, array:Array):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à utiliser comme mot-clé <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pour la fonction.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction de test sur chaque élément du tableau jusqu’à ce que l’un d’eux renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Cette méthode vous permet de déterminer si un élément de tableau répond au critère défini, tel qu’une valeur inférieure à un nombre spécifique.
     
     <p product="flash" class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. Supposons que vous créez une fonction dans un clip appelé <codeph class="+ topic/ph pr-d/codeph ">me</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(obj:Object):void {
        //your code here
     }
     </pre>
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">some()</codeph> sur un tableau appelé <codeph class="+ topic/ph pr-d/codeph ">myArray</codeph> :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myArray.some(myFunction, me);
     </pre>
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe Timeline, qui ne peut pas être remplacée par <codeph class="+ topic/ph pr-d/codeph ">me</codeph>, le moteur d’exécution de Flash renvoie une exception. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(obj:Object):void {
         //your code here
         };
     myArray.some(myFunction, me);
     </pre>   
     </apiDesc><example conref="examples\Array_some.as" class="- topic/example "> L’exemple suivant affiche les valeurs qui ne sont pas définies :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    public class Array_some extends Sprite {
        public function Array_some() {
            var arr:Array = new Array();
            arr[0] = "one";
            arr[1] = "two";
            arr[3] = "four";
            var isUndef:Boolean = arr.some(isUndefined);
            if (isUndef) {
                trace("array contains undefined values: " + arr);
            } else {
                trace("array contains no undefined values.");
            }
        }
        private function isUndefined(element:*, index:int, arr:Array):Boolean {
            return (element == undefined);
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/every()" class="- topic/link "><linktext class="- topic/linktext ">every()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sortOn" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sortOn</apiName><shortdesc class="- topic/shortdesc ">
     Trie les éléments d’un tableau selon un ou plusieurs champs du tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.sortOn, sortOn
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée varie selon que vous transmettez ou non des paramètres :
     <ul class="- topic/ul "><li class="- topic/li ">Si vous spécifiez une valeur de 4 ou <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> et si au moins deux éléments triés ont des champs de tri identiques, la valeur 0 est renvoyée et le tableau n’est pas modifié. </li><li class="- topic/li ">Si vous spécifiez une valeur de 8 ou <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph>, un tableau qui reflète les résultats du tri est renvoyé et le tableau n’est pas modifié.</li><li class="- topic/li ">Dans le cas contraire, Flash ne renvoie rien et modifie le tableau pour refléter l’ordre de tri.</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fieldName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne identifiant un champ à utiliser en tant que valeur de tri ou un tableau dans lequel le premier élément représente le champ de tri principal, le deuxième le champ de tri secondaire, etc.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">options</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un ou plusieurs nombres ou noms de constantes définies, séparés par l’opérateur <codeph class="+ topic/ph pr-d/codeph ">bitwise OR (|)</codeph>, qui modifient le comportement de tri. Les valeurs suivantes sont valides pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> :
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.CASEINSENSITIVE</codeph> ou 1</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.DESCENDING</codeph> ou 2</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> ou 4</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> ou 8</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph> ou 16.</li></ul>
     <p product="flash" class="- topic/p ">Les conseils de code sont activés si vous utilisez le format chaîne de l’indicateur (par exemple, <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph>) au lieu du format numérique (2).</p>
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Trie les éléments d’un tableau selon un ou plusieurs champs du tableau. Le tableau doit être doté des caractéristiques suivantes :
     <ul class="- topic/ul "><li class="- topic/li ">Le tableau est indexé et non associatif.</li><li class="- topic/li ">Chaque élément du tableau contient un objet doté d’une ou de plusieurs propriétés.</li><li class="- topic/li ">Tous les objets ont au moins une propriété en commun dont les valeurs peuvent être utilisées pour trier le tableau. Ce type de propriété est connu sous le nom de <i class="+ topic/ph hi-d/i ">field</i>.</li></ul>
     <p class="- topic/p ">Si vous transmettez plusieurs paramètres <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph>, le premier champ représente le champ de tri principal, le deuxième représente le champ de tri suivant, etc. Flash trie selon les valeurs Unicode (ASCII est un sous-ensemble de Unicode). Si l’un des éléments comparés ne contient pas le champ spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph>, le champ est considéré comme étant réglé sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> et les éléments sont placés de manière consécutive dans le tableau trié dans un ordre quelconque.</p>
     <p class="- topic/p ">Par défaut, <codeph class="+ topic/ph pr-d/codeph ">Array</codeph>.<codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> fonctionne de la façon suivante :</p>
     <ul class="- topic/ul "><li class="- topic/li ">Le tri tient compte de la casse (<i class="+ topic/ph hi-d/i ">Z</i> précède <i class="+ topic/ph hi-d/i ">a</i>).</li><li class="- topic/li ">Le tri est ascendant (<i class="+ topic/ph hi-d/i ">a</i> précède <i class="+ topic/ph hi-d/i ">b</i>). </li><li class="- topic/li ">Le tableau est modifié afin de refléter l’ordre de tri ; les éléments multiples dont les champs de tri sont identiques sont placés consécutivement dans le tableau trié dans un ordre quelconque.</li><li class="- topic/li ">Les champs numériques sont triés comme s’il s’agissait de chaînes : ainsi, 100 précède 99 car « 1 » est une valeur de chaîne inférieure à « 9 ».</li></ul>
     <p class="- topic/p ">Flash Player 7 a ajouté le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph>, que vous pouvez utiliser pour annuler le comportement de tri par défaut. Pour trier un tableau simple (par exemple, un tableau contenant un seul champ) ou pour spécifier un ordre de tri non pris en charge par le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph>, utilisez <codeph class="+ topic/ph pr-d/codeph ">Array.sort()</codeph>.</p>
     <p class="- topic/p ">Pour définir plusieurs indicateurs, séparez-les à l’aide de l’opérateur OR (<codeph class="+ topic/ph pr-d/codeph ">|</codeph>) au niveau du bit :</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     my_array.sortOn(someFieldName, Array.DESCENDING | Array.NUMERIC);
     </codeblock>
     <p class="- topic/p ">La fonctionnalité ajoutée à Flash Player 8 permet de spécifier une option de tri différente pour chaque champ lors d’un tri selon plusieurs champs. Dans Flash Player 8 et les versions ultérieures, le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> accepte un tableau d’options de tri de telle sorte que chaque option de tri correspond à un champ de tri dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph>. L’exemple suivant trie le champ de tri principal, <codeph class="+ topic/ph pr-d/codeph ">a</codeph>, selon un tri décroissant, le deuxième champ de tri, <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, selon un tri numérique et le troisième champ de tri, <codeph class="+ topic/ph pr-d/codeph ">c</codeph>, selon un tri non sensible à la casse :</p>
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     Array.sortOn (["a", "b", "c"], [Array.DESCENDING, Array.NUMERIC, Array.CASEINSENSITIVE]);
     </codeblock>
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque : </b>les tableaux <codeph class="+ topic/ph pr-d/codeph ">fieldName</codeph> et <codeph class="+ topic/ph pr-d/codeph ">options</codeph> doivent contenir le même nombre d’éléments ; sinon, le tableau <codeph class="+ topic/ph pr-d/codeph ">options</codeph> est ignoré. En outre, les options <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> ne peuvent être utilisées qu’en tant que premier élément du tableau, sinon elles sont ignorées.</p>
     
     </apiDesc><example conref="examples\Array.sortOn.1.as" class="- topic/example "> Le code suivant crée un objet Array vide, <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>. Le tableau est ensuite rempli par cinq appels à la fonction <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>. A chaque fois que <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> est appelé, un nouvel objet <codeph class="+ topic/ph pr-d/codeph ">Vegetable</codeph> est créé par un appel au constructeur <codeph class="+ topic/ph pr-d/codeph ">Vegetable()</codeph>, qui accepte un objet de type chaîne (<codeph class="+ topic/ph pr-d/codeph ">name</codeph>) et un autre de type numérique (<codeph class="+ topic/ph pr-d/codeph ">price</codeph>). Cinq appels consécutifs de la fonction <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> avec les valeurs indiquées produisent le tableau suivant : <codeph class="+ topic/ph pr-d/codeph ">[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> est ensuite utilisée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> pour produire le tableau suivant : <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> est ensuite appelée à nouveau avec le paramètre price et les constantes NUMERIC et DESCENDING pour produire un tableau trié de façon numérique en ordre décroissant : <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sortOn("name");
trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

vegetables.sortOn("price", Array.NUMERIC | Array.DESCENDING);
trace(vegetables);
// asparagus:3.99, spinach:1.89, lettuce:1.49, squash:1.44, celery:1.29

class Vegetable {
    public var name:String;
    public var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sortOn.2.as" class="- topic/example "> Le code suivant crée un objet Array vide, <codeph class="+ topic/ph pr-d/codeph ">records</codeph>. Le tableau est ensuite rempli par trois appels à la fonction <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>. Lorsque <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> est appelé, les chaînes <codeph class="+ topic/ph pr-d/codeph ">name</codeph> et <codeph class="+ topic/ph pr-d/codeph ">city</codeph>, ainsi que le numéro <codeph class="+ topic/ph pr-d/codeph ">zip</codeph> sont ajoutés à <codeph class="+ topic/ph pr-d/codeph ">records</codeph>. Trois boucles <codeph class="+ topic/ph pr-d/codeph ">for</codeph> sont utilisées pour imprimer les éléments du tableau. La première boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph> imprime les éléments dans leur ordre d’insertion. La deuxième boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph> s’exécute après le tri de <codeph class="+ topic/ph pr-d/codeph ">records</codeph> en fonction de « name », puis de « city » à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph>. La troisième boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph> a un résultat différent dans la mesure où <codeph class="+ topic/ph pr-d/codeph ">records</codeph> est trié de nouveau en fonction « city », puis « name ».
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var records:Array = new Array();
records.push({name:"john", city:"omaha", zip:68144});
records.push({name:"john", city:"kansas city", zip:72345});
records.push({name:"bob", city:"omaha", zip:94010});

for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, omaha
// john, kansas city
// bob, omaha

trace("records.sortOn('name', 'city');");
records.sortOn(["name", "city"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// bob, omaha
// john, kansas city
// john, omaha

trace("records.sortOn('city', 'name');");
records.sortOn(["city", "name"]);
for(var i:uint = 0; i &lt; records.length; i++) {
    trace(records[i].name + ", " + records[i].city);
}
// Results:
// john, kansas city
// bob, omaha
// john, omaha
</codeblock></example><example conref="examples\Array.sortOn.3.as" class="- topic/example "> Le code suivant crée un objet Array vide, <codeph class="+ topic/ph pr-d/codeph ">users</codeph>. Le tableau est ensuite rempli par quatre appels à la fonction <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>. Lorsque <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> est appelée, un objet User est créé à l’aide du constructeur <codeph class="+ topic/ph pr-d/codeph ">User()</codeph>, puis la chaîne <codeph class="+ topic/ph pr-d/codeph ">name</codeph> et l’uint <codeph class="+ topic/ph pr-d/codeph ">age</codeph> sont ajoutés aux utilisateurs. Le tableau suivant en résulte <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,barb:35,abcd:3,catchy:4]</codeph>.
 <p class="- topic/p ">Ce tableau est ensuite trié des façons suivantes :
 <ol class="- topic/ol "><li class="- topic/li ">Par nom uniquement, pour obtenir <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,barb:35,abcd:3,catchy:4]</codeph>.</li><li class="- topic/li ">Par nom uniquement et avec la constante <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph>, pour obtenir le tableau <codeph class="+ topic/ph pr-d/codeph ">[abcd:3,barb:35,Bob:3,catchy:4]</codeph>.</li><li class="- topic/li ">Par nom uniquement et avec les constantes <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> et <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph>, pour obtenir le tableau <codeph class="+ topic/ph pr-d/codeph ">[catchy:4,Bob:3,barb:35,abcd:3]</codeph>.</li><li class="- topic/li ">Par nom uniquement, pour obtenir le tableau <codeph class="+ topic/ph pr-d/codeph ">[abcd:3,Bob:3,barb:35,catchy:4]</codeph>.</li><li class="- topic/li ">Par nom uniquement et avec la constante <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph>, pour obtenir le tableau <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,catchy:4,barb:35]</codeph>.</li><li class="- topic/li ">Par nom uniquement et avec les constantes <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> et <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph>, pour obtenir le tableau <codeph class="+ topic/ph pr-d/codeph ">[barb:35,catchy:4,Bob:3,abcd:3]</codeph>.</li></ol>
 </p>
 <p class="- topic/p ">Un tableau appelé <codeph class="+ topic/ph pr-d/codeph ">indices</codeph> est ensuite créé et reçoit les résultats du tri en fonction de l’âge et avec les constantes <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> et <codeph class="+ topic/ph pr-d/codeph ">RETURNINDEXEDARRAY</codeph>, ce qui produit le tableau <codeph class="+ topic/ph pr-d/codeph ">[Bob:3,abcd:3,catchy:4,barb:35]</codeph>, qui est ensuite imprimé avec une boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph>.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

class User {
    public var name:String;
    public var age:Number;
    public function User(name:String, age:uint) {
        this.name = name;
        this.age = age;
    }

    public function toString():String {
        return this.name + ":" + this.age;
    }
}

var users:Array = new Array();
users.push(new User("Bob", 3));
users.push(new User("barb", 35));
users.push(new User("abcd", 3));
users.push(new User("catchy", 4));

trace(users); // Bob:3,barb:35,abcd:3,catchy:4

users.sortOn("name");
trace(users); // Bob:3,abcd:3,barb:35,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE);
trace(users); // abcd:3,barb:35,Bob:3,catchy:4

users.sortOn("name", Array.CASEINSENSITIVE | Array.DESCENDING);
trace(users); // catchy:4,Bob:3,barb:35,abcd:3

users.sortOn("age");
trace(users); // abcd:3,Bob:3,barb:35,catchy:4

users.sortOn("age", Array.NUMERIC);
trace(users); // Bob:3,abcd:3,catchy:4,barb:35

users.sortOn("age", Array.DESCENDING | Array.NUMERIC);
trace(users); // barb:35,catchy:4,Bob:3,abcd:3

var indices:Array = users.sortOn("age", Array.NUMERIC | Array.RETURNINDEXEDARRAY);
var index:uint;
for(var i:uint = 0; i &lt; indices.length; i++) {
    index = indices[i];
    trace(users[index].name, ": " + users[index].age);
}

// Results:
// Bob : 3
// abcd : 3
// catchy : 4
// barb : 35
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#bitwise_OR" class="- topic/link "><linktext class="- topic/linktext ">| (OR au niveau du bit)</linktext></link><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:sort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sort</apiName><shortdesc class="- topic/shortdesc ">
     Trie les éléments d’un tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.sort, sort
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur renvoyée varie selon que vous transmettez ou non des arguments, comme décrit dans la liste suivante :
     <ul class="- topic/ul "><li class="- topic/li ">Si vous spécifiez la valeur 4 ou <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph> pour l’argument <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> du paramètre <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> et si au moins deux éléments triés possèdent des champs de tri identiques, Flash renvoie la valeur 0 et ne modifie pas le tableau. </li><li class="- topic/li ">Si vous spécifiez la valeur 8 ou <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> pour l’argument <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> du paramètre <codeph class="+ topic/ph pr-d/codeph ">...args</codeph>, Flash renvoie un tableau numérique trié des index qui reflète les résultats du tri et ne modifie pas le tableau. </li><li class="- topic/li ">Dans le cas contraire, Flash ne renvoie rien et modifie le tableau pour refléter l’ordre de tri.</li></ul>
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les arguments spécifiant une fonction de comparaison et une ou plusieurs valeurs qui déterminent le comportement du tri.
     <p class="- topic/p ">Cette méthode utilise la syntaxe et l’ordre des arguments de <codeph class="+ topic/ph pr-d/codeph ">Array.sort(compareFunction, sortOptions)</codeph>, ces derniers étant définis comme suit :</p>
     <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> - Fonction de comparaison utilisée pour déterminer l’ordre de tri des éléments d’un tableau. Cet argument est facultatif. Une fonction de comparaison gère deux arguments utilisés pour la comparaison. Etant donné les éléments A et B, le résultat de <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> peut être l’une des trois valeurs suivantes : négative, 0 ou positive.
     <ul class="- topic/ul "><li class="- topic/li ">Une valeur renvoyée négative indique que A apparaît avant B dans la séquence triée.</li><li class="- topic/li ">Une valeur renvoyée de 0 indique que A et B possèdent le même ordre de tri.</li><li class="- topic/li ">Une valeur renvoyée positive indique que A apparaît après B dans la séquence triée.</li></ul>
     </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> - Un ou plusieurs nombres ou constantes définies, séparés par l’opérateur OR <codeph class="+ topic/ph pr-d/codeph ">|</codeph> au niveau du bit, qui modifient le comportement de tri par défaut. Cet argument est facultatif. Les valeurs suivantes sont valides pour <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> : 
      <ul class="- topic/ul "><li class="- topic/li ">1 ou <codeph class="+ topic/ph pr-d/codeph ">Array.CASEINSENSITIVE</codeph></li><li class="- topic/li ">2 ou <codeph class="+ topic/ph pr-d/codeph ">Array.DESCENDING</codeph></li><li class="- topic/li ">4 ou <codeph class="+ topic/ph pr-d/codeph ">Array.UNIQUESORT</codeph></li><li class="- topic/li ">8 ou <codeph class="+ topic/ph pr-d/codeph ">Array.RETURNINDEXEDARRAY</codeph> </li><li class="- topic/li ">16 ou <codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph></li></ul>
     Pour plus d’informations, voir la méthode <codeph class="+ topic/ph pr-d/codeph ">Array.sortOn()</codeph>.</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Trie les éléments d’un tableau. Cette méthode trie selon les valeurs Unicode (ASCII est un sous-ensemble de Unicode).
     <p class="- topic/p ">Par défaut, <codeph class="+ topic/ph pr-d/codeph ">Array</codeph>.<codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> fonctionne de la façon suivante :</p>
     <ul class="- topic/ul "><li class="- topic/li ">Le tri tient compte de la casse (<i class="+ topic/ph hi-d/i ">Z</i> précède <i class="+ topic/ph hi-d/i ">a</i>).</li><li class="- topic/li ">Le tri est ascendant (<i class="+ topic/ph hi-d/i ">a</i> précède <i class="+ topic/ph hi-d/i ">b</i>). </li><li class="- topic/li ">Le tableau est modifié afin de refléter l’ordre de tri ; les éléments multiples dont les champs de tri sont identiques sont placés consécutivement dans le tableau trié dans un ordre quelconque.</li><li class="- topic/li ">Tous les éléments, quel que soit leur type de données, sont triés comme s’il s’agissait de chaînes : ainsi, 100 précède 99 car « 1 » est une valeur de chaîne inférieure à « 9 ».</li></ul>
     <p class="- topic/p ">
     Pour trier un tableau à l’aide de réglages autres que les réglages par défaut, vous pouvez utiliser l’une des options de tri décrites dans la section <codeph class="+ topic/ph pr-d/codeph ">sortOptions</codeph> de la description du paramètre <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> ou vous pouvez créer une fonction personnalisée. Si vous créez une fonction personnalisée, vous pouvez appeler la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> et utiliser le nom de votre fonction personnalisée en tant que premier argument (<codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph>). 
     </p>
     
     </apiDesc><example conref="examples\Array.sort.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>, avec les éléments suivants <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, cilantro, onion, avocado]</codeph>. Le tableau est ensuite trié en fonction de la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph>, qui est appelée sans paramètres. Le résultat est que <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> est trié par ordre alphabétique (<codeph class="+ topic/ph pr-d/codeph ">[avocado, cilantro, green pepper, onion, spinach]</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

trace(vegetables); // spinach,green pepper,cilantro,onion,avocado
vegetables.sort();
trace(vegetables); // avocado,cilantro,green pepper,onion,spinach
</codeblock></example><example conref="examples\Array.sort.2.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>, avec les éléments suivants <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, Cilantro, Onion et Avocado]</codeph>. Le tableau est ensuite trié avec la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph>, qui est appelée sans paramètres pour la première fois. Le résultat en est <codeph class="+ topic/ph pr-d/codeph ">[Avocado,Cilantro,Onion,green pepper,spinach]</codeph>. La fonction <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> est ensuite appelée à nouveau sur <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> et utilise la constante <codeph class="+ topic/ph pr-d/codeph ">CASEINSENSITIVE</codeph> en tant que paramètre. Le résultat est que <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> est trié par ordre alphabétique (<codeph class="+ topic/ph pr-d/codeph ">[Avocado, Cilantro, green pepper, Onion, spinach]</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "Cilantro",
                 "Onion",
                 "Avocado");

vegetables.sort();
trace(vegetables); // Avocado,Cilantro,Onion,green pepper,spinach
vegetables.sort(Array.CASEINSENSITIVE);
trace(vegetables); // Avocado,Cilantro,green pepper,Onion,spinach
</codeblock></example><example conref="examples\Array.sort.3.as" class="- topic/example "> Le code suivant crée un objet Array vide, <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>, qui est ensuite rempli par cinq appels à la fonction <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>. A chaque fois que <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> est appelé, un nouvel objet <codeph class="+ topic/ph pr-d/codeph ">Vegetable</codeph> est créé par un appel au constructeur <codeph class="+ topic/ph pr-d/codeph ">Vegetable()</codeph>, qui accepte un objet de type chaîne (<codeph class="+ topic/ph pr-d/codeph ">name</codeph>) et un autre de type numérique (<codeph class="+ topic/ph pr-d/codeph ">price</codeph>). Cinq appels consécutifs de la fonction <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> avec les valeurs indiquées produisent le tableau suivant : <codeph class="+ topic/ph pr-d/codeph ">[lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44]</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> est ensuite utilisée pour trier le tableau, ce qui produit le tableau <codeph class="+ topic/ph pr-d/codeph ">[asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44]</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort();

trace(vegetables);
// asparagus:3.99, celery:1.29, lettuce:1.49, spinach:1.89, squash:1.44

//The following code defines the Vegetable class
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.4.as" class="- topic/example "> L’exemple suivant est rigoureusement identique au précédent, à la différence que la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> est utilisée avec une fonction de tri personnalisée (<codeph class="+ topic/ph pr-d/codeph ">sortOnPrice</codeph>), qui effectue le tri en fonction du prix et non pas par ordre alphabétique. Vous pouvez constater que la nouvelle fonction, <codeph class="+ topic/ph pr-d/codeph ">getPrice()</codeph>, extrait le prix.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(new Vegetable("lettuce", 1.49));
vegetables.push(new Vegetable("spinach", 1.89));
vegetables.push(new Vegetable("asparagus", 3.99));
vegetables.push(new Vegetable("celery", 1.29));
vegetables.push(new Vegetable("squash", 1.44));

trace(vegetables);
// lettuce:1.49, spinach:1.89, asparagus:3.99, celery:1.29, squash:1.44

vegetables.sort(sortOnPrice);

trace(vegetables);
// celery:1.29, squash:1.44, lettuce:1.49, spinach:1.89, asparagus:3.99

function sortOnPrice(a:Vegetable, b:Vegetable):Number {
    var aPrice:Number = a.getPrice();
    var bPrice:Number = b.getPrice();

    if(aPrice > bPrice) {
        return 1;
    } else if(aPrice &lt; bPrice) {
        return -1;
    } else  {
        //aPrice == bPrice
        return 0;
    }
}

// The following code defines the Vegetable class and should be in a separate package.
class Vegetable {
    private var name:String;
    private var price:Number;

    public function Vegetable(name:String, price:Number) {
        this.name = name;
        this.price = price;
    }

    public function getPrice():Number {
        return price;
    }

    public function toString():String {
        return " " + name + ":" + price;
    }
}
</codeblock></example><example conref="examples\Array.sort.5.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">[3,5,100,34,10]</codeph>. Tout appel sans paramètre à la fonction <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> produirait un résultat indésirable <codeph class="+ topic/ph pr-d/codeph ">[10,100,3,34,5]</codeph>. Afin de trier correctement les valeurs numériques, vous devez transmettre la constante <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> à la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph>, qui trie <codeph class="+ topic/ph pr-d/codeph ">numbers</codeph> de la façon suivante : <codeph class="+ topic/ph pr-d/codeph ">[3,5,10,34,100]</codeph> .
 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> Le comportement par défaut de la fonction <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> traite chaque entité comme une chaîne. Si vous utilisez l’argument <codeph class="+ topic/ph pr-d/codeph ">Array.NUMERIC</codeph>, le moteur d’exécution de Flash tente de convertir les valeurs non numériques en entiers à des fins de tri. Si cette opération échoue, le moteur d’exécution renvoie une erreur. Par exemple, le moteur d’exécution peut convertir correctement une valeur de chaîne de <codeph class="+ topic/ph pr-d/codeph ">"6"</codeph> en nombre entier, mais renvoie une erreur s’il rencontre une valeur de chaîne de <codeph class="+ topic/ph pr-d/codeph ">"six"</codeph>. </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var numbers:Array = new Array(3,5,100,34,10);

trace(numbers); // 3,5,100,34,10
numbers.sort();
trace(numbers); // 10,100,3,34,5
numbers.sort(Array.NUMERIC);
trace(numbers); // 3,5,10,34,100
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#bitwise_OR" class="- topic/link "><linktext class="- topic/linktext ">| (OR au niveau du bit)</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:splice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">splice</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute et supprime des éléments dans un tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.splice, splice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau contenant les éléments supprimés du tableau d’origine.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier spécifiant l’index de la position d’insertion ou de suppression de l’élément dans le tableau. Vous pouvez utiliser un entier négatif pour définir une position par rapport à la fin du tableau (par exemple, la valeur -1 représente le dernier élément du tableau).
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier spécifiant le nombre d’éléments à supprimer. Ce nombre inclut l’élément spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>. Si vous ne spécifiez pas de valeur pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph>, la méthode supprime toutes les valeurs comprises entre l’élément <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et le dernier élément du tableau. Si la valeur est 0, aucun élément n’est supprimé.     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Liste facultative d’une ou de plusieurs valeurs séparées par une virgule à insérer dans le tableau à la position spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>. Si une valeur insérée est de type Array, le tableau est maintenu intact et inséré comme élément unique. Par exemple, si vous joignez un tableau de longueur trois à un autre tableau de longueur trois, le tableau qui en résulte ne comporte que quatre éléments. l’un des éléments est toutefois un tableau de longueur trois. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute et supprime des éléments dans un tableau. Cette méthode modifie le tableau sans faire de copie.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> pour annuler cette méthode dans une sous-classe de Array, utilisez <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> pour les paramètres, comme indiqué dans l’exemple ci-dessous :</p>
     <pre xml:space="preserve" class="- topic/pre ">
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     </apiDesc><example conref="examples\Array.splice.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>, avec les éléments suivants <codeph class="+ topic/ph pr-d/codeph ">[spinach, green pepper, cilantro, onion, avocado]</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> est ensuite appelée avec les paramètres 2 et 2, qui affecte <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> et <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> au tableau <codeph class="+ topic/ph pr-d/codeph ">spliced</codeph>. Le tableau <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> contient ensuite <codeph class="+ topic/ph pr-d/codeph ">[spinach,green pepper,avocado]</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> est appelée une deuxième fois avec les paramètres 1, 0 et le tableau <codeph class="+ topic/ph pr-d/codeph ">spliced</codeph> pour affecter <codeph class="+ topic/ph pr-d/codeph ">[cilantro,onion]</codeph> en tant que deuxième élément dans <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");

var spliced:Array = vegetables.splice(2, 2);
trace(vegetables); // spinach,green pepper,avocado
trace(spliced);    // cilantro,onion

vegetables.splice(1, 0, spliced);
trace(vegetables); // spinach,cilantro,onion,green pepper,avocado

</codeblock></example><example conref="examples\Array.splice.2.as" class="- topic/example "> Vous pouvez alors constater que <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> et <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> renvoient des résultats qui laissent entendre que <codeph class="+ topic/ph pr-d/codeph ">vegetables</codeph> comporte 5 éléments, alors que cet objet n’en comporte que quatre (et le deuxième élément est en fait un tableau qui contient deux éléments). Pour ajouter <codeph class="+ topic/ph pr-d/codeph ">cilantro</codeph> et <codeph class="+ topic/ph pr-d/codeph ">onion</codeph> de façon individuelle, utilisez :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var vegetables:Array = new Array("spinach",
                 "green pepper",
                 "cilantro",
                 "onion",
                 "avocado");
 
 var spliced:Array = vegetables.splice(2, 2);
 trace(vegetables); // spinach,green pepper,avocado
 trace(spliced);    // cilantro,onion
 
 vegetables.splice(1, 0, "cilantro", "onion");
 trace(vegetables); // spinach,cilantro,onion,green pepper,avocado
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Array:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une chaîne représentant les éléments du tableau spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne d’éléments de tableau.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une chaîne représentant les éléments du tableau spécifié. Chaque élément du tableau, de la position d’index 0 à la position d’index la plus élevée, est converti en chaîne concaténée et séparé par des virgules. Dans l’implémentation d’ActionScript 3.0, cette méthode renvoie la même valeur que la méthode <codeph class="+ topic/ph pr-d/codeph ">Array.toString()</codeph>.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/toString()" class="- topic/link "><linktext class="- topic/linktext ">Array.toString()</linktext></link></related-links></apiOperation><apiOperation id="Array:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une chaîne représentant les éléments du tableau spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.toString, toString
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne d’éléments de tableau.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une chaîne représentant les éléments du tableau spécifié. Chaque élément du tableau, de la position d’index 0 à la position d’index la plus élevée, est converti en chaîne concaténée et séparé par des virgules. Pour spécifier un séparateur personnalisé, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">Array.join()</codeph>.
     
     
     </apiDesc><example conref="examples\Array.toString.1.as" class="- topic/example "> Le code suivant crée un tableau, convertit les valeurs en chaînes, puis les stocke dans la variable <codeph class="+ topic/ph pr-d/codeph ">vegnums</codeph> du type de données String.

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var vegetables:Array = new Array();
vegetables.push(1);
vegetables.push(2);
vegetables.push(3);
vegetables.push(4);
vegetables.push(5);
var vegnums:String = vegetables.toString();
trace(vegnums+",6");
// 1,2,3,4,5,6
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link><link href="#Array/join()" class="- topic/link "><linktext class="- topic/linktext ">Array.join()</linktext></link></related-links></apiOperation><apiOperation id="Array:AS3:unshift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unshift</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute un ou plusieurs éléments au début d’un tableau et renvoie la nouvelle longueur du tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.unshift, unshift
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier représentant la nouvelle longueur du tableau.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un ou plusieurs nombres, éléments ou variables à insérer au début du tableau.  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute un ou plusieurs éléments au début d’un tableau et renvoie la nouvelle longueur du tableau. Les autres éléments du tableau sont décalés de leur position d’origine, i, vers i+1.
     
     </apiDesc><example conref="examples\Array.unshift.1.as" class="- topic/example "> Le code suivant crée un objet Array vide, <codeph class="+ topic/ph pr-d/codeph ">names</codeph>. Les chaînes <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Jeff</codeph> sont ajoutées à la méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>, puis les chaînes <codeph class="+ topic/ph pr-d/codeph ">Alfred</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph> sont ajoutées au début de ces <codeph class="+ topic/ph pr-d/codeph ">noms</codeph> au moyen de deux appels à la méthode <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var names:Array = new Array();
names.push("Bill");
names.push("Jeff");

trace(names); // Bill,Jeff

names.unshift("Alfred");
names.unshift("Kyle");

trace(names); // Kyle,Alfred,Bill,Jeff
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/pop()" class="- topic/link "><linktext class="- topic/linktext ">Array.pop()</linktext></link><link href="#Array/push()" class="- topic/link "><linktext class="- topic/linktext ">Array.push()</linktext></link><link href="#Array/shift()" class="- topic/link "><linktext class="- topic/linktext ">Array.shift()</linktext></link></related-links></apiOperation><apiValue id="Array:CASEINSENSITIVE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">CASEINSENSITIVE</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie un tri sans respect de la casse pour les méthodes de tri de la classe Array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F6
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie un tri sans respect de la casse pour les méthodes de tri de la classe Array. Vous pouvez utiliser cette constante pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> de la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph>. 
     <p class="- topic/p ">La valeur de cette constante est 1.</p>
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:DESCENDING" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">DESCENDING</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie un tri par ordre décroissant pour les méthodes de tri de la classe Array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F7
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie un tri par ordre décroissant pour les méthodes de tri de la classe Array. Vous pouvez utiliser cette constante pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> de la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph>. 
     <p class="- topic/p ">La valeur de cette constante est 2.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:NUMERIC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NUMERIC</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie un tri numérique (et non de type chaîne de caractères) pour les méthodes de tri de la classe Array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F8
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">16</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie un tri numérique (et non de type chaîne de caractères) pour les méthodes de tri de la classe Array. Si vous incluez cette constante au paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph>, les méthodes <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph> sont obligées de trier les nombres en tant que valeurs numériques, et non en tant que chaînes de caractères numériques. Si vous ne spécifiez pas la constante <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph>, le tri traite chaque élément de tableau en tant que chaîne de caractères et donne les résultats selon l’ordre Unicode. 
     
     <p class="- topic/p ">Supposons par exemple que vous disposez du tableau de valeurs <codeph class="+ topic/ph pr-d/codeph ">[2005, 7, 35]</codeph>. Si la constante <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> n’est <b class="+ topic/ph hi-d/b ">pas</b> incluse dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph>, le tableau trié correspond à <codeph class="+ topic/ph pr-d/codeph ">[2005, 35, 7]</codeph>, mais si la constante <codeph class="+ topic/ph pr-d/codeph ">NUMERIC</codeph> <b class="+ topic/ph hi-d/b ">est</b> incluse, le tableau trié correspond à <codeph class="+ topic/ph pr-d/codeph ">[7, 35, 2005]</codeph>. </p>
     
     <p class="- topic/p ">Cette constante s’applique uniquement aux nombres contenus dans le tableau ; elle ne s’applique pas aux chaînes qui contiennent des données numériques telles que <codeph class="+ topic/ph pr-d/codeph ">["23", "5"]</codeph>.</p>
     
     <p class="- topic/p ">La valeur de cette constante est 16.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:RETURNINDEXEDARRAY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">RETURNINDEXEDARRAY</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie que le tri renvoie un tableau composé d’index de tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217F9
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">8</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie que le tri renvoie un tableau composé d’index de tableau. Vous pouvez utiliser cette constante dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> de la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph>, afin de disposer de plusieurs vues des éléments du tableau sans modifier le tableau d’origine. 
     <p class="- topic/p ">La valeur de cette constante est 8.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:UNIQUESORT" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">UNIQUESORT</apiName><shortdesc class="- topic/shortdesc ">
     Spécifie le critère de tri unique pour les méthodes de tri de la classe Array.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>x217FA
      
      </helpid></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">4</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Spécifie le critère de tri unique pour les méthodes de tri de la classe Array. Vous pouvez utiliser cette constante pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">options</codeph> de la méthode <codeph class="+ topic/ph pr-d/codeph ">sort()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">sortOn()</codeph>. L’option de tri unique met fin au tri si deux éléments ou champs triés ont des valeurs identiques. 
     <p class="- topic/p ">La valeur de cette constante est 4.</p>
     
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Array/sort()" class="- topic/link "><linktext class="- topic/linktext ">Array.sort()</linktext></link><link href="#Array/sortOn()" class="- topic/link "><linktext class="- topic/linktext ">Array.sortOn()</linktext></link></related-links></apiValue><apiValue id="Array:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     Entier non négatif spécifiant le nombre d’éléments contenus dans le tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">array.length, length
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Entier non négatif spécifiant le nombre d’éléments contenus dans le tableau. Cette propriété est automatiquement mise à jour lorsque vous ajoutez de nouveaux éléments dans le tableau. Lorsque vous affectez une valeur à un élément de tableau (par exemple, <codeph class="+ topic/ph pr-d/codeph ">my_array[index] = value</codeph>), si <codeph class="+ topic/ph pr-d/codeph ">index</codeph> est un nombre et si <codeph class="+ topic/ph pr-d/codeph ">index+1</codeph> est supérieur à la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph>, la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est mise à jour et définie sur la valeur <codeph class="+ topic/ph pr-d/codeph ">index+1</codeph>.
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque : </b>si vous affectez une valeur plus courte que la valeur existante à la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph>, le tableau sera tronqué.</p>
     
     </apiDesc><example conref="examples\Array.length.1.as" class="- topic/example "> Le code suivant crée un objet Array, <codeph class="+ topic/ph pr-d/codeph ">names</codeph>, avec l’élément de chaîne <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph>. Il utilise ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> pour ajouter un autre élément de chaîne, <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph>. La longueur de la chaîne, telle que déterminée par la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph>, était d’un élément avant l’utilisation de <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> et de deux éléments après l’appel de <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>. Une autre chaîne, <codeph class="+ topic/ph pr-d/codeph ">Jeff</codeph>, est ensuite ajoutée pour porter la longueur de <codeph class="+ topic/ph pr-d/codeph ">names</codeph> à trois éléments. La méthode <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph> est alors appelée deux fois pour supprimer <codeph class="+ topic/ph pr-d/codeph ">Bill</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Kyle</codeph> et ne conserver ainsi que le dernier élément <codeph class="+ topic/ph pr-d/codeph ">length</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var names:Array = new Array("Bill");
names.push("Kyle");
trace(names.length); // 2

names.push("Jeff");
trace(names.length); // 3

names.shift();
names.shift();
trace(names.length); // 1
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:RegExp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">RegExp</apiName><shortdesc class="- topic/shortdesc ">
     
     La classe RegExp vous permet d’utiliser des expressions régulières, à savoir des modèles destinés à effectuer des recherches dans les chaînes et à remplacer du texte dans ces dernières.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp
     </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     
     La classe RegExp vous permet d’utiliser des expressions régulières, à savoir des modèles destinés à effectuer des recherches dans les chaînes et à remplacer du texte dans ces dernières.
     
     <p class="- topic/p ">Pour créer un objet RegExp, utilisez le constructeur <codeph class="+ topic/ph pr-d/codeph ">new RegExp()</codeph> ou affectez un littéral RegExp à une variable :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var pattern1:RegExp = new RegExp("test-\\d", "i");
     var pattern2:RegExp = /test-\d/i;
     </codeblock>
     
     <p class="- topic/p ">Pour plus d’informations, voir le chapitre « Utilisation d’expressions régulières » dans le <i class="+ topic/ph hi-d/i ">Guide du développeur d’ActionScript 3.0</i>. </p>
     
     </apiDesc><example conref="examples\RegExpExample.as" class="- topic/example "> L’exemple suivant indique comment utiliser des expressions régulières pour analyser des chaînes et renvoyer une nouvelle chaîne ou une valeur booléenne, en fonction de la chaîne transmise. La méthode <codeph class="+ topic/ph pr-d/codeph ">informalizeGreeting()</codeph> remplace simplement le mot <codeph class="+ topic/ph pr-d/codeph ">Hello</codeph> par <codeph class="+ topic/ph pr-d/codeph ">Hi</codeph>, quelle qu’en soit la casse. Elle sépare également le nom du prénom dans la chaîne (en supposant que le nom corresponde au modèle spécifié). Dans les méthodes <codeph class="+ topic/ph pr-d/codeph ">validateEmail()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">validatePhoneNumber()</codeph>, la chaîne transmise est vérifiée pour vérifier si son modèle correspond bien à celui d’une adresse électronique valide ou celui d’un numéro de téléphone, puis les méthodes renvoient des valeurs booléennes en fonction des résultats. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class RegExpExample extends Sprite {        
        public function RegExpExample() {            
            var formalGreeting:String = "Hello, John Smith.";
            trace(informalizeGreeting(formalGreeting));    // Hi, John.

            var validEmail:String = "name@domain.com";
            trace(validateEmail(validEmail));        // true
            
            var invalidEmail:String = "foo";
            trace(validateEmail(invalidEmail));  // false
            
            var validPhoneNumber:String = "415-555-1212";
            trace(validatePhoneNumber(validPhoneNumber));    // true
            
            var invalidPhoneNumber:String = "312-867-530999";
            trace(validatePhoneNumber(invalidPhoneNumber));  // false
        }
        private function informalizeGreeting(str:String):String {
            var pattern:RegExp = new RegExp("hello, (\\w+) \\w+", "i");
            return str.replace(pattern, "Hi, $1");
        }
        private function validateEmail(str:String):Boolean {
            var pattern:RegExp = /(\w|[_.\-])+@((\w|-)+\.)+\w{2,4}+/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
        private function validatePhoneNumber(str:String):Boolean {
            var pattern:RegExp = /^\d{3}-\d{3}-\d{4}$/;
            var result:Object = pattern.exec(str);
            if(result == null) {
                return false;
            }
            return true;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#String/match()" class="- topic/link "><linktext class="- topic/linktext ">String.match()</linktext></link><link href="#String/replace()" class="- topic/link "><linktext class="- topic/linktext ">String.replace()</linktext></link><link href="#String/search()" class="- topic/link "><linktext class="- topic/linktext ">String.search()</linktext></link></related-links><apiConstructor id="RegExp:RegExp" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">RegExp</apiName><shortdesc class="- topic/shortdesc ">
        Vous permet de générer une expression régulière à partir de deux chaînes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.attribute, attribute
        </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">re</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Modèle de l’expression régulière (également appelée <i class="+ topic/ph hi-d/i ">chaîne du constructeur</i>). Il s’agit de la partie principale de l’expression régulière, à savoir la partie associée aux caractères « / »). 
        
        <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarques :</b> </p>
        
        <ul class="- topic/ul "><li class="- topic/li ">N’incluez pas les caractères « / » de début et de fin. N’utilisez ceux-ci que lorsque vous définissez un littéral d’expression régulière sans utiliser de constructeur. Par exemple, les deux expressions régulières suivantes sont équivalentes :
        
        <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var re1:RegExp = new RegExp("bob", "i"); 
        var re2:RegExp = /bob/i;</codeblock>
        
        </li><li class="- topic/li ">Dans une expression régulière définie à l’aide de la méthode constructeur <codeph class="+ topic/ph pr-d/codeph ">RegExp()</codeph>, tapez deux fois le caractère barre oblique inversée (\) pour utiliser une métaséquence débutant par le caractère barre oblique inversée, telle que <codeph class="+ topic/ph pr-d/codeph ">\d</codeph> (qui remplace n’importe quel chiffre). Par exemple, les deux expressions régulières suivantes sont équivalentes :
        
        <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock "> var re1:RegExp = new RegExp("\\d+", ""); 
        var re2:RegExp = /\d/;</codeblock>
        
        <p class="- topic/p ">Dans la première expression, vous devez taper deux fois le caractère barre oblique inversée, car le premier paramètre de la méthode constructeur <codeph class="+ topic/ph pr-d/codeph ">RegExp() </codeph>est une chaîne. Dans un littéral de chaîne, ce caractère doit être entré deux fois pour être interprété comme une barre oblique inversée unique.</p>
        
        </li></ul>
        
        </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">flags</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les modificateurs de l’expression régulière, parmi lesquels figurent :
        
        <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">g</codeph>  Lorsque la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> de la classe String est utilisée, spécifiez ce modificateur pour remplacer toutes les correspondances, plutôt que la première uniquement. Ce modificateur correspond à la propriété <codeph class="+ topic/ph pr-d/codeph ">global</codeph> de l’occurrence de RegExp.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">i</codeph>  L’expression régulière est évaluée <i class="+ topic/ph hi-d/i ">sans</i> respect de la casse. Ce modificateur correspond à la propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreCase</codeph> de l’occurrence de RegExp.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">s</codeph>  Caractère point (<codeph class="+ topic/ph pr-d/codeph ">.</codeph>) correspond aux caractères de nouvelle ligne. Remarque : ce modificateur correspond à la propriété <codeph class="+ topic/ph pr-d/codeph ">dotall</codeph> de l’occurrence de RegExp.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">m</codeph>  Le caractère circonflexe (<codeph class="+ topic/ph pr-d/codeph ">^</codeph>) et le symbole du dollar (<codeph class="+ topic/ph pr-d/codeph ">$</codeph>) établissent une correspondance avant <i class="+ topic/ph hi-d/i ">et</i> après les caractères de nouvelle ligne. Ce modificateur correspond à la propriété <codeph class="+ topic/ph pr-d/codeph ">multiline</codeph> de l’occurrence de RegExp.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">x</codeph>  Les caractères d’espace blanc de la chaîne <codeph class="+ topic/ph pr-d/codeph ">re</codeph> sont ignorés, afin de vous permettre d’écrire des constructeurs plus lisibles. Ce modificateur correspond à la propriété <codeph class="+ topic/ph pr-d/codeph ">extended</codeph> de l’occurrence de RegExp.</li></ul>
        
        <p class="- topic/p ">Aucun autre caractère de la chaîne <codeph class="+ topic/ph pr-d/codeph ">flags</codeph> n’est pris en compte. </p>
        
        </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
        Vous permet de générer une expression régulière à partir de deux chaînes. La première définit le modèle de l’expression régulière, tandis que la seconde définit les indicateurs utilisés dans l’expression régulière. 
        
        </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="RegExp:AS3:exec" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">exec</apiName><shortdesc class="- topic/shortdesc ">
         Recherche l’expression régulière dans la chaîne str indiquée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.exec, exec
         </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si aucune correspondance n’est détectée, un objet aux propriétés suivantes dans le cas contraire : 
         
         <ul class="- topic/ul "><li class="- topic/li ">Un tableau dont l’élément 0 contient la sous-chaîne correspondante entière, et les autres éléments du tableau (compris entre 1 et <i class="+ topic/ph hi-d/i ">n</i>) contiennent des sous-chaînes correspondant aux groupes entre parenthèses de l’expression régulière. </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">index</codeph>  Position des caractères de la sous-chaîne correspondante au sein de la chaîne</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">input</codeph>  Chaîne (<codeph class="+ topic/ph pr-d/codeph ">str</codeph>)</li></ul>
         
         
         </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne à rechercher.  
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Recherche l’expression régulière dans la chaîne <codeph class="+ topic/ph pr-d/codeph ">str</codeph> indiquée. 
         
         <p class="- topic/p ">Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) n’est <i class="+ topic/ph hi-d/i ">pas</i> défini pour l’expression régulière, la recherche débute au début de la chaîne (position d’index 0) et ignore la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de l’expression régulière.</p>
         
         <p class="- topic/p ">Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) <i class="+ topic/ph hi-d/i ">est</i> défini pour l’expression régulière, la recherche débute à la position d’index spécifiée par la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de l’expression régulière. Si la recherche correspond à une sous-chaîne, la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> est modifiée pour indiquer la position de la fin de la correspondance. </p>
         
         </apiDesc><example class="- topic/example ">Lorsque l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) n’est <i class="+ topic/ph hi-d/i ">pas</i> défini dans l’expression régulière, vous pouvez utiliser <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> pour rechercher dans la chaîne la première correspondance : 
         
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;   
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         trace(result);
         </codeblock>
         
         <p class="- topic/p "> L’objet <codeph class="+ topic/ph pr-d/codeph ">result</codeph> est défini comme suit :</p>
         
         <ul class="- topic/ul "><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[0]</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">"She"</codeph> (correspondance exacte). </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[1]</codeph> est défini sur une chaîne vide (premier groupe entre parenthèses correspondant). </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result[2]</codeph> est réglé sur <codeph class="+ topic/ph pr-d/codeph ">"e"</codeph> (second groupe entre parenthèses correspondant). </li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result.index</codeph> est défini sur 0.</li><li class="- topic/li "> <codeph class="+ topic/ph pr-d/codeph ">result.input</codeph> est défini sur la chaîne d’entrée : <codeph class="+ topic/ph pr-d/codeph ">"She sells seashells by the seashore"</codeph>.</li></ul> 
         
         
         
         <p class="- topic/p "> Dans l’exemple suivant, l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) <i class="+ topic/ph hi-d/i ">étant</i> défini dans l’expression régulière, vous pouvez utiliser <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> à plusieurs reprises pour trouver les correspondances multiples :</p>
         
         <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         var myPattern:RegExp = /(\w~~)sh(\w~~)/ig;  
         var str:String = "She sells seashells by the seashore";
         var result:Object = myPattern.exec(str);
         
         while (result != null) {
             trace ( result.index, "\t", result);
             result = myPattern.exec(str);
         }
         </codeblock>
         
         <p class="- topic/p "> Le résultat du code est le suivant :</p>
         
         <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
            0      She,,e
            10     seashells,sea,ells
            27     seashore,sea,ore
         </codeph></pre>
         
         </example></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/match()" class="- topic/link "><linktext class="- topic/linktext ">String.match()</linktext></link><link href="#String/search()" class="- topic/link "><linktext class="- topic/linktext ">String.search()</linktext></link></related-links></apiOperation><apiOperation id="RegExp:AS3:test" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">test</apiName><shortdesc class="- topic/shortdesc ">
         Recherche la correspondance de l’expression régulière dans la chaîne str indiquée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.test, test
          
          </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si une correspondance est détectée, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
         
         </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne à tester.
         
         </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Recherche la correspondance de l’expression régulière dans la chaîne <codeph class="+ topic/ph pr-d/codeph ">str</codeph> indiquée. 
         
         <p class="- topic/p ">Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) n’est <i class="+ topic/ph hi-d/i ">pas</i> défini pour l’expression régulière, la recherche débute au début de la chaîne (position d’index 0) et ignore la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de l’expression régulière.</p>
         
         <p class="- topic/p ">Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) <i class="+ topic/ph hi-d/i ">est</i> défini pour l’expression régulière, la recherche débute à la position d’index spécifiée par la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de l’expression régulière. Si la recherche correspond à une sous-chaîne, la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> est modifiée pour indiquer la position de la fin de la correspondance. </p>
         
         </apiDesc><example conref="examples\RegExp.test.1.as" class="- topic/example "> L’exemple suivant indique comment utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> sur une expression régulière où l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) est défini : 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var re1:RegExp = /\w/g;
var str:String = "a b c";
trace (re1.lastIndex); // 0
trace (re1.test(str)); // true
trace (re1.lastIndex); // 1
trace (re1.test(str)); // true
trace (re1.lastIndex); // 3
trace (re1.test(str)); // true
trace (re1.lastIndex); // 5
trace (re1.test(str)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="RegExp:dotall:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dotall</apiName><shortdesc class="- topic/shortdesc ">
         Spécifie si le caractère point (.) d’un modèle d’expression régulière correspond à des caractères de nouvelle ligne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.dotall, dotall
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Spécifie si le caractère point (.) d’un modèle d’expression régulière correspond à des caractères de nouvelle ligne. Utilisez l’indicateur <codeph class="+ topic/ph pr-d/codeph ">s</codeph> lorsque vous générez une expression régulière pour définir <codeph class="+ topic/ph pr-d/codeph ">dotall = true</codeph>.
         
         </apiDesc><example conref="examples\RegExp.dotall.1.as" class="- topic/example "> L’exemple suivant indique l’effet de l’indicateur <codeph class="+ topic/ph pr-d/codeph ">s</codeph> (<codeph class="+ topic/ph pr-d/codeph ">dotall</codeph>) sur une expression régulière : 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var str:String = "&lt;p>Hello\n"
        + "again&lt;/p>"
        + "&lt;p>Hello&lt;/p>";

var pattern:RegExp = /&lt;p>.*?&lt;\/p>/;
trace(pattern.dotall) // false
trace(pattern.exec(str)); // &lt;p>Hello&lt;/p>

pattern = /&lt;p>.*?&lt;\/p>/s;
trace(pattern.dotall) // true
trace(pattern.exec(str)); 
   </codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:extended:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">extended</apiName><shortdesc class="- topic/shortdesc ">
         Indique si le mode étendu est activé pour l’expression régulière.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.extended, extended
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Indique si le mode étendu est activé pour l’expression régulière. Si un objet RegExp est en mode étendu, les caractères d’espace blanc que contient la chaîne du constructeur sont ignorés. Les constructeurs sont ainsi plus lisibles.
         
         <p class="- topic/p ">Utilisez l’indicateur <codeph class="+ topic/ph pr-d/codeph ">x</codeph> lorsque vous générez une expression régulière pour définir <codeph class="+ topic/ph pr-d/codeph ">extended = true</codeph>. </p>
         
         </apiDesc><example conref="examples\RegExp.extended.1.as" class="- topic/example "> L’exemple suivant présente différentes façons de construire la même expression régulière. Pour chaque façon, l’expression régulière doit correspondre au modèle de numéro de téléphone xxx-xxx-xxxx ou (xxx) xxx-xxxx ou (xxx)xxx-xxxx. La deuxième expression régulière utilise l’indicateur <codeph class="+ topic/ph pr-d/codeph ">x</codeph>, ce qui permet d’ignorer les espaces blancs de la chaîne. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var rePhonePattern1:RegExp = /\d{3}-\d{3}-\d{4}|\(\d{3}\)\s?\d{3}-\d{4}/; 
var str:String = "The phone number is (415)555-1212.";

trace(rePhonePattern1.extended) // false
trace(rePhonePattern1.exec(str)); // (415)555-1212

var rePhonePattern2:RegExp = / \d{3}-\d{3}-\d{4}  |   \( \d{3} \) \ ? \d{3}-\d{4}  /x; 
trace(rePhonePattern2.extended) // true
trace(rePhonePattern2.exec(str)); // (415)555-1212
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:global:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">global</apiName><shortdesc class="- topic/shortdesc ">
         Indique si la mise en correspondance globale est activée pour l’expression régulière.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.global, global
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Indique si la mise en correspondance globale est activée pour l’expression régulière. Lorsque <codeph class="+ topic/ph pr-d/codeph ">global == true</codeph>, la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> est définie après détection d’une correspondance. Lors de la demande suivante de correspondance, le moteur de l’expression régulière démarre à partir de la position <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> dans la chaîne. Utilisez l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> lorsque vous générez une expression régulière pour régler <codeph class="+ topic/ph pr-d/codeph ">global</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. 
         
         </apiDesc><example conref="examples\RegExp.global.1.as" class="- topic/example "> L’exemple suivant indique l’effet de l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) sur la méthode <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /foo\d/; 
var str:String = "foo1 foo2";
trace(pattern.global); // false
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 0
trace(pattern.exec(str)); // foo1

pattern = /foo\d/g;
trace(pattern.global); // true
trace(pattern.exec(str)); // foo1
trace(pattern.lastIndex); // 4
trace(pattern.exec(str)); // foo2
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:ignoreCase:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreCase</apiName><shortdesc class="- topic/shortdesc ">
         Indique si l’expression régulière prend ou non en charge la casse.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.ignoreCase, ignoreCase
         </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Indique si l’expression régulière prend ou non en charge la casse. Utilisez l’indicateur <codeph class="+ topic/ph pr-d/codeph ">i</codeph> lorsque vous générez une expression régulière pour définir <codeph class="+ topic/ph pr-d/codeph ">ignoreCase = true</codeph>. 
         
         </apiDesc><example conref="examples\RegExp.ignoreCase.1.as" class="- topic/example "> L’exemple suivant indique l’effet de la définition de l’indicateur <codeph class="+ topic/ph pr-d/codeph ">i</codeph> (<codeph class="+ topic/ph pr-d/codeph ">ignoreCase</codeph>) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /bob/; 
var str:String = "Bob bob";
trace(pattern.ignoreCase); // false
trace(pattern.exec(str)); // bob

pattern = /bob/i;
trace(pattern.ignoreCase); // true
trace(pattern.exec(str)); // Bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:lastIndex:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndex</apiName><shortdesc class="- topic/shortdesc ">
         Spécifie la position d’index où démarrer la recherche suivante dans la chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.lastIndex, lastIndex
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Spécifie la position d’index où démarrer la recherche suivante dans la chaîne. Cette propriété affecte les méthodes <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> de la classe RegExp. Toutefois, les méthodes <codeph class="+ topic/ph pr-d/codeph ">match()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">search()</codeph> de la classe String ignorent la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> et démarrent toutes les recherches au début de la chaîne.
         
         <p class="- topic/p ">Si la méthode <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">test()</codeph> trouve une correspondance et que l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) est réglé sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour l’expression régulière, elle règle automatiquement la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> sur la position d’index du caractère qui <i class="+ topic/ph hi-d/i ">after</i> le dernier caractère de la sous-chaîne correspondante de la dernière correspondance. Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) est réglé sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, la méthode ne définit pas la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph>.</p>
         
         <p class="- topic/p ">Vous pouvez définir la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de sorte à ajuster la position de début dans la chaîne pour la mise en correspondance des expressions régulières. </p>
         
         </apiDesc><example conref="examples\RegExp.lastIndex.1.as" class="- topic/example "> L’exemple suivant indique l’effet de la définition de la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> et indique comment elle est mise à jour après un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">exec()</codeph> sur une expression régulière où l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (<codeph class="+ topic/ph pr-d/codeph ">global</codeph>) est défini :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /\w\d/g; 
var str:String = "a1 b2 c3 d4";
pattern.lastIndex = 2; 
trace(pattern.exec(str)); // b2
trace(pattern.lastIndex); // 5
trace(pattern.exec(str)); // c3
trace(pattern.lastIndex); // 8
trace(pattern.exec(str)); // d4
trace(pattern.lastIndex); // 11
trace(pattern.exec(str)); // null
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:multiline:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">multiline</apiName><shortdesc class="- topic/shortdesc ">
         Spécifie si l’indicateur m (multiline) est défini.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.multiline, multiline
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Spécifie si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">m</codeph> (<codeph class="+ topic/ph pr-d/codeph ">multiline</codeph>) est défini. S’il est défini, le caractère circonflexe (<codeph class="+ topic/ph pr-d/codeph ">^</codeph>) et le symbole du dollar (<codeph class="+ topic/ph pr-d/codeph ">$</codeph>) établissent une correspondance avant et après les caractères de nouvelle ligne dans une expression régulière. Utilisez l’indicateur <codeph class="+ topic/ph pr-d/codeph ">m</codeph> lorsque vous générez une expression régulière pour définir <codeph class="+ topic/ph pr-d/codeph ">multiline = true</codeph>.
         
         </apiDesc><example conref="examples\RegExp.multiline.1.as" class="- topic/example "> L’exemple suivant indique l’effet de la définition de l’indicateur <codeph class="+ topic/ph pr-d/codeph ">m</codeph> (<codeph class="+ topic/ph pr-d/codeph ">multiline</codeph>) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var pattern:RegExp = /^bob/; 
var str:String = "foo\n"
                + "bob";
trace(pattern.multiline); // false
trace(pattern.exec(str)); // null

pattern = /^bob/m;
trace(pattern.multiline); // true
trace(pattern.exec(str)); // bob
</codeblock></example></apiValueDetail></apiValue><apiValue id="RegExp:source:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">source</apiName><shortdesc class="- topic/shortdesc ">
         Spécifie la partie modèle de l’expression régulière.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">RegExp, RegExp.source, source
          
          </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
         Spécifie la partie modèle de l’expression régulière.
         
         </apiDesc><example conref="examples\RegExp.source.1.as" class="- topic/example "> Le code suivant renvoie le paramètre <codeph class="+ topic/ph pr-d/codeph ">source</codeph> de deux expressions régulières :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var re1:RegExp = /aabb/gi;
trace (re1.source); // aabb

var re2:RegExp = new RegExp("x+y*", "i");
trace(re2.source); // x+y*
</codeblock></example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Date" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Date</apiName><shortdesc class="- topic/shortdesc ">
 La classe Date représente des informations relatives à la date et à l’heure.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Date object, built-in class, date 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Date représente des informations relatives à la date et à l’heure. Une occurrence de la classe Date représente un moment spécifique par rapport auquel vous pouvez interroger ou modifier des propriétés telles que le mois, le jour, l’heure et les secondes. La classe Date vous permet d’extraire des valeurs de date et d’heure relatives à l’heure universelle (GMT, désormais appelée heure universelle ou UTC) ou à l’heure locale, déterminée par le paramètre de fuseau horaire activé dans le système d’exploitation sur lequel Flash Player s’exécute. Les méthodes de la classe Date ne sont pas statiques mais s’appliquent uniquement au seul objet Date spécifié lorsque la méthode est appelée. Les méthodes <codeph class="+ topic/ph pr-d/codeph ">Date.UTC()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Date.parse()</codeph> font exception à la règle et sont statiques.
 <p product="flash" class="- topic/p ">La classe Date gère l’heure d’été différemment, en fonction du système d’exploitation et de la version du moteur d’exécution. Flash Player 6 et les versions ultérieures gèrent l’heure d’été sur les systèmes d’exploitation suivants comme suit :</p>
 <ul product="flash" class="- topic/ul "><li class="- topic/li ">Windows : l’objet Date ajuste automatiquement sa sortie pour l’heure d’été. L’objet Date détecte si l’heure d’été est définie selon les paramètres régionaux actuels, et si tel est le cas, détecte la date et les heures de transition de l’heure d’été standard. Toutefois, les dates de transition actuellement en vigueur sont appliquées aux dates passées et à venir : par conséquent, le décalage de l’heure d’été peut être calculé de manière incorrecte pour les dates passées lorsque les paramètres régionaux étaient définis sur différentes dates de transition.</li><li class="- topic/li ">Mac OS X : l’objet Date ajuste automatiquement sa sortie pour l’heure d’été. La base de données d’informations sur le fuseau horaire dans Mac OS X est utilisée pour déterminer si un décalage d’heure d’été doit être appliqué à une date ou heure actuelle ou passée.</li><li class="- topic/li ">Mac OS 9 : le système d’exploitation fournit uniquement les informations suffisantes pour déterminer s’il convient d’appliquer un décalage d’heure d’été à la date et l’heure actuelles. En conséquence, l’objet de date suppose que le décalage d’heure d’été actuel s’applique à toutes les dates et heures passées ou à venir.</li></ul>
 <p product="flash" class="- topic/p ">Flash Player 5 gère l’heure d’été sur les systèmes d’exploitation suivants comme suit :</p>
 <ul product="flash" class="- topic/ul "><li class="- topic/li ">Windows : les règles en vigueur aux Etats-Unis concernant l’heure d’été sont toujours appliquées, ce qui entraîne des transitions incorrectes en Europe et dans les autres zones qui adoptent l’heure d’été, mais ayant des heures de transition différentes de celles en vigueur aux Etats-Unis. Flash détecte correctement si l’heure d’été est utilisée dans les paramètres régionaux actuels.</li></ul>
 <p class="- topic/p ">Pour utiliser la classe Date, construisez une occurrence de Date à l’aide de l’opérateur <codeph class="+ topic/ph pr-d/codeph ">new</codeph>.</p>
 <p class="- topic/p ">ActionScript 3.0 intègre plusieurs nouvelles propriétés accesseur que vous pouvez substituer à de nombreuses méthodes de la classe Date qui accèdent à des occurrences de Date ou les modifient. ActionScript 3.0 inclut également plusieurs nouvelles variations de la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> qui sont incluses pour des raisons de conformité avec la troisième édition de ECMA-262, ce qui inclut : <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleString()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleTimeString()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Date.toLocaleDateString()</codeph>.</p>
 <p class="- topic/p ">Pour calculer l’heure relative ou le temps écoulé, voir la méthode <codeph class="+ topic/ph pr-d/codeph ">getTimer()</codeph>, qui figure dans le package flash.utils.</p>
 
 </apiDesc><example conref="examples\DateExample.as" class="- topic/example "> L’exemple suivant présente différentes utilisations du constructeur <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> pour affecter les variables suivantes :
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate1</codeph> appelle <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> sans paramètres, ce qui définit <codeph class="+ topic/ph pr-d/codeph ">myDate1</codeph> sur la date et l’heure actuelle (en fonction de la date et de l’heure de votre système). </li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate2</codeph> appelle <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">2000</codeph>), month (<codeph class="+ topic/ph pr-d/codeph ">0</codeph> = January) et <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) transmis à cette fonction.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate3</codeph> appelle <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> avec <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">65</codeph> = 1965), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">2</codeph> = March), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">6</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">9</codeph>), <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">second</codeph> (<codeph class="+ topic/ph pr-d/codeph ">15</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph>-+ (<codeph class="+ topic/ph pr-d/codeph ">0</codeph>) transmis en tant que paramètres.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">myDate4</codeph> appelle <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> où la valeur horaire représente le nombre de millisecondes <b class="+ topic/ph hi-d/b ">avant</b> (dans la mesure où la valeur est négative) 0:00:00 GMT 1 janvier 1970.</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;
    
    public class DateExample extends Sprite{
        public function DateExample() {
            var myDate1:Date = new Date();
            trace(myDate1); // [NOW]

            var myDate2:Date = new Date(2000, 0, 1);
            trace(myDate2); // Sat Jan 1 00:00:00 GMT-0800 2000

            var myDate3:Date = new Date(65, 2, 6, 9, 30, 15, 0);
            trace(myDate3); // Sat Mar 6 09:30:15 GMT-0800 1965

            var myDate4:Date = new Date(-14159025000);
            trace(myDate4); // Sun Jul 20 19:56:15 GMT-0700 1969
        }        
    }    
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.utils.xml#/getTimer()" class="- topic/link "><linktext class="- topic/linktext ">flash.utils.getTimer()</linktext></link></related-links><apiConstructor id="Date:Date" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Date</apiName><shortdesc class="- topic/shortdesc ">
	 Construit un nouvel objet Date qui contient la date et l’heure spécifiées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new Date, constructor, date
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">yearOrTimevalue</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si d’autres paramètres sont spécifiés, ce nombre représente une année (telle que 1965) ; sinon, il représente une valeur horaire. Si le nombre représente une année, une valeur comprise entre 0 et 99 renvoie à une année comprise entre 1900 et 1999 ; sinon les quatre chiffres de l’année doivent être spécifiés. Si le nombre représente une valeur horaire (aucun autre paramètre n’est spécifié), il s’agit du nombre de millisecondes écoulées avant ou après le premier janvier 1970 à minuit GMT ; une valeur négative représente une heure <i class="+ topic/ph hi-d/i ">antérieure</i> au premier janvier 1970 à minuit GMT ; une valeur positive représente une heure postérieure à cette date.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (janvier) et 11 (décembre).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 31. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (minuit) et 23 (23h00).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999 millisecondes. 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Construit un nouvel objet Date qui contient la date et l’heure spécifiées.  
	 
	 <p class="- topic/p ">Le constructeur <codeph class="+ topic/ph pr-d/codeph ">Date()</codeph> accepte jusqu’à sept paramètres (year, month,..., millisecond) pour spécifier une date et une heure en millisecondes. La date indiquée dans le nouvel objet Date varie selon le nombre et le type des arguments transmis. </p>
	 <ul class="- topic/ul "><li class="- topic/li ">Si vous ne transmettez pas d’argument, la date et l’heure en cours sont affectées à l’objet Date.</li><li class="- topic/li ">Si vous transmettez un seul argument dont le type de données correspond à Number, l’objet Date utilise une valeur horaire basée sur le nombre de millisecondes depuis le premier janvier 1970 0:00:000 GMT, comme spécifié par l’argument.</li><li class="- topic/li ">Si vous transmettez un seul argument dont le type de données correspond à Number et que la chaîne comporte une date valide, l’objet Date contient une valeur horaire basée sur cette date.</li><li class="- topic/li ">Si vous transmettez au moins deux arguments, l’objet Date utilise une valeur horaire basée sur les valeurs d’argument transmises, qui représentent l’année, le mois, la date, l’heure, la minute, la seconde et les millisecondes.</li></ul>
	 <p class="- topic/p ">Si vous transmettez une chaîne au constructeur de la classe Date, la date peut être exprimée dans divers formats, mais doit inclure au moins le mois, la date et l’année. Par exemple, <codeph class="+ topic/ph pr-d/codeph ">Fév 1 2005</codeph> est valide, mais <codeph class="+ topic/ph pr-d/codeph ">Fév 2005</codeph> ne l’est pas. La liste suivante indique quelques formats valides :</p>
	 <ul class="- topic/ul "><li class="- topic/li ">Jour Mois Date Heures:Minutes:Secondes GMT Année (exemple : « Mar Fév 1 00:00:00 GMT-0800 2005 », qui correspond à <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>),</li><li class="- topic/li ">Jour Mois Date Année Heures:Minutes:Secondes AM/PM (exemple, « Mar Fév 1 2005 12:00:00 AM », qui correspond à <codeph class="+ topic/ph pr-d/codeph ">toLocaleString()</codeph>),</li><li class="- topic/li ">Jour Mois Date Année (exemple : « Mar Fév 1 2005 », qui correspond à <codeph class="+ topic/ph pr-d/codeph ">toDateString()</codeph>),</li><li class="- topic/li ">Mois/Jour/Année (exemple : « 02/01/2005 »),</li><li class="- topic/li ">Mois/Année (exemple : « 02/2005 »).</li></ul>
	 </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiConstructor><apiOperation id="Date:UTC" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">UTC</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le nombre de millisecondes écoulées entre le premier janvier 1970 à minuit, heure universelle, et l’heure spécifiée dans les paramètres.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.utc, utc, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre de millisecondes écoulées entre le premier janvier 1970 et la date et heure spécifiées.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier à quatre chiffres qui représente l’année (par exemple, 2000).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (janvier) et 11 (décembre).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">1</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 31. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (minuit) et 23 (23h00).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le nombre de millisecondes écoulées entre le premier janvier 1970 à minuit, heure universelle, et l’heure spécifiée dans les paramètres. Cette méthode utilise l’heure universelle, tandis que le constructeur <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> utilise l’heure locale.
	 <p class="- topic/p ">Elle s’avère utile si vous voulez transmettre une date UTC au constructeur de la classe Date. Le constructeur de la classe Date acceptant l’intervalle exprimé en millisecondes en tant qu’argument, vous pouvez utiliser la méthode Date.UTC() pour convertir une date UTC en intervalle correspondant et transmettre cette valeur en tant qu’argument au constructeur de la classe Date :</p>
	 
	 </apiDesc><example conref="examples\Date.UTC.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>) à l’aide de l’heure locale. Ensuite, un appel à <codeph class="+ topic/ph pr-d/codeph ">UTC()</codeph> au sein d’une méthode <codeph class="+ topic/ph pr-d/codeph ">setTime()</codeph> réinitialise les mêmes paramètres sur le temps universel.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);
trace(someBirthday.toString());

someBirthday.setTime(Date.UTC(1974, 10, 30, 15, 20));
trace(someBirthday.toString());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDate</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le jour du mois (entier compris entre 1 et 31) spécifié par un objet Date conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getdate, getdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Jour du mois (1 - 31) représenté par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le jour du mois (entier compris entre 1 et 31) spécifié par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
 	 </apiDesc><example conref="examples\Date.getDate.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> est ensuite appelée afin d’extraire le jour du mois.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class DateExample extends Sprite {

        public function DateExample() {
            var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
            trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
            trace(someBirthday.getDate()); // 30
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getDay" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getDay</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) spécifié par l’objet Date conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getday, getday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Version numérique du jour de la semaine (0 - 6) représenté par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) spécifié par l’objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
 	 </apiDesc><example conref="examples\Date.getDay.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> et un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getDay()</codeph> est ensuite appelée deux fois pour afficher le jour du mois dans un premier temps, 6, puis affiche le jour de la semaine à l’aide de <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                       // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDay());            // 6
trace(weekDayLabels[someBirthday.getDay()]); // Saturday
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie l’année entière (un nombre à quatre chiffres, tel que 2000) d’un objet Date conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getfullyear, getfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Année entière représentée par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie l’année entière (un nombre à quatre chiffres, tel que 2000) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.getFullYear.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> est ensuite appelée, afin d’extraire l’année au format à quatre chiffres.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getHours</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie l’heure (entier compris entre 0 et 23) de la partie jour d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gethours, gethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Heure (0 -23) du jour représentée par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie l’heure (entier compris entre 0 et 23) de la partie jour d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés. 
	 
	 </apiDesc><example conref="examples\Date.getHours.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). Les méthodes <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> sont ensuite appelées, ce qui extrait les heures et les minutes au format à 24 heures. Enfin, la chaîne <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> est créée et est affectée au résultat d’un appel à la fonction <codeph class="+ topic/ph pr-d/codeph ">getUSClockTime()</codeph>, qui en retour appelle de nouveau <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>, ce qui donne l’heure <codeph class="+ topic/ph pr-d/codeph ">03:05 PM</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs > 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie millisecondes (entier compris entre 0 et 999) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getmilliseconds, getmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie millisecondes d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie millisecondes (entier compris entre 0 et 999) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.getMilliseconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> est ensuite appelée, ce qui extrait les millisecondes de l’objet Date à partir de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie minutes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getminutes, getminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie minutes d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie minutes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.getMinutes.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> est ensuite appelée, ce qui extrait les minutes de l’objet Date à partir de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie mois (0 pour janvier, 1 pour février, etc.) de l’objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getmonth, getmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie mois (0 – 11) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie mois (0 pour janvier, 1 pour février, etc.) de l’objet <codeph class="+ topic/ph pr-d/codeph "> Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.getMonth.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array, <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">January</codeph> à <codeph class="+ topic/ph pr-d/codeph ">December</codeph> et un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> est ensuite appelée deux fois, ce qui renvoie le numéro du mois dans un premier temps, suivi par le nom du mois pendant lequel l’objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, a été créé.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie secondes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getseconds, getseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie secondes (0 – 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie secondes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.getSeconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getSeconds()</codeph> est ensuite appelée, ce qui extrait les secondes à partir de l’heure de création de l’objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getTime</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le nombre de millisecondes écoulées depuis le premier janvier 1970 à minuit, heure universelle, pour un objet Date.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gettime, gettime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre de millisecondes écoulées depuis le premier janvier 1970 représenté par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le nombre de millisecondes écoulées depuis le premier janvier 1970 à minuit, heure universelle, pour un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>. Cette méthode permet de représenter un instant spécifique dans le temps lorsque vous comparez au moins deux objets <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><example conref="examples\Date.getTime.1.as" class="- topic/example "> L’exemple suivant crée un objet Date, <codeph class="+ topic/ph pr-d/codeph ">mlk</codeph>, avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1929</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">0</codeph> = January) et <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">15</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getTime()</codeph> est ensuite appelée, ce qui extrait les millisecondes à compter de minuit le premier janvier 1970, ce qui donne une valeur négative dans la mesure où l’année est définie sur 1929.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var mlk:Date = new Date(1929, 0, 15);
trace(mlk);           // Tue Jan 15 00:00:00 GMT-0800 1929
trace(mlk.getTime()); // -1292601600000
</codeblock></example><example conref="examples\Date.getTime.2.as" class="- topic/example "> L’exemple suivant crée un objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres, puis utilise les méthodes de la classe DateMath suivante (créée ci-dessous) pour ajouter du temps à l’objet Date d’origine, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, à compter de son heure de création :
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addSeconds()</codeph> : ajoute 30 secondes à <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addMinutes()</codeph> : ajoute 30 minutes à <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addHours()</codeph> : ajoute 6 heures à l’objet Date <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addDays()</codeph> : ajoute 30 jours à l’objet Date <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">addWeeks()</codeph> : ajoute 4 semaines à <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li></ul>

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(DateMath.addSeconds(now, 30));
trace(DateMath.addMinutes(now, 30));
trace(DateMath.addHours(now, 6));
trace(DateMath.addDays(now, 30));
trace(DateMath.addWeeks(now, 4));

class DateMath {
    public static function addWeeks(date:Date, weeks:Number):Date {
        return addDays(date, weeks*7);
    }

    public static function addDays(date:Date, days:Number):Date {
        return addHours(date, days*24);
    }

    public static function addHours(date:Date, hrs:Number):Date {
        return addMinutes(date, hrs*60);
    }

    public static function addMinutes(date:Date, mins:Number):Date {
        return addSeconds(date, mins*60);
    }

    public static function addSeconds(date:Date, secs:Number):Date {
        var mSecs:Number = secs * 1000;
        var sum:Number = mSecs + date.getTime();
        return new Date(sum);
    }
}
</codeblock> <b class="+ topic/ph hi-d/b ">Remarque</b> : il est important d’utiliser la méthode getTime lors des opérations arithmétiques sur les dates dans la mesure où cette fonction tient compte des années bissextiles et nécessite beaucoup moins de code que l’exemple suivant :
 <pre xml:space="preserve" class="- topic/pre ">
 function addMonths(num:Number):void {
     currentMonth = currentMonth + num;
     if(currentMonth > 12) {
         currentYear++;
         currentMonth = currentMonth - 12;
     }
 }
 </pre>
</example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getTimezoneOffset" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getTimezoneOffset</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie la différence, en minutes, entre le temps universel (UTC) et l’heure locale de l’ordinateur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.gettimezoneoffset, gettimezoneoffset, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les minutes que vous devez ajouter à l’heure locale de l’ordinateur pour obtenir l’heure UTC. Si votre ordinateur est en avance sur l’heure UTC, la valeur renvoyée est négative.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie la différence, en minutes, entre le temps universel (UTC) et l’heure locale de l’ordinateur. 
	 
	 </apiDesc><example conref="examples\Date.getTimezoneOffset.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getTimezoneOffset()</codeph> est ensuite appelée, qui extrait les différences (en minutes) entre l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph> et l’heure UTC. Le décalage horaire est ensuite converti en heures en divisant le résultat par 60.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var date:Date = new Date();
trace(date.getTimezoneOffset() / 60);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCDate</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le jour du mois (entier compris entre 1 et 31) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcdate, getutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Jour UTC du mois (compris entre 1 et 31) représenté par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le jour du mois (entier compris entre 1 et 31) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCDate.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCDate()</codeph> est ensuite appelée afin d’extraire le jour du mois, au format UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);             // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCDay" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCDay</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) de l’objet Date conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcday, getutcday, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Jour UTC de la semaine (compris entre 0 et 6) représenté par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) de l’objet <codeph class="+ topic/ph pr-d/codeph ">Date </codeph> conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCDay.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">[Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday]</codeph> et un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCDay()</codeph> est ensuite appelée deux fois pour afficher le jour du mois dans un premier temps, 6, puis affiche le jour de la semaine à l’aide de <codeph class="+ topic/ph pr-d/codeph ">weekDayLabels</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var weekDayLabels:Array = new Array("Sunday",
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday");

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDay()); // 6
trace(weekDayLabels[someBirthday.getUTCDay()]); // Saturday
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie l’année à quatre chiffres d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcfullyear, getutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Année UTC à quatre chiffres représentée par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie l’année à quatre chiffres d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCFullYear.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCFullYear()</codeph> est ensuite appelée, afin d’extraire l’année au format à quatre chiffres, conformément au format UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);                 // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCHours</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie l’heure (entier compris entre 0 et 23) du jour d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutchours, getutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Heure UTC du jour (comprise entre 0 et 23) représentée par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie l’heure (entier compris entre 0 et 23) du jour d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCHours.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). Les méthodes <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> sont ensuite appelées, ce qui extrait les heures et les minutes au format à 24 heures. Enfin, la chaîne <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> est créée et est affectée au résultat d’un appel à la fonction <codeph class="+ topic/ph pr-d/codeph ">getUSClockTime()</codeph>, qui en retour appelle de nouveau <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>, ce qui donne l’heure <codeph class="+ topic/ph pr-d/codeph ">03:05 PM</codeph>. Enfin, la variable String <codeph class="+ topic/ph pr-d/codeph ">utcTime</codeph> est créée de la même manière que <codeph class="+ topic/ph pr-d/codeph ">localTime</codeph> et, dans ce cas, le résultat est identique.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 5);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:5

var localTime:String = getUSClockTime(someBirthday.getHours(), someBirthday.getMinutes());
trace(localTime);    // 03:05 PM

var utcTime:String = getUSClockTime(someBirthday.getUTCHours(), someBirthday.getUTCMinutes());
trace(utcTime);      // 11:05 PM

function getUSClockTime(hrs:uint, mins:uint):String {
    var modifier:String = "PM";
    var minLabel:String = doubleDigitFormat(mins);

    if(hrs > 12) {
        hrs = hrs-12;
    } else if(hrs == 0) {
        modifier = "AM";
        hrs = 12;
    } else if(hrs &lt; 12) {
        modifier = "AM";
    }

    return (doubleDigitFormat(hrs) + ":" + minLabel + " " + modifier);
}

function doubleDigitFormat(num:uint):String {
    if(num &lt; 10) {
        return ("0" + num);
    }
    return num;
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getHours()" class="- topic/link "><linktext class="- topic/linktext ">getHours()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	  Renvoie la partie millisecondes (entier compris entre 0 et 999) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcmilliseconds, getutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie millisecondes UTC d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Renvoie la partie millisecondes (entier compris entre 0 et 999) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCMilliseconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> est ensuite appelée, ce qui extrait les millisecondes de l’heure de création de l’objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, conformément au format UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie minutes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcminutes, getutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie minutes UTC d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie minutes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCMinutes.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> est ensuite appelée, ce qui extrait les minutes de l’heure de création de l’objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, conformément au format UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:getUTCMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie mois (0 [janvier] à 11 [décembre]) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcmonth, getutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie mois UTC d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie mois (0 [janvier] à 11 [décembre]) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCMonth.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array, <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">January</codeph> à <codeph class="+ topic/ph pr-d/codeph ">December</codeph> et un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> est ensuite appelée deux fois, ce qui renvoie le numéro du mois dans un premier temps, suivi par le nom du mois de création de l’objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, conformément au format UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(now.getUTCMonth());
trace(monthLabels[now.getUTCMonth()]);
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:getUTCSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getUTCSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la partie secondes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.getutcseconds, getutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Partie secondes UTC d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la partie secondes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc><example conref="examples\Date.getUTCSeconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> est ensuite appelée, ce qui extrait les secondes de l’heure de création de l’objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, conformément au format UTC.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCSeconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:parse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parse</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une chaîne qui représente une date en valeur numérique correspondant au nombre de millisecondes écoulées depuis le premier janvier 1970 (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur numérique représentant le nombre de millisecondes écoulées depuis le premier janvier 1970 (UTC).
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">date</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne d’une date, conformément au format de sortie de <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>. Le format de date utilisé pour la sortie de <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph> est le suivant : 
     <pre xml:space="preserve" class="- topic/pre ">
     Day Mon DD HH:MM:SS TZD YYYY
     </pre>
     <p class="- topic/p ">Par exemple : </p>
     <pre xml:space="preserve" class="- topic/pre ">
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
     <p class="- topic/p ">La désignation TZD (Time Zone Designation) prend toujours la forme <codeph class="+ topic/ph pr-d/codeph ">GMT-HHMM</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">UTC-HHMM</codeph> et indique l’intervalle en heures et minutes relativement à Greenwich Mean Time (GMT), également appelé heure universelle (UTC). Les termes année, mois et jour peuvent être séparés par une barre oblique (<codeph class="+ topic/ph pr-d/codeph ">/</codeph>) ou un espace, mais jamais par un tiret (<codeph class="+ topic/ph pr-d/codeph ">-</codeph>). Les autres formats gérés sont indiqués ci-dessous. Vous pouvez utiliser des représentations partielles de ces formats (mois, jour et année uniquement) :</p>
     <pre xml:space="preserve" class="- topic/pre ">
     MM/DD/YYYY HH:MM:SS TZD
     HH:MM:SS TZD Day Mon/DD/YYYY 
     Mon DD YYYY HH:MM:SS TZD
     Day Mon DD HH:MM:SS TZD YYYY
     Day DD Mon HH:MM:SS TZD YYYY
     Mon/DD/YYYY HH:MM:SS TZD
     YYYY/MM/DD HH:MM:SS TZD
     </pre>
     
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une chaîne qui représente une date en valeur numérique correspondant au nombre de millisecondes écoulées depuis le premier janvier 1970 (UTC).
	 
     </apiDesc><example conref="examples\Date.parse.1.as" class="- topic/example "> L’exemple suivant affecte une chaîne de date à <codeph class="+ topic/ph pr-d/codeph ">dateParsed</codeph> pour le 30 novembre 1974. La méthode <codeph class="+ topic/ph pr-d/codeph ">Date.parse()</codeph> est ensuite appelée, ce qui convertit la date en millisecondes depuis le premier janvier 1970.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var dateParsed:String = "Sat Nov 30 1974";

var milliseconds:Number = Date.parse(dateParsed);
trace(milliseconds); // 155030400000
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">Date.toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setDate</apiName><shortdesc class="- topic/shortdesc ">
	 Définit le jour du mois, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setdate, setdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 31.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit le jour du mois, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.setDate.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> est ensuite appelée afin d’extraire le jour du mois. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setDate()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">day</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">20</codeph>, puis la méthode <codeph class="+ topic/ph pr-d/codeph ">getDate()</codeph> est appelée de nouveau, ce qui extrait le jour du mois qui vient d’être défini.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);            // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getDate()); // 30

someBirthday.setDate(20);
trace(someBirthday.getDate()); // 20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Définit l’année, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setfullyear, setfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à quatre chiffres spécifiant une année. Les nombres à deux chiffres ne représentent pas les années à quatre chiffres ; par exemple, 99 ne correspond pas à l’année 1999, mais à l’année 99.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (janvier) et 11 (décembre). 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre compris entre 1 et 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit l’année, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. Si les paramètres <codeph class="+ topic/ph pr-d/codeph ">month</codeph> et <codeph class="+ topic/ph pr-d/codeph ">date</codeph> sont spécifiés, ils sont définis sur l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 <p class="- topic/p ">
	 L’appel de cette méthode ne modifie pas les autres champs de l’objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, mais <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> peuvent signaler une nouvelle valeur si le jour de la semaine change suite à l’appel de cette méthode.
	 </p>
	 
	 </apiDesc><example conref="examples\Date.setFullYear.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> est ensuite appelée, afin d’extraire l’année au format à quatre chiffres. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setFullYear()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">year</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">2000</codeph>, puis la méthode <codeph class="+ topic/ph pr-d/codeph ">getFullYear()</codeph> est appelée de nouveau, ce qui extrait l’année qui vient d’être définie.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday);           // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getFullYear()); // 1974

someBirthday.setFullYear(2000);
trace(someBirthday.getFullYear()); // 2000
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setHours</apiName><shortdesc class="- topic/shortdesc ">
	 Définit l’heure, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.sethours, sethours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (minuit) et 23 (23h00).
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit l’heure, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.setHours.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). Les méthodes <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> sont ensuite appelées, ce qui extrait les heures et les minutes. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setHours()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">12</codeph>, puis les méthodes <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> sont appelées de nouveau, ce qui extrait les heures et les minutes qui viennent d’être définies.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 15:20

someBirthday.setHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Définit les millisecondes, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setmilliseconds, setmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit les millisecondes, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.setMilliseconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> est ensuite appelée, ce qui extrait les millisecondes de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>. Ensuite, un autre nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">before</codeph>, accompagné d’un appel supplémentaire à <codeph class="+ topic/ph pr-d/codeph ">setMilliseconds()</codeph> avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">4</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMilliseconds()</codeph> est ensuite appelée de nouveau, ce qui extrait les millisecondes qui viennent d’être définies.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMilliseconds());

var before:Date = new Date(now.setMilliseconds(4));
trace(before);
trace(before.getMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Définit les minutes, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setminutes, setminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit les minutes, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.setMinutes.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> est ensuite appelée, ce qui extrait les minutes de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>. Ensuite, un autre nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">before</codeph>, accompagné d’un appel supplémentaire à <codeph class="+ topic/ph pr-d/codeph ">setMinutes()</codeph> avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph> est ensuite appelée de nouveau, ce qui extrait les minutes qui viennent d’être définies.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getMinutes());

var before:Date = new Date(now.setMinutes(0));
trace(before);
trace(before.getMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Définit le mois et éventuellement le jour du mois, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setmonth, setmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (janvier) et 11 (décembre).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit le mois et éventuellement le jour du mois, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.setMonth.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array, <codeph class="+ topic/ph pr-d/codeph ">monthLabels</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">January</codeph> à <codeph class="+ topic/ph pr-d/codeph ">December</codeph> et un nouvel objet Month, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> est ensuite appelée, ce qui extrait le mois pendant lequel <codeph class="+ topic/ph pr-d/codeph ">now</codeph> a été créé. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setMonth()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">month</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, puis la méthode <codeph class="+ topic/ph pr-d/codeph ">getMonth()</codeph> est appelée de nouveau, ce qui extrait le mois qui vient d’être défini..
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var monthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getMonth());
trace(monthLabels[now.getMonth()]);

now.setMonth(0);
trace(now.getMonth());             // 0
trace(monthLabels[now.getMonth()]); // January
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Définit les secondes, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setseconds, setseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit les secondes, conformément à l’heure locale, et renvoie la nouvelle heure en millisecondes. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc><example conref="examples\Date.setSeconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getseconds()</codeph> est ensuite appelée, ce qui extrait les secondes de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setSeconds()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">second</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, puis la méthode <codeph class="+ topic/ph pr-d/codeph ">getSeconds()</codeph> est appelée de nouveau, ce qui extrait le mois qui vient d’être défini.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getSeconds());

now.setSeconds(0);
trace(now.getSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setTime" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setTime</apiName><shortdesc class="- topic/shortdesc ">
	 Définit la date en millisecondes écoulées depuis le premier janvier 1970 à minuit et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.settime, settime, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier, 0 représentant minuit le premier janvier en heure universelle (UTC).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit la date en millisecondes écoulées depuis le premier janvier 1970 à minuit et renvoie la nouvelle heure en millisecondes. 
	 
	 </apiDesc><example conref="examples\Date.setTime.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">setTime()</codeph> est ensuite appelée, avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">-1292601600000</codeph>, ce qui renvoie <codeph class="+ topic/ph pr-d/codeph ">Tue Jan 15 00:00:00 GMT-0800 1929</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);

now.setTime(-1292601600000);
trace(now); // Tue Jan 15 00:00:00 GMT-0800 1929
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCDate" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCDate</apiName><shortdesc class="- topic/shortdesc ">
	 Définit le jour du mois, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcdate, setutcdate, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ; entier compris entre 1 et 31.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit le jour du mois, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes. L’appel de cette méthode ne modifie pas les autres champs de l’objet <codeph class="+ topic/ph pr-d/codeph ">Date </codeph>, mais les méthodes <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> peuvent signaler une nouvelle valeur si le jour de la semaine change suite à l’appel de cette méthode.
	 
	 </apiDesc><example conref="examples\Date.setUTCDate.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCDate()</codeph> est appelée et renvoie correctement le jour du mois. Ensuite, <codeph class="+ topic/ph pr-d/codeph ">setUTCDate()</codeph> est appelé avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">day</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">1</codeph> et une instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> confirme que la date a été correctement définie.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCDate()); // 30

someBirthday.setUTCDate(1);
trace(someBirthday); // Fri Nov 1 01:20:00 GMT-0800 1974
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCFullYear" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCFullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Définit l’année, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcfullyear, setutcfullyear, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">year</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier représentant l’année spécifiée en tant qu’année entière à quatre chiffres, telle que 2000.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (janvier) et 11 (décembre). 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit l’année, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes. 
	 <p class="- topic/p ">
	 Vous pouvez éventuellement utiliser cette méthode pour définir également le mois et le jour du mois. L’appel de cette méthode ne modifie pas les autres champs, mais les méthodes <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> peuvent signaler une nouvelle valeur si le jour de la semaine change suite à l’appel de cette méthode. 
	 </p>
	 
 	 </apiDesc><example conref="examples\Date.setUTCFullYear.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCFullYear()</codeph> est ensuite appelée et renvoie correctement l’année au format à quatre chiffres. Ensuite, <codeph class="+ topic/ph pr-d/codeph ">setUTCFullYear()</codeph> est appelé avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">year</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">1975</codeph> et une instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> confirme que l’année a été correctement définie.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 1, 20);
trace(someBirthday); // Sat Nov 30 01:20:00 GMT-0800 1974
trace(someBirthday.getUTCFullYear()); // 1974

someBirthday.setUTCFullYear(1975);
trace(someBirthday); // Thu Nov 30 01:20:00 GMT-0800 1975
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCHours" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCHours</apiName><shortdesc class="- topic/shortdesc ">
	 Définit l’heure, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutchours, setutchours, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">hour</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (minuit) et 23 (23h00).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit l’heure, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes. Permet éventuellement de spécifier les minutes, les secondes et les millisecondes.
	 
	 </apiDesc><example conref="examples\Date.setUTCHours.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date <codeph class="+ topic/ph pr-d/codeph ">someBirthday</codeph> avec les paramètres <codeph class="+ topic/ph pr-d/codeph ">year</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1974</codeph>), <codeph class="+ topic/ph pr-d/codeph ">month</codeph> (<codeph class="+ topic/ph pr-d/codeph ">10</codeph> = November), <codeph class="+ topic/ph pr-d/codeph ">day</codeph> (<codeph class="+ topic/ph pr-d/codeph ">30</codeph>), <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> (<codeph class="+ topic/ph pr-d/codeph ">1</codeph>) et <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> (<codeph class="+ topic/ph pr-d/codeph ">20</codeph>). Les méthodes <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getUTCHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> sont ensuite appelées, ce qui extrait les heures et les minutes. Ensuite, <codeph class="+ topic/ph pr-d/codeph ">setUTCHours()</codeph> est appelé avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">hour</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">12</codeph>. Enfin, les méthodes <codeph class="+ topic/ph pr-d/codeph ">getHours()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getMinutes()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">getUTCHours()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> sont rappelées et affichent l’heure mise à jour.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var someBirthday:Date = new Date(1974, 10, 30, 15, 20);

trace(someBirthday); // Sat Nov 30 15:20:00 GMT-0800 1974
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 15:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 23:20

someBirthday.setUTCHours(12);
trace(someBirthday.getHours() + ":" + someBirthday.getMinutes());     // 4:20
trace(someBirthday.getUTCHours() + ":" + someBirthday.getUTCMinutes()); // 12:20
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMilliseconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMilliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Définit les millisecondes, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcmilliseconds, setutcmilliseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit les millisecondes, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.
	 
	 </apiDesc><example conref="examples\Date.setUTCMilliseconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> est ensuite appelée, ce qui extrait les millisecondes UTC de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>. Ensuite, un autre nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">before</codeph>, accompagné d’un appel supplémentaire à <codeph class="+ topic/ph pr-d/codeph ">setUTCMilliseconds()</codeph> avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">millisecond</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">4</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMilliseconds()</codeph> est ensuite appelée de nouveau, ce qui extrait les millisecondes qui viennent d’être définies.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now);
trace(now.getUTCMilliseconds());

var before:Date = new Date(now.setUTCMilliseconds(4));
trace(before);
trace(before.getUTCMilliseconds());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMinutes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMinutes</apiName><shortdesc class="- topic/shortdesc ">
	 Définit les minutes, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcminutes, setutcminutes, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">minute</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59. 
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit les minutes, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes. Vous pouvez éventuellement spécifier les secondes et les millisecondes.
	 
	 </apiDesc><example conref="examples\Date.setUTCMinutes.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> est ensuite appelée, ce qui extrait les minutes UTC de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>. Ensuite, un autre nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">before</codeph>, accompagné d’un appel supplémentaire à <codeph class="+ topic/ph pr-d/codeph ">setUTCMinutes()</codeph> avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">minute</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMinutes()</codeph> est ensuite appelée de nouveau, ce qui extrait les minutes qui viennent d’être définies.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.getUTCMinutes());

var before:Date = new Date(now.setUTCMinutes(0));
trace(before);
trace(before.getUTCMinutes());
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:setUTCMonth" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCMonth</apiName><shortdesc class="- topic/shortdesc ">
	 Définit le mois, et éventuellement le jour, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcmonth, setutcmonth, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">month</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 (janvier) et 11 (décembre).
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">day</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 31. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit le mois, et éventuellement le jour, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes. L’appel de cette méthode ne modifie pas les autres champs, mais les méthodes <codeph class="+ topic/ph pr-d/codeph ">Date.getUTCDay()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Date.getDay()</codeph> peuvent signaler une nouvelle valeur si le jour de la semaine change suite à l’appel de cette méthode.
	 
	 </apiDesc><example conref="examples\Date.setUTCMonth.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Array, <codeph class="+ topic/ph pr-d/codeph ">UTCMonthLabels</codeph>, avec les éléments <codeph class="+ topic/ph pr-d/codeph ">January</codeph> à <codeph class="+ topic/ph pr-d/codeph ">December</codeph> et un nouvel objet UTCMonth, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> est ensuite appelée, ce qui extrait le mois UTC pendant lequel <codeph class="+ topic/ph pr-d/codeph ">now</codeph> a été créé. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setUTCMonth()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">month</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, puis la méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCMonth()</codeph> est appelée de nouveau, ce qui extrait le mois qui vient d’être défini..
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var UTCMonthLabels:Array = new Array("January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December");

var now:Date = new Date();
trace(now.getUTCMonth());
trace(UTCMonthLabels[now.getUTCMonth()]);

now.setUTCUTCMonth(0);
trace(now.getUTCMonth());              // 0
trace(UTCMonthLabels[now.getUTCMonth()]); // January
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:setUTCSeconds" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setUTCSeconds</apiName><shortdesc class="- topic/shortdesc ">
	 Définit les secondes, et éventuellement les millisecondes, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.setutcseconds, setutcseconds, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle heure, en millisecondes.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">second</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 59.
	 
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">millisecond</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 999. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Définit les secondes, et éventuellement les millisecondes, conformément à l’heure universelle (UTC), et renvoie la nouvelle heure en millisecondes.
	 
	 </apiDesc><example conref="examples\Date.setUTCSeconds.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètres. La méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> est ensuite appelée, ce qui extrait les secondes de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>. Ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">setUTCSeconds()</codeph> est appelée avec le paramètre <codeph class="+ topic/ph pr-d/codeph ">second</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, puis la méthode <codeph class="+ topic/ph pr-d/codeph ">getUTCSeconds()</codeph> est appelée de nouveau, ce qui extrait le mois qui vient d’être défini.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now.getUTCSeconds());

now.setUTCSeconds(0);
trace(now.getUTCSeconds()); // 0
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toDateString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toDateString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne du jour et de la date uniquement et n’inclut ni l’heure, ni le fuseau horaire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne du jour et de la date uniquement.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne du jour et de la date uniquement et n’inclut ni l’heure, ni le fuseau horaire. Comparez-la aux méthodes suivantes :
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, qui renvoie l’heure et le fuseau horaire uniquement,</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>, qui renvoie non seulement le jour et la date, mais aussi l’heure et le fuseau horaire.</li></ul>
	 
	 </apiDesc><example conref="examples\Date.toDateString.1.as" class="- topic/example "> L’exemple suivant crée un objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètre. Ensuite les méthodes suivantes sont appelées au sein d’une instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">toString</codeph> : affiche tous les paramètres de <codeph class="+ topic/ph pr-d/codeph ">now</codeph> en fonction de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">toDateString()</codeph> : affiche les paramètres <codeph class="+ topic/ph pr-d/codeph ">day</codeph>, <codeph class="+ topic/ph pr-d/codeph ">month</codeph> et <codeph class="+ topic/ph pr-d/codeph ">year</codeph> correspondant à l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.</li></ul>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var now:Date = new Date();
trace(now);
trace(now.toDateString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleDateString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleDateString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne du jour et de la date uniquement et n’inclut ni l’heure, ni le fuseau horaire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation <codeph class="+ topic/ph pr-d/codeph ">String</codeph> du jour et de la date uniquement.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne du jour et de la date uniquement et n’inclut ni l’heure, ni le fuseau horaire. Cette méthode renvoie la même valeur que <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString</codeph>. Comparez-la aux méthodes suivantes :
	 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, qui renvoie l’heure et le fuseau horaire uniquement,</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>, qui renvoie non seulement le jour et la date, mais aussi l’heure et le fuseau horaire.</li></ul>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toDateString()" class="- topic/link "><linktext class="- topic/linktext ">toDateString()</linktext></link><link href="#Date/toTimeString()" class="- topic/link "><linktext class="- topic/linktext ">toTimeString()</linktext></link><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne du jour, de la date et de l’heure en heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> dans le fuseau horaire local.
	 
	  
	  </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne du jour, de la date et de l’heure en heure locale. Comparez cette méthode à la méthode <codeph class="+ topic/ph pr-d/codeph ">Date.toString()</codeph>, qui renvoie les mêmes informations (plus le fuseau horaire) et insère l’année en fin de chaîne.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toLocaleTimeString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleTimeString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne de l’heure uniquement et n’inclut ni le jour, ni la date, ni l’année, ni le fuseau horaire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’heure et du fuseau horaire uniquement.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne de l’heure uniquement et n’inclut ni le jour, ni la date, ni l’année, ni le fuseau horaire. Comparez cette méthode à la méthode <codeph class="+ topic/ph pr-d/codeph ">Date.toTimeString()</codeph>, qui renvoie l’heure et le fuseau horaire.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toTimeString()" class="- topic/link "><linktext class="- topic/linktext ">toTimeString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne du jour, de la date, de l’heure et du fuseau horaire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.tostring, tostring, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne du jour, de la date, de l’heure et du fuseau horaire. Le format de date utilisé pour la sortie est le suivant : 
     <pre xml:space="preserve" class="- topic/pre ">
     Day Mon Date HH:MM:SS TZD YYYY
     </pre>
     <p class="- topic/p ">Par exemple :</p>
     <pre xml:space="preserve" class="- topic/pre ">
     Wed Apr 12 15:30:17 GMT-0700 2006
     </pre>
	 
	 </apiDesc><example conref="examples\Date.toString.1.as" class="- topic/example "> L’exemple suivant crée un objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph>, sans paramètre. Ensuite, <codeph class="+ topic/ph pr-d/codeph ">toString</codeph> est appelé au sein d’une instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>, qui affiche tous les paramètres de <codeph class="+ topic/ph pr-d/codeph ">now</codeph> en fonction de l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Date:AS3:toTimeString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toTimeString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne de l’heure et du fuseau horaire uniquement et n’inclut ni le jour, ni la date.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage name="ActionScript" version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’heure et du fuseau horaire uniquement.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne de l’heure et du fuseau horaire uniquement et n’inclut ni le jour, ni la date. Comparez cette méthode à la méthode <codeph class="+ topic/ph pr-d/codeph ">Date.toDateString()</codeph>, qui ne renvoie que le jour et la date.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toDateString()" class="- topic/link "><linktext class="- topic/linktext ">toDateString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:toUTCString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toUTCString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une représentation sous forme de chaîne du jour, de la date et de l’heure en heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> en heure UTC.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une représentation sous forme de chaîne du jour, de la date et de l’heure en heure universelle (UTC). Par exemple, la date du premier février 2005 est renvoyée sous la forme <codeph class="+ topic/ph pr-d/codeph ">Tue Feb 1 00:00:00 2005 UTC</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Date/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="Date:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie le nombre de millisecondes écoulées depuis le premier janvier 1970 à minuit, heure universelle, pour un objet Date.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">date.valueof, valueof, date
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre de millisecondes écoulées depuis le premier janvier 1970 représenté par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie le nombre de millisecondes écoulées depuis le premier janvier 1970 à minuit, heure universelle, pour un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc><example conref="examples\Date.valueOf.1.as" class="- topic/example "> L’exemple suivant crée un objet Date, <codeph class="+ topic/ph pr-d/codeph ">now</codeph> sans paramètre. Ensuite, la méthode <codeph class="+ topic/ph pr-d/codeph ">getTime()</codeph> est appelée, ce qui extrait le nombre de millisecondes séparant l’heure de création de <codeph class="+ topic/ph pr-d/codeph ">now</codeph> et minuit le premier janvier 1970. Enfin, la méthode <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> est appelée, ce qui extrait la même chose.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">


var now:Date = new Date();
trace(now.getTime());
trace(now.valueOf());
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="Date:AS3:dateUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dateUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Jour du mois (entier compris entre 1 et 31) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Jour du mois (entier compris entre 1 et 31) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDate()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDate()</linktext></link><link href="#Date/setUTCDate()" class="- topic/link "><linktext class="- topic/linktext ">setUTCDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:date:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">date</apiName><shortdesc class="- topic/shortdesc ">
	 Jour du mois (entier compris entre 1 et 31) spécifié par un objet Date conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Jour du mois (entier compris entre 1 et 31) spécifié par un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getDate()" class="- topic/link "><linktext class="- topic/linktext ">getDate()</linktext></link><link href="#Date/setDate()" class="- topic/link "><linktext class="- topic/linktext ">setDate()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:dayUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">dayUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) de l’objet Date conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) de l’objet <codeph class="+ topic/ph pr-d/codeph ">Date </codeph> conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCDay()" class="- topic/link "><linktext class="- topic/linktext ">getUTCDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:day:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">day</apiName><shortdesc class="- topic/shortdesc ">
	 Jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) spécifié par l’objet Date conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Jour de la semaine (0 pour dimanche, 1 pour lundi, etc.) spécifié par l’objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getDay()" class="- topic/link "><linktext class="- topic/linktext ">getDay()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYearUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullYearUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Année à quatre chiffres d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Année à quatre chiffres d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getUTCFullYear()</linktext></link><link href="#Date/setUTCFullYear()" class="- topic/link "><linktext class="- topic/linktext ">setUTCFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:fullYear:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fullYear</apiName><shortdesc class="- topic/shortdesc ">
	 Année entière (un nombre à quatre chiffres, tel que 2000) d’un objet Date conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Année entière (un nombre à quatre chiffres, tel que 2000) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph> conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getFullYear()" class="- topic/link "><linktext class="- topic/linktext ">getFullYear()</linktext></link><link href="#Date/setFullYear()" class="- topic/link "><linktext class="- topic/linktext ">setFullYear()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hoursUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hoursUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Heure (entier compris entre 0 et 23) du jour d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Heure (entier compris entre 0 et 23) du jour d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCHours()" class="- topic/link "><linktext class="- topic/linktext ">getUTCHours()</linktext></link><link href="#Date/setUTCHours()" class="- topic/link "><linktext class="- topic/linktext ">setUTCHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:hours:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">hours</apiName><shortdesc class="- topic/shortdesc ">
	 Heure (entier compris entre 0 et 23) de la partie jour d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Heure (entier compris entre 0 et 23) de la partie jour d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés. 
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getHours()" class="- topic/link "><linktext class="- topic/linktext ">getHours()</linktext></link><link href="#Date/setHours()" class="- topic/link "><linktext class="- topic/linktext ">setHours()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:millisecondsUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">millisecondsUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Partie millisecondes (entier compris entre 0 et 999) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie millisecondes (entier compris entre 0 et 999) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMilliseconds()</linktext></link><link href="#Date/setUTCMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:milliseconds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">milliseconds</apiName><shortdesc class="- topic/shortdesc ">
	 Partie millisecondes (entier compris entre 0 et 999) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie millisecondes (entier compris entre 0 et 999) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">getMilliseconds()</linktext></link><link href="#Date/setMilliseconds()" class="- topic/link "><linktext class="- topic/linktext ">setMilliseconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutesUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">minutesUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Partie minutes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie minutes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMinutes()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMinutes()</linktext></link><link href="#Date/setUTCMinutes()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:minutes:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">minutes</apiName><shortdesc class="- topic/shortdesc ">
	 Partie minutes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie minutes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMinutes()" class="- topic/link "><linktext class="- topic/linktext ">getMinutes()</linktext></link><link href="#Date/setMinutes()" class="- topic/link "><linktext class="- topic/linktext ">setMinutes()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:monthUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">monthUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Le mois (0 [janvier] à 11 [décembre]) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie mois (0 [janvier] à 11 [décembre]) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCMonth()" class="- topic/link "><linktext class="- topic/linktext ">getUTCMonth()</linktext></link><link href="#Date/setUTCMonth()" class="- topic/link "><linktext class="- topic/linktext ">setUTCMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:month:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">month</apiName><shortdesc class="- topic/shortdesc ">
	 Partie mois (0 pour janvier, 1 pour février, etc.) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie mois (0 pour janvier, 1 pour février, etc.) d’un objet <codeph class="+ topic/ph pr-d/codeph "> Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getMonth()" class="- topic/link "><linktext class="- topic/linktext ">getMonth()</linktext></link><link href="#Date/setMonth()" class="- topic/link "><linktext class="- topic/linktext ">setMonth()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:secondsUTC:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">secondsUTC</apiName><shortdesc class="- topic/shortdesc ">
	 Partie secondes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure universelle (UTC).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie secondes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure universelle (UTC).
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getUTCSeconds()" class="- topic/link "><linktext class="- topic/linktext ">getUTCSeconds()</linktext></link><link href="#Date/setUTCSeconds()" class="- topic/link "><linktext class="- topic/linktext ">setUTCSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:seconds:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">seconds</apiName><shortdesc class="- topic/shortdesc ">
	 Partie secondes (entier compris entre 0 et 59) d’un objet Date, conformément à l’heure locale.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Partie secondes (entier compris entre 0 et 59) d’un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>, conformément à l’heure locale. L’heure locale est déterminée par le système d’exploitation sur lequel les moteurs d’exécution de Flash sont exécutés.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getSeconds()" class="- topic/link "><linktext class="- topic/linktext ">getSeconds()</linktext></link><link href="#Date/setSeconds()" class="- topic/link "><linktext class="- topic/linktext ">setSeconds()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:time:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">time</apiName><shortdesc class="- topic/shortdesc ">
	 Nombre de millisecondes écoulées depuis le premier janvier 1970 à minuit, heure universelle, pour un objet Date.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Nombre de millisecondes écoulées depuis le premier janvier 1970 à minuit, heure universelle, pour un objet <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>. Cette méthode permet de représenter un instant spécifique dans le temps lorsque vous comparez au moins deux objets <codeph class="+ topic/ph pr-d/codeph ">Date</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getTime()" class="- topic/link "><linktext class="- topic/linktext ">getTime()</linktext></link><link href="#Date/setTime()" class="- topic/link "><linktext class="- topic/linktext ">setTime()</linktext></link></related-links></apiValue><apiValue id="Date:AS3:timezoneOffset:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">timezoneOffset</apiName><shortdesc class="- topic/shortdesc ">
     Différence, en minutes, entre le temps universel (UTC) et l’heure locale de l’ordinateur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Différence, en minutes, entre le temps universel (UTC) et l’heure locale de l’ordinateur. De façon plus précise, cette valeur correspond au nombre de minutes que vous devez ajouter à l’heure locale de l’ordinateur pour obtenir l’heure UTC. Si votre ordinateur est en avance sur l’heure UTC, la valeur renvoyée est négative.
     </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Date/getTimezoneOffset()" class="- topic/link "><linktext class="- topic/linktext ">getTimezoneOffset()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
 La classe Object forme la racine de la hiérarchie de classes d’exécution ActionScript.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Object forme la racine de la hiérarchie de classes <ph class="- topic/ph ">ActionScript</ph>. Les objets sont créés à l’aide de constructeurs en appliquant la syntaxe de l’opérateur <codeph class="+ topic/ph pr-d/codeph ">new</codeph> et vous pouvez leur affecter des propriétés de façon dynamique. <ph class="- topic/ph ">Vous pouvez également créer des objets en affectant un littéral d’objet, comme suit :</ph>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var obj:Object = {a:"foo", b:"bar"}</codeblock>
 
 <p class="- topic/p ">Toutes les classes qui ne déclarent pas de classe de base explicite étendent la classe Object intégrée.</p>
 
 
 
 <p class="- topic/p ">Vous pouvez utiliser la classe Object pour créer des <i class="+ topic/ph hi-d/i ">associative arrays</i>. Sous sa forme de base, un tableau associatif est une occurrence de la classe Object et chaque paire clé/valeur est représentée par une propriété et sa valeur. Vous pouvez également déclarer un tableau associatif à l’aide du type de données Object pour la raison suivante : cela vous permet d’utiliser ensuite un littéral d’objet pour alimenter votre tableau associatif (uniquement au moment de la déclaration). L’exemple suivant crée un tableau associatif à l’aide d’un littéral d’objet, accède aux éléments à l’aide de l’opérateur point et d’accès au tableau, puis ajoute une nouvelle paire clé/valeur en créant une nouvelle propriété :</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myAssocArray:Object = {fname:"John", lname:"Public"};
 trace(myAssocArray.fname);     // John
 trace(myAssocArray["lname"]);  // Public
 myAssocArray.initial = "Q";
 trace(myAssocArray.initial);   // Q</codeblock> 
 
 <p class="- topic/p ">ActionScript 3.0 dispose de deux types d’héritage : par classe et par prototype :</p>
 <ul class="- topic/ul "><li class="- topic/li ">L’héritage de classe est le principal mécanisme d’héritage et prend en charge l’héritage des propriétés fixes. Une propriété fixe est une variable, une constante ou une méthode déclarée dans le cadre d’une définition de classe. Chaque définition de classe est à présent représentée par un objet de classe spécial qui mémorise les informations relatives à la classe. </li><li class="- topic/li ">Héritage par prototype : il s’agissait de l’unique mécanisme d’héritage des versions précédentes d’ActionScript et constitue l’une des deux solutions d’héritage d’ActionScript 3.0. Chaque classe est associée à un objet prototype et les propriétés de l’objet prototype sont partagées par tous les héritages de la classe. Lorsqu’une classe est générée, elle contient une référence à l’objet prototype correspondant, qui sert de lien entre l’occurrence et l’objet prototype de classe associé. Lors de l’exécution, si une propriété ne figure pas dans une occurrence de classe, elle est recherchée dans le délégué, à savoir l’objet prototype de la classe. Si l’objet prototype ne contient pas la propriété, le processus se poursuit et le délégué de l’objet prototype effectue des recherches dans des niveaux de plus en plus élevés de la hiérarchie jusqu’à ce que le moteur d’exécution de Flash trouve la propriété. </li></ul>
 
 <p class="- topic/p ">L’héritage de classe et l’héritage de prototype peuvent coexister, comme illustré dans l’exemple suivant :</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 class A {
     var x = 1
     prototype.px = 2
 }
 dynamic class B extends A {
     var y = 3
     prototype.py = 4
 }
  
 var b = new B()
 b.x // 1 via class inheritance
 b.px // 2 via prototype inheritance from A.prototype
 b.y // 3
 b.py // 4 via prototype inheritance from B.prototype
  
 B.prototype.px = 5
 b.px // now 5 because B.prototype hides A.prototype
  
 b.px = 6
 b.px // now 6 because b hides B.prototype</codeblock>
 
 <p class="- topic/p ">Si vous utilisez des fonctions au lieu de classes, vous pouvez générer des arborescences d’héritage de prototype personnalisées. Avec les classes, l’arborescence d’héritage de prototype reflète à l’identique l’arborescence d’héritage de classe. Cependant, les objets prototype étant dynamiques, vous pouvez ajouter et supprimer des propriétés associées aux prototypes lors de l’exécution.</p>
 
 </apiDesc><example conref="examples\ObjectExample.as" class="- topic/example "> L’exemple suivant utilise les classes <codeph class="+ topic/ph pr-d/codeph ">ObjectExample</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Circle</codeph> pour démontrer la nature dynamique de la classe Object et la façon dont les objets de valeur peuvent être transformés en objets Shape, puis ajoutés à la scène aux coordonnées x/y spécifiées.
 
 <p class="- topic/p ">L’exemple crée les objets de valeur <codeph class="+ topic/ph pr-d/codeph ">firstInitObj</codeph> et <codeph class="+ topic/ph pr-d/codeph ">secondInitObj</codeph>. La classe personnalisée <codeph class="+ topic/ph pr-d/codeph ">Circle</codeph> accepte l’objet valeur et exécute une boucle sur ce dernier tout en définissant ses propriétés internes correspondantes sur celles qui sont définies dans l’objet de valeur.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ObjectExample extends Sprite {
        public function ObjectExample() {
            var firstInitObj:Object = new Object();
            firstInitObj.bgColor = 0xFF0000;
            firstInitObj.radius = 25;
            firstInitObj.xCenter = 25;
            firstInitObj.yCenter = 25;
                        
            var firstCircle:Circle = new Circle(firstInitObj);
            addChild(firstCircle);
            firstCircle.x = 50;
            firstCircle.y = 50;

            var secondInitObj:Object = {bgColor:0xCCCCCC, radius:50, xCenter:50, yCenter:50};

            var secondCircle:Circle = new Circle(secondInitObj);            
            addChild(secondCircle);
            secondCircle.x = 100;
            secondCircle.y = 100;
        }
        
    }
}

import flash.display.Shape;
    
class Circle extends Shape {
    public var bgColor:Number = 0xFFFFFF;
    public var radius:Number = 0;
    public var xCenter:Number = 0;
    public var yCenter:Number = 0;
        
    public function Circle(initObj:Object) {
        for(var i:String in initObj) {
            this[i] = initObj[i];
        }
        draw();
    }
        
    public function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawCircle(xCenter, yCenter, radius);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">prototype</linktext></link></related-links><apiConstructor id="Object:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet Object et stocke une référence à la méthode constructeur de l’objet dans la propriété constructor de ce dernier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet Object et stocke une référence à la méthode constructeur de l’objet dans la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> de ce dernier.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Object:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
	 Indique si la propriété spécifiée d’un objet est définie.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><category class="- topic/category ">Method
	 </category></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">name</codeph> si l’objet cible comporte la propriété spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriété de l’objet.	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique si la propriété spécifiée d’un objet est définie. Cette méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet cible comporte une propriété qui correspond à la chaîne spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> et <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans les autres cas. Les types de propriétés suivants forcent la méthode à renvoyer la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour les objets qui sont des occurrences de classe, plutôt que des objets de classe :
	 <ul class="- topic/ul "><li class="- topic/li ">Propriétés d’occurrence fixes : variables, constantes ou méthodes définies par la classe de l’objet qui ne sont pas statiques.</li><li class="- topic/li ">Propriétés d’occurrence fixes héritées : variables, constantes ou méthodes héritées par la classe de l’objet.</li><li class="- topic/li ">Propriétés dynamiques : propriétés ajoutées à un objet après son instanciation (hors de la définition de classe). Pour ajouter des propriétés dynamiques, la classe de définition de l’objet doit être déclarée avec le mot-clé <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph>.</li></ul>
	 <p class="- topic/p ">Les types de propriétés suivants forcent la méthode à renvoyer la valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour les objets qui sont des occurrences de classe :</p>
	 <ul class="- topic/ul "><li class="- topic/li ">Propriétés statiques : variables, constantes ou méthodes définies avec le mot-clé statique dans la classe de définition d’un objet ou dans l’une de ses super-classes.</li><li class="- topic/li ">Propriétés de prototype : propriétés définies pour un objet prototype appartenant à la chaîne de prototype de l’objet. Dans ActionScript 3.0, la chaîne de prototype n’est pas utilisée pour l’héritage de classe, mais demeure une autre forme d’héritage valide. Par exemple, une occurrence de la classe Array peut accéder à la méthode <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> parce qu’elle est associée à <codeph class="+ topic/ph pr-d/codeph ">Object.prototype</codeph>, qui fait partie de la chaîne de prototype de la classe Array. Bien que vous puissiez utiliser <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> sur une occurrence d’Array, la valeur renvoyée par <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty("valueOf")</codeph> pour cette occurrence correspond à <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</li></ul>
	 
	 <p class="- topic/p ">ActionScript 3.0 gère également les objets de classe, qui sont des représentations directes des définitions de classe. Si vous l’appelez sur un objet de classe, la méthode <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> ne renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> que si une propriété fait partie des propriétés statiques associées à l’objet de classe. Par exemple, si vous créez une sous-classe d’Array appelée CustomArray et que vous définissez une propriété statique dans CustomArray appelée <codeph class="+ topic/ph pr-d/codeph ">foo</codeph>, tout appel de <codeph class="+ topic/ph pr-d/codeph ">CustomArray.hasOwnProperty("foo")</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Cependant, pour la propriété statique <codeph class="+ topic/ph pr-d/codeph ">DESCENDING</codeph> définie dans la classe Array, un appel de <codeph class="+ topic/ph pr-d/codeph ">CustomArray.hasOwnProperty("DESCENDING")</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les méthodes de la classe Object sont créées dynamiquement sur le prototype correspondant. Pour redéfinir cette méthode dans une sous-classe d’Object, n’utilisez pas le mot-clé <codeph class="+ topic/ph pr-d/codeph ">override</codeph>. Une sous-classe d’Object implémente par exemple <codeph class="+ topic/ph pr-d/codeph ">function hasOwnProperty():Boolean</codeph> au lieu d’utiliser un remplacement de la classe de base.</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:isPrototypeOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isPrototypeOf</apiName><shortdesc class="- topic/shortdesc ">
	 Indique si une occurrence de la classe Object figure dans la chaîne de prototype de l’objet spécifié en tant que paramètre.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet figure dans la chaîne de prototype de l’objet spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph>, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">theClass</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Classe à laquelle risque de se référer l’objet spécifié.  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique si une occurrence de la classe Object figure dans la chaîne de prototype de l’objet spécifié en tant que paramètre. Cette méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet figure dans le chaînage de prototype de l’objet spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph>. La méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph> si l’objet cible est absent de la chaîne de prototype de l’objet <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> et si le paramètre <codeph class="+ topic/ph pr-d/codeph ">theClass</codeph> n’est pas un objet.
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les méthodes de la classe Object sont créées dynamiquement sur le prototype correspondant. Pour redéfinir cette méthode dans une sous-classe d’Object, n’utilisez pas le mot-clé <codeph class="+ topic/ph pr-d/codeph ">override</codeph>. Une sous-classe d’Object implémente par exemple <codeph class="+ topic/ph pr-d/codeph ">function isPrototypeOf():Boolean</codeph> au lieu d’utiliser un remplacement de la classe de base.</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
	 Indique si la propriété spécifiée existe et est énumérable.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a generic object, adds a property to the object, then checks whether the object is enumerable. By way of contrast, the example also shows that a built-in property, the <code>Array.length</code> property, is not enumerable.
	 <listing>
	 var myObj:Object = new Object();
	 myObj.prop1 = "hello";
	 trace(myObj.propertyIsEnumerable("prop1")); // true
	 
	 var myArray = new Array();
	 trace(myArray.propertyIsEnumerable("length")); // false
	 </listing> 
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la propriété spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est énumérable, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriété de l’objet.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Indique si la propriété spécifiée existe et est énumérable. Si la valeur est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, la propriété existe et peut être énumérée dans une boucle <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph>. La propriété doit exister au niveau de l’objet cible dans la mesure où cette méthode ne vérifie pas la chaîne de prototype de l’objet cible.
	 
	 <p class="- topic/p ">Les propriétés que vous créez sont énumérables, contrairement aux propriétés intégrées qui ne le sont généralement pas.</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les méthodes de la classe Object sont créées dynamiquement sur le prototype correspondant. Pour redéfinir cette méthode dans une sous-classe d’Object, n’utilisez pas le mot-clé <codeph class="+ topic/ph pr-d/codeph ">override</codeph>. Une sous-classe d’Object implémente par exemple <codeph class="+ topic/ph pr-d/codeph ">function propertyIsEnumerable():Boolean</codeph> au lieu d’utiliser un remplacement de la classe de base.</p>
     
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:setPropertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setPropertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
     Définit la disponibilité d’une propriété dynamique pour les opérations en boucle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriété de l’objet.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">isEnum</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">true</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Si défini sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, la propriété dynamique est ignorée dans les boucles <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> et la méthode <codeph class="+ topic/ph pr-d/codeph ">propertyIsEnumerable()</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Définit la disponibilité d’une propriété dynamique pour les opérations en boucle. La propriété doit exister au niveau de l’objet cible dans la mesure où cette méthode ne vérifie pas la chaîne de prototype de l’objet cible.
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/propertyIsEnumerable()" class="- topic/link "><linktext class="- topic/linktext ">propertyIsEnumerable()</linktext></link></related-links></apiOperation><apiOperation id="Object:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la représentation de chaîne de cet objet, formatée selon les paramètres régionaux en vigueur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.tolocalestring, tolocalestring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une représentation de cet objet sous forme de chaîne, formatée conformément aux conventions locales.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la représentation de chaîne de cet objet, formatée selon les paramètres régionaux en vigueur.
	 
	 <p class="- topic/p ">Par défaut, l’implémentation de cette méthode n’entraîne pas le formatage selon les paramètres régionaux et renvoie la même chaîne que <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>. Les sous-classes doivent fournir leur propre implémentation en fonction des paramètres régionaux lorsque cela est nécessaire.</p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les méthodes de la classe Object sont créées dynamiquement sur le prototype correspondant. Pour redéfinir cette méthode dans une sous-classe d’Object, n’utilisez pas le mot-clé <codeph class="+ topic/ph pr-d/codeph ">override</codeph>. Par exemple, une sous-classe d’Object implémente la méthode <codeph class="+ topic/ph pr-d/codeph ">function toLocaleString():String</codeph> au lieu d’avoir recours au remplacement de la classe de base.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/toString()" class="- topic/link "><linktext class="- topic/linktext ">Object.toString()</linktext></link></related-links></apiOperation><apiOperation id="Object:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la représentation sous forme de chaîne de l’objet spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’objet.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la représentation sous forme de chaîne de l’objet spécifié.
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les méthodes de la classe Object sont créées dynamiquement sur le prototype correspondant. Pour redéfinir cette méthode dans une sous-classe d’Object, n’utilisez pas le mot-clé <codeph class="+ topic/ph pr-d/codeph ">override</codeph>. Par exemple, une sous-classe d’Object implémente <codeph class="+ topic/ph pr-d/codeph ">function toString():String</codeph> au lieu d’utiliser un remplacement de la classe de base.</p>
     
  	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Object:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la valeur primitive de l’objet spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">object, object.valueof, valueof
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur primitive de l’objet ou l’objet lui-même.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la valeur primitive de l’objet spécifié. Si l’objet n’a pas de valeur primitive, il est lui-même renvoyé.
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> les méthodes de la classe Object sont créées dynamiquement sur le prototype correspondant. Pour redéfinir cette méthode dans une sous-classe d’Object, n’utilisez pas le mot-clé <codeph class="+ topic/ph pr-d/codeph ">override</codeph>. Une sous-classe d’Object implémente par exemple <codeph class="+ topic/ph pr-d/codeph ">function valueOf():Object</codeph> au lieu d’utiliser un remplacement de la classe de base.</p>
     
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Object/toString()" class="- topic/link "><linktext class="- topic/linktext ">Object.toString()</linktext></link></related-links></apiOperation><apiValue id="Object:constructor" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">constructor</apiName><shortdesc class="- topic/shortdesc ">
	 Référence à l’objet de classe ou à la fonction constructeur d’une occurrence donnée d’un objet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Object, Object.constructor, constructor
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Référence à l’objet de classe ou à la fonction constructeur d’une occurrence donnée d’un objet. Si un objet est une occurrence de classe, la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> contient une référence à l’objet de classe. Si un objet est créé par le biais d’une fonction constructeur, la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> contient une référence à la fonction constructeur. Ne confondez pas une fonction constructeur avec une méthode constructeur de classe. Une fonction constructeur est un objet Function permettant de créer des objets et peut être utilisée au lieu du mot-clé <codeph class="+ topic/ph pr-d/codeph ">class</codeph> pour définir des classes.
	 
	 <p class="- topic/p ">Si vous utilisez le mot-clé <codeph class="+ topic/ph pr-d/codeph ">class</codeph> pour définir une classe, la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph>, qui contient une référence à l’objet de classe, est affectée à l’objet prototype correspondant. Une occurrence de la classe hérite de cette propriété à partir de l’objet prototype. Le code suivant crée par exemple une classe, <codeph class="+ topic/ph pr-d/codeph ">A</codeph>, et une occurrence de classe, <codeph class="+ topic/ph pr-d/codeph ">myA</codeph> :</p>
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 dynamic class A {}
	 trace(A.prototype.constructor);      // [class A]
	 trace(A.prototype.constructor == A); // true
	 var myA:A = new A();
	 trace(myA.constructor == A);         // true</codeblock>
	 
	 <p class="- topic/p ">Les utilisateurs chevronnés peuvent opter pour le mot-clé <codeph class="+ topic/ph pr-d/codeph ">function</codeph> au lieu du mot-clé <codeph class="+ topic/ph pr-d/codeph ">class</codeph> pour définir un objet Function, qui pourra servir de modèle de création d’objet. Ce type de fonction porte le nom de fonction constructeur, car vous pouvez l’utiliser en conjonction avec l’opérateur <codeph class="+ topic/ph pr-d/codeph ">new</codeph> pour créer des objets. Si vous utilisez le mot-clé <codeph class="+ topic/ph pr-d/codeph ">function</codeph> pour créer une fonction constructeur, la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph>, qui contient une référence à la fonction constructeur, est affectée à l’objet prototype correspondant. Si vous utilisez ensuite la fonction constructeur pour créer un objet, celui-ci hérite de la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> à partir de l’objet prototype de la fonction constructeur. Le code suivant crée par exemple une fonction constructeur, <codeph class="+ topic/ph pr-d/codeph ">f</codeph>, et un objet, <codeph class="+ topic/ph pr-d/codeph ">myF</codeph> :</p>
	 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 function f() {}
	 trace(f.prototype.constructor);      // function Function() {}
	 trace(f.prototype.constructor == f); // true
	 var myF = new f();
	 trace(myF.constructor == f);         // true</codeblock>
	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque </b>: la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> est accessible en écriture, ce qui signifie que la valeur du code utilisateur peut être modifiée par une instruction d’affectation. Il n’est pas recommandé de modifier la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph>, mais si vous rédigez du code affecté par la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph>, assurez-vous que la valeur n’est pas réinitialisée. La valeur ne peut être modifiée que lors d’un accès à la propriété par le biais de l’objet prototype (<codeph class="+ topic/ph pr-d/codeph ">className.prototype.constructor</codeph>, par exemple).</p>
     <p class="- topic/p ">Si vous accédez à la propriété <codeph class="+ topic/ph pr-d/codeph ">constructor</codeph> et compilez en mode strict, vous obtenez une erreur lors de la compilation, car la propriété constructor dépend de l’objet prototype, ce qui est une entité d’exécution. Si vous utilisez mode standard ou si la description de la classe spécifie « dynamic », le code s’exécute sans générer d’erreur. </p>     
	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#Class" class="- topic/link "><linktext class="- topic/linktext ">Classe</linktext></link><link href="#Function" class="- topic/link "><linktext class="- topic/linktext ">Fonction</linktext></link><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">prototype</linktext></link></related-links></apiValue><apiValue id="Object:prototype" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prototype</apiName><shortdesc class="- topic/shortdesc ">
	 Référence à l’objet prototype d’un objet de classe ou fonction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><maelexample>The following example creates a class named Shape and a subclass of Shape named Circle.
	 <listing version="2.0">
	 // Shape class defined in external file named Shape.as
	 class Shape {
	 	function Shape() {}
	 }
	 
	 // Circle class defined in external file named Circle.as
	 class Circle extends Shape{
	 	function Circle() {}
	 }
	 </listing>
	 The Circle class can be used to create two instances of Circle:
	 <listing version="2.0">
	 var oneCircle:Circle = new Circle();
	 var twoCircle:Circle = new Circle();
	 </listing>
	 The following trace statement shows that the <code>prototype</code> property of the Circle class points to its superclass Shape. The identifier <code>Shape</code> refers to the constructor function of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.constructor == Shape); // true
	 </listing>
	 The following trace statement shows how you can use the <code>prototype</code> property and the <code>__proto__</code> property together to move two levels up the inheritance hierarchy (or prototype chain). The <code>Circle.prototype.__proto__</code> property contains a reference to the superclass of the Shape class.
	 <listing version="2.0">
	 trace(Circle.prototype.__proto__ == Shape.prototype); // true
	 </listing>
	 
	 
	 </maelexample></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Object</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Référence à l’objet prototype d’un objet de classe ou fonction. La propriété <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> est créée automatiquement et est liée à tout objet de classe ou fonction que vous créez. Cette propriété est statique dans la mesure où elle est propre à la classe ou la fonction que vous créez. Par exemple, si vous créez une classe, la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph> est partagée par toutes les occurrences de la classe et est accessible uniquement en tant que propriété de classe. Les occurrences de votre classe ne peuvent pas accéder directement à la propriété <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph>. 
	 
     <p class="- topic/p ">L’objet prototype d’une classe est une occurrence spéciale de cette classe, qui propose un mécanisme de partage d’état parmi toutes les occurrences d’une classe. Lors de l’exécution, si une propriété ne figure pas dans une occurrence de classe, elle est recherchée dans le délégué, à savoir l’objet prototype de la classe. Si l’objet prototype ne contient pas la propriété, le processus se poursuit et le délégué de l’objet prototype effectue des recherches dans des niveaux de plus en plus élevés de la hiérarchie jusqu’à ce que le moteur d’exécution de Flash trouve la propriété. </p>
	 
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> dans ActionScript 3.0, l’héritage de prototype ne constitue pas le principal mécanisme d’héritage. Ce rôle incombe à l’héritage de classe, qui assure l’héritage des propriétés fixes dans les définitions de classe.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:URIError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">URIError</apiName><shortdesc class="- topic/shortdesc ">
 Une exception URIError est renvoyée lorsque l’une des fonctions de gestion URI globales est utilisée d’une manière qui n’est pas compatible avec sa définition.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, URIError
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une exception URIError est renvoyée lorsque l’une des fonctions de gestion URI globales est utilisée d’une manière qui n’est pas compatible avec sa définition. Cette exception est renvoyée si une URI non valide est transmise à une fonction qui attend un URI valide, tel que la méthode <codeph class="+ topic/ph pr-d/codeph ">Socket.connect()</codeph>.
 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="flash.net.xml#Socket/connect()" class="- topic/link "><linktext class="- topic/linktext ">flash.net.Socket.connect()</linktext></link></related-links><apiConstructor id="URIError:URIError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">URIError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet URIError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contient le message associé à l’objet URIError.  
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet URIError.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:SecurityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SecurityError</apiName><shortdesc class="- topic/shortdesc ">
 L’exception SecurityError est renvoyée lorsqu’il se produit certains types de violation de la sécurité.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, SecurityError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 L’exception <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> est renvoyée lorsqu’il se produit certains types de violation de la sécurité.
 <p class="- topic/p ">
 Exemples d’erreurs liées à la sécurité :</p>
 <ul class="- topic/ul "><li class="- topic/li ">Un accès à une propriété ou un appel de méthode non autorisé est effectué en franchissant les limites du sandbox de sécurité.</li><li class="- topic/li ">Il s’est produit une tentative d’accès à une URL non autorisée par le sandbox de sécurité.</li><li class="- topic/li ">Une connexion socket a été tentée vers un numéro de port non autorisé, tel qu’un port supérieur à 65535.</li><li class="- topic/li ">Il s’est produit une tentative d’accès à la caméra ou au microphone de l’utilisateur et celui-ci a refusé la demande d’accès au périphérique.</li></ul>
 
 </apiDesc><example conref="examples\SecurityErrorExample.as" class="- topic/example "> L’exemple suivant indique comment une erreur <codeph class="+ topic/ph pr-d/codeph ">SecurityError</codeph> peut être générée et traitée au sein d’une instruction <codeph class="+ topic/ph pr-d/codeph ">try...catch</codeph> en tentant de se connecter à un numéro de port qui est supérieur d’une unité au maximum autorisé.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    import flash.net.Socket;

    public class SecurityErrorExample extends Sprite {

        public function SecurityErrorExample() {
            try {
                var host:String = "www.[yourDomain].com";
                var socket:Socket = new Socket();
                socket.connect(host, 65536);
            }
            catch(e:SecurityError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="SecurityError:SecurityError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SecurityError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet SecurityError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet SecurityError.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:ReferenceError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">ReferenceError</apiName><shortdesc class="- topic/shortdesc ">
 Une exception ReferenceError est renvoyée lorsque vous tentez d’utiliser une référence à une propriété non définie pour un objet scellé (non dynamique).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, ReferenceError
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une exception ReferenceError est renvoyée lorsque vous tentez d’utiliser une référence à une propriété non définie pour un objet scellé (non dynamique). Les références à des variables non définies entraînent le renvoi d’exceptions ReferenceError pour vous avertir de bogues éventuels et vous aider à dépanner le code de l’application.
 <p class="- topic/p ">Vous pouvez cependant faire référence à des propriétés non définies d’une classe dynamique sans entraîner le renvoi d’une exception ReferenceError. Pour plus d’informations, voir le mot-clé <codeph class="+ topic/ph pr-d/codeph ">dynamic</codeph>.</p>
 
 </apiDesc><example conref="examples\ReferenceErrorExample.as" class="- topic/example "> L’exemple suivant indique comment générer une exception <codeph class="+ topic/ph pr-d/codeph ">ReferenceError</codeph> et la traiter avec une instruction <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class ReferenceErrorExample extends Sprite {

        public function ReferenceErrorExample() {
            try {
                this["someMember"] = true;
            }
            catch(e:ReferenceError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="statements.html#dynamic" class="- topic/link "><linktext class="- topic/linktext ">mot-clé dynamique</linktext></link></related-links><apiConstructor id="ReferenceError:ReferenceError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">ReferenceError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet ReferenceError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contient le message associé à l’objet ReferenceError.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet ReferenceError.
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:RangeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">RangeError</apiName><shortdesc class="- topic/shortdesc ">
 Une exception RangeError est renvoyée si une valeur numérique excède la plage gérée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, RangeError
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une exception RangeError est renvoyée si une valeur numérique excède la plage gérée. Lorsque vous traitez des tableaux, toute référence à une position d’index inexistante d’un élément du tableau renvoie une exception RangeError. L’utilisation des méthodes <codeph class="+ topic/ph pr-d/codeph ">Number.toExponential()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Number.toPrecision()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Number.toFixed()</codeph> renvoie une exception RangeError si les arguments excèdent la plage numérique gérée. Pour éviter de renvoyer une exception RangeError, vous pouvez étendre <codeph class="+ topic/ph pr-d/codeph ">Number.toExponential()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">Number.toPrecision()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">Number.toFixed()</codeph>.
 <p product="flash" class="- topic/p ">D’autres cas de figure entraînent le renvoi de cette exception, notamment :
 <ul class="- topic/ul "><li class="- topic/li ">Une API du moteur d’exécution de Flash qui attend un numéro de profondeur est appelée avec une valeur de profondeur non valide.</li><li class="- topic/li ">Une API du moteur d’exécution de Flash qui attend un numéro d’image est appelée avec un numéro d’image non valide.</li><li class="- topic/li ">Une API du moteur d’exécution Flash qui attend un numéro de calque est appelée avec un numéro de calque non valide.</li></ul>
 </p>
 </apiDesc><example conref="examples\RangeErrorExample.as" class="- topic/example "> L’exemple suivant indique comment générer une exception <codeph class="+ topic/ph pr-d/codeph ">RangeError</codeph> et la traiter avec une instruction <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class RangeErrorExample extends Sprite {

        public function RangeErrorExample() {
            var child:Sprite = new Sprite();
            try {
                addChildAt(child, 1);
            }
            catch(e:RangeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Number/toExponential()" class="- topic/link "><linktext class="- topic/linktext ">Number.toExponential()</linktext></link><link href="#Number/toPrecision()" class="- topic/link "><linktext class="- topic/linktext ">Number.toPrecision()</linktext></link><link href="#Number/toFixed()" class="- topic/link "><linktext class="- topic/linktext ">Number.toFixed()</linktext></link></related-links><apiConstructor id="RangeError:RangeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">RangeError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet RangeError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contient le message associé à l’objet RangeError.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet RangeError.
	 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
 La classe int vous permet de manipuler les types de données représentant un entier 32 bits signé.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int object, int, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe int vous permet de manipuler les types de données représentant un entier 32 bits signé. La plage de valeurs représentées par la classe int est comprise entre -2 147 483 648 (-2^31) et 2 147 483 647 (2^32-1).
 <p class="- topic/p ">Les propriétés des constantes de la classe int, <codeph class="+ topic/ph pr-d/codeph ">MAX_VALUE</codeph> et <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> sont statiques, ce qui signifie qu’il n’est pas nécessaire de disposer d’un objet pour les utiliser ; par conséquent, il n’est pas nécessaire d’utiliser le constructeur. En revanche, les méthodes n’étant pas statiques, vous devez utiliser un objet pour y faire appel. Pour créer un objet int, utilisez le constructeur de la classe int ou déclarez une variable de type int et affectez-lui une valeur littérale.</p>
 <p class="- topic/p ">Similaire au type de données int dans Java et C++, le type de données int s’avère utile pour les compteurs de boucles et les cas où un nombre à virgule flottante n’est pas nécessaire. La valeur par défaut d’une variable de type int correspond à <codeph class="+ topic/ph pr-d/codeph ">0</codeph></p>
 <p class="- topic/p ">Si vous manipulez des nombres supérieurs à <codeph class="+ topic/ph pr-d/codeph ">int.MAX_VALUE</codeph>, envisagez l’utilisation de Number.  </p>
 <p class="- topic/p ">L’exemple suivant appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> de la classe int, qui renvoie la chaîne <codeph class="+ topic/ph pr-d/codeph ">1234</codeph> : </p>
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myint:int = 1234;
 myint.toString();
 </codeblock>
 <p class="- topic/p ">L’exemple suivant affecte la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> à une variable déclarée sans l’utilisation du constructeur :</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var smallest:int = int.MIN_VALUE;
 </pre> 
 
 </apiDesc><example conref="examples\IntExample.as" class="- topic/example "> L’exemple suivant exploite la classe <codeph class="+ topic/ph pr-d/codeph ">IntExample</codeph> pour indiquer comment manipuler les données de type int et vérifier leur validité :
 <ol class="- topic/ol "><li class="- topic/li ">Deux variables int, <codeph class="+ topic/ph pr-d/codeph ">a</codeph> et <codeph class="+ topic/ph pr-d/codeph ">b</codeph>, sont déclarées dans le constructeur.</li><li class="- topic/li ">Les deux ints sont ajoutés à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">addIntegers()</codeph>.</li><li class="- topic/li ">Une troisième variable int, <codeph class="+ topic/ph pr-d/codeph ">c</codeph> reçoit la sortie de <codeph class="+ topic/ph pr-d/codeph ">parseInteger()</codeph>, qui vérifie la validité de la chaîne qui lui a été transmise pour s’assurer qu’il s’agit bien d’un entier avec une plage acceptable pour les types de données int. Elle renvoie ensuite une valeur int qui est égale à l’entier de la valeur de la chaîne, si cette dernière est valide.</li><li class="- topic/li ">Les variables int, <codeph class="+ topic/ph pr-d/codeph ">a</codeph> et <codeph class="+ topic/ph pr-d/codeph ">c</codeph>, sont ajoutées à l’aide de <codeph class="+ topic/ph pr-d/codeph ">addIntegers()</codeph>.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class IntExample extends Sprite {    
        public function IntExample() {
            var a:int = 512;
            var b:int = -128;
            
            trace(addIntegers(a, b)); // 384

            var c:int = parseInteger("32");
            
            trace(addIntegers(a, c)); // 544
        }
            
        public function addIntegers(a:int, b:int):int {
            return a + b;
        }
        
        public function parseInteger(str:String):int {
            var num:Number = parseInt(str);
            if(!isNaN(num) &amp;&amp; num &lt;= int.MAX_VALUE &amp;&amp; num >= int.MIN_VALUE) {
                return int(num);
            }
            
            return 0;
        }
        
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="uint.html" class="- topic/link "><linktext class="- topic/linktext ">uint</linktext></link><link href="Number.html" class="- topic/link "><linktext class="- topic/linktext ">Number</linktext></link></related-links><apiConstructor id="int:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
	 Constructeur qui crée un nouvel objet int.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur numérique de l’objet int en cours de création, ou valeur à convertir en nombre. La valeur par défaut est 0 si <codeph class="+ topic/ph pr-d/codeph ">value</codeph> n’est pas fourni.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Constructeur qui crée un nouvel objet int. L’utilisation du constructeur int est obligatoire si vous utilisez <codeph class="+ topic/ph pr-d/codeph ">int.toString()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">int.valueOf()</codeph>. Ne faites pas appel à un constructeur si vous utilisez les propriétés d’un objet int. Le constructeur <codeph class="+ topic/ph pr-d/codeph ">new int</codeph> sert surtout d’espace réservé. Ne confondez pas l’objet int avec la fonction <codeph class="+ topic/ph pr-d/codeph ">int()</codeph>, qui convertit un paramètre en valeur primitive.
	 
 	 </apiDesc><example class="- topic/example ">Le code suivant crée de nouveaux objets int :
	 <pre xml:space="preserve" class="- topic/pre ">
	 var n1:int = new int(3.4);
	 var n2:int = new int(-10);
	 </pre>
	 
	 
	 </example></apiConstructorDetail><related-links class="- topic/related-links "><link href="#int/toString()" class="- topic/link "><linktext class="- topic/linktext ">int.toString()</linktext></link><link href="#int/valueOf()" class="- topic/link "><linktext class="- topic/linktext ">int.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="int:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> n’est pas compris entre 0 et 20.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 20 inclus qui représente le nombre requis de décimales.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle. La chaîne contient un chiffre avant la virgule et jusqu’à 20 décimales, comme spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph>.
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> renvoie une chaîne sous forme de notation exponentielle.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une représentation sous forme de chaîne du nombre en notation à virgule fixe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> n’est pas compris entre 0 et 20.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 20 inclus qui représente le nombre requis de décimales.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une représentation sous forme de chaîne du nombre en notation à virgule fixe. La notation à virgule fixe signifie que la chaîne contiendra un nombre spécifique de décimales, indiqué par le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph>. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> gère une plage de valeurs comprises entre 0 et 20. Spécifier une valeur qui excède cette plage entraîne le renvoi d’une exception.
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> renvoie une chaîne qui arrondit le résultat à trois chiffres après la virgule.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> renvoie une chaîne qui ajoute des zéros à la fin.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle ou à virgule fixe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> n’est pas compris entre 1 et 21.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 21 inclus qui indique le nombre requis de décimales dans la chaîne générée.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle ou à virgule fixe. La chaîne contiendra le nombre de décimales spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">precision</codeph>.
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> renvoie une chaîne limitée à trois chiffres. La chaîne recourt à la notation à point fixe, dans la mesure où la notation exponentielle n’est pas requise.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> renvoie une chaîne limitée à trois chiffres. La chaîne applique la notation exponentielle dans la mesure où le nombre qui en résulte ne contient pas suffisamment de chiffres pour la notation à point fixe.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la représentation sous forme de chaîne d’un objet int.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Spécifie la base numérique (de 2 à 36) à appliquer pour la conversion nombre vers chaîne. Si vous omettez le paramètre <codeph class="+ topic/ph pr-d/codeph ">radix</codeph>, la valeur par défaut est de 10.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la représentation sous forme de chaîne d’un objet <codeph class="+ topic/ph pr-d/codeph ">int</codeph>.
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant utilise 2 et 8 pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">radix</codeph> et renvoie une chaîne qui contient la représentation correspondante du numéro 9 :
	 <pre xml:space="preserve" class="- topic/pre ">
	 var myint:int = new int(9);
	 trace(myint.toString(2)); // 1001
	 trace(myint.toString(8)); // 11
	 </pre>
	 <p class="- topic/p ">L’exemple suivant renvoie une valeur hexadécimale.</p>
	 <pre xml:space="preserve" class="- topic/pre ">
	 var r:int = new int(250);
	 var g:int = new int(128);
	 var b:int = new int(114);
	 var rgb:String = "0x"+ r.toString(16)+g.toString(16)+b.toString(16);
	 trace(rgb); // 0xfa8072
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="int:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la valeur primitive de l’objet int spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur int.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la valeur primitive de l’objet int spécifié.
	 
 	 </apiDesc><example class="- topic/example ">L’exemple suivant a pour résultat la valeur primitive de l’objet <codeph class="+ topic/ph pr-d/codeph ">numSocks</codeph>.
	 <pre xml:space="preserve" class="- topic/pre ">
	 var numSocks:int = new int(2);
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="int:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc "> 
	Entier signé 32 bits représentable le plus élevé, soit 2 147 483 647.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int, int.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">2147483647</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Entier signé 32 bits représentable le plus élevé, soit 2 147 483 647.
	
    </apiDesc><example class="- topic/example ">Le code ActionScript suivant <ph outputclass="flashonly" class="- topic/ph ">affiche</ph><ph outputclass="flexonly" class="- topic/ph ">écrit</ph> l’objet int représentable le plus élevé et l’objet int représentable le plus faible <ph outputclass="flashonly" class="- topic/ph ">dans le panneau Sortie</ph><ph outputclass="flexonly" class="- topic/ph ">dans le fichier journal</ph> :
	<pre xml:space="preserve" class="- topic/pre ">
	trace("int.MIN_VALUE = "+int.MIN_VALUE);
	trace("int.MAX_VALUE = "+int.MAX_VALUE);
	</pre>
	<p class="- topic/p ">Ce code <ph outputclass="flexonly" class="- topic/ph ">inscrit dans le fichier journal</ph><ph outputclass="flashonly" class="- topic/ph ">affiche</ph> les valeurs suivantes :</p>
	<pre xml:space="preserve" class="- topic/pre ">
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
	</pre>
	
	
	</example></apiValueDetail></apiValue><apiValue id="int:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
	 Entier signé 32 bits représentable le plus faible, soit -2 147 483 648.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">int, int.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">-2147483648</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Entier signé 32 bits représentable le plus faible, soit -2 147 483 648.
	 
 	 </apiDesc><example class="- topic/example ">Le code ActionScript suivant <ph outputclass="flashonly" class="- topic/ph ">affiche</ph><ph outputclass="flexonly" class="- topic/ph ">écrit</ph> les objets int représentables le plus élevé et le plus faible dans le <ph outputclass="flashonly" class="- topic/ph ">panneau Sortie</ph><ph outputclass="flexonly" class="- topic/ph ">dans le fichier journal</ph> :
     <pre xml:space="preserve" class="- topic/pre ">
     trace("int.MIN_VALUE = "+int.MIN_VALUE);
     trace("int.MAX_VALUE = "+int.MAX_VALUE);
     </pre>
     <p class="- topic/p ">Ce code <ph outputclass="flexonly" class="- topic/ph ">inscrit dans le fichier journal</ph><ph outputclass="flashonly" class="- topic/ph ">affiche</ph> les valeurs suivantes :</p>
     <pre xml:space="preserve" class="- topic/pre ">
	int.MIN_VALUE = -2147483648
	int.MAX_VALUE = 2147483647
     </pre>
     
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
 Type de données représentant un nombre à virgule flottante à deux décimales conforme à IEEE -754.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number object, number, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">La classe Number est une enveloppe simple dédiée au type de données <codeph class="+ topic/ph pr-d/codeph ">Number</codeph>.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Type de données représentant un nombre à virgule flottante à deux décimales conforme à IEEE -754. Vous pouvez manipuler des valeurs numériques primitives à l’aide des méthodes et des propriétés associées à la classe Number. Cette classe est identique à la classe JavaScript Number.
 <p class="- topic/p ">Les propriétés de la classe Number sont statiques, ce qui signifie qu’il n’est pas nécessaire de disposer d’un objet pour les utiliser ; par conséquent, il n’est pas nécessaire d’utiliser le constructeur.</p>
 <p class="- topic/p ">Le type de données Number est conforme à la norme IEEE-754 relative aux nombres à deux décimales. </p>
 <p class="- topic/p ">Il s’avère utile lorsque vous utilisez des valeurs à virgule flottante. Les moteurs d’exécution de Flash gèrent mieux les types de données int et uint que le type de données Number, mais Number est utile lorsque la plage de valeurs requises dépasse la plage valide des types de données int et uint. La classe Number permet de représenter des valeurs d’entier qui dépassent nettement la plage valide des types de données int et uint. Le type de données Number utilise jusqu’à 53 bits pour représenter les valeurs d’entier, alors que int et uint sont limités à 32 bits. La valeur par défaut d’une variable de type Number est <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (n’est pas un nombre).</p>
 
 </apiDesc><example conref="examples\NumberExample.as" class="- topic/example "> L’exemple suivant indique comment un nombre à six chiffres après la virgule est tronqué et arrondi pour obtenir avec un nombre à deux chiffres après la virgule.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class NumberExample extends Sprite {
        public function NumberExample() {
            var num:Number = new Number(10.456345);
            var str:String = num.toFixed(2);
            trace(num); // 10.456345
            trace(str); // 10.46
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="int.html" class="- topic/link "><linktext class="- topic/linktext ">int</linktext></link><link href="uint.html" class="- topic/link "><linktext class="- topic/linktext ">uint</linktext></link></related-links><apiConstructor id="Number:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
  Crée un objet Number à la valeur spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur numérique de l’occurrence de Number en cours de création, ou valeur à convertir en objet Number. La valeur par défaut est de 0 si <codeph class="+ topic/ph pr-d/codeph ">num</codeph> n’est pas spécifié. Utiliser le constructeur sans spécifier de paramètre <codeph class="+ topic/ph pr-d/codeph ">num</codeph> n’est pas équivalent à la déclaration d’une variable de type Number à laquelle n’est affectée aucune valeur (telle que <codeph class="+ topic/ph pr-d/codeph ">var myNumber:Number</codeph>), qui correspond par défaut à <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. Un nombre auquel n’est pas affectée de valeur n’est pas défini et constitue l’équivalent de <codeph class="+ topic/ph pr-d/codeph ">new Number(undefined)</codeph>.
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Crée un objet Number à la valeur spécifiée.
  
  </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Crée un objet Number à la valeur spécifiée. L’effet de ce constructeur est identique à celui de la fonction native publique <codeph class="+ topic/ph pr-d/codeph ">Number()</codeph>, qui convertit un objet d’un autre type en valeur numérique primitive.
  
  </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Number/toString()" class="- topic/link "><linktext class="- topic/linktext ">Number.toString()</linktext></link><link href="#Number/valueOf()" class="- topic/link "><linktext class="- topic/linktext ">Number.valueOf()</linktext></link></related-links></apiConstructor><apiOperation id="Number:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> n’est pas compris entre 0 et 20.
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 20 inclus qui représente le nombre requis de décimales.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle. La chaîne contient un chiffre avant la virgule et jusqu’à 20 décimales, comme spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph>.
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> renvoie une chaîne sous forme de notation exponentielle.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une représentation sous forme de chaîne du nombre en notation à virgule fixe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> n’est pas compris entre 0 et 20.
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 20 inclus qui représente le nombre requis de décimales.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une représentation sous forme de chaîne du nombre en notation à virgule fixe. La notation à virgule fixe signifie que la chaîne contiendra un nombre spécifique de décimales, indiqué par le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph>. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> gère une plage de valeurs comprises entre 0 et 20. Spécifier une valeur qui excède cette plage entraîne le renvoi d’une exception.
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> renvoie une chaîne qui arrondit le résultat à trois chiffres après la virgule.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> renvoie une chaîne qui ajoute des zéros à la fin.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle ou à virgule fixe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> n’est pas compris entre 1 et 21.
      </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 21 inclus qui indique le nombre requis de décimales dans la chaîne générée.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle ou à virgule fixe. La chaîne contiendra le nombre de décimales spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">precision</codeph>.
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> renvoie une chaîne limitée à trois chiffres. La chaîne recourt à la notation à point fixe, dans la mesure où la notation exponentielle n’est pas requise.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> renvoie une chaîne limitée à trois chiffres. La chaîne applique la notation exponentielle dans la mesure où le nombre qui en résulte ne contient pas suffisamment de chiffres pour la notation à point fixe.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
 Renvoie la représentation sous la forme d’une chaîne spécifiant l’objet Number spécifié (myNumber).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.tostring, tostring
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation numérique de l’objet Number sous forme de chaîne.
 
 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">10</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Spécifie la base numérique (de 2 à 36) à appliquer pour la conversion nombre vers chaîne. Si vous omettez le paramètre <codeph class="+ topic/ph pr-d/codeph ">radix</codeph>, la valeur par défaut est de 10.
 
 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la représentation sous forme de chaîne de cet objet Number en utilisant le paramètre de base spécifié comme base numérique.
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Renvoie la représentation sous la forme d’une chaîne spécifiant l’objet Number spécifié (<codeph class="+ topic/ph pr-d/codeph "><i class="+ topic/ph hi-d/i ">myNumber</i></codeph>). Si la valeur de l’objet Number est un nombre décimal sans zéro à gauche (tel que <codeph class="+ topic/ph pr-d/codeph ">0,4</codeph>), <codeph class="+ topic/ph pr-d/codeph ">Number.toString()</codeph> ajoute le zéro (<codeph class="+ topic/ph pr-d/codeph ">0,4</codeph>).
 
 
 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Number:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
 Renvoie le type de valeur primitive de l’objet Number spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de type primitive de l’objet Number.
 
 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le type de valeur primitive de l’objet Number spécifié.
 
 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Renvoie le type de valeur primitive de l’objet Number spécifié.
 
 </apiDesc></apiOperationDetail></apiOperation><apiValue id="Number:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc ">
  Nombre représentable le plus élevé (à deux décimales conformément à IEEE-754).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.max_value, max_value, max value
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Nombre représentable le plus élevé (à deux décimales conformément à IEEE-754).
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Nombre représentable le plus élevé (à deux décimales conformément à IEEE-754). La valeur de ce nombre est d’environ 1,79e+308.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
  Nombre représentable le plus faible non négatif et non égal à zéro (à deux décimales conformément à IEEE-754).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.min_value, min_value, min value
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Nombre représentable le plus faible (comportant deux décimales conformément à IEEE-754).
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Nombre représentable le plus faible non négatif et non égal à zéro (à deux décimales conformément à IEEE-754). La valeur de ce nombre est d’environ 5e-324. Le nombre représentable le plus faible globalement est en fait <codeph class="+ topic/ph pr-d/codeph ">-Number.MAX_VALUE</codeph>.
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NEGATIVE_INFINITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NEGATIVE_INFINITY</apiName><shortdesc class="- topic/shortdesc ">
  Spécifie la valeur IEEE-754 représentant l’infini négatif.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.negative_infinity, negative_infinity, negative infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Spécifie la valeur IEEE-754 représentant l’infini négatif.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Spécifie la valeur IEEE-754 représentant l’infini négatif. La valeur de cette propriété est identique à celle de la constante <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>.
  <p class="- topic/p ">
  L’infini négatif est une valeur numérique spéciale renvoyée lorsqu’une opération mathématique ou une fonction renvoie une valeur négative supérieure à celle pouvant être représentée.
  </p>
  
  </apiDesc></apiValueDetail></apiValue><apiValue id="Number:NaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NaN</apiName><shortdesc class="- topic/shortdesc ">
  Valeur IEEE-754 ne représentant pas une valeur numérique (NaN).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.nan, nan, not a number
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Valeur IEEE-754 ne représentant pas une valeur numérique (NaN).
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Valeur IEEE-754 ne représentant pas une valeur numérique (<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>).
  
  </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="package.html#isNaN()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale isNaN()</linktext></link></related-links></apiValue><apiValue id="Number:POSITIVE_INFINITY" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">POSITIVE_INFINITY</apiName><shortdesc class="- topic/shortdesc ">
  Spécifie la valeur IEEE-754 représentant l’infini positif.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.positive_infinity, positive_infinity, positive infinity, infinity
   
   </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Spécifie la valeur IEEE-754 représentant l’infini positif.
  
  </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Spécifie la valeur IEEE-754 représentant l’infini positif. La valeur de cette propriété est identique à celle de la constante <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>.
  <p class="- topic/p ">
  L’infini positif est une valeur numérique spéciale renvoyée lorsqu’une opération mathématique ou une fonction renvoie une valeur supérieure à celle pouvant être représentée.
  </p>
  
  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:DefinitionError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">DefinitionError</apiName><shortdesc class="- topic/shortdesc ">
 La classe DefinitionError représente une erreur qui se produit lorsque le code utilisateur tente de définir un identificateur qui est déjà défini.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
  
  </helpid></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Une erreur DefinitionError est renvoyée lorsque le code tente de redéfinir une classe, une interface ou une fonction.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe DefinitionError représente une erreur qui se produit lorsque le code utilisateur tente de définir un identificateur qui est déjà défini. Cette erreur se produit généralement lors de la redéfinition de classes, d’interfaces et de fonctions.
 
 </apiDesc></apiClassifierDetail><apiConstructor id="DefinitionError:DefinitionError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">DefinitionError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet DefinitionError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet DefinitionError.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:Function" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Function</apiName><shortdesc class="- topic/shortdesc ">
 Une fonction constitue l’unité de base du code que vous pouvez appeler dans ActionScript.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">La classe Function permet de représenter une fonction intégrée ou définie par l’utilisateur.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une fonction constitue l’unité de base du code que vous pouvez appeler dans ActionScript. Les fonctions définies par l’utilisateur et les fonctions intégrées à ActionScript sont représentées par des objets Function, qui sont des occurrences de la classe Function.
 <p class="- topic/p ">Les méthodes d’une classe sont légèrement différentes des objets Function. A l’encontre d’un objet Function standard, une méthode est étroitement liée à l’objet de classe associé. De ce fait, une méthode ou une propriété possède une définition partagée par toutes les occurrences d’une même classe. Les méthodes peuvent être extraites d’une occurrence et traitées comme si elles étaient « liées » (en d’autres termes, comme des méthodes qui conservent le lien à l’occurrence d’origine). Pour une méthode liée, le mot-clé <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pointe vers l’objet d’origine qui a implémenté la méthode. Pour une fonction, <codeph class="+ topic/ph pr-d/codeph ">this</codeph> pointe vers l’objet associé lors de l’appel de la fonction.</p>
 
 
 </apiDesc><example conref="examples\FunctionExample.as" class="- topic/example "> L’exemple suivant a recours aux classes <codeph class="+ topic/ph pr-d/codeph ">FunctionExample</codeph>, <codeph class="+ topic/ph pr-d/codeph ">SimpleCollection</codeph>, <codeph class="+ topic/ph pr-d/codeph ">EventBroadcaster</codeph> et <codeph class="+ topic/ph pr-d/codeph ">EventListener</codeph> pour présenter les différentes utilisations des fonctions dans ActionScript. Cette opération s’accomplit de la façon suivante :
 <ol class="- topic/ol "><li class="- topic/li ">Le constructeur de <codeph class="+ topic/ph pr-d/codeph ">FunctionExample</codeph> crée une variable locale appelée <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph>, qui est remplie par un tableau d’entiers allant de <codeph class="+ topic/ph pr-d/codeph ">1</codeph> à <codeph class="+ topic/ph pr-d/codeph ">8</codeph>. </li><li class="- topic/li ">L’objet <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph> est imprimé à l’aide de la méthode <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.</li><li class="- topic/li ">Un objet EventListener, <codeph class="+ topic/ph pr-d/codeph ">listener</codeph>, est ajouté à <codeph class="+ topic/ph pr-d/codeph ">simpleColl</codeph>.</li><li class="- topic/li ">Lorsque les fonctions <codeph class="+ topic/ph pr-d/codeph ">insert()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">remove()</codeph> sont appelées, l’écouteur répond à leurs événements.</li><li class="- topic/li ">Un deuxième objet SimpleCollection est créé sous le nom <codeph class="+ topic/ph pr-d/codeph ">greaterThanFourColl</codeph>.</li><li class="- topic/li ">L’objet <codeph class="+ topic/ph pr-d/codeph ">greaterThanFourColl</codeph> se voit affecter le résultat de <codeph class="+ topic/ph pr-d/codeph ">simpleColl.select()</codeph> avec l’argument <codeph class="+ topic/ph pr-d/codeph ">4</codeph> et une fonction anonyme. La méthode de sélection de l’objet SimpleCollection est un itérateur interne qui utilise le paramètre de fonction anonyme en tant que bloc.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class FunctionExample extends Sprite {
        public function FunctionExample() {
            var simpleColl:SimpleCollection;
            simpleColl = new SimpleCollection(0, 1, 2, 3, 4, 5, 6, 7, 8);
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 8

            var listener:EventListener = new EventListener();
            simpleColl.addListener(listener);
            simpleColl.insert(9);        // itemInsertedHandler: 9
            simpleColl.remove(8);        // itemRemovedHandler: 8
            trace(simpleColl);        // 0, 1, 2, 3, 4, 5, 6, 7, 9

            var greaterThanFourColl:SimpleCollection;
            greaterThanFourColl = simpleColl.select(4, function(item:int, value:int){ return item > value });
            trace(greaterThanFourColl);    // 5, 6, 7, 9
        }
    }
}
    
import flash.display.Sprite;
    
class EventBroadcaster {
    private var listeners:Array;

    public function EventBroadcaster() {
        listeners = new Array();
    }
        
    public function addListener(obj:Object):void {
        removeListener(obj);
        listeners.push(obj);
    }
        
    public function removeListener(obj:Object):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            if(listeners[i] == obj) {
                listeners.splice(i, 1);
            }
        }
    }
    
    public function broadcastEvent(evnt:String, ...args):void {
        for(var i:uint = 0; i &lt; listeners.length; i++) {
            listeners[i][evnt].apply(listeners[i], args);
        }
    }    
}
    
class SimpleCollection extends EventBroadcaster {
    private var arr:Array;
        public function SimpleCollection(... args) {
        arr = (args.length == 1 &amp;&amp; !isNaN(args[0])) ? new Array(args[0]) : args;
    }
        
    public function insert(obj:Object):void {
        remove(obj);
        arr.push(obj);
        broadcastEvent("itemInsertedHandler", obj);
    }
        
    public function remove(obj:Object):void {
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(arr[i] == obj) {
                var obj:Object = arr.splice(i, 1)[0];
                broadcastEvent("itemRemovedHandler", obj);
            }
        }
    }

    public function select(val:int, fn:Function):SimpleCollection {
        var col:SimpleCollection = new SimpleCollection();
        for(var i:uint = 0; i &lt; arr.length; i++) {
            if(fn.call(this, arr[i], val)) {
                col.insert(arr[i]);
            }
        }
        return col;
    }
        
    public function toString():String {
        var str:String = new String();
        for(var i:uint = 0; i &lt; arr.length - 1; i++) {
            str += arr[i] + ", ";
        }
        str += arr[arr.length - 1];
        return str;
    }
}

class EventListener {
    public function EventListener() {
    }
    
    public function itemInsertedHandler(obj:Object):void {
        trace("itemInsertedHandler: " + obj);
    }
    
    public function itemRemovedHandler(obj:Object):void {
        trace("itemRemovedHandler: " + obj);        
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="Function:AS3:apply" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">apply</apiName><shortdesc class="- topic/shortdesc ">
  Spécifie la valeur thisObject à utiliser dans toute fonction appelée par ActionScript.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function.apply, apply
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Toute valeur spécifiée par la fonction appelée.
  
  
  </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisArg</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet auquel s’applique la fonction.
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">argArray</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau dont les éléments sont transmis à la fonction en tant que paramètres.
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Spécifie l’occurrence d’objet pour laquelle est appelée la fonction.
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Spécifie la valeur <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> à utiliser dans toute fonction appelée par ActionScript. Cette méthode spécifie également les paramètres à transmettre à toute fonction appelée. Dans la mesure où <codeph class="+ topic/ph pr-d/codeph ">apply()</codeph> est une méthode de la classe Function, c’est également une méthode de chaque objet Function dans ActionScript. 
  <p class="- topic/p ">Les paramètres sont spécifiés sous forme d’objet Array, contrairement à <codeph class="+ topic/ph pr-d/codeph ">Function.call()</codeph> qui spécifie les paramètres en tant que liste délimitée par des virgules. Ceci est souvent utile lorsque le nombre de paramètres à transmettre n’est pas connu avant l’exécution du script.</p>
  <p class="- topic/p ">Renvoie la valeur spécifiée en tant que valeur renvoyée par la fonction appelée.</p>

  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Function/call()" class="- topic/link "><linktext class="- topic/linktext ">Function.call()</linktext></link></related-links></apiOperation><apiOperation id="Function:AS3:call" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">call</apiName><shortdesc class="- topic/shortdesc ">
  Appelle la fonction représentée par un objet Function.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Function, Function.call, call
  
  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisArg</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiData class="- topic/ph reference/ph apiRef/apiData ">unknown</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet qui spécifie la valeur de <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> dans le corps de la fonction.
  
  </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Paramètre ou paramètres à transmettre à la fonction. Vous pouvez spécifier zéro ou plusieurs paramètres.
  
  </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Appelle cette fonction. 
  
  </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Appelle la fonction représentée par un objet Function. Toutes les fonctions dans ActionScript sont représentées par un objet Function, de sorte que toutes les fonctions prennent en charge cette méthode. 
  <p class="- topic/p ">Dans presque tous les cas, l’opérateur d’appel de fonction (<codeph class="+ topic/ph pr-d/codeph ">()</codeph>) peut être utilisé au lieu de cette méthode. L’opérateur de la fonction call génère un code concis et lisible. Cette méthode est surtout utile lorsque le paramètre <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> de l’appel de fonction doit être explicitement contrôlé. Normalement, si une fonction est appelée en tant que méthode d’un objet, dans le corps de la fonction, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">myObject</codeph>, comme illustré dans l’exemple suivant :</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  myObject.myMethod(1, 2, 3);
  </codeblock>
  <p class="- topic/p ">Dans certains cas, il peut être souhaitable que <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> pointe autre part ; par exemple, si une fonction doit être appelée en tant que méthode d’un objet alors qu’elle n’est pas stockée comme méthode de cet objet :</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  myObject.myMethod.call(myOtherObject, 1, 2, 3); 
  </codeblock>
  <p class="- topic/p ">Vous pouvez transmettre la valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> au paramètre <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph> pour appeler une fonction en tant que fonction ordinaire et non en tant que méthode d’un objet. Par exemple, les appels de fonction suivantes sont équivalentes :</p>
  <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  Math.sin(Math.PI / 4)
  Math.sin.call(null, Math.PI / 4)
  </codeblock>
  
  <p class="- topic/p ">Renvoie la valeur spécifiée en tant que valeur renvoyée par la fonction appelée.</p>
  
  </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Function/apply()" class="- topic/link "><linktext class="- topic/linktext ">Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:SyntaxError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">SyntaxError</apiName><shortdesc class="- topic/shortdesc ">
 Une exception SyntaxError est renvoyée lorsqu’une erreur d’analyse se produit, pour l’une des raisons suivantes :</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, SyntaxError
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une exception SyntaxError est renvoyée lorsqu’une erreur d’analyse se produit, pour l’une des raisons suivantes : 
 <ul class="- topic/ul "><li class="- topic/li ">Une expression régulière non valide est analysée par la classe RegExp.</li><li class="- topic/li ">Du contenu XML non valide est analysé par la classe XML.</li></ul>
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">classe RegExp</linktext></link><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">Classe XML</linktext></link></related-links><apiConstructor id="SyntaxError:SyntaxError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">SyntaxError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet SyntaxError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contient le message associé à l’objet SyntaxError. 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet SyntaxError.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
 La classe XMLList contient des méthodes qui permettent de traiter au moins un élément XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe XMLList contient des méthodes qui permettent de traiter au moins un élément XML. Un objet XMLList peut représenter au moins un objet ou un élément XML (ce qui inclut les nœuds multiples ou les attributs), de façon à pouvoir appeler des méthodes sur les éléments en tant que groupe ou sur les différents éléments de la collection.
 <p class="- topic/p ">Si un objet XMLList ne comporte qu’un seul élément XML, vous pouvez utiliser les méthodes de classe XML directement sur l’objet XMLList. Dans l’exemple suivant, <codeph class="+ topic/ph pr-d/codeph ">example.two</codeph> est un objet XMLList de longueur 1. Vous pouvez donc lui appliquer toute méthode XML.</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var example2 = &lt;example>&lt;two>2&lt;/two>&lt;/example>;</codeblock>
 <p class="- topic/p ">Si vous tentez d’utiliser des méthodes de classe XML avec un objet XMLList contenant plusieurs objets XML, une exception est renvoyée. Vous pouvez par contre, effectuer une itération sur la collection XMLList (à l’aide d’une instruction <codeph class="+ topic/ph pr-d/codeph ">for each..in</codeph>, par exemple) et appliquer les méthodes aux différents objets XML de la collection.</p>
 
 </apiDesc><example conref="examples\XMLListExample.as" class="- topic/example "> L’exemple suivant crée une propriété XML appelée <codeph class="+ topic/ph pr-d/codeph ">books</codeph> et ajoute plusieurs éléments avec des balises <codeph class="+ topic/ph pr-d/codeph ">book publisher</codeph> et <codeph class="+ topic/ph pr-d/codeph ">name</codeph> à un nœud appelé <codeph class="+ topic/ph pr-d/codeph ">books</codeph>. Ensuite, la méthode <codeph class="+ topic/ph pr-d/codeph ">showBooksByPublisher()</codeph> est appelée, ce qui prend XMLList et renvoie tous les éléments qui correspondent à l’éditeur, « Addison-Wesley ».
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class XMLListExample extends Sprite {
        private var books:XML;

        public function XMLListExample() {
            books =    &lt;books>
                        &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                        &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                        &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                        &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                        &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                        &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                    &lt;/books>;

            showBooksByPublisher("Addison-Wesley");
        }

        private function showBooksByPublisher(name:String):void {
            var results:XMLList = books.book.(@publisher == name);
            showList(results);
        }

        private function showList(list:XMLList):void {
            var item:XML;
            for each(item in list) {
                trace("item: " + item.toXMLString());
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="statements.html#for_each..in" class="- topic/link "><linktext class="- topic/linktext ">for each..in</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Espace de nom </linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link></related-links><apiConstructor id="XMLList:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
	Crée un objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList 
	</keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tout objet qui peut être converti en objet XMLList à l’aide de la fonction de niveau supérieur <codeph class="+ topic/ph pr-d/codeph ">XMLList()</codeph>.
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Crée un objet XMLList.
	
	</apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#global/XMLList()" class="- topic/link "><linktext class="- topic/linktext ">Fonction XMLList() de niveau supérieur</linktext></link></related-links></apiConstructor><apiOperation id="XMLList:AS3:attribute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attribute</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode attribute() de chaque objet XML et renvoie un objet XMLList contenant les résultats.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.attribute, attribute
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList composé d’objets XML correspondants ou vide.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">attributeName</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’attribut à inclure dans un objet XMLList.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> de chaque objet XML et renvoie un objet XMLList contenant les résultats. Les résultats correspondent au paramètre <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> spécifié. Si aucune correspondance n’est détectée, la méthode <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> renvoie un objet XMLList vide.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:attributes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attributes</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode attributes() de chaque objet XML et renvoie un objet XMLList contenant les attributs de chaque objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.attributes, attributes
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les attributs de chaque objet XML.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">attributes()</codeph> de chaque objet XML et renvoie un objet XMLList contenant les attributs de chaque objet XML. 
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:child" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">child</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode child() de chaque objet XML et renvoie un objet XMLList contenant les résultats classés.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.child, child
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les nœuds enfant qui correspondent au paramètre d’entrée.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément ou entier de l’objet XML enfant.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> de chaque objet XML et renvoie un objet XMLList contenant les résultats classés.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:children" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">children</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode children() de chaque objet XML et renvoie un objet XMLList contenant les résultats.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.children, children
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les enfants des objets XML.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">children()</codeph> de chaque objet XML et renvoie un objet XMLList contenant les résultats.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/children()" class="- topic/link "><linktext class="- topic/linktext ">XML.children()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:comments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">comments</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode comments() de chaque objet XML et renvoie un objet XMLList contenant des commentaires.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.comments, comments
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les commentaires associés aux objets XML.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">comments()</codeph> de chaque objet XML et renvoie un objet XMLList contenant des commentaires.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/comments()" class="- topic/link "><linktext class="- topic/linktext ">XML.comments()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
	Vérifie si l’objet XMLList contient un objet XML égal au paramètre value spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.contains, contains
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet XMLList contient l’objet XML déclaré dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph>, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML à comparer à l’objet XMLList en cours. 
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Vérifie si l’objet XMLList contient un objet XML égal au paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph> spécifié.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie une copie de l’objet XMLList spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.copy, copy
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de l’objet XMLList.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie une copie de l’objet XMLList spécifié. Cette copie est une duplication de l’arborescence entière de nœuds. L’objet XML copié ne possède pas de parent et renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si vous tentez d’appeler la méthode <codeph class="+ topic/ph pr-d/codeph ">parent()</codeph>.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:descendants" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">descendants</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie tous les descendants (enfants, petits-enfants, arrière-petits-enfants, etc.) de l’objet XML associés au paramètre name indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.descendants, descendants
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les descendants (enfants, petits-enfants, etc.) correspondants des objets XML spécifiés dans la liste d’origine. S’il n’existe pas de descendants, la méthode renvoie un objet XMLList vide.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément pour lequel établir une correspondance.
	
 	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie tous les descendants (enfants, petits-enfants, arrière-petits-enfants, etc.) de l’objet XML associés au paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> indiqué. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> peut être un objet QName, un type de données String ou tout autre type de données converti ensuite au type de données String.
	
	<p class="- topic/p ">Pour renvoyer tous les descendants, utilisez le paramètre astérisque (~~). Si aucun paramètre n’est transmis, la chaîne « ~~ » est transmise et renvoie tous les descendants de l’objet XML.</p>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/descendants()" class="- topic/link "><linktext class="- topic/linktext ">XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:elements" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">elements</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode elements() de chaque objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.elements, elements
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les éléments enfant correspondants des objets XML.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom des éléments pour lesquels une correspondance doit être établie.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> de chaque objet XML. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est transmis à la méthode <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph>. Si aucun paramètre n’est transmis, la chaîne « ~~ » est transmise à la méthode <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph>.
	
 	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasComplexContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasComplexContent</apiName><shortdesc class="- topic/shortdesc ">
	Vérifie si l’objet XMLList intègre un contenu complexe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasComplexContent, hasComplexContent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet XMLList intègre un contenu complexe, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Vérifie si l’objet XMLList intègre un contenu complexe. Un objet XMLList est considéré comme complexe s’il n’est pas vide et que l’une des deux conditions suivantes est remplie : 
	
	<ul class="- topic/ul "><li class="- topic/li ">L’objet XMLList contient un élément XML unique au contenu complexe.</li><li class="- topic/li ">L’objet XMLList contient des éléments.</li></ul>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
	Recherche la propriété spécifiée par p.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasOwnProperty, hasOwnProperty
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si le paramètre existe, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriété pour laquelle établir une correspondance.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Recherche la propriété spécifiée par <codeph class="+ topic/ph pr-d/codeph ">p</codeph>. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:hasSimpleContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasSimpleContent</apiName><shortdesc class="- topic/shortdesc ">
	Vérifie si l’objet XMLList intègre un contenu simple.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.hasSimpleContent, hasSimpleContent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet XMLList intègre un contenu simple, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Vérifie si l’objet XMLList intègre un contenu simple. Un objet XMLList est considéré comme simple si une ou plusieurs des conditions ci-dessous sont remplies :
	<ul class="- topic/ul "><li class="- topic/li ">L’objet XMLList est vide.</li><li class="- topic/li ">L’objet XMLList contient un élément XML unique au contenu simple.</li><li class="- topic/li ">L’objet XMLList ne contient pas d’élément.</li></ul>
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">hasComplexContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie le nombre de propriétés de l’objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.length, length
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre de propriétés de l’objet XMLList. 
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie le nombre de propriétés de l’objet XMLList.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
	Fusionne les nœuds de texte adjacents et élimine les nœuds de texte vides pour les éléments suivants : tous les nœuds de texte XMLList, tous les objets XML contenus dans XMLList et les descendants de tous les objets XML dans XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.normalize, normalize
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’objet XMLList normalisé.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Fusionne les nœuds de texte adjacents et élimine les nœuds de texte vides pour les éléments suivants : tous les nœuds de texte XMLList, tous les objets XML contenus dans XMLList et les descendants de tous les objets XML dans XMLList. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:parent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie le parent de l’objet XMLList si tous les éléments intégrés à l’objet XMLList possèdent le même parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.parent, parent
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie l’objet XML parent.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie le parent de l’objet XMLList si tous les éléments intégrés à l’objet XMLList possèdent le même parent. Si l’objet XMLList ne possède pas de parent ou a des parents différents, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:processingInstructions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">processingInstructions</apiName><shortdesc class="- topic/shortdesc ">
	Si un paramètre name est spécifié, la méthode recense tous les enfants de l’objet XMLList qui contiennent des instructions de traitement portant le nom indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.processingInstructions, processingInstructions
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList qui contient les instructions de traitement de chaque objet XML.
	
 	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom des instructions de traitement pour lesquelles établir une correspondance.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Si un paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est spécifié, la méthode recense tous les enfants de l’objet XMLList qui contiennent des instructions de traitement portant le nom indiqué. Si aucun paramètre n’est spécifié, elle recense tous les enfants de l’objet XMLList qui contiennent des instructions de traitement.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/processingInstructions()" class="- topic/link "><linktext class="- topic/linktext ">XML.processingInstructions()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
	Vérifie si la propriété p figure dans le jeu de propriétés qui peut faire l’objet d’une itération avec une instruction for..in appliquée à l’objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.propertyIsEnumerable, propertyIsEnumerable
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la propriété peut faire l’objet d’une itération dans une instruction <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph>, <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ; sinon <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Index d’une propriété à vérifier.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Vérifie si la propriété <codeph class="+ topic/ph pr-d/codeph ">p</codeph> figurre dans le jeu de propriétés qui peut faire l’objet d’une itération avec une instruction <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> appliquée à l’objet XMLList. La valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> n’est renvoyée que si <codeph class="+ topic/ph pr-d/codeph ">toNumber(p)</codeph> est supérieur ou égal à 0 et inférieur à la longueur de l’objet XMLList. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="XMLList:AS3:text" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
	Appelle la méthode text() de chaque objet XML et renvoie un objet XMLList contenant les résultats.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.text, text
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant l’ensemble des propriétés XML de l’objet XMLList qui représentent les nœuds de texte XML.
	
 	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">text()</codeph> de chaque objet XML et renvoie un objet XMLList contenant les résultats.
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/text()" class="- topic/link "><linktext class="- topic/linktext ">XML.text()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie une représentation sous forme de chaîne de tous les objets XML intégrés à un objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toString, toString 
	
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’objet XML.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie une représentation sous forme de chaîne de tous les objets XML intégrés à un objet XMLList. Les règles de cette conversion varient selon que l’objet XML intègre un contenu simple ou complexe :
	
	<ul class="- topic/ul "><li class="- topic/li ">Si l’objet XML comporte un contenu simple, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie le contenu de la chaîne de l’objet XML en éliminant les éléments suivants : la balise initiale, les attributs, les déclarations d’espace de noms et la balise de fin.</li></ul>
	
	<ul class="- topic/ul "><li class="- topic/li "> Si l’objet XML intègre un contenu complexe, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie une chaîne codée au format XML qui représente l’objet XML entier, y compris la balise de début, les attributs, les déclarations d’espace de noms et la balise de fin.</li></ul>
	
	<p class="- topic/p ">Pour renvoyer à chaque fois l’objet XML entier, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph>.</p>
	
	
	</apiDesc><example conref="examples\XMLToStringExample1.as" class="- topic/example "> L’exemple suivant indique ce que la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie lorsque l’objet XML a un contenu simple :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = &lt;type name="Joe">example&lt;/type>;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as" class="- topic/example "> L’exemple suivant indique ce que la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie lorsque l’objet XML a un contenu complexe :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = 
&lt;type name="Joe">
    &lt;base name="Bob">&lt;/base>
    example
&lt;/type>;
trace(test.toString());
  // &lt;type name="Joe">
  // &lt;base name="Bob"/>
  // example
  // &lt;/type> 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">hasComplexContent()</linktext></link><link href="#XMLList/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">hasSimpleContent()</linktext></link><link href="#XMLList/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:toXMLString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toXMLString</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie une représentation sous forme de chaîne de tous les objets XML intégrés à un objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toXMLString, toXMLString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’objet XML.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie une représentation sous forme de chaîne de tous les objets XML intégrés à un objet XMLList. A l’encontre de la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>, la méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> renvoie toujours la balise de début, les attributs et la balise de fin de l’objet XML, que son contenu soit simple ou complexe (la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> supprime ces éléments si l’objet XML intègre un contenu simple).
	
	
	</apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#XMLList/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link></related-links></apiOperation><apiOperation id="XMLList:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	Renvoie l’objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XMLList, XMLList.valueOf, valueOf
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie l’objet XMLList en cours.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Renvoie l’objet XMLList. 
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
Utilisé pour les opérations logiques, un objet Boolean est un type de données réglé soit sur true, soit sur false.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><refpath>Objects/Core/Boolean/
 
 </refpath></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
Utilisé pour les opérations logiques, un objet Boolean est un type de données réglé soit sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. Utilisez la classe Boolean pour extraire le type de données primitive ou la représentation sous forme de chaîne d’un objet booléen. 

<p class="- topic/p ">Pour créer un objet Boolean, vous pouvez utiliser le constructeur ou la fonction globale, ou affecter une valeur littérale. Utilisez la technique de votre choix, car elles sont toutes trois équivalentes dans ActionScript 3.0 (à l’encontre de JavaScript, où un objet Boolean et le type de primitive Boolean sont deux entités distinctes).</p>

  <p class="- topic/p ">Les lignes de code suivantes sont équivalentes :</p>
<codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var flag:Boolean = true;
var flag:Boolean = new Boolean(true);
var flag:Boolean = Boolean(true);
</codeblock>

 </apiDesc><example conref="examples\BooleanExample.as" class="- topic/example "> L’exemple suivant permet de sélectionner tour à tour et afficher toutes les valeurs correspondant à l’objet Boolean :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
    import flash.display.Sprite;

    public class BooleanExample extends Sprite {
        private var flag:Boolean;

        public function BooleanExample() {
            trace(flag);    // false
            toggle();
            trace(flag);    // true
            toggle();
            trace(flag);    // false
        }
        
        private function toggle():void{
            flag = !flag;
        }
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Boolean:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
 Crée un objet Boolean à la valeur spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new boolean, constructor
  
  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Toute expression. 
 
 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Crée un objet Boolean à la valeur spécifiée. Si vous omettez le paramètre <codeph class="+ topic/ph pr-d/codeph ">expression</codeph>, l’objet Boolean est initialisé avec la valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. Si vous spécifiez une valeur pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">expression</codeph>, la méthode l’évalue et renvoie le résultat sous forme de valeur booléenne conformément aux règles de la fonction globale <codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph>.
 
 </apiDesc><example class="- topic/example ">Le code suivant crée un objet Boolean, initialisé à la valeur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> et appelé <codeph class="+ topic/ph pr-d/codeph ">myBoolean</codeph> :
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var myBoolean:Boolean = new Boolean();
 </codeblock>
 
 </example></apiConstructorDetail><related-links class="- topic/related-links "><link href="package.html#Boolean()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale Boolean()</linktext></link></related-links></apiConstructor><apiOperation id="Boolean:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie la représentation de l’objet booléen sous forme de chaîne (« true » ou « false »).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">boolean.toString, toString
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne <codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie la représentation de l’objet booléen sous forme de chaîne (<codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph>). La sortie n’est pas traduite et correspond à <codeph class="+ topic/ph pr-d/codeph ">"true"</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">"false"</codeph> quelle que soit la langue du système en vigueur.
     
     </apiDesc><example class="- topic/example ">Cet exemple crée une variable de type booléen et utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> pour convertir la valeur en chaîne à utiliser dans un tableau de chaînes :
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myStringArray:Array = new Array("yes", "could be");
     var myBool:Boolean = 0;
     myBool.toString();
     myStringArray.push(myBool);
     trace(myStringArray); // yes,could be,false
     </codeblock>
     
     
     </example></apiOperationDetail></apiOperation><apiOperation id="Boolean:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie true si la valeur de l’objet Boolean spécifié est true, false dans le cas contraire.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">boolean.valueOf, valueOf
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur booléenne.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la valeur de l’objet Boolean spécifié est true, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.  
     
     </apiDesc><example class="- topic/example ">L’exemple suivant indique le mode de fonctionnement de cette méthode et montre également que la valeur d’un nouvel objet Boolean est <codeph class="+ topic/ph pr-d/codeph ">false</codeph> :
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myBool:Boolean = new Boolean();
     trace(myBool.valueOf());   // false
     myBool = (6==3+3);
     trace(myBool.valueOf());   // true  
     </codeblock>
     
     
     </example></apiOperationDetail></apiOperation></apiClassifier><apiClassifier languages="" id="globalClassifier:Error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Error</apiName><shortdesc class="- topic/shortdesc ">
 La classe Error contient des informations sur une erreur survenue dans un script.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Un objet Error est généré s’il se produit une erreur dans un script.
 
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Error contient des informations sur une erreur survenue dans un script. Lorsque vous développez des applications ActionScript 3.0, une boîte de dialogue indique les exceptions de type Error ou associées à une sous-classe si vous exécutez le code compilé dans la version de débogage d’un moteur d’exécution de Flash pour vous aider à corriger le code. Vous pouvez créer un objet Error à l’aide de la fonction constructeur <codeph class="+ topic/ph pr-d/codeph ">Error</codeph>. En général, vous générez un nouvel objet Error à partir d’un bloc de code <codeph class="+ topic/ph pr-d/codeph ">try</codeph>, qui est ensuite détecté par un bloc de code <codeph class="+ topic/ph pr-d/codeph ">catch</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">finally</codeph>.
 <p class="- topic/p ">Vous pouvez également créer une sous-classe de la classe Error et générer des occurrences de cette sous-classe.</p>
 
 </apiDesc><example conref="examples\ErrorExample.as" class="- topic/example "> L’exemple suivant exploite la classe <codeph class="+ topic/ph pr-d/codeph ">ErrorExample</codeph> pour indiquer comment générer une erreur personnalisée. Cette opération s’accomplit de la façon suivante :
 <ol class="- topic/ol "><li class="- topic/li ">Une variable locale, <codeph class="+ topic/ph pr-d/codeph ">nullArray</codeph>, de type Array est déclaré. Vous remarquerez qu’aucun objet Array n’est créé.</li><li class="- topic/li ">Le constructeur tente de charger une valeur dans le tableau non initialisé en utilisant la méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> au sein d ’un segment de code de traitement des erreurs qui intercepte une erreur personnalisée à l’aide de la classe <codeph class="+ topic/ph pr-d/codeph ">CustomError</codeph>, qui étend <codeph class="+ topic/ph pr-d/codeph ">Error</codeph>.</li><li class="- topic/li ">Lorsque CustomError est renvoyé, le constructeur l’intercepte, puis renvoie un message d’erreur à l’aide de l’instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>. </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package
{
    import flash.display.Sprite;
    public class ErrorExample extends Sprite 
    {
        private var nullArray:Array;
        public function ErrorExample() 
        {
            try 
            {
                nullArray.push("item");
            }
            catch(e:Error) 
            {
                throw new CustomError("nullArray is null");
            }
        }
    }
}

class CustomError extends Error 
{
    public function CustomError(message:String) 
    {
        super(message);
    }
}
</codeblock></example></apiClassifierDetail><apiConstructor id="Error:Error" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Error</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un nouvel objet Error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne associée à l’objet Error. Ce paramètre est facultatif. 
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">id</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Numéro de référence à associer au message d’erreur spécifique.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Crée une nouvelle occurrence de Error associée au message d’erreur spécifié.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un nouvel objet Error. Si <codeph class="+ topic/ph pr-d/codeph ">message</codeph> est spécifié, sa valeur est affectée à la propriété <codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph> de l’objet.
	 
	 
	 </apiDesc><example conref="examples\Error.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Error, <codeph class="+ topic/ph pr-d/codeph ">err</codeph> puis, à l’aide du constructeur <codeph class="+ topic/ph pr-d/codeph ">Error()</codeph>, affecte la chaîne <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> à <codeph class="+ topic/ph pr-d/codeph ">err</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiConstructor><apiOperation id="Error:getStackTrace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">getStackTrace</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la pile d’appels d’une erreur sous la forme d’une chaîne lors de la construction de l’erreur (version de débogage de Flash Player et application de débogage du lanceur AIR seulement) ; renvoie la valeur null lorsque ni la version de débogage de Flash Player ni l’application de débogage du lanceur AIR n’est utilisée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, call stack
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de la pile d’appels.
	 
	 
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie la pile d’appels pour générer une erreur lisible.
	 
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la pile d’appels d’une erreur sous la forme d’une chaîne lors de la construction de l’erreur (version de débogage de Flash Player et application de débogage du lanceur AIR seulement) ; renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> lorsque ni la version de débogage de Flash Player ni l’application de débogage du lanceur AIR n’est utilisée. Comme indiqué dans l’exemple suivant, la première ligne de la valeur renvoyée est une chaîne qui représente l’objet d’exception, suivi par les éléments de la pile de suivi :
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 TypeError: null cannot be converted to an object
	     at com.xyz.OrderEntry.retrieveData(OrderEntry.as:995)
	     at com.xyz.OrderEntry.init(OrderEntry.as:200)
	     at com.xyz.OrderEntry.$construct(OrderEntry.as:148)
   	 </codeblock>
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Error:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	
	Renvoie la chaîne « Error » par défaut ou la valeur contenue dans la propriété Error.message, si elle est définie.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.toString, toString
	 
	 </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiIsOverride class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiIsOverride "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Message d’erreur.
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie le message d’erreur ou le terme « Error » si le message n’est pas défini.
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	
	Renvoie la chaîne <codeph class="+ topic/ph pr-d/codeph ">"Error"</codeph> par défaut ou la valeur contenue dans la propriété <codeph class="+ topic/ph pr-d/codeph ">Error.message</codeph>, si elle est définie.
	
    </apiDesc><example conref="examples\Error.toString.1.as" class="- topic/example "> L’exemple suivant crée un nouvel objet Error, <codeph class="+ topic/ph pr-d/codeph ">err</codeph> puis, à l’aide du constructeur <codeph class="+ topic/ph pr-d/codeph ">Error()</codeph>, affecte la chaîne <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph> à <codeph class="+ topic/ph pr-d/codeph ">err</codeph>. Enfin, la propriété <codeph class="+ topic/ph pr-d/codeph ">message</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">"Another New Error Message"</codeph>, qui remplace <codeph class="+ topic/ph pr-d/codeph ">"New Error Message"</codeph>.
 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var err:Error = new Error();
trace(err.toString());    // Error

err = new Error("New Error Message");
trace(err.toString());    // Error: New Error Message

err.message = "Another New Error Message";
trace(err.toString());    // Error: Another New Error Message
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Error/message" class="- topic/link "><linktext class="- topic/linktext ">Error.message</linktext></link><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiOperation><apiValue id="Error:message" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">message</apiName><shortdesc class="- topic/shortdesc ">
	 Contient le message associé à l’objet Error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.message, message
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Contient le message d’erreur associé à l’occurrence de Error.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Contient le message associé à l’objet Error. Par défaut, la valeur de cette propriété est "<codeph class="+ topic/ph pr-d/codeph ">Error</codeph>". Vous pouvez spécifier une propriété <codeph class="+ topic/ph pr-d/codeph ">message</codeph> lorsque vous créez un objet Error en transmettant la chaîne d’erreur à la fonction constructeur <codeph class="+ topic/ph pr-d/codeph ">Error</codeph>.
	 
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
	  Contient le nom de l’objet Error.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.name, name
	  
	  </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Nom de l’occurrence de Error.
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	  Contient le nom de l’objet Error. Par défaut, la valeur de cette propriété est "<codeph class="+ topic/ph pr-d/codeph ">Error</codeph>".
	 
 	 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#throw" class="- topic/link "><linktext class="- topic/linktext ">statements.html#throw</linktext></link><link href="statements.html#try..catch..finally" class="- topic/link "><linktext class="- topic/linktext ">statements.html#try..catch..finally</linktext></link></related-links></apiValue><apiValue id="Error:errorID:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">errorID</apiName><shortdesc class="- topic/shortdesc ">
     Contient le numéro de référence associé au message d’erreur spécifique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error.errorID, errorID
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Contient le numéro de l’erreur.
     
     
     </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Contient le numéro de référence associé au message d’erreur spécifique. Pour un objet Error personnalisé, ce nombre correspond à la valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">id</codeph> fourni dans le constructeur.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:TypeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">TypeError</apiName><shortdesc class="- topic/shortdesc ">
 Une exception TypeError est renvoyée lorsque le type réel d’une opérande ne correspond pas au type prévu.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Error, TypeError
 
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Error</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Une exception TypeError est renvoyée lorsque le type réel d’une opérande ne correspond pas au type prévu. 
 <p class="- topic/p ">
 Cette exception est également renvoyée dans les cas suivants :
  <ul class="- topic/ul "><li class="- topic/li ">Un paramètre réel de fonction ou de méthode ne peut pas être forcé à correspondre au type de paramètre formel.</li><li class="- topic/li ">Une valeur est affectée à une variable et ne peut pas être forcée à correspondre au type de la variable.</li><li class="- topic/li ">Le côté droit de l’opérateur <codeph class="+ topic/ph pr-d/codeph ">is</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">occurrenceof</codeph> n’est pas un type valide.</li><li class="- topic/li ">L’utilisation du mot-clé <codeph class="+ topic/ph pr-d/codeph ">super</codeph> n’est pas valide.</li><li class="- topic/li ">Une recherche de propriété donne lieu à plusieurs liaisons, soit un résultat ambigu.</li><li class="- topic/li ">Une méthode est appelée pour un objet incompatible. Par exemple, une exception TypeError est renvoyée si une méthode de la classe RegExp est « greffée » sur un objet générique, puis appelée.</li></ul>
 </p>
 
 </apiDesc><example conref="examples\TypeErrorExample.as" class="- topic/example "> L’exemple suivant indique comment générer une exception TypeError et la traiter avec une instruction <codeph class="+ topic/ph pr-d/codeph ">try..catch</codeph>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;

    public class TypeErrorExample extends Sprite {
        public function TypeErrorExample() {
            try {
                var child:Object = new Object();
                addChild(DisplayObject(child));
            }
            catch(e:TypeError) {
                trace(e);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#is" class="- topic/link "><linktext class="- topic/linktext ">opérateur is</linktext></link><link href="operators.html#instanceof" class="- topic/link "><linktext class="- topic/linktext ">opérateur occurrenceof</linktext></link><link href="statements.html#super" class="- topic/link "><linktext class="- topic/linktext ">instruction super</linktext></link><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">classe RegExp</linktext></link></related-links><apiConstructor id="TypeError:TypeError" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">TypeError</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet TypeError.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">message</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Contient le message associé à l’objet TypeError. 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet TypeError.
     </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier languages="" id="globalClassifier:arguments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">arguments</apiName><shortdesc class="- topic/shortdesc ">
 Un objet arguments permet de stocker les arguments d’une fonction et d’y accéder.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Un objet arguments permet de stocker les arguments d’une fonction et d’y accéder.
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Un objet arguments permet de stocker les arguments d’une fonction et d’y accéder. Dans le corps d’une fonction, vous pouvez accéder à l’objet arguments par le biais de la variable arguments locale.
 <p class="- topic/p ">
 Les arguments sont stockés sous forme d’éléments de tableau : le premier est accessible sous la forme <codeph class="+ topic/ph pr-d/codeph ">arguments[0]</codeph>, le deuxième en tant qu’<codeph class="+ topic/ph pr-d/codeph ">arguments[1]</codeph>, etc. La propriété <codeph class="+ topic/ph pr-d/codeph ">arguments.length</codeph> indique le nombre d’arguments transmis à la fonction. Le nombre d’arguments transmis peut différer du nombre déclaré par la fonction.
 </p>
 <p class="- topic/p ">
 A l’encontre des versions précédentes d’ActionScript, ActionScript 3.0 n’intègre pas de propriété <codeph class="+ topic/ph pr-d/codeph ">arguments.caller</codeph>. Pour définir une référence à la fonction qui a appelé la fonction en cours, vous devez transmettre une référence à cette dernière en tant qu’argument. Cette technique est illustrée dans l’exemple associé à <codeph class="+ topic/ph pr-d/codeph ">arguments.callee</codeph>.
 </p>
 <p class="- topic/p ">ActionScript 3.0 intègre un nouveau mot-clé <codeph class="+ topic/ph pr-d/codeph ">...(rest)</codeph>, que nous vous recommandons d’utiliser de préférence à la classe arguments.</p>
 
 </apiDesc><example conref="examples\ArgumentsExample.as" class="- topic/example "> L’exemple suivant présente les différents usages pour différentes propriétés <codeph class="+ topic/ph pr-d/codeph ">arguments</codeph>, telles que <codeph class="+ topic/ph pr-d/codeph ">callee</codeph> et <codeph class="+ topic/ph pr-d/codeph ">length</codeph> .
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        public function ArgumentsExample() {
                println("Hello World");
        }
        
        public function println(str:String):void {
            trace(arguments.callee == this.println); // true
            trace(arguments.length);                 // 1
            trace(arguments[0]);                     // Hello World
            trace(str);                                // Hello World
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="statements.html#..._(rest)_parameter" class="- topic/link "><linktext class="- topic/linktext ">...(rest)</linktext></link><link href="#Function" class="- topic/link "><linktext class="- topic/linktext ">Fonction</linktext></link></related-links><apiValue id="arguments:callee" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">callee</apiName><shortdesc class="- topic/shortdesc ">
	 Référence à la fonction en cours d’exécution.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Function</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Référence à la fonction en cours d’exécution.
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Référence à la fonction en cours d’exécution.
	 
	 </apiDesc><example conref="examples\arguments.callee.1.as" class="- topic/example "> Le code suivant indique comment obtenir une référence à la fonction qui appelle la fonction nommée <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph>. La fonction <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> reçoit l’argument booléen <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour démontrer que <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> appelle avec succès <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> et pour empêcher une boucle infinie de fonctions qui s’appellent les unes les autres.
  
 <p class="- topic/p ">Dans la mesure où le paramètre <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> est défini sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph> appelle <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> et se transmet une référence à lui-même en tant que seul argument. La fonction <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph> reçoit cet argument et le stocke à l’aide d’un paramètre appelé <codeph class="+ topic/ph pr-d/codeph ">caller</codeph>, qui appartient au type de données Function. A partir de <codeph class="+ topic/ph pr-d/codeph ">secondFunction()</codeph>, le paramètre <codeph class="+ topic/ph pr-d/codeph ">caller</codeph> est ensuite utilisé pour appeler la fonction <codeph class="+ topic/ph pr-d/codeph ">firstFunction</codeph>, mais cette fois avec l’argument <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> défini sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
 <p class="- topic/p ">Lorsque l’exécution revient à <codeph class="+ topic/ph pr-d/codeph ">firstFunction()</codeph>, l’instruction <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> est exécutée, car <codeph class="+ topic/ph pr-d/codeph ">callSecond</codeph> est <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.</p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
  package {
    import flash.display.Sprite;
    
    public class ArgumentsExample extends Sprite {
        private var count:int = 1;
        
        public function ArgumentsExample() {
            firstFunction(true);
        }

        public function firstFunction(callSecond:Boolean) {
            trace(count + ": firstFunction");
            if(callSecond) {
                secondFunction(arguments.callee);
            }
            else {
                trace("CALLS STOPPED");
            }
        }

        public function secondFunction(caller:Function) {
            trace(count + ": secondFunction\n");
            count++;
            caller(false);
        }        
    }
} 
</codeblock></example></apiValueDetail></apiValue><apiValue id="arguments:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
	 Nombre d’arguments transmis à la fonction.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="8" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Nombre de paramètres transmis à la fonction.
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Nombre d’arguments transmis à la fonction. Ce nombre peut être supérieur ou inférieur à celui déclaré par la fonction.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
 La classe String est un type de données qui représente une chaîne de caractères.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe String est un type de données qui représente une chaîne de caractères. Elle fournit des méthodes et propriétés permettant de manipuler les types de valeur de chaîne primitive. Vous pouvez convertir la valeur d’un objet en un objet au type de données String à l’aide de la fonction <codeph class="+ topic/ph pr-d/codeph ">String()</codeph>. 
 <p class="- topic/p ">
 Tous les index de chaîne étant de base zéro, l’index du dernier caractère pour une chaîne <codeph class="+ topic/ph pr-d/codeph ">x</codeph> est <codeph class="+ topic/ph pr-d/codeph ">x.length - 1</codeph>.
 </p><p class="- topic/p ">
 Vous pouvez appeler l’une des méthodes de la classe String que vous utilisiez la méthode constructeur <codeph class="+ topic/ph pr-d/codeph ">new String()</codeph> pour créer une variable de type chaîne ou que vous affectiez simplement une valeur de littéral de type chaîne. A l’encontre des versions précédentes d’ActionScript, l’utilisation du constructeur, de la fonction globale ou l’affectation d’une valeur de littéral de chaîne ne fait aucune différence. Les lignes de code suivantes sont équivalentes :
 </p>
 <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var str:String = new String("foo");
 var str:String = "foo";
 var str:String = String("foo");</codeblock>
 <p class="- topic/p ">Lorsqu’ils définissent une variable de type chaîne sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>, les moteurs d’exécution de Flash imposent le remplacement de <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> par <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. De ce fait, l’instruction :</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var s:String = undefined;</pre>
 règle la valeur sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> au lieu de <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>. Utilisez la fonction <codeph class="+ topic/ph pr-d/codeph ">String()</codeph> pour obtenir <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
 </apiDesc><example conref="examples\StringExample.as" class="- topic/example "> L’exemple suivant a recours aux classes StringExample et StringHelper pour indiquer la façon dont les différentes méthodes de la classe String sont utilisées. Pour ce faire, exécutez la procédure suivante :
 <ol class="- topic/ol "><li class="- topic/li ">Le constructeur de StringExample déclare plusieurs occurrences String locales, qui sont initialisées avec différentes chaînes et un nouvel objet StringHelper.</li><li class="- topic/li ">La classe StringHelper dispose des méthodes suivantes :
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> : appelle les méthodes <codeph class="+ topic/ph pr-d/codeph ">split()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">join()</codeph> de String pour supprimer une sous-chaîne de la chaîne transmise avec une nouvelle sous-chaîne.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trim()</codeph> : appelle <codeph class="+ topic/ph pr-d/codeph ">trimBack()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">trimFront()</codeph> à l’aide des chaînes transmises et renvoie la chaîne mise à jour.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trimFront()</codeph> : supprime de façon récursive tous les caractères qui correspondent au caractère <codeph class="+ topic/ph pr-d/codeph ">char</codeph>, en commençant par le début de la chaîne et en allant vers sa fin, jusqu’à ce que le premier caractère de la chaîne ne corresponde pas à <codeph class="+ topic/ph pr-d/codeph ">char</codeph> et renvoie la chaîne mise à jour.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">trimBack()</codeph> : supprime de façon récursive tous les caractères qui correspondent au caractère <codeph class="+ topic/ph pr-d/codeph ">char</codeph>, en commençant par la fin de la chaîne et en allant vers l’arrière, jusqu’à ce que le dernier caractère de la chaîne ne corresponde pas à <codeph class="+ topic/ph pr-d/codeph ">char</codeph> et renvoie la chaîne mise à jour.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">stringToCharacter()</codeph> : renvoie le premier caractère de la chaîne qui lui a été transmise.</li></ul>
  </li><li class="- topic/li ">Trois chaînes sont ensuite produites à l’aide des variables déclarées avec un appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> qui est utilisée pour produire la deuxième chaîne et <codeph class="+ topic/ph pr-d/codeph ">trim()</codeph> pour produire la troisième chaîne.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class StringExample extends Sprite {
        public function StringExample() {
            var companyStr:String = new String("     Company X");
            var productStr:String = "Product Z Basic     ";
            var emptyStr:String = " ";
            var strHelper:StringHelper = new StringHelper();

            var companyProductStr:String = companyStr + emptyStr + productStr;
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Basic     '

            companyProductStr = strHelper.replace(companyProductStr, "Basic", "Professional");
            trace("'" + companyProductStr + "'");    // '     Company X Product Z Professional     '

            companyProductStr = strHelper.trim(companyProductStr, emptyStr);
            trace("'" + companyProductStr + "'");    // 'Company X Product Z Professional'
        }
    }
}

class StringHelper {
    public function StringHelper() {
    }

    public function replace(str:String, oldSubStr:String, newSubStr:String):String {
        return str.split(oldSubStr).join(newSubStr);
    }

    public function trim(str:String, char:String):String {
        return trimBack(trimFront(str, char), char);
    }

    public function trimFront(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(0) == char) {
            str = trimFront(str.substring(1), char);
        }
        return str;
    }

    public function trimBack(str:String, char:String):String {
        char = stringToCharacter(char);
        if (str.charAt(str.length - 1) == char) {
            str = trimBack(str.substring(0, str.length - 1), char);
        }
        return str;
    }

    public function stringToCharacter(str:String):String {
        if (str.length == 1) {
            return str;
        }
        return str.slice(0, 1);
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="package.html#String()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale String()</linktext></link></related-links><apiConstructor id="String:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
  Crée un objet String initialisé sur la chaîne spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, new string, new, constructor
   
   </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur initiale du nouvel objet String.
  
  </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
  Crée un objet String initialisé sur la chaîne spécifiée.
  
  <p class="- topic/p ">
  <b class="+ topic/ph hi-d/b ">Remarque : </b>les littéraux de chaîne utilisant moins de temps système que les objets String et étant généralement plus faciles à utiliser, il est recommandé de faire appel à eux plutôt qu’à la classe String, sauf si vous avez une bonne raison d’utiliser un objet String plutôt qu’un littéral de chaîne.
  </p>
  
  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="String:AS3:charAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">charAt</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie le caractère correspondant à la position spécifiée par le paramètre index.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.charat, charat, character at
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le caractère correspondant à l’index spécifié, ou une chaîne vide si l’index spécifié n’est pas compris dans la plage des index de cette chaîne.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier spécifiant la position d’un caractère dans la chaîne. Le premier caractère est indiqué par <codeph class="+ topic/ph pr-d/codeph ">0</codeph> et le dernier par <codeph class="+ topic/ph pr-d/codeph ">my_str.length - 1</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie le caractère correspondant à la position spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">index</codeph>. Si <codeph class="+ topic/ph pr-d/codeph ">index</codeph> n’est pas un nombre compris entre 0 et <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph>, une chaîne vide est renvoyée.
     <p class="- topic/p ">
     Cette méthode est similaire à <codeph class="+ topic/ph pr-d/codeph ">String.charCodeAt()</codeph>, sauf que la valeur renvoyée est un caractère, plutôt qu’un code de caractère entier 16 bits.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/charCodeAt()" class="- topic/link "><linktext class="- topic/linktext ">charCodeAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:charCodeAt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">charCodeAt</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie le code numérique du caractère Unicode correspondant à l’index spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.charcodeat, charcodeat, character code at
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le code du caractère Unicode correspondant à l’index spécifié, ou <codeph class="+ topic/ph pr-d/codeph "> NaN</codeph> si l’index spécifié n’est pas compris dans la plage des index de cette chaîne.
     <p class="- topic/p ">Les valeurs Unicode sont définies sur la page <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> (disponible en anglais uniquement). </p>       
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">index</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier spécifiant la position d’un caractère dans la chaîne. Le premier caractère est indiqué par <codeph class="+ topic/ph pr-d/codeph ">0,</codeph> et le dernier par <codeph class="+ topic/ph pr-d/codeph ">my_str.length - 1</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie le code numérique du caractère Unicode correspondant à l’<codeph class="+ topic/ph pr-d/codeph ">index</codeph> spécifié. Si <codeph class="+ topic/ph pr-d/codeph ">index</codeph> n’est pas un nombre compris entre 0 et <codeph class="+ topic/ph pr-d/codeph "> string.length - 1</codeph>, <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> est renvoyé.
     <p class="- topic/p ">
     Cette méthode est similaire à <codeph class="+ topic/ph pr-d/codeph ">String.charAt()</codeph>, sauf que la valeur renvoyée est un code de caractère entier 16 bits, pas le caractère en tant que tel.
     </p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/charAt()" class="- topic/link "><linktext class="- topic/linktext ">charAt()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute les arguments fournis à la fin de l’objet String en les convertissant en chaînes si besoin est, et renvoie la chaîne obtenue.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.concat, concat, concatenate
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvelle chaîne composée de cette chaîne concaténée avec les paramètres spécifiés.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeurs supérieures ou égales à zéro à concaténer.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute les arguments fournis à la fin de l’objet String en les convertissant en chaînes si besoin est, et renvoie la chaîne obtenue. La valeur d’origine de l’objet String source n’est pas modifiée.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:fromCharCode" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">fromCharCode</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie une chaîne comprenant les caractères représentés par les codes de caractère Unicode dans les paramètres.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.fromcharcode, fromcharcode, from character code
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne correspondant aux codes de caractère Unicode spécifiés.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">charCodes</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Série d’entiers décimaux représentant les valeurs Unicode.
    <p class="- topic/p ">Les valeurs Unicode sont définies sur la page <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> (disponible en anglais uniquement). </p>       
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie une chaîne comprenant les caractères représentés par les codes de caractère Unicode dans les paramètres.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     Recherche la chaîne et renvoie la position de la première occurrence de val détectée au niveau de ou après startIndex dans la chaîne appelante.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.indexof, indexof, index
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Index de la première occurrence de la sous-chaîne spécifiée ou <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Sous-chaîne à rechercher.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier facultatif spécifiant l’index de départ de la recherche.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recherche la chaîne et renvoie la position de la première occurrence de <codeph class="+ topic/ph pr-d/codeph ">val</codeph> détectée au niveau de ou après <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> dans la chaîne appelante. Cet index commence à partir de zéro, ce qui signifie que le premier caractère d’une chaîne est considéré comme étant à l’index 0, et non pas à l’index 1. Si <codeph class="+ topic/ph pr-d/codeph ">val</codeph> n’est pas détecté, la méthode renvoie -1.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">lastIndexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     Recherche la chaîne de droite à gauche et renvoie l’index de la dernière occurrence de val détectée avant startIndex.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.lastindexof, lastindexof, last index of
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La position de la dernière occurrence de la sous-chaîne spécifiée ou -1 si elle est introuvable.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">val</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne à rechercher.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7FFFFFFF</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier facultatif spécifiant l’index de départ de la recherche de <codeph class="+ topic/ph pr-d/codeph ">val</codeph>. La valeur par défaut correspond à la valeur maximale autorisée d’un index. Si vous ne spécifiez pas <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>, la recherche débute par le dernier élément de la chaîne.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recherche la chaîne de droite à gauche et renvoie l’index de la dernière occurrence de <codeph class="+ topic/ph pr-d/codeph ">val</codeph> détectée avant <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>. L’index commence à zéro, ce qui signifie que le premier caractère occupe la position d’index 0 et le dernier, <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph>. Si <codeph class="+ topic/ph pr-d/codeph ">val</codeph> n’est pas détecté, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">indexOf()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:localeCompare" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">localeCompare</apiName><shortdesc class="- topic/shortdesc ">
     Compare l’ordre de tri de deux chaînes ou plus et renvoie le résultat de la comparaison sous forme d’entier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La valeur 0 si les chaînes sont égales. Dans le cas contraire, un entier négatif si la chaîne d’origine est inférieure à l’argument chaîne et un entier positif si l’argument chaîne est inférieur à la chaîne d’origine. Dans les deux cas, la valeur absolue du nombre représente l’écart entre les deux chaînes.
      
      </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">other</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de chaîne à comparer.
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">values</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ensemble facultatif d’autres chaînes à comparer.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Compare l’ordre de tri de deux chaînes ou plus et renvoie le résultat de la comparaison sous forme d’entier. Bien que cette méthode soit conçue pour traiter la comparaison en fonction des paramètres régionaux en vigueur, l’implémentation d’ActionScript 3.0 ne produit pas un résultat différent des autres comparaisons de chaînes, telles que les opérateurs d’égalité (<codeph class="+ topic/ph pr-d/codeph ">==</codeph>) ou d’inégalité (<codeph class="+ topic/ph pr-d/codeph ">!=</codeph>). Si les chaînes sont équivalentes, la valeur renvoyée est 0. Si la valeur de la chaîne d’origine est inférieure à la valeur de la chaîne spécifiée par <codeph class="+ topic/ph pr-d/codeph ">other</codeph>, la valeur renvoyée est un entier négatif, dont la valeur absolue représente le nombre de caractères qui séparent les deux valeurs de chaîne. Si la valeur de la chaîne d’origine est supérieure à <codeph class="+ topic/ph pr-d/codeph ">other</codeph>, la valeur renvoyée est un entier positif, dont la valeur absolue représente le nombre de caractères qui séparent les deux valeurs de chaîne.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:match" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">match</apiName><shortdesc class="- topic/shortdesc ">
    Met en correspondance le paramètre pattern spécifié et la chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre "><code>
       var myPattern:RegExp = /sh./g;  
          // The dot (.) matches any character.
       var str:String = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: she,sho
    
       myPattern = /sh./gi;  
          // This time, make it case insensitive (with the i flag).
       str = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: She,she,sho  
    
       myPattern = RegExp = new RegExp("sh(.)", "gi")  
          // Note the grouping parentheses.
       str = "She sells seashells by the seashore.";
       trace(str.match(myPattern));  
    
          // Output: She,e,she,e,sho,o
          // Note that the result array is 
          // [[She,e],[she,e],[sho,o]] 
    </code></pre>
    
    </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau de chaînes contenant toutes les sous-chaînes de la chaîne qui correspondent au paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> spécifié.
    
    <p class="- topic/p ">Si <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> est une expression régulière, l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) doit être défini dans celle-ci pour renvoyer un tableau contenant plus d’une sous-chaîne correspondante : </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) n’est <i class="+ topic/ph hi-d/i ">pas</i> défini, le tableau renvoyé ne contient qu’une seule correspondance, et la propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de l’expression régulière n’est pas modifiée.</li><li class="- topic/li ">Si l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) <i class="+ topic/ph hi-d/i ">est</i> défini, la méthode démarre la recherche au début de la chaîne (position d’index 0). Si une sous-chaîne correspondante est une chaîne vide (ce qui risque de se produire avec une expression régulière telle que <codeph class="+ topic/ph pr-d/codeph ">/x~~/</codeph>), la méthode ajoute cette chaîne vide au tableau des correspondances, puis poursuit la recherche à la position d’index suivante. La propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> de l’expression régulière est définie sur 0 une fois la méthode terminée. </li></ul>
    
    <p class="- topic/p ">S’il n’existe aucune correspondance, la méthode renvoie un tableau vide. Si vous ne transmettez pas de valeur (ou si vous transmettez une valeur non définie) en tant que paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph>, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.</p>
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les critères à rechercher, susceptibles de correspondre à n’importe quel type d’objet, mais généralement réglés sur une chaîne ou une expression régulière. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> n’est ni une expression régulière, ni une chaîne, la méthode le convertit en chaîne avant de s’exécuter. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Met en correspondance le paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> spécifié et la chaîne.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:replace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">replace</apiName><shortdesc class="- topic/shortdesc ">
    Compare les critères (pattern) spécifiés à la chaîne et renvoie une nouvelle chaîne dans laquelle la première correspondance de pattern est remplacée par le contenu spécifié par repl.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La chaîne obtenue. Notez que la chaîne source n’est pas modifiée.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les critères à rechercher, susceptibles de correspondre à n’importe quel type d’objet, mais généralement réglés sur une chaîne ou une expression régulière. Si vous spécifiez un paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> correspondant à tout objet autre qu’une chaîne ou une expression régulière, la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> est appliquée au paramètre et la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> s’exécute en utilisant la chaîne obtenue en tant que critère (<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph>). 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">repl</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">En règle générale, la chaîne qui remplace le contenu correspondant. Vous pouvez également utiliser une fonction en tant que paramètre. Dans ce cas, la chaîne renvoyée par la fonction remplace le contenu correspondant.
    
    <p class="- topic/p ">Si vous spécifiez une chaîne en tant que paramètre <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> et que vous définissez une expression régulière en tant que paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph>, vous pouvez utiliser les <i class="+ topic/ph hi-d/i ">codes de remplacement $</i> spéciaux suivants dans la chaîne <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> :</p>
    
    <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry NOWRAP="true" class="- topic/entry ">$ Code
      </entry><entry class="- topic/entry ">Texte de remplacement
      </entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$$</codeph>
      </entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph>
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$&amp;</codeph>
      </entry><entry class="- topic/entry ">Sous-chaîne correspondante.
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$`</codeph> 
      </entry><entry class="- topic/entry ">Partie de la chaîne qui précède la sous-chaîne correspondante. Notez que ce code utilise le guillemet droit simple de gauche (`) plutôt que le guillemet droit simple (’) ou le guillemet courbe simple de gauche ().
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$’</codeph>
      </entry><entry class="- topic/entry ">Partie de la chaîne qui suit la sous-chaîne correspondante. Notez que ce code utilise le guillemet droit simple (’).
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph><i class="+ topic/ph hi-d/i ">n</i>
      </entry><entry class="- topic/entry "><i class="+ topic/ph hi-d/i ">N</i>ième groupe entre parenthèses correspondant capturé, où <i class="+ topic/ph hi-d/i ">n</i> est un chiffre compris entre 1 et 9 et <codeph class="+ topic/ph pr-d/codeph ">$</codeph><i class="+ topic/ph hi-d/i ">n</i> n’est pas suivi d’une décimale. 
      </entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph><i class="+ topic/ph hi-d/i ">nn</i>
      </entry><entry class="- topic/entry "><i class="+ topic/ph hi-d/i ">Nn</i>ième groupe entre parenthèses correspondant capturé, où <i class="+ topic/ph hi-d/i ">nn</i> est un nombre décimal à deux chiffres compris entre 01 et 99. Si la <i class="+ topic/ph hi-d/i ">nn</i>ième capture n’est pas définie, le texte de remplacement est une chaîne vide. 
      </entry></row></tbody></tgroup></adobetable>
    
    <p class="- topic/p ">L’exemple suivant illustre l’utilisation des codes de remplacement <codeph class="+ topic/ph pr-d/codeph ">$2</codeph> et <codeph class="+ topic/ph pr-d/codeph ">$1</codeph>, qui représentent le premier et le deuxième groupes capturés correspondants :</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var str:String = "flip-flop";
    var pattern:RegExp = /(\w+)-(\w+)/g;
    trace(str.replace(pattern, "$2-$1")); // flop-flip</codeblock>
    
    <p class="- topic/p ">Si vous spécifiez une fonction en tant que paramètre <codeph class="+ topic/ph pr-d/codeph ">repl</codeph>, la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> transmet les paramètres suivants à la fonction :
    </p>
    
    <ul class="- topic/ul "><li class="- topic/li ">
      La partie correspondante de la chaîne.
      </li><li class="- topic/li ">
      Tout groupe entre parenthèses capturé correspondant est spécifié en tant qu’arguments suivants. Le nombre d’arguments transmis de cette façon varie selon le nombre de correspondances entre parenthèses. Pour déterminer le nombre de correspondances entre parenthèses, vérifiez <codeph class="+ topic/ph pr-d/codeph ">arguments.length - 3</codeph> dans le code de la fonction.
      </li><li class="- topic/li ">
      La position d’index dans la chaîne où débute la correspondance.
      </li><li class="- topic/li ">
      La chaîne complète.
      </li></ul>
    
    <p class="- topic/p ">Considérons par exemple ce qui suit :</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var str1:String = "abc12 def34";
    var pattern:RegExp = /([a-z]+)([0-9]+)/;
    var str2:String = str1.replace(pattern, replFN);
    trace (str2);   // 12abc 34def
    
    function replFN():String {
      return arguments[2] + arguments[1];
    }</codeblock>
    
    
    <p class="- topic/p ">L’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> utilise une fonction en tant que paramètre <codeph class="+ topic/ph pr-d/codeph ">repl</codeph>. Deux correspondances sont détectées pour l’expression régulière (<codeph class="+ topic/ph pr-d/codeph ">/([a-z]([0-9]/g</codeph>). La première fois, les critères correspondent à la sous-chaîne <codeph class="+ topic/ph pr-d/codeph ">"abc12"</codeph> et la liste suivante d’arguments est transmise à la fonction :
    </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    {"abc12", "abc", "12", 0, "abc12 def34"}</codeblock>
    
    
    <p class="- topic/p ">La seconde fois, les critères correspondent à la sous-chaîne <codeph class="+ topic/ph pr-d/codeph ">"def23"</codeph> et la liste suivante d’arguments est transmise à la fonction :
    </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    {"def34", "def", "34", 6, "abc123 def34"}</codeblock>
    
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Compare les critères (<codeph class="+ topic/ph pr-d/codeph ">pattern</codeph>) spécifiés à la chaîne et renvoie une nouvelle chaîne dans laquelle la première correspondance de <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> est remplacée par le contenu spécifié par <codeph class="+ topic/ph pr-d/codeph ">repl</codeph>. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> peut être une chaîne ou une expression régulière. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">repl</codeph> peut être une chaîne ou une fonction. S’il s’agit d’une fonction, la chaîne renvoyée par la fonction est insérée à la place de la correspondance. La chaîne d’origine n’est pas modifiée.
    
    <p class="- topic/p ">Dans l’exemple suivant, seule la première occurrence de « sh » (le respect de la casse étant activé) est remplacée : </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // She sells seaschells by the seashore.</codeblock>
    
    <p class="- topic/p ">Dans l’exemple suivant, toutes les occurrences de « sh » (le respect de la casse étant activé) sont remplacées, car l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) est défini dans l’expression régulière : </p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/g;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // She sells seaschells by the seaschore.</codeblock>
    
    <p class="- topic/p ">Dans l’exemple suivant, toutes les occurrences de « sh » sont remplacées, car l’indicateur <codeph class="+ topic/ph pr-d/codeph ">g</codeph> (global) est défini dans l’expression régulière et les correspondances ne respectent <i class="+ topic/ph hi-d/i ">pas</i> la casse, car l’indicateur <codeph class="+ topic/ph pr-d/codeph ">i</codeph> (ignoreCase) est défini :</p>
    
    <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
    var myPattern:RegExp = /sh/gi;  
    var str:String = "She sells seashells by the seashore.";
    trace(str.replace(myPattern, "sch"));  
       // sche sells seaschells by the seaschore.</codeblock>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:search" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">search</apiName><shortdesc class="- topic/shortdesc ">
    Recherche le paramètre pattern spécifié et renvoie l’index de la première sous-chaîne correspondante.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample><pre xml:space="preserve" class="- topic/pre "><code>
       var str:String = "She sells seashells by the seashore.";
       var myPattern:RegExp = /sh/;  
          // This time, make it case insensitive (with the i flag).
       trace(str.match(myPattern));  
    
          // Output: 13
          // (The substring match starts at character position 13.)
    
       var myPattern:RegExp = /sh/i;
       trace(str.match(myPattern));  
    
          // Output: 0
          // (The substring match starts at character position 0 
          //   -- the first character of the source string.)
    </code></pre>
    
    </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">L’index de la première sous-chaîne correspondante ou <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> si aucune correspondance n’est détectée. Notez que la chaîne est associée à l’index zéro. Le premier caractère de la chaîne occupe la position d’index 0 et le dernier caractère, <codeph class="+ topic/ph pr-d/codeph ">string.length - 1</codeph>. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">pattern</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Les critères à rechercher, susceptibles de correspondre à n’importe quel type d’objet, mais généralement réglés sur une chaîne ou une expression régulière. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> n’est ni une expression régulière, ni une chaîne, la méthode le convertit en chaîne avant de s’exécuter. Notez que si vous spécifiez une expression régulière, la méthode ignore l’indicateur global (« g ») de cette dernière, ainsi que sa propriété <codeph class="+ topic/ph pr-d/codeph ">lastIndex</codeph> (et ne modifie pas l’expression régulière). Si vous transmettez une valeur non définie (ou si vous ne transmettez pas de valeur), la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Recherche le paramètre <codeph class="+ topic/ph pr-d/codeph ">pattern</codeph> spécifié et renvoie l’index de la première sous-chaîne correspondante. Si aucune sous-chaîne correspondante n’est détectée, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">-1</codeph>.
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une chaîne qui contient le caractère startIndex et tous les autres caractères jusqu’au caractère endIndex, ce dernier n’étant pas inclus.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.slice, slice
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Sous-chaîne basée sur les index spécifiés.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Index commençant à zéro du point de départ de la découpe. Si <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est un nombre négatif, la découpe est créée de droite à gauche, -1 représentant le dernier caractère.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier correspondant à 1+ l’index du point de terminaison de la découpe. Le caractère indexé par le paramètre <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> n’est pas inclus dans la chaîne extraite. Si <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> correspond à un nombre négatif, le point de terminaison est calculé à partir de la fin de la chaîne, -1 représentant le dernier caractère. La valeur par défaut correspond à la valeur maximale autorisée d’un index. Si ce paramètre est omis, <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> est utilisé.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une chaîne qui contient le caractère <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et tous les autres caractères jusqu’au caractère <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, ce dernier n’étant pas inclus. L’objet String d’origine n’est pas modifié. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> n’est pas spécifié, la fin de la sous-chaîne correspond à la fin de la chaîne. Si le caractère indexé par <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est identique au caractère indexé par <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> ou s’il se trouve à droite de ce caractère, la méthode renvoie une chaîne vide.
     
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/substr()" class="- topic/link "><linktext class="- topic/linktext ">substr()</linktext></link><link href="#String/substring()" class="- topic/link "><linktext class="- topic/linktext ">substring()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:split" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">split</apiName><shortdesc class="- topic/shortdesc ">
     Divise un objet String en un tableau de sous-chaînes en le divisant à chaque occurrence du paramètre delimiter spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.split, split
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau de sous-chaînes.
     
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">delimiter</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Critères qui spécifient l’endroit où diviser cette chaîne. Cet objet peut être de tout type, mais correspond généralement à une chaîne ou à une expression régulière. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> n’est ni une expression régulière, ni une chaîne, la méthode le convertit en chaîne avant de s’exécuter. 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">limit</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre maximal d’éléments à placer dans le tableau. La valeur par défaut correspond à la valeur maximale autorisée. 
     
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Divise un objet String en un tableau de sous-chaînes en le divisant à chaque occurrence du paramètre <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> spécifié. 
     
     <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> est une expression régulière, seule la première correspondance à une position donnée de la chaîne est prise en compte, même si un retour en arrière est susceptible de détecter une sous-chaîne non vide à cette position. Par exemple :</p>
     
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "ab";
     var results:Array = str.split(/a~~?/); // results == ["","b"]
     
     results = str.split(/a~~/); // results == ["","b"].)</codeblock>
     
     
     <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> est une expression régulière contenant des parenthèses de regroupement, à chaque détection d’une correspondance de <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph>, les résultats, y compris tout résultat non défini, des parenthèses de regroupement sont rassemblés dans le tableau de sortie. Par exemple :</p>
     
     <codeblock rev="3.0" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "Thi5 is a tricky-66 example.";
     var re:RegExp = /(\d+)/;
     var results:Array = str.split(re);
         // results == ["Thi","5"," is a tricky-","66"," example."]</codeblock>
     
     
     <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">limit</codeph> est spécifié, le nombre d’éléments du tableau renvoyé ne dépasse pas le nombre spécifié.</p>
     <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> est une chaîne vide, une expression régulière vide ou une expression régulière qui peut correspondre à une chaîne vide, chaque caractère de la chaîne est renvoyé en tant qu’élément du tableau.</p>
     
     <p class="- topic/p ">Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">delimiter</codeph> n’est pas défini, l’ensemble de la chaîne est placé dans le premier élément du tableau renvoyé. </p>     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array/join()" class="- topic/link "><linktext class="- topic/linktext ">Array.join()</linktext></link><link href="#RegExp" class="- topic/link "><linktext class="- topic/linktext ">RegExp</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:substr" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">substr</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une sous-chaîne dont le premier caractère correspond à la position startIndex indiquée et dont la longueur est spécifiée par len.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.substr, substr, substring
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Sous-chaîne basée sur les paramètres spécifiés.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier qui indique l’index du premier caractère à utiliser pour créer la sous-chaîne. Si <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> correspond à un nombre négatif, le point de départ est déterminé à partir de la fin de la chaîne, <codeph class="+ topic/ph pr-d/codeph ">-1</codeph> représentant le dernier caractère.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">len</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre de caractères de la sous-chaîne en cours de création. La valeur par défaut correspond à la valeur maximale autorisée. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">len</codeph> n’est pas spécifié, la sous-chaîne contient tous les caractères, de <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> à la fin de la chaîne.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une sous-chaîne dont le premier caractère correspond à la position <codeph class="+ topic/ph pr-d/codeph "> startIndex</codeph> indiquée et dont la longueur est spécifiée par <codeph class="+ topic/ph pr-d/codeph ">len</codeph>. La chaîne d’origine n’est pas modifiée.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:substring" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">substring</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une chaîne composée du caractère spécifié par startIndex et de tous les caractères suivants jusqu’à endIndex - 1.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.substring, substring
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Sous-chaîne basée sur les paramètres spécifiés.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier qui indique l’index du premier caractère utilisé pour créer la sous-chaîne. Les valeurs valides de <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> sont comprises entre <codeph class="+ topic/ph pr-d/codeph ">0</codeph> et <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph>. Si <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est une valeur négative, <codeph class="+ topic/ph pr-d/codeph ">0 </codeph> est utilisé.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier correspondant à 1 + l’index du dernier caractère de la sous-chaîne extraite. Les valeurs valides de <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> sont comprises entre <codeph class="+ topic/ph pr-d/codeph ">0</codeph> et <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph>. Le caractère représenté par <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> est exclu de la sous-chaîne. La valeur par défaut correspond à la valeur maximale autorisée d’un index. Si ce paramètre est omis, <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> est utilisé. Si ce paramètre correspond à une valeur négative, <codeph class="+ topic/ph pr-d/codeph ">0</codeph> est utilisé.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une chaîne composée du caractère spécifié par <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et de tous les caractères suivants jusqu’à <codeph class="+ topic/ph pr-d/codeph ">endIndex - 1</codeph>. Si <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> n’est pas spécifié, <codeph class="+ topic/ph pr-d/codeph ">String.length</codeph> est utilisé. Si la valeur de <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est égale à la valeur <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>, la méthode renvoie une chaîne vide. Si la valeur de <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est supérieure à la valeur de <codeph class="+ topic/ph pr-d/codeph "> endIndex</codeph>, les paramètres sont automatiquement permutés avant que la fonction ne s’exécute. La chaîne d’origine n’est pas modifiée.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="String:AS3:toLocaleLowerCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleLowerCase</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères majuscules ont été convertis en minuscules.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de cette chaîne dans laquelle tous les caractères majuscules ont été convertis en minuscules.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères majuscules ont été convertis en minuscules. La chaîne d’origine n’est pas modifiée. Bien que cette méthode soit conçue pour traiter la conversion en fonction des paramètres régionaux en vigueur, l’implémentation d’ActionScript 3.0 ne produit pas un résultat différent de la méthode <codeph class="+ topic/ph pr-d/codeph ">toLowerCase()</codeph>.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toLowerCase()" class="- topic/link "><linktext class="- topic/linktext ">toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLocaleUpperCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleUpperCase</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères minuscules ont été convertis en majuscules.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de cette chaîne dans laquelle tous les caractères minuscules ont été convertis en majuscules.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères minuscules ont été convertis en majuscules. La chaîne d’origine n’est pas modifiée. Bien que cette méthode soit conçue pour traiter la conversion en fonction des paramètres régionaux en vigueur, l’implémentation d’ActionScript 3.0 ne produit pas un résultat différent de la méthode <codeph class="+ topic/ph pr-d/codeph ">toUpperCase()</codeph>.
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toUpperCase()" class="- topic/link "><linktext class="- topic/linktext ">toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toLowerCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLowerCase</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères majuscules ont été convertis en minuscules.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.tolowercase, tolowercase, to lowercase
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de cette chaîne dans laquelle tous les caractères majuscules ont été convertis en minuscules.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères majuscules ont été convertis en minuscules. La chaîne d’origine n’est pas modifiée.
     
     <p class="- topic/p ">Cette méthode convertit tous les caractères (pas seulement A-Z) pour lesquels il existe des équivalents minuscules Unicode :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = " JOSÉ BARÇA";
     trace(str.toLowerCase()); // josé barça</codeblock>
     
     <p class="- topic/p ">Ces mappages de casse sont définis sur la page <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> (disponible en anglais uniquement). </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toUpperCase()" class="- topic/link "><linktext class="- topic/linktext ">toUpperCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:toUpperCase" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toUpperCase</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères minuscules ont été convertis en majuscules.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.touppercase, touppercase, to uppercase
      
      </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de cette chaîne dans laquelle tous les caractères minuscules ont été convertis en majuscules.
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une copie de cette chaîne, dont tous les caractères minuscules ont été convertis en majuscules. La chaîne d’origine n’est pas modifiée.
     
     <p class="- topic/p ">Cette méthode convertit tous les caractères (pas seulement a-z) pour lesquels il existe des équivalents majuscules Unicode :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var str:String = "José Barça";
     trace(str.toUpperCase()); // JOSÉ BARÇA</codeblock>
     
     <p class="- topic/p ">Ces mappages de casse sont définis sur la page <xref href="http://www.unicode.org/ucd/" scope="external" class="- topic/xref ">Unicode Character Database</xref> (disponible en anglais uniquement). </p>
     
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/toLowerCase()" class="- topic/link "><linktext class="- topic/linktext ">toLowerCase()</linktext></link></related-links></apiOperation><apiOperation id="String:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
     Valeur primitive d’une occurrence de String.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><oldexample>The following example creates a new instance of the String class
     and then shows that the <code>valueOf</code> method returns 
     the <i class="+ topic/ph hi-d/i ">primitive</i> value, rather than a reference to the new instance.
     
     <listing version="2.0">
     var str:String = new String("Hello World");
     var value:String = str.valueOf();
     trace(str instanceof String); // true
     trace(value instanceof String); // false
     trace(str === value); // false</listing>
     
     
     </oldexample></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de la chaîne.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Valeur primitive d’une occurrence de String. Cette méthode est conçue pour convertir un objet String en une valeur de chaîne primitive. Etant donné que les moteurs d’exécution de Flash appellent automatiquement la méthode <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph>, il est rarement nécessaire d’y faire explicitement appel.
     
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="String:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     Entier indiquant le nombre de caractères dans l’objet String spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">string, string.length, length
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="read" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Entier indiquant le nombre de caractères dans l’objet String spécifié.
     <p class="- topic/p ">
     Tous les index de chaîne étant de base zéro, l’index du dernier caractère pour une chaîne <codeph class="+ topic/ph pr-d/codeph ">x</codeph> est <codeph class="+ topic/ph pr-d/codeph ">x.length - 1</codeph>.
     </p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Class" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Class</apiName><shortdesc class="- topic/shortdesc ">
 Un objet Class est créé pour chaque définition de classe d’un programme.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Un objet Class est créé pour chaque définition de classe d’un programme. Chaque objet Class est une occurrence de la classe Class. L’objet Class contient les méthodes et propriétés statiques de la class. Il crée des occurrences de la classe si vous l’appelez en spécifiant l’opérateur <codeph class="+ topic/ph pr-d/codeph ">new</codeph>.
 
 <p class="- topic/p ">Certaines méthodes, telles que <codeph class="+ topic/ph pr-d/codeph ">flash.net.getClassByAlias()</codeph>, renvoient un objet de type Class. D’autres méthodes, telles que <codeph class="+ topic/ph pr-d/codeph ">flash.net.registerClassAlias()</codeph>, disposent parfois d’un paramètre de type Class. </p>
 <p class="- topic/p ">Le nom de classe renvoie à l’objet Class, comme illustré dans l’exemple ci-dessous :</p>
 <pre xml:space="preserve" class="- topic/pre "> 
 class Foo {
 }
 </pre> 
 <p class="- topic/p ">L’instruction <codeph class="+ topic/ph pr-d/codeph ">class Foo{}</codeph> est la définition de classe qui créé l’objet Class Foo. En outre, l’instruction <codeph class="+ topic/ph pr-d/codeph ">new Foo()</codeph> créera une occurrence de la classe Foo et le résultat sera de type Foo.</p>
 <p class="- topic/p ">Utilisez l’instruction <codeph class="+ topic/ph pr-d/codeph ">class</codeph> pour déclarer vos classes. Les objets Class s’avèrent utiles pour les techniques évoluées telles que l’affectation de classes à un objet existant lors de l’exécution, comme illustré à la section « Exemples » ci-dessous.</p>
 <p class="- topic/p ">Les méthodes et propriétés statiques d’une classe sont héritées par l’objet Class de la classe. En retour, Class déclare <codeph class="+ topic/ph pr-d/codeph ">prototype</codeph>.</p>
 
 <p class="- topic/p ">En règle générale, il est inutile de déclarer ou de créer manuellement des variables de type Class. Cependant, dans le code ci-dessous, une propriété Class publique <codeph class="+ topic/ph pr-d/codeph ">circleClass</codeph> est affectée à une classe et vous pouvez vous y référer en tant que propriété de la classe Library principale :</p>
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
  import flash.display.Sprite;
  public class Library extends Sprite {
      
      public var circleClass:Class = Circle;
      public function Library() {
      }
  }
 }
  
 import flash.display.Shape;
 class Circle extends Shape {
  public function Circle(color:uint = 0xFFCC00, radius:Number = 10) {
      graphics.beginFill(color);
      graphics.drawCircle(radius, radius, radius);
  }
 }
 </codeblock>
 
 <p class="- topic/p ">Un autre fichier SWF peut charger le fichier Library.swf généré, puis instancier les objets de type Circle. L’exemple suivant illustre une façon d’accéder aux ressources d’un fichier SWF enfant (d’autres techniques font appel à <codeph class="+ topic/ph pr-d/codeph ">flash.utils.getDefnitionByName()</codeph> ou importent des définitions souche (stub) du fichier SWF enfant).</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 package {
  import flash.display.Sprite;
  import flash.display.Shape;
  import flash.display.Loader;
  import flash.net.URLRequest;
  import flash.events.Event;
  public class LibaryLoader extends Sprite {
      public function LibaryLoader() {
          var ldr:Loader = new Loader();
          var urlReq:URLRequest = new URLRequest("Library.swf");
          ldr.load(urlReq);
          ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded);
      }
      private function loaded(event:Event):void {
          var library:Object = event.target.content;
          var circle:Shape = new library.circleClass();
          addChild(circle);
      }
  }
 }
 </codeblock>
 <p class="- topic/p ">ActionScript 3.0 vous permet de créer des classes intégrées destinées aux ressources externes (telles que les images, les sons ou les polices) qui sont compilées dans des fichiers SWF. Dans les versions antérieures d’ActionScript, vous associez ces ressources à la méthode <codeph class="+ topic/ph pr-d/codeph ">MovieClip.attachMovie()</codeph> par le biais d’un ID de liaison. Dans ActionScript 3.0, chaque ressource intégrée est représentée par une classe de ressources intégrées unique. Vous pouvez de ce fait utiliser l’opérateur <codeph class="+ topic/ph pr-d/codeph ">new</codeph> pour instancier la classe associée à la ressource et appeler des méthodes et des propriétés sur cette dernière.</p>
 <p product="flex" class="- topic/p ">Par exemple, si vous utilisez un compilateur MXML pour générer des fichiers SWF, vous devez créer une classe intégrée de la manière suivante :</p>
 <codeblock product="flex" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     [Embed(source="bratwurst.jpg")]
     public var imgClass:Class;
 </codeblock>
 <p product="flex" class="- topic/p ">Pour l’instancier, vous écrivez le code suivant :</p>
 <codeblock product="flex" xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var myImg:Bitmap = new imgClass();
 </codeblock>
 
 </apiDesc><example conref="examples\Class.1.as" class="- topic/example "> L’exemple suivant indique comment utiliser les objets Class pour reporter à la période d’exécution les décisions de création d’occurrences de classe à l’aide des procédures suivantes :
 <ol class="- topic/ol "><li class="- topic/li ">Déclare deux classes, <codeph class="+ topic/ph pr-d/codeph ">ClassA</codeph> et <codeph class="+ topic/ph pr-d/codeph ">ClassB</codeph>. </li><li class="- topic/li ">Déclare une variable de type Class appelée <codeph class="+ topic/ph pr-d/codeph ">classToConstruct</codeph> et une autre de type Boolean appelée <codeph class="+ topic/ph pr-d/codeph ">chooseClassA</codeph>, qui est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> dans ce cas. Votre code pourrait également utiliser une expression de test personnalisée pour définir la valeur de cette variable. </li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
    
    public class ClassExample extends Sprite {
        public function ClassExample() {
            var classToConstruct:Class;            
            var classInstance:Object;

            classToConstruct = ClassA;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassA]

            classToConstruct = ClassB;
            classInstance = new classToConstruct();
            trace(classInstance);    // [object ClassB]
        }
    }
}

class ClassA {
}
    
class ClassB {
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Object/prototype" class="- topic/link "><linktext class="- topic/linktext ">Object.prototype</linktext></link><link href="operators.html#new" class="- topic/link "><linktext class="- topic/linktext ">new, opérateur</linktext></link></related-links></apiClassifier><apiClassifier languages="" id="globalClassifier:Namespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc ">

La classe Namespace contient les méthodes et propriétés destinées à la définition et à l’utilisation des espaces de nom.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">La classe Namespace contient les méthodes et propriétés destinées à la définition et à l’utilisation des espaces de nom des objets XML.

</apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">

La classe Namespace contient les méthodes et propriétés destinées à la définition et à l’utilisation des espaces de nom. Les espaces de nom sont utilisés dans trois cas de figure :

<ul class="- topic/ul "><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">Espaces de nom d’objets XML</b> Les espaces de nom associent un préfixe d’espace de nom à un URI (Uniform Resource Identifier) qui les identifie. Le préfixe est une chaîne utilisée pour référencer l’espace de nom dans un objet XML. Si le préfixe n’est pas défini, il est automatiquement généré lorsque l’objet XML est converti en chaîne.
</li><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">Espaces de nom utilisés pour différencier les méthodes</b> Les espaces de nom permettent de différencier les méthodes portant un nom identique pour effectuer des tâches différentes. Si deux méthodes ont le même nom, mais des espaces de nom distincts, elles peuvent exécuter des tâches différentes.
</li><li class="- topic/li "> <b class="+ topic/ph hi-d/b ">Espaces de nom pour le contrôle d’accès</b> Les espaces de nom permettent de contrôler l’accès à un groupe de propriétés et de méthodes d’une classe. Si vous placez les propriétés et les méthodes dans un espace de nom privé, tout code qui n’a pas accès à l’espace de nom ne peut pas non plus accéder à celles-ci. Vous pouvez accorder un accès au groupe de propriétés et de méthodes en transmettant l’espace de nom à d’autres classes, méthodes ou fonctions.
</li></ul>

<p class="- topic/p ">Cette classe utilise deux formes de la méthode de constructeur, car chaque forme accepte des paramètres différents.</p>

<p class="- topic/p ">A l’instar des classes XML, XMLList et QName, cette classe implémente des normes de gestion XML performantes définies dans la spécification ECMAScript pour XML (E4X) (ECMA-357, édition 2).</p>

</apiDesc><example conref="examples\NamespaceExample.as" class="- topic/example "> L’exemple suivant indique comment traiter les noms d’espace définis dans les objets XML. Cette opération s’accomplit de la façon suivante :
 <ol class="- topic/ol "><li class="- topic/li ">L’exemple définit trois objets Namespace, disposant tous d’un URI unique qui définit un nom d’espace.</li><li class="- topic/li ">Cet exemple définit une variable XML appelée <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph> et l’affecte à la valeur renvoyée par <codeph class="+ topic/ph pr-d/codeph ">getRSS()</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">getRSS()</codeph> définit un objet XML qui contient plusieurs noms d’espace et renvoie cet objet XML.</li><li class="- topic/li ">Cet exemple déclare et évalue une variable Array en appelant la méthode <codeph class="+ topic/ph pr-d/codeph ">parseRSS()</codeph> tout en lui transmettant <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph>. Dans <codeph class="+ topic/ph pr-d/codeph ">parseRSS()</codeph>, le nom d’espace XML par défaut est défini sous <codeph class="+ topic/ph pr-d/codeph ">rss</codeph> et l’exemple définit une variable XMLList en affectant la liste d’objets <codeph class="+ topic/ph pr-d/codeph ">item</codeph> dans <codeph class="+ topic/ph pr-d/codeph ">myXML</codeph>. Un tableau est créé et rempli par différents nœuds au sein de <codeph class="+ topic/ph pr-d/codeph ">myXML.item</codeph>. Le tableau est ensuite renvoyé.</li><li class="- topic/li ">Les éléments du tableau sont imprimés à l’aide d’une boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph> et de trois appels à <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>.</li></ol>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class NamespaceExample extends Sprite {
        private var rss:Namespace = new Namespace("http://purl.org/rss/1.0/");
        private var rdf:Namespace = new Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
        private var dc:Namespace  = new Namespace("http://purl.org/dc/elements/1.1/");

        public function NamespaceExample() {
            var myXML:XML = getRSS();
            var rssItems:Array = parseRSS(myXML);
            
            var len:uint = rssItems.length;
            for (var i:uint; i &lt; len; i++) {
                trace(rssItems[i].title);
                trace(rssItems[i].creator);
                trace(rssItems[i].date);
                // Adobe Flash Developer Center
                // Adobe
                // 2005-08-08
                // Flex Developer Center
                // Adobe
                // 2005-10-16                
            }
        }
        
        private function parseRSS(rssXML:XML):Array {
            default xml namespace = rss;

            var items:XMLList = rssXML.item;

            var arr:Array = new Array();            
            var len:uint = items.length();
            for (var i:uint; i &lt; len; i++) {
                arr.push({title:items[i].title, creator:items[i].dc::creator, date:items[i].dc::date});
            }
            
            return arr;
        }

        private function getRSS():XML {
            var myXML:XML =  &lt;rdf:RDF
              xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
              xmlns="http://purl.org/rss/1.0/"
              xmlns:dc="http://purl.org/dc/elements/1.1/"
            >
              &lt;channel rdf:about="http://www.xml.com/cs/xml/query/q/19">
                &lt;title>Test RSS&lt;/title>
                &lt;link>http://www.adobe.com/&lt;/link>
                &lt;description>This is a test RSS document.&lt;/description>
                &lt;language>en-us&lt;/language>
                &lt;items>
                  &lt;rdf:Seq>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flash/"/>
                &lt;rdf:li rdf:resource="http://www.adobe.com/devnet/flex/"/>
                  &lt;/rdf:Seq>
                &lt;/items>
              &lt;/channel>
              &lt;item rdf:about="http://www.adobe.com/devnet/flash/">
                &lt;title>Adobe Flash Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flash/&lt;/link>
                &lt;description>Welcome to the Flash Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-08-08&lt;/dc:date>    
              &lt;/item>
              &lt;item rdf:about="http://www.adobe.com/devnet/flex/">
                &lt;title>Flex Developer Center&lt;/title>
                &lt;link>http://www.adobe.com/devnet/flex/&lt;/link>
                &lt;description>Welcome to the Flex Developer Center&lt;/description>
                &lt;dc:creator>Adobe&lt;/dc:creator>
                &lt;dc:date>2005-10-16&lt;/dc:date>    
              &lt;/item>
            &lt;/rdf:RDF>;
            
            return myXML;
        }
    }
}
</codeblock></example><example conref="examples\Namespace_2_Example.as" class="- topic/example "> L’exemple suivant indique comment les espaces de nom permettent de différencier les méthodes du même nom qui effectuent des tâches différentes. Dans cet exemple, trois méthodes appelées <codeph class="+ topic/ph pr-d/codeph ">hello()</codeph> résident dans des noms d’espace distincts, qui renvoient tous une chaîne distincte lorsqu’ils sont appelés.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {

    import flash.display.Sprite;

    public class Namespace_2_Example extends Sprite {    
        public function Namespace_2_Example() {
            var vocab:MultilingualVocabulary = new MultilingualVocabulary();

            trace(vocab.hello());    // hello
            
            var languages:Array = vocab.getLanguages();
            
            for (var i:uint; i &lt; languages.length; i++) {
                var ns:Namespace = languages[i];
                if (ns != null) {
                    trace(ns.toString() + ": " + vocab.ns::hello());
                    // hello
                    // MultilingualVocabulary:Hawaiian: aloha
                    // MultilingualVocabulary:French: bon jour
                }
            }
        }
    }    
}

class MultilingualVocabulary {
    public namespace French;
    public namespace Hawaiian;
    private var languages:Array;

    public function MultilingualVocabulary() {
        languages = new Array(Hawaiian, French);
    }
        
    public function hello():String { 
        return "hello";
    }

    Hawaiian function hello():String {
        return "aloha";
    }

    French function hello():String { 
        return "bon jour";
    }
        
    public function getLanguages():Array {
        return languages;
    }
}
</codeblock></example><example conref="examples\Namespace_3_Example.as" class="- topic/example "> L’exemple suivant utilise des noms d’espace de nom pour sélectionner une valeur de variable appropriée. Il indique comment vous pouvez stocker une valeur de nom d’espace dans une variable et utiliser cette dernière pour référencer des objets au sein de l’espace de nom.
 <p class="- topic/p ">L’exemple définit des espaces de nom et des couleurs qui correspondent à des états de souris pour un bouton rectangulaire. Lorsque le bouton est dessiné, l’exemple applique la couleur appropriée (rouge lorsque la souris quitte la zone active (out) ; jaune pour le survol (over) ; blanc pour abaissé (down)) en référençant la variable <codeph class="+ topic/ph pr-d/codeph ">bgcolor</codeph> pour l’espace de nom correspondant (<codeph class="+ topic/ph pr-d/codeph ">out</codeph>, <codeph class="+ topic/ph pr-d/codeph ">over</codeph>, <codeph class="+ topic/ph pr-d/codeph ">down</codeph>). </p>
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;
  
    public class Namespace_3_Example extends Sprite {     
        public function Namespace_3_Example() {
            addChild(new StateButton("Press Me."));
        }
    }
}

import flash.display.Sprite;
import flash.text.TextField;
import flash.events.Event;
import flash.events.MouseEvent;

class StateButton extends Sprite{
    private namespace out;
    private namespace over;
    private namespace down;
    private var label:TextField;
    private var labelTxt:String;
    private var ns:Namespace;
    out var bgColor:Number = 0xFF0000;
    over var bgColor:Number = 0xFFFF00;
    down var bgColor:Number = 0xFFFFFF;
      
    public function StateButton(str:String) {
        buttonMode = true;
        labelTxt = str;
        ns = out;
        draw();
        addLabel();
        addListeners();
    }

    private function addLabel():void {
        label = new TextField();
        label.text = labelTxt;
        label.width = 50;
        label.height = 20;
        label.mouseEnabled = false;
        addChild(label);
    }
      
    private function addListeners():void {
        addEventListener(MouseEvent.MOUSE_UP, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
    }
 
    private function mouseOutHandler(e:Event):void {
        ns = out;
        draw();
    }
 
    private function mouseOverHandler(e:Event):void {
        ns = over;
        draw();
    }
 
    private function mouseDownHandler(e:Event):void {
        ns = down;
        draw();
    }
 
    private function draw():void {
        this.graphics.clear();
        this.graphics.beginFill(ns::bgColor);
        this.graphics.drawRect(0, 0, 60, 20);
    }
} 
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#XML" class="- topic/link "><linktext class="- topic/linktext ">XML</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript pour la spécification XML (E4X) (ECMA-357 edition 2)</linktext></link></related-links><apiConstructor id="Namespace:Namespace_0" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc "> 
	Crée un objet Namespace en fonction de la valeur des paramètres prefixValue et uriValue.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefixValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Préfixe à utiliser pour l’espace de nom.   
	
	</apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uriValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URI (Uniform Resource Identifier) de l’espace de noms.
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Crée un objet Namespace en fonction des paramètres prefixValue et uriValue indiqués.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Crée un objet Namespace en fonction de la valeur des paramètres <codeph class="+ topic/ph pr-d/codeph ">prefixValue</codeph> et <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph>. Ce constructeur requiert les deux paramètres.
	<p class="- topic/p ">La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">prefixValue</codeph> est octroyée à la propriété <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> de la façon suivante :</p>
	<ul class="- topic/ul "><li class="- topic/li ">Si <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est transmis, <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> est réglé sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.</li><li class="- topic/li ">Si la valeur est un nom XML valide, déterminé par la fonction <codeph class="+ topic/ph pr-d/codeph ">isXMLName()</codeph>, elle est convertie en chaîne et octroyée à la propriété <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph>.</li><li class="- topic/li ">Si la valeur n’est pas un nom XML valide, la propriété <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.</li></ul>
	
	<p class="- topic/p ">La valeur du paramètre <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> est octroyée à la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> de la façon suivante :</p>
	<ul class="- topic/ul "><li class="- topic/li ">Si un objet QName est transmis, la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> est définie sur la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> de l’objet QName.</li><li class="- topic/li "> Dans le cas contraire, le paramètre <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> est converti en chaîne et octroyé à la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph>.</li></ul>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette classe utilise deux entrées de méthode de constructeur, car chaque forme accepte des paramètres différents. Le constructeur se comporte différemment selon le type et le nombre d’arguments transmis, comme indiqué dans chaque entrée. ActionScript 3.0 ne prend pas en charge la surcharge d’une méthode ou d’un constructeur.</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiConstructor id="Namespace:Namespace_1" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Namespace</apiName><shortdesc class="- topic/shortdesc "> 
	Crée un objet Namespace.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><helpid>
	</helpid></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uriValue</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URI (Uniform Resource Identifier) de l’espace de noms.
	
	
	</apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Crée un objet Namespace en fonction du paramètre uriValue indiqué.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Crée un objet Namespace. Les valeurs affectées aux propriétés <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> et <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> du nouvel objet Namespace varient selon le type de valeur transmise pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">uriValue</codeph> :
	<ul class="- topic/ul "><li class="- topic/li ">Si aucune valeur n’est transmise, les propriétés <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> et <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> sont réglées sur une chaîne vide.</li><li class="- topic/li ">Si la valeur est un objet Namespace, une copie de ce dernier est générée.</li><li class="- topic/li ">Si la valeur est un objet QName, la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> est définie sur la propriété <codeph class="+ topic/ph pr-d/codeph ">uri</codeph> de l’objet QName.</li></ul>
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette classe utilise deux entrées de constructeur, car chaque forme accepte des paramètres différents. Le constructeur se comporte différemment selon le type et le nombre de paramètres transmis, comme indiqué dans chaque entrée. ActionScript 3.0 ne prend pas en charge la surcharge d’une méthode ou d’un constructeur.</p>
    
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="Namespace:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	Equivalent à la propriété Namespace.uri.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.toString, toString
	</keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URI (Uniform Resource Identifier) de l’espace de nom, spécifié sous forme de chaîne.
	
	
	</apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Equivalent à la propriété Namespace.uri. 
	
	</apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Equivalent à la propriété <codeph class="+ topic/ph pr-d/codeph ">Namespace.uri</codeph>.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="Namespace:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie la valeur URI de l’objet spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.toString, toString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">URI (Uniform Resource Identifier) de l’espace de nom, spécifié sous forme de chaîne.
    
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Equivalent à la propriété Namespace.uri. 
    
    </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie la valeur URI de l’objet spécifié. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="Namespace:prefix:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prefix</apiName><shortdesc class="- topic/shortdesc ">
	Préfixe de l’espace de nom.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.prefix, prefix
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Préfixe de l’espace de nom.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	Préfixe de l’espace de nom.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="Namespace:uri:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">uri</apiName><shortdesc class="- topic/shortdesc ">
	URI (Uniform Resource Identifier) de l’espace de noms.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Namespace, Namespace.uri, uri
	</keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">String</apiValueClassifier><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">URI (Uniform Resource Identifier) de l’espace de noms.
	
	</apiTipText></apiTipTexts></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	URI (Uniform Resource Identifier) de l’espace de noms.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc ">
    La classe XML contient les méthodes et propriétés réservées aux objets XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    La classe XML contient les méthodes et propriétés réservées aux objets XML. A l’instar des classes XMLList, Namespace et QName, la classe XML implémente des normes de gestion XML performantes définies dans la spécification ECMAScript pour XML (E4X) (ECMA-357, édition 2).
    
    <p class="- topic/p ">La méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> permet de renvoyer une représentation sous forme de chaîne de l’objet XML, que son contenu soit simple ou complexe.</p>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque </b>: la classe XML et les classes apparentées intégrées à ActionScript 2.0 ont été renommées XMLDocument et transférées dans le package flash.xml. La classe XML figure dans ActionScript 3.0 à des fins de compatibilité ascendante.</p> 
    
    
    </apiDesc><example conref="examples\XMLExample.as" class="- topic/example "> L’exemple suivant crée tout d’abord une variable XML, puis y ajoute des nœuds. Ensuite, les propriétés XML permettent de trouver et imprimer des nœuds XML. Vous pouvez constater que le symbole « arrobase » (<codeph class="+ topic/ph pr-d/codeph ">@</codeph>) est utilisé dans plusieurs des appels <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> pour rechercher des informations en fonction du nom d’attribut.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class XmlExample extends Sprite {        
        public function XmlExample() {
            var employees:XML =
                &lt;employees>
                    &lt;employee ssn="123-123-1234">
                        &lt;name first="John" last="Doe"/>
                        &lt;address>
                            &lt;street>11 Main St.&lt;/street>
                            &lt;city>San Francisco&lt;/city>
                            &lt;state>CA&lt;/state>
                            &lt;zip>98765&lt;/zip>
                        &lt;/address>
                    &lt;/employee>
                    &lt;employee ssn="789-789-7890">
                        &lt;name first="Mary" last="Roe"/>
                        &lt;address>
                            &lt;street>99 Broad St.&lt;/street>
                            &lt;city>Newton&lt;/city>
                            &lt;state>MA&lt;/state>
                            &lt;zip>01234&lt;/zip>
                        &lt;/address>
                    &lt;/employee>
                &lt;/employees>;

            trace(employees.employee[0].address.zip);   // 98765

            trace(employees.employee[1].@ssn);          // 789-789-7890

            trace(employees.employee.name);             // &lt;name first="John" last="Doe"/>
                                                        // &lt;name first="Mary" last="Roe"/>

            trace(employees..zip[0]);                   // 98765

            trace(employees..@ssn[1]);                  // 789-789-7890

            trace(employees..name);                     // &lt;name first="John" last="Doe"/>
                                                        // &lt;name first="Mary" last="Roe"/>

            trace(employees.employee[0].address.*);     // &lt;street>11 Main St.&lt;/street>    
                                                        // &lt;city>San Francisco&lt;/city>
                                                        // &lt;state>CA&lt;/state>
                                                        // &lt;zip>98765&lt;/zip>
            var node:String = "zip";
            trace(employees.employee[0].address[node]); // 98765
            
            var attribute:String = "ssn";
            trace(employees.employee[1].@[attribute]);  // 789-789-7890
            
            for each (var num:XML in employees..@ssn) {
                trace(num);                             // 123-123-1234
            }                                           // 789-789-7890
            
            var ssnToFind:String = "789-789-7890";
            trace(employees.employee.(@ssn == ssnToFind).toXMLString());
                                                        // &lt;employee ssn="789-789-7890">
                                                        // &lt;name first="Mary" last="Roe"/>
                                                        // &lt;address>
                                                        // &lt;street>99 Broad St.&lt;/street>
                                                        // &lt;city>Newton&lt;/city>
                                                        // &lt;state>MA&lt;/state>
                                                        // &lt;zip>01234&lt;/zip>
                                                        // &lt;/address>
                                                        // &lt;/employee>
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Espace de nom </linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link><link href="http://www.ecma-international.org/publications/standards/Ecma-357.htm" class="- topic/link "><linktext class="- topic/linktext ">ECMAScript pour la spécification XML (E4X) (ECMA-357 edition 2)</linktext></link></related-links><apiConstructor id="XML:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc "> 
    Crée un objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML
    </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tout objet qui peut être converti en objet XML à l’aide de la fonction de niveau supérieur <codeph class="+ topic/ph pr-d/codeph ">XML()</codeph>.
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
    Crée un objet XML. Vous devez utiliser le constructeur pour créer un objet XML avant d’appeler une des méthodes de la classe XML. 
    
    <p class="- topic/p ">La méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> permet de renvoyer une représentation sous forme de chaîne de l’objet XML, que son contenu soit simple ou complexe.</p>
    
    </apiDesc><example conref="examples\XML_new.as" class="- topic/example "> L’exemple suivant indique comment charger un document XML distant dans ActionScript 3.0 à l’aide de la classe URLLoader dans Flash Professional. Exemple fourni par <xref href="http://actionscriptexamples.com/2008/12/05/dynamically-loading-xml-files-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
//
// Requires:
//   - TextArea control UI component in the Flash Professional Library.
//
import fl.controls.TextArea;
 
var xml:XML;
 
var urlRequest:URLRequest = new URLRequest("http://www.helpexamples.com/flash/xml/menu.xml");
 
var urlLoader:URLLoader = new URLLoader();
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
var textArea:TextArea = new TextArea();
textArea.move(5, 5);
textArea.setSize(stage.stageWidth - 10, stage.stageHeight - 10);
addChild(textArea);
 
function urlLoader_complete(evt:Event):void {
    xml = new XML(evt.currentTarget.data);
    textArea.text = xml.toXMLString();
}
</codeblock></example><example conref="examples\XML_new_2.as" class="- topic/example "> Voici une autre variante utilisant tout le code ActionScript. Exemple fourni par <xref href="http://actionscriptexamples.com/2008/12/05/dynamically-loading-xml-files-in-actionscript-30/" scope="_mmexternal" class="- topic/xref ">ActionScriptExamples.com</xref>. 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML;
var textArea:TextField = new TextField();
textArea.width = 300;
 
var urlRequest:URLRequest = new URLRequest("http://www.helpexamples.com/flash/xml/menu.xml");
var urlLoader:URLLoader = new URLLoader();
urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
urlLoader.addEventListener(Event.COMPLETE, urlLoader_complete);
urlLoader.load(urlRequest);
 
function urlLoader_complete(evt:Event):void {
    xml = new XML(evt.target.data);
    textArea.text = xml.toXMLString();
    addChild(textArea);
}
</codeblock></example></apiConstructorDetail><related-links class="- topic/related-links "><link href="package.html#XML()" class="- topic/link "><linktext class="- topic/linktext ">Fonction globale XML()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiConstructor><apiOperation id="XML:AS3:addNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">addNamespace</apiName><shortdesc class="- topic/shortdesc ">
    Ajoute un espace de noms à l’ensemble d’espaces de noms du domaine associé à l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.addNamespace, addNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvel objet XML, auquel est ajouté l’espace de noms.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Espace de noms à ajouter à l’objet XML.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Ajoute un espace de noms à l’ensemble d’espaces de noms du domaine associé à l’objet XML. Si l’espace de noms figure déjà dans l’ensemble d’espaces de noms du domaine associé à l’objet XML (avec un préfixe qui correspond au paramètre spécifié), le préfixe correspondant est réglé sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>. Si le paramètre d’entrée est un objet Namespace, il est utilisé directement. S’il correspond à un objet QName, l’URI du paramètre d’entrée est utilisé pour créer un espace de noms. Dans le cas contraire, il est converti en chaîne et un espace de noms est généré à partir de la chaîne.
    
    </apiDesc><example conref="examples\XML.addNamespace.1.as" class="- topic/example "> Cet exemple utilise un espace de noms défini dans un objet XML et l’applique à un autre objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = &lt;ns:foo xmlns:ns="www.example.com/ns" />;
var nsNamespace:Namespace = xml1.namespace();

var xml2:XML = &lt;bar />;
xml2.addNamespace(nsNamespace);
trace(xml2.toXMLString()); // &lt;bar xmlns:ns="www.example.com/ns"/>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:appendChild" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">appendChild</apiName><shortdesc class="- topic/shortdesc ">
    Ajoute l’enfant indiqué à la fin des propriétés de l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.appendChild, appendChild
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML produit.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML à ajouter.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Ajoute l’enfant indiqué à la fin des propriétés de l’objet XML. La méthode <codeph class="+ topic/ph pr-d/codeph ">appendChild()</codeph> accepte un objet XML, un objet XMLList ou tout autre type de données qui est ensuite converti en chaîne. 
    
    <p class="- topic/p ">Utilisez l’opérateur <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) pour supprimer les nœuds XML.</p>
    
    </apiDesc><example conref="examples\XML.appendChild.1.as" class="- topic/example "> Cet exemple ajoute un nouvel élément à la fin de la liste enfant d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body>
            &lt;p>hello&lt;/p>
        &lt;/body>;
        
xml.appendChild(&lt;p>world&lt;/p>);    
trace(xml.p[0].toXMLString()); // &lt;p>hello&lt;/p>
trace(xml.p[1].toXMLString()); // &lt;p>world&lt;/p>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete, opérateur (XML)</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attribute" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attribute</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie la valeur XML de l’attribut dont le nom correspond au paramètre attributeName.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.attribute, attribute
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList ou objet XMLList vide. Renvoie un objet XMLList vide si vous n’avez pas défini la valeur d’un attribut.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">attributeName</apiItemName><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’attribut.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie la valeur XML de l’attribut dont le nom correspond au paramètre <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph>. Les attributs sont intégrés aux éléments XML. Dans l’exemple suivant, l’élément a un attribut appelé "<codeph class="+ topic/ph pr-d/codeph ">gender</codeph>" avec la valeur "<codeph class="+ topic/ph pr-d/codeph ">boy</codeph>" : <codeph class="+ topic/ph pr-d/codeph ">&lt;first gender="boy">John&lt;/first></codeph>.
    
    <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> peut correspondre à n’importe quel type de données, mais String est généralement utilisé. Si vous transmettez un objet autre que QName, le paramètre <codeph class="+ topic/ph pr-d/codeph ">attributeName</codeph> utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> pour convertir le paramètre en chaîne. </p>
    
    <p class="- topic/p ">Si une référence de nom complet s’impose, vous pouvez transmettre un objet QName. Un objet QName définit un espace de noms et le nom local, que vous pouvez utiliser pour définir le nom complet d’un attribut. De ce fait, appeler <codeph class="+ topic/ph pr-d/codeph ">attribute(qname)</codeph> n’est pas équivalent à appeler <codeph class="+ topic/ph pr-d/codeph ">attribute(qname.toString())</codeph>.</p>
    
    </apiDesc><example conref="examples\XMLAttributeExample1.as" class="- topic/example "> Cet exemple porte sur un objet QName transmis par la méthode <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph>. La propriété <codeph class="+ topic/ph pr-d/codeph ">localName</codeph> est <codeph class="+ topic/ph pr-d/codeph ">attr</codeph> et la propriété <codeph class="+ topic/ph pr-d/codeph ">namespace</codeph> est <codeph class="+ topic/ph pr-d/codeph ">ns</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var xml:XML = &lt;ns:node xmlns:ns = "http://uri" ns:attr = '7' />       
 var qn:QName = new QName("http://uri", "attr");
 trace (xml.attribute(qn)); // 7
</codeblock></example><example conref="examples\XMLAttributeExample2.as" class="- topic/example "> Pour renvoyer un attribut avec un nom qui correspond à un mot ActionScript réservé, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">attribute()</codeph> et non pas l’opérateur d’identificateur d’attribut (@), comme dans l’exemple suivant :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var xml:XML = &lt;example class="first" />
 trace(xml.attribute("class"));
 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link><link href="#QName" class="- topic/link "><linktext class="- topic/linktext ">QName</linktext></link><link href="#Namespace" class="- topic/link "><linktext class="- topic/linktext ">Espace de nom </linktext></link><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">opérateur d’identificateur d’attribut (&amp;#064;)</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:attributes" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">attributes</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie une liste de valeurs d’attribut associée à l’objet XML indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.attributes, attributes
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Liste de valeurs d’attributs.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie une liste de valeurs d’attribut associée à l’objet XML indiqué. Utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> en conjonction avec la méthode <codeph class="+ topic/ph pr-d/codeph ">attributes()</codeph> pour renvoyer le nom d’un attribut. L’utilisation de <codeph class="+ topic/ph pr-d/codeph ">xml.attributes()</codeph> est équivalente à <codeph class="+ topic/ph pr-d/codeph ">xml.@*</codeph>.
    
    </apiDesc><example conref="examples\XMLAttributesExample1.as" class="- topic/example "> L’exemple suivant renvoie le nom de l’attribut :

<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML=&lt;example id='123' color='blue'/>
trace(xml.attributes()[1].name()); //color
</codeblock></example><example conref="examples\XMLAttributesExample2.as" class="- topic/example "> Cet exemple renvoie les noms de tous les attributs :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 
var xml:XML = &lt;example id='123' color='blue'/>
var attNamesList:XMLList = xml.@*;

trace (attNamesList is XMLList); // true
trace (attNamesList.length()); // 2

for (var i:int = 0; i &lt; attNamesList.length(); i++)
{ 
    trace (typeof (attNamesList[i])); // xml
    trace (attNamesList[i].nodeKind()); // attribute
    trace (attNamesList[i].name()); // id and color
} 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="#XML/name()" class="- topic/link "><linktext class="- topic/linktext ">XML.name()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">opérateur &amp;#064;</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:childIndex" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">childIndex</apiName><shortdesc class="- topic/shortdesc ">
    Identifie la position d’index qui commence à zéro de cet objet XML dans le contexte de l’objet parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.childindex, childindex
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Position de l’objet. Renvoie -1 et des entiers positifs.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Identifie la position d’index qui commence à zéro de cet objet XML dans le contexte de l’objet parent.
    
    </apiDesc><example conref="examples\XML.childIndex.1.as" class="- topic/example "> Cet exemple indique comment utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">childIndex()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
            &lt;foo>
                &lt;bar />
                text
                &lt;bob />
            &lt;/foo>;
trace(xml.bar.childIndex()); // 0
trace(xml.bob.childIndex()); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:child" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">child</apiName><shortdesc class="- topic/shortdesc ">
    Recense les enfants d’un objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.child, child
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les nœuds enfant qui correspondent au paramètre d’entrée. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément ou entier de l’objet XML enfant. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Recense les enfants d’un objet XML. Un enfant XML est un élément, un nœud de texte, un commentaire ou une instruction de traitement XML. 
    
    <p class="- topic/p ">Le paramètre <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> permet de recenser le contenu d’un enfant XML spécifique. Par exemple, pour renvoyer le contenu d’un enfant appelé <codeph class="+ topic/ph pr-d/codeph ">&lt;first></codeph>, utilisez <codeph class="+ topic/ph pr-d/codeph ">child.name("first")</codeph>. Vous pouvez générer le même résultat à partir du numéro d’index de l’enfant. Le numéro d’index identifie la position de l’enfant dans la liste d’enfants XML. Par exemple, <codeph class="+ topic/ph pr-d/codeph ">name.child(0)</codeph> renvoie le premier enfant d’une liste. </p>
    
    <p class="- topic/p ">Utilisez un astérisque (~~) pour extraire tous les enfants dans un document XML. Exemple : <codeph class="+ topic/ph pr-d/codeph ">doc.child("~~")</codeph>.</p>  
    
    <p class="- topic/p ">La méthode <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> associée au paramètre astérisque (~~) de la méthode <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> permet de produire le nombre total d’enfants. Exemple : <codeph class="+ topic/ph pr-d/codeph ">numChildren = doc.child("~~").length()</codeph>.</p>
    
    </apiDesc><example conref="examples\XML.child.1.as" class="- topic/example "> Cet exemple porte sur l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">child()</codeph> pour identifier les éléments enfant avec le nom spécifié :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;bar>text1&lt;/bar>
            &lt;bar>text2&lt;/bar>
        &lt;/foo>;
trace(xml.child("bar").length());  // 2
trace(xml.child("bar")[0].toXMLString()); // &lt;bar>text1&lt;/bar>
trace(xml.child("bar")[1].toXMLString()); // &lt;bar>text2&lt;/bar>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/elements()" class="- topic/link "><linktext class="- topic/linktext ">XML.elements()</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList, classe</linktext></link><link href="#XML/length()" class="- topic/link "><linktext class="- topic/linktext ">XML.length()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:children" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">children</apiName><shortdesc class="- topic/shortdesc ">
    Recense les enfants de l’objet XML dans l’ordre dans lequel ils apparaissent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.children, children
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant les enfants de l’objet XML.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Recense les enfants de l’objet XML dans l’ordre dans lequel ils apparaissent. Un enfant XML est un élément, un nœud de texte, un commentaire ou une instruction de traitement XML. 
    
    </apiDesc><example conref="examples\XML.children.1.as" class="- topic/example "> Cet exemple indique comment utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">children()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var xml:XML = 
        &lt;foo id="22">
            &lt;bar>44&lt;/bar>
            text
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml.children().length()); // 4
trace(xml.children()[0].toXMLString()); // &lt;bar>44&lt;/bar>
trace(xml.children()[1].toXMLString()); // text
trace(xml.children()[2].toXMLString()); // &lt;!-- comment -->
trace(xml.children()[3].toXMLString()); // &lt;?instruction ?>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:comments" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">comments</apiName><shortdesc class="- topic/shortdesc ">
    Recense les propriétés de l’objet XML qui contient des commentaires XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.comments, comments
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList des propriétés qui contiennent des commentaires.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Recense les propriétés de l’objet XML qui contient des commentaires XML.
    
    </apiDesc><example conref="examples\XML.comments.1.as" class="- topic/example "> Cet exemple indique comment utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">comments()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml:XML = 
        &lt;foo>
            &lt;!-- example -->
            &lt;!-- example2 -->
        &lt;/foo>;
trace(xml.comments().length()); // 2
trace(xml.comments()[1].toXMLString()); // &lt;!-- example2 -->
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:contains" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">contains</apiName><shortdesc class="- topic/shortdesc ">
    Compare l’objet XML au paramètre value spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.contains, contains
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet XML correspond au paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph>, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur à comparer à l’objet XML en cours.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Compare l’objet XML au paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph> spécifié. 
    
    </apiDesc><example conref="examples\XML.contains.1.as" class="- topic/example "> Cet exemple indique comment utiliser la méthode <codeph class="+ topic/ph pr-d/codeph ">contains()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;order>
            &lt;item>Rice&lt;/item>
            &lt;item>Kung Pao Shrimp&lt;/item>
        &lt;/order>;
trace(xml.item[0].contains(&lt;item>Rice&lt;/item>)); // true
trace(xml.item[1].contains(&lt;item>Kung Pao Shrimp&lt;/item>)); // true
trace(xml.item[1].contains(&lt;item>MSG&lt;/item>)); // false
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:copy" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">copy</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie une copie de l’objet XML spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.copy, copy
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de l’objet.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie une copie de l’objet XML spécifié. Cette copie est une duplication de l’arborescence entière de nœuds. L’objet XML copié ne possède pas de parent et renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si vous tentez d’appeler la méthode <codeph class="+ topic/ph pr-d/codeph ">parent()</codeph>.
    
    </apiDesc><example conref="examples\XML.copy.1.as" class="- topic/example "> Cet exemple indique que la méthode <codeph class="+ topic/ph pr-d/codeph ">copy()</codeph> crée une nouvelle occurrence d’un objet XML. Lorsque vous modifiez la copie, l’original reste inchangé :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = &lt;foo />;
var xml2:XML = xml1.copy();
xml2.appendChild(&lt;bar />);
trace(xml1.bar.length()); // 0
trace(xml2.bar.length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:defaultSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">defaultSettings</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie un objet avec les propriétés suivantes définies sur les valeurs par défaut : ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent et prettyPrinting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.defaultSettings, defaultSettings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet dont les propriétés sont réglées sur leur valeur par défaut.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie un objet avec les propriétés suivantes définies sur les valeurs par défaut : <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>, <codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph> et <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph>. Les valeurs par défaut sont les suivantes :
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent = 2</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting = true</codeph></li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> cette méthode ne doit pas être appliquée à une occurrence de la classe XML, mais à <codeph class="+ topic/ph pr-d/codeph ">XML</codeph>, comme illustré dans le code suivant : <codeph class="+ topic/ph pr-d/codeph ">var df:Object = XML.defaultSettings()</codeph>. </p>
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> L’exemple ci-dessous illustre les points suivants : comment appliquer des paramètres personnalisés (pour l’inclusion de commentaires et d’instructions de traitement) avant de définir un objet XML ; comment ensuite rétablir les paramètres par défaut avant de définir un autre objet XML ; et enfin comment définir de nouveau les paramètres par défaut (pour définir d’autres objets XML) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyPrinting</linktext></link><link href="#XML/setSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.setSettings()</linktext></link><link href="#XML/settings()" class="- topic/link "><linktext class="- topic/linktext ">XML.settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:descendants" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">descendants</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie tous les descendants (enfants, petits-enfants, arrière-petits-enfants, etc.) de l’objet XML associés au paramètre name indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.descendants, descendants
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant tous les descendants correspondants. S’il n’existe pas de descendants, la méthode renvoie un objet XMLList vide.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément pour lequel établir une correspondance.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie tous les descendants (enfants, petits-enfants, arrière-petits-enfants, etc.) de l’objet XML associés au paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> indiqué. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est facultatif. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> peut être un objet QName, un type de données String ou tout autre type de données converti ensuite au type de données String.
    
    <p class="- topic/p ">Pour renvoyer tous les descendants, utilisez le paramètre « ~~ ». Si aucun paramètre n’est transmis, la chaîne « ~~ » est transmise et renvoie tous les descendants de l’objet XML.</p>
    
    </apiDesc><example conref="examples\XMLDescendantsExample1.as" class="- topic/example "> Pour renvoyer les descendants sous des noms qui correspondent aux mots réservés ActionScript, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> de préférence à l’opérateur de descendance (..), comme indiqué dans l’exemple suivant : 
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
  &lt;enrollees>
    &lt;student id="239">
        &lt;class name="Algebra" />
        &lt;class name="Spanish 2"/>
    &lt;/student>
    &lt;student id="206">
        &lt;class name="Trigonometry" />
        &lt;class name="Spanish 2" />
    &lt;/student>
  &lt;/enrollees>
trace(xml.descendants("class")); 
</codeblock></example><example conref="examples\XML.descendants.1.as" class="- topic/example "> Cet exemple illustre le fait que la méthode <codeph class="+ topic/ph pr-d/codeph ">descendants()</codeph> renvoie un objet XMLList qui contient <i class="+ topic/ph hi-d/i ">tous</i> les objets descendants, ce qui inclut les enfants, les petits enfants, etc. :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml:XML = 
        &lt;body>
            &lt;!-- comment -->
            text1
            &lt;a>
                &lt;b>text2&lt;/b>
            &lt;/a>
        &lt;/body>;
trace(xml.descendants("*").length()); // 5
trace(xml.descendants("*")[0]); // // &lt;!-- comment -->
trace(xml.descendants("*")[1].toXMLString()); // text1
trace(xml.descendants("a").toXMLString()); // &lt;a>&lt;b>text2&lt;/b>&lt;/a>
trace(xml.descendants("b").toXMLString()); // &lt;b>text2&lt;/b>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#descendant_accessor" class="- topic/link "><linktext class="- topic/linktext ">accesseur de descendance (..) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:elements" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">elements</apiName><shortdesc class="- topic/shortdesc ">
     Recense les éléments d’un objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.elements, elements
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList qui comporte le contenu de l’élément. Le contenu d’un élément est compris entre la balise de début et la balise de fin. Si vous utilisez l’astérisque (~~) pour appeler tous les éléments, les balises et le contenu sont renvoyés.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de l’élément. Un nom d’élément est entouré de chevrons. Par exemple, "<codeph class="+ topic/ph pr-d/codeph ">first</codeph>" correspond à <codeph class="+ topic/ph pr-d/codeph ">name</codeph> dans cet exemple : <codeph class="+ topic/ph pr-d/codeph ">&lt;first>&lt;/first></codeph> . 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recense les éléments d’un objet XML. Un élément se compose d’une balise de début et d’une balise de fin, telle que <codeph class="+ topic/ph pr-d/codeph ">&lt;first>&lt;/first></codeph>. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est facultatif. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> peut être un objet QName, un type de données String ou tout autre type de données converti ensuite au type de données String. Utilisez le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> pour recenser un élément spécifique. Par exemple, l’élément <codeph class="+ topic/ph pr-d/codeph ">first</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">John</codeph> dans cet exemple : <codeph class="+ topic/ph pr-d/codeph ">&lt;first>John&lt;/first></codeph>. 
     
     <p class="- topic/p ">Pour recenser tous les éléments, utilisez le paramètre astérisque (~~). L’astérisque est également le paramètre par défaut. </p>
     
     <p class="- topic/p ">La méthode <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> associée au paramètre astérisque permet d’extraire le nombre total d’éléments. Par exemple, <codeph class="+ topic/ph pr-d/codeph ">numElement = addressbook.elements("~~").length()</codeph>.</p>
     
     </apiDesc><example conref="examples\XML.elements.1.as" class="- topic/example "> L’exemple suivant indique que la méthode <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> renvoie uniquement une liste d’éléments — sans commentaire, propriété de texte ou instruction de traitement :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
            text
            &lt;a>1&lt;/a>
            &lt;b>2&lt;/b>
        &lt;/foo>;
trace(xml.elements("*").length()); // 2
trace(xml.elements("*")[0].toXMLString()); // &lt;a>1&lt;/a>
trace(xml.elements("b").length()); // 1
trace(xml.elements("b")[0].toXMLString()); // &lt;b>2&lt;/b>
</codeblock></example><example conref="examples\XMLElementsExample1.as" class="- topic/example "> Pour renvoyer les descendants sous des noms qui correspondent aux mots réservés ActionScript, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">elements()</codeph> de préférence à l’opérateur point (.) du code XML, comme indiqué dans l’exemple suivant :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
 &lt;student id="206">
    &lt;class name="Trigonometry" />
    &lt;class name="Spanish 2" />
 &lt;/student>
trace(xml.elements("class")); 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XMLList" class="- topic/link "><linktext class="- topic/linktext ">XMLList, classe</linktext></link><link href="#XML/length()" class="- topic/link "><linktext class="- topic/linktext ">XML.length()</linktext></link><link href="#XML/attribute()" class="- topic/link "><linktext class="- topic/linktext ">XML.attribute()</linktext></link><link href="operators.html#dot_(XML)" class="- topic/link "><linktext class="- topic/linktext ">point XML (.) operator</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasComplexContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasComplexContent</apiName><shortdesc class="- topic/shortdesc ">
    Vérifie si l’objet XML intègre un contenu complexe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasComplexContent, hasComplexContent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet XML intègre un contenu complexe, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Vérifie si l’objet XML intègre un contenu complexe. Le contenu d’un objet XML est complexe s’il possède des éléments enfant. Les objets XML qui représentent des attributs, des commentaires, des instructions de traitement et des nœuds de texte n’intègrent pas un contenu complexe. Le contenu d’un objet qui <i class="+ topic/ph hi-d/i ">intègre</i> ces entités peut néanmoins être considéré comme complexe si l’objet possède des éléments enfant.
    
    </apiDesc><example conref="examples\XML.hasComplexContent.1.as" class="- topic/example "> L’exemple suivant porte sur un objet XML, avec une propriété appelée <codeph class="+ topic/ph pr-d/codeph ">a</codeph> qui a un contenu simple et une autre propriété <codeph class="+ topic/ph pr-d/codeph ">a</codeph> qui a du contenu complexe :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;a>
                text
            &lt;/a>
            &lt;a>
                &lt;b/>
            &lt;/a>
        &lt;/foo>;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:hasOwnProperty" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasOwnProperty</apiName><shortdesc class="- topic/shortdesc ">
    Vérifie si l’objet possède la propriété spécifiée par le paramètre p.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasOwnProperty, hasOwnProperty
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la propriété existe, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriété pour laquelle établir une correspondance.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Vérifie si l’objet possède la propriété spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">p</codeph>. 
    
    </apiDesc><example conref="examples\XML.hasOwnProperty.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> pour s’assurer que la propriété (<codeph class="+ topic/ph pr-d/codeph ">b</codeph>) existe avant d’évaluer une expression (<codeph class="+ topic/ph pr-d/codeph ">b == "11"</codeph>) qui utilise cette propriété :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;a />
            &lt;a>
                &lt;b>10&lt;/b>
            &lt;/a>
            &lt;a>
                &lt;b>11&lt;/b>
            &lt;/a>
        &lt;/foo>;
trace(xml.a.(hasOwnProperty("b") &amp;&amp; b == "11")); 
</codeblock> Si la dernière ligne de cet exemple était remplacée par ce qui suit, Flash Player renverrait une exception dans la mesure où le premier élément appelé <codeph class="+ topic/ph pr-d/codeph ">a</codeph> ne comporte pas de propriété <codeph class="+ topic/ph pr-d/codeph ">b</codeph> :
 <p class="- topic/p ">
 <pre xml:space="preserve" class="- topic/pre ">trace(xml.a.(b == "11"));</pre>
 </p>
</example><example conref="examples\XML.hasOwnProperty.2.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">hasOwnProperty()</codeph> pour s’assurer que la propriété (<codeph class="+ topic/ph pr-d/codeph ">item</codeph>) existe avant d’évaluer une expression (<codeph class="+ topic/ph pr-d/codeph ">item.contains("toothbrush")</codeph>) qui utilise cette propriété :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;orders>
            &lt;order id='1'>
                &lt;item>toothbrush&lt;/item>
                &lt;item>toothpaste&lt;/item>
            &lt;/order>
            &lt;order>
                &lt;returnItem>shoe polish&lt;/returnItem>
            &lt;/order>
        &lt;/orders>;
trace(xml.order.(hasOwnProperty("item") &amp;&amp; item.contains("toothbrush"))); 
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:hasSimpleContent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">hasSimpleContent</apiName><shortdesc class="- topic/shortdesc ">
    Vérifie si l’objet XML intègre un contenu simple.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.hasSimpleContent, hasSimpleContent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’objet XML intègre un contenu simple, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
    
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Vérifie si l’objet XML intègre un contenu simple. Un objet XML intègre un contenu simple s’il représente un nœud de texte, un nœud d’attribut ou un élément XML sans élément enfant. Les objets XML qui représentent des commentaires et des instructions de traitement n’intègrent <i class="+ topic/ph hi-d/i ">pas</i> un contenu simple.
    
    </apiDesc><example conref="examples\XML.hasComplexContent.1.as" class="- topic/example "> L’exemple suivant porte sur un objet XML, avec une propriété appelée <codeph class="+ topic/ph pr-d/codeph ">a</codeph> qui a un contenu simple et une autre propriété <codeph class="+ topic/ph pr-d/codeph ">a</codeph> qui a du contenu complexe :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo>
            &lt;a>
                text
            &lt;/a>
            &lt;a>
                &lt;b/>
            &lt;/a>
        &lt;/foo>;
trace(xml.a[0].hasComplexContent()); // false
trace(xml.a[1].hasComplexContent()); // true

trace(xml.a[0].hasSimpleContent()); // true
trace(xml.a[1].hasSimpleContent()); // false
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:inScopeNamespaces" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">inScopeNamespaces</apiName><shortdesc class="- topic/shortdesc ">
    Recense les espaces de noms associés à l’objet XML, par rapport au parent de l’objet.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.inScopeNamespaces, inScopeNamespaces
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’objets Namespace. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Recense les espaces de noms associés à l’objet XML, par rapport au parent de l’objet. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:insertChildAfter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">insertChildAfter</apiName><shortdesc class="- topic/shortdesc ">
    Insère le paramètre child2 indiqué après le paramètre child1 dans cet objet XML et renvoie l’objet produit.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.insertChildAfter, insertChildAfter
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML produit ou <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet dans l’objet source que vous insérez avant <codeph class="+ topic/ph pr-d/codeph ">child2</codeph>.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à insérer.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Insère le paramètre <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> indiqué après le paramètre <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> dans cet objet XML et renvoie l’objet produit. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> est réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, la méthode insère le contenu de <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> <i class="+ topic/ph hi-d/i ">avant</i> tous les enfants de l’objet XML (en d’autres termes, après <i class="+ topic/ph hi-d/i ">none</i>). Si <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> est fourni, mais qu’il n’existe pas dans l’objet XML, celui-ci n’est pas modifié et <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est renvoyé.
    
    <p class="- topic/p ">Si vous appelez cette méthode pour un enfant XML qui n’est pas un élément (texte, attributs, commentaires, pi, etc.), <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est renvoyé.</p>
    
    <p class="- topic/p ">Utilisez l’opérateur <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) pour supprimer les nœuds XML.</p>
    
    </apiDesc><example conref="examples\XML.insertChildAfter.1.as" class="- topic/example "> L’exemple suivant ajoute un nouvel élément à la fin des éléments enfant d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;menu>
            &lt;item>burger&lt;/item>
            &lt;item>soda&lt;/item>
        &lt;/menu>;
xml.insertChildAfter(xml.item[0], &lt;saleItem>fries&lt;/saleItem>);
trace(xml);
</codeblock> Le code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> suivant est renvoyé :
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph "> &lt;menu>
     &lt;item>burger&lt;/item>
     &lt;saleItem>fries&lt;/saleItem>
     &lt;item>soda&lt;/item>
 &lt;/menu></codeph></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/insertChildBefore()" class="- topic/link "><linktext class="- topic/linktext ">XML.insertChildBefore()</linktext></link><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete, opérateur (XML)</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:insertChildBefore" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">insertChildBefore</apiName><shortdesc class="- topic/shortdesc ">
    Insère le paramètre child2 indiqué avant le paramètre child1 dans cet objet XML et renvoie l’objet produit.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.insertChildBefore, insertChildBefore
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML produit ou <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child1</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet de l’objet source que vous insérez après <codeph class="+ topic/ph pr-d/codeph ">child2</codeph>.
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">child2</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à insérer.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Insère le paramètre <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> indiqué après le paramètre <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> dans cet objet XML et renvoie l’objet produit. Si le paramètre <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> est réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, la méthode insère le contenu de <codeph class="+ topic/ph pr-d/codeph ">child2</codeph> <i class="+ topic/ph hi-d/i ">après</i> tous les enfants de l’objet XML (en d’autres termes, avant <i class="+ topic/ph hi-d/i ">none</i>). Si <codeph class="+ topic/ph pr-d/codeph ">child1</codeph> est fourni, mais qu’il n’existe pas dans l’objet XML, celui-ci n’est pas modifié et <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est renvoyé.
    
    <p class="- topic/p ">Si vous appelez cette méthode pour un enfant XML qui n’est pas un élément (texte, attributs, commentaires, pi, etc.), <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est renvoyé.</p>
    
    <p class="- topic/p ">Utilisez l’opérateur <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) pour supprimer les nœuds XML.</p>
    
    </apiDesc><example conref="examples\XML.insertChildBefore.1.as" class="- topic/example "> L’exemple suivant ajoute un nouvel élément à la fin des éléments enfant d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;menu>
            &lt;item>burger&lt;/item>
            &lt;item>soda&lt;/item>
        &lt;/menu>;
xml.insertChildBefore(xml.item[0], &lt;saleItem>fries&lt;/saleItem>);
trace(xml);
</codeblock> Le code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> suivant est renvoyé :
 <pre xml:space="preserve" class="- topic/pre ">
 &lt;menu>
     &lt;saleItem>fries&lt;/saleItem>
     &lt;item>burger&lt;/item>
     &lt;item>soda&lt;/item>
 &lt;/menu></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/insertChildAfter()" class="- topic/link "><linktext class="- topic/linktext ">XML.insertChildAfter()</linktext></link><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete, opérateur (XML)</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:length" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
    Pour les objets XML, cette méthode renvoie toujours l’entier 1.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.length, length
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie toujours <codeph class="+ topic/ph pr-d/codeph ">1</codeph> pour tout objet XML.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Pour les objets XML, cette méthode renvoie toujours l’entier <codeph class="+ topic/ph pr-d/codeph ">1</codeph>. La méthode <codeph class="+ topic/ph pr-d/codeph ">length()</codeph> de la classe XMLList renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">1</codeph> si l’objet XMLList ne contient qu’une seule valeur.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:localName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">localName</apiName><shortdesc class="- topic/shortdesc ">
    Indique la partie nom local du nom complet de l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.localName, localName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom local exprimé sous forme de chaîne ou <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Indique la partie nom local du nom complet de l’objet XML.
    
    </apiDesc><example conref="examples\XML.localName.1.as" class="- topic/example "> L’exemple suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">localName()</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
trace(xml.localName()); // Envelope
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:name" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">name</apiName><shortdesc class="- topic/shortdesc ">
    Indique le nom complet de l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.name, name
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le nom complet correspond à QName ou <codeph class="+ topic/ph pr-d/codeph ">null</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Indique le nom complet de l’objet XML. 
    
    </apiDesc><example conref="examples\XML.name.1.as" class="- topic/example "> L’exemple suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> pour obtenir le nom qualifié d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
trace(xml.name().localName); // Envelope
trace(xml.name().uri); // "http://www.w3.org/2001/12/soap-envelope"
</codeblock></example><example conref="examples\XML.name.2.as" class="- topic/example "> L’exemple suivant illustre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">name()</codeph> lorsqu’elle est appelée sur une propriété XML, sur un élément de texte et sur un attribut :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;foo x="15" y="22">
            text
        &lt;/foo>;
        
trace(xml.name().localName); // foo
trace(xml.name().uri == ""); // true
trace(xml.children()[0]); // text
trace(xml.children()[0].name()); // null
trace(xml.attributes()[0]); // 15
trace(xml.attributes()[0].name()); // x
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/attributes()" class="- topic/link "><linktext class="- topic/linktext ">XML.attributes()</linktext></link><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">identificateur d’attribut</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespaceDeclarations" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">namespaceDeclarations</apiName><shortdesc class="- topic/shortdesc ">
    Recense les déclarations d’espace de nom associées à l’objet XML dans le contexte de l’objet parent.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.namespaceDeclarations, namespaceDeclarations
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau d’objets Namespace.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Recense les déclarations d’espace de nom associées à l’objet XML dans le contexte de l’objet parent. 
    
    </apiDesc><example conref="examples\XML.namespaceDeclarations.1.as" class="- topic/example "> L’exemple suivant renvoie les déclarations d’espace de noms d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/">

            &lt;!-- ... -->
            
        &lt;/rdf:RDF>;
                    
for (var i:uint = 0; i &lt; xml.namespaceDeclarations().length; i++) {
    var ns:Namespace = xml.namespaceDeclarations()[i]; 
    var prefix:String = ns.prefix;
    if (prefix == "") {
        prefix = "(default)";
    }
    trace(prefix + ":" , ns.uri);
}
</codeblock> Le code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> suivant est renvoyé :
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns#
 dc: http://purl.org/dc/elements/1.1/
 (default): http://purl.org/rss/1.0/</codeph></pre>
</example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/namespace()" class="- topic/link "><linktext class="- topic/linktext ">XML.namespace()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:namespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">namespace</apiName><shortdesc class="- topic/shortdesc ">
    Si vous ne fournissez pas de paramètre, indique l’espace de noms associé au nom complet de cet objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.namespace, namespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">null</codeph>, <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> ou un espace de noms.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">prefix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Préfixe pour lequel établir une correspondance.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Si vous ne fournissez pas de paramètre, indique l’espace de noms associé au nom complet de cet objet XML. Si vous spécifiez un paramètre <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph>, la méthode renvoie l’espace de noms correspondant au paramètre <codeph class="+ topic/ph pr-d/codeph ">prefix</codeph> qui figure dans le domaine associé à l’objet XML. S’il n’existe pas d’espace de noms de ce type, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><example conref="examples\XML.namespace.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">namespace()</codeph> pour obtenir l’espace de noms d’un objet XML et l’affecter à un objet Namespace appelé <codeph class="+ topic/ph pr-d/codeph ">soap</codeph> qui est ensuite utilisé pour identifier une propriété de l’objet <codeph class="+ topic/ph pr-d/codeph ">xml</codeph> (<codeph class="+ topic/ph pr-d/codeph ">xml.soap::Body[0]</codeph>) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">

                        &lt;soap:Body xmlns:wx = "http://example.com/weather">
                &lt;wx:forecast>
                    &lt;wx:city>Quito&lt;/wx:city>
                &lt;/wx:forecast>
            &lt;/soap:Body>
        &lt;/soap:Envelope>;
        
var soap:Namespace = xml.namespace();
trace(soap.prefix); // soap
trace(soap.uri); // http://www.w3.org/2001/12/soap-envelope

var body:XML = xml.soap::Body[0];
trace(body.namespace().prefix); // soap
trace(xml.namespace().uri); // http://www.w3.org/2001/12/soap-envelope
trace(body.namespace("wx").uri); // "http://example.com/weather"
</codeblock></example><example conref="examples\XML.namespace.2.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">namespace()</codeph> pour obtenir l’espace de noms par défaut d’un nœud, ainsi que l’espace de noms pour un préfixe spécifique (<codeph class="+ topic/ph pr-d/codeph ">"dc"</codeph>) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
            xmlns:dc="http://purl.org/dc/elements/1.1/" 
            xmlns="http://purl.org/rss/1.0/">
                &lt;!-- ... -->
        &lt;/rdf:RDF>;
                    
trace(xml.namespace()); // http://www.w3.org/1999/02/22-rdf-syntax-ns#
trace(xml.namespace("dc")); // http://purl.org/dc/elements/1.1/
trace(xml.namespace("foo")); // undefined
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:nodeKind" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">nodeKind</apiName><shortdesc class="- topic/shortdesc ">
    Définit le type de nœud : texte, commentaire, instruction de traitement, attribut ou élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.nodeKind, nodeKind
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Type de nœud utilisé.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Définit le type de nœud : texte, commentaire, instruction de traitement, attribut ou élément. 
    
    </apiDesc><example conref="examples\XMLNodeKindExample1.as" class="- topic/example "> Cet exemple suit les cinq types de nœud :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;

var xml:XML = 
    &lt;example id="10">
        &lt;!-- this is a comment -->
        &lt;?test this is a pi ?>
        and some text
    &lt;/example>;

trace(xml.nodeKind()); // element
trace(xml.children()[0].nodeKind()); // comment
trace(xml.children()[1].nodeKind()); // processing-instruction
trace(xml.children()[2].nodeKind()); // text
trace(xml.@id[0].nodeKind()); // attribute
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#attribute_identifier" class="- topic/link "><linktext class="- topic/linktext ">identificateur d’attribut</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:normalize" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">normalize</apiName><shortdesc class="- topic/shortdesc ">
    Pour l’objet XML et tous les objets XML descendants, fusionne les nœuds de texte adjacents et supprime les nœuds de texte vides.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.normalize, normalize
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML normalisé produit.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Pour l’objet XML et tous les objets XML descendants, fusionne les nœuds de texte adjacents et supprime les nœuds de texte vides.
    
    </apiDesc><example conref="examples\XML.normalize.1.as" class="- topic/example "> L’exemple suivant illustre l’effet de l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">normalize()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;body>&lt;/body>;
xml.appendChild("hello");
xml.appendChild(" world");
trace(xml.children().length()); // 2
xml.normalize();
trace(xml.children().length()); // 1
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:parent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parent</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie le parent de l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.parent, parent
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une référence XML du noeud parent ou <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> si l’objet XML n’a pas de parent.
    
    </apiDesc><apiType value="any" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie le parent de l’objet XML. Si l’objet XML ne possède pas de parent, la méthode renvoie <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
    
    </apiDesc><example conref="examples\XML.parent.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">parent()</codeph> pour identifier l’élément parent d’un élément spécifique dans une structure XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p id="p1">Hello&lt;/p>
        &lt;p id="p2">Test:
            &lt;ul>
                &lt;li>1&lt;/li>
                &lt;li>2&lt;/li>
            &lt;/ul>
        &lt;/p>
    &lt;/body>;
var node:XML = xml.p.ul.(li.contains("1"))[0]; // == &lt;ul> ... &lt;/ul>
trace(node.parent().@id); // p2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:prependChild" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">prependChild</apiName><shortdesc class="- topic/shortdesc ">
    Insère une copie de l’objet child fourni dans l’élément XML avant toute propriété XML associée à cet élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prependChild, prependChild
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML produit.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à insérer.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Insère une copie de l’objet <codeph class="+ topic/ph pr-d/codeph ">child</codeph> fourni dans l’élément XML avant toute propriété XML associée à cet élément.
    
    <p class="- topic/p ">Utilisez l’opérateur <codeph class="+ topic/ph pr-d/codeph ">delete</codeph> (XML) pour supprimer les nœuds XML.</p> 
    
    </apiDesc><example conref="examples\XML.prependChild.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">prependChild()</codeph> pour ajouter un élément au début de la liste d’enfants d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body>
            &lt;p>hello&lt;/p>
        &lt;/body>;
        
xml.prependChild(&lt;p>world&lt;/p>);    
trace(xml.p[0].toXMLString()); // &lt;p>world&lt;/p>
trace(xml.p[1].toXMLString()); // &lt;p>hello&lt;/p>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="operators.html#delete_(XML)" class="- topic/link "><linktext class="- topic/linktext ">delete, opérateur (XML)</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:processingInstructions" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">processingInstructions</apiName><shortdesc class="- topic/shortdesc ">
    Si un paramètre name est spécifié, la méthode recense tous les enfants de l’objet XML qui contiennent des instructions de traitement portant le nom indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.processingInstructions, processingInstructions
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Liste d’objets enfant correspondants.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">*</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom des instructions de traitement pour lesquelles établir une correspondance.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Si un paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> est spécifié, recense tous les enfants de l’objet XML qui contiennent des instructions de traitement portant le <codeph class="+ topic/ph pr-d/codeph ">name</codeph> indiqué. Si aucun paramètre n’est spécifié, la méthode recense tous les enfants de l’objet XML qui contiennent des instructions de traitement.
    
    </apiDesc><example conref="examples\XML.processingInstructions.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">processingInstructions()</codeph> pour obtenir un tableau d’instructions de traitement pour un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreProcessingInstructions = false;
var xml:XML =
    &lt;body>
            foo
            &lt;?xml-stylesheet href="headlines.css" type="text/css" ?>
            &lt;?instructionX ?>
            
    &lt;/body>;

trace(xml.processingInstructions().length()); // 2
trace(xml.processingInstructions()[0].name()); // xml-stylesheet
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:propertyIsEnumerable" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">propertyIsEnumerable</apiName><shortdesc class="- topic/shortdesc ">
    Vérifie si la propriété p figurre dans le jeu de propriétés qui peut faire l’objet d’une itération avec une instruction for..in appliquée à l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.propertyIsEnumerable, propertyIsEnumerable
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la propriété peut faire l’objet d’une itération dans une instruction <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph>, puis <codeph class="+ topic/ph pr-d/codeph ">true</codeph> ; sinon <codeph class="+ topic/ph pr-d/codeph ">false</codeph>.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">p</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriété à vérifier.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Vérifie si la propriété <codeph class="+ topic/ph pr-d/codeph ">p</codeph> figure dans le jeu de propriétés qui peut faire l’objet d’une itération avec une instruction <codeph class="+ topic/ph pr-d/codeph ">for..in</codeph> appliquée à l’objet XML. Ne renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> que si <codeph class="+ topic/ph pr-d/codeph ">toString(p) == "0"</codeph>. 
    
    </apiDesc><example conref="examples\XML.propertyIsEnumerable.1.as" class="- topic/example "> L’exemple suivant indique que, pour un objet XML, la méthode <codeph class="+ topic/ph pr-d/codeph ">propertyNameIsEnumerable()</codeph> ne renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> que pour la valeur <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, tandis que pour un objet XMLList, la valeur renvoyée est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour chaque valeur d’index valide pour l’objet XMLList :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
        &lt;body>
             &lt;p>Hello&lt;/p>
               &lt;p>World&lt;/p>
        &lt;/body>;

trace(xml.propertyIsEnumerable(0)); // true
trace(xml.propertyIsEnumerable(1)); // false

for (var propertyName:String in xml) {
    trace(xml[propertyName]);
}

var list:XMLList = xml.p;
trace(list.propertyIsEnumerable(0)); // true
trace(list.propertyIsEnumerable(1)); // true
trace(list.propertyIsEnumerable(2)); // false

for (var propertyName:String in list) { 
    trace(list[propertyName]);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:removeNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">removeNamespace</apiName><shortdesc class="- topic/shortdesc ">
    Supprime l’espace de noms indiqué pour cet objet et tous ses descendants.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.removeNamespace, removeNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Copie de l’objet XML produit.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Espace de noms à supprimer.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Supprime l’espace de noms indiqué pour cet objet et tous ses descendants. La méthode <codeph class="+ topic/ph pr-d/codeph ">removeNamespaces()</codeph> ne supprime pas un espace de noms s’il est référencé par le nom complet de l’objet ou celui des attributs de l’objet.
    
    </apiDesc><example conref="examples\XML.removeNamespace.1.as" class="- topic/example "> L’exemple suivant indique comment supprimer une déclaration d’espace de noms à partir d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
        xmlns:dc="http://purl.org/dc/elements/1.1/" 
        xmlns="http://purl.org/rss/1.0/">
    
        &lt;!-- ... -->
        
    &lt;/rdf:RDF>;

trace(xml.namespaceDeclarations().length); // 3
trace(xml.namespaceDeclarations()[0] is String); // 
var dc:Namespace = xml.namespace("dc");
xml.removeNamespace(dc);
trace(xml.namespaceDeclarations().length); // 2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:replace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">replace</apiName><shortdesc class="- topic/shortdesc ">
    Remplace les propriétés spécifiées par le paramètre propertyName par le paramètre value indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.replace, replace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML produit, dans lequel les propriétés correspondantes ont été remplacées.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">propertyName</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Peut être une valeur numérique, un nom incomplet d’ensemble d’éléments XML, un nom complet d’ensemble d’éléments XML ou le caractère générique astérisque (« * »). Utilisez un nom incomplet pour identifier les éléments XML dans l’espace de noms par défaut. 
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur de remplacement, qui peut être un objet XML, un objet XMLList ou toute valeur pouvant être convertie par le biais de <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>. 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Remplace les propriétés spécifiées par le paramètre <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph> par le paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph> indiqué. Si aucune propriété ne correspond à <codeph class="+ topic/ph pr-d/codeph ">propertyName</codeph>, l’objet XML n’est pas modifié.
    
    </apiDesc><example conref="examples\XML.replace.1.as" class="- topic/example "> L’exemple suivant illustre l’appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> avec un entier en tant que premier paramètre :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace(1, &lt;p>Bob&lt;/p>);
trace(xml);
</codeblock> Le résultat du code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> est le suivant :
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body>
     &lt;p>Hello&lt;/p>
     &lt;p>Bob&lt;/p>
     &lt;hr/>
 &lt;/body>
 </codeph></pre>
</example><example conref="examples\XML.replace.2.as" class="- topic/example "> L’exemple suivant appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> avec une chaîne en tant que premier paramètre :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace("p", &lt;p>Hi&lt;/p>); 
trace(xml);
</codeblock> Le résultat du code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> est le suivant :
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body>
     &lt;p>Hi&lt;/p>
     &lt;hr/>
 &lt;/body>;
 </codeph></pre>
</example><example conref="examples\XML.replace.3.as" class="- topic/example "> L’exemple suivant illustre l’appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> avec un QName en tant que premier paramètre :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;ns:body xmlns:ns = "myNS">
        &lt;ns:p>Hello&lt;/ns:p>
        &lt;ns:p>World&lt;/ns:p>
        &lt;hr/>
    &lt;/ns:body>;

var qname:QName = new QName("myNS", "p");
xml.replace(qname, &lt;p>Bob&lt;/p>);
trace(xml);

</codeblock> Le résultat du code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> est le suivant :
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;ns:body xmlns:ns = "myNS">
     &lt;p>Bob&lt;/p>
     &lt;hr/>
 &lt;/ns:body>
 </codeph></pre>
</example><example conref="examples\XML.replace.4.as" class="- topic/example "> L’exemple suivant illustre l’appel à la méthode <codeph class="+ topic/ph pr-d/codeph ">replace()</codeph> avec la chaîne <codeph class="+ topic/ph pr-d/codeph ">"*"</codeph> en tant que premier paramètre :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
        &lt;hr/>
    &lt;/body>;

xml.replace("*", &lt;img src = "hello.jpg"/>);
trace(xml);
</codeblock> Le résultat du code <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> est le suivant :
 
 <pre xml:space="preserve" class="- topic/pre "><codeph class="+ topic/ph pr-d/codeph ">
 &lt;body>
     &lt;img src="hello.jpg"/>
 &lt;/body>
 </codeph></pre>
</example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setChildren" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setChildren</apiName><shortdesc class="- topic/shortdesc ">
    Remplace les propriétés enfant de l’objet XML par l’ensemble de propriétés XML spécifié, fourni dans le paramètre value.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setChildren, setChildren
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML produit. 
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Propriétés XML de remplacement (objet XML unique ou objet XMLList). 
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Remplace les propriétés enfant de l’objet XML par l’ensemble de propriétés XML spécifié, fourni dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph>.
    
    </apiDesc><example conref="examples\XML.setChildren.1.as" class="- topic/example "> L’exemple suivant illustre l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">setChildren()</codeph>, tout d’abord en utilisant un objet XML en tant que paramètre, puis utilise un objet XMLList en tant que paramètre :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;body>
        &lt;p>Hello&lt;/p>
        &lt;p>World&lt;/p>
    &lt;/body>;

var list:XMLList = xml.p;

xml.setChildren(&lt;p>hello&lt;/p>);
trace(xml);

//    &lt;body>
//        &lt;p>hello&lt;/p>
//    &lt;/body>

xml.setChildren(list);
trace(xml);

//    &lt;body>
//        &lt;p>Hello&lt;/p>
//        &lt;p>World&lt;/p>
//    &lt;/body>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setLocalName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setLocalName</apiName><shortdesc class="- topic/shortdesc ">
    Remplace le nom local de l’objet XML par le paramètre name indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setLocalName, setLocalName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nom de remplacement du nom local.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Remplace le nom local de l’objet XML par le paramètre <codeph class="+ topic/ph pr-d/codeph ">name</codeph> indiqué. 
    
    </apiDesc><example conref="examples\XML.setLocalName.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">setLocalName()</codeph> pour modifier le nom local d’un élément XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;ns:item xmlns:ns="http://example.com">
        toothbrush
    &lt;/ns:item>;
    
xml.setLocalName("orderItem");
trace(xml.toXMLString()); // &lt;ns:orderItem xmlns:ns="http://example.com">toothbrush&lt;/ns:orderItem>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setName</apiName><shortdesc class="- topic/shortdesc ">
    Règle le nom de l’objet XML sur le nom complet ou le nom d’attribut indiqué.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setName, setName
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">name</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouveau nom de l’objet.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Règle le nom de l’objet XML sur le nom complet ou le nom d’attribut indiqué. 
    
    </apiDesc><example conref="examples\XML.setName.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">setName()</codeph> pour modifier le nom local d’un élément XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = 
    &lt;item>
        toothbrush
    &lt;/item>;
    
xml.setName("orderItem");
trace(xml.toXMLString()); // &lt;orderItem>toothbrush&lt;/orderItem>
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setNamespace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setNamespace</apiName><shortdesc class="- topic/shortdesc ">
    Définit l’espace de noms associé à l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setNamespace, setNamespace
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">ns</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Namespace</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nouvel espace de noms.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Définit l’espace de noms associé à l’objet XML.
    
    </apiDesc><example conref="examples\XML.setNamespace.1.as" class="- topic/example "> L’exemple suivant utilise l’espace de noms <codeph class="+ topic/ph pr-d/codeph ">soap</codeph> défini dans un objet XML et l’applique à l’espace de noms d’un autre objet XML (<codeph class="+ topic/ph pr-d/codeph ">xml2</codeph>) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml1:XML = 
        &lt;soap:Envelope xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
            soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">
            &lt;!-- ... -->
        &lt;/soap:Envelope>;
var ns:Namespace = xml1.namespace("soap");

var xml2:XML = 
    &lt;Envelope>
        &lt;Body/>
    &lt;/Envelope>;
    
xml2.setNamespace(ns);

trace(xml2);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:setSettings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">setSettings</apiName><shortdesc class="- topic/shortdesc ">
    Définit les valeurs des propriétés XML suivantes : ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent et prettyPrinting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.setSettings, setSettings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">rest</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet doté des propriétés suivantes : 
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph></li></ul>
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Définit les valeurs des propriétés XML suivantes : <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>, <codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph> et <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph>. Les réglages par défaut, appliqués si vous ne spécifiez pas de paramètre <codeph class="+ topic/ph pr-d/codeph ">setObj</codeph>, sont les suivants :
    
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreComments = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreProcessingInstructions = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.ignoreWhitespace = true</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.prettyIndent = 2</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting = true</codeph></li></ul>
    
    <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque </b>: cette méthode ne doit pas être appliquée à une occurrence de la classe XML, mais à <codeph class="+ topic/ph pr-d/codeph ">XML</codeph>, comme illustré dans le code suivant : <codeph class="+ topic/ph pr-d/codeph ">XML.setSettings()</codeph>.</p>
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> L’exemple ci-dessous illustre les points suivants : comment appliquer des paramètres personnalisés (pour l’inclusion de commentaires et d’instructions de traitement) avant de définir un objet XML ; comment ensuite rétablir les paramètres par défaut avant de définir un autre objet XML ; et enfin comment définir de nouveau les paramètres par défaut (pour définir d’autres objets XML) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">prettyPrinting</linktext></link><link href="#XML/defaultSettings()" class="- topic/link "><linktext class="- topic/linktext ">defaultSettings()</linktext></link><link href="#XML/settings()" class="- topic/link "><linktext class="- topic/linktext ">settings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:settings" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">settings</apiName><shortdesc class="- topic/shortdesc ">
    Extrait les propriétés suivantes : ignoreComments, ignoreProcessingInstructions, ignoreWhitespace, prettyIndent et prettyPrinting.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.settings, settings
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet doté des propriétés XML suivantes :
    <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph></li></ul>
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Extrait les propriétés suivantes : <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph>, <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>, <codeph class="+ topic/ph pr-d/codeph ">prettyIndent</codeph> et <codeph class="+ topic/ph pr-d/codeph ">prettyPrinting</codeph>.
    
    </apiDesc><example conref="examples\XML.defaultSettings.1.as" class="- topic/example "> L’exemple ci-dessous illustre les points suivants : comment appliquer des paramètres personnalisés (pour l’inclusion de commentaires et d’instructions de traitement) avant de définir un objet XML ; comment ensuite rétablir les paramètres par défaut avant de définir un autre objet XML ; et enfin comment définir de nouveau les paramètres par défaut (pour définir d’autres objets XML) :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
XML.ignoreProcessingInstructions = false;
var customSettings:Object = XML.settings();

var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml1.toXMLString());
//    &lt;foo>
//        &lt;!-- comment -->
//         &lt;?instruction ?>
//    &lt;/foo>

XML.setSettings(XML.defaultSettings());
var xml2:XML = 
        &lt;foo>
            &lt;!-- comment -->
            &lt;?instruction ?>
        &lt;/foo>;
trace(xml2.toXMLString());
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/ignoreComments" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreComments</linktext></link><link href="#XML/ignoreProcessingInstructions" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreProcessingInstructions</linktext></link><link href="#XML/ignoreWhitespace" class="- topic/link "><linktext class="- topic/linktext ">XML.ignoreWhitespace</linktext></link><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyIndent</linktext></link><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">XML.prettyPrinting</linktext></link><link href="#XML/defaultSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.defaultSettings()</linktext></link><link href="#XML/setSettings()" class="- topic/link "><linktext class="- topic/linktext ">XML.setSettings()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:text" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">text</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie un objet XMLList contenant toutes les propriétés XML de l’objet XML qui représente les nœuds de texte XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.text, text
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Liste des propriétés.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie un objet XMLList contenant toutes les propriétés XML de l’objet XML qui représente les nœuds de texte XML.
    
    </apiDesc><example conref="examples\XML.text.1.as" class="- topic/example "> L’exemple suivant utilise la méthode <codeph class="+ topic/ph pr-d/codeph ">text()</codeph> pour obtenir les nœuds texte d’un objet XML :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
        &lt;body>
            text1
            &lt;hr/>
            text2
        &lt;/body>;
trace(xml.text()[0]); // text1
trace(xml.text()[1]); // text2
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="XML:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie l’objet XML sous forme de chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toString, toString 
    
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’objet XML.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie l’objet XML sous forme de chaîne. Les règles de cette conversion varient selon que l’objet XML intègre un contenu simple ou complexe :
    
    <ul class="- topic/ul "><li class="- topic/li ">Si l’objet XML comporte un contenu simple, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie le contenu de la chaîne de l’objet XML en éliminant les éléments suivants : la balise initiale, les attributs, les déclarations d’espace de noms et la balise de fin.</li></ul>
    
    <ul class="- topic/ul "><li class="- topic/li "> Si l’objet XML intègre un contenu complexe, <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie une chaîne codée au format XML qui représente l’objet XML entier, y compris la balise de début, les attributs, les déclarations d’espace de noms et la balise de fin.</li></ul>
    
    <p class="- topic/p ">Pour renvoyer à chaque fois l’objet XML entier, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph>.</p>
    
    
    </apiDesc><example conref="examples\XMLToStringExample1.as" class="- topic/example "> L’exemple suivant indique ce que la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie lorsque l’objet XML a un contenu simple :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = &lt;type name="Joe">example&lt;/type>;
trace(test.toString()); //example
</codeblock></example><example conref="examples\XMLToStringExample2.as" class="- topic/example "> L’exemple suivant indique ce que la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> renvoie lorsque l’objet XML a un contenu complexe :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var test:XML = 
&lt;type name="Joe">
    &lt;base name="Bob">&lt;/base>
    example
&lt;/type>;
trace(test.toString());
  // &lt;type name="Joe">
  // &lt;base name="Bob"/>
  // example
  // &lt;/type> 
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/hasSimpleContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasSimpleContent()</linktext></link><link href="#XML/hasComplexContent()" class="- topic/link "><linktext class="- topic/linktext ">XML.hasComplexContent()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:toXMLString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toXMLString</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie l’objet XML sous forme de chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.toXMLString, toXMLString
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’objet XML.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie l’objet XML sous forme de chaîne. A l’encontre de la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph>, la méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> renvoie toujours la balise de début, les attributs et la balise de fin de l’objet XML, que son contenu soit simple ou complexe (la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> supprime ces éléments si l’objet XML intègre un contenu simple).
      
    </apiDesc><example conref="examples\XML.toXMLString.1.as" class="- topic/example "> L’exemple suivant illustre la différence entre l’utilisation de la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> (qui s’applique à tous les paramètres d’une méthode <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph>, par défaut) et celle de la méthode <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML =
        &lt;p>hello&lt;/p>;
trace(xml); // hello
trace(xml.toXMLString()); // &lt;p>hello&lt;/p>
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toString()</linktext></link></related-links></apiOperation><apiOperation id="XML:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
    Renvoie l’objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.valueOf, valueOf
    </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur primitive d’une occurrence de XML.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Renvoie l’objet XML. 
    
    </apiDesc><example conref="examples\XML.valueOf.1.as" class="- topic/example "> L’exemple suivant indique que la valeur renvoyée par la méthode <codeph class="+ topic/ph pr-d/codeph ">valueOf()</codeph> est identique à l’objet XML source :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;p>hello&lt;/p>;
trace(xml.valueOf() === xml); // true
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="XML:ignoreComments:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreComments</apiName><shortdesc class="- topic/shortdesc ">
    Détermine si les commentaires XML sont ignorés lorsque les objets XML analysent les données XML source.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreComments, ignoreComments
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Détermine si les commentaires XML sont ignorés lorsque les objets XML analysent les données XML source. Par défaut, les commentaires sont ignorés (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>). Pour inclure les commentaires XML, réglez cette propriété sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. La propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreComments</codeph> n’est utilisée que lors de l’analyse XML et non pendant l’appel d’une méthode, telle que <codeph class="+ topic/ph pr-d/codeph ">myXMLObject.child(~~).toXMLString()</codeph>. Si les données XML source contiennent des nœuds de commentaire, ils sont conservés ou éliminés lors de l’analyse XML. 
    
    </apiDesc><example conref="examples\XML.ignoreComments.1.as" class="- topic/example "> Cet exemple illustre l’effet de la définition de <codeph class="+ topic/ph pr-d/codeph ">XML.ignoreComments</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> et sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreComments = false;
var xml1:XML = 
        &lt;foo>
            &lt;!-- comment -->
        &lt;/foo>;
trace(xml1.toXMLString()); // &lt;foo>&lt;!-- comment -->&lt;/foo>

XML.ignoreComments = true;
var xml2:XML = 
        &lt;foo>
            &lt;!-- example -->
        &lt;/foo>;
trace(xml2.toXMLString()); // &lt;foo/>
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreProcessingInstructions:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreProcessingInstructions</apiName><shortdesc class="- topic/shortdesc ">
    Détermine si les instructions de traitement XML sont ignorées lorsque les objets XML analysent les données XML source.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreProcessingInstructions, ignoreProcessingInstructions
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Détermine si les instructions de traitement XML sont ignorées lorsque les objets XML analysent les données XML source. Par défaut, les instructions de traitement sont ignorées (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>). Pour les inclure, réglez la propriété sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. La propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreProcessingInstructions</codeph> n’est utilisée que lors de l’analyse XML et non pendant l’appel de toute méthode telle que <codeph class="+ topic/ph pr-d/codeph ">myXMLObject.child(~~).toXMLString()</codeph>. Si les données XML source contiennent des nœuds d’instructions de traitement, ils sont conservés ou éliminés lors de l’analyse XML.
    
    </apiDesc><example conref="examples\XML.ignoreProcessingInstructions.1.as" class="- topic/example "> Cet exemple illustre l’effet de la définition de <codeph class="+ topic/ph pr-d/codeph ">XML.ignoreProcessingInstructions</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> et sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreProcessingInstructions = false;
var xml1:XML = 
        &lt;foo>
            &lt;?exampleInstruction ?>
        &lt;/foo>;
trace(xml1.toXMLString()); // &lt;foo>&lt;?exampleInstruction ?>&lt;/foo>

XML.ignoreProcessingInstructions = true;
var xml2:XML = 
        &lt;foo>
            &lt;?exampleInstruction ?>
        &lt;/foo>;
trace(xml2.toXMLString()); // &lt;foo/>
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/child()" class="- topic/link "><linktext class="- topic/linktext ">XML.child()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">XML.toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:ignoreWhitespace:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">ignoreWhitespace</apiName><shortdesc class="- topic/shortdesc ">
    Détermine si les caractères d’espace blanc placés au début et à la fin des nœuds de texte sont ignorés lors de l’analyse.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.ignoreWhitespace, ignoreWhitespace
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Détermine si les caractères d’espace blanc placés au début et à la fin des nœuds de texte sont ignorés lors de l’analyse. Les espaces blancs sont ignorés par défaut (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>). Si un nœud de texte est entièrement composé d’espaces blancs et que la propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, il n’est pas créé. Pour afficher les espaces blancs dans un nœud de texte, réglez la propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph>. 
    
    <p class="- topic/p ">Lorsque vous créez un objet XML, il place en mémoire cache la valeur actuelle de la propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph>. La modification de la propriété <codeph class="+ topic/ph pr-d/codeph ">ignoreWhitespace</codeph> ne change pas le comportement des objets XML.</p>
    
    </apiDesc><example conref="examples\XML.ignoreWhitespace.1.as" class="- topic/example "> Cet exemple illustre l’effet de la définition de <codeph class="+ topic/ph pr-d/codeph ">XML.ignoreWhitespace</codeph> sur <codeph class="+ topic/ph pr-d/codeph ">false</codeph> et sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
XML.ignoreWhitespace = false;
var xml1:XML = &lt;foo>    &lt;/foo>;
trace(xml1.children().length()); // 1

XML.ignoreWhitespace = true;
var xml2:XML = &lt;foo>    &lt;/foo>;
trace(xml2.children().length()); // 0
</codeblock></example></apiValueDetail></apiValue><apiValue id="XML:prettyIndent:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prettyIndent</apiName><shortdesc class="- topic/shortdesc ">
    Détermine la taille du retrait appliqué par les méthodes toString() et toXMLString() si la propriété XML.prettyPrinting est définie sur true.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prettyIndent, prettyIndent
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">int</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Détermine la taille du retrait appliqué par les méthodes <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> si la propriété <codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Les retraits sont appliqués à l’aide de caractères d’espace et non de caractères de tabulation. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">2</codeph>.
    
    </apiDesc><example conref="examples\XML.prettyIndent.1.as" class="- topic/example "> Cet exemple illustre l’effet de la définiton de la propriété statique <codeph class="+ topic/ph pr-d/codeph ">XML.prettyIndent</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;foo>&lt;bar/>&lt;/foo>;
XML.prettyIndent = 0;
trace(xml.toXMLString());

XML.prettyIndent = 1;
trace(xml.toXMLString());

XML.prettyIndent = 2;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/prettyPrinting" class="- topic/link "><linktext class="- topic/linktext ">prettyPrinting</linktext></link><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiValue><apiValue id="XML:prettyPrinting:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">prettyPrinting</apiName><shortdesc class="- topic/shortdesc ">
    Détermine si les méthodes toString() et toXMLString() normalisent les caractères d’espace blanc entre certaines balises.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">XML, XML.prettyPrinting, prettyPrinting
    </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Détermine si les méthodes <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">toXMLString()</codeph> normalisent les caractères d’espace blanc entre certaines balises. La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
    
    </apiDesc><example conref="examples\XML.prettyPrinting.1.as" class="- topic/example "> Cet exemple illustre l’effet de la définiton de la propriété statique <codeph class="+ topic/ph pr-d/codeph ">XML.prettyPrinting</codeph> :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var xml:XML = &lt;foo>&lt;bar/>&lt;/foo>;
XML.prettyPrinting = false;
trace(xml.toXMLString());

XML.prettyPrinting = true;
trace(xml.toXMLString());
</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#XML/prettyIndent" class="- topic/link "><linktext class="- topic/linktext ">prettyIndent</linktext></link><link href="#XML/toString()" class="- topic/link "><linktext class="- topic/linktext ">toString()</linktext></link><link href="#XML/toXMLString()" class="- topic/link "><linktext class="- topic/linktext ">toXMLString()</linktext></link></related-links></apiValue></apiClassifier><apiOperation id="globalOperation:Array" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Array</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un tableau.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Tableau de longueur zéro ou supérieure.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Array</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Vous pouvez transmettre un seul argument entier pour un tableau d’une longueur spécifique, un seul objet pour créer un tableau contenant l’objet spécifié ou ne transmettre aucun argument pour un tableau vide.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un nouveau tableau. Le tableau peut être de longueur zéro ou plus, ou un tableau renseigné par un seul objet spécifié. 
	 <ul class="- topic/ul "><li class="- topic/li ">Appeler <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> sans argument renvoie un tableau vide.</li><li class="- topic/li ">Appeler <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> avec un seul argument entier renvoie un tableau de la longueur spécifiée, mais dont les éléments possèdent une valeur non définie.</li><li class="- topic/li ">Appeler <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> avec un objet spécifié renvoie un tableau avec un élément de l’objet spécifié.</li></ul>
	 Utiliser la fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> <i class="+ topic/ph hi-d/i ">équivaut</i> à créer un tableau avec le constructeur de la classe Array, bien que la fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> ne prenne en charge qu’une seule valeur de paramètre, voire aucune. Vous ne pouvez pas utiliser la fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> pour renseigner le nouveau tableau avec plusieurs valeurs.
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> si vous essayez d’utiliser la fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> pour créer un nouveau tableau et transmettez plusieurs valeurs comme paramètres pour renseigner le tableau, vous obtenez une erreur de compilateur. La fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> ne prend en charge qu’un seul paramètre. Utilisez plutôt le constructeur de classe Array pour créer et renseigner un tableau de plusieurs valeurs.</p>
	 <p class="- topic/p ">La fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> n’a pas projeté le type d’un objet sur un tableau. Utilisez l’opérateur <codeph class="+ topic/ph pr-d/codeph ">as</codeph> pour effectuer une conversion de type explicite, ou attribution de type, si l’argument n’est pas une valeur primitive. Pour plus d’informations, voir la section Exemple de cette entrée. Si vous transmettez un objet en tant que paramètre à la fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph>, un nouveau tableau contenant l’objet en tant qu’élément est créé.</p>
	 </apiDesc><example conref="examples\Array.func.4.as" class="- topic/example "> L’exemple suivant démontre le comportement de la fonction <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> lorsqu’un argument n’est pas une valeur primitive. L’une des principales situations de conversion en tableau est la conversion d’une occurrence d’objet qui stocke ses valeurs sous forme de tableau. Si <codeph class="+ topic/ph pr-d/codeph ">Array()</codeph> est appelé avec un argument de type <codeph class="+ topic/ph pr-d/codeph ">Object</codeph> ou tout autre type de données non primitif, une référence à l’objet est stocké dans un élément du nouveau tableau. En d’autres termes, si le seul argument transmis est un objet, une référence à cet objet devient le premier élément du nouveau tableau.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = Array( obj );

trace(newArray == obj);    // false
trace(newArray[0] == obj); // true
trace(newArray[0][0])      // a
trace(newArray[0][1])      // b
trace(newArray[0][2])      // c
</codeblock></example><example conref="examples\Array.func.5.as" class="- topic/example "> Pour convertir <codeph class="+ topic/ph pr-d/codeph ">obj</codeph> en tableau, utilisez l’opérateur <codeph class="+ topic/ph pr-d/codeph ">as</codeph>, qui renvoie une référence de tableau si <codeph class="+ topic/ph pr-d/codeph ">obj</codeph> est un tableau valide et <codeph class="+ topic/ph pr-d/codeph ">null</codeph> dans tous les autres cas :
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
var obj:Object = [ "a", "b", "c" ];
      
var newArray:Array = obj as Array;

trace(newArray == obj); // true
trace(newArray[0]);     // a
trace(newArray[1]);     // b
trace(newArray[2]);     // c
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Classe Array</linktext></link><link href="operators.html#as" class="- topic/link "><linktext class="- topic/linktext ">Opérateur as</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:Boolean" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Boolean</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit le paramètre expression en une valeur booléenne et renvoie une valeur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Résultat de la conversion au type Boolean.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Expression ou objet à convertir au type Boolean.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit le paramètre <codeph class="+ topic/ph pr-d/codeph ">expression</codeph> en une valeur booléenne et renvoie une valeur. 
	 <p class="- topic/p ">La valeur renvoyée varie selon le type de données et la valeur de l’argument, comme décrit dans le tableau suivant :</p>
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Valeur entrée</entry><entry class="- topic/entry ">Exemple</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Nombre (ni <codeph class="+ topic/ph pr-d/codeph ">0</codeph>, ni <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>)</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(4)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne vide</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne non vide</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean("6")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">non défini</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Occurrence de classe Object</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean(new Object())</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Aucun argument</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row></tbody></tgroup></adobetable>
	 <p class="- topic/p ">A l’encontre des versions antérieures d’ActionScript, la fonction <codeph class="+ topic/ph pr-d/codeph ">Boolean()</codeph> renvoie les mêmes résultats que le constructeur de classe Boolean.</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Number" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Number</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une valeur spécifique en valeur numérique.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur numérique convertie
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur à convertir en nombre.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une valeur spécifique en valeur numérique. Le tableau suivant affiche le résultat de divers types d’entrées :
	 
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type/valeur d’entrée</entry><entry class="- topic/entry ">Exemple</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">non défini</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(true)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(false)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne vide</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne qui peut être convertie en nombre</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("5")</codeph></entry><entry class="- topic/entry ">Nombre (exemple : <codeph class="+ topic/ph pr-d/codeph ">5</codeph>)</entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne qui ne peut pas être convertie en nombre</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">Number("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Object" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Object</apiName><shortdesc class="- topic/shortdesc ">
	 Dans ActionScript 3.0, chaque valeur est un objet, ce qui signifie qu’appeler Object() pour une valeur renvoie celle-ci.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">value</codeph>.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet ou nombre, chaîne ou valeur booléenne à convertir.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Dans ActionScript 3.0, chaque valeur est un objet, ce qui signifie qu’appeler <codeph class="+ topic/ph pr-d/codeph ">Object()</codeph> pour une valeur renvoie celle-ci.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:String" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">String</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie une chaîne représentant le paramètre spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne représentant la valeur transmise pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">expression</codeph>.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc "> Expression à convertir en chaîne.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie une chaîne représentant le paramètre spécifié.
	 <p class="- topic/p ">Le tableau suivant affiche le résultat de divers types d’entrées :</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type/valeur d’entrée</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">non défini</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">non défini</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"null"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"true"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"false"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">"NaN"</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">String</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Object.toString()</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">Chaîne représentant le nombre</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
	 Crée une nouvelle occurrence de Vector dont les éléments sont des occurrences du type de données spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><commentPrivate>The reason this compiles with the .&lt;T> designation is because
	 a dummy class "T" is declared in the top level Vector.as file. If this file is
	 built without that one, the build will fail.
	 
	 </commentPrivate></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si l’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> contient un élément qui ne pas être converti au type de données spécifié.
	 
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une occurrence de Vector remplie avec les éléments du tableau <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph>.
	 
	 </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sourceArray</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une occurrence de Array ou de Vector dont les éléments deviennent des éléments du vecteur résultant. Si l’argument est une occurrence de Vector dont le type de données associé est identique au type de données spécifié, l’argument est renvoyé comme résultat de la fonction.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée une nouvelle occurrence de Vector dont les éléments sont des occurrences du type de données spécifié. Lorsque vous appelez cette fonction, vous spécifiez le type de données des éléments du vecteur résultant (le <i class="+ topic/ph hi-d/i ">type de base</i> du vecteur) à l’aide d’un paramètre type. Cette fonction utilise la même syntaxe utilisée lors de la déclaration d’une occurrence de Vector ou de l’appel du constructeur <codeph class="+ topic/ph pr-d/codeph ">new Vector.&lt;T>()</codeph> :
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">var v:Vector.&lt;String> = Vector.&lt;String>(["Hello", "World"]);</codeblock>
	 
	 <p class="- topic/p ">Le vecteur résultant est renseigné avec les valeurs contenues dans les éléments de l’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph>. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> est déjà une occurrence de Vector.&lt;T>, où <codeph class="+ topic/ph pr-d/codeph ">T</codeph> représente le type de base, la fonction renvoie ce vecteur. Sinon, le vecteur résultant est renseigné avec les éléments du vecteur ou du tableau <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph>.</p>
	 
	 <p class="- topic/p ">Quoi qu’il en soit, le type de données de tous les éléments de l’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> doit correspondre au type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph> spécifié dans l’appel de fonction.</p>
	 
	 <p class="- topic/p ">Si la valeur <codeph class="+ topic/ph pr-d/codeph ">length</codeph> de la propriété <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> est de 0, la fonction renvoie un vecteur vide.</p>
	 
	 <p class="- topic/p ">Si un vecteur est transmis en tant qu’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> et que son type de base n’est pas <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, ou si un tableau est transmis et que ses éléments ne sont pas des occurrences du type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, une tentative de conversion des valeurs au type de base est effectuée. Si les valeurs peuvent être automatiquement converties, le vecteur obtenu contient les valeurs converties. Si aucune conversion n’est possible, une erreur se produit.</p>
	 
	 <p class="- topic/p ">De même, si un élément de l’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> est une occurrence de la sous-classe du type de base<codeph class="+ topic/ph pr-d/codeph ">T</codeph>, l’appel aboutit et l’élément est ajouté au vecteur résultant. Ceci est valable même si l’argument <codeph class="+ topic/ph pr-d/codeph ">sourceArray</codeph> est un vecteur dont le type de base est une sous-classe de <codeph class="+ topic/ph pr-d/codeph ">T</codeph>. C’est en fait le seul moyen de convertir un vecteur avec un type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph> en un vecteur avec un type de base étant une super-classe de <codeph class="+ topic/ph pr-d/codeph ">T</codeph>.</p>
	 
	 <p class="- topic/p ">Par exemple, le code suivant génère une erreur de compilation en mode strict, ou une erreur TypeError à l’exécution, car il tente d’affecter un Vector.&lt;Sprite> à une variable Vector.&lt;DisplayObject> (Sprite est une sous-classe de DisplayObject) :</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var v1:Vector.&lt;Sprite> = new Vector.&lt;Sprite>();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject> = v1;
	 </codeblock>
	 
	 <p class="- topic/p ">La version alternative du code suivante copie avec succès les éléments d’une occurrence de Vector.&lt;Sprite> sur une occurrence de Vector.&lt;DisplayObject> :</p>
	 
	 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
	 var v1:Vector.&lt;Sprite> = new Vector.&lt;Sprite>();
	 v1[0] = new Sprite();
	 var v2:Vector.&lt;DisplayObject> = Vector.&lt;DisplayObject>(v1);
	 </codeblock>
	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector" class="- topic/link "><linktext class="- topic/linktext ">Classe Vector</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XMLList" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">XMLList</apiName><shortdesc class="- topic/shortdesc ">
     Convertit un objet en objet XMLList.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XMLList contenant des valeurs enregistrées dans l’objet converti.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XMLList</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à convertir en objet XMLList.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Convertit un objet en objet XMLList.
     <p class="- topic/p ">Le tableau suivant décrit les valeurs renvoyées pour divers types d’entrées.</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type de paramètre</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Boolean</entry><entry class="- topic/entry ">La valeur est d’abord convertie en chaîne, puis en objet XMLList.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Null</entry><entry class="- topic/entry ">Il se produit une erreur d’exécution (exception TypeError).</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">La valeur est d’abord convertie en chaîne, puis en objet XMLList.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Converti au format XMLList sous réserve que la valeur soit de type String, Number ou Boolean. Dans tous les autres cas, il se produit une erreur d’exécution (exception TypeError).</entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">La valeur est convertie en objet XMLList.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Undefined</entry><entry class="- topic/entry ">Il se produit une erreur d’exécution (exception TypeError).</entry></row><row class="- topic/row "><entry class="- topic/entry ">XML</entry><entry class="- topic/entry ">La valeur est convertie en objet XMLList.</entry></row><row class="- topic/row "><entry class="- topic/entry ">XMLList</entry><entry class="- topic/entry ">La valeur entrée est renvoyée sans modification.</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/XML()" class="- topic/link "><linktext class="- topic/linktext ">XML()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:XML" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">XML</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit un objet en objet XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet XML contenant des valeurs enregistrées dans l’objet converti.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">XML</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">expression</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet à convertir au format XML.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit un objet en objet XML. 
	 <p class="- topic/p ">Le tableau suivant décrit les valeurs renvoyées pour divers types d’entrées.</p>
	 	<adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type de paramètre</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">Boolean</entry><entry class="- topic/entry ">La valeur est d’abord convertie en chaîne, puis en objet XML.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Null</entry><entry class="- topic/entry ">Il se produit une erreur d’exécution (exception TypeError).</entry></row><row class="- topic/row "><entry class="- topic/entry ">Number</entry><entry class="- topic/entry ">La valeur est d’abord convertie en chaîne, puis en objet XML.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Object</entry><entry class="- topic/entry ">Converti au format XML sous réserve que la valeur soit de type String, Number ou Boolean. Dans tous les autres cas, il se produit une erreur d’exécution (exception TypeError).</entry></row><row class="- topic/row "><entry class="- topic/entry ">String</entry><entry class="- topic/entry ">La valeur est convertie au format XML.</entry></row><row class="- topic/row "><entry class="- topic/entry ">Undefined</entry><entry class="- topic/entry ">Il se produit une erreur d’exécution (exception TypeError).</entry></row><row class="- topic/row "><entry class="- topic/entry ">XML</entry><entry class="- topic/entry ">La valeur entrée est renvoyée sans modification.</entry></row><row class="- topic/row "><entry class="- topic/entry ">XMLList</entry><entry class="- topic/entry ">Ne renvoie un objet XML que si l’objet XMLList ne contient qu’une seule propriété de type XML. Dans tous les autres cas, il se produit une erreur d’exécution (exception TypeError).</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/XMLList()" class="- topic/link "><linktext class="- topic/linktext ">XMLList()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURIComponent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decodeURIComponent</apiName><shortdesc class="- topic/shortdesc ">
	 Décode un composant URI codé pour produire une chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne dans laquelle tous les caractères précédemment convertis en séquence d’échappement par la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> retrouvent leur forme sans séquence d’échappement.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne codée à l’aide de la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph>.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Décode un composant URI codé pour produire une chaîne. Renvoie une chaîne dont tous les caractères précédemment convertis en séquence d’échappement par la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph> retrouvent leur forme non codée.
	 <p class="- topic/p ">Cette fonction est différente de la fonction <codeph class="+ topic/ph pr-d/codeph ">decodeURI()</codeph> en ce sens qu’elle est conçue pour être utilisée uniquement avec une partie de chaîne URI appelée composant URI. Un composant URI correspond à tout texte compris entre des caractères spéciaux nommés <i class="+ topic/ph hi-d/i ">séparateurs de composants</i> (<codeph class="+ topic/ph pr-d/codeph "> : / ; et ? </codeph>). « http » et « www.adobe.com » sont des exemples courants de composant URI.</p>
	 <p class="- topic/p ">Il existe une autre différence majeure entre cette fonction et <codeph class="+ topic/ph pr-d/codeph ">decodeURI()</codeph> : parce la fonction part du principe qu’elle manipule un composant URI, elle traite les séquences d’échappement qui représentent des caractères de séparation spéciaux (<codeph class="+ topic/ph pr-d/codeph "> ; / ? : @ &amp; = + $ , #</codeph>) en tant que texte ordinaire qui doit être décodé. </p>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:decodeURI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">decodeURI</apiName><shortdesc class="- topic/shortdesc ">
	 Décode une URI codée pour produire une chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne dans laquelle tous les caractères précédemment convertis en séquence d’échappement par la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> retrouvent leur forme sans séquence d’échappement.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne codée à l’aide de la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph>.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Décode une URI codée pour produire une chaîne. Renvoie une chaîne dans laquelle tous les caractères précédemment codés par la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph> retrouvent leur forme non codée.
	 <p class="- topic/p ">Le tableau suivant contient l’ensemble de séquences d’échappement qui ne sont <i class="+ topic/ph hi-d/i ">pas</i> décodées par la fonction <codeph class="+ topic/ph pr-d/codeph ">decodeURI</codeph> pour obtenir des caractères. Utilisez <codeph class="+ topic/ph pr-d/codeph ">decodeURIComponent()</codeph> pour décoder les séquences d’échappement répertoriées dans ce tableau.</p>
	 <adobetable class="innertable"><tgroup cols="2" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Séquences d’échappement non décodées</entry><entry class="- topic/entry ">Caractères équivalents</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%23</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">#</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%24</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">$</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%26</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">&amp;</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2B</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">+</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2C</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">,</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%2F</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">/</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3A</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">:</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3B</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">;</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3D</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">=</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%3F</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">?</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">%40</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">@</codeph></entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\DecodeURIExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package {
    import flash.display.Sprite;

    public class DecodeURIExample extends Sprite {
        public function DecodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURIComponent" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeURIComponent</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une chaîne en composant URI valide.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une chaîne en composant URI valide. Convertit une sous-chaîne d’URI en chaîne dont tous les caractères sont convertis en séquences d’échappement UTF-8, à moins qu’un caractère n’appartienne à un groupe très réduit de caractères de base.
	 <p class="- topic/p ">La fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent()</codeph> est différente de la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURI()</codeph> en ce sens qu’elle est conçue pour être utilisée uniquement avec une partie de chaîne URI appelée composant URI. Un composant URI correspond à tout texte compris entre des caractères spéciaux nommés <i class="+ topic/ph hi-d/i ">séparateurs de composants</i> (<codeph class="+ topic/ph pr-d/codeph "> : / ; et ? </codeph>). « http » et « www.adobe.com » sont des exemples courants de composant URI.</p>
	 <p class="- topic/p ">Il existe une autre différence majeure entre cette fonction et <codeph class="+ topic/ph pr-d/codeph ">encodeURI()</codeph> : dans la mesure où la fonction manipule un composant URI, elle traite les caractères de séparation spéciaux (<codeph class="+ topic/ph pr-d/codeph "> ; / ? : @ &amp; = + $ , #</codeph>) en tant que texte ordinaire qui doit être codé. </p>
	 <p class="- topic/p ">Le tableau suivant répertorie tous les caractères qui ne sont <i class="+ topic/ph hi-d/i ">pas</i> convertis en séquences d’échappement UTF-8 par la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent</codeph>.</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Caractères non codés</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">- _ . ! ~ ~~ ' ( )</codeph></entry></row></tbody></tgroup></adobetable>	 
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURI()" class="- topic/link "><linktext class="- topic/linktext ">encodeURI()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:encodeURI" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">encodeURI</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une chaîne en URI (Uniform Resource Identifier) valide.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne dont certains caractères sont convertis en séquences d’échappement UTF-8.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">uri</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne représentant une URI complète.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une chaîne en URI (Uniform Resource Identifier) valide. Convertit une URI complète en chaîne dont tous les caractères sont codés en tant que séquences d’échappement UTF-8, à moins qu’un caractère n’appartienne à un petit groupe de caractères de base.
	 <p class="- topic/p ">Le tableau suivant répertorie l’ensemble complet des caractères de base qui ne sont <i class="+ topic/ph hi-d/i ">pas</i> convertis en séquences d’échappement UTF-8 par la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURI</codeph>.</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Caractères non codés</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">; / ? : @ &amp; = + $ , #</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">- _ . ! ~ ~~ ' ( )</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc><example conref="examples\EncodeURIExample.as" class="- topic/example "><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">package {
    import flash.display.Sprite;

    public class EncodeURIExample extends Sprite {
        public function EncodeURIExample() {
            var uri:String = "http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>";
            var encoded:String = encodeURI(uri);
            var decoded:String = decodeURI(encoded);
            trace(uri);        // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
            trace(encoded);    // http://www.example.com/application.jsp?user=%3Cuser%20name='some%20user'%3E%3C/user%3E
            trace(decoded);    // http://www.example.com/application.jsp?user=&lt;user name='some user'>&lt;/user>
        }
    }
}
</codeblock></example></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/decodeURI()" class="- topic/link "><linktext class="- topic/linktext ">decodeURI()</linktext></link><link href="#global/decodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">decodeURIComponent()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:escape" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">escape</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit le paramètre en chaîne et applique le format de code URL, où la plupart des caractères qui ne sont pas de type alphanumérique sont remplacés par des séquences hexadécimales (%).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une chaîne convertie en format d’URL.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Expression à convertir en chaîne et coder au format URL.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit le paramètre en chaîne et applique le format de code URL, où la plupart des caractères qui ne sont pas de type alphanumérique sont remplacés par des séquences hexadécimales <codeph class="+ topic/ph pr-d/codeph ">%</codeph>. Lorsque cette fonction est utilisée dans une chaîne codée au format URL, le symbole pour cent (<codeph class="+ topic/ph pr-d/codeph ">%</codeph>) introduit les caractères d’échappement et ne doit pas être confondu avec l’opérateur modulo (<codeph class="+ topic/ph pr-d/codeph ">%</codeph>).
	 <p class="- topic/p ">Le tableau suivant répertorie tous les caractères qui ne sont <i class="+ topic/ph hi-d/i ">pas</i> convertis en séquences d’échappement par la fonction <codeph class="+ topic/ph pr-d/codeph ">escape()</codeph>.</p>
	 <adobetable class="innertable"><tgroup cols="1" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Caractères non codés</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0 1 2 3 4 5 6 7 8 9</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">a b c d e f g h i j k l m n o p q r s t u v w x y z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">@ - _. ~~ + /</codeph></entry></row></tbody></tgroup></adobetable>	 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> Utilisez la fonction <codeph class="+ topic/ph pr-d/codeph ">encodeURIComponent()</codeph> au lieu de la fonction <codeph class="+ topic/ph pr-d/codeph ">escape()</codeph> pour traiter les caractères séparateurs spéciaux (<codeph class="+ topic/ph pr-d/codeph ">@ + /</codeph>) comme étant du texte régulier à coder.</p>
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/unescape()" class="- topic/link "><linktext class="- topic/linktext ">unescape()</linktext></link><link href="#global/encodeURIComponent()" class="- topic/link "><linktext class="- topic/linktext ">encodeURIComponent()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:int" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">int</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une valeur numérique spécifiée en entier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier converti.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur à convertir en entier.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une valeur numérique spécifiée en entier. Les valeurs décimales sont tronquées au niveau de la virgule.
	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/uint()" class="- topic/link "><linktext class="- topic/linktext ">uint()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:isFinite" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isFinite</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie true si la valeur est un nombre fini, false si la valeur est Infinity ou -Infinity.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0." class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> s’il s’agit d’un nombre fini, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> s’il s’agit de l’infini ou de l’infini négatif
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre à évaluer en tant que valeur finie ou infinie.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la valeur est un nombre fini, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> si la valeur est <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>. La présence de <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> indique une erreur mathématique, telle que la division par 0.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isNaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isNaN</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie true si la valeur est NaN (not a number : n’est pas un nombre).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la valeur est <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (not a number : n’est pas un nombre), <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur numérique ou expression mathématique à évaluer.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la valeur est <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (not a number : n’est pas un nombre). La fonction <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> permet de s’assurer qu’une expression mathématique a été évaluée correctement en tant que nombre. La fonction <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> est principalement utilisée pour vérifier la valeur renvoyée par les fonctions <codeph class="+ topic/ph pr-d/codeph ">parseInt()</codeph> et <codeph class="+ topic/ph pr-d/codeph ">parseFloat()</codeph>. La valeur <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> est un membre spécial du type de données Number et représente une valeur qui « n’est pas un nombre ». 
	 <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque </b>: La valeur <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> ne fait pas partie des types de données int ou uint.</p>
	 <p class="- topic/p ">Le tableau ci-dessous décrit la valeur renvoyée par <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph> pour divers types et valeurs d’entrées (si les avertissements de votre compilateur sont réglés sur le mode strict, certaines des opérations suivantes pourront générer des erreurs de compilation).</p>
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type/valeur d’entrée</entry><entry class="- topic/entry ">Exemple</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry ">0 divisé par 0</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(0/0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Nombre autre que zéro divisé par <codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(5/0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Racine carrée d’un nombre négatif</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(Math.sqrt(-1))</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Arc sinus d’un nombre supérieur à 1 ou inférieur à 0</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN(Math.asin(2))</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne qui peut être convertie en nombre</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN("5")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne qui ne peut pas être convertie en nombre</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">isNaN("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:isXMLName" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">isXMLName</apiName><shortdesc class="- topic/shortdesc ">
	 Détermine si la chaîne spécifiée est un nom valide d’attribut ou d’élément XML.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si l’argument <codeph class="+ topic/ph pr-d/codeph ">str</codeph> est un nom XML valide, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans le cas contraire.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne à évaluer.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Détermine si la chaîne spécifiée est un nom valide d’attribut ou d’élément XML.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseFloat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parseFloat</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une chaîne en nombre à virgule flottante.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (n’est pas un nombre).
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne à lire et convertir en nombre à virgule flottante.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une chaîne en nombre à virgule flottante. Cette fonction lit, ou <i class="+ topic/ph hi-d/i ">analyse</i>, et renvoie les nombres dans une chaîne jusqu’à ce que cette dernière atteigne un caractère qui ne fait pas partie du nombre initial. Si la chaîne ne commence pas par un nombre qui peut être analysé, <codeph class="+ topic/ph pr-d/codeph ">parseFloat()</codeph> renvoie <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. L’espace blanc qui précède un entier valide est ignoré, comme les caractères de fin non numériques.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:parseInt" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">parseInt</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une chaîne en entier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre ou <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> (n’est pas un nombre).
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne à convertir en entier.
	 </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier représentant la base du nombre à analyser. Les valeurs valides sont comprises entre 2 et 36.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une chaîne en entier. Si la chaîne spécifiée par les paramètres ne peut pas être convertie en nombre, la fonction renvoie <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. Les chaînes commençant par 0x sont interprétées en tant que nombres hexadécimaux. A l’encontre des versions antérieures d’ActionScript, les entiers débutant par 0 ne sont <i class="+ topic/ph hi-d/i ">not</i> interprétés comme des nombres octaux. Vous devez spécifier la base 8 pour les nombres octaux. L’espace blanc et les zéros qui précèdent un entier valide sont ignorés, tout comme les caractères de fin non numériques.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="globalOperation:trace" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">trace</apiName><shortdesc class="- topic/shortdesc ">
	 Affiche des expressions ou effectue une consignation dans les fichiers journaux pendant le débogage.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">arguments</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une ou plusieurs expressions (séparées par une virgule) à évaluer. S’il existe plusieurs expressions, un espace est inséré entre chacune d’elles dans la sortie.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Affiche des expressions ou effectue une consignation dans les fichiers journaux pendant le débogage. Une instruction trace unique peut prendre en charge plusieurs arguments. Si un argument d’instruction trace comprend un type de données autre que String, la fonction trace appelle la méthode <codeph class="+ topic/ph pr-d/codeph ">toString()</codeph> associée correspondante. Si par exemple l’argument est une valeur booléenne, la fonction trace appelle <codeph class="+ topic/ph pr-d/codeph ">Boolean.toString()</codeph> et affiche la valeur renvoyée. 
	 </apiDesc><example conref="examples\TraceExample.as" class="- topic/example "> L’exemple suivant utilise la classe <codeph class="+ topic/ph pr-d/codeph ">TraceExample</codeph> pour indiquer comment la méthode <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> peut être utilisée pour imprimer une chaîne simple. De manière générale, le message est imprimé sur une console de « débogage ».
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
package {
    import flash.display.Sprite;

    public class TraceExample extends Sprite {

        public function TraceExample() {
            trace("Hello World");
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="globalOperation:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
	 Convertit une valeur numérique spécifiée en entier non signé.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier converti.
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">value</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Number</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur à convertir en entier.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Convertit une valeur numérique spécifiée en entier non signé. Les valeurs décimales sont tronquées au niveau de la virgule.
	 <p class="- topic/p ">Le tableau ci-dessous décrit la valeur renvoyée par <codeph class="+ topic/ph pr-d/codeph ">uint()</codeph> pour divers types et valeurs d’entrées.</p>
	 <adobetable class="innertable"><tgroup cols="3" class="- topic/tgroup "><thead class="- topic/thead "><row class="- topic/row "><entry class="- topic/entry ">Type/valeur d’entrée</entry><entry class="- topic/entry ">Exemple</entry><entry class="- topic/entry ">Valeur renvoyée</entry></row></thead><tbody class="- topic/tbody "><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">non défini</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(undefined)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">null</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(null)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(0)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">NaN</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(NaN)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Nombre positif à virgule flottante</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(5,31)</codeph></entry><entry class="- topic/entry ">Entier tronqué non signé (<codeph class="+ topic/ph pr-d/codeph ">5</codeph>, par exemple)</entry></row><row class="- topic/row "><entry class="- topic/entry ">Nombre négatif à virgule flottante</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(-5,78)</codeph></entry><entry class="- topic/entry ">Tronque le nombre décimal au niveau de la virgule pour obtenir un entier, puis lui applique une règle relative aux entiers négatifs</entry></row><row class="- topic/row "><entry class="- topic/entry ">Entier négatif</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(-5)</codeph></entry><entry class="- topic/entry ">Somme de <codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph> et de l’entier négatif (<codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE + (-5)</codeph>, par exemple)</entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">true</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(true)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">1</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">false</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint(false)</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne vide</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne qui peut être convertie en nombre</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("5")</codeph></entry><entry class="- topic/entry ">Le nombre</entry></row><row class="- topic/row "><entry class="- topic/entry ">Chaîne qui ne peut pas être convertie en nombre</entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">uint("5a")</codeph></entry><entry class="- topic/entry "><codeph class="+ topic/ph pr-d/codeph ">0</codeph></entry></row></tbody></tgroup></adobetable>

	 </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#global/int()" class="- topic/link "><linktext class="- topic/linktext ">int()</linktext></link></related-links></apiOperation><apiOperation id="globalOperation:unescape" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unescape</apiName><shortdesc class="- topic/shortdesc ">
	 Evalue le paramètre str en tant que chaîne, décode la chaîne qui est au format codé en URL (en convertissant toutes les séquences hexadécimales en caractères ASCII) et renvoie cette chaîne.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne décodée à partir d’un paramètre codé au format URL.
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">str</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne comportant des séquences hexadécimales à convertir en séquences d’échappement.
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Evalue le paramètre <codeph class="+ topic/ph pr-d/codeph ">str</codeph> en tant que chaîne, décode la chaîne qui est au format codé en URL (en convertissant toutes les séquences hexadécimales en caractères ASCII) et renvoie cette chaîne.
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="globalValue:-Infinity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">-Infinity</apiName><shortdesc class="- topic/shortdesc ">
 Valeur spéciale représentant une valeur Infinity négative.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Valeur spéciale représentant une valeur <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> négative. La valeur de cette constante est identique à <codeph class="+ topic/ph pr-d/codeph ">Number.NEGATIVE_INFINITY</codeph>.
 </apiDesc><example conref="examples\Constants.NegInfinity.1.as" class="- topic/example "> La division par 0 renvoie <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>, mais seul le diviseur est un nombre négatif.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#Number/NEGATIVE_INFINITY" class="- topic/link "><linktext class="- topic/linktext ">Number.NEGATIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:Infinity" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">Infinity</apiName><shortdesc class="- topic/shortdesc ">
 Valeur spéciale représentant une valeur Infinity positive.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Valeur spéciale représentant une valeur <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> positive. La valeur de cette constante est identique à <codeph class="+ topic/ph pr-d/codeph ">Number.POSITIVE_INFINITY</codeph>.
 </apiDesc><example conref="examples\Constants.Infinity.1.as" class="- topic/example "> La division par 0 renvoie <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>, mais seul le diviseur est un nombre positif.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

trace(0 / 0);  // NaN
trace(7 / 0);  // Infinity
trace(-7 / 0); // -Infinity


</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="#Number/POSITIVE_INFINITY" class="- topic/link "><linktext class="- topic/linktext ">Number.POSITIVE_INFINITY</linktext></link></related-links></apiValue><apiValue id="globalValue:NaN" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">NaN</apiName><shortdesc class="- topic/shortdesc ">
 Membre spécial du type de données Number qui représente une valeur qui « n’est pas un nombre » (NaN).</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Number</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Membre spécial du type de données Number qui représente une valeur qui « n’est pas un nombre » (<codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>). Lorsqu’une expression mathématique produit une valeur qui ne peut pas être exprimée sous forme de nombre, le résultat correspond à <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>. La liste suivante décrit des expressions courantes qui produisent <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>.
 <ul class="- topic/ul "><li class="- topic/li ">La division par 0 ne renvoie <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> que si le diviseur est également 0. Si le diviseur est supérieur à 0, la division par 0 produit <codeph class="+ topic/ph pr-d/codeph "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph></codeph>. Si le diviseur est inférieur à 0, la division par 0 produit <codeph class="+ topic/ph pr-d/codeph "><codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph></codeph>.</li><li class="- topic/li ">Racine carrée d’un nombre négatif.</li><li class="- topic/li ">Arc sinus d’un nombre non compris entre 0 et 1 (la plage valide).</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> soustrait de <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> divisé par <codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> or <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Infinity</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">-Infinity</codeph> multiplié par 0.</li></ul>
 <p class="- topic/p ">La valeur <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> ne fait pas partie des types de données int ou uint.</p>
 <p class="- topic/p ">La valeur <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> n’étant pas considérée comme égale à toute autre valeur, <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> inclus, l’utilisation de l’opérateur d’égalité pour vérifier si une expression correspond à <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph> est impossible. Pour déterminer si un nombre correspond à la fonction <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>, utilisez <codeph class="+ topic/ph pr-d/codeph ">isNaN()</codeph>.</p>
 
 </apiDesc></apiValueDetail><related-links class="- topic/related-links "><link href="#global/isNaN()" class="- topic/link "><linktext class="- topic/linktext ">isNaN()</linktext></link><link href="#Number/NaN" class="- topic/link "><linktext class="- topic/linktext ">Number.NaN</linktext></link></related-links></apiValue><apiValue id="globalValue:undefined" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">undefined</apiName><shortdesc class="- topic/shortdesc ">
 Valeur spéciale appliquée aux variables sans type qui n’ont pas été initialisées ou aux propriétés d’objets dynamiques qui ne sont pas initialisées.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiType value="" name="type" class="- topic/state reference/state apiRef/apiType "/></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 Valeur spéciale appliquée aux variables sans type qui n’ont pas été initialisées ou aux propriétés d’objets dynamiques qui ne sont pas initialisées. Dans ActionScript 3.0, seules les variables qui n’ont pas de type peuvent recevoir la valeur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>, contrairement à ActionScript 1.0 et ActionScript 2.0. Par exemple, les deux variables sont <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> dans la mesure où elles ne sont pas typées et pas initialisées :
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">var foo;</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">var bar:~~;</codeph></li></ul>
 <p class="- topic/p ">La valeur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> s’applique également aux propriétés non initialisées ou non définies d’objets dynamiques. Par exemple, si un objet est une occurrence de la classe Object, la valeur de toute propriété ajoutée dynamiquement est définie sur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> jusqu’à ce qu’une valeur lui soit affectée.
 </p>
 <p class="- topic/p ">Les résultats varient lorsque <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est utilisé avec diverses fonctions :</p>
 <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">String(undefined)</codeph> renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">"undefined"</codeph> (<codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> est converti en chaîne).</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Number(undefined)</codeph> renvoie la valeur <codeph class="+ topic/ph pr-d/codeph ">NaN</codeph>.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">int(undefined)</codeph> et <codeph class="+ topic/ph pr-d/codeph ">uint(undefined)</codeph> renvoient la valeur 0.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">Object(undefined)</codeph> renvoie une nouvelle occurrence d’Object.</li><li class="- topic/li ">Si vous affectez la valeur <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> à une variable associée à un type, elle est convertie en la valeur par défaut du type de données.</li></ul>
 <p class="- topic/p ">Veillez à ne pas confondre <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> et <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Lorsque les propriétés <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> sont comparées avec l’opérateur d’égalité (<codeph class="+ topic/ph pr-d/codeph ">==</codeph>), elles sont considérées comme égales. Lorsque les propriétés <codeph class="+ topic/ph pr-d/codeph ">null</codeph> et <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> sont comparées avec l’opérateur d’égalité stricte (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>), elles sont considérées comme différentes.</p>
 </apiDesc><example conref="examples\Constants.undefined.1.as" class="- topic/example "> Dans l’exemple suivant, une variable non typée, <codeph class="+ topic/ph pr-d/codeph ">myVar</codeph> est déclarée mais pas initialisée. La valeur de <codeph class="+ topic/ph pr-d/codeph ">myVar</codeph> est <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph> dans la mesure où la variable n’est pas typée. Ceci est vrai lorsque la variable ne comporte pas d’annotation de type ou utilise l’annotation non typée spéciale (~~) (<codeph class="+ topic/ph pr-d/codeph ">var myVar:~~;</codeph>).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

// trace value of untyped and uninitialized variable
var myVar;
trace(myVar); // undefined
</codeblock></example><example conref="examples\Constants.undefined.2.as" class="- topic/example "> La même règle s’applique aux propriétés non initialisées d’un objet dynamique. Par exemple, avec une occurrence donnée, <codeph class="+ topic/ph pr-d/codeph ">obj</codeph>, de la classe dynamique <codeph class="+ topic/ph pr-d/codeph ">A</codeph>, la valeur de <codeph class="+ topic/ph pr-d/codeph ">obj.propName</codeph>, qui est une propriété non initialisée de l’occurrence <codeph class="+ topic/ph pr-d/codeph ">obj</codeph>, est <codeph class="+ topic/ph pr-d/codeph ">undefined</codeph>.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

dynamic class A {}
var obj:A = new A()

// trace undefined property of obj
trace(obj.propName); // undefined

</codeblock></example></apiValueDetail><related-links class="- topic/related-links "><link href="statements.html#null" class="- topic/link "><linktext class="- topic/linktext ">null</linktext></link></related-links></apiValue><apiClassifier languages="" id="globalClassifier:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
 La classe uint propose des méthodes d’utilisation d’un type de données représentant un entier 32 bits non signé.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint object, uint, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiFinal class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiFinal "/><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe uint propose des méthodes d’utilisation d’un type de données représentant un entier 32 bits non signé. Un entier non signé étant nécessairement positif, sa valeur maximale est le double de celle de la classe int.
 <p class="- topic/p ">La plage de valeurs représentée par la classe uint est comprise entre 0 et 4 294 967 295 (2^32-1).</p>
 <p class="- topic/p ">Pour créer un objet uint, déclarez une variable de type uint et affectez-lui une valeur littérale. La valeur par défaut d’une variable de type uint correspond à <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.</p>
 <p class="- topic/p ">La classe uint est surtout utilisée pour les valeurs de couleur de pixel (ARVB et RVBA), ainsi que les cas où le type de données int ne fonctionne pas correctement. Par exemple, le nombre 0xFFFFFFFF, qui représente la valeur de la couleur blanche avec une valeur alpha 255, ne peut pas être représenté à l’aide du type de données int, car elle excède la plage de valeurs int valides.</p> 
 
 <p class="- topic/p ">L’exemple suivant crée un objet uint et appelle la méthode <codeph class="+ topic/ph pr-d/codeph "> toString()</codeph> :</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var myuint:uint = 1234;
 trace(myuint.toString()); // 1234
 </pre>
 <p class="- topic/p ">L’exemple suivant affecte la valeur de la propriété <codeph class="+ topic/ph pr-d/codeph ">MIN_VALUE</codeph> à une variable sans l’utilisation du constructeur :</p>
 <pre xml:space="preserve" class="- topic/pre ">
 var smallest:uint = uint.MIN_VALUE;
 trace(smallest.toString()); // 0
 </pre> 
 
 </apiDesc><example conref="examples\UintExample.as" class="- topic/example "> L’exemple suivant déclare un paramètre uint <codeph class="+ topic/ph pr-d/codeph ">i</codeph> au sein d’une boucle <codeph class="+ topic/ph pr-d/codeph ">for</codeph>, qui imprime les nombres 0 à 9 (dans la mesure où uint applique par défaut la valeur 0).
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

package {
    import flash.display.Sprite;

    public class UintExample extends Sprite {
        public function UintExample() {
            for(var i:uint; i &lt; 10; i++) {
                trace(i);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links class="- topic/related-links "><link href="int.html" class="- topic/link "><linktext class="- topic/linktext ">int</linktext></link><link href="Number.html" class="- topic/link "><linktext class="- topic/linktext ">Number</linktext></link></related-links><apiConstructor id="uint:uint" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">uint</apiName><shortdesc class="- topic/shortdesc ">
	 Crée un objet uint.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">new number, constructor
	  
	  </keyword></asCustoms></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">num</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur numérique de l’objet uint en cours de création, ou valeur à convertir en nombre. Si <codeph class="+ topic/ph pr-d/codeph ">num</codeph> n’est pas fourni, la valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Crée un objet uint. Vous pouvez créer une variable de type uint et lui affecter une valeur littérale. Le constructeur <codeph class="+ topic/ph pr-d/codeph ">new uint()</codeph> sert surtout d’espace réservé. Ne confondez pas l’objet uint avec la fonction <codeph class="+ topic/ph pr-d/codeph "> uint()</codeph>, qui convertit un paramètre en valeur primitive.
	 
	 </apiDesc><example class="- topic/example ">Le code suivant construit deux nouveaux objets uint. Pour créer le premier, il affecte une valeur littérale, tandis que pour créer le second, il utilise la fonction constructeur :
	 <pre xml:space="preserve" class="- topic/pre ">
	 var n1:uint = 3;
	 var n2:uint = new uint(10);
	 </pre>
	 
	 </example></apiConstructorDetail></apiConstructor><apiOperation id="uint:AS3:toExponential" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toExponential</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> n’est pas compris entre 0 et 20.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 20 inclus qui représente le nombre requis de décimales.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle. La chaîne contient un chiffre avant la virgule et jusqu’à 20 décimales, comme spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph>.
      </apiDesc><example conref="examples\Number.toExponential.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toExponential(2)</codeph> renvoie une chaîne sous forme de notation exponentielle.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 315003;
trace(num.toExponential(2)); // 3.15e+5

</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toFixed" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toFixed</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une représentation sous forme de chaîne du nombre en notation à virgule fixe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> n’est pas compris entre 0 et 20.
	 </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fractionDigits</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 0 et 20 inclus qui représente le nombre requis de décimales.
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une représentation sous forme de chaîne du nombre en notation à virgule fixe. La notation à virgule fixe signifie que la chaîne contiendra un nombre spécifique de décimales, indiqué par le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph>. Le paramètre <codeph class="+ topic/ph pr-d/codeph ">fractionDigits</codeph> gère une plage de valeurs comprises entre 0 et 20. Spécifier une valeur qui excède cette plage entraîne le renvoi d’une exception.
     
     </apiDesc><example conref="examples\Number.toFixed.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toFixed(3)</codeph> renvoie une chaîne qui arrondit le résultat à trois chiffres après la virgule.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 7.31343;
trace(num.toFixed(3)); // 7.313
</codeblock></example><example conref="examples\Number.toFixed.2.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toFixed(2)</codeph> renvoie une chaîne qui ajoute des zéros à la fin.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4;
trace(num.toFixed(2)); // 4.00
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toPrecision" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toPrecision</apiName><shortdesc class="- topic/shortdesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle ou à virgule fixe.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.0" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Renvoie une exception si l’argument <codeph class="+ topic/ph pr-d/codeph ">precision</codeph> n’est pas compris entre 1 et 21.
	  </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">precision</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier compris entre 1 et 21 inclus qui indique le nombre requis de décimales dans la chaîne générée.
      </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
      Renvoie une représentation sous forme de chaîne du nombre en notation exponentielle ou à virgule fixe. La chaîne contiendra le nombre de décimales spécifié par le paramètre <codeph class="+ topic/ph pr-d/codeph ">precision</codeph>.
      </apiDesc><example conref="examples\Number.toPrecision.1.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> renvoie une chaîne limitée à trois chiffres. La chaîne recourt à la notation à point fixe, dans la mesure où la notation exponentielle n’est pas requise.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 31.570;
trace(num.toPrecision(3)); // 31.6
</codeblock></example><example conref="examples\Number.toPrecision.2.as" class="- topic/example "> L’exemple suivant indique comment <codeph class="+ topic/ph pr-d/codeph ">toPrecision(3)</codeph> renvoie une chaîne limitée à trois chiffres. La chaîne applique la notation exponentielle dans la mesure où le nombre qui en résulte ne contient pas suffisamment de chiffres pour la notation à point fixe.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">

var num:Number = 4000;
trace(num.toPrecision(3)); // 4.00e+3
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la représentation sous forme de chaîne d’un objet uint.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.tostring, tostring
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Représentation sous forme de chaîne de l’objet uint.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">radix</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Spécifie la base numérique (de 2 à 36) à appliquer pour la conversion nombre vers chaîne. Si vous omettez le paramètre <codeph class="+ topic/ph pr-d/codeph ">radix</codeph>, la valeur par défaut est de <codeph class="+ topic/ph pr-d/codeph ">10</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la représentation sous forme de chaîne d’un objet uint.
	 
     </apiDesc><example class="- topic/example ">L’exemple suivant utilise 2 et 8 pour les paramètres <codeph class="+ topic/ph pr-d/codeph ">radix</codeph> et renvoie une valeur de chaîne avec la représentation correspondante du numéro 9 :
	 <pre xml:space="preserve" class="- topic/pre ">
	 var myuint:uint = 9;
	 trace(myuint.toString(2)); // 1001
	 trace(myuint.toString(8)); // 11
	 </pre>
	 L’exemple suivant crée des valeurs hexadécimales :
	 <pre xml:space="preserve" class="- topic/pre ">
	 var r:uint = 250;
	 var g:uint = 128;
	 var b:uint = 114;
	 var rgb:String = "0x" + r.toString(16) + g.toString(16) + b.toString(16);
	 trace(rgb); // 0xfa8072 
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="uint:AS3:valueOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">valueOf</apiName><shortdesc class="- topic/shortdesc ">
	 Renvoie la valeur du type uint de primitive de l’objet uint spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">number, number.valueof, valueof, value of
	  
	  </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur du type uint de primitive de l’objet uint.
	 
	 </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Renvoie la valeur du type uint de primitive de l’objet uint spécifié.
	 
	 </apiDesc><example class="- topic/example ">L’exemple suivant renvoie la valeur primitive de l’objet <codeph class="+ topic/ph pr-d/codeph "> numSocks</codeph>.
	 <pre xml:space="preserve" class="- topic/pre ">
	 var numSocks:uint = 2;
	 trace(numSocks.valueOf()); // 2
	 </pre>
	 
	 </example></apiOperationDetail></apiOperation><apiValue id="uint:MAX_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MAX_VALUE</apiName><shortdesc class="- topic/shortdesc "> 
	Entier non signé 32 bits représentable le plus élevé, soit 4 294 967 295.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.max_value, max_value, max value
	 
	 </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">4294967295</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc "> 
	Entier non signé 32 bits représentable le plus élevé, soit 4 294 967 295.
	
   	</apiDesc><example class="- topic/example ">Le code ActionScript suivant affiche les valeurs <codeph class="+ topic/ph pr-d/codeph ">uint</codeph> représentables les plus élevées et les plus faibles :
	<pre xml:space="preserve" class="- topic/pre ">
	trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	</pre>
	<p class="- topic/p ">Les valeurs sont les suivantes :</p>
	<pre xml:space="preserve" class="- topic/pre ">
	uint.MIN_VALUE = 0
	uint.MAX_VALUE = 4294967295
	</pre>
	
	</example></apiValueDetail></apiValue><apiValue id="uint:MIN_VALUE" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">MIN_VALUE</apiName><shortdesc class="- topic/shortdesc ">
	 Entier non signé représentable le plus faible, soit 0.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="9" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">uint, uint.min_value, min_value, min value
      
      </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiStatic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiStatic "/><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
	 Entier non signé représentable le plus faible, soit <codeph class="+ topic/ph pr-d/codeph ">0</codeph>.
	 
	 </apiDesc><example class="- topic/example ">Le code ActionScript suivant affiche les valeurs <codeph class="+ topic/ph pr-d/codeph ">uint</codeph> représentables les plus élevées et les plus faibles :
	 <pre xml:space="preserve" class="- topic/pre ">
	 trace("uint.MIN_VALUE = " + uint.MIN_VALUE);
	 trace("uint.MAX_VALUE = " + uint.MAX_VALUE);
	 </pre>
	 <p class="- topic/p ">Les valeurs sont les suivantes :</p>
	 <pre xml:space="preserve" class="- topic/pre ">
	 uint.MIN_VALUE = 0
	 uint.MAX_VALUE = 4294967295
	 </pre>
     
     </example></apiValueDetail></apiValue></apiClassifier><apiClassifier languages="" id="globalClassifier:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiClassifier/apiClassifier "><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
 La classe Vector vous permet d’accéder à un vecteur et de le manipuler &amp;#8212; ; un vecteur est un tableau dont les éléments possèdent tous le même type de données.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector, Vector object, built-in class
 
 </keyword></asCustoms></prolog><apiClassifierDetail class="- topic/body reference/refbody apiRef/apiDetail apiClassifier/apiClassifierDetail "><apiClassifierDef class="- topic/section reference/section apiRef/apiDef apiClassifier/apiClassifierDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Vous permet de définir des vecteurs (de type Arrays).
 </apiTipText></apiTipTexts><apiBaseClassifier class="- topic/xref reference/xref apiRef/apiRelation apiClassifier/apiBaseClassifier ">Object</apiBaseClassifier></apiClassifierDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
 La classe Vector vous permet d’accéder à un vecteur et de le manipuler ; un vecteur est un tableau dont les éléments possèdent tous le même type de données. Le type de données des éléments d’un vecteur est appelé le <i class="+ topic/ph hi-d/i ">type de base</i> du vecteur. Le type de base peut correspondre à n’importe quelle classe, notamment aux classes intégrées et aux classes personnalisées. Le type de base est spécifié lorsque vous déclarez la variable d’un vecteur et lorsque vous créez une occurrence en appelant le constructeur de classe.
 
 <p class="- topic/p ">Tout comme pour un tableau, vous pouvez utiliser l’opérateur d’accès au tableau (<codeph class="+ topic/ph pr-d/codeph ">[]</codeph>) pour définir ou récupérer la valeur d’un élément Vector. Plusieurs méthodes d’un objet Vector fournissent également des mécanismes permettant de définir et de récupérer les valeurs des éléments. Parmi ces méthodes figurent, notamment : <codeph class="+ topic/ph pr-d/codeph ">push()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">pop()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">shift()</codeph>, <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph>. Les propriétés et les méthodes d’un object Vector sont similaires, voire dans certains cas identiques, aux propriétés et aux méthodes d’un objet Array. Dans la plupart des cas où vous utilisez un objet Array dont tous les éléments possèdent le même type de données, il est préférable d’utiliser une occurrence de l’objet Vector. Toutefois, les occurrences de l’objet Vector sont des tableaux denses. En d’autres termes, ils doivent posséder une valeur (ou être définis sur une valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) dans chaque index. Les occurrences d’Array n’ont pas cette même restriction.</p>
 
 <p class="- topic/p ">Le type de base du vecteur est spécifié à l’aide d’une syntaxe de paramètres de type postfix. La syntaxe de paramètres de type est une séquence constituée d’un point (<codeph class="+ topic/ph pr-d/codeph ">.</codeph>), d’un chevron gauche (<codeph class="+ topic/ph pr-d/codeph ">&lt;</codeph>), du nom de la classe, puis d’un chevron droit (<codeph class="+ topic/ph pr-d/codeph ">></codeph>), comme l’indique l’exemple suivant :</p>
 
 <p class="- topic/p ">Dans la première ligne de cet exemple, la variable <codeph class="+ topic/ph pr-d/codeph ">v</codeph> est déclarée comme l’occurrence d’un objet Vector.&lt;String>. En d’autres termes, elle représente un vecteur (un tableau) ne pouvant contenir que des occurrences de String et duquel seules des occurrences de String peuvent être récupérées. La deuxième ligne construit une occurrence du même type de vecteur (c’est-à-dire d’un vecteur dont les éléments sont tous des objets String) et l’affecte à <codeph class="+ topic/ph pr-d/codeph ">v</codeph>.</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 var v:Vector.&lt;String>;
 v = new Vector.&lt;String>();
 </codeblock>
 
 
 
  
 
 
 
  
 
 
 
 <p class="- topic/p ">Une variable déclarée avec le type de données Vector.&lt;T> peut stocker uniquement une occurrence de Vector construite avec le même type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph>. Par exemple, il est impossible d’affecter un vecteur construit en appelant <codeph class="+ topic/ph pr-d/codeph ">new Vector.&lt;String>()</codeph> à une variable déclarée avec le type de données Vector.&lt;int>. Les types de base doivent correspondre exactement. Par exemple, le code suivant ne se compile pas, car le type de base de l’objet n’est pas le même que le type de base déclaré de la variable (même si Sprite est une sous-classe de DisplayObject) :</p>
 
 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
 // This code doesn't compile even though Sprite is a DisplayObject subclass
 var v:Vector.&lt;DisplayObject> = new Vector.&lt;Sprite>();
 </codeblock>
 
 <p class="- topic/p ">Pour convertir un objet Vector avec un type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph> en un objet Vector d’une super-classe de <codeph class="+ topic/ph pr-d/codeph ">T</codeph>, utilisez la fonction globale <codeph class="+ topic/ph pr-d/codeph ">Vector()</codeph>.</p>
 
 <p class="- topic/p ">Outre la restriction concernant le type de données, la classe Vector possède d’autres restrictions qui la distinguent de la classe Array :</p>
 
 <ul class="- topic/ul "><li class="- topic/li ">Un vecteur est un tableau dense. Contrairement à un tableau, qui peut posséder des valeurs dans les index 0 et 7 même s’il n’existe aucune valeur dans les positions 1 à 6, un vecteur doit posséder une valeur (ou la valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>) dans chaque index.</li><li class="- topic/li ">La longueur d’un vecteur peut éventuellement être fixe ; en d’autres termes, le nombre d’éléments qu’il contient est invariable.</li><li class="- topic/li ">L’accès aux éléments d’un vecteur est défini par ses limites. Vous ne pouvez jamais lire une valeur d’un index supérieur à celui de l’élément final (<codeph class="+ topic/ph pr-d/codeph ">longueur - 1</codeph>). Vous ne pouvez jamais définir une valeur avec un index supérieur à l’index final actuel (en d’autres termes, vous pouvez définir une valeur uniquement à l’index existant où à une <codeph class="+ topic/ph pr-d/codeph ">[longueur]</codeph> d’index).</li></ul>
 
 <p class="- topic/p ">Grâce à ses restrictions, un vecteur présente trois avantages principaux par rapport à une occurrence d’Array dont les éléments sont tous des occurrences d’une seule classe :</p>
 <ul class="- topic/ul "><li class="- topic/li ">Performances : l’accès à l’élément de tableau et son itération sont beaucoup plus rapides lorsque vous utilisez une occurrence de Vector que lorsque vous utilisez une occurrence d’Array.</li><li class="- topic/li ">Sécurité des types : en mode strict, le compilateur peut identifier les erreurs de type de données. Parmi ces erreurs, citons l’affectation d’un type de valeur incorrect à un vecteur ou l’attente d’un type de données incompatible lors de la lecture d’une valeur à partir du vecteur. Notez cependant que lorsque vous utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">push()</codeph> ou <codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph> pour ajouter des valeurs à un vecteur, les types de données des arguments ne sont pas vérifiés au moment de la compilation. Ils sont vérifiés au moment de l’exécution.</li><li class="- topic/li ">Fiabilité : la vérification de plage du moteur d’exécution (ou la vérification des vecteurs de longueur fixe) augmente de façon significative la fiabilité sur les tableaux.</li></ul> 
 
 </apiDesc></apiClassifierDetail><related-links class="- topic/related-links "><link href="operators.html#array_access" class="- topic/link "><linktext class="- topic/linktext ">[], accès au tableau</linktext></link><link href="package.html#Vector()" class="- topic/link "><linktext class="- topic/linktext ">Vector(), fonction globale</linktext></link><link href="#Array" class="- topic/link "><linktext class="- topic/linktext ">Classe Array</linktext></link></related-links><apiConstructor id="Vector:Vector" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation apiOperation/apiConstructor"><apiName class="- topic/title reference/title apiRef/apiName ">Vector</apiName><shortdesc class="- topic/shortdesc ">
     Crée un vecteur avec le type de base spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiConstructorDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail apiOperation/apiConstructorDetail"><apiConstructorDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiConstructorDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">length</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Longueur initiale (nombre d’éléments) du vecteur. Si ce paramètre est supérieur à zéro, les éléments de vecteur spécifiés sont créés et renseignés avec la valeur par défaut correspondant au type de base (<codeph class="+ topic/ph pr-d/codeph ">null</codeph> pour les types de référence).
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fixed</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">false</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Indique si la longueur du vecteur est fixe (<codeph class="+ topic/ph pr-d/codeph ">true</codeph>) ou si elle peut être modifiée (<codeph class="+ topic/ph pr-d/codeph ">false</codeph>). Il est également possible de définir cette valeur à l’aide de la propriété <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph>.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Crée un vecteur avec le type de base spécifié.
     
     <p class="- topic/p ">Lorsque vous appelez le constructeur <codeph class="+ topic/ph pr-d/codeph ">Vector&lt;T>()</codeph>, spécifiez le type de base à l’aide de la syntaxe de paramètres de type. La syntaxe de paramètres de type est une séquence constituée d’un point (<codeph class="+ topic/ph pr-d/codeph ">.</codeph>), d’un chevron gauche (<codeph class="+ topic/ph pr-d/codeph ">&lt;</codeph>), du nom de la classe, puis d’un chevron droit (<codeph class="+ topic/ph pr-d/codeph ">></codeph>), comme l’indique l’exemple suivant :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var v:Vector.&lt;String> = new Vector.&lt;String>();
     </codeblock>
     
     
     
     
     
     <p class="- topic/p ">Pour créer une occurrence de Vector à partir d’un tableau ou d’un autre vecteur (notamment avec un type de base différent), utilisez la fonction globale <codeph class="+ topic/ph pr-d/codeph ">Vector()</codeph>.</p>
       
     <p class="- topic/p ">Pour créer une occurrence de Vector préremplie, utilisez la syntaxe suivante au lieu d’utiliser les paramètres spécifiés ci-dessous :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     // var v:Vector.&lt;T> = new &lt;T>[E0, ..., En-1 ,];
     // For example: 
     var v:Vector.&lt;int> = new &lt;int>[0,1,2,];
     </codeblock>
     
     <p class="- topic/p ">Les informations ci-dessous s’appliquent à la syntaxe suivante : 
     <ul class="- topic/ul "><li class="- topic/li ">Elle est prise en charge dans Flash Professional CS5 et versions ultérieures, Flash Builder 4 et versions ultérieures, et Flex 4 et versions ultérieures. </li><li class="- topic/li "> La virgule à droite est facultative. </li><li class="- topic/li "> Les éléments vides dans le tableau ne sont pas pris en charge ; une instruction telle que <codeph class="+ topic/ph pr-d/codeph ">var v:Vector.&lt;int> = new &lt;int>[0,,2,]</codeph> renvoie une erreur de compilateur.</li><li class="- topic/li ">Vous ne pouvez pas spécifier de longueur par défaut pour l’occurrence de Vector. Au lieu de cela, la longueur est identique au nombre d’éléments dans la liste d’initialisation. </li><li class="- topic/li ">Vous ne pouvez pas indiquer si l’occurrence de Vector a une longueur fixe. Utilisez plutôt la propriété <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph>. </li><li class="- topic/li "> Une perte de données ou des erreurs peuvent se produire si les éléments transmis en tant que valeurs ne correspondent pas au type spécifié. Par exemple :</li><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
     var v:Vector.&lt;int> = new &lt;int>[4.2]; // compiler error when running in strict mode
     trace(v[0]); //returns 4 when not running in strict mode
     </codeblock></ul> </p>
     
     </apiDesc></apiConstructorDetail><related-links class="- topic/related-links "><link href="#Vector/fixed" class="- topic/link "><linktext class="- topic/linktext ">fixed</linktext></link><link href="package.html#Vector()" class="- topic/link "><linktext class="- topic/linktext ">Vector(), fonction globale</linktext></link></related-links></apiConstructor><apiOperation id="Vector:AS3:concat" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">concat</apiName><shortdesc class="- topic/shortdesc ">
     Concatène les éléments spécifiés dans les paramètres avec ceux contenus dans le vecteur et crée un nouveau vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.concat, concat, concatenate
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si un argument n’est pas une occurrence du type de base et ne peut pas être converti au type de base.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un vecteur avec le même type de base que ce vecteur qui contient les éléments correspondants, suivis des éléments des paramètres.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une ou plusieurs valeurs du type de base de ce vecteur à concaténer dans un nouveau vecteur. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Concatène les éléments spécifiés par les paramètres.
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Concatène les éléments spécifiés dans les paramètres avec ceux contenus dans le vecteur et crée un nouveau vecteur. Si les paramètres spécifient un vecteur, les éléments correspondants sont concaténés. Si vous ne transmettez aucun paramètre, le nouveau vecteur est une duplication (clone simple) du vecteur d’origine.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:every" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">every</apiName><shortdesc class="- topic/shortdesc ">
    Exécute une fonction de test sur chaque élément du vecteur jusqu’à ce que l’un d’eux renvoie false pour la fonction spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une valeur boléenne <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si la fonction spécifiée renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> lorsqu’elle est appelée sur tous les éléments dans le vecteur, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
    
    </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du vecteur. Cette fonction est invoquée avec trois arguments : l’élément actuel du vecteur, l’index de l’élément et l’objet Vector :
    <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean {
       // your code here
    }
    </pre> 
    
    <p class="- topic/p ">La fonction de rappel doit renvoyer une valeur booléenne.</p>
    
    </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet auquel se réfère l’identifiant <codeph class="+ topic/ph pr-d/codeph ">this</codeph> dans le rappel lorsque la fonction est appelée.
    
    </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
    Exécute une fonction de test sur chaque élément du vecteur jusqu’à ce que l’un d’eux renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph> pour la fonction spécifiée. Cette méthode vous permet de déterminer si tous les éléments d’un vecteur répondent à un critère défini, tel que des valeurs inférieures à un nombre spécifique.
    
    <p class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. C’est ainsi que cette méthode est le plus souvent utilisée.</p>
    
    <p product="flash" class="- topic/p ">Néanmoins, supposons que vous créiez une fonction sur une image du scénario principal à l’aide de Flash Professional et que vous souhaitiez qu’elle soit appelée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent :</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    function myFunction(item:T, index:int, vector:Vector.&lt;T>):Boolean {
       // your code here
    }
    </pre>
    
    <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">every()</codeph> sur un vecteur appelé <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> :</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    myVector.every(myFunction, someObject);
    </pre>
    
    <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe principale du fichier SWF, elle ne peut pas être exécutée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent. Les moteurs d’exécution de Flash renvoient un exception lors de l’exécution de ce code. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
    
    <pre product="flash" xml:space="preserve" class="- topic/pre ">
    var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
        //your code here
    };
    myVector.every(myFunction, someObject);
    </pre>
    
    </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/some()" class="- topic/link "><linktext class="- topic/linktext ">Vector.some()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:filter" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">filter</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction de test sur chaque élément du vecteur et construit un nouveau vecteur contenant tous les éléments qui renvoient true pour la fonction spécifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un nouveau vecteur qui contient tous les éléments du vecteur d’origine pour lequel la fonction <codeph class="+ topic/ph pr-d/codeph ">callback</codeph> a renvoyé <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du vecteur. Cette fonction est invoquée avec trois arguments : l’élément actuel du vecteur, l’index de l’élément et l’objet Vector :
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet auquel se réfère l’identifiant <codeph class="+ topic/ph pr-d/codeph ">this</codeph> dans le rappel lorsque la fonction est appelée.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction de test sur chaque élément du vecteur et construit un nouveau vecteur contenant tous les éléments qui renvoient <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour la fonction spécifiée. Si un élément renvoie <codeph class="+ topic/ph pr-d/codeph ">false</codeph>, il ne figure pas dans le vecteur résultant. Le type de base du vecteur renvoyé correspond à celui du vecteur pour lequel la méthode est appelée.
     
     <p class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. C’est ainsi que cette méthode est le plus souvent utilisée.</p>
     
     <p product="flash" class="- topic/p ">Néanmoins, supposons que vous créiez une fonction sur une image du scénario principal à l’aide de Flash Professional et que vous souhaitiez qu’elle soit appelée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:T, index:int, vector:Vector.&lt;T>):Boolean {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">filter()</codeph> sur un vecteur appelé <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var result:Vector.&lt;T> = myVector.filter(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe principale du fichier SWF, elle ne peut pas être exécutée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent. Les moteurs d’exécution de Flash renvoient un exception lors de l’exécution de ce code. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
         //your code here
     };
     myVector.filter(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/map()" class="- topic/link "><linktext class="- topic/linktext ">Vector.map()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:forEach" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">forEach</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction sur chaque élément du vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiType value="void" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du vecteur. Cette fonction est invoquée avec trois arguments : l’élément actuel du vecteur, l’index de l’élément et l’objet Vector :
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):void;</pre>
     <p class="- topic/p ">Toute valeur renvoyée depuis l’appel de fonction est supprimée.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet auquel se réfère l’identifiant <codeph class="+ topic/ph pr-d/codeph ">this</codeph> dans le rappel lorsque la fonction est appelée.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction sur chaque élément du vecteur.
     
     <p class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. C’est ainsi que cette méthode est le plus souvent utilisée.</p>
     
     <p product="flash" class="- topic/p ">Néanmoins, supposons que vous créiez une fonction sur une image du scénario principal à l’aide de Flash Professional et que vous souhaitiez qu’elle soit appelée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:T, index:int, vector:Vector.&lt;T>):void {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">forEach()</codeph> sur un vecteur appelé <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.forEach(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe principale du fichier SWF, elle ne peut pas être exécutée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent. Les moteurs d’exécution de Flash renvoient un exception lors de l’exécution de ce code. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):void {
         //your code here
     };
     myVector.forEach(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:indexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">indexOf</apiName><shortdesc class="- topic/shortdesc ">
     Recherche un élément dans le vecteur et renvoie la position d’index de l’élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une position d’index commençant à zéro de l’élément du vecteur. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> n’est pas détecté, la valeur renvoyée est -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Elément à rechercher dans le vecteur.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement dans le vecteur à partir duquel débuter la recherche d’élément. Si ce paramètre est négatif, il est considéré comme <codeph class="+ topic/ph pr-d/codeph ">length + fromIndex</codeph>. Cela signifie que la recherche commence à partir des éléments <codeph class="+ topic/ph pr-d/codeph ">-fromIndex</codeph> jusqu’à la fin, puis continue à partir de cette position jusqu’à la fin du vecteur.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recherche un élément dans le vecteur et renvoie la position d’index de l’élément. L’élément est comparé aux éléments du vecteur à l’aide de l’égalité stricte (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/lastIndexOf()" class="- topic/link "><linktext class="- topic/linktext ">Vector.lastIndexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (égalité stricte)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:join" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">join</apiName><shortdesc class="- topic/shortdesc ">
     Convertit les éléments d’un vecteur en chaînes, insère le séparateur spécifié entre les éléments, les concatène, puis renvoie la chaîne obtenue.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.join, join
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne composée des éléments d’un vecteur convertis en chaînes et séparés par la chaîne spécifiée.
     
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">sep</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">,</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Caractère ou chaîne séparant les éléments du vecteur dans la chaîne renvoyée. Si vous omettez ce paramètre, une virgule est utilisée en tant que séparateur par défaut. 
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Convertit les éléments d’un vecteur en chaînes.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Convertit les éléments d’un vecteur en chaînes, insère le séparateur spécifié entre les éléments, les concatène, puis renvoie la chaîne obtenue. Un vecteur imbriqué est toujours séparé par une virgule (,) et non pas par le séparateur transmis à la méthode <codeph class="+ topic/ph pr-d/codeph ">join()</codeph>.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:lastIndexOf" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">lastIndexOf</apiName><shortdesc class="- topic/shortdesc ">
     Recherche un élément dans le vecteur, en travaillant à rebours à partir de la position d’index spécifiée, puis renvoie la position d’index de l’élément correspondant.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une position d’index commençant à zéro de l’élément du vecteur. Si l’argument <codeph class="+ topic/ph pr-d/codeph ">searchElement</codeph> n’est pas détecté, la valeur renvoyée est -1.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">searchElement</apiItemName><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Elément à rechercher dans le vecteur.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">fromIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0x7fffffff</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Emplacement dans le vecteur à partir duquel débuter la recherche d’élément. La valeur par défaut correspond à la valeur d’index maximale autorisée, ce qui signifie que la recherche commence à partir du dernier élément du vecteur.
     <p class="- topic/p ">Si ce paramètre est négatif, il est considéré comme <codeph class="+ topic/ph pr-d/codeph ">length + fromIndex</codeph>. Cela signifie que la recherche commence à partir des éléments <codeph class="+ topic/ph pr-d/codeph ">-fromIndex</codeph> jusqu’à la fin, puis continue à partir de cette position jusqu’à l’index 0.</p>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Recherche un élément dans le vecteur, en travaillant à rebours à partir de la position d’index spécifiée, puis renvoie la position d’index de l’élément correspondant. L’élément est comparé aux éléments du vecteur à l’aide de l’égalité stricte (<codeph class="+ topic/ph pr-d/codeph ">===</codeph>).
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/indexOf()" class="- topic/link "><linktext class="- topic/linktext ">Vector.indexOf()</linktext></link><link href="operators.html#strict_equality" class="- topic/link "><linktext class="- topic/linktext ">=== (égalité stricte)</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:map" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">map</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction sur chaque élément du vecteur, puis renvoie un nouveau vecteur avec les éléments correspondants aux résultats de l’appel de fonction sur chaque élément de ce vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Un nouveau vecteur qui contient les résultats de l’appel de la fonction sur chaque élément de ce vecteur. Le vecteur résultant possède le même type de base et la même propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> que le vecteur d’origine.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du vecteur. Cette fonction est invoquée avec trois arguments : l’élément actuel du vecteur, l’index de l’élément et l’objet Vector :
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):T;</pre> 
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet auquel se réfère l’identifiant <codeph class="+ topic/ph pr-d/codeph ">this</codeph> dans le rappel lorsque la fonction est appelée.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction sur chaque élément du vecteur, puis renvoie un nouveau vecteur avec les éléments correspondants aux résultats de l’appel de fonction sur chaque élément de ce vecteur. Le vecteur résultant possède le même type de base et la même propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> que le vecteur d’origine. L’élément qui occupe la position d’index <codeph class="+ topic/ph pr-d/codeph ">i</codeph> dans le vecteur obtenu est le résultat de l’appel de l’élément qui occupe la position d’index <codeph class="+ topic/ph pr-d/codeph ">i</codeph> dans le vecteur d’origine.
     
     <p class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. C’est ainsi que cette méthode est le plus souvent utilisée.</p>
     
     <p product="flash" class="- topic/p ">Néanmoins, supposons que vous créiez une fonction sur une image du scénario principal à l’aide de Flash Professional et que vous souhaitiez qu’elle soit appelée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T>):T {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">map()</codeph> sur un vecteur appelé <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.map(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe principale du fichier SWF, elle ne peut pas être exécutée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent. Les moteurs d’exécution de Flash renvoient un exception lors de l’exécution de ce code. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):void {
         //your code here
     };
     myVector.map(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/filter()" class="- topic/link "><linktext class="- topic/linktext ">Vector.filter()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:pop" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">pop</apiName><shortdesc class="- topic/shortdesc ">
     Supprime le dernier élément du vecteur et renvoie cet élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.pop, pop
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si cette méthode est appelée alors que <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Valeur du dernier élément dans le vecteur spécifié.
     
     </apiDesc><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Supprime le dernier élément du vecteur et renvoie cet élément. La propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> du vecteur est diminuée d’une unité lorsque cette fonction est appelée.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:push" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">push</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute un ou plusieurs éléments à la fin d’un vecteur et renvoie la nouvelle longueur du vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.push, push
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si un argument n’est pas une occurrence du type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph> du vecteur.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si cette méthode est appelée alors que <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">La longueur du vecteur une fois les éléments ajoutés.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une ou plusieurs valeurs à ajouter au vecteur.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute un ou plusieurs éléments à la fin d’un vecteur et renvoie la nouvelle longueur du vecteur.
     
     <p class="- topic/p ">Etant donné que cette fonction peut accepter plusieurs arguments, le type de données des arguments n’est pas vérifié au moment de la compilation, même en mode strict. En revanche, si un argument n’étant pas une occurrence du type de base est transmis, une exception se produit au moment de l’exécution.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:reverse" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">reverse</apiName><shortdesc class="- topic/shortdesc ">
     Inverse l’ordre les éléments dans le vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.reverse, reverse
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le vecteur avec les éléments dans l’ordre inverse.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Inverse l’ordre les éléments dans le vecteur. Cette méthode modifie le vecteur pour lequel elle est appelée.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:shift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">shift</apiName><shortdesc class="- topic/shortdesc ">
     Supprime le premier élément du vecteur et renvoie cet élément.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.shift, shift
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la propriété <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Le premier élément dans le vecteur.
     
     </apiDesc><apiType value="T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Supprime le premier élément du vecteur et renvoie cet élément. Les éléments restants du vecteur sont décalés de leur position d’origine, i, vers i -1.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/unshift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.unshift()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:slice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">slice</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie un nouveau vecteur constitué d’un éventail d’éléments issus du vecteur d’origine, sans modifier ce dernier.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.slice, slice
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">un vecteur constitué d’un éventail d’éléments issus du vecteur d’origine.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">0</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre spécifiant l’index du point de départ pour la découpe. Si <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> est un nombre négatif, le point de départ se trouve à la fin du vecteur, où la valeur -1 correspond au dernier élément.  
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">endIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">16777215</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Nombre spécifiant l’index du point d’arrivée pour la découpe. Si vous omettez ce paramètre, la découpe inclut tous les éléments, du point de départ à la fin du vecteur. Si <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph> est un nombre négatif, le point d’arrivée spécifié se trouve à la fin du vecteur, où la valeur -1 correspond au dernier élément.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiTipText ">Renvoie un nouveau vecteur constitué d’un éventail d’éléments issus du vecteur d’origine.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie un nouveau vecteur constitué d’un éventail d’éléments issus du vecteur d’origine, sans modifier ce dernier. Le vecteur renvoyé inclut l’élément <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et tous les éléments, excepté l’élément <codeph class="+ topic/ph pr-d/codeph ">endIndex</codeph>.
     
     <p class="- topic/p "> Si vous ne transmettez aucun paramètre, le nouveau vecteur est une duplication (clone simple) du vecteur d’origine. Si vous transmettez une valeur de 0 pour les deux paramètres, un nouveau vecteur vide de même type que le vecteur d’origine est créé.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:some" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">some</apiName><shortdesc class="- topic/shortdesc ">
     Exécute une fonction de test sur chaque élément du vecteur jusqu’à ce que l’un d’eux renvoie true.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une valeur booléenne <codeph class="+ topic/ph pr-d/codeph ">true</codeph> si un élément du vecteur renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph> pour la fonction spécifiée, <codeph class="+ topic/ph pr-d/codeph ">false</codeph> dans tous les autres cas.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Boolean</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">callback</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Fonction à exécuter sur chaque élément du vecteur. Cette fonction est invoquée avec trois arguments : l’élément actuel du vecteur, l’index de l’élément et l’objet Vector :
     <pre xml:space="preserve" class="- topic/pre ">function callback(item:T, index:int, vector:Vector.&lt;T>):Boolean</pre> 
     
     <p class="- topic/p ">La fonction de rappel doit renvoyer une valeur booléenne.</p>
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">thisObject</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Object</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">null</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Objet auquel se réfère l’identifiant <codeph class="+ topic/ph pr-d/codeph ">this</codeph> dans le rappel lorsque la fonction est appelée.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Exécute une fonction de test sur chaque élément du vecteur jusqu’à ce que l’un d’eux renvoie <codeph class="+ topic/ph pr-d/codeph ">true</codeph>. Cette méthode vous permet de déterminer si un élément du vecteur répond au critère défini, tel qu’une valeur inférieure à un nombre spécifique.
     
     <p class="- topic/p ">Avec cette méthode, le second paramètre, <codeph class="+ topic/ph pr-d/codeph ">thisObject</codeph>, doit être réglé sur <codeph class="+ topic/ph pr-d/codeph ">null</codeph> si le premier paramètre, <codeph class="+ topic/ph pr-d/codeph ">callback</codeph>, est une fermeture de méthode. C’est ainsi que cette méthode est le plus souvent utilisée.</p>
     
     <p product="flash" class="- topic/p ">Néanmoins, supposons que vous créiez une fonction sur une image du scénario principal et que vous souhaitiez qu’elle soit appelée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     function myFunction(item:Object, index:int, vector:Vector.&lt;T>):Boolean {
        // your code here
     }
     </pre>
     
     <p product="flash" class="- topic/p ">Supposons que vous utilisiez ensuite la méthode <codeph class="+ topic/ph pr-d/codeph ">some()</codeph> sur un vecteur appelé <codeph class="+ topic/ph pr-d/codeph ">myVector</codeph> :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     myVector.some(myFunction, someObject);
     </pre>
     
     <p product="flash" class="- topic/p ">Etant donné que <codeph class="+ topic/ph pr-d/codeph ">myFunction</codeph> appartient à la classe principale du fichier SWF, elle ne peut pas être exécutée dans un contexte <codeph class="+ topic/ph pr-d/codeph ">this</codeph> différent. Les moteurs d’exécution de Flash renvoient un exception lors de l’exécution de ce code. Pour éviter le renvoi de cette erreur d’exécution, affectez la fonction à une variable, comme suit :</p>
     
     <pre product="flash" xml:space="preserve" class="- topic/pre ">
     var myFunction:Function = function(item:T, index:int, vector:Vector.&lt;T>):Boolean {
         //your code here
     };
     myVector.some(myFunction, someObject);
     </pre>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/every()" class="- topic/link "><linktext class="- topic/linktext ">every()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:sort" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">sort</apiName><shortdesc class="- topic/shortdesc ">
     Trie les éléments dans le vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.sort, sort
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Ce vecteur, avec les éléments dans le nouvel ordre.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">compareFunction</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">Function</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Méthode de comparaison qui détermine le comportement du tri.
     
     <p class="- topic/p ">La méthode spécifiée doit prendre deux arguments du type de base (<codeph class="+ topic/ph pr-d/codeph ">T</codeph>) du vecteur et renvoyer un nombre :</p>
     
     <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">function compare(x:T, y:T):Number {}</codeblock>
     
     <p class="- topic/p ">La logique de la fonction <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph> est que, selon deux éléments <codeph class="+ topic/ph pr-d/codeph ">x</codeph> et <codeph class="+ topic/ph pr-d/codeph ">y</codeph>, la fonction renvoie l’une des trois valeurs suivantes :</p>
     
     <ul class="- topic/ul "><li class="- topic/li ">un nombre négatif, si <codeph class="+ topic/ph pr-d/codeph ">x</codeph> apparaît avant <codeph class="+ topic/ph pr-d/codeph ">y</codeph> dans la séquence triée ;</li><li class="- topic/li ">0, si <codeph class="+ topic/ph pr-d/codeph ">x</codeph> équivaut à <codeph class="+ topic/ph pr-d/codeph ">y</codeph> ;</li><li class="- topic/li ">un nombre positif, si <codeph class="+ topic/ph pr-d/codeph ">x</codeph> apparaît après <codeph class="+ topic/ph pr-d/codeph ">y</codeph> dans la séquence triée.</li></ul>
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Trie les éléments dans le vecteur. Cette méthode effectue le tri selon la fonction fournie en tant que paramètre <codeph class="+ topic/ph pr-d/codeph ">compareFunction</codeph>.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:AS3:splice" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">splice</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute et supprime des éléments dans un vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.splice, splice
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si les arguments <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph> spécifient un index à supprimer qui se trouve en dehors des limites du vecteur.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si la méthode est appelée alors que la propriété <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph> et que l’opération <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> modifie la <codeph class="+ topic/ph pr-d/codeph ">longueur</codeph> du vecteur.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">un vecteur contenant les éléments supprimés du vecteur d’origine.
     
     </apiDesc><apiType value="Vector$T" name="type" class="- topic/state reference/state apiRef/apiType "/></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">startIndex</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">int</apiOperationClassifier><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier spécifiant l’index de la position d’insertion ou de suppression de l’élément dans le vecteur. Vous pouvez utiliser un entier négatif pour définir une position par rapport à la fin du vecteur (par exemple, la valeur -1 représente le dernier élément du vecteur).
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">deleteCount</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier><apiData class="- topic/ph reference/ph apiRef/apiData ">4294967295</apiData><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier spécifiant le nombre d’éléments à supprimer. Ce nombre inclut l’élément spécifié dans le paramètre <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>. Si vous ne spécifiez pas de valeur pour le paramètre <codeph class="+ topic/ph pr-d/codeph ">deleteCount</codeph>, la méthode supprime toutes les valeurs comprises entre l’élément <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph> et le dernier élément du vecteur. (La valeur par défaut est <codeph class="+ topic/ph pr-d/codeph ">uint.MAX_VALUE</codeph>.) Si la valeur est 0, aucun élément n’est supprimé.
     
     </apiDesc></apiParam><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">items</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Liste facultative d’une ou de plusieurs valeurs séparées par une virgule à insérer dans le vecteur à la position spécifiée par le paramètre <codeph class="+ topic/ph pr-d/codeph ">startIndex</codeph>.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute et supprime des éléments dans un vecteur. Cette méthode modifie le vecteur sans faire de copie.
     
     <p class="- topic/p "><b class="+ topic/ph hi-d/b ">Remarque :</b> pour annuler cette méthode dans une sous-classe de Vector, utilisez <codeph class="+ topic/ph pr-d/codeph ">...args</codeph> pour les paramètres, comme indiqué dans l’exemple ci-dessous :</p>
     
     <pre xml:space="preserve" class="- topic/pre ">
     public override function splice(...args) {
       // your statements here
     }
     </pre>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="Vector:toLocaleString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toLocaleString</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une chaîne représentant les éléments du vecteur spécifié.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne d’éléments de vecteur.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une chaîne représentant les éléments du vecteur spécifié. Chaque élément du vecteur, de la position d’index 0 à la position d’index la plus élevée, est converti en chaîne concaténée et séparé par des virgules. Dans l’implémentation d’ActionScript 3.0, cette méthode renvoie la même valeur que la méthode <codeph class="+ topic/ph pr-d/codeph ">Vector.toString()</codeph>.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/toString()" class="- topic/link "><linktext class="- topic/linktext ">Vector.toString()</linktext></link></related-links></apiOperation><apiOperation id="Vector:toString" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">toString</apiName><shortdesc class="- topic/shortdesc ">
     Renvoie une chaîne représentant les éléments du vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.toString, toString
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Chaîne d’éléments de vecteur.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Renvoie une chaîne représentant les éléments du vecteur. Chaque élément du vecteur, de la position d’index 0 à la position d’index la plus élevée, est converti en chaîne concaténée et séparé par des virgules. Pour spécifier un séparateur personnalisé, utilisez la méthode <codeph class="+ topic/ph pr-d/codeph ">Vector.join()</codeph>.
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#String/split()" class="- topic/link "><linktext class="- topic/linktext ">String.split()</linktext></link><link href="#Vector/join()" class="- topic/link "><linktext class="- topic/linktext ">Vector.join()</linktext></link></related-links></apiOperation><apiOperation id="Vector:AS3:unshift" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiOperation/apiOperation "><apiName class="- topic/title reference/title apiRef/apiName ">unshift</apiName><shortdesc class="- topic/shortdesc ">
     Ajoute un ou plusieurs éléments du début d’un vecteur et renvoie la nouvelle longueur du vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">Vector.unshift, unshift
     
     </keyword></asCustoms></prolog><apiOperationDetail class="- topic/body reference/refbody apiRef/apiDetail apiOperation/apiOperationDetail "><apiOperationDef class="- topic/section reference/section apiRef/apiDef apiOperation/apiOperationDef "><apiAccess value="AS3" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si un argument n’est pas une occurrence du type de base <codeph class="+ topic/ph pr-d/codeph ">T</codeph> du vecteur.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">TypeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">TypeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si cette méthode est appelée alors que <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiReturn class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiReturn "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Entier représentant la nouvelle longueur du vecteur.
     
     </apiDesc><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">uint</apiOperationClassifier></apiReturn><apiParam class="- topic/ph reference/ph apiRef/apiDefItem apiOperation/apiParam "><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">args</apiItemName><apiType value="restParam" name="type" class="- topic/state reference/state apiRef/apiType "/><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Une ou plusieurs occurrence du type de base du vecteur à insérer au début du vecteur.  
     
     </apiDesc></apiParam></apiOperationDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Ajoute un ou plusieurs éléments du début d’un vecteur et renvoie la nouvelle longueur du vecteur. Les autres éléments du vecteur sont décalés de leur position d’origine, i, vers i + le nombre de nouveaux éléments.
     
     <p class="- topic/p ">Etant donné que cette fonction peut accepter plusieurs arguments, le type de données des arguments n’est pas vérifié au moment de la compilation, même en mode strict. En revanche, si un argument n’étant pas une occurrence du type de base est transmis, une exception se produit au moment de l’exécution.</p>
     
     </apiDesc></apiOperationDetail><related-links class="- topic/related-links "><link href="#Vector/pop()" class="- topic/link "><linktext class="- topic/linktext ">Vector.pop()</linktext></link><link href="#Vector/push()" class="- topic/link "><linktext class="- topic/linktext ">Vector.push()</linktext></link><link href="#Vector/shift()" class="- topic/link "><linktext class="- topic/linktext ">Vector.shift()</linktext></link></related-links></apiOperation><apiValue id="Vector:fixed:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">fixed</apiName><shortdesc class="- topic/shortdesc ">
     Indique si la propriété length du vecteur peut être modifiée.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">vector.fixed, fixed
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">Boolean</apiValueClassifier></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Indique si la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> du vecteur peut être modifiée. Si la valeur est définie sur <codeph class="+ topic/ph pr-d/codeph ">true</codeph>, la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> ne peut pas être modifiée. Cela signifie que les opérations suivantes ne sont pas autorisées lorsque <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph> :
     
     <ul class="- topic/ul "><li class="- topic/li ">réglage direct de la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> ;</li><li class="- topic/li ">attribution d’une valeur à la position d’index <codeph class="+ topic/ph pr-d/codeph ">length</codeph> ;</li><li class="- topic/li ">appel d’une méthode qui modifie la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph>, notamment :
         <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">pop()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">push()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">shift()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">unshift()</codeph></li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> (si l’appel de la méthode <codeph class="+ topic/ph pr-d/codeph ">splice()</codeph> change la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> du vecteur).</li></ul>
       </li></ul>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="Vector:length:get" ditaarch:DITAArchVersion="1.0" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                              (topic ut-d) (topic pr-d api-d)" class="- topic/topic reference/reference apiRef/apiRef apiValue/apiValue "><apiName class="- topic/title reference/title apiRef/apiName ">length</apiName><shortdesc class="- topic/shortdesc ">
     Plage des index disponibles dans le vecteur.</shortdesc><prolog class="- topic/prolog "><asMetadata class="+ topic/metadata adobe-api-d/asMetadata "><apiVersion class="+ topic/ph adobe-api-d/apiVersion "><apiLanguage version="3.0" class="+ topic/ph adobe-api-d/apiLanguage "/><apiPlatform description="" name="Flash" version="10" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="AIR" version="1.5" class="+ topic/ph adobe-api-d/apiPlatform "/><apiPlatform description="" name="Lite" version="4" class="+ topic/ph adobe-api-d/apiPlatform "/></apiVersion></asMetadata><asCustoms class="+ topic/metadata adobe-api-d/asCustoms "><keyword class="- topic/keyword ">vector.length, length
     
     </keyword></asCustoms></prolog><apiValueDetail class="- topic/body reference/refbody apiRef/apiDetail apiValue/apiValueDetail "><apiValueDef class="- topic/section reference/section apiRef/apiDef apiValue/apiValueDef "><apiProperty class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiProperty "/><apiAccess value="public" class="- topic/state reference/state apiRef/apiQualifier adobe-api-d/apiAccess "/><apiDynamic class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiDynamic "/><apiValueAccess value="readwrite" class="+ topic/state reference/state apiRef/apiQualifier adobe-api-d/apiValueAccess "/><apiValueClassifier class="- topic/xref reference/xref apiRef/apiRelation apiValue/apiValueClassifier ">uint</apiValueClassifier><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si cette propriété est modifiée alors que <codeph class="+ topic/ph pr-d/codeph ">fixed</codeph> est <codeph class="+ topic/ph pr-d/codeph ">true</codeph>.
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException><apiException class="+ topic/ph reference/ph apiRef/apiDefItem apiOperation/apiEvent adobe-api-d/apiException "><apiDesc class="- topic/section reference/section apiRef/apiDesc ">Si cette propriété est définie sur une valeur supérieure à l’index maximal autorisé (2<sup class="+ topic/ph hi-d/sup ">32</sup>).
     
     </apiDesc><apiItemName class="- topic/keyword reference/keyword apiRef/apiItemName ">RangeError</apiItemName><apiOperationClassifier class="- topic/xref reference/xref apiRef/apiRelation apiOperation/apiOperationClassifier ">RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc class="- topic/section reference/section apiRef/apiDesc ">
     Plage des index disponibles dans le vecteur. Une occurrence de Vector a des positions d’index jusqu’à la valeur <codeph class="+ topic/ph pr-d/codeph ">length</codeph> (mais sans l’inclure).
     
     <p class="- topic/p ">Chaque élément du vecteur possède toujours une valeur qui correspond à une occurrence du type de base ou à la valeur <codeph class="+ topic/ph pr-d/codeph ">null</codeph>. Lorsque la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est définie sur une valeur supérieure à sa valeur précédente, d’autres éléments sont créés et remplis avec la valeur par défaut correspondant au type de base (<codeph class="+ topic/ph pr-d/codeph ">null</codeph> pour les types de référence).</p>
     
     <p class="- topic/p ">Lorsque la propriété <codeph class="+ topic/ph pr-d/codeph ">length</codeph> est définie sur une valeur inférieure à sa valeur précédente, tous les éléments à des positions d’index supérieures ou égales à la nouvelle valeur <codeph class="+ topic/ph pr-d/codeph ">length</codeph> sont supprimés du vecteur.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>