<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:IButton"><apiName>IButton</apiName><shortdesc>
  Die IButton-Schnittstelle ist eine Markierungsschnittstelle, die anzeigt, dass eine Komponente als eine Schaltfläche fungiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IButton-Schnittstelle ist eine Markierungsschnittstelle, die anzeigt, dass eine Komponente als eine Schaltfläche fungiert.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IButton:mx.core:IButton:callLater"><apiName>callLater</apiName><shortdesc conref="mx.core.UIComponent#callLater()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>Verweis auf eine Methode, die später ausgeführt wird.
           </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von Objekten, die die an die Methode zu übergebenden Argumente darstellen.
           
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#callLater()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IButton:mx.core:IButton:emphasized:get"><apiName>emphasized</apiName><shortdesc conref="mx.controls.Button#emphasized">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Button#emphasized">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFLoader"><apiName>ISWFLoader</apiName><shortdesc>
  Die ISWFLoader-Schnittstelle definiert eine API mit speziellen Eigenschaften und einer beim Laden kompatibler Anwendungen und nicht vertrauenswürdiger Anwendungen erforderlichen Methode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeProvider</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die ISWFLoader-Schnittstelle definiert eine API mit speziellen Eigenschaften und einer beim Laden kompatibler Anwendungen und nicht vertrauenswürdiger Anwendungen erforderlichen Methode.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFLoader:mx.core:ISWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      Ruft die Grenzen der geladenen Anwendung ab, die auf dem Bildschirm zu sehen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>Rectangle</codeph>, welches den sichtbaren Teil dieses Objekts enthält. Das Rechteck verwendet globale Koordinaten.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bestimmt, ob das sichtbare Rechteck nur basierend auf den Anzeigeobjekten innerhalb dieser Anwendung berechnet wurde, oder ob alle übergeordneten Anwendungen ebenfalls in die Berechnung einbezogen wurden. Das Einbeziehen von übergeordneten Anwendungen kann die zurückgegebene sichtbare Fläche verringern. Wenn <codeph>true</codeph>, werden alle Anwendungen verwendet, um die sichtbare Fläche zu suchen. Anderenfalls werden lediglich die Anzeigeobjekte dieser Anwendung verwendet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die Grenzen der geladenen Anwendung ab, die auf dem Bildschirm zu sehen ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFLoader:mx.core:ISWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      Ein Flag, das anzeigt, ob der Inhalt geladen ist, sodass er mit Anwendungen verwendet werden kann, die mit einer anderen Versionen von Flex erstellt wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das anzeigt, ob der Inhalt geladen ist, sodass er mit Anwendungen verwendet werden kann, die mit einer anderen Versionen von Flex erstellt wurden. Die Kompatibilität mit anderen Flex-Anwendungen wird durch das Laden der Anwendung in eine gleichgeordnete (Peer) ApplicationDomain erreicht. Dieses Flag wird ignoriert, wenn die Unteranwendung in eine andere SecurityDomain als die Hauptanwendung geladen wird. Wenn <codeph>true</codeph>, wird der Inhalt in eine gleichgeordnete ApplicationDomain geladen. Wenn <codeph>false</codeph>, wird der Inhalt in eine untergeordnete ApplicationDomain geladen.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
  Die UITextFormat-Klasse repräsentiert Zeichenformatierungsinformationen für die UITextField-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextFormat</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die UITextFormat-Klasse repräsentiert Zeichenformatierungsinformationen für die UITextField-Klasse. Die UITextField-Klasse definiert die von vielen zusammengesetzten Flex-Komponenten zum Anzeigen von Text verwendete Komponente.
 
  <p>Die UITextFormat-Klasse erweitert die flash.text.TextFormat-Klasse, um die <codeph>measureText()</codeph>- und <codeph>measureHTMLText()</codeph>-Methode für die Messung des Texts und Eigenschaften für die Steuerung des erweiterten Anti-Aliasing von Schriftarten hinzuzufügen.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UITextField"><linktext>mx.core.UITextField</linktext></link></related-links><apiConstructor id="mx.core:UITextFormat:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>Ein SystemManager-Objekt. Der SystemManager verfolgt, welche Schriftarten eingebettet sind. Normalerweise ist dies der von der <codeph>systemManager</codeph>-Eigenschaft der UIComponent übergebene SystemManager.
     
      </apiDesc></apiParam><apiParam><apiItemName>font</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Ein String, der den Namen einer Schriftart angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine Zahl, die eine Schriftgröße in Pixeln angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine vorzeichenlose Ganzzahl, die die RGB-Farbe des Texts angibt, wie etwa 0xFF0000 für rot, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein boolesches Flag, das angibt, ob der Text fett ist, oder <codeph>null</codeph> um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein boolesches Flag, das angibt, ob der Text kursiv ist, oder <codeph>null</codeph> um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein boolesches Flag, das angibt, ob der Text unterstrichen ist, oder <codeph>null</codeph> um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Ein String, der die URL angibt, mit der der Text über Hyperlink verknüpft ist, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Ein String, der das Zielfenster angibt, in dem die über Hyperlink verknüpfte URL angezeigt wird. Ist das Zielfenster <codeph>null</codeph> oder ein leerer String, wird die über Hyperlink verknüpfte Seite im selben Browserfenster angezeigt. Ist der <codeph>urlString</codeph>-Parameter <codeph>null</codeph> oder ein leerer String, hat diese Eigenschaft keine Auswirkungen. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Ein String, der die Ausrichtung des Absatzes als einen flash.text.TextFormatAlign-Wert angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine Zahl, die den linken Rand des Absatzes in Pixeln angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine Zahl, die den rechten Rand des Absatzes in Pixeln angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine Zahl, die die Einrückung vom linken Rand bis zum ersten Zeichen des Absatzes in Pixeln angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine Zahl, die den zusätzlichen vertikalen Abstand zwischen Zeilen angibt, oder <codeph>null</codeph>, um anzugeben, dass dieses UITextFormat-Objekt diese Eigenschaft nicht festlegt. Dieser Parameter ist optional und hat den Standardwert <codeph>null</codeph>.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.TextFormatAlign.xml"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:UITextFormat:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      Gibt Abmessungsinformationen für den angegebenen HTML-Text zurück, welche HTML-Tags wie etwa „&amp;lt;font&amp;gt;“ und „&amp;lt;b&amp;gt;“ enthalten können. Dabei wird davon ausgegangen, dass diese Informationen in einem einzeiligen UITextField angezeigt werden und dieses UITextFormat-Objekt zum Definieren des Textformats verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein TextLineMetrics-Objekt mit den Textabmessungen.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>Ein String, der den zu messenden HTML-Text angibt.
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ein boolesches Flag, das angibt, ob die gemessene Breite und Höhe auf die jeweils nächste Ganzzahl gerundet werden soll. In den meisten Fällen ist es empfehlenswert, zu runden.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt Abmessungsinformationen für den angegebenen HTML-Text zurück, welche HTML-Tags wie etwa <codeph>&lt;font></codeph> und <codeph>&lt;b></codeph> enthalten können. Dabei wird davon ausgegangen, dass diese Informationen in einem einzeiligen UITextField angezeigt werden und dieses UITextFormat-Objekt zum Definieren des Textformats verwendet wird.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextFormat:measureText"><apiName>measureText</apiName><shortdesc>
      Gibt Abmessungsinformationen für den angegebenen Text zurück. Dabei wird davon ausgegangen, dass diese Informationen in einem einzeiligen UITextField angezeigt werden und dieses UITextFormat-Objekt zum Definieren des Textformats verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein TextLineMetrics-Objekt mit den Textabmessungen.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Ein String, der den zu messenden Text angibt.
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Ein boolesches Flag, das angibt, ob die gemessene Breite und Höhe auf die jeweils nächste Ganzzahl gerundet werden soll. In den meisten Fällen ist es empfehlenswert, zu runden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt Abmessungsinformationen für den angegebenen Text zurück. Dabei wird davon ausgegangen, dass diese Informationen in einem einzeiligen UITextField angezeigt werden und dieses UITextFormat-Objekt zum Definieren des Textformats verwendet wird. 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.core:UITextFormat:antiAliasType"><apiName>antiAliasType</apiName><shortdesc>
      Definiert die Anti-Aliasing-Einstellung für die UITextField-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"advanced"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert die Anti-Aliasing-Einstellung für die UITextField-Klasse. Die möglichen Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
      
      <p>Der Standardwert ist <codeph>"advanced"</codeph>, wodurch ein Anti-Aliasing für die eingebettete Schriftart aktiviert wird. Stellen Sie diese Eigenschaft auf <codeph>"normal"</codeph> ein, um das erweiterte Anti-Aliasing zu deaktivieren.</p>
      
      <p>Diese Eigenschaft hat keine Auswirkungen für Systemschriftarten.</p>
      
      <p>Diese Eigenschaft wird auf den gesamten Text in einem UITextField-Objekt angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:direction"><apiName>direction</apiName><shortdesc>
      Die Laufrichtung des Texts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Laufrichtung des Texts.
     
      <p>Zulässige Werte sind <codeph>"ltr"</codeph> für den von links nach rechts verlaufenden Text lateinischer Schriften und <codeph>"rtl"</codeph> für den von rechts nach links laufenden Text z. B. des Arabischen oder Hebräischen.</p>
     
      <p>FTE und TLF verwenden diesen Wert in ihrem bidirektionalen Textlayoutalgorithmus, der die Unicode-Zeichenfolge der Glyphenfolge zuordnet.</p>
     
      <p>Hinweis: Dieser Stil gilt nur, wenn dieses UITextFormat bei einem UIFTETextField (und nicht bei einem UITextField) verwendet wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:gridFitType"><apiName>gridFitType</apiName><shortdesc>
      Definiert die Rasteranpassungseinstellung für die UITextField-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"pixel"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert die Rasteranpassungseinstellung für die UITextField-Klasse. Die möglichen Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
      
      <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
      
      <p>Diese Eigenschaft hat keine Auswirkungen für Systemschriftarten.</p>
     
      <p>Diese Eigenschaft wird auf den gesamten Text in einem UITextField-Objekt angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:locale"><apiName>locale</apiName><shortdesc>
      Das Gebietsschema für den Text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Gebietsschema für den Text.
     
      <p>FTE und TLF verwenden dieses Gebietsschema für die Zuordnung von Unicode-Schriftarten zu Schriftartglyphen und für die Suche nach Ausweichschriftarten.</p>
     
      <p>Hinweis: Dieser Stil gilt nur, wenn dieses UITextFormat bei einem UIFTETextField (und nicht bei einem UITextField) verwendet wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:sharpness"><apiName>sharpness</apiName><shortdesc>
      Definiert die Schärfeeinstellung für die UITextField-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert die Schärfeeinstellung für die UITextField-Klasse. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Die möglichen Werte sind Zahlen von -400 bis 400. 
      
      <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
      
      <p>Diese Eigenschaft hat keine Auswirkungen für Systemschriftarten.</p>
     
      <p>Diese Eigenschaft wird auf den gesamten Text in einem UITextField-Objekt angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:thickness"><apiName>thickness</apiName><shortdesc>
      Definiert die Stärkeeinstellung für die UITextField-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Definiert die Stärkeeinstellung für die UITextField-Klasse. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Die möglichen Werte sind Zahlen von -200 bis 200. 
      
      <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
      
      <p>Diese Eigenschaft hat keine Auswirkungen für Systemschriftarten.</p>
     
      <p>Diese Eigenschaft wird auf den gesamten Text in einem UITextField-Objekt angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:useFTE"><apiName>useFTE</apiName><shortdesc>
      Bestimmt, wie die measureText()- und die measureHTMLText()-Methode bei der Messung des Texts vorgehen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bestimmt, wie die <codeph>measureText()</codeph>- und die <codeph>measureHTMLText()</codeph>-Methode bei der Messung des Texts vorgehen.
     
      <p>Ist der Wert hierfür <codeph>true</codeph>, verwenden sie eine nicht auf dem Bildschirm angezeigte Instanz der FTETextField-Klasse im Text Layout Framework. Ist der Wert <codeph>false</codeph>, verwenden sie eine nicht auf dem Bildschirm angezeigte Instanz der TextField-Klasse im Flash Player.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Die zum Erstellen von TextFields für eingebettete Schriftarten verwendete moduleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Die zum Erstellen von TextFields für eingebettete Schriftarten verwendete moduleFactory.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstance"><apiName>IDeferredInstance</apiName><shortdesc>
  Die IDeferredInstance-Schnittstelle definiert die Factory-Schnittstelle für zurückgestellte Instanzen von Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IDeferredInstance-Schnittstelle definiert die Factory-Schnittstelle für zurückgestellte Instanzen von Flex. Eine Implementierung von IDeferredInstance erstellt beim ersten Aufruf der <codeph>getInstance()</codeph>-Methode einen bestimmten Intanzwert und gibt bei allen nachfolgenden Aufrufen der <codeph>getInstance()</codeph>-Methode einen Verweis auf diesen Wert zurück.
 
  <p>Der Flex-Compiler führt die folgenden Coercions durch, wenn er MXML-Code feststellt, der einer Eigenschaft des Typs IDeferredInstance einen Wert zuweist:</p>
 
  <ol>
      <li>Wenn Sie einer Eigenschaft des Typs IDeferredInstance als Wert ein untergeordnetes MXML-Tag für eine Klasse zuweisen, z. B. ein Komponenten-Tag, erstellt der Compiler eine IDeferredInstance-Implementierung, deren <codeph>getInstance()</codeph>-Methode eine Instanz der Klasse zurückgibt, die entsprechend den Angaben im MXML-Code konfiguriert ist. Im folgenden Beispiel wird dieses Format veranschaulicht. Dabei entspricht MyComp einer benutzerdefinierten Komponente mit einer Variablen namens myDeferredInstanceProperty, die den Typ IDeferredInstance aufweist. Der Compiler generiert eine IDeferredInstance1-Implementierung deren <codeph>getInstance()</codeph>-Methode eine Instanz der Label-Klasse mit der Texteigenschaft „This is a deferred label“ zurückgibt:
          <pre>
          &lt;MyComp>
              &lt;myDeferredInstanceProperty>
                  &lt;Label text="This is a deferred label"/>
              &lt;/myDeferredInstanceProperty>
          &lt;/MyComp></pre>
      </li>
      <li>Wenn Sie einer Eigenschaft des Typs IDeferredInstance einen Textstring zuweisen, interpretiert der Compiler den String als vollständig qualifizierten Klassennamen und erstellt eine IDeferredInstance-Implementierung, deren <codeph>getInstance()</codeph>-Methode eine neue Instanz der angegebenen Klasse zurückgibt. Die angegebene Klasse muss einen Konstruktor ohne Argumente aufweisen. Im folgenden Beispiel wird dieses Format veranschaulicht. Dabei generiert der Compiler eine IDeferredInstance1-Implementierung, deren <codeph>getInstance()</codeph>-Methode eine Instanz der MyClass-Klasse zurückgibt:
          <pre>
          &lt;MyComp myDeferredInstanceProperty="myPackage.MyClass/></pre>
      </li>
  </ol>
 
  <p>Verwenden Sie die IDeferredInstance-Schnittstelle, wenn eine ActionScript-Klasse die Instanziierung eines Eigenschaftswerts zurückstellt. Sie können IDeferredInstance nicht verwenden, wenn die ActionScript-Klasse mehrere Instanzen mit dem gleichen Wert erfordert. Verwenden Sie in diesen Fällen die IFactory-Schnittstelle.</p>
  
  <p>Die states.AddChild-Klassen enthält eine <codeph>childFactory</codeph>-Eigenschaft des Typs IDeferredInstance.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddChild"><linktext>mx.states.AddChild</linktext></link></related-links><apiOperation id="mx.core:IDeferredInstance:mx.core:IDeferredInstance:getInstance"><apiName>getInstance</apiName><shortdesc>
      Erstellt ein Instanzobjekt von einer Klasse oder Funktion, wenn die Instanz noch nicht vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Instanzobjekt.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt ein Instanzobjekt von einer Klasse oder Funktion, wenn die Instanz noch nicht vorhanden ist.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
  SpriteAsset ist eine Unterklasse der flash.display.Sprite-Klasse, die Vektorgrafiken repräsentiert, die Sie in eine Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpriteAsset ist eine Unterklasse der flash.display.Sprite-Klasse, die Vektorgrafiken repräsentiert, die Sie in eine Anwendung einbetten. Sie implementiert die IFlexDisplayObject-Schnittstelle, durch die eine eingebettete Vektorgrafik in einem Image-Steuerelement angezeigt oder als Containerhintergrund für eine Komponentenskin verwendet werden kann.
 
  <p>Die eingebettete Vektorgrafik kann eine SVG-Datei sein. Sie können auch ein Sprite-Symbol einbetten, das sich in einer von Flash erzeugten SWF-Datei befindet. In beiden Fällen generiert der MXML-Compiler automatisch eine die SpriteAsset-Klasse erweiternde Klasse zur Repräsentation der eingebetteten Vektorgrafik.</p>
 
  <p>Sie brauchen beim Schreiben einer Flex-Anwendung die SpiritAsset-Klasse normalerweise nicht direkt zu verwenden. Beispiel: Sie können ein Sprite-Symbol von einer SWF-Datei einbetten und es in einem Image-Steuerelement anzeigen, indem Sie Folgendes schreiben:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Assets.swf', symbol='Logo')"/></pre>
 
  <p>Alternativ dazu können Sie es in der CSS-Syntax als Hintergrundbild der Anwendung verwenden, indem Sie Folgendes schreiben:</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol='Logo')
      }
  &lt;fx:Style/></pre>
 
  <p>Sie brauchen die Tatsache, dass der MXML-Compiler für Sie eine Unterklasse der BitmapAsset-Klasse erstellt hat, nicht weiter zur verstehen.</p>
 
  <p>Es kann jedoch nützlich sein, dass Sie verstehen, was auf der ActionScript-Ebene abläuft. Zum Einbetten einer Vektorgrafik in ActionScript deklarieren Sie eine Variable des Class-Typs und versehen sie mit <codeph>[Embed]</codeph>-Metadaten. Beispiel: Sie betten ein Sprite-Symbol von einer SWF-Datei wie folgt ein:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="Logo")]
  private var logoClass:Class;</pre>
 
  <p>Der MXML-Compiler stellt fest, dass das Logosymbol in „Assets.swf“ ein Sprite ist. Er generiert zu seiner Darstellung automatisch eine Unterklasse der SpriteAsset-Klasse und stellt Ihre Variable so ein, dass sie einen Verweis auf diese automatisch generierte Klasse darstellt. Sie können diesen Klassenverweis zum Erstellen von Instanzen der SpriteAsset-Klasse mit dem <codeph>new</codeph>-Operator verwenden und in Verbindung mit diesen Instanzen die APIs der Sprite-Klasse verwenden:</p>
 
  <pre>
  var logo:SpriteAsset = SpriteAsset(new logoClass());
  logo.rotation=45;</pre>
 
  <p>Es wird jedoch selten erforderlich sein, dass Sie selbst SpriteAsset-Instanzen erstellen, da bildbezogene Eigenschaften und Stile einfach auf eine bilderzeugende Klasse eingestellt werden können und die Komponenten nach Bedarf Instanzen erstellen. Beispiel: Zur Anzeige dieser Vektorgrafik in einem Image-Steuerelement können Sie die <codeph>source</codeph>-Eigenschaft des Bilds auf <codeph>logoClass</codeph> setzen. In MXML gehen Sie dazu wie folgt vor:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SpriteAsset:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SpriteAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird. Bei Unterschieden ist diese Methode dafür zuständig, den Inhalt des Elements zu spiegeln und die Transformation des Elements nach dem Layout so zu aktualisieren, dass die Nachfolger ein gespiegeltes Koordinatensystem erben. IVisualElements implementieren die Spiegelung in der Regel, indem sie mithilfe von postLayoutTransformOffsets die x-Achse um -1 skalieren und die x-Koordinate des Ursprungs um die Breite des Elements verschieben. Der Nettoeffekt dieser „Spiegeltransformation“ ist eine Umkehrung der Richtung, in welcher die x-Achse verlängert wird, ohne dass die Position des Elements relativ zum Ursprung seines übergeordneten Elements verändert wird.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:move"><apiName>move</apiName><shortdesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Position für dieses Objekt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Position für dieses Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite dieses Objekts.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe dieses Objekts.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.
	 
	  <p>Diese Methode dient hauptsächlich zur Implementierung der <codeph>updateDisplayList()</codeph>-Methode. Dabei berechnen Sie die tatsächliche Größe des Objekts aus der explizit angegebenen Größe, der Größe im Verhältnis zum übergeordneten Element (Prozent) und der gemessenen Größe. Dann wenden Sie diese tatsächliche Größe durch Aufrufen von <codeph>setActualSize()</codeph> auf das Objekt an.</p>
	 
	  <p>In anderen Fällen sollten Sie <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> oder <codeph>percentHeight</codeph> festlegen, statt diese Methode aufzurufen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SpriteAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Gibt ein EdgeMetrics-Objekt für den Rahmen zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Gibt ein EdgeMetrics-Objekt für den Rahmen zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert der Eigenschaften entspricht der Rahmenstärke an einer Seite des Rahmens in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          Legt die gewünschte Layoutrichtung für ein Element fest: entweder LayoutDirection.LTR (von links nach rechts), LayoutDirection.RTL (von rechts nach links) oder null (vererben).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          Legt die gewünschte Layoutrichtung für ein Element fest: entweder LayoutDirection.LTR (von links nach rechts), LayoutDirection.RTL (von rechts nach links) oder null (vererben). Diese Eigenschaft wird in der Regel durch einen vererbenden Stil unterstützt. Bei null wird der layoutDirection-Stil als undefiniert festgelegt. Klassen wie GraphicElement, die ILayoutDirectionElement implementieren, aber Stile nicht unterstützen, müssen zusätzlich einen Nullwert für diese Eigenschaft unterstützen. Das heißt, dass die layoutDirection vom übergeordneten Element vererbt werden muss. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Die gemessene Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Höhe dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Die gemessene Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Breite dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
  Die EdgeMetrics-Klasse gibt die Stärke der vier Begrenzungsbereiche um eine visuelle Komponente in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die EdgeMetrics-Klasse gibt die Stärke der vier Begrenzungsbereiche um eine visuelle Komponente in Pixeln an.
 
  <p>Die folgenden Flex-Eigenschaften haben Werte, die EdgeMetrics-Objekte sind:</p>
 
  <ul>
  <li>Die <codeph>borderMetrics</codeph>-Eigenschaft der mx.core.Container- und der mx.skins.Border-Klasse enthält nur den Rahmen in den Berechnungen der Eigenschaftswerte des EdgeMetrics-Objekts.</li>
 
  <li>Die <codeph>viewMetrics</codeph>-Eigenschaft der mx.core.Container-Klasse und von Unterklassen der Container-Klasse enthält gegebenenfalls Bildlaufleisten und Nicht-Inhaltselemente, wie etwa den Kopfbereich eines Panel-Containers oder die Fläche für eine ControlBar-Komponente, in den Berechnungen der Eigenschaftswerte des EdgeMetrics-Objekts.</li>
 
  <li>Die <codeph>viewMetricsAndPadding</codeph>-Eigenschaft der mx.core.Container-Klasse enthält die für die <codeph>viewMetrics</codeph>-Eigenschaft aufgelisteten Elemente sowie gegebenenfalls durch die Ränder der Container in den Berechnungen der Eigenschaftswerte des EdgeMetrics-Objekts definierten Flächen.</li>
  </ul>
 
  <p>Diese drei Eigenschaften geben alle einen Verweis zum selben EdgeMetrics-Objekt zurück, das der Container für seine Messung und sein Layout verwendet. Sie geben keine Kopie dieses Objekts zurück. Wenn Sie eine Kopie benötigen, rufen Sie die <codeph>clone()</codeph>-Methode auf.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="mx.skins.xml#Border"><linktext>mx.skins.Border</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.core:EdgeMetrics:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Die Breite des Bereichs der linken Begrenzung in Pixeln.
     
      </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Die Höhe des Bereichs der oberen Begrenzung in Pixeln.
     
      </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Die Breite des Bereichs der rechten Begrenzung in Pixeln.
     
      </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Die Höhe des Bereichs der unteren Begrenzung in Pixeln.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:EdgeMetrics:clone"><apiName>clone</apiName><shortdesc>
      Gibt eine Kopie dieses EdgeMetrics-Objekts zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Kopie dieses EdgeMetrics-Objekts.
      
      </apiDesc><apiOperationClassifier>mx.core:EdgeMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Gibt eine Kopie dieses EdgeMetrics-Objekts zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:EdgeMetrics:EMPTY"><apiName>EMPTY</apiName><shortdesc>
      Ein EdgeMetrics-Objekt mit dem Wert „null“ für die Eigenschaften „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Ein EdgeMetrics-Objekt mit dem Wert „null“ für die Eigenschaften <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:bottom"><apiName>bottom</apiName><shortdesc>
      Die Höhe des Bereichs der unteren Begrenzung in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Höhe des Bereichs der unteren Begrenzung in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:left"><apiName>left</apiName><shortdesc>
      Die Breite des Bereichs der linken Begrenzung in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite des Bereichs der linken Begrenzung in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:right"><apiName>right</apiName><shortdesc>
      Die Breite des Bereichs der rechten Begrenzung in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite des Bereichs der rechten Begrenzung in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:top"><apiName>top</apiName><shortdesc>
      Die Höhe des Bereichs der oberen Begrenzung in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Höhe des Bereichs der oberen Begrenzung in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeater"><apiName>IRepeater</apiName><shortdesc>
  Die IRepeater-Schnittstelle definiert die öffentlichen APIs des Repeater-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IRepeater-Schnittstelle definiert die öffentlichen APIs des Repeater-Objekts.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      Führt die Bindungen in alle von diesem Repeater erstellten UIComponents aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Führt die Bindungen in alle von diesem Repeater erstellten UIComponents aus.
     
      <p>Diese Methode wird vom Flex-Framework aufgerufen. Entwickler brauchen sie im Normalfall nicht aufzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
      Initialisiert ein neues Repeater-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>Der Container, der diesen Repeater enthält und in dem dieser Repeater seine untergeordneten Elemente erstellen wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Ein boolesches Flag, das anzeigt, ob dieser Repeater alle untergeordneten Elemente seiner untergeordneten Elemente erstellen soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialisiert ein neues Repeater-Objekt.
     
      <p>Diese Methode wird vom Flex-Framework aufgerufen. Entwickler brauchen sie im Normalfall nicht aufzurufen.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeater:mx.core:IRepeater:container:get"><apiName>container</apiName><shortdesc>
      Der Container, der diesen Repeater enthält und in dem dieser seine untergeordneten Elemente erstellen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      Der Container, der diesen Repeater enthält und in dem dieser seine untergeordneten Elemente erstellen wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:count:get"><apiName>count</apiName><shortdesc>
      Die Anzahl der Ausführungen für diesen Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der Ausführungen für diesen Repeater.
     
      <p>Wenn der Repeater während des Ausführens das Ende des Datenproviders erreicht, liegt die Anzahl der tatsächlichen Ausführungen unter der angeforderten Anzahl.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
      Die Indexposition des Elements im dataProvider, das gerade verarbeitet wird, während dieser Repeater ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition des Elements im <codeph>dataProvider</codeph>, das gerade verarbeitet wird, während dieser Repeater ausgeführt wird.
     
      <p>Nach Abschluss der Ausführung des Repeaters hat diese Eigenschaft den Wert <codeph>-1</codeph>. Die <codeph>repeaterIndex</codeph>-Eigenschaft einer wiederholten Komponenteninstanz merkt sich jedoch die Indexposition des <codeph>dataProvider</codeph>-Elements, von dem aus sie erstellt wurde. Im Fass von verschachtelten Repeatern können Sie das <codeph>repeaterIndices</codeph>-Array verwenden.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/repeaterIndex"><linktext>mx.core.UIComponent.repeaterIndex</linktext></link><link href="mx.core.xml#UIComponent/repeaterIndices"><linktext>mx.core.UIComponent.repeaterIndices</linktext></link><link href="mx.core.xml#UIComponent/instanceIndex"><linktext>mx.core.UIComponent.instanceIndex</linktext></link><link href="mx.core.xml#UIComponent/instanceIndices"><linktext>mx.core.UIComponent.instanceIndices</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
      Das Element im dataProvider, das gerade verarbeitet wird, während dieser Repeater ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Das Element im <codeph>dataProvider</codeph>, das gerade verarbeitet wird, während dieser Repeater ausgeführt wird.
     
      <p>Nach Abschluss der Ausführung des Repeaters hat diese Eigenschaft den Wert <codeph>null</codeph>. In diesem Fall können Sie jedoch die <codeph>getRepeaterItem()</codeph>-Methode der wiederholten Komponenteninstanz aufrufen, um das <codeph>dataProvider</codeph>-Element abzurufen, von dem aus sie erstellt wurde.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/getRepeaterItem()"><linktext>mx.core.UIComponent.getRepeaterItem()</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Der von diesem Repeater zum Erstellen wiederholter Instanzen seiner untergeordneten Elemente verwendete Datenprovider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Der von diesem Repeater zum Erstellen wiederholter Instanzen seiner untergeordneten Elemente verwendete Datenprovider.
      
      <p>Wenn Sie die <codeph>dataProvider</codeph>-Eigenschaft auslesen, erhalten Sie immer ein ICollectionView-Objekt oder <codeph>null</codeph>. Wenn Sie die <codeph>dataProvider</codeph>-Eigenschaft auf einen anderen Wert als <codeph>null</codeph> setzen, wird sie entsprechend der folgenden Regeln in ein ICollectionView-Objekt konvertiert:</p>
     
      <ul>
        <li>Wenn Sie sie auf ein Array einstellen, wird sie in eine ArrayCollection konvertiert.</li>
        <li>Wenn Sie sie auf eine ICollectionView einstellen, erfolgt keine Konvertierung.</li>
        <li>Wenn Sie sie auf ein IList einstellen, wird sie in eine ListCollectionView konvertiert.</li>
        <li>Wenn Sie sie auf ein XML oder eine XMLList einstellen, wird sie in eine XMLListCollection konvertiert.</li>
        <li>In allen anderen Fällen wird sie in eine ArrayCollection mit einem einzelnen Element konvertiert.</li>
      </ul>
     
      <p>Sie müssen einen Wert für die <codeph>dataProvider</codeph>-Eigenschaft angeben, damit die Repeater-Komponente ausgeführt wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
      Ein boolesches Flag, das anzeigt, ob dieser Repeater zuvor erstellte untergeordnete Elemente wiederverwenden oder neu erstellen soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein boolesches Flag, das anzeigt, ob dieser Repeater zuvor erstellte untergeordnete Elemente wiederverwenden oder neu erstellen soll.
     
      <p>Ist der Wert hierfür <codeph>true</codeph>, verwendet dieser Repeater, wenn sich sein <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph> oder <codeph>count</codeph> ändert, vorhandene untergeordnete Elemente wieder, indem er die neue Daten daran bindet. Sind mehr untergeordnete Elemente erforderlich, werden sie erstellt und hinzugefügt. Sind weniger untergeordnete Elemente erforderlich, werden die überzähligen Elemente entfernt und vom Garbagekollektor aus dem Speicher bereinigt.</p>
     
      <p>Ist der Wert hierfür <codeph>false</codeph>, entfernt dieser Repeater, wenn sich sein <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph> oder <codeph>count</codeph> ändert, alle zuvor erstellten untergeordneten Elemente und erstellt ausgehend von den neuen Datenelementen neue untergeordnete Elemente und fügt diese hinzu.</p>
     
      <p>Diese Eigenschaft hat den Standardwert <codeph>false</codeph>. Die Einstellung <codeph>true</codeph> führt dazu, dass die Leistung steigt, ist jedoch nicht immer empfehlenswert. Beispiel: Wenn die zuvor erstellten untergeordneten Elemente Statusinformationen wie durch einen Benutzer eingegebenen Text enthalten, wird dieser Status bei Wiederverwendung der untergeordneten Elemente nicht zurückgesetzt.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
      Die Indexposition im dataProvider, an der dieser Repeater mit der Erstellung von untergeordneten Elementen beginnt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition im <codeph>dataProvider</codeph>, an der dieser Repeater mit der Erstellung von untergeordneten Elementen beginnt.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:LayoutDirection"><apiName>LayoutDirection</apiName><shortdesc>
      Die LayoutDirection-Klasse definiert die Konstantenwerte des layoutDirection-Stils eines IStyleClient und die layoutDirection-Eigenschaft eines ILayoutDirectionElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Die LayoutDirection-Klasse definiert die Konstantenwerte des <codeph>layoutDirection</codeph>-Stils eines IStyleClient und die <codeph>layoutDirection</codeph>-Eigenschaft eines ILayoutDirectionElement. Die layoutDirection von links nach rechts wird gewöhnlich für lateinische Schriften verwendet. Die layoutDirection von rechts nach links wird für Schriften wie Arabisch und Hebräisch verwendet. Um die layoutDirection des Vorgängers zu vererben, legen Sie bei einem IStyleClient den layoutDirection-Stil als undefiniert fest. Um die layoutDirection des Vorgängers zu vererben, legen Sie bei einem ILayoutDirectionElement die layoutDirection-Eigenschaft als null fest.
     
      </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#IStyleClient"><linktext>mx.styles.IStyleClient</linktext></link><link href="mx.core.xml#ILayoutDirectionElement"><linktext>mx.core.ILayoutDirectionElement</linktext></link></related-links><apiValue id="mx.core:LayoutDirection:LTR"><apiName>LTR</apiName><shortdesc>
          Legt für einen Stilclient oder ein visuelles Element die Layoutrichtung von links nach rechts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Legt für einen Stilclient oder ein visuelles Element die Layoutrichtung von links nach rechts fest.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutDirection:RTL"><apiName>RTL</apiName><shortdesc>
          Legt für einen Stilclient oder ein visuelles Element die Layoutrichtung von rechts nach links fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Legt für einen Stilclient oder ein visuelles Element die Layoutrichtung von rechts nach links fest.
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRectangularBorder"><apiName>IRectangularBorder</apiName><shortdesc>
  Die IRectangularBorder-Schnittstelle definiert die Schnittstelle, die alle für rechteckige Rahmenskins verwendete Klassen implementieren sollten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IRectangularBorder-Schnittstelle definiert die Schnittstelle, die alle für rechteckige Rahmenskins verwendete Klassen implementieren sollten.
 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:layoutBackgroundImage"><apiName>layoutBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:backgroundImageBounds:get"><apiName>backgroundImageBounds</apiName><shortdesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:hasBackgroundImage:get"><apiName>hasBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
  Die MXMLObjectAdapter-Klasse ist eine Stub-Implementierung der IMXMLObject-Schnittstelle, sodass Sie die Schnittstelle ohne Definition aller Methoden implementieren können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die MXMLObjectAdapter-Klasse ist eine Stub-Implementierung der IMXMLObject-Schnittstelle, sodass Sie die Schnittstelle ohne Definition aller Methoden implementieren können. Alle Implementierungen sind die Entsprechung von Leerbefehlen. Soll die Methode einen Wert zurückgeben, ist dieser „null“, „0“ oder „false“.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MXMLObjectAdapter:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MXMLObjectAdapter:initialized"><apiName>initialized</apiName><shortdesc>
      
      Wird aufgerufen, nachdem das Implementierungsobjekt erstellt und sämtliche im MXML-Tag angegebenen Komponenteneigenschaften initialisiert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Das MXML-Dokument, das dieses Objekt erstellt hat.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Der von <codeph>document</codeph> für den Verweis auf dieses Objekt verwendete Bezeichner. Wenn das Objekt eine verschachtelte Eigenschaft in <codeph>document</codeph> ist, ist <codeph> id</codeph> „ null“.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wird aufgerufen, nachdem das Implementierungsobjekt erstellt und sämtliche im MXML-Tag angegebenen Komponenteneigenschaften initialisiert wurden.
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IFlexModule"><apiName>IFlexModule</apiName><shortdesc>
  Die IFlexModule-Schnittstelle wird als optionaler Vertrag mit IFlexModuleFactory verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFlexModule-Schnittstelle wird als optionaler Vertrag mit IFlexModuleFactory verwendet. Beim Erstellen einer IFlexModule-Instanz mit der IFlexModuleFactory speichert die Factory nach der Erstellung einen Verweis auf sich selbst.
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
      Die DesignLayer-Klasse stellt eine Sichtbarkeitsgruppe dar, die zur Laufzeit mit einer bzw. mehreren IVisualElement-Instanzen verknüpft werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      Die DesignLayer-Klasse stellt eine Sichtbarkeitsgruppe dar, die zur Laufzeit mit einer bzw. mehreren IVisualElement-Instanzen verknüpft werden kann. DesignLayer-Instanzen unterstützen eine <codeph>visible</codeph>- und Alpha-Eigenschaft, die an die verknüpften untergeordneten Ebenen weiterpropagiert wird, falls sie festgelegt wurde.
     
      </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:DesignLayer_mx.events.PropertyChangeEvent_layerPropertyChange"><apiName>layerPropertyChange</apiName><shortdesc>
      Von der Ebene ausgelöst, wenn sich effectiveVisibility oder effectiveAlpha ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.PropertyChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Von der Ebene ausgelöst, wenn sich <codeph>effectiveVisibility</codeph> oder <codeph>effectiveAlpha</codeph> ändert.
      
      </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:DesignLayer:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
          Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Konstruktor.
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DesignLayer:addLayer"><apiName>addLayer</apiName><shortdesc>
          Fügt dieser Ebene ein untergeordnetes DesignLayer-Objekt hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>Die hinzuzufügende untergeordnete Ebene.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Fügt dieser Ebene ein untergeordnetes DesignLayer-Objekt hinzu.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:getLayerAt"><apiName>getLayerAt</apiName><shortdesc>
          Gibt das untergeordnete DesignLayer-Objekt an der festgelegten Indexposition zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der angegebene untergeordnete DesignLayer, wenn die Indexposition zwischen 0 und <codeph>numLayers</codeph> - 1 liegt. Gibt <codeph>null</codeph> zurück, wenn die Indexposition ungültig ist.
         
          </apiDesc><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition eines untergeordneten DesignLayer.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Gibt das untergeordnete DesignLayer-Objekt an der festgelegten Indexposition zurück.
         
          <p>Die Reihenfolge der untergeordneten DesignLayer hat keine Auswirkungen. Die <codeph>getLayerAt</codeph>-Methode dient in Verbindung mit numLayers zum Durchlaufen der Child-Liste.</p> 
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.numLayers.xml"><linktext>numLayers</linktext></link></related-links></apiOperation><apiOperation id="mx.core:DesignLayer:initialized"><apiName>initialized</apiName><shortdesc>
          
      Wird aufgerufen, nachdem das Implementierungsobjekt erstellt und sämtliche im MXML-Tag angegebenen Komponenteneigenschaften initialisiert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Das MXML-Dokument, das dieses Objekt erstellt hat.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Der von <codeph>document</codeph> für den Verweis auf dieses Objekt verwendete Bezeichner. Wenn das Objekt eine verschachtelte Eigenschaft in <codeph>document</codeph> ist, ist <codeph> id</codeph> „ null“.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Wird aufgerufen, nachdem das Implementierungsobjekt erstellt und sämtliche im MXML-Tag angegebenen Komponenteneigenschaften initialisiert wurden.
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:removeLayer"><apiName>removeLayer</apiName><shortdesc>
          Entfernt ein untergeordnetes DesignLayer-Objekt aus dieser Ebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>Die zu entfernende untergeordnete Ebene.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Entfernt ein untergeordnetes DesignLayer-Objekt aus dieser Ebene.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DesignLayer:alpha:get"><apiName>alpha</apiName><shortdesc>
          Alpha dieser Entwurfsebeneninstanz, zwischen 0,0 und 1,0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Alpha dieser Entwurfsebeneninstanz, zwischen 0,0 und 1,0.
         
          <p>Bei einer Aktualisierung wird das entsprechende Change-Ereignis für <codeph>effectiveAlpha</codeph> an alle <codeph>layerPropertyChange</codeph>-Listener dieser Ebene sowie an die ggf. betroffenen untergeordneten Ebenen gesendet.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveAlpha:get"><apiName>effectiveAlpha</apiName><shortdesc>
          Eigenschaft, die das effektive Alpha dieser Entwurfsebene zurückgibt (zwischen 0,0 und 1,0).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Eigenschaft, die das effektive Alpha dieser Entwurfsebene zurückgibt (zwischen 0,0 und 1,0). Dieser Wert multipliziert das Alpha dieser Ebene mit dem Alpha der Vorgängerebenen.  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveVisibility:get"><apiName>effectiveVisibility</apiName><shortdesc>
          Gibt die effektive Sichtbarkeit dieser Entwurfsebene zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Gibt die effektive Sichtbarkeit dieser Entwurfsebene zurück. Dieser Wert berücksichtigt die Sichtbarkeit dieser Ebene und der Vorgängerebenen.  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:id:get"><apiName>id</apiName><shortdesc>
          ID der Ebenenkomponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          ID der Ebenenkomponente. Dieser Wert wird der Instanzname des Objekts. Daher sollte er keine Leerzeichen oder Sonderzeichen enthalten. 
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:numLayers:get"><apiName>numLayers</apiName><shortdesc>
          Die Anzahl der dieser Ebene direkt untergeordneten DesignLayer-Objekte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Die Anzahl der dieser Ebene direkt untergeordneten DesignLayer-Objekte.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:parent:get"><apiName>parent</apiName><shortdesc>
          Die dieser Ebene übergeordnete Ebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Die dieser Ebene übergeordnete Ebene. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:visible:get"><apiName>visible</apiName><shortdesc>
          Die Sichtbarkeit dieser Entwurfsebeneninstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Die Sichtbarkeit dieser Entwurfsebeneninstanz.
         
          <p>Bei einer Aktualisierung wird das entsprechende Change-Ereignis für <codeph>effectiveVisibility</codeph> an alle <codeph>layerPropertyChange</codeph>-Listener dieser Ebene sowie an die ggf. betroffenen untergeordneten Ebenen gesendet.</p>
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexAsset"><apiName>IFlexAsset</apiName><shortdesc>
  IFlexAsset ist eine Markierungsschnittstelle mit folgender Bedeutung: Wenn eine Klasse die Implementierung von IFlexAsset deklariert, dann stellt diese Klasse ein Element oder Asset (beispielsweise eine Bitmap, eine Schriftart oder einen Sound) dar, die in eine Flex-Anwendung eingebettet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexAsset ist eine Markierungsschnittstelle mit folgender Bedeutung: Wenn eine Klasse die Implementierung von IFlexAsset deklariert, dann stellt diese Klasse ein Element oder Asset (beispielsweise eine Bitmap, eine Schriftart oder einen Sound) dar, die in eine Flex-Anwendung eingebettet wurde. Die Schnittstelle definiert keine Eigenschaften oder Methoden, die die Klasse implementieren muss.
 
  <p>Der Player verwendet ActionScript-Klassen, um eingebettete Elemente und ausführbaren ActionScript-Code darzustellen. Wenn Sie ein Element in eine Flex-Anwendung einbetten, generiert der MXML-Compiler automatisch eine Klasse, um sie darzustellen. Solche Klassen deklarieren, dass sie IFlexAsset implementieren, damit sie von Codeklassen unterschieden werden können.</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IBorder"><apiName>IBorder</apiName><shortdesc>
  Die IBorder-Schnittstelle definiert die Schnittstelle, die alle für Rahmenskins verwendete Klassen implementieren sollten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IBorder-Schnittstelle definiert die Schnittstelle, die alle für Rahmenskins verwendete Klassen implementieren sollten.
 
  <p>Es liegt kein Fehler vor, wenn die Rahmenskin die IBorder-Schnittstelle nicht implementiert. In diesem Fall kann jedoch der Container, der diese Skin verwendet, die Rahmenmetriken des Rahmens nicht bestimmen. Aus diesem Grund werden Inhalte im Container beginnend von der oberen linken Kante (gegebenenfalls unter Berücksichtigung der Auffüllung) platziert. Bei der HaloBorder-Klasse bestimmt der <codeph>borderThickness</codeph>-Stil normalerweise den Wert des <codeph>borderMetrics</codeph>-Stils. Für grafische Skinklassen untersucht Flex die <codeph>scale9Grid</codeph>-Eigenschaft, um den Wert des <codeph>borderMetrics</codeph>-Stils zu bestimmen.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IBorder:mx.core:IBorder:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Gibt ein EdgeMetrics-Objekt für den Rahmen zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Gibt ein EdgeMetrics-Objekt für den Rahmen zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert der Eigenschaften entspricht der Rahmenstärke an einer Seite des Rahmens in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IAssetLayoutFeatures"><apiName>IAssetLayoutFeatures</apiName><shortdesc>
  Die IAssetLayoutFeatures-Schnittstelle definiert, welche Eigenschaften und Methoden mindestens erforderlich sind, damit ein Objekt erweiterte Transformationen in eingebetteten Elementen unterstützen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IAssetLayoutFeatures-Schnittstelle definiert, welche Eigenschaften und Methoden mindestens erforderlich sind, damit ein Objekt erweiterte Transformationen in eingebetteten Elementen unterstützen kann.
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.AdvancedLayoutFeatures.xml"><linktext>mx.core.AdvancedLayoutFeatures</linktext></link></related-links><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix3D:get"><apiName>computedMatrix3D</apiName><shortdesc>
      Die durch Kombination der 3D-Layoutmatrix und gegebenenfalls bereitgestellter Offsets berechnete 3D-Matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Die durch Kombination der 3D-Layoutmatrix und gegebenenfalls bereitgestellter Offsets berechnete 3D-Matrix.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix:get"><apiName>computedMatrix</apiName><shortdesc>
      Die durch Kombination der Layoutmatrix und gegebenenfalls bereitgestellter Offsets berechnete Matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      Die durch Kombination der Layoutmatrix und gegebenenfalls bereitgestellter Offsets berechnete Matrix.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:is3D:get"><apiName>is3D</apiName><shortdesc>
      „true“, wenn die berechnete Transformation 3D-Werte hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      „true“, wenn die berechnete Transformation 3D-Werte hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutIs3D:get"><apiName>layoutIs3D</apiName><shortdesc>
      „true“, wenn die Layouttransformation 3D-Werte hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      „true“, wenn die Layouttransformation 3D-Werte hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutWidth:get"><apiName>layoutWidth</apiName><shortdesc>
      Von der spiegelnden Transformation verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Von der spiegelnden Transformation verwendet. Siehe mirror-Eigenschaft.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:mirror:get"><apiName>mirror</apiName><shortdesc>
      Wenn „true“, wird die x-Achse um -1 skaliert und die x-Koordinate des Ursprungs wird um die Komponentenbreite verschoben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn „true“, wird die x-Achse um -1 skaliert und die x-Koordinate des Ursprungs wird um die Komponentenbreite verschoben. Der Nettoeffekt dieser „Spiegeltransformation“ ist eine Spiegelung der Richtung, in welcher die x-Achse verlängert wird, ohne dass die Position des Layoutelements relativ zum Ursprung des übergeordneten Elements verändert wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchX:get"><apiName>stretchX</apiName><shortdesc>
      Die stretchY-Komponente ist die horizontale Komponente des Skalierungsfaktors für die Dehnung, welcher vor jeder anderen Transformationseigenschaft angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die stretchY-Komponente ist die horizontale Komponente des Skalierungsfaktors für die Dehnung, welcher vor jeder anderen Transformationseigenschaft angewendet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchY:get"><apiName>stretchY</apiName><shortdesc>
      Die stretchY-Komponente ist die vertikale Komponente des Skalierungsfaktors für die Dehnung, welcher vor jeder anderen Transformationseigenschaft angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die stretchY-Komponente ist die vertikale Komponente des Skalierungsfaktors für die Dehnung, welcher vor jeder anderen Transformationseigenschaft angewendet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      Die bei Layoutberechnungen zum Bestimmen von Layout und Größe der Komponente sowie der über- und nebengeordneten Elemente verwendete 3D-Matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Die bei Layoutberechnungen zum Bestimmen von Layout und Größe der Komponente sowie der über- und nebengeordneten Elemente verwendete 3D-Matrix.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix:set"><apiName>layoutMatrix</apiName><shortdesc>
      Die bei Layoutberechnungen zum Bestimmen von Layout und Größe der Komponente sowie der über- und nebengeordneten Elemente verwendete 2D-Matrix.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      Die bei Layoutberechnungen zum Bestimmen von Layout und Größe der Komponente sowie der über- und nebengeordneten Elemente verwendete 2D-Matrix.
      
       </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationX:set"><apiName>layoutRotationX</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert die Rotation um die x-Achse der Layoutmatrix, die im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationY:set"><apiName>layoutRotationY</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert die Rotation um die y-Achse der Layoutmatrix, die im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationZ:set"><apiName>layoutRotationZ</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert die Rotation um die z-Achse der Layoutmatrix, die im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleX:set"><apiName>layoutScaleX</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert die Skalierung entlang der x-Achse der Layoutmatrix, die im Layout und in der berechneten Transformation verwendet wird.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleY:set"><apiName>layoutScaleY</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert die Skalierung entlang der y-Achse der Layoutmatrix, die im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleZ:set"><apiName>layoutScaleZ</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert die Skalierung entlang der z-Achse der Layoutmatrix, die im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutX:set"><apiName>layoutX</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert den x-Wert der Layoutmatrix, der im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutY:set"><apiName>layoutY</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert den y-Wert der Layoutmatrix, der im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutZ:set"><apiName>layoutZ</apiName><shortdesc>
      Layouteigenschaft zur Vereinfachung der Transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Layouteigenschaft zur Vereinfachung der Transformation. Repräsentiert den z-Wert der Layoutmatrix, der im Layout und in der berechneten Transformation verwendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformX:set"><apiName>transformX</apiName><shortdesc>
      Der x-Wert des Punkts, um den Drehungen und Skalierungen sowohl im Layout als auch in der berechneten Matrix ausgeführt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der x-Wert des Punkts, um den Drehungen und Skalierungen sowohl im Layout als auch in der berechneten Matrix ausgeführt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformY:set"><apiName>transformY</apiName><shortdesc>
      Der y-Wert des Punkts, um den Drehungen und Skalierungen sowohl im Layout als auch in der berechneten Matrix ausgeführt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der y-Wert des Punkts, um den Drehungen und Skalierungen sowohl im Layout als auch in der berechneten Matrix ausgeführt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformZ:set"><apiName>transformZ</apiName><shortdesc>
      Der z-Wert des Punkts, um den Drehungen und Skalierungen sowohl im Layout als auch in der berechneten Matrix ausgeführt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Der z-Wert des Punkts, um den Drehungen und Skalierungen sowohl im Layout als auch in der berechneten Matrix ausgeführt werden.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DPIClassification"><apiName>DPIClassification</apiName><shortdesc>
  Eine Aufzählung von Gerätebildschirmdichteklassen</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine Aufzählung von Gerätebildschirmdichteklassen Bei der Arbeit mit DPI fasst Flex ähnliche DPI-Werte in DPI-Klassen zusammen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.xml#Application/applicationDPI"><linktext>spark.components.Application.applicationDPI</linktext></link><link href="" invalidHref="spark.components.xml#Application/runtimeDPI"><linktext>spark.components.Application.runtimeDPI</linktext></link></related-links><apiValue id="mx.core:DPIClassification:DPI_160"><apiName>DPI_160</apiName><shortdesc>
      Dichtewert für Geräte mit niedriger Dichte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Dichtewert für Geräte mit niedriger Dichte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DPIClassification:DPI_240"><apiName>DPI_240</apiName><shortdesc>
      Dichtewert für Geräte mit mittlerer Dichte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>240</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Dichtewert für Geräte mit mittlerer Dichte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DPIClassification:DPI_320"><apiName>DPI_320</apiName><shortdesc>
      Dichtewert für Geräte mit hoher Dichte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>320</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Dichtewert für Geräte mit hoher Dichte.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponent"><apiName>UIComponent</apiName><shortdesc>
  Die UIComponent-Klasse ist die Basisklasse für alle sichtbaren interaktiven und nicht interaktiven Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="layoutDirection"/><effects><effect event="removed" name="removedEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente aus einem Container entfernt wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="added" name="addedEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente einem Container als untergeordnetes Element hinzugefügt wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusOut" name="focusOutEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente aus dem Tastaturfokus genommen wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusIn" name="focusInEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente den Tastaturfokus erhält.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOut" name="rollOutEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn der Benutzer die Maus bewegt, sodass sich der Mauszeiger nicht mehr auf der Komponente befindet.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOver" name="rollOverEffect" owner="mx.core:UIComponent">
<description>
  Wird bei Rollover der Komponente abgespielt.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseUp" name="mouseUpEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn der Benutzer die Maustaste loslässt, während der Mauszeiger sich auf der Komponente befindet.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseDown" name="mouseDownEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn der Benutzer die Maustaste drückt, während der Mauszeiger sich auf der Komponente befindet.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hide" name="hideEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente nicht sichtbar wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="show" name="showEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente sichtbar wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resize" name="resizeEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Größe der Komponente geändert wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="move" name="moveEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente verschoben wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="creationComplete" name="creationCompleteEffect" owner="mx.core:UIComponent">
<description>
  Wird abgespielt, wenn die Komponente erstellt wird.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Color" inherit="yes" name="themeColor" owner="mx.core:UIComponent" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Die Themenfarbe einer Komponente. Diese Eigenschaft steuert die Anzeige von Hervorhebungen (z. B. bei Auswahl einer Komponente) und ähnliche visuelle Hinweise, wirkt sich jedoch nicht auf reguläre Rahmenlinien oder Hintergrundfarben der Komponente aus. Die bevorzugten Werte sind <codeph>haloGreen</codeph>, <codeph>haloBlue</codeph>, <codeph>haloOrange</codeph> und <codeph>haloSilver</codeph>. Es kann jedoch jeder beliebige gültige Farbwert verwendet werden.
   <p>Die Standardwerte der Stile <codeph>rollOverColor</codeph> und <codeph>selectionColor</codeph> basieren auf dem <codeph>themeColor</codeph>-Wert.</p>
   </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="showErrorTip" owner="mx.core:UIComponent" playerVersion="Flash10" type="Boolean">
<description>
  Zeigt die Fehlerinfo, wenn diese Komponente ungültig ist und der Benutzer den Mauszeiger darüber bewegt. 
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="showErrorSkin" owner="mx.core:UIComponent" playerVersion="Flash10" type="Boolean">
<description>
  Zeigt den Fehlerrahmen oder die Fehlerskin, wenn diese Komponente ungültig ist. 
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl" inherit="yes" name="layoutDirection" owner="mx.core:UIComponent" playerVersion="Flash10" type="String">
<description>
  Legt die gewünschte Layoutrichtung einer Komponente fest. Die zulässigen Werte sind <codeph>"ltr"</codeph> für von links nach rechts verlaufende Layouts, die für Komponenten mit lateinischen Schriften verwendet werden, und <codeph>"rtl"</codeph> für von rechts nach links verlaufende Layouts, die für Komponenten mit Schriften wie Arabisch und Hebräisch verwendet werden.
 
  <p>In ActionScript legen Sie die layoutDirection über die Werte <codeph>mx.core.LayoutDirection.LTR</codeph> oder <codeph>mx.core.LayoutDirection.RTL</codeph> fest. Mit <codeph>undefined</codeph> vererben Sie die layoutDirection des übergeordneten Elements.</p>
 
  <p>In der Regel ist die layoutDirection für die <codeph>Anwendung</codeph> und nicht für einzelne Komponenten festzulegen. Wenn die layoutDirection <codeph>"rtl"</codeph> lautet, werden die meisten visuellen Elemente, mit Ausnahme von Text und Bildern, gespiegelt. Die Leserichtung des Texts wird durch den <codeph>direction</codeph>-Stil bestimmt.</p>
 
  <p>Komponenten, die Keyboard.LEFT- und Keyboard.RIGHT-Ereignisse verarbeiten, tauschen im Allgemeinen bei layoutDirection <codeph>“rtl”</codeph> die Bedeutung der Tasten aus. Anders ausgedrückt: Unabhängig von der <codeph>layoutDirection</codeph> bedeutet „left“ immer „nach links“ und „right“ immer „nach rechts“.</p>
 
  <p>Hinweis: Dieser Stil gilt für alle Spark-Komponenten und MX-Komponenten, die UIFTETextField als ihre textFieldClass angeben.</p> 
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>mx.core.ILayoutDirectionElement
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.1
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="MXFTEText.css.xml"><linktext>MXFTEText.css</linktext></link><link href="mx.core.xml#ILayoutDirectionElement"><linktext>mx.core.ILayoutDirectionElement</linktext></link><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links></style><style format="Length" inherit="no" name="focusThickness" owner="mx.core:UIComponent" playerVersion="Flash9" type="Number">
<description>
  In Pixeln angegebene Stärke des Fokusrechteckrands.
   </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusSkin" owner="mx.core:UIComponent" playerVersion="Flash9" type="Class">
<description>
  Skin für das Ziehen des Fokusrechtecks. Der Standardwert für Halo-Komponenten ist mx.skins.halo.HaloFocusRect. Der Standardwert für Spark-Komponenten ist spark.skins.spark.FocusSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusBlendMode" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Vom Fokusrechteck verwendete Füllmethode. Weitere Informationen finden Sie bei der <codeph>blendMode</codeph>-Eigenschaft der flash.display.DisplayObject-Klasse.
   </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="mouse,touch" inherit="yes" name="interactionMode" owner="mx.core:UIComponent" playerVersion="Flash10" type="String">
<description>
  Der primäre Interaktionsmodus für diese Komponente. Die zulässigen Werte sind: <codeph>mouse</codeph> und <codeph>touch</codeph>. Der Standardwert für das Halo-Design ist <codeph>mouse</codeph>. Der Standardwert für das Spark-Design ist <codeph>mouse</codeph>. Der Standardwert für das Mobile-Design ist <codeph>touch</codeph>.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

<see>mx.core.InteractionMode#TOUCH
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="mx.core.xml#InteractionMode/MOUSE"><linktext>mx.core.InteractionMode.MOUSE</linktext></link><link href="mx.core.xml#InteractionMode/TOUCH"><linktext>mx.core.InteractionMode.TOUCH</linktext></link></related-links></style><style format="Color" inherit="yes" name="errorColor" owner="mx.core:UIComponent" playerVersion="Flash9" type="uint">
<description>
  Farbe der Komponentenhervorhebung, wenn die Überprüfung fehlschlägt. Flex stellt bei Fehlschlagen der Überprüfung auch den <codeph>borderColor</codeph>-Stil der Komponente auf diese <codeph>errorColor</codeph> ein. Der Standardwert für das Halo-Design ist <codeph>0xFF0000</codeph>. Der Standardwert für das Spark-Design ist <codeph>0xFE0000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:UIComponent" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Die Hauptfarbe für eine Komponente.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der vertikale Abstand (in Pixeln) zwischen dem Mittelpunkt des Inhaltsbereichs der Komponente und dem Mittelpunkt der Komponente. Ist dieser Stil festgelegt, wird der Mittelpunkt der Komponente am Mittelpunkt des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der vertikale Abstand der beiden Mittelpunkte erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="top" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der vertikale Abstand (in Pixeln) zwischen dem oberen Rand der Komponente und dem oberen Rand des Inhaltsbereichs ihres übergeordneten Containers. Ist dieser Stil festgelegt, wird der obere Rand der Komponente am oberen Rand des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der Abstand der beiden Ränder erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="right" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der horizontale Abstand (in Pixeln) zwischen dem rechten Rand der Komponente und dem rechten Rand des Inhaltsbereichs ihres übergeordneten Containers. Ist dieser Stil festgelegt, wird der rechte Rand der Komponente am rechten Rand des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der Abstand der beiden Ränder erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="left" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der horizontale Abstand (in Pixeln) zwischen dem linken Rand der Komponente und dem linken Rand des Inhaltsbereichs ihres übergeordneten Containers. Ist dieser Stil festgelegt, wird der linke Rand der Komponente am linken Rand des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der Abstand der beiden Ränder erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der horizontale Abstand (in Pixeln) zwischen dem Mittelpunkt des Inhaltsbereichs der Komponente und dem Mittelpunkt der Komponente. Ist dieser Stil festgelegt, wird der Mittelpunkt der Komponente am Mittelpunkt des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der horizontale Abstand der beiden Mittelpunkte erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="bottom" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der vertikale Abstand (in Pixeln) zwischen dem unteren Rand der Komponente und dem unteren Rand des Inhaltsbereichs ihres übergeordneten Containers. Ist dieser Stil festgelegt, wird der untere Rand der Komponente am unteren Rand des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der Abstand der beiden Ränder erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="baseline" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Der vertikale Abstand (in Pixel) zwischen dem oberen Rand des Inhaltsbereichs und der Grundlinienposition des Steuerelements. Ist dieser Stil festgelegt, wird die Grundlinie der Komponente am oberen Rand des Inhaltsbereichs verankert. Wird die Größe des Containers geändert, bleibt der Abstand der beiden Ränder erhalten.
 
  <p>Dieser Stil wirkt sich nur dann aus, wenn er auf eine Komponente in einem Arbeitsflächen-, Bedienfeld- oder Anwendungscontainer angewendet wird, dessen <codeph>layout</codeph>-Eigenschaft auf <codeph>absolute</codeph> gesetzt wurde.</p> 
 
  <p>Der Standardwert ist <codeph>undefined</codeph>, das heißt, dass er nicht festgelegt ist.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>All user interface components in Flex extend the UIComponent class.
  Flex components inherit the following properties from the UIComponent
  class:</p>
   <pre>
  &lt;mx:<i>tagname</i>
   <b>Properties </b>
    accessibilityDescription="null"
    accessibilityName="null"
    accessibilityShortcut="null"
    accessibilitySilent="true|false"
    automationName="null"
    cachePolicy="auto|on|off"
    currentState="null"
    doubleClickEnabled="false|true"
    enabled="true|false"
    explicitHeight="NaN"
    explicitMaxHeight="NaN"
    explicitMaxWidth="NaN"
    explicitMinHeight="NaN"
    explicitMinWidth="NaN"
    explicitWidth="NaN"
    focusEnabled="true|false"
    hasFocusableChildren="false|true"
    height="0"
    id=""
    includeInLayout="true|false"
    maxHeight="10000"
    maxWidth="10000"
    measuredHeight=
    measuredMinHeight=
    measuredMinWidth=
    measuredWidth=
    minHeight="0"
    minWidth="0"
    mouseFocusEnabled="true|false"
    percentHeight="NaN"
    percentWidth="NaN"
    scaleX="1.0"
    scaleY="1.0"
    states="null"
    styleName="undefined"
    toolTip="null"
    transitions=""
    validationSubField
    width="0"
    x="0"
    y="0"
   <b>Styles</b>
    bottom="undefined"
    errorColor="0xFF0000"
    focusBlendMode="normal"
    focusSkin="HaloFocusRect""
    focusThickness="2"
    horizontalCenter="undefined"
    layoutDirection="ltr"
    left="undefined"
    right="undefined"
    themeColor="haloGreen"
    top="undefined"
    verticalCenter="undefined"
   <b>Effects</b>
    addedEffect="<i>No default</i>"
    creationCompleteEffect="<i>No default</i>"
    focusInEffect="<i>No default</i>"
    focusOutEffect="<i>No default</i>"
    hideEffect="<i>No default</i>"
    mouseDownEffect="<i>No default</i>"
    mouseUpEffect="<i>No default</i>"
    moveEffect="<i>No default</i>"
    removedEffect="<i>No default</i>"
    resizeEffect="<i>No default</i>"
    rollOutEffect="<i>No default</i>"
    rollOverEffect="<i>No default</i>"
    showEffect="<i>No default</i>"
   <b>Events</b>
    add="<i>No default</i>"
    creationComplete="<i>No default</i>"
    currentStateChange="<i>No default</i>"
    currentStateChanging="<i>No default</i>"
    dragComplete="<i>No default</i>"
    dragDrop="<i>No default</i>"
    dragEnter="<i>No default</i>"
    dragExit="<i>No default</i>"
    dragOver="<i>No default</i>"
    effectEnd="<i>No default</i>"
    effectStart="<i>No default</i>"
    enterState="<i>No default</i>"
    exitState="<i>No default</i>"
    hide="<i>No default</i>"
    initialize="<i>No default</i>"
    invalid="<i>No default</i>"
    mouseDownOutside="<i>No default</i>"
    mouseWheelOutside="<i>No default</i>"
    move="<i>No default</i>"
    preinitialize="<i>No default</i>"
    remove="<i>No default</i>"
    resize="<i>No default</i>"
    show="<i>No default</i>"
    toolTipCreate="<i>No default</i>"
    toolTipEnd="<i>No default</i>"
    toolTipHide="<i>No default</i>"
    toolTipShow="<i>No default</i>"
    toolTipShown="<i>No default</i>"
    toolTipStart="<i>No default</i>"
    updateComplete="<i>No default</i>"
    valid="<i>No default</i>"
    valueCommit="<i>No default</i>"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IConstraintClient</apiBaseInterface><apiBaseInterface>mx.core:IDeferredInstantiationUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseInterface>mx.core:IRepeaterClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseInterface>mx.styles:IAdvancedStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.validators:IValidatorListener</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die UIComponent-Klasse ist die Basisklasse für alle sichtbaren interaktiven und nicht interaktiven Komponenten.
   <p>Interaktive Komponenten können an der Navigation mit der Tabulatortaste und anderen Arten der Einstellung des Tastaturfokus beteiligt sein und einfache Ereignisse wie Tastatur- und Mauseingaben akzeptieren. Sie können aber auch deaktiviert werden, sodass Tastatur- und Mauseingaben für sie wirkungslos sind. Im Gegensatz hierzu stehen nicht interaktive Komponenten, wie etwa Label und ProgressBar, die Inhalte einfach nur anzeigen und nicht vom Benutzer manipuliert werden können.</p>
  <p>Die UIComponent-Klasse wird nicht als MXML-Tag, sondern als Basisklasse für andere Klassen verwendet.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_START_toolTipStart"><apiName>toolTipStart</apiName><shortdesc>
  Wird von einer Komponente ausgelöst, deren toolTip-Eigenschaft festgelegt ist, sobald der Benutzer die Maus darüber bewegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_START</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird von einer Komponente ausgelöst, deren <codeph>toolTip</codeph>-Eigenschaft festgelegt ist, sobald der Benutzer den Mauszeiger darüber bewegt.
   <p>ToolTip-Ereignisse werden in dieser Reihenfolge ausgelöst: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> und <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOWN_toolTipShown"><apiName>toolTipShown</apiName><shortdesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip eingeblendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOWN</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip eingeblendet wurde.
   <p>Wenn Sie einen Effekt mit der <codeph>ToolTipManager.showEffect</codeph>-Eigenschaft angeben, wird dieses Ereignis ausgelöst, sobald die Wiedergabe des Effekts angehalten wird.</p>
   <p>ToolTip-Ereignisse werden in dieser Reihenfolge ausgelöst: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> und <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOW_toolTipShow"><apiName>toolTipShow</apiName><shortdesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip eingeblendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOW</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip eingeblendet wird.
   <p>Wenn Sie einen Effekt mit der <codeph>ToolTipManager.showEffect</codeph>-Eigenschaft angeben, wird dieses Ereignis ausgelöst, bevor die Wiedergabe des Effekts beginnt. Mit diesem Ereignis können Sie den ToolTip vor der Anzeige ändern.</p>
   <p>ToolTip-Ereignisse werden in dieser Reihenfolge ausgelöst: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> und <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_HIDE_toolTipHide"><apiName>toolTipHide</apiName><shortdesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip ausgeblendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_HIDE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip ausgeblendet wird.
   <p>Wenn Sie einen Effekt mit der <codeph>ToolTipManager.hideEffect</codeph>-Eigenschaft angeben, wird dieses Ereignis ausgelöst, bevor die Wiedergabe des Effekts beginnt.</p>
   <p>ToolTip-Ereignisse werden in dieser Reihenfolge ausgelöst: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> und <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_END_toolTipEnd"><apiName>toolTipEnd</apiName><shortdesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip ausgeblendet wurde und demnächst verworfen werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_END</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch die Komponente ausgelöst, wenn deren ToolTip ausgeblendet wurde und demnächst verworfen werden soll.
   <p>Wenn Sie einen Effekt mit der <codeph>ToolTipManager.hideEffect</codeph>-Eigenschaft angeben, wird dieses Ereignis ausgelöst, sobald die Wiedergabe des Effekts angehalten wird.</p>
   <p>ToolTip-Ereignisse werden in dieser Reihenfolge ausgelöst: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> und <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_CREATE_toolTipCreate"><apiName>toolTipCreate</apiName><shortdesc>
  Wird durch die Komponente ausgelöst, wenn ein ToolTip erstellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_CREATE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch die Komponente ausgelöst, wenn ein ToolTip erstellt wird.
   <p>Wenn Sie ein eigenes IToolTip-Objekt erstellen und in der <codeph>toolTip</codeph>-Eigenschaft des Ereignisobjekts, das der <codeph>toolTipCreate</codeph>-Prozedur übergeben wird, darauf verweisen, zeigt der ToolTipManager den benutzerdefinierten ToolTip an. Andernfalls erstellt der ToolTipManager eine Instanz der anzuzeigenden <codeph>ToolTipManager.toolTipClass</codeph>.</p>
   <p>ToolTip-Ereignisse werden in dieser Reihenfolge ausgelöst: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> und <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_END_touchInteractionEnd"><apiName>touchInteractionEnd</apiName><shortdesc>
  Ein nicht abbrechbares Ereignis, das von einer Komponente nach der Reaktion auf eine Berührungsinteraktion des Benutzers ausgelöst wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_END</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Ein nicht abbrechbares Ereignis, das von einer Komponente nach der Reaktion auf eine Berührungsinteraktion des Benutzers ausgelöst wird.
 
  <p>Das Ereignis ist ein Bubbling-Ereignis, das für das DisplayObject ausgelöst wird, das die Berührungsinteraktion gestartet hat (wo mouseDown/touchBegin stattfand).</p>
 
  <p>Auf Berührungsinteraktionen reagierende Komponenten müssen auf Berührungsinteraktionsereignisse warten, um mit anderen Komponenten zu koordinieren, welcher Typ der Berührungsinteraktion vom Benutzer beabsichtigt wurde und welche Komponente auf diese Berührungsinteraktion reagiert.</p>
 
  <p>Eine Scroller-Komponente löst ein touchInteractionEnd-Ereignis aus, um anderen Komponenten zu signalisieren, dass sie auf die Berührungsinteraktion des Benutzers reagiert hat.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_START_touchInteractionStart"><apiName>touchInteractionStart</apiName><shortdesc>
  Ein nicht abbrechbares Ereignis, das von einer Komponente bei Reaktion auf eine Berührungsinteraktion des Benutzers ausgelöst wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_START</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Ein nicht abbrechbares Ereignis, das von einer Komponente bei Reaktion auf eine Berührungsinteraktion des Benutzers ausgelöst wird.
 
  <p>Das Ereignis ist ein Bubbling-Ereignis, das für das DisplayObject ausgelöst wird, das die Berührungsinteraktion gestartet hat (wo mouseDown/touchBegin stattfand).</p>
 
  <p>Auf Berührungsinteraktionen reagierende Komponenten müssen auf Berührungsinteraktionsereignisse warten, um mit anderen Komponenten zu koordinieren, welcher Typ der Berührungsinteraktion vom Benutzer beabsichtigt wurde und welche Komponente auf diese Berührungsinteraktion reagiert.</p>
 
  <p>Eine Scroller-Komponente löst ein touchInteractionStart-Ereignis aus, um anderen Komponenten, die möglicherweise auf dieselbe Berührungsinteraktion des Benutzers reagieren, zu signalisieren, dass sie diese Berührungsinteraktion steuert. Wenn andere Komponenten dieses Ereignis erkennen, müssen sie die Reaktion auf die Berührungsinteraktion abbrechen, visuelle Indikatoren, dass sie auf die Berührungsinteraktion reagieren, entfernen, und weitere Bereinigungsaktionen ausführen.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_STARTING_touchInteractionStarting"><apiName>touchInteractionStarting</apiName><shortdesc>
  Ein abbrechbares Ereignis, das von einer Komponente beim Versuch, auf eine Berührungsinteraktion des Benutzers zu reagieren, ausgelöst wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_STARTING</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Ein abbrechbares Ereignis, das von einer Komponente beim Versuch, auf eine Berührungsinteraktion des Benutzers zu reagieren, ausgelöst wird.
 
  <p>Das Ereignis ist ein Bubbling-Ereignis, das für das DisplayObject ausgelöst wird, das die Berührungsinteraktion gestartet hat (wo mouseDown/touchBegin stattfand).</p>
 
  <p>Auf Berührungsinteraktionen reagierende Komponenten müssen auf Berührungsinteraktionsereignisse warten, um mit anderen Komponenten zu koordinieren, welcher Typ der Berührungsinteraktion vom Benutzer beabsichtigt wurde und welche Komponente auf diese Berührungsinteraktion reagiert.</p>
 
  <p>Eine Scroller-Komponente löst ein touchInteractionStarting-Ereignis aus, um anderen Komponenten, die möglicherweise auf dieselbe Berührungsinteraktion des Benutzers reagieren, zu signalisieren, dass sie diese Berührungsinteraktion steuern möchte. Damit haben andere Komponenten die Möglichkeit, die Aktion des Scrollers abzubrechen und die Steuerung dieser Berührungsinteraktion zu übernehmen.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.STATE_CHANGE_INTERRUPTED_stateChangeInterrupted"><apiName>stateChangeInterrupted</apiName><shortdesc>
  Wird ausgelöst, wenn eine Komponente einen Übergang in ihren aktuellen Status unterbricht, um zu einem neuen Status zu wechseln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.STATE_CHANGE_INTERRUPTED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine Komponente einen Übergang in ihren aktuellen Status unterbricht, um zu einem neuen Status zu wechseln. 
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.STATE_CHANGE_COMPLETE_stateChangeComplete"><apiName>stateChangeComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem die Komponente einen neuen Status erhalten hat und die Animation des Statusübergangs abgeschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.STATE_CHANGE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Komponente einen neuen Status erhalten hat und die Animation des Statusübergangs abgeschlossen wurde. Das Ereignis wird sofort ausgelöst, wenn zwischen den Status kein Übergang wiedergegeben wird. Wenn die Komponente während des Übergangs in einen anderen Status wechselt, wird dieses Element ausgelöst, nachdem die Komponente den Übergang zu diesem neuen Status abgeschlossen hat.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.EXIT_STATE_exitState"><apiName>exitState</apiName><shortdesc>
  Wird ausgelöst, kurz bevor die Komponente einen Ansichtsstatus verlässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.EXIT_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, kurz bevor die Komponente einen Ansichtsstatus verlässt.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ENTER_STATE_enterState"><apiName>enterState</apiName><shortdesc>
  Wird ausgelöst, nachdem die Komponente einen Ansichtsstatus angenommen hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Komponente einen Ansichtsstatus angenommen hat.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGE_currentStateChange"><apiName>currentStateChange</apiName><shortdesc>
  Wird nach einer Änderung des Ansichtsstatus ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einer Änderung des Ansichtsstatus ausgelöst.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGING_currentStateChanging"><apiName>currentStateChanging</apiName><shortdesc>
  Wird nach einer Änderung der currentState-Eigenschaft jedoch vor der Änderung des Ansichtsstatus ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach einer Änderung der <codeph>currentState</codeph>-Eigenschaft jedoch vor der Änderung des Ansichtsstatus ausgelöst.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  Wird nach Abschluss eines Effekts ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach Abschluss eines Effekts ausgelöst.
   <p>Der Effekt führt die letzte Gruppe von visuellen Änderungen aus, bevor dieses Ereignis ausgelöst wird, aber die sich daraus ergebenden Änderungen sind auf dem Bildschirm nicht zu sehen. Das bedeutet, dass sie möglicherweise andere Änderungen mit der <codeph>callLater()</codeph>-Methode hinauszögern müssen, bis diese Änderungen ordnungsgemäß am Bildschirm gerendert worden sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  Wird ausgelöst, nachdem der Effekt beendet wurde. Dies tritt nur durch einen Aufruf der stop()-Methode für den Effekt ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem der Effekt beendet wurde. Dies tritt nur durch einen Aufruf der <codeph>stop()</codeph>-Methode für den Effekt ein.
   <p>Der Effekt löst dann bei seiner Beendigung das EFFECT_END-Ereignis aus. Der Zweck des EFFECT_STOP-Ereignisses besteht darin, Listenern zu melden, dass der Effekt nicht natürlich abgeschlossen, sondern durch einen Aufruf der <codeph>end()</codeph>-Methode vorzeitig beendet wurde.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  Wird unmittelbar vor dem Start eines Effekts ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird unmittelbar vor dem Start eines Effekts ausgelöst.
   <p>Der Effekt beginnt mit dem Ändern visueller Elemente erst, nachdem dieses Ereignis ausgelöst wurde.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_START_dragStart"><apiName>dragStart</apiName><shortdesc>
  Wird zu Beginn des Ziehvorgangs vom Ziehinitiator ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_START</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird zu Beginn des Ziehvorgangs vom Ziehinitiator ausgelöst. Dieses Ereignis wird intern von den listenbasierten Steuerelementen verwendet. Bei der Drag &amp; Drop-Implementierung findet es keine Anwendung. Wenn Sie den Start eines Drag &amp; Drop-Vorgangs steuern möchten, verwenden Sie das <codeph>mouseDown</codeph>- oder <codeph>mouseMove</codeph>-Ereignis.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_COMPLETE_dragComplete"><apiName>dragComplete</apiName><shortdesc>
  Wird durch den Ziehinitiator (Quelle der gezogenen Daten) ausgelöst, wenn der Ziehvorgang abgeschlossen wird, indem die gezogenen Daten auf einem Ziel abgelegt werden oder der Drag &amp; Drop-Vorgang ohne Ablegen beendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch den Ziehinitiator (Quelle der gezogenen Daten) ausgelöst, wenn der Ziehvorgang abgeschlossen wird, indem die gezogenen Daten auf einem Ziel abgelegt werden oder der Drag &amp; Drop-Vorgang ohne Ablegen beendet wird.
   <p>Mit diesem Ereignis können Sie eine letzte Bereinigung des Drag &amp; Drop-Vorgangs durchführen. Beispielsweise können Sie ein List-Steuerelement von einer Liste in eine andere ziehen und dann das List-Steuerelement in der Quelle löschen, wenn Sie es nicht mehr benötigen.</p>
   <p>Wenn Sie <codeph>Event.preventDefault()</codeph> in der Ereignisprozedur für das <codeph>dragComplete</codeph>-Ereignis eines Tree-Steuerelements beim Ziehen von Daten in ein anderes Tree-Steuerelement aufrufen, wird das Ablegen verhindert.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_DROP_dragDrop"><apiName>dragDrop</apiName><shortdesc>
  Wird vom Ablageziel ausgelöst, wenn der Benutzer die Maustaste darüber loslässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_DROP</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird vom Ablageziel ausgelöst, wenn der Benutzer die Maustaste darüber loslässt.
   <p>Sie verwenden diese Ereignisprozedur, um die gezogenen Daten dem Ablageziel hinzuzufügen.</p>
   <p>Wenn Sie <codeph>Event.preventDefault()</codeph> in der Ereignisprozedur für das <codeph>dragDrop</codeph>-Ereignis eines Tree-Steuerelements beim Ziehen von Daten von einem Tree-Steuerelement in ein anderes aufrufen, wird das Ablegen verhindert.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_EXIT_dragExit"><apiName>dragExit</apiName><shortdesc>
  Wird von der Komponente ausgelöst, wenn der Benutzer Daten aus der Komponente zieht, sie jedoch nicht an einem Ziel ablegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_EXIT</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird von der Komponente ausgelöst, wenn der Benutzer Daten aus der Komponente zieht, sie jedoch nicht an einem Ziel ablegt.
   <p>Mit diesem Ereignis stellen Sie die normale Darstellung des Ablageziels wieder her, wenn diese durch das <codeph>dragEnter</codeph>- oder <codeph>dragOver</codeph>-Ereignis geändert wurde.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_OVER_dragOver"><apiName>dragOver</apiName><shortdesc>
  Wird durch eine Komponente ausgelöst, wenn der Benutzer die Maus während des Ziehvorgangs über die Komponente bewegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_OVER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch eine Komponente ausgelöst, wenn der Benutzer den Mauszeiger während des Ziehvorgangs über die Komponente bewegt. In Flash Player wird das Ereignis ausgelöst, wenn Sie ein Element auf ein gültiges Ziel ziehen. In AIR wird das Ereignis ausgelöst, wenn Sie ein Element auf eine beliebige Komponente ziehen, selbst wenn diese Komponente kein gültiges Ablageziel ist.
   <p>In der Prozedur können Sie die Darstellung des Ablageziels ändern, um dem Benutzer eine visuelle Rückmeldung zu geben, dass diese Komponente ein gültiges Ablageziel darstellt. Beispielsweise können Sie einen Rahmen um das Ablageziel zeichnen oder dem Ablageziel den Fokus zuzuweisen.</p>
   <p>Konfigurieren Sie dieses Ereignis so, dass vor dem Ablegen eine zusätzliche Logik ausgeführt wird. Dabei kann es sich beispielsweise um das Ablegen von Daten am Ablageziel handeln, das Lesen von Tastatureingaben, um zu bestimmen, ob die gezogenen Daten verschoben oder kopiert werden, oder um verschiedene visuelle Rückmeldungen, die von der Art der Drag &amp; Drop-Aktion abhängen.</p>
   <p>Sie können außerdem die Art der Drag-Aktion durch Ändern der <codeph>DragManager.showFeedback()</codeph>-Methode ändern. Der Standardwert der <codeph>action</codeph>-Eigenschaft lautet <codeph>DragManager.MOVE</codeph>.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_ENTER_dragEnter"><apiName>dragEnter</apiName><shortdesc>
  Wird durch eine Komponente ausgelöst, wenn der Benutzer die Maus während des Ziehvorgangs darüber bewegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_ENTER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird durch eine Komponente ausgelöst, wenn der Benutzer den Mauszeiger während des Ziehvorgangs darüber bewegt. In einer in Flash Player ausgeführten Anwendung wird das Ereignis beim Bewegen des Mauszeigers über eine Komponente viele Male ausgelöst. In einer in AIR ausgeführten Anwendung wird das Ereignis nur einmal ausgelöst.
   <p>Damit dies ein gültiges Ablageziel darstellt, definieren Sie eine Prozedur für dieses Ereignis. In der Prozedur können Sie die Darstellung des Ablageziels ändern, um dem Benutzer eine visuelle Rückmeldung zu geben, dass diese Komponente ein gültiges Ablageziel darstellt. Beispielsweise können Sie einen Rahmen um das Ablageziel zeichnen oder dem Ablageziel den Fokus zuzuweisen.</p>
   <p>Um die gezogenen Daten zu akzeptieren, rufen Sie die <codeph>DragManager.acceptDragDrop()</codeph>-Methode auf. Wenn Sie <codeph>acceptDragDrop()</codeph> nicht aufrufen, wird keines der anderen Drag-Ereignisse abgerufen.</p>
   <p>In Flash Player ist der Wert der <codeph>action</codeph>-Eigenschaft immer <codeph>DragManager.MOVE</codeph>, auch beim Kopieren. Das liegt daran, dass das <codeph>dragEnter</codeph>-Ereignis auftritt, bevor das Steuerelement erkennt, dass die Strg-Taste zum Kopieren gedrückt wurde. Die <codeph>action</codeph>-Eigenschaft des Ereignisobjekts für das <codeph>dragOver</codeph>-Ereignis enthält einen Wert, der den Typ des Ziehvorgangs angibt. Sie können außerdem den Typ der Drag-Aktion durch Aufrufen der <codeph>DragManager.showFeedback()</codeph>-Methode ändern.</p>
   <p>In AIR ist der Standardwert der <codeph>action</codeph>-Eigenschaft <codeph>DragManager.COPY</codeph>.</p>
   <p>Durch die Art und Weise, wie Daten zu einem Tree-Steuerelement strukturiert sind, verarbeitet das Tree-Steuerelement Drag &amp; Drop anders als die anderen listenbasierten Steuerelemente. Für das Tree-Steuerelement führt die Ereignisprozedur für das <codeph>dragDrop</codeph>-Ereignis nur dann eine Aktion aus, wenn Sie Daten im selben Tree-Steuerelement verschieben oder kopieren oder Daten in ein anderes Tree-Steuerelement kopieren. Wenn Sie Daten aus einem Tree-Steuerelement ziehen und in einem anderen Tree-Steuerelement ablegen, um die Daten zu verschieben, führt die Ereignisprozedur für das <codeph>dragComplete</codeph>-Ereignis und nicht die Ereignisprozedur für das dragDrop-Ereignis die eigentliche Arbeit des Hinzufügens der Daten zum Ziel-Tree-Steuerelement und des Entfernens der Daten aus dem Quell-Tree-Steuerelement aus. Dies ist erforderlich, da Flex die Daten zuerst aus dem Quell-Tree-Steuerelement entfernen muss, um die verschobenen Daten anzeigen zu können.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Wird ausgelöst, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung erfolgreich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung erfolgreich ist.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc>
  Wird ausgelöst, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung fehlschlägt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Wird ausgelöst, wenn Werte programmgesteuert oder durch Benutzerinteraktion geändert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn Werte programmgesteuert oder durch Benutzerinteraktion geändert werden.
   <p>Da dieses Ereignis durch eine programmgesteuerte Änderung ausgelöst wird, müssen Sie sicherstellen, dass keine <codeph>valueCommit</codeph>-Ereignisprozedur einen Wert ändert, der zu einem weiteren <codeph>valueCommit</codeph>-Ereignis führt. Beispiel: Ändern Sie die <codeph>dataProvider</codeph>-Eigenschaft eines Steuerelements nicht in einer <codeph>valueCommit</codeph>-Ereignisprozedur. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE_mouseWheelOutside"><apiName>mouseWheelOutside</apiName><shortdesc>
  Wird von einer Komponente mithilfe des PopUpManagers ausgelöst, wenn der Benutzer das Mausrad außerhalb der Komponente dreht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird von einer Komponente mithilfe des PopUpManagers ausgelöst, wenn der Benutzer das Mausrad außerhalb der Komponente dreht.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE_mouseDownOutside"><apiName>mouseDownOutside</apiName><shortdesc>
  Wird von einer geöffneten Komponente mithilfe des PopUpManagers ausgelöst, wenn der Benutzer außerhalb der Komponente klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird von einer geöffneten Komponente mithilfe des PopUpManagers ausgelöst, wenn der Benutzer außerhalb der Komponente klickt.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  Wird ausgelöst, wenn sich der Status eines Objekts von unsichtbar in sichtbar ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der Status eines Objekts von unsichtbar in sichtbar ändert.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ResizeEvent.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  Wird ausgelöst, wenn die Größe der Komponente geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ResizeEvent.RESIZE</apiEventType><adobeApiEventClassifier>mx.events.ResizeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Größe der Komponente geändert wird.
   <p>Sie können die Größe einer Komponente ändern, indem Sie die <codeph>width</codeph>- oder <codeph>height</codeph>-Eigenschaft festlegen, die <codeph>setActualSize()</codeph>-Methode aufrufen oder eine der folgenden Eigenschaften dieser oder anderer Komponenten so ändern, dass der LayoutManager die <codeph>width</codeph>- oder <codeph>height</codeph>-Eigenschaft der Komponente modifizieren muss:</p>
   <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
   <p>Die <codeph>resize</codeph>-Eigenschaft wird erst ausgelöst, wenn sich die Eigenschaft ändert.</p>
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.REMOVE_remove"><apiName>remove</apiName><shortdesc>
  Wird ausgelöst, wenn die Komponente aus einem Container als untergeordnetes Inhaltselement mit der removeChild()-, removeChildAt()-, removeElement()- oder removeElementAt()-Methode entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REMOVE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Komponente aus einem Container als untergeordnetes Inhaltselement mit der <codeph>removeChild()</codeph>-, <codeph>removeChildAt()</codeph>-, <codeph>removeElement() </codeph>- oder <codeph>removeElementAt()</codeph>-Methode entfernt wird. Wird eine untergeordnete Komponente, die kein Inhaltselement ist, mit der <codeph>rawChildren.removeChild()</codeph>- oder <codeph>rawChildren.removeChildAt()</codeph>-Methode aus dem Container entfernt, wird das Ereignis nicht ausgelöst.
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.PREINITIALIZE_preinitialize"><apiName>preinitialize</apiName><shortdesc>
  Wird zu Beginn der Initialisierungssequenz der Komponente ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.PREINITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird zu Beginn der Initialisierungssequenz der Komponente ausgelöst. Die Komponente ist noch ziemlich unformatiert, wenn dieses Ereignis ausgelöst wird. Viele Komponenten, wie z. B. das Button-Steuerelement, erstellen intern untergeordnete Komponenten zur Implementierung von Funktionen. Das Button-Steuerelement erstellt beispielsweise eine interne UITextField-Komponente für den Beschriftungstext. Wenn Flex das <codeph>preinitialize</codeph>-Ereignis auslöst, wurden die untergeordneten Elemente (auch interne untergeordnete Elemente) einer Komponente noch nicht erstellt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.MoveEvent.MOVE_move"><apiName>move</apiName><shortdesc>
  Wird ausgelöst, wenn das Objekt verschoben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MoveEvent.MOVE</apiEventType><adobeApiEventClassifier>mx.events.MoveEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn das Objekt verschoben wurde.
   <p>Sie können die Komponente verschieben, indem Sie die <codeph>x</codeph>- oder <codeph>y</codeph>-Eigenschaften festlegen, die <codeph>move()</codeph>-Methode aufrufen oder eine der folgenden Eigenschaften für diese oder andere Komponenten wie den LayoutManager festlegen, durch die die <codeph>x</codeph>- oder <codeph>y</codeph>-Eigenschaften der Komponente geändert werden müssen:</p>
   <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
   <p>Wenn Sie die <codeph>move()</codeph>-Methode aufrufen, wird das <codeph>move</codeph>-Ereignis ausgelöst, bevor die Methode einen Wert zurückgibt. In allen anderen Situationen wird das <codeph>move</codeph>-Ereignis erst ausgelöst, nachdem sich die Eigenschaft geändert hat.</p>
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INITIALIZE_initialize"><apiName>initialize</apiName><shortdesc>
  Wird ausgelöst, wenn die Erstellung der Komponente abgeschlossen und alle Initialisierungseigenschaften festgelegt sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Erstellung der Komponente abgeschlossen und alle Initialisierungseigenschaften festgelegt sind.
   <p>Nach der Initialisierungsphase werden Eigenschaften verarbeitet, die Komponente wird gemessen und das Layout festgelegt und gezeichnet. Danach wird das <codeph>creationComplete</codeph>-Ereignis ausgelöst.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  Wird ausgelöst, wenn sich der Status eines Objekts von sichtbar in unsichtbar ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der Status eines Objekts von sichtbar in unsichtbar ändert.
 
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.UPDATE_COMPLETE_updateComplete"><apiName>updateComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem die Methoden commitProperties(), measure() und updateDisplayList() eines Objekts aufgerufen wurden (falls erforderlich).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.UPDATE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Methoden <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> und <codeph>updateDisplayList()</codeph> eines Objekts aufgerufen wurden (falls erforderlich).
   <p>Dies ist die letzte Möglichkeit zum Ändern der Komponente, bevor sie angezeigt wird. Alle Eigenschaften wurden übernommen, die Komponente wurde gemessen und das Layout festgelegt.</p>
   <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.CREATION_COMPLETE_creationComplete"><apiName>creationComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem die Erstellung, die Verarbeitung der Eigenschaften, die Messung, die Layouterstellung und Zeichnung der Komponente abgeschlossen wurden. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem die Erstellung, die Verarbeitung der Eigenschaften, die Messung, die Layouterstellung und Zeichnung der Komponente abgeschlossen wurden. 
   <p>Zu diesem Zeitpunkt ist die Komponente in Abhängigkeit von ihrer <codeph>visible</codeph>-Eigenschaft nicht sichtbar, obwohl sie gezeichnet wurde.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ADD_add"><apiName>add</apiName><shortdesc>
  Wird ausgelöst, wenn die Komponente einem Container als untergeordnetes Inhaltselement mit der addChild()-, addChildAt()-, addElement()- oder addElementAt()-Methode hinzugefügt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ADD</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Komponente einem Container als untergeordnetes Inhaltselement mit der <codeph>addChild()</codeph>-, <codeph>addChildAt()</codeph>-, <codeph>addElement()</codeph>- oder <codeph>addElementAt()</codeph>-Methode hinzugefügt wird. Wenn die Komponente dem Container als untergeordnetes Element (kein Inhaltselement) mit der <codeph>rawChildren.addChild()</codeph>- oder <codeph>rawChildren.addChildAt()</codeph>-Methode hinzugefügt wird, wird das Ereignis nicht ausgelöst.
  <p>Dieses Ereignis wird nur ausgelöst, wenn an das auslösende Objekt ein oder mehr entsprechende Listener angehängt sind.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:UIComponent:UIComponent"><apiName>UIComponent</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UIComponent:addStyleClient"><apiName>addStyleClient</apiName><shortdesc>
      Fügt dieser Komponenteninstanz einen nichtvisuellen Stilclient hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn der <codeph>styleClient</codeph>-Parameter ein <codeph>DisplayObject</codeph> ist. 
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleClient</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>Der <codeph>IAdvancedStyleClient</codeph>, der der Liste nicht visueller Stilclients dieser Komponente hinzugefügt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt dieser Komponenteninstanz einen nichtvisuellen Stilclient hinzu. Nachdem diese Methode aufgerufen wurde, übernimmt der Stilclient Stiländerungen von dieser Komponenteninstanz. Stilclients, die DisplayObjects sind, müssen die <codeph>addChild</codeph>- oder <codeph>addChildAt</codeph>-Methoden verwenden, um zu einer <codeph>UIComponent</codeph> hinzugefügt zu werden. Beim Verwenden dieser Methode wird außerdem die <codeph>styleParent</codeph>-Eigenschaft des <codeph>styleClient</codeph>-Parameters festgelegt, um auf diese Instanz der <codeph>UIComponent</codeph> zu verweisen. Wenn der <codeph>styleClient</codeph>-Parameter bereits ein <codeph>styleParent</codeph> besitzt, ruft diese Methode den <codeph>removeStyleClient</codeph> aus diesem früheren <codeph>styleParent</codeph> auf.  
     
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.removeStyleClient.xml"><linktext>removeStyleClient</linktext></link><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:adjustFocusRect"><apiName>adjustFocusRect</apiName><shortdesc>
      Passt das Fokusrechteck an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>Komponente, deren Fokusrechteck geändert werden soll. Wird nichts angegeben, wird standardmäßig dieses UIComponent-Objekt verwendet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Passt das Fokusrechteck an.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:applyComputedMatrix"><apiName>applyComputedMatrix</apiName><shortdesc>
      Übernimmt die berechnete Matrix, die aus der Kombination von Layoutmatrix und Transformations-Offsets erstellt wird, in die displayObject-Transformation von Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Übernimmt die berechnete Matrix, die aus der Kombination von Layoutmatrix und Transformations-Offsets erstellt wird, in die displayObject-Transformation von Flash.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Dies ist eine interne Methode, die vom Flex-Framework zur Unterstützung des Auflösungseffekts verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Dies ist eine interne Methode, die vom Flex-Framework zur Unterstützung des Auflösungseffekts verwendet wird. Es braucht nicht aufgerufen oder überschrieben zu werden.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:callLater"><apiName>callLater</apiName><shortdesc>
      Stellt eine Funktion in die Warteschlange, damit sie später aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>Verweis auf eine Methode, die später ausgeführt wird.
           </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Array von Objekten, die die an die Methode zu übergebenden Argumente darstellen.
           
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Stellt eine Funktion in die Warteschlange, damit sie später aufgerufen wird.
           <p>Vor jeder Bildschirmaktualisierung rufen Flash Player oder AIR den Satz Funktionen auf, die für die Aktualisierung geplant sind. In manchen Fällen sollte eine Funktion in der nächsten Aktualisierung aufgerufen werden, um den Rest des Codes, der für die gegenwärtige Aktualisierung geplant ist, auszuführen. Manche Features, wie beispielsweise Effekte, können die Ausführung von Funktionen in der Warteschlange verzögern, bis das Feature abgeschlossen ist. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:canSkipMeasurement"><apiName>canSkipMeasurement</apiName><shortdesc>
      Bestimmt, ob der Aufruf der measure()-Methode übersprungen werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn die <codeph>measureSizes()</codeph>-Methode den Aufruf der <codeph>measure()</codeph>-Methode überspringen kann. Dies ist normalerweise auf <codeph>true</codeph> eingestellt, wenn <codeph>explicitWidth</codeph> und <codeph>explicitHeight</codeph> eingestellt sind. Für Pfade ist dies auf <codeph>true</codeph> eingestellt, wenn sich die Grenzen des Pfads nicht geändert haben.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Bestimmt, ob der Aufruf der <codeph>measure()</codeph>-Methode übersprungen werden kann.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:childrenCreated"><apiName>childrenCreated</apiName><shortdesc>
      Führt ggf. eine letzte Verarbeitung nach der Erstellung untergeordneter Objekte durch.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Führt ggf. eine letzte Verarbeitung nach der Erstellung untergeordneter Objekte durch. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      Löscht eine Stileigenschaft aus dieser Komponenteninstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Der Name der style-Eigenschaft.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Löscht eine Stileigenschaft aus dieser Komponenteninstanz.
           <p>Hierbei gibt die <codeph>getStyle()</codeph>-Methode nicht notwendigerweise <codeph>undefined</codeph> zurück.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      Verarbeitet die Eigenschaften der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Verarbeitet die Eigenschaften der Komponente. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können.
           <p>Sie können diese Methode nicht direkt aufrufen. Flex ruft die <codeph>commitProperties()</codeph>-Methode auf, wenn Sie die <codeph>addChild()</codeph>-Methode zum Hinzufügen einer Komponente zu einem Container verwenden oder wenn Sie die <codeph>invalidateProperties()</codeph>-Methode der Komponente aufrufen. Aufrufe der <codeph>commitProperties()</codeph>-Methode erfolgen vor Aufrufen der <codeph>measure()</codeph>-Methode. Auf diese Weise können Sie Eigenschaftswerte festlegen, die von der <codeph>measure()</codeph>-Methode verwendet werden können.</p>
           <p>Manche Komponenten haben Eigenschaften, die sich auf die Anzahl und die Arten der von ihnen zu erstellenden untergeordneten Objekte auswirken. Oder sie haben Eigenschaften, die miteinander interagieren, wie etwa die Eigenschaften <codeph>horizontalScrollPolicy</codeph> und <codeph>horizontalScrollPosition</codeph>. Es ist oft am besten, zu Beginn alle diese Eigenschaften in einem Vorgang zu verarbeiten, um unnötige Mehrarbeit zu vermeiden.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc>
      Konvertiert die Inhaltskoordinaten eines Point-Objekts in globale Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein point-Objekt, dessen Koordinaten sich auf die Bühne beziehen.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Ein Point-Objekt, das die <i>x</i>- und <i>y</i>-Koordinaten im Inhaltskoordinatensystem als Eigenschaften angibt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Konvertiert die Inhaltskoordinaten eines <codeph>Point</codeph>-Objekts in globale Koordinaten. Inhaltskoordinaten geben eine Pixelposition relativ zur linken oberen Ecke des Inhalts der Komponente an und schließen den gesamten Inhaltsbereich der Komponente ein, sogar Bereiche, die derzeit abgeschnitten sind und durch einen Bildlauf angezeigt werden müssen. Sie verwenden das Inhaltskoordinatensystem, um die Positionen von untergeordneten Elementen eines Containers mit absoluter Positionierung einzustellen und abzurufen. Globale Koordinaten geben eine Pixelposition relativ zur oberen linken Ecke der Bühne an, d. h., dem äußersten Rand der Anwendung.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/globalToContent()"><linktext>globalToContent()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:contentToLocal"><apiName>contentToLocal</apiName><shortdesc>
      Konvertiert die Inhaltskoordinaten eines Point-Objekts in lokale Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Point-Objekt, dessen Koordinaten sich auf das lokale Koordinatensystem beziehen.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Ein Point-Objekt, das die <i>x</i>- und <i>y</i>-Koordinaten im Inhaltskoordinatensystem als Eigenschaften angibt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Konvertiert die Inhaltskoordinaten eines <codeph>Point</codeph>-Objekts in lokale Koordinaten. Inhaltskoordinaten geben eine Pixelposition relativ zur linken oberen Ecke des Inhalts der Komponente an und schließen den gesamten Inhaltsbereich der Komponente ein, sogar Bereiche, die derzeit abgeschnitten sind und durch einen Bildlauf angezeigt werden müssen. Sie verwenden das Inhaltskoordinatensystem, um die Positionen von untergeordneten Elementen eines Containers mit absoluter Positionierung einzustellen und abzurufen. Lokale Koordinaten geben eine Pixelposition relativ zur linken oberen Ecke der Komponente an.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      
      Gibt einen Satz Eigenschaften als Automatisierungs-IDs zurück, welche das untergeordnete Element innerhalb seines Containers identifizieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Satz Eigenschaften, der das untergeordnete Element beschreibt, welches später verwendet werden kann, um die Komponente aufzulösen.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>Untergeordnetes Element, für welches die ID bereitzustellen ist.
     
      </apiDesc></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/><apiDesc>Muss zur Erstellung der ID berücksichtigt werden.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt einen Satz Eigenschaften als Automatisierungs-IDs zurück, welche das untergeordnete Element innerhalb seines Containers identifizieren. Diese Werte sollten sich über die Lebensdauer der Anwendung nicht verändern
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      
      Gibt einen Satz Eigenschaften zurück, welche das untergeordnete Element innerhalb dieses Containers identifizieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Satz Eigenschaften, der das untergeordnete Element beschreibt, welches später verwendet werden kann, um die Komponente aufzulösen.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>Untergeordnetes Element, für welches die ID bereitzustellen ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt einen Satz Eigenschaften zurück, welche das untergeordnete Element innerhalb dieses Containers identifizieren. Diese Werte sollten sich über die Lebensdauer der Anwendung nicht verändern.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Erstellen Sie untergeordnete Objekte der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellen Sie untergeordnete Objekte der Komponente. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können.
           <p>Eine Komponente, die andere Komponenten oder Objekte in sich selbst erstellt, wird als „zusammengesetzte Komponente“ bezeichnet. Dies trifft beispielsweise dann zu, wenn das Flex ComboBox-Steuerelement tatsächlich aus einem TextInput-Steuerelement zum Definieren des Textbereichs der ComboBox und einem Schaltflächen-Steuerelement zum Definieren des ComboBox-Pfeils zusammengesetzt ist. Komponenten implementieren die <codeph>createChildren()</codeph>-Methode zum Erstellen untergeordneter Objekte (wie etwa andere Komponenten) innerhalb der Komponente.</p>
           <p>Sie rufen aus der Überschreibung der <codeph>createChildren()</codeph>-Methode zum Hinzufügen jedes der untergeordneten Objekte die <codeph>addChild()</codeph>-Methode auf. </p>
           <p>Sie können diese Methode nicht direkt aufrufen. Flex ruft die <codeph>createChildren()</codeph>-Methode als Antwort auf die den Aufruf der <codeph>addChild()</codeph>-Methode auf, um die Komponente seinem übergeordneten Objekt hinzuzufügen. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInFontContext"><apiName>createInFontContext</apiName><shortdesc>
      Erstellt ein neues Objekt mit einem Kontext, der auf der verwendeten eingebetteten Schriftart basiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die Instanz der Klasse, die im Kontext der SWF erstellt wurde, deren Eigentum die eingebetteten Schriftarten sind. Wenn dieses Objekt keine eingebettete Schriftart verwendet, wird die Klasse im Kontext dieses Objekts erstellt.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classObj</apiItemName><apiType value="Class"/><apiDesc>Die zu erstellende Klasse.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt ein neues Objekt mit einem Kontext, der auf der verwendeten eingebetteten Schriftart basiert.
           <p>Mit dieser Methode wird ein Zugriffsproblem für Schriftarten gelöst, die in eine Anwendungs-SWF eingebettet sind, wenn das Framework als RSL geladen wird (die RSL hat einen eigenen SWF-Kontext). Der Zugriff auf eingebettete Schriftarten kann nur von dem SWF-Dateikontext aus erfolgen, in dem sie erstellt wurden. Durch Verwendung des Kontexts der Anwendungs-SWF kann die RSL Objekte im SWF-Anwendungskontext erstellen, der Zugriff auf die eingebetteten Schriftarten der Anwendung hat.</p>
           <p>Rufen Sie diese Methode erst auf, wenn die Schriftstile für dieses Objekt festgelegt sind.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInModuleContext"><apiName>createInModuleContext</apiName><shortdesc>
      Erstellt das Objekt mithilfe einer gegebenen moduleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Das im Kontext der moduleFactory erstellte Objekt.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiDesc>Die moduleFactory, in der die Klasse erstellt werden soll. Der Wert kann null sein.
           </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="String"/><apiDesc>Der Name der zu erstellenden Klasse.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt das Objekt mithilfe einer gegebenen moduleFactory. Wenn moduleFactory den Wert null hat oder das Objekt nicht mit der Modul-Factory erstellt werden kann, erstellen Sie das Objekt mit einem systemManager.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      
      Erstellt einen ID-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Das übergeordnete Element dieses IUIComponent-Objekts. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Erstellt einen <codeph>id</codeph>-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt. Diese Funktion kann mehrdimensionale Verweise wie b[2][4] für Objekte in einem oder mehreren Repeatern erstellen. Wenn die Indexpositionen null sind, erstellt sie einen einfachen Verweis, der kein Array ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      
      Löscht den ID-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Das übergeordnete Element dieses IUIComponent-Objekts. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Löscht den <codeph>id</codeph>-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt. Diese Funktion kann mehrdimensionale Verweise wie b[2][4] für Objekte in einem oder mehreren Repeatern löschen. Wenn die Indexpositionen null entsprechen, löscht sie den einfachen Verweis, der kein Array ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:determineTextFormatFromStyles"><apiName>determineTextFormatFromStyles</apiName><shortdesc>
      Gibt ein UITextFormat-Objekt zurück, das den Textstilen für diese UIComponent entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>UITextFormat-Objekt, das den Textstilen für diese UIComponent entspricht.
      
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Gibt ein UITextFormat-Objekt zurück, das den Textstilen für diese UIComponent entspricht.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      Sendet ein Ereignis in den Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn das Ereignis erfolgreich ausgelöst wurde. Der Wert <codeph>false</codeph> weist entweder auf einen Fehler hin oder auf die Tatsache, dass die <codeph>preventDefault()</codeph>-Methode für das Ereignis aufgerufen worden ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das Ereignisobjekt, das in den Ereignisablauf integriert wird. Wenn das Ereignis erneut gesendet wird, wird automatisch ein Klon des Ereignisses erstellt. Nachdem ein Ereignis ausgelöst wurde, lässt sich seine <codeph>target</codeph>-Eigenschaft nicht mehr ändern, daher funktioniert ein Zurücksenden des Ereignisses nur, wenn Sie eine neue Kopie des Ereignisses erstellen.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sendet ein Ereignis in den Ereignisablauf. Das Ereignisziel ist das EventDispatcher-Objekt, für das die Methode <codeph>dispatchEvent()</codeph> aufgerufen wird.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:dispatchPropertyChangeEvent"><apiName>dispatchPropertyChangeEvent</apiName><shortdesc> 
      Helper-Methode für das Auslösen eines PropertyChangeEvent, wenn eine Eigenschaft aktualisiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prop</apiItemName><apiType value="String"/><apiDesc>Name der geänderten Eigenschaft.
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="any"/><apiDesc>Alter Wert der Eigenschaft.
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Neuer Wert der Eigenschaft.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Helper-Methode für das Auslösen eines PropertyChangeEvent, wenn eine Eigenschaft aktualisiert wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      Blendet den Fokusindikator um diese Komponente herum ein oder aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>Bestimmt, ob der Fokusindikator angezeigt wird. Auf <codeph>true</codeph> eingestellt, um den Fokusindikator einzublenden. Auf <codeph>false</codeph> eingestellt, um den Fokusindikator auszublenden.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet den Fokusindikator um diese Komponente herum ein oder aus.
           <p>UIComponent implementiert dies durch Erstellen und Platzieren einer Instanz der durch den <codeph>focusSkin</codeph>-Stil angegebenen Klasse.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawRoundRect"><apiName>drawRoundRect</apiName><shortdesc>
      Zeichnet programmgesteuert ein Rechteck in das Graphics-Objekt dieser Skin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Horizontale Position der linken oberen Ecke des Rechtecks in dieser Skin.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Vertikale Position der linken oberen Ecke des Rechtecks in dieser Skin.
           </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Breite des Rechtecks in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Höhe des Rechtecks in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>r</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eckradius bzw. Eckradien des Rechtecks. Kann <codeph>null</codeph>, einer Zahl oder einem Objekt entsprechen. Durch <codeph>null</codeph> wird angegeben, dass die Ecken nicht abgerundet sind. Durch eine Zahl wird dieser Radius für alle vier Ecken angegeben (in Pixel). Wenn ein Objekt angegeben wird, sollte es die Eigenschaften <codeph>tl</codeph>, <codeph>tr</codeph>, <codeph>bl</codeph> und <codeph>br</codeph> aufweisen, deren Werte Zahlen sind, die den Radius für die linke obere, rechte obere, linke untere und rechte untere Ecke in Pixeln angeben. Beispielsweise können Sie ein einfaches Objekt wie <codeph>{ tl: 5, tr: 5, bl: 0, br: 0 }</codeph> übergeben. Der Standardwert lautet null (keine abgerundeten Ecken).
           </apiDesc></apiParam><apiParam><apiItemName>c</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Die RGB-Farben der Füllung. Kann <codeph>null</codeph>, einer vorzeichenlosen Zahl oder einem Array entsprechen. Durch <codeph>null</codeph> wird angegeben, dass das Rechteck nicht gefüllt ist. Durch eine vorzeichenlose Zahl wird eine RGB-Füllfarbe angegeben. Übergeben Sie beispielsweise <codeph>0xFF0000</codeph> für eine rote Füllung. Ein Array sollte vorzeichenlose Zahlen für die Verlaufsfarben enthalten. Übergeben Sie beispielsweise <codeph>[ 0xFF0000, 0xFFFF00, 0x0000FF ]</codeph> für eine Farbverlaufsfüllung von Rot über Gelb zu Blau. Sie können bis zu 15 Farben für einen Farbverlauf festlegen. Der Standardwert lautet null (keine Füllung).
           </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Alphawert(e) für die Füllung. Kann null, einer Zahl oder einem Array entsprechen. Dieses Argument wird ignoriert, wenn <codeph>color</codeph> null ist. Wenn <codeph>color</codeph> einer vorzeichenlosen Zahl für eine RGB-Füllfarbe entspricht, muss <codeph>alpha</codeph> eine Zahl für die Transparenz der Füllung sein. Bei 0,0 ist die Füllung vollkommen durchsichtig und bei 1,0 vollkommen undurchsichtig. Sie können in diesem Fall statt 1,0 auch null übergeben, um festzulegen, dass die Füllung vollkommen undurchsichtig ist. Wenn <codeph>color</codeph> ein Array ist, das Farbverlaufsfarben angibt, dann muss <codeph>alpha</codeph> ein Array von Zahlen gleicher Länge sein, das die entsprechenden Alphawerte für den Farbverlauf angibt. In diesem Fall ist der Standardwert <codeph>null</codeph> (vollständig undurchsichtig).
           </apiDesc></apiParam><apiParam><apiItemName>rot</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Für die Farbverlaufsfüllung verwendetes Matrix-Objekt. Mit den Dienstprogrammmethoden <codeph>horizontalGradientMatrix()</codeph>, <codeph>verticalGradientMatrix()</codeph> und <codeph>rotatedGradientMatrix()</codeph> können Sie die Werte für diesen Parameter erstellen.
           </apiDesc></apiParam><apiParam><apiItemName>gradient</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Typ der Farbverlaufsfüllung. Mögliche Werte sind <codeph>GradientType.LINEAR</codeph> oder <codeph>GradientType.RADIAL</codeph>. (Die GradientType-Klasse befindet sich im Paket flash.display.)
           </apiDesc></apiParam><apiParam><apiItemName>ratios</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>
      Gibt die Verteilung der Farben an. Die Anzahl der Einträge muss der Anzahl der im <codeph>color</codeph>-Parameter definierten Farben entsprechen. Jeder Wert gibt den Breitenanteil an, in dem die Farbe mit 100 % gesampelt wird. Der Wert 0 repräsentiert die linke Position im Farbverlaufsfeld, und 255 repräsentiert die rechte Position im Farbverlaufsfeld. 
           </apiDesc></apiParam><apiParam><apiItemName>hole</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Eine Aussparung in Form eines abgerundeten Rechtecks in der Mitte des ansonsten einfarbig gefüllten, abgerundeten Rechtecks { x: Zahl, y: Zahl, w: Zahl, h: Zahl, r: Zahl oder { br: Zahl, bl: Zahl, tl: Zahl, tr: Zahl } }.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Zeichnet programmgesteuert ein Rechteck in das Graphics-Objekt dieser Skin.
           <p>Das Rechteck kann abgerundet sein. Die Kanten werden mit dem aktuellen Linienstil des Graphics-Objekts gezeichnet. Es kann eine einfarbige Füllung, eine Farbverlaufsfüllung oder keine Füllung haben. Für eine einfarbige Füllung kann eine Alphatransparenz festgelegt sein. Eine Farbverlaufsfüllung kann linear oder radial sein. Sie können bis zu 15 Farben und Alphawerte an bestimmten Punkten entlang des Farbverlaufs und einen Drehwinkel oder eine Transformationsmatrix für den Farbverlauf angeben. Schließlich kann sich innerhalb des Rechtecks eine Aussparung in Form eines abgerundeten Rechtecks befinden.</p>
           <p>Diese vielseitige Routine zum Zeichnen von Rechtecken wird von vielen Skins verwendet. Sie ruft die <codeph>drawRect()</codeph>- oder <codeph>drawRoundRect()</codeph>-Methoden (in der flash.display.Graphics-Klasse) auf, um in das Graphics-Objekt der Skin zu zeichnen.</p>
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:effectFinished"><apiName>effectFinished</apiName><shortdesc>
      Wird von der Effektinstanz aufgerufen, wenn die Wiedergabe der Komponente angehalten wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Das wiedergegebene Effektinstanz-Objekt der Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird von der Effektinstanz aufgerufen, wenn die Wiedergabe der Komponente angehalten wird. Mit dieser Methode können Sie eine Änderung der Komponente wiederherstellen, die beim Start des Effekts von der <codeph>effectStarted()</codeph>-Methode vorgenommen wurde, oder am Ende des Effekts andere Aktionen durchführen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:effectStarted"><apiName>effectStarted</apiName><shortdesc>
      Wird von der Effektinstanz aufgerufen, wenn die Wiedergabe auf der Komponente gestartet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Das wiedergegebene Effektinstanz-Objekt der Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird von der Effektinstanz aufgerufen, wenn die Wiedergabe auf der Komponente gestartet wird. Verwenden Sie diese Methode, um mit dem Effekt eine Änderung an der Komponente vorzunehmen. Mit der <codeph>effectFinished()</codeph>-Methode können Sie die Änderungen am Ende des Effekts wiederherstellen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:endEffectsStarted"><apiName>endEffectsStarted</apiName><shortdesc>
      Bendet alle derzeit wiedergegebenen Effekte der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Bendet alle derzeit wiedergegebenen Effekte der Komponente.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      Führt alle Bindungen aus, deren Ziel das UIComponent-Objekt ist. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Führt die Bindungen für untergeordnete Elemente dieser Komponente rekursiv aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Führt alle Bindungen aus, deren Ziel das UIComponent-Objekt ist. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:finishPrint"><apiName>finishPrint</apiName><shortdesc>
      Wird aufgerufen, nachdem der Druckvorgang abgeschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Enthält die Eigenschaften der Komponente zur Wiederherstellung des Status vor dem Drucken.
           </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Die Komponente, die gerade gedruckt wurde. Es kann sich um die aktuelle Komponente handeln oder um eines ihrer untergeordneten Elemente.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, nachdem der Druckvorgang abgeschlossen wurde. Für die UIComponent-Klasse führt die Methode keine Aktion aus. Flex-Container überschreiben die Methode, um den Container nach dem Drucken wiederherzustellen.
           <p>Diese Methode wird normalerweise von Anwendungsentwicklern nicht verwendet. </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusInHandler"><apiName>focusInHandler</apiName><shortdesc>
      Die Ereignisprozedur, die aufgerufen wird, wenn ein UIComponent-Objekt den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Das Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Ereignisprozedur, die aufgerufen wird, wenn ein UIComponent-Objekt den Fokus erhält. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die Basisklassenversion aufrufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc>
      Die Ereignisprozedur, die aufgerufen wird, wenn ein UIComponent-Objekt den Fokus verliert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Das Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Ereignisprozedur, die aufgerufen wird, wenn ein UIComponent-Objekt den Fokus verliert. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die Basisklassenversion aufrufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
       
      Stellt das Automatisierungsobjekt an der festgelegten Indexposition bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das untergeordnete Element an der festgelegten Indexposition.
      
      </apiDesc><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die zurückzugebende Indexposition des untergeordneten Elements.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      Stellt das Automatisierungsobjekt an der festgelegten Indexposition bereit. Diese Liste sollte keine untergeordneten Elemente enthalten, welche Composites sind.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      
      Stellt die Automatisierungsobjektliste bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die untergeordneten Automatisierungselemente.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      Stellt die Automatisierungsobjektliste bereit. Diese Liste enthält keine untergeordneten Objekte, welche Composites sind.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      Gibt die x-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die x-Koordinate der Grenzen des Elements für die angegebene Elementgröße.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Breite der Elementgrenzen oder „NaN“, um die bevorzugte Breite zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Höhe der Elementgrenzen oder „NaN“, um die bevorzugte Höhe zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die x-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der angegebenen Größe für die Grenzen, der Layoutposition und der Layouttransformationsmatrix berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die x-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück.
     
      <p>Diese Methode wird normalerweise von Layouts während des Aufrufs der <codeph>measure()</codeph>-Methode verwendet, um vorherzusagen, welche Position das Element einnimmt, wenn dessen Größe auf bestimmte Abmessungen geändert wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      Gibt die y-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die y-Koordinate der Grenzen des Elements für die angegebene Elementgröße.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Breite der Elementgrenzen oder „NaN“, um die bevorzugte Breite zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Höhe der Elementgrenzen oder „NaN“, um die bevorzugte Höhe zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die y-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der angegebenen Größe für die Grenzen, der Layoutposition und der Layouttransformationsmatrix berechnet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die y-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück. Diese Methode wird normalerweise von Layouts während des Aufrufs von <codeph>measure()</codeph>-verwendet, um vorherzusagen, welche Position das Element einnimmt, wenn dessen Größe auf bestimmte Abmessungen geändert wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc>
      Sucht die Typselektoren für diese UIComponent-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Array von type-Selektoren für diese UIComponent-Instanz.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Sucht die Typselektoren für diese UIComponent-Instanz. Der Algorithmus arbeitet die Superklassenkette von unten nach oben ab. Beispiel: Angenommen, die MyButton-Klasse erweitert die Button-Klasse. Eine MyButton-Instanz sucht zunächst nach einem MyButton-Typselektor und dann nach einem Button-Typselektor. Anschließend sucht sie nach einem UIComponent-Typselektor. (Es wird davon ausgegangen, dass die Superklassenkette bei UIComponent endet, und nicht bei Object.)
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      Gibt einen Layout-Beschränkungswert zurück. Dieser Wert entspricht demjenigen beim Abrufen des Beschränkungsstils für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt den Layout-Beschränkungswert zurück, welcher auf zwei verschiedene Arten angegeben werden kann. Der Wert kann ein numerischer String, beispielsweise „10“ sein, oder in Form von „identifier:numeric string“ angegeben werden. Bei „identifier:numeric string“ steht „identifier“ für die <codeph>id</codeph> einer ConstraintRow oder ConstraintColumn. Beispiel: Ein Wert von „cc1:10“ gibt einen Wert von „10“ für die ConstraintColumn mit der <codeph>id</codeph> „cc1“ an.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Der Name des Beschränkungsstils, welcher einer der folgenden sein kann: „left“, „right“, „top“, „bottom“, „verticalCenter“, „horizontalCenter“, „baseline“.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt einen Layout-Beschränkungswert zurück. Dieser Wert entspricht demjenigen beim Abrufen des Beschränkungsstils für diese Komponente.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Höhe verwendet werden soll
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Zahl, die explicitHeight entspricht, wenn sie definiert ist, oder measuredHeight entspricht, wenn sie nicht definiert ist.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Höhe verwendet werden soll
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Breite verwendet werden soll
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Zahl, die explicitWidth entspricht, wenn sie definiert ist, oder measuredWidth entspricht, wenn sie nicht definiert ist.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Eine bequeme Methode, um anzugeben, ob die explizite oder gemessene Breite verwendet werden soll
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getFocus"><apiName>getFocus</apiName><shortdesc>
      Ruft das Objekt ab, das derzeit den Fokus hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objekt, das den Fokus hat.
      
      </apiDesc><apiType value="flash.display:InteractiveObject"/></apiReturn></apiOperationDef><apiDesc>
      Ruft das Objekt ab, das derzeit den Fokus hat. Es muss sich dabei nicht um dieses Objekt handeln. Beachten Sie, dass diese Methode nicht notwendigerweise die Komponente, auf der der Fokus liegt, zurückgibt. Es kann auch die interne Unterkomponente, die den Fokus übernommen hat, zurückgegeben werden. Verwenden Sie zum Abrufen der Komponente mit dem Fokus die Eigenschaft <codeph>focusManager.focus</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      
      Gibt die Layouthöhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Layouthöhe des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert „true“, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die Layouthöhe des Elements zurück. Dies ist die Größe, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      
      Gibt die Layoutbreite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Layoutbreite des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert „true“, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die Layoutbreite des Elements zurück. Dies ist die Größe, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      
      Gibt die x-Koordinate zurück, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die x-Koordinate, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die x-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die x-Koordinate zurück, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      
      Gibt die y-Koordinate zurück, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die y-Koordinate, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die y-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die y-Koordinate zurück, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      
      Gibt die Layouttransformations-Matrix3D für dieses Element zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Matrix3D zur Transformation des Layouts für dieses Element. Ändern Sie nicht direkt den Rückgbewert, sondern rufen Sie stattdessen die <codeph>setLayoutMatrix()</codeph>-Method auf.
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      
      Gibt die Layouttransformations-Matrix3D für dieses Element zurück.
     
      <p>Diese Matrix wird normalerweise durch die Transformationseigenschaften der Komponente definiert, wie etwa <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph>. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>-Eigenschaft.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      
      Gibt die Transformationsmatrix zurück, die zur Berechnung des Layouts der Komponente relativ zu ihren Parallelobjekten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Layouttransformationsmatrix für dieses Element. Ändern Sie nicht direkt den Rückgbewert, sondern rufen Sie stattdessen die <codeph>setLayoutMatrix()</codeph>-Methode auf.
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      
      Gibt die Transformationsmatrix zurück, die zur Berechnung des Layouts der Komponente relativ zu ihren Parallelobjekten verwendet wird.
           <p>Diese Matrix wird normalerweise durch die 2D-Eigenschaften der Komponente, wie etwa <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph> definiert. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>-Eigenschaft.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      
      Gibt die maximale Höhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Höhe des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf „true“ eingestellt ist, gibt die Methode die Höhe des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der maximalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die maximale Höhe des Elements zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      
      Gibt die maximale Breite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Breite des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert „true“, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der maximalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die maximale Breite des Elements zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      
      Gibt die Mindesthöhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Höhe des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf <codeph>true</codeph> eingestellt ist, gibt die Methode die Höhe des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der minimalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die Mindesthöhe des Elements zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      
      Gibt die Mindestbreite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Breite des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert <codeph>true</codeph>, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der minimalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die Mindestbreite des Elements zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      
      Gibt die bevorzugte Höhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt die bevorzugte Höhe des Elements zurück. Die bevorzugte Höhe basiert normalerweise auf der standardmäßigen Elementgröße und expliziten Überschreibungen davon, falls vorhanden. Für UIComponent ist dies derselbe Wert, der von der <codeph>getExplicitOrMeasuredHeight()</codeph>-Methode zurückgegeben wird.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf <codeph>true</codeph> eingestellt ist, gibt die Methode die Höhe des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der bevorzugten Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die bevorzugte Höhe des Elements zurück.  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      
      Gibt die bevorzugte Breite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt die bevorzugte Breite des Elements zurück. Die bevorzugte Breite basiert normalerweise auf der standardmäßigen Elementgröße und expliziten Überschreibungen davon, falls vorhanden. Für UIComponent ist dies derselbe Wert, der von der <codeph>getExplicitOrMeasuredWidth()</codeph>-Methode zurückgegeben wird.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert <codeph>true</codeph>, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der bevorzugten Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt die bevorzugte Breite des Elements zurück.   
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getRepeaterItem"><apiName>getRepeaterItem</apiName><shortdesc>
      Gibt das Element im dataProvider zurück, mit dem der angegebene Repeater diesen Repeater erzeugt hat, oder null, wenn dieser Repeater nicht wiederholt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das angeforderte Repeaterelement.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>whichRepeater</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Nummer des Repeaters, wobei die Zählung beim äußersten Repeater (null) begonnen wird.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt das Element im <codeph>dataProvider</codeph> zurück, mit dem der angegebene Repeater diesen Repeater erzeugt hat, oder <codeph>null</codeph>, wenn dieser Repeater nicht wiederholt wird. Das Argument <codeph>whichRepeater</codeph> ist 0 für den äußersten Repeater, 1 für den nächsten Repeater weiter innen usw. Ist <codeph>whichRepeater</codeph> nicht angegeben, dann wird der innerste Repeater verwendet.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getStyle"><apiName>getStyle</apiName><shortdesc>
      Ruft eine Stileigenschaft ab, die an einer beliebigen Stelle in der Stilkette der Komponente festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Stilwert.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Name der style-Eigenschaft.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft eine Stileigenschaft ab, die an einer beliebigen Stelle in der Stilkette der Komponente festgelegt ist.
           <p>Mit dieser Methode wird eine beliebige Stileigenschaft abgerufen. Es kann also ein boolescher Wert, ein String, eine Zahl, eine Ganzzahl, eine vorzeichenlose Ganzzahl (für eine RGB-Farbe), eine Klasse (für eine Skin) oder ein beliebiges Objekt zurückgegeben werden. Deshalb wird als Rückgabetyp einfach nur ~~ angegeben.</p>
           <p>Wenn Sie eine bestimmte Stileigenschaft abrufen, kennen Sie ihren Typ und möchten das Ergebnis häufig in einer Variable dieses Typs speichern. Es ist keine Umwandlung von ~~ in diesen Typ erforderlich.</p>
           <p>
      <codeph> var backgroundColor:uint = getStyle("backgroundColor"); </codeph>
      </p>
           <p>Wenn die Stileigenschaft in der Stilsuchkette nicht festgelegt wurde, lautet der Rückgabewert der <codeph>getStyle()</codeph>-Methode <codeph>undefined</codeph>. Beachten Sie, dass es sich bei <codeph>undefined</codeph> um einen speziellen Wert handelt, der sich von <codeph>false</codeph>, <codeph>""</codeph>, <codeph>NaN</codeph>, <codeph>0</codeph> und <codeph>null</codeph> unterscheidet. Ein gültiger Stilwert kann niemals <codeph>undefined</codeph> sein. Mit der Methode <codeph>StyleManager2.isValidStyleValue()</codeph> können Sie überprüfen, ob der Wert festgelegt wurde.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:globalToContent"><apiName>globalToContent</apiName><shortdesc>
      Konvertiert globale Koordinaten eines Point-Objekts in Inhaltskoordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Point-Objekt, dessen Koordinaten sich auf die Komponente beziehen.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Ein Point-Objekt, das die <i>x</i>- und <i>y</i>-Koordinaten im globalen Koordinatensystem als Eigenschaften angibt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Konvertiert globale Koordinaten eines <codeph>Point</codeph>-Objekts in Inhaltskoordinaten. Globale Koordinaten geben eine Pixelposition relativ zur oberen linken Ecke der Bühne an, d. h., dem äußersten Rand der Anwendung. Inhaltskoordinaten geben eine Pixelposition relativ zur linken oberen Ecke des Inhalts der Komponente an und schließen den gesamten Inhaltsbereich der Komponente ein, sogar Bereiche, die derzeit abgeschnitten sind und durch einen Bildlauf angezeigt werden müssen. Sie verwenden das Inhaltskoordinatensystem, um die Positionen von untergeordneten Elementen eines Containers mit absoluter Positionierung einzustellen und abzurufen.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:hasCSSState"><apiName>hasCSSState</apiName><shortdesc>
      
      Gibt true zurück, wenn currentCSSState ungleich null ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn <codeph>currentCSSState </codeph> ungleich <codeph>null</codeph> ist. Standardmäßig ist <codeph>currentCSSState</codeph> mit <codeph>currentState</codeph> identisch. Gibt false zurück, wenn kein Status vorhanden ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
      Gibt <codeph>true</codeph> zurück, wenn <codeph>currentCSSState</codeph> ungleich <codeph>null</codeph> ist. Normalerweise rufen Sie diese Methode nicht direkt auf. Sie wird von der <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph>-Methode aufgerufen.
           <p>Beachten Sie, dass Spark-Komponenten ihren Skinstatus als Pseudostatus verwenden. Halo-Komponenten verwenden die <codeph>currentState</codeph>-Eigenschaft.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:hasState"><apiName>hasState</apiName><shortdesc conref="mx.core.IStateClient2#hasState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Bestimmt, ob der angegebene Status definiert wurde. 
      
      </apiDesc></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Der Name des überprüften Status. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.IStateClient2#hasState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:horizontalGradientMatrix"><apiName>horizontalGradientMatrix</apiName><shortdesc>
      Gibt eine Box-Matrix zurück, die an die drawRoundRect()-Methode als rot-Parameter übergeben werden kann, wenn ein horizontaler Farbverlauf gezeichnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Matrix für den horizontalen Farbverlauf.
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die linke Koordinate des Farbverlaufs in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die obere Koordinate des Farbverlaufs in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Breite des Farbverlaufs in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Höhe des Farbverlaufs in Pixeln.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt eine Box-Matrix zurück, die an die <codeph>drawRoundRect()</codeph>-Methode als <codeph>rot</codeph>-Parameter übergeben werden kann, wenn ein horizontaler Farbverlauf gezeichnet wird.
           <p>Zur Verbesserung der Leistung wird die Matrix in einer statischen Variablen gespeichert, die bei jedem Aufruf von <codeph>horizontalGradientMatrix()</codeph> und <codeph>verticalGradientMatrix()</codeph> verwendet wird. Übergeben Sie daher die Ergebnismatrix an <codeph>drawRoundRect()</codeph>, bevor Sie <codeph>horizontalGradientMatrix()</codeph> oder <codeph>verticalGradientMatrix()</codeph> erneut aufrufen.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initAdvancedLayoutFeatures"><apiName>initAdvancedLayoutFeatures</apiName><shortdesc>
      Initialisiert die Implementierung und Speicherung von weniger häufig verwendeten, erweiterten Layoutfunktionen einer Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialisiert die Implementierung und Speicherung von weniger häufig verwendeten, erweiterten Layoutfunktionen einer Komponente. Rufen Sie diese Funktion auf, bevor Sie die vom AdvancedLayoutFeatures-Objekt implementierten Funktionen verwenden.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializationComplete"><apiName>initializationComplete</apiName><shortdesc>
      Schließt die Initialisierung dieser Komponente ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Schließt die Initialisierung dieser Komponente ab.
           <p>Diese Methode wird zuletzt ausgeführt, wenn Sie eine Komponente einem übergeordneten Element zum ersten Mal mit <codeph>addChild()</codeph> oder <codeph>addChildAt()</codeph> hinzufügen. Sie übernimmt einige allgemeine Verwaltungsfunktionen bei der Auslösung des <codeph>initialize</codeph>-Ereignisses. Wenn Sie eine Komponente schreiben, brauchen Sie diese Methode nicht zu überschreiben.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializeAccessibility"><apiName>initializeAccessibility</apiName><shortdesc>
      Initialisiert den Code dieser Komponente für Eingabehilfen zur Barrierefreiheit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialisiert den Code dieser Komponente für Eingabehilfen zur Barrierefreiheit.
           <p>Diese Methode wird von der <codeph>initialize()</codeph>-Methode aufgerufen, um eine Verknüpfung zum Komponentencode für Eingabehilfen zur Barrierefreiheit herzustellen, der in einer separaten Klasse des mx.accessibility-Pakets enthalten ist. Jede Unterklasse, die Eingabehilfen zur Barrierefreiheit unterstützt, muss diese Methode überschreiben, da der Verknüpfungsprozess in jeder Unterklasse eine andere statische Variable verwendet.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Initialisiert verschiedene Eigenschaften, die wiederholte Instanzen dieser Komponente verfolgen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>Das übergeordnete Objekt mit dem Repeater, der diese Komponente erstellt hat.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialisiert verschiedene Eigenschaften, die wiederholte Instanzen dieser Komponente verfolgen.
           <p>Mit einem MXML <codeph>&lt;mx:Repeater/></codeph>-Tag können wiederholte Instanzen einer Komponente, d. h. eine Instanz pro Element im Datenprovider des Repeaters, erstellt werden. Die Eigenschaften <codeph>instanceIndices</codeph>, <codeph>repeaters</codeph> und <codeph>repeaterIndices</codeph> von UIComponent verfolgen das Datenelement und den Repeater der einzelnen Instanzen.</p>
           <p>Dies ist eine interne Methode, die automatisch durch das Flex-Framework aufgerufen wird. Es braucht nicht aufgerufen oder überschrieben zu werden.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      Initialisiert die interne Struktur dieser Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialisiert die interne Struktur dieser Komponente.
           <p>Das Initialisieren einer UIComponent ist der vierte Schritt bei der Erstellung einer visuellen Komponenteninstanz. Er wird automatisch ausgeführt, wenn die Instanz dem übergeordneten Element das erste Mal hinzugefügt wird. Daher brauchen Sie die <codeph>initialize()</codeph>-Methode in der Regel nicht aufzurufen. Das Flex-Framework ruft sie über die Überschreibung der <codeph>addChild()</codeph>- und <codeph>addChildAt()</codeph>-Methode der UIComponent auf.</p>
           <p>Für den ersten Schritt bei der Erstellung einer visuellen Komponenteninstanz verwenden Sie den <codeph>new</codeph>-Operator:</p>
           <pre>
      var okButton:Button = new Button();</pre>
           <p>Die erstellte Button-Instanz ist ein einzelnes DisplayObject, dem noch kein UITextField zur Beschriftung untergeordnet und auch kein anderes Element übergeordnet ist.</p>
           <p>Im zweiten Schritt konfigurieren Sie die Eigenschaften, Stile und Ereignisprozeduren für die neu erstellte Instanz:</p>
           <pre>
      okButton.label = "OK";
      okButton.setStyle("cornerRadius", 0);
      okButton.addEventListener(MouseEvent.CLICK, clickHandler);</pre>
           <p>Der dritte Schritt besteht darin, die Instanz einem übergeordneten Element hinzuzufügen:</p>
           <pre>
      someContainer.addChild(okButton);</pre>
           <p>Wird <codeph>addChild()</codeph> oder <codeph>addChildAt()</codeph> erstmalig zum Hinzufügen einer Komponente zu einem übergeordneten Elements verwendet, wird <codeph>initialize</codeph> automatisch aufgerufen.</p>
           <p>Diese Methode löst ein <codeph>preinitialize</codeph>-Ereignis aus, damit diese Komponente von den Entwicklern, die sie verwenden, vor Erstellung ihrer internen Struktur geändert werden kann. Als Nächstes wird die <codeph>createChildren()</codeph>-Methode zum Erstellen der internen Struktur der Komponente aufgerufen. Bei einer Schaltfläche erstellt diese Methode das UITextField zur Beschriftung und fügt es hinzu. Dann wird ein <codeph>initialize</codeph>-Ereignis ausgelöst, damit Entwickler die Komponente nach der Erstellung ihrer internen Struktur ändern können</p>
           <p>Beachten Sie, dass die Erstellung der internen Struktur dadurch ausgelöst wird, dass die Komponente dem übergeordneten Element zum ersten Mal hinzugefügt wird. Wenn die interne Struktur andere UIComponents enthält, ist dies ein rekursiver Prozess, bei dem der DisplayObjects-Baum jeweils um einen Blattknoten erweitert wird.</p>
           <p>Wenn Sie eine Komponente schreiben, brauchen Sie diese Methode nicht zu überschreiben.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      Markiert eine Komponente, sodass die updateDisplayList()-Methode während einer späteren Bildschirmaktualisierung aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Markiert eine Komponente, sodass die <codeph>updateDisplayList()</codeph>-Methode während einer späteren Bildschirmaktualisierung aufgerufen wird.
           <p>Die Invalidierung ist ein nützlicher Mechanismus, um doppelte Arbeit zu vermeiden, indem die Verarbeitung der Änderungen einer Komponente bis zu einer späteren Bildschirmkomponente verschoben wird. Wenn Sie beispielsweise die Breite und Höhe ändern möchten, wäre es ineffizient, die Komponente sofort nach der Änderung der Breite und dann nochmals nach der Änderung der Höhe zu aktualisieren. Zuerst sollten die beiden Eigenschaften geändert und dann die Komponente mit der neuen Größe gerendert werden.</p>
           <p>Invalidierungsmethoden werden selten aufgerufen. Im Allgemeinen wird durch Einstellen einer Komponenteneigenschaft automatisch die entsprechende Invalidierungsmethode aufgerufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayering"><apiName>invalidateLayering</apiName><shortdesc>
      Wird von den Objekten einer Komponente aufgerufen, um anzugeben, dass ihre depth-Eigenschaft geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.4"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Wird von den Objekten einer Komponente aufgerufen, um anzugeben, dass ihre <codeph>depth</codeph>-Eigenschaft geändert wurde. Beachten Sie, dass diese Funktion zwar in <codeph>UIComponent</codeph> definiert wird, die Unterklassen jedoch Unterstützung für eine komplexe Ebenenanordnung implementieren müssen. Standardmäßig unterstützen nur <codeph>Group</codeph> und <codeph>DataGroup</codeph> die willkürliche Ebenenanordnung ihrer untergeordneten Objekte.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/depth"><linktext>depth</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
     
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird. Bei Unterschieden ist diese Methode dafür zuständig, den Inhalt des Elements zu spiegeln und die Transformation des Elements nach dem Layout so zu aktualisieren, dass die Nachfolger ein gespiegeltes Koordinatensystem erben. IVisualElements implementieren die Spiegelung in der Regel, indem sie mithilfe von postLayoutTransformOffsets die x-Achse um -1 skalieren und die x-Koordinate des Ursprungs um die Breite des Elements verschieben. Der Nettoeffekt dieser „Spiegeltransformation“ ist eine Umkehrung der Richtung, in welcher die x-Achse verlängert wird, ohne dass die Position des Elements relativ zum Ursprung seines übergeordneten Elements verändert wird.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Helper-Methode zur Invalidierung der Größe und Anzeigeliste des übergeordneten Objekts, wenn sich dieses Objekt auf das Layout (includeInLayout entspricht „true“) auswirkt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Helper-Methode zur Invalidierung der Größe und Anzeigeliste des übergeordneten Objekts, wenn sich dieses Objekt auf das Layout (includeInLayout entspricht „true“) auswirkt.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Markiert eine Komponente, sodass die commitProperties()-Methode bei einer späteren Bildschirmaktualisierung aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Markiert eine Komponente, sodass die <codeph>commitProperties()</codeph>-Methode bei einer späteren Bildschirmaktualisierung aufgerufen wird.
           <p>Die Invalidierung ist ein nützlicher Mechanismus, um doppelte Arbeit zu vermeiden, indem die Verarbeitung der Änderungen einer Komponente bis zu einer späteren Bildschirmkomponente verschoben wird. Wenn Sie beispielsweise die Textfarbe und die Schriftgröße ändern möchten, wäre es ineffizient, die Farbe sofort nach der Textänderung zu aktualisieren und dann nochmals nach der Änderung der Größe. Zuerst sollten die beiden Eigenschaften geändert und dann der Text mit der neuen Größe und Farbe gerendert werden.</p>
           <p>Invalidierungsmethoden werden selten aufgerufen. Im Allgemeinen wird durch Einstellen einer Komponenteneigenschaft automatisch die entsprechende Invalidierungsmethode aufgerufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      Markiert eine Komponente, sodass die measure()-Methode bei einer späteren Bildschirmaktualisierung aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Markiert eine Komponente, sodass die <codeph>measure()</codeph>-Methode bei einer späteren Bildschirmaktualisierung aufgerufen wird.
           <p>Die Invalidierung ist ein nützlicher Mechanismus, um doppelte Arbeit zu vermeiden, indem die Verarbeitung der Änderungen einer Komponente bis zu einer späteren Bildschirmkomponente verschoben wird. Wenn Sie beispielsweise den Text und die Schriftgröße ändern möchten, wäre es ineffizient, den Text sofort nach der Textänderung zu aktualisieren und dann nochmals nach der Änderung der Größe. Zuerst sollten die beiden Eigenschaften geändert und dann der Text und der neuen Größe gerendert werden.</p>
           <p>Invalidierungsmethoden werden selten aufgerufen. Im Allgemeinen wird durch Einstellen einer Komponenteneigenschaft automatisch die entsprechende Invalidierungsmethode aufgerufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:isOurFocus"><apiName>isOurFocus</apiName><shortdesc>
      Wird üblicherweise von Komponenten überschrieben, die UITextField-Objekte enthalten, wobei das UITextField-Objekt den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn das UITextField-Objekt den Fokus hat.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Ein UIComponent-Objekt mit einem UITextField-Objekt, das den Fokus erhalten kann.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird üblicherweise von Komponenten überschrieben, die UITextField-Objekte enthalten, wobei das UITextField-Objekt den Fokus erhält.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc>
      Die Ereignisprozedur, die bei einem keyDown-Ereignis aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Das Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Ereignisprozedur, die bei einem <codeph>keyDown</codeph>-Ereignis aufgerufen wird. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die Basisklassenversion aufrufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc>
      Die Ereignisprozedur, die bei einem keyUp-Ereignis aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Das Ereignisobjekt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die Ereignisprozedur, die bei einem <codeph>keyUp</codeph>-Ereignis aufgerufen wird. Wenn Sie diese Methode überschreiben, stellen Sie sicher, dass Sie die Basisklassenversion aufrufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:localToContent"><apiName>localToContent</apiName><shortdesc>
      Konvertiert lokale Koordinaten eines Point-Objekts in Inhaltskoordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Point-Objekt, dessen Koordinaten sich auf das Inhaltskoordinatensystem beziehen.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Ein Point-Objekt, das die <i>x</i>- und <i>y</i>-Koordinaten im lokalen Koordinatensystem als Eigenschaften angibt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Konvertiert lokale Koordinaten eines <codeph>Point</codeph>-Objekts in Inhaltskoordinaten. Lokale Koordinaten geben eine Pixelposition relativ zur linken oberen Ecke der Komponente an. Inhaltskoordinaten geben eine Pixelposition relativ zur linken oberen Ecke des Inhalts der Komponente an und schließen den gesamten Inhaltsbereich der Komponente ein, sogar Bereiche, die derzeit abgeschnitten sind und durch einen Bildlauf angezeigt werden müssen. Sie verwenden das Inhaltskoordinatensystem, um die Positionen von untergeordneten Elementen eines Containers mit absoluter Positionierung einzustellen und abzurufen.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToLocal()"><linktext>contentToLocal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc>
      
      Gibt „true“ zurück, wenn cssState mit currentCSSState übereinstimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn <codeph>cssState</codeph> mit <codeph>currentCSSState</codeph> übereinstimmt. Standardmäßig ist <codeph>currentCSSState</codeph> mit <codeph>currentState</codeph> identisch. Gibt null zurück, wenn kein Status vorhanden ist.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/><apiDesc>Ein möglicher Wert von <codeph>CSSCondition.value</codeph>. Stellt den aktuellen Status dieser Komponente dar; wird zum Zuordnen von CSS-Pseudoselektoren verwendet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt <codeph>true</codeph> zurück, wenn <codeph>cssState</codeph> mit <codeph>currentCSSState</codeph> übereinstimmt. Normalerweise rufen Sie diese Methode nicht direkt auf. Sie wird von der <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph>-Methode aufgerufen.
           <p>Beachten Sie, dass Spark-Komponenten ihren Skinstatus als Pseudostatus verwenden. Halo-Komponenten verwenden die <codeph>currentState</codeph>-Eigenschaft.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc>
      
      Bestimmt, ob diese Instanz dem angegebenen Typ entspricht oder eine Unterklasse davon ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn <codeph>cssType</codeph> sich in der Hierarchie qualifizierter Typselektoren befindet.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/><apiDesc>Ein CSSSelector-Objekt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Bestimmt, ob diese Instanz dem angegebenen Typ entspricht oder eine Unterklasse davon ist. Normalerweise rufen Sie diese Methode nicht direkt auf. Sie wird von der <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph>-Methode aufgerufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      Misst den angegebenen HTML-Text, der HTML-Tags wie etwa „&amp;lt;font&amp;gt;“ und „&amp;lt;b&amp;gt;“ enthalten kann. Dabei wird davon ausgegangen, dass er in einem einzeiligen UITextField mit einem durch die Stile dieser UIComponent bestimmten UITextFormat angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein TextLineMetrics-Objekt mit den Textabmessungen.
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>Ein String, der den zu messenden HTML-Text angibt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Misst den angegebenen HTML-Text, der HTML-Tags wie etwa <codeph>&lt;font></codeph> und <codeph>&lt;b></codeph> enthalten kann. Dabei wird davon ausgegangen, dass er in einem einzeiligen UITextField mit einem durch die Stile dieser UIComponent bestimmten UITextFormat angezeigt wird.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureText"><apiName>measureText</apiName><shortdesc>
      Misst den angegebenen Text. Dabei wird davon ausgegangen, dass er in einem einzeiligen UITextField (oder UIFTETextField) mit einem durch die Stile dieser UIComponent bestimmten UITextFormat angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein TextLineMetrics-Objekt mit den Textabmessungen.
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Ein String, der den zu messenden Text angibt.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Misst den angegebenen Text. Dabei wird davon ausgegangen, dass er in einem einzeiligen UITextField (oder UIFTETextField) mit einem durch die Stile dieser UIComponent bestimmten UITextFormat angezeigt wird. Funktioniert nicht bei Spark-Komponenten, da sie UITextField (oder UIFTETextField) nicht verwenden. Um Text in Spark-Komponenten zu messen, rufen Sie die Maße von spark.components.Label oder spark.components.RichText ab.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:measure"><apiName>measure</apiName><shortdesc>
      Berechnet die Standardgröße und optional die Standardmindestgröße der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Berechnet die Standardgröße und optional die Standardmindestgröße der Komponente. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können.
           <p>Sie können diese Methode nicht direkt aufrufen. Flex ruft die <codeph>measure()</codeph>-Methode auf, wenn die Komponente einem Container mithilfe der <codeph>addChild()</codeph>-Methode hinzufügt und die <codeph>invalidateSize()</codeph>-Methode der Komponente aufgerufen wird. </p>
           <p>Wenn Sie eine bestimmte Höhe und Breite für die Komponente einstellen, ruft Flex die <codeph>measure()</codeph>-Methode nicht auf, auch wenn Sie die <codeph>invalidateSize()</codeph>-Methode explizit aufrufen. Das bedeutet, dass Flex die <codeph>measure()</codeph>-Methode nur aufruft, wenn die Eigenschaft <codeph>explicitWidth</codeph> oder die Eigenschaft <codeph>explicitHeight</codeph> der Komponente „NaN“ entspricht. </p>
           <p>Für die Überschreibung dieser Methode müssen Sie die Eigenschaften <codeph>measuredWidth</codeph> und <codeph>measuredHeight</codeph> festlegen, um die Standardgröße zu definieren. Optional können Sie die Eigenschaften <codeph>measuredMinWidth</codeph> und <codeph>measuredMinHeight</codeph> festlegen, um die Standardmindestgröße zu definieren.</p>
           <p>Die meisten Komponenten berechnen diese Werte anhand des Inhalts, den sie darstellen, und der Eigenschaften, die sich auf die Darstellung des Inhalts auswirken. Einige Komponenten verfügen einfach über fest kodierte Standardwerte. </p>
           <p><codeph>measure()</codeph> wurde dazu konzipiert, dass die Komponente die eigenen natürlichen Werte als Standard bereitstellt. Daher sollten die Eigenschaften <codeph>measuredWidth</codeph> und <codeph>measuredHeight</codeph> von Faktoren wie den folgenden bestimmt werden:</p>
      <ul>
         <li>Textmenge, die von der Komponente angezeigt werden muss.</li>
         <li>Textstile, wie <codeph>fontSize</codeph>.</li>
         <li>Die Größe eines JPEG-Bilds, das von der Komponente angezeigt wird.</li>
         <li>Die gemessenen oder expliziten Größen der untergeordneten Elemente der Komponente.</li>
         <li>Rahmen, Ränder und Zwischenräume.</li>
      </ul>
           <p>In einigen Fällen gibt es keine natürliche Art zur Bestimmung der Standardwerte. Beispielsweise kann eine einfache GreenCircle-Komponente in der <codeph>measure()</codeph>-Methode für measuredWidth = 100 und measuredHeight = 100 festlegen, um eine angemessene Standardgröße anzugeben. In anderen Fällen, wie beispielsweise bei einem Textbereich, kann eine entsprechende Berechnung (wie die Suche nach der richtigen Breite und Höhe zur Anzeige des gesamten Texts im Seitenverhältnis eines Goldenen Rechtecks) zu zeitaufwendig sein.</p>
           <p>Die Standardimplementierung von <codeph>measure()</codeph> setzt <codeph>measuredWidth</codeph>, <codeph>measuredHeight</codeph>, <codeph>measuredMinWidth</codeph> und <codeph>measuredMinHeight</codeph> auf <codeph>0</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:move"><apiName>move</apiName><shortdesc>
       Verschiebt die Komponente innerhalb der übergeordneten Komponente an eine angegebene Position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Position „links“ der Komponente in ihrer übergeordneten Komponente.
             </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position „oben“ der Komponente in ihrer übergeordneten Komponente.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Verschiebt die Komponente innerhalb der übergeordneten Komponente an eine angegebene Position. Das Aufrufen dieser Methode entspricht dem Festlegen der <codeph>x</codeph>- und <codeph>y</codeph>-Eigenschaften.
             <p>Wenn Sie die <codeph>updateDisplayList()</codeph>-Methode in einer benutzerdefinierten Komponente überschreiben, rufen Sie die <codeph>move()</codeph>-Methode auf, statt die <codeph>x</codeph>- und <codeph>y</codeph>-Eigenschaften festzulegen. Der Unterschied besteht darin, dass die <codeph>move()</codeph>-Methode die Position der Komponente ändert und dann ein <codeph>move</codeph>-Ereignis auslöst, sobald Sie die Methode aufrufen. Wenn Sie dagegen die <codeph>x</codeph>- und <codeph>y</codeph>-Eigenschaften festlegen, wird die Position der Komponente geändert und das Ereignis bei der nächsten Bildschirmaktualisierung ausgelöst.</p>
             </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc>
      Propagiert Stiländerungen bis zu den untergeordneten Komponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>String, der den Namen der style-Eigenschaft festlegt.
           </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Benachrichtigt rekursiv alle untergeordneten Elemente dieser Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Propagiert Stiländerungen bis zu den untergeordneten Komponenten. Unter normalen Umständen brauchen Sie diese Methode nie aufzurufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:owns"><apiName>owns</apiName><shortdesc>
      Gibt „true“ zurück, wenn die Kette von „owner“-Eigenschaften von „child“ auf diese UIComponent verweist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn das untergeordnete Objekt diese UIComponent als übergeordnetes Objekt oder Eigentümer hat.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Eine UIComponent.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn die Kette von <codeph>owner</codeph>-Eigenschaften von <codeph>child</codeph> auf diese UIComponent verweist.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      Wird von Flex aufgerufen, wenn ein UIComponent-Objekt einem übergeordneten Element hinzugefügt oder daraus entfernt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Das übergeordnete Objekt dieses UIComponent-Objekts.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird von Flex aufgerufen, wenn ein UIComponent-Objekt einem übergeordneten Element hinzugefügt oder daraus entfernt wird. Unter normalen Umständen brauchen Entwickler diese Methode nie aufzurufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:prepareToPrint"><apiName>prepareToPrint</apiName><shortdesc>
      Bereitet ein IFlexDisplayObject für das Drucken vor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objekt mit den Eigenschaften der aktuellen Komponente, die für die <codeph>finishPrint()</codeph>-Methode zum Wiederherstellen des vorherigen Status benötigt werden.
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Die zu druckende Komponente. Es kann sich um die aktuelle Komponente handeln oder um eines ihrer untergeordneten Elemente.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bereitet ein IFlexDisplayObject für das Drucken vor. Für die UIComponent-Klasse führt die Methode keine Aktion aus. Flex-Container überschreiben die Methode zur Vorbereitung für das Drucken, indem beispielsweise Bildlaufleisten aus der Druckausgabe entfernt werden.
           <p>Diese Methode wird normalerweise von Anwendungsentwicklern nicht verwendet. </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc>
      Erstellt den CSS-Stilcache für diese Komponente. Wenn der recursive-Parameter auf „true“ gesetzt ist, wird der Cache auch für alle untergeordneten Elemente dieser Komponente erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Regeneriert rekursiv den Stilcache für alle untergeordneten Elemente dieser Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt den CSS-Stilcache für diese Komponente. Wenn der <codeph>recursive</codeph>-Parameter auf <codeph>true</codeph> gesetzt ist, wird der Cache auch für alle untergeordneten Elemente dieser Komponente erstellt.
           <p>Das Flex-Framework ruft diese Methode in folgenden Situationen auf:</p>
           <ul>
        <li>Hinzufügen einer UIComponent zu einem übergeordneten Element mit der <codeph>addChild()</codeph>- oder der <codeph>addChildAt()</codeph>-Methode.</li>
        <li>Ändern der <codeph>styleName</codeph>-Eigenschaft einer UIComponent</li>
        <li>Festlegen eines Stils im CSS-Selektor mit der <codeph>setStyle()</codeph>-Methode von CSSStyleDeclaration</li>
      </ul>
           <p>Das Erstellen des Stylecache ist ein rechenintensiver Vorgang. Ändern Sie also <codeph>styleName</codeph> nur, wenn dies unbedingt nötig ist. Dasselbe gilt für das Einstellen von Selektorstilen.</p>
           <p>Diese Methode wird nicht aufgerufen, wenn Sie einen Instanzstil mit der <codeph>setStyle()</codeph>-Methode von UIComponent einstellen. Das Einstellen eines Instanzstils ist im Vergleich zum Einstellen eines Selektorstils ein relativ schneller Vorgang.</p>
           <p>Sie brauchen diese Methode nicht aufzurufen oder zu überschreiben.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
      Registriert den EffectManager jedes Effektereignisses als Ereignis-Listener.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Die Namen der Effektereignisse.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Registriert den EffectManager jedes Effektereignisses als Ereignis-Listener. Unter normalen Umständen brauchen Sie diese Methode nie aufzurufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:removeStyleClient"><apiName>removeStyleClient</apiName><shortdesc>
      Entfernt einen nichtvisuellen Stilclient aus dieser Komponenteninstanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der nicht visuelle Stilclient, der als <codeph>styleClient</codeph>-Parameter übergeben wurde. 
     
      </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>styleClient</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>Der <codeph>IAdvancedStyleClient</codeph>, der aus der Liste nicht visueller Stilclients dieser Komponente entfernt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt einen nichtvisuellen Stilclient aus dieser Komponenteninstanz. Nachdem diese Methode aufgerufen wurde, übernimmt der nicht visuelle Stilclient von dieser Komponenteninstanz keine Stiländerungen mehr. Beim Verwenden dieser Methode wird außerdem die <codeph>styleParent</codeph>-Eigenschaft des <codeph>styleClient</codeph>-Parameters auf <codeph>null</codeph> gesetzt. Wenn der <codeph>styleClient</codeph> dieser Komponenteninstanz nicht hinzugefügt wurde, wird keine Aktion ausgeführt. 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.addStyleClient.xml"><linktext>addStyleClient</linktext></link><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      Wiederholt das festgelegte Ereignis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn eine Wiederholung erfolgreich war.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das zu wiederholende Ereignis.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wiederholt das festgelegte Ereignis. Komponentenautoren sollten super.replayAutomatableEvent für den Fall aufrufen, dass das voreingestellte Wiederholverhalten in einer Superklasse definiert wurde.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      
      Löst ein untergeordnetes Element mithilfe der bereitgestellten ID auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Array von untergeordneten Elementen, auf welche die Kriterien zutrafen oder <codeph>null</codeph>, wenn keine untergeordneten Elemente aufgelöst werden konnten.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/><apiDesc>Satz Eigenschaften, welcher das untergeordnete Element beschreibt. Die Kriterien können reguläre Ausdruckswerte enthalten, was zur Übereinstimmung mehrerer untergeordneter Elemente mit den Kriterien führen kann.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Löst ein untergeordnetes Element mithilfe der bereitgestellten ID auf. Die ID ist ein Satz Eigenschaften, der von der <codeph>createAutomationIDPart()</codeph>-Methode bereitgestellt wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      Diese Methode wird aufgerufen, wenn eine UIComponent erstellt wird, und wird erneut aufgerufen, wenn der ResourceManager ein „change“-Ereignis auslöst, um anzugeben, dass sich die lokalisierten Ressourcen geändert haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Diese Methode wird aufgerufen, wenn eine UIComponent erstellt wird, und wird erneut aufgerufen, wenn ResourceManager ein <codeph>"change"</codeph>-Ereignis auslöst, um anzugeben, dass sich die lokalisierten Ressourcen geändert haben.
           <p>Dieses Ereignis wird ausgelöst, wenn Sie die <codeph>localeChain</codeph>-Eigenschaft des ResourceManager setzen, wenn ein Ressourcenmodul den Ladevorgang abgeschlossen hat und wenn Sie die <codeph>update()</codeph>-Methode des ResourceManager aufrufen.</p>
           <p>Unterklassen sollten diese Methode überschreiben und nach dem Aufruf von <codeph>super.resourcesChanged()</codeph> einen als Antwort auf die neuen Ressourcenwerte angemessenen Vorgang ausführen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resumeBackgroundProcessing"><apiName>resumeBackgroundProcessing</apiName><shortdesc>
      Setzt die Hintergrundverarbeitung von Methoden fort, die durch callLater() in die Warteschlange gestellt wurden, nachdem suspendBackgroundProcessing() aufgerufen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt die Hintergrundverarbeitung von Methoden fort, die durch <codeph>callLater()</codeph> in die Warteschlange gestellt wurden, nachdem <codeph>suspendBackgroundProcessing()</codeph> aufgerufen wurde.
           <p>Weitere Informationen finden Sie in der Beschreibung zu <codeph>suspendBackgroundProcessing()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      Ändert die Größe des Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Breite des Objekts.
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Höhe des Objekts.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert die Größe des Objekts. Anders als beim direkten Einstellen der <codeph>width</codeph>- und <codeph>height</codeph>-Eigenschaften werden durch Aufrufen der <codeph>setActualSize()</codeph>-Methode nicht die <codeph>explictWidth</codeph>- und <codeph>explicitHeight</codeph>-Eigenschaften eingestellt, sodass bei einer nachfolgenden Layoutberechnung möglicherweise die vorherige Größe des Objekts wiederhergestellt werden kann. Diese Methode wird hauptsächlich von Komponentenentwicklern verwendet, die die <codeph>updateDisplayList()</codeph>-Methode implementieren, sowie von Effekten und vom LayoutManager.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      Legt einen Layout-Beschränkungswert fest. Der Wert entspricht dem beim Festlegen des Beschränkungsstils für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Der Name des Beschränkungsstils, welcher einer der folgenden sein kann: „left“, „right“, „top“, „bottom“, „verticalCenter“, „horizontalCenter“, „baseline“.
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Der Wert der Beschränkung kann auf zwei verschiedene Arten angegeben werden. Der Wert kann ein numerischer String, beispielsweise „10“ sein, oder in Form von „identifier:numeric string“ angegeben werden. Bei „identifier:numeric string“ steht „identifier“ für die <codeph>id</codeph> einer ConstraintRow oder ConstraintColumn. Beispiel: Ein Wert von „cc1:10“ gibt einen Wert von „10“ für die ConstraintColumn mit der <codeph>id</codeph> „cc1“ an.
           
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt einen Layout-Beschränkungswert fest. Der Wert entspricht dem beim Festlegen des Beschränkungsstils für diese Komponente.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setCurrentState"><apiName>setCurrentState</apiName><shortdesc>
      Legt den aktuellen Status fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Der Name des neuen Ansichtsstatus.
           </apiDesc></apiParam><apiParam><apiItemName>playTransition</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> wird der entsprechende Übergang wiedergegeben, wenn sich der Ansichtsstatus ändert.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt den aktuellen Status fest.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/currentState"><linktext>currentState</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      Legt den Fokus auf diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Legt den Fokus auf diese Komponente. Die Komponente kann den Fokus wiederum an eine Unterkomponente übergeben.
           <p><b>Hinweis:</b> Wenn der Fokus mit dieser Methode festgelegt wird, werden nur TextInput- und TextArea-Steuerelemente hervorgehoben. Alle Steuerelemente werden hervorgehoben, wenn der Benutzer durch Drücken der Tabulatortaste zu einem Steuerelement wechselt.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      
      Legt die Koordinaten fest, die für das Zeichnen des Elements auf dem Bildschirm verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate in der linken oberen Ecke des Begrenzungsrahmens  
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate in der linken oberen Ecke des Begrenzungsrahmens.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf <codeph>true</codeph> eingestellt ist, wird das Element so platziert, dass die linke obere Ecke des Begrenzungsrahmens gleich (x, y) ist. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Legt die Koordinaten fest, die für das Zeichnen des Elements auf dem Bildschirm verwendet werden.
           <p>Aufrufe der <codeph>setLayoutBoundSize()</codeph>-Methode können sich auf die Layoutposition auswirken. Rufen Sie deshalb <codeph>setLayoutBoundPosition()</codeph> auf, nachdem Sie <codeph>setLayoutBoundSize()</codeph> aufgerufen haben.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      
      Legt die Layoutgröße des Elements fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Layoutbreite des Elements.
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Layouthöhe des Elements.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf „true“ eingestellt ist, entsprechen die angegebenen Größen denen des Begrenzungsrahmens des Elements. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Legt die Layoutgröße des Elements fest. Dies ist die Größe, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
      
      <p>Wenn die <codeph>width</codeph>- und/oder <codeph>height</codeph>-Parameter nicht angegebene werden (NaN), stellt Flex die Layoutgröße des Elements auf dessen bevorzugte Breite bzw. Höhe ein.</p>
     
      <p>Aufrufe der <codeph>setLayoutBoundSize()</codeph>-Methode können sich auf die Layoutposition auswirken. Rufen Sie deshalb <codeph>setLayoutBoundPosition()</codeph> auf, nachdem Sie <codeph>setLayoutBoundSize()</codeph> aufgerufen haben.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      
      Legt die Transformations-Matrix3D fest, die zur Berechnung der Layoutgröße und -position der Komponenete relativ zu ihren Parallelobjekten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/><apiDesc>Die Matrix.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, um den übergeordneten Container zu zwingen, seine untergeordneten Elemente neu anzuordnen. Normalerweise übergeben Sie <codeph>true</codeph> an die <codeph>invalidateLayout()</codeph>-Methode.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Legt die Transformations-Matrix3D fest, die zur Berechnung der Layoutgröße und -position der Komponenete relativ zu ihren Parallelobjekten verwendet wird.
           <p>Diese Matrix wird normalerweise durch die Transformationseigenschaften der Komponente definiert, wie etwa <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph>. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>-Eigenschaft.</p>
      
      <p>Beachten Sie, dass die Layout-Matrix3D in <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> und <codeph>getLayoutSize()</codeph> berücksichtigt wird, wenn sie in übergeordneten Koordinaten berechnet wird, und in <codeph>getLayoutPosition()</codeph> für übergeordnete und untergeordnete Koordinaten. Layouts, die die Transformationsmatrix explizit berechnen, rufen diese Methode normalerweise auf und arbeiten mit Größen in untergeordneten Koordinaten. Layouts, die diese Methode aufrufen, übergeben <codeph>false</codeph> an die <codeph>invalidateLayout()</codeph>-Methode, sodass keine nachfolgende Übergabe eines Layouts ausgelöst wird.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      
      Legt die Transformationsmatrix fest, die verwendet wird, um die Layoutgröße der Komponente und die Position relativ zu den Geschwisterelementen zu berechnen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/><apiDesc>Die Matrix.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, um den übergeordneten Container zu zwingen, seine untergeordneten Elemente neu anzuordnen. Normalerweise übergeben Sie <codeph>true</codeph> an die <codeph>invalidateLayout()</codeph>-Methode.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Legt die Transformationsmatrix fest, die verwendet wird, um die Layoutgröße der Komponente und die Position relativ zu den Geschwisterelementen zu berechnen.
           <p>Die Matrix wird normalerweise mit den 2D-Eigenschaften der Komponente wie <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph> definiert. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>.</p>
      
      <p>Beachten Sie, dass die Layout-Matrix in <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> und <codeph>getLayoutSize()</codeph> unterteilt ist, wenn sie in übergeordneten Koordinaten berechnet wird, sowie in <codeph>getLayoutPosition()</codeph> für übergeordnete und untergeordnete Koordinaten. Layouts, die die Transformationsmatrix explizit berechnen, rufen diese Methode normalerweise auf und arbeiten mit Größen in untergeordneten Koordinaten. Layouts, die diese Methode aufrufen, übergeben <codeph>false</codeph> an die <codeph>invalidateLayout()</codeph>-Methode, sodass keine nachfolgende Übergabe eines Layouts ausgelöst wird.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:setStretchXY"><apiName>setStretchXY</apiName><shortdesc>
      Gibt einen Dehnfaktor für die Transformation in die horizontale und vertikale Richtung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stretchX</apiItemName><apiType value="Number"/><apiDesc>Die horizontale Komponente des Dehnfaktors.
      </apiDesc></apiParam><apiParam><apiItemName>stretchY</apiItemName><apiType value="Number"/><apiDesc>Die vertikale Komponente des Dehnfaktors.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt einen Dehnfaktor für die Transformation in die horizontale und vertikale Richtung an. Der Dehnfaktor wird auf die berechnete Matrix vor allen anderen Transformationen angewendet.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setStyle"><apiName>setStyle</apiName><shortdesc>
      Legt eine Stileigenschaft für diese Komponenteninstanz fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Name der style-Eigenschaft.
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>Neuer Wert für den Stil.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt eine Stileigenschaft für diese Komponenteninstanz fest.
           <p>Dieser Stil kann einen global festgelegten Stil überschreiben.</p>
           <p>Der Aufruf der <codeph>setStyle()</codeph>-Methode kann zu einer verringerten Leistung führen. Verwenden Sie diese Methode nur, wenn unbedingt notwendig.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setVisible"><apiName>setVisible</apiName><shortdesc>
      Wird aufgerufen, wenn sich die visible-Eigenschaft ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Der neue Wert der <codeph>visible</codeph>-Eigenschaft. Geben Sie <codeph>true</codeph> an, um die Komponente einzublenden, und <codeph>false</codeph>, um sie auszublenden.
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Ist der Wert <codeph>true</codeph>, sollten Sie kein Ereignis auslösen. Ist der Wert <codeph>false</codeph>, lösen Sie, wenn die Komponente sichtbar wird, ein <codeph>show</codeph>-Ereignis, und wenn sie nicht sichtbar wird, ein <codeph>hide</codeph>-Ereignis aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn sich die <codeph>visible</codeph>-Eigenschaft ändert. Stellen Sie die <codeph>visible</codeph>-Eigenschaft ein, um eine Komponente ein- oder auszublenden, statt diese Methode direkt aufzurufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:stateChanged"><apiName>stateChanged</apiName><shortdesc>
      Diese Methode wird aufgerufen, wenn sich ein Status ändert, um zu überprüfen, ob statusspezifische Stile auf diese Komponente anwendbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="String"/><apiDesc>Der Name des alten Status.
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="String"/><apiDesc>Der Name des neuen Status.
           </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Legen Sie <codeph>true</codeph> fest, um eine rekursive Prüfung auszuführen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Methode wird aufgerufen, wenn sich ein Status ändert, um zu überprüfen, ob statusspezifische Stile auf diese Komponente anwendbar sind. Wenn ein entsprechender CSS-Pseudoselektor für den aktuellen Status möglicherweise vorhanden ist, muss der Stilcache für diese Instanz neu generiert werden. Das gleiche gilt für alle untergeordneten Elemente, wenn der <codeph>recursive</codeph>-Parameter auf <codeph>true</codeph> gesetzt ist.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      Erkennt Änderungen an Stileigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Der Name der Stileigenschaft oder „null“, wenn sich alle Stile für diese Komponente geändert haben.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erkennt Änderungen an Stileigenschaften. Ist eine Stileigenschaft eingestellt, ruft Flex die <codeph>styleChanged()</codeph>-Methode auf und übergibt an sie den Namen des eingestellten Stils.
           <p>Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können. Wenn Sie eine benutzerdefinierte Komponente erstellen, können Sie die <codeph>styleChanged()</codeph>-Methode überschreiben, um den an sie übergebenen Stilnamen zu prüfen, und die Änderung entsprechend verarbeiten. Auf diese Weise können Sie das Standardverhalten eines vorhandenen Stils überschreiben oder Ihre eigenen benutzerdefinierten Stileigenschaften hinzufügen.</p>
           <p>Bei einer Stileigenschaft muss Ihre Überschreibung der <codeph>styleChanged()</codeph>-Methode die <codeph>invalidateDisplayList()</codeph>-Methode aufrufen, damit Flex die <codeph>updateDisplayList()</codeph>-Methode der Komponente bei der nächsten Bildschirmaktualisierung ausführt.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      Flex ruft die stylesInitialized()-Methode auf, wenn die Stile für eine Komponente zum ersten Mal initialisiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Flex ruft die <codeph>stylesInitialized()</codeph>-Methode auf, wenn die Stile für eine Komponente zum ersten Mal initialisiert werden.
           <p>Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können. Flex garantiert, dass die Stile Ihrer Komponente vollständig initialisiert werden, bevor die <codeph>measure</codeph>- und die <codeph>updateDisplayList()</codeph>-Methode Ihrer Komponente zum ersten Mal aufgerufen werden. Für die meisten Komponenten ist dies ausreichend. Wenn Sie jedoch früher auf Stilwerte zugreifen müssen, können Sie die stylesInitialized()-Funktion überschreiben, um gleich nach der ersten Initialisierung auf die die Stileigenschaften zuzugreifen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Blockiert die Hintergrundverarbeitung von Methoden, die durch callLater() in die Warteschlange gestellt wurden, bis resumeBackgroundProcessing() aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Blockiert die Hintergrundverarbeitung von Methoden, die durch <codeph>callLater()</codeph> in die Warteschlange gestellt wurden, bis <codeph>resumeBackgroundProcessing()</codeph> aufgerufen wird.
           <p>Diese Methoden können bei zeitkritischem Code nützlich sein, der ohne Unterbrechung ausgeführt werden muss. Wenn Sie beispielsweise die <codeph>suspendBackgroundProcessing</codeph>-Eigenschaft eines Effekts auf <codeph>true</codeph> setzen, wird <codeph>suspendBackgroundProcessing()</codeph> automatisch zu Beginn und <codeph>resumeBackgroundProcessing</codeph> am Ende der Wiedergabe aufgerufen, damit die Animation flüssig und ohne Stocken abläuft.</p>
           <p>Da der LayoutManager <codeph>callLater()</codeph> verwendet, werden <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> und <codeph>updateDisplayList()</codeph> nicht zwischen <codeph>suspendBackgroundProcessing()</codeph> und <codeph>resumeBackgroundProcessing()</codeph> aufgerufen.</p>
           <p>Sowohl eine äußere als auch eine innere Methode (d. h. die von äußeren Methoden aufgerufene Methode) können <codeph>suspendBackgroundProcessing()</codeph> und <codeph>resumeBackgroundProcessing()</codeph> sicher aufrufen, da diese Methoden einen Zählerwert erhöhen oder verringern, der bestimmt, ob eine Hintergrundverarbeitung erfolgt.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformAround"><apiName>transformAround</apiName><shortdesc conref="mx.core.ILayoutElement#transformAround()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Der Punkt (in den Koordinaten der Komponente selbst), der relativ zu seinem übergeordneten Objekt unverändert erhalten bleiben soll.
           </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Skalierung der Transformation.
           </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Drehung der Transformation
           </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Versetzung der Transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Skalierung der Transformation nach dem Layout.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Drehung der Transformation nach dem Layout.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Versetzung der Transformation nach dem Layout.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> sind die Größe und Anzeige des übergeordneten Containers ungültig. Layouts, die diese Methode aufrufen, übergeben <codeph>false</codeph>, sodass eine darauf folgende Übergabe durch das Layout nicht ausgelöst wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.ILayoutElement#transformAround()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformPointToParent"><apiName>transformPointToParent</apiName><shortdesc>
      Eine Dienstmethode, mit der die lokalen Koordinaten eines Punkts dieses Objekts transformiert werden in seine Position innerhalb der Koordinaten des übergeordneten Elements dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>localPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Der zu transformierende Punkt, angegeben in den lokalen Koordinaten des Objekts.
     
      </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Ein Vector3D-Punkt zur Aufnahme des Ergebnisses vor dem Layout. Bei null wird der Parameter ignoriert.
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Ein Vector3D-Punkt zur Aufnahme des Ergebnisses nach dem Layout. Bei null wird der Parameter ignoriert.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eine Dienstmethode, mit der die lokalen Koordinaten eines Punkts dieses Objekts transformiert werden in seine Position innerhalb der Koordinaten des übergeordneten Elements dieses Objekts. Die Ergebnisse vor und nach dem Layout werden in den Parametern <codeph>position</codeph> und <codeph>postLayoutPosition</codeph> festgelegt, wenn sie nicht null sind.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Zeichnet die Objekte und/oder Größen und platziert die untergeordneten Elemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Legt die Breite der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleX</codeph>-Eigenschaft der Komponente.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Legt die Höhe der Komponente in Pixeln und deren Koordinaten fest, unabhängig vom Wert der <codeph>scaleY</codeph>-Eigenschaft der Komponente.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Zeichnet die Objekte und/oder Größen und platziert die untergeordneten Elemente. Dies ist eine erweiterte Methode, die Sie bei der Erstellung einer UIComponent-Unterklasse überschreiben können.
           <p>Sie können diese Methode nicht direkt aufrufen. Flex ruft die <codeph>updateDisplayList()</codeph>-Methode auf, wenn eine Komponente einem Container mit der <codeph>addChild()</codeph>-Methode hinzugefügt wird und die <codeph>invalidateDisplayList()</codeph>-Methode der Komponente aufgerufen wird. </p>
           <p>Bei Komponenten ohne untergeordnete Elemente verwenden Sie hier das programmgesteuerte Zeichnen mit Methoden der Grafikobjekte einer Komponente wie <codeph>graphics.drawRect()</codeph>.</p>
           <p>Bei Komponenten mit untergeordneten Elementen rufen Sie hier die <codeph>move()</codeph>- und <codeph>setActualSize()</codeph>-Methode in den untergeordneten Elementen auf.</p>
           <p>Komponenten können programmgesteuert zeichnen, auch wenn sie untergeordnete Objekte haben. Verwenden Sie dabei die Eigenschaften <codeph>unscaledWidth</codeph> und <codeph>unscaledHeight</codeph> der Komponente als Grenzen.</p>
           <p>Es ist wichtig, dass Sie die Eigenschaften <codeph>unscaledWidth</codeph> und <codeph>unscaledHeight</codeph> statt der Eigenschaften <codeph>width</codeph> und <codeph>height</codeph> verwenden.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      
      Validiert die Position und Größe der untergeordneten Elemente und zeigt Grafiken an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Validiert die Position und Größe der untergeordneten Elemente und zeigt Grafiken an. Wird die <codeph>LayoutManager.invalidateDisplayList()</codeph>-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die <codeph>validateDisplayList()</codeph>-Methode zum Zeitpunkt der Anzeigelisten-Aktualisierung verwendet.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateNow"><apiName>validateNow</apiName><shortdesc>
      Validiert und aktualisiert die Eigenschaften und das Layout dieses Objekts und zeichnet es ggf. neu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Validiert und aktualisiert die Eigenschaften und das Layout dieses Objekts und zeichnet es ggf. neu. Verarbeitungseigenschaften, die eine umfangreiche Berechnung erfordern, werden in der Regel erst verarbeitet, nachdem das Skript ausgeführt wurde. Beispielsweise wird das Festlegen der <codeph>width</codeph>-Eigenschaft verzögert, weil dafür eine Neuberechnung der Breiten der untergeordneten Objekte oder des übergeordneten Objekts erforderlich sein kann. Eine Verzögerung der Verarbeitung verhindert auch, dass sie mehrfach wiederholt werden muss, wenn der Programmcode der Anwendung die <codeph>width</codeph>-Eigenschaft mehr als einmal festlegt. Mit dieser Methode können Sie dieses Verhalten überschreiben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      Wird von der Layoutlogik verwendet, um die Eigenschaften einer Komponente durch Aufrufen der commitProperties()-Methode zu validieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Wird von der Layoutlogik verwendet, um die Eigenschaften einer Komponente durch Aufrufen der <codeph>commitProperties()</codeph>-Methode zu validieren. Im Allgemeinen sollten Unterklassen die <codeph>commitProperties()</codeph>-Methode und nicht diese Methode überschreiben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateSize"><apiName>validateSize</apiName><shortdesc>
      
      Validiert die gemessene Größe der Komponente. Wird die LayoutManager.invalidateSize()-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die validateSize()-Methode zum Zeitpunkt der Messung verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bei <codeph>true</codeph> rufen Sie diese Methode für die untergeordneten Elemente des Objekts auf.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Validiert die gemessene Größe der Komponente. Wird die <codeph>LayoutManager.invalidateSize()</codeph>-Methode für diesen ILayoutManagerClient aufgerufen, dann wird die <codeph>validateSize()</codeph>-Methode zum Zeitpunkt der Messung verwendet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
      Verwaltet sowohl die gültigen als auch die ungültigen Ereignisse eines Validators, der dieser Komponente zugewiesen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>Das Ereignisobjekt für die Überprüfung.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verwaltet sowohl die <codeph>valid</codeph>- als auch die <codeph>invalid</codeph>-Ereignisse eines Validators, der dieser Komponente zugewiesen wurde.
           <p>Normalerweise verwalten Sie die <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse, die von einem Validator ausgelöst wurden, indem Sie den Validators Ereignis-Listener zuweisen. Wenn Sie Überprüfungsereignisse direkt in der Komponente verwalten möchten, die überprüft wird, können Sie diese Methode für die Verwaltung der <codeph>valid</codeph>- und <codeph>invalid</codeph>-Ereignisse überschreiben. Üblicherweise rufen Sie <codeph>super.validationResultHandler(event)</codeph> in der Überschreibung auf.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:verticalGradientMatrix"><apiName>verticalGradientMatrix</apiName><shortdesc>
      Gibt eine Box-Matrix zurück, die an die drawRoundRect()-Methode als rot-Parameter übergeben werden kann, wenn ein vertikaler Farbverlauf gezeichnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Matrix für den vertikalen Farbverlauf.
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die linke Koordinate des Farbverlaufs in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die obere Koordinate des Farbverlaufs in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Breite des Farbverlaufs in Pixeln.
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Höhe des Farbverlaufs in Pixeln.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt eine Box-Matrix zurück, die an die <codeph>drawRoundRect()</codeph>-Methode als <codeph>rot</codeph>-Parameter übergeben werden kann, wenn ein vertikaler Farbverlauf gezeichnet wird.
           <p>Zur Verbesserung der Leistung wird die Matrix in einer statischen Variablen gespeichert, die bei jedem Aufruf von <codeph>horizontalGradientMatrix()</codeph> und <codeph>verticalGradientMatrix()</codeph> verwendet wird. Übergeben Sie daher die Ergebnismatrix an <codeph>drawRoundRect()</codeph>, bevor Sie <codeph>horizontalGradientMatrix()</codeph> oder <codeph>verticalGradientMatrix()</codeph> erneut aufrufen.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UIComponent:DEFAULT_MAX_HEIGHT"><apiName>DEFAULT_MAX_HEIGHT</apiName><shortdesc>
      Der Standardwert für die maxHeight-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>maxHeight</codeph>-Eigenschaft.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MAX_WIDTH"><apiName>DEFAULT_MAX_WIDTH</apiName><shortdesc>
      Der Standardwert für die maxWidth-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>maxWidth</codeph>-Eigenschaft.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_HEIGHT"><apiName>DEFAULT_MEASURED_HEIGHT</apiName><shortdesc>
      Der Standardwert für die measuredHeight-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>measuredHeight</codeph>-Eigenschaft. Die meisten Komponenten berechnen measuredHeight, einige sind jedoch ablaufbasiert und müssen eine geeignete Zahl auswählen.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_HEIGHT"><apiName>DEFAULT_MEASURED_MIN_HEIGHT</apiName><shortdesc>
      Der Standardwert für die measuredMinHeight-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>measuredMinHeight</codeph>-Eigenschaft. Die meisten Komponenten berechnen measuredMinHeight, einige sind jedoch ablaufbasiert und müssen eine geeignete Zahl auswählen.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_WIDTH"><apiName>DEFAULT_MEASURED_MIN_WIDTH</apiName><shortdesc>
      Der Standardwert für die measuredMinWidth-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>40</apiData><apiType value="Number"/><apiDefaultValue>40
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>measuredMinWidth</codeph>-Eigenschaft. Die meisten Komponenten berechnen measuredMinWidth, einige sind jedoch ablaufbasiert und müssen eine geeignete Zahl auswählen.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_WIDTH"><apiName>DEFAULT_MEASURED_WIDTH</apiName><shortdesc>
      Der Standardwert für die measuredWidth-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/><apiDefaultValue>160
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Standardwert für die <codeph>measuredWidth</codeph>-Eigenschaft. Die meisten Komponenten berechnen measuredWidth, einige sind jedoch ablaufbasiert und müssen eine geeignete Zahl auswählen.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityDescription:get"><apiName>accessibilityDescription</apiName><shortdesc>
      Ein hilfreicher Accessor für die description-Eigenschaft des accessibilityProperties-Objekts dieser UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Ein hilfreicher Accessor für die <codeph>description</codeph>-Eigenschaft des <codeph>accessibilityProperties</codeph>-Objekts dieser UIComponent.
           <p>Die Get-Methode gibt einfach <codeph>accessibilityProperties.description</codeph> zurück oder "", wenn <codeph>accessibilityProperties</codeph> null ist. Die Set-Methode prüft zuerst, ob <codeph>accessibilityProperties</codeph> null ist, und wenn dies zutrifft, legt sie hierfür eine neue AccessibilityProperties-Instanz fest. Anschließend legt sie <codeph>accessibilityProperties.description</codeph> fest.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityEnabled:get"><apiName>accessibilityEnabled</apiName><shortdesc>
      Ein hilfreicher Accessor für die silent-Eigenschaft des accessibilityProperties-Objekts dieser UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein hilfreicher Accessor für die <codeph>silent</codeph>-Eigenschaft des <codeph>accessibilityProperties</codeph>-Objekts dieser UIComponent.
           <p>Beachten Sie, dass <codeph>accessibilityEnabled</codeph> das Gegenteil von „silent“ bedeutet; <codeph>accessibilityEnabled</codeph> ist <codeph>true</codeph>, wenn <codeph>silent</codeph> <codeph>false</codeph> ist.</p>
           <p>Die Get-Methode gibt einfach <codeph>accessibilityProperties.silent</codeph> zurück oder <codeph>true</codeph>, wenn <codeph>accessibilityProperties</codeph> null ist. Die Set-Methode prüft zuerst, ob <codeph>accessibilityProperties</codeph> null ist, und wenn dies zutrifft, legt sie hierfür eine neue AccessibilityProperties-Instanz fest. Anschließend legt sie <codeph>accessibilityProperties.silent</codeph> fest.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityName:get"><apiName>accessibilityName</apiName><shortdesc>
      Ein hilfreicher Accessor für die name-Eigenschaft des accessibilityProperties-Objekts dieser UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Ein hilfreicher Accessor für die <codeph>name</codeph>-Eigenschaft des <codeph>accessibilityProperties</codeph>-Objekts dieser UIComponent.
           <p>Die Get-Methode gibt einfach <codeph>accessibilityProperties.name</codeph> zurück oder "", wenn accessibilityProperties null ist. Die Set-Methode prüft zuerst, ob <codeph>accessibilityProperties</codeph> null ist, und wenn dies zutrifft, legt sie hierfür eine neue AccessibilityProperties-Instanz fest. Dann legt sie <codeph>accessibilityProperties.name</codeph> fest.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityShortcut:get"><apiName>accessibilityShortcut</apiName><shortdesc>
      Ein hilfreicher Accessor für die shortcut-Eigenschaft des accessibilityProperties-Objekts dieser UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Ein hilfreicher Accessor für die <codeph>shortcut</codeph>-Eigenschaft des <codeph>accessibilityProperties</codeph>-Objekts dieser UIComponent.
           <p>Die Get-Methode gibt einfach <codeph>accessibilityProperties.shortcut</codeph> zurück oder "", wenn <codeph>accessibilityProperties</codeph> null ist. Die Set-Methode prüft zuerst, ob <codeph>accessibilityProperties</codeph> null ist, und wenn dies zutrifft, legt sie hierfür eine neue AccessibilityProperties-Instanz fest. Dann legt sie <codeph>accessibilityProperties.shortcut</codeph> fest.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:activeEffects:get"><apiName>activeEffects</apiName><shortdesc>
      Die derzeit auf der Komponente wiedergegebenen Effekte als Array von EffectInstance-Instanzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Die derzeit auf der Komponente wiedergegebenen Effekte als Array von EffectInstance-Instanzen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Das Delegatenobjekt, welches die automatisierungsbezogene Funktionalität verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Das Delegatenobjekt, welches die automatisierungsbezogene Funktionalität verarbeitet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      „True“, wenn diese Komponente automationsfähig ist, andernfalls „false“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      „True“, wenn diese Komponente automationsfähig ist, andernfalls „false“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      Name, der als Bezeichner für dieses Objekt verwendet werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Name, der als Bezeichner für dieses Objekt verwendet werden kann.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      Der Eigentümer dieser Komponente für Automationszwecke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Der Eigentümer dieser Komponente für Automationszwecke.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      Das übergeordnete Element dieser Komponente für Automationszwecke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Das übergeordnete Element dieser Komponente für Automationszwecke.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      
      Implementierung der IAutomationTabularData-Schnittstelle, welche verwendet werden kann, um die Daten abzurufen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Implementierung der <codeph>IAutomationTabularData</codeph>-Schnittstelle, welche verwendet werden kann, um die Daten abzurufen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      „True“, wenn diese Komponente für die Automation sichtbar ist, andernfalls „false“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      „True“, wenn diese Komponente für die Automation sichtbar ist, andernfalls „false“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      Die y-Koordinate der Grundlinie der ersten Textzeile der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Die y-Koordinate der Grundlinie der ersten Textzeile der Komponente.
     
      <p>Diese Eigenschaft dient der Implementierung des <codeph>baseline</codeph>-Beschränkungsstils. Sie wird auch zum Ausrichten der Beschriftung eines FormItem an den Steuerelementen im FormItem verwendet.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baseline:get"><apiName>baseline</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive in MXML oder dem Wert <codeph>undefined</codeph> im ActionScript-Code für die Eigenschaft den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>baseline.s2="@Clear()"</codeph> die <codeph>baseline</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.baseline = undefined</codeph> die <codeph>baseline</codeph>-Beschränkung des <codeph>button</codeph>.</p>
      
      
      Der vertikale Abstand in Pixeln vom Ankerziel zur Grundlinienposition des Steuerelements.
           <p>Standardmäßig entspricht das Ankerziel dem oberen Rand des Inhaltsbereichs im Container. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungszeile sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:bottom:get"><apiName>bottom</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive in MXML oder dem Wert <codeph>undefined</codeph> im ActionScript-Code für die Eigenschaft den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>bottom.s2="@Clear()"</codeph> die <codeph>bottom</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.bottom = undefined</codeph> die <codeph>bottom</codeph>-Beschränkung des <codeph>button</codeph>.</p>
      
      
      Der vertikale Abstand in Pixeln vom unteren Rand der Komponente zum unteren Rand des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungszeile sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc>
      Gibt die für dieses Objekt verwendete Richtlinie für das Bitmapcaching an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>UIComponentCachePolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die für dieses Objekt verwendete Richtlinie für das Bitmapcaching an. Gültige Werte in MXML sind <codeph>"on"</codeph>, <codeph>"off"</codeph> und <codeph>"auto"</codeph> (Standard).
           <p>Mögliche Werte in ActionScript sind <codeph>UIComponentCachePolicy.ON</codeph>, <codeph>UIComponentCachePolicy.OFF</codeph> und <codeph>UIComponentCachePolicy.AUTO</codeph> (Standard).</p>
           <p><ul>
        <li>Der Wert <codeph>UIComponentCachePolicy.ON</codeph> bedeutet, dass das Objekt immer als Bitmap zwischengespeichert wird.</li>
        <li>Der Wert <codeph>UIComponentCachePolicy.OFF</codeph> bedeutet, dass das Objekt nie als Bitmap zwischengespeichert wird.</li>
        <li>Der Wert <codeph>UIComponentCachePolicy.AUTO</codeph> bedeutet, dass das Framework heuristisch bestimmt, ob das Objekt als Bitmap gespeichert werden soll.</li>
      </ul></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:className:get"><apiName>className</apiName><shortdesc>
      Der Name der Klasse dieser Instanz, beispielsweise „Button“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Name der Klasse dieser Instanz, beispielsweise <codeph>Button</codeph>.
           <p>Dieser String enthält nicht den Paketnamen. Wenn Sie den Paketnamen ebenfalls benötigen, rufen Sie die <codeph>getQualifiedClassName()</codeph>-Methode im flash.utils-Paket auf. Dadurch wird ein String wie beispielsweise <codeph>"mx.controls::Button"</codeph> zurückgegeben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc>
      Gibt die x-Position der Maus im Inhaltskoordinatensystem zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die <i>x</i>-Position der Maus im Inhaltskoordinatensystem zurück. Inhaltskoordinaten geben eine Pixelposition relativ zur linken oberen Ecke des Inhalts der Komponente an und schließen den gesamten Inhaltsbereich der Komponente ein, sogar Bereiche, die derzeit abgeschnitten sind und durch einen Bildlauf angezeigt werden müssen. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc>
      Gibt die y-Position der Maus im Inhaltskoordinatensystem zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die <i>y</i>-Position der Maus im Inhaltskoordinatensystem zurück. Inhaltskoordinaten geben eine Pixelposition relativ zur linken oberen Ecke des Inhalts der Komponente an und schließen den gesamten Inhaltsbereich der Komponente ein, sogar Bereiche, die derzeit abgeschnitten sind und durch einen Bildlauf angezeigt werden müssen. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Der Status, der beim Zuordnen von CSS-Pseudoselektoren zu verwenden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Status, der beim Zuordnen von CSS-Pseudoselektoren zu verwenden ist. Standardmäßig ist dies <codeph>currentState</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:currentState:get"><apiName>currentState</apiName><shortdesc>
      Der aktuelle Ansichtsstatus der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="currentStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der aktuelle Ansichtsstatus der Komponente. Auf <codeph>""</codeph> oder <codeph>null</codeph> setzen, um die Komponente auf den Basisstatus zurückzusetzen.
           <p>Wenn Sie den Status einer Komponente mit dieser Eigenschaft einstellen, wendet Flex den von Ihnen definierten Übergang an. Sie können auch die <codeph>setCurrentState()</codeph>-Methode verwenden, um den aktuellen Status einzustellen. Diese Methode kann optional den Status ohne Anwendung eines Übergangs ändern.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setCurrentState()"><linktext>setCurrentState()</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:cursorManager:get"><apiName>cursorManager</apiName><shortdesc>
      Ruft den CursorManager ab, der den Cursor dieser und gleichrangiger Komponenten steuert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.managers:ICursorManager"/></apiValueDef><apiDesc>
      Ruft den CursorManager ab, der den Cursor dieser und gleichrangiger Komponenten steuert. Jedes Fenster auf oberster Ebene verfügt über eine eigene CursorManager-Instanz. Mit dieser Methode stellen Sie sicher, dass Sie mit der richtigen Instanz kommunizieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:depth:get"><apiName>depth</apiName><shortdesc>
      
      Bestimmt die Reihenfolge, in der die Elemente innerhalb von Containern gerendert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Legt die Reihenfolge zum Rendern von Elementen in Containern fest. In Spark-Containern werden Elemente auf der Basis ihrer <codeph>depth</codeph>-Eigenschaft angeordnet. Die unterste Tiefe befindet sich hinten, die darüber liegenden Tiefen davor. Elemente mit demselben Tiefenwert werden in der Reihenfolge angezeigt, in der sie dem Container hinzugefügt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc>
      Verweis auf den UIComponentDescriptor, der von der createComponentFromDescriptor()-Methode ggf. zum Erstellen dieser UIComponent-Instanz verwendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      Verweis auf den UIComponentDescriptor, der von der <codeph>createComponentFromDescriptor()</codeph>-Methode ggf. zum Erstellen dieser UIComponent-Instanz verwendet wurde. Wenn diese UIComponent-Instanz nicht aus einem Deskriptor erstellt wurde, entspricht diese Eigenschaft null.
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:designLayer:get"><apiName>designLayer</apiName><shortdesc conref="mx.core.IVisualElement#designLayer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#designLayer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:document:get"><apiName>document</apiName><shortdesc>
      Ein Verweis auf das Dokumentobjekt, das mit dieser UIComponent verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Verweis auf das Dokumentobjekt, das mit dieser UIComponent verknüpft ist. Ein Document-Objekt ist ein Objekt auf der obersten Hierarchieebene einer Flex-Anwendung, MXML-Komponente oder AS-Komponente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc>
      Gibt an, ob die UIComponent doubleClick-Ereignisse empfängt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die UIComponent <codeph>doubleClick</codeph>-Ereignisse empfängt. Der Standardwert ist <codeph>false</codeph>, d. h. das UIComponent-Objekt empfängt keine <codeph>doubleClick</codeph>-Ereignisse.
           <p>Die <codeph>mouseEnabled</codeph>-Eigenschaft muss außerdem auf den Standardwert <codeph>true</codeph> gesetzt werden, damit das Objekt <codeph>doubleClick</codeph>-Ereignisse empfangen kann.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:enabled:get"><apiName>enabled</apiName><shortdesc conref="mx.core.IUIComponent#enabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="enabledChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.IUIComponent#enabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:errorString:get"><apiName>errorString</apiName><shortdesc>
      Der Text, der von einer Komponentenfehlerinfo angezeigt wird, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="errorStringChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Text, der von einer Komponentenfehlerinfo angezeigt wird, wenn eine Komponente durch einen Validator überwacht wird und die Überprüfung fehlschlägt.
           <p>Sie können die <codeph>errorString</codeph>-Eigenschaft verwenden, um einen Überprüfungsfehler einer Komponente anzuzeigen, ohne tatsächlich eine Validator-Klasse zu verwenden. Wenn Sie einen Stringwert in die <codeph>errorString</codeph>-Eigenschaft schreiben, zeichnet Flex einen roten Rahmen um die Komponente, um auf den Überprüfungsfehler hinzuweisen. Der String wird in einem Quickinfo als Überprüfungsfehlermeldung angezeigt, wenn Sie mit der Maus über die Komponente fahren, genau wie bei Erkennung eines Überprüfungsfehlers durch einen Validator.</p>
           <p>Um den Überprüfungsfehler zu löschen, schreiben Sie einen leeren String ("") in die <codeph>errorString</codeph>-Eigenschaft.</p>
           <p>Beachten Sie, dass beim Schreiben eines Werts in die <codeph>errorString</codeph>-Eigenschaft keine gültigen oder ungültigen Ereignisse ausgelöst werden; es wird nur die Rahmenfarbe geändert und die Überprüfungsfehlermeldung angezeigt.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Eine Zahl, die die explizite Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die explizite Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>explicitHeight</codeph> mit Bezug zum übergeordneten Objekt durch die <codeph>scaleY</codeph>-Eigenschaft beeinflusst.</p>
      <p>Die Einstellung der <codeph>height</codeph>-Eigenschaft setzt diese Eigenschaft auch auf den angegebenen Höhenwert.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Die empfohlene maximale Höhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die empfohlene maximale Höhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben.
           <p>Normalerweise legen Anwendungsentwickler die explicitMaxHeight-Eigenschaft nicht fest. Stattdessen legen sie den Wert der maxHeight-Eigenschaft fest, der die explicitMaxHeight-Eigenschaft einstellt. Der Wert von maxHeight wird nicht geändert.</p>
           <p>Wurde maxHeight explizit vom Anwendungsentwickler festgelegt, wird zum Zeitpunkt der Layouterstellung explicitMaxHeight verwendet. Andernfalls wird der Standardwert für maxHeight verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>maxHeight</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleY</codeph>-Eigenschaft beeinflusst. Bei manchen Komponenten ist die Höhe theoretisch unbeschränkt. In diesen Fällen wird die <codeph>maxHeight</codeph> auf <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph> gesetzt.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Die empfohlene maximale Breite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die empfohlene maximale Breite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben.
           <p>Normalerweise legen Anwendungsentwickler die explicitMaxWidth-Eigenschaft nicht fest. Stattdessen legen sie den Wert der maxWidth-Eigenschaft fest, der die explicitMaxWidth-Eigenschaft einstellt. Der Wert von maxWidth wird nicht geändert.</p>
           <p>Wurde maxWidth explizit vom Anwendungsentwickler festgelegt, wird zum Zeitpunkt der Layouterstellung explicitMaxWidth verwendet. Andernfalls wird der Standardwert für maxWidth verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>maxWidth</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleX</codeph>-Eigenschaft beeinflusst. Bei manchen Komponenten ist die Breite theoretisch unbeschränkt. In diesen Fällen wird die <codeph>maxWidth</codeph> auf <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph> gesetzt.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      Die empfohlene Mindesthöhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explictMinHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die empfohlene Mindesthöhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben.
           <p>Normalerweise legen Anwendungsentwickler die explicitMinHeight-Eigenschaft nicht fest. Stattdessen legen sie den Wert der minHeight-Eigenschaft fest, der die explicitMinHeight-Eigenschaft einstellt. Der Wert von minHeight wird nicht geändert.</p>
           <p>Wurde minHeight explizit vom Anwendungsentwickler festgelegt, wird zum Zeitpunkt der Layouterstellung explicitMinHeight verwendet. Andernfalls wird der Wert von measuredMinHeight verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>minHeight</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleY</codeph>-Eigenschaft beeinflusst.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      Die empfohlene Mindestbreite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die empfohlene Mindestbreite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben.
           <p>Normalerweise legen Anwendungsentwickler die explicitMinWidth-Eigenschaft nicht fest. Stattdessen legen sie den Wert der minWidth-Eigenschaft fest, der die explicitMinWidth-Eigenschaft einstellt. Der Wert von minWidth wird nicht geändert.</p>
           <p>Wurde minWidth explizit vom Anwendungsentwickler festgelegt, wird zum Zeitpunkt der Layouterstellung explicitMinWidth verwendet. Andernfalls wird der Wert von measuredMinWidth verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>minWidth</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleX</codeph>-Eigenschaft beeinflusst.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Eine Zahl, die die explizite Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die explizite Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>explicitWidth</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleX</codeph>-Eigenschaft beeinflusst.</p>
      <p>Die Einstellung der <codeph>width</codeph>-Eigenschaft setzt diese Eigenschaft auch auf den angegebenen Breitenwert.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:flexContextMenu:get"><apiName>flexContextMenu</apiName><shortdesc>
      Das Kontextmenü für diese UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:IFlexContextMenu</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das Kontextmenü für diese UIComponent.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      Gibt an, ob die Komponente den Fokus erhalten kann, wenn sie durch Drücken der Tabulatortaste aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob die Komponente den Fokus erhalten kann, wenn sie durch Drücken der Tabulatortaste aufgerufen wird. Sie können <codeph>focusEnabled</codeph> auf <codeph>false</codeph> setzen, wenn eine UIComponent als Unterkomponente einer anderen Komponente verwendet wird, sodass die äußere Komponente den Fokus erhält. Lautet der Wert dieser Eigenschaft <codeph>false</codeph>, wird der Fokus auf das erste übergeordnete Element übertragen, für das <codeph>focusEnable</codeph> auf <codeph>true</codeph> gesetzt ist.
           <p>Der Standardwert ist <codeph>true</codeph>, ausgenommen für die spark.components.Scroller-Komponente. Für diese lautet der Standardwert <codeph>false</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.Scroller.xml"><linktext>spark.components.Scroller</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      Ruft den FocusManager ab, der den Fokus für diese und gleichrangige Komponenten steuert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      Ruft den FocusManager ab, der den Fokus für diese und gleichrangige Komponenten steuert. Jedes Popup hat eine eigene Fokusschleife und ist daher eine eigene FocusManager-Instanz. Mit dieser Methode stellen Sie sicher, dass Sie mit der richtigen Instanz kommunizieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Der mit diesem Objekt verknüpfte Fokusbereich.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Der mit diesem Objekt verknüpfte Fokusbereich. Ein Objekt verfügt über einen Fokusbereich, wenn eines seiner untergeordneten Elemente den Fokus hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:hasComplexLayoutMatrix:get"><apiName>hasComplexLayoutMatrix</apiName><shortdesc>
      Gibt „true“ zurück, wenn die UIComponent über Transformationseigenschaften ohne Versetzung (x,y) verfügt..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn die UIComponent über Transformationseigenschaften ohne Versetzung (x,y) verfügt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc>
      Ein Flag, das angibt, ob untergeordnete Objekte den Fokus erhalten können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hasFocusableChildrenChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob untergeordnete Objekte den Fokus erhalten können.
     
      <p><b>Hinweis:</b> Diese Eigenschaft ähnelt der von Flash Player verwendeten <codeph>tabChildren</codeph>-Eigenschaft. Verwenden Sie bei Flex-Anwendungen die <codeph>hasFocusableChildren</codeph>-Eigenschaft. Verwenden Sie nicht die <codeph>tabChildren</codeph>-Eigenschaft.</p>
     
      <p>Diese Eigenschaft ist normalerweise <codeph>false</codeph>, da die meisten Komponenten entweder selbst den Fokus erhalten oder den Fokus an eine einzelne interne Subkomponente delegieren und so angezeigt werden, als ob die Komponente den Fokus erhalten hätte. Beispiel: Ein TextInput-Steuerelement enthält ein fokusfähiges untergeordnetes RichEditableText-Steuerelement. Zwar erhält tatsächlich die RichEditableText-Subkomponente den Fokus, jedoch sieht es so aus, als hätte TextInput den Fokus. TextInput setzt <codeph>hasFocusableChildren</codeph> auf <codeph>false</codeph>, da TextInput als die Komponente mit dem Fokus betrachtet wird. Ihre interne Struktur ist eine Abstraktion.</p>
           <p>Normalerweise ist dieses Flag nur für Navigatorkomponenten wie TabNavigator und Accordion auf <codeph>true</codeph> gesetzt, da sie den Fokus beim Drücken der Tabulatortaste erhalten. Der Fokus wird jedoch bei weiterem Drücken der Tabulatortaste an Komponenten in untergeordneten Containern übergeben</p>
           <p>Der Standardwert ist <codeph>false</codeph>, ausgenommen für die spark.components.Scroller-Komponente. Für diese lautet der Standardwert <codeph>true</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.Scroller.xml"><linktext>spark.components.Scroller</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      
      Enthält „true“, wenn das Element eine 3D-Matrix hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn das Element eine 3D-Matrix hat.
           <p>Verwenden Sie <codeph>hasLayoutMatrix3D</codeph>, anstatt den Rückgabewert von <codeph>getLayoutMatrix3D()</codeph> aufzurufen und zu prüfen, da diese Methode auch dann eine gültige Matrix zurückgibt, wenn es sich um ein 2D-Element handelt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:height:get"><apiName>height</apiName><shortdesc>
      Eine Zahl, die die Höhe der Komponente in Pixeln als Koordinaten des übergeordneten Elements angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="heightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die Höhe der Komponente in Pixeln als Koordinaten des übergeordneten Elements angibt. Der Standardwert ist 0. Diese Eigenschaft enthält jedoch die tatsächliche Komponentenhöhe, nachdem Flex die Größenänderung der Komponenten in der Anwendung abgeschlossen hat.
           <p>Hinweis: Sie können im MXML <codeph>height</codeph>-Attribut einen Prozentwert wie etwa <codeph>height="100%"</codeph> angeben, Sie können jedoch keinen Prozentwert für die <codeph>height</codeph>-Eigenschaft in ActionScript verwenden. Benutzen Sie stattdessen die <codeph>percentHeight</codeph>-Eigenschaft.</p>
           <p>Durch Festlegen dieser Eigenschaft wird ein <codeph>resize</codeph>-Ereignis ausgelöst. Weitere Informationen zur Auslösung dieses Ereignisses finden Sie in der Beschreibung zum <codeph>resize</codeph>-Ereignis.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/percentHeight"><linktext>percentHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive in MXML oder dem Wert <codeph>undefined</codeph> im ActionScript-Code für die Eigenschaft den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>horizontalCenter.s2="@Clear()"</codeph> die <codeph>horizontalCenter</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.horizontalCenter = undefined</codeph> die <codeph>horizontalCenter</codeph>-Beschränkung des <codeph>button</codeph>.</p>
      
      
      Der horizontale Abstand in Pixeln vom Mittelpunkt der Komponente zum Mittelpunkt des Inhaltsbereichs des Ankerziels.
           <p>Das standardmäßige Ankerziel ist der Container selbst. </p>
           <p>In Layouts mit erweiterten Beschränkungen kann das Ankerziel eine Beschränkungsspalte sein. Dann entspricht der Inhaltsbereich dem Raum zwischen der vorherigen Spalte (oder Containerseite) und der Zielspalte.</p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „constraintColumnId:value“ ein. Beispiel: „col1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:id:get"><apiName>id</apiName><shortdesc>
      ID der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ID der Komponente. Dieser Wert wird der Instanzname des Objekts und sollte keine Leerzeichen oder Sonderzeichen enthalten. Jede Komponente in einer Anwendung sollte eine eindeutige ID besitzen.
           <p>Wenn die Anwendung mit Werkzeugen eines anderen Herstellers getestet werden soll, weisen Sie jeder Komponente eine aussagekräftige ID zu. Testwerkzeuge verwenden IDs zur Darstellung von Steuerelementen in den Skripten. Mit aussagekräftigen Namen können Skripte daher leichter gelesen werden. Verwenden Sie beispielsweise für eine Schaltfläche submit_button statt b1 oder button1.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc>
      Gibt an, ob diese Komponente im Layout des übergeordneten Containers enthalten ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="includeInLayoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob diese Komponente im Layout des übergeordneten Containers enthalten ist. Wenn der Wert <codeph>true</codeph> ist, ist das Objekt im Layout des zugehörigen übergeordneten Containers enthalten und die Größenänderung und Platzierung des Objekts erfolgt gemäß den Layoutregeln des zugehörigen übergeordneten Containers. Wenn der Wert <codeph>false</codeph> ist, hat das Layout des übergeordneten Containers keine Auswirkungen auf die Größe und Position des Objekts.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Der Beginn der Vererbungsstilkette für dieses UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Der Beginn der Vererbungsstilkette für dieses UITextField. Die <codeph>getStyle()</codeph>-Methode greift einfach auf <codeph>inheritingStyles[styleName]</codeph> zu, um die vollständige, mit dem Entwurf verknüpfte Kette zu durchsuchen. Dieses Objekt wird durch die <codeph>initProtoChain()</codeph>-Methode eingerichtet. Unter normalen Umständen brauchen Entwickler auf diese Eigenschaft nie direkt zuzugreifen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:initialized:get"><apiName>initialized</apiName><shortdesc>
      Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layouterstellung (Übernahme, Messung und Layout) durchlaufen hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layouterstellung (Übernahme, Messung und Layout) durchlaufen hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndex:get"><apiName>instanceIndex</apiName><shortdesc>
      Die Indexposition einer wiederholten Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition einer wiederholten Komponente. Wenn sich die Komponente nicht in einem Repeater befindet, lautet der Wert -1.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      Ein Array mit den Indexpositionen, die erforderlich sind, um im übergeordneten Dokument auf dieses UIComponent-Objekt zu verweisen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array mit den Indexpositionen, die erforderlich sind, um im übergeordneten Dokument auf dieses UIComponent-Objekt zu verweisen. Das Array enthält nur einen Wert, wenn dieses UIComponent-Objekt sich in mindestens einem Repeater befindet. Das erste Element entspricht dem äußersten Repeater. Ist die ID beispielsweise „b“ und instanceIndices [2,4], lautet der Verweis im übergeordneten Dokument b[2][4].
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:is3D:get"><apiName>is3D</apiName><shortdesc>
      
      Enthält „true“, wenn das Element in 3D vorliegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Enthält <codeph>true</codeph>, wenn das Element in 3D vorliegt. Das Element kann in 3D vorliegen, weil es entweder 3D-Transformationseigenschaften hat oder 3D-Transformationsoffsets nach dem Layout oder beides.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isDocument:get"><apiName>isDocument</apiName><shortdesc>
      Enthält „true“, wenn diese UIComponent-Instanz ein Dokumentobjekt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn diese UIComponent-Instanz ein Dokumentobjekt ist. Das heißt, es befindet sich in der Hierarchie einer Flex-Anwendung, einer MXML-Komponente oder einer ActionScript-Komponente an der obersten Position.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc>
      Wird vom PopUpManager auf „true“ gesetzt, um anzugeben, dass für die Komponente ein Popup eingeblendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Wird vom PopUpManager auf <codeph>true</codeph> gesetzt, um anzugeben, dass für die Komponente ein Popup eingeblendet wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:left:get"><apiName>left</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive den statusspezifischen Wert für die Eigenschaft in MXML auf den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>left.s2="@Clear()"</codeph> die <codeph>left</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.left = undefined</codeph> die <codeph>left</codeph>-Beschränkung des <codeph>button</codeph>.</p>
     
      
      Der horizontale Abstand in Pixeln vom linken Rand der Komponente zum linken Rand des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungsspalte sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „col1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      Die empfohlene maximale Höhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die empfohlene maximale Höhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben. Der Standardwert dieser Eigenschaft wird vom Komponentenentwickler eingestellt.
           <p>Mit dieser Eigenschaft legt der Komponentenentwickler eine Höchstgrenze für die Höhe der Komponente fest.</p>
           <p>Überschreibt der Anwendungsentwickler den Standardwert von maxHeight, wird der neue Wert in explicitMaxHeight gespeichert. Der Standardwert von maxHeight wird nicht geändert. Wurde maxHeight explizit vom Anwendungsentwickler festgelegt, wird daher zum Zeitpunkt der Layouterstellung als empfohlener Höchstwert für die Höhe der Komponente der Wert von explicitMaxHeight verwendet. Wird maxHeight nicht explizit vom Benutzer eingestellt, wird der Standardwert verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>maxHeight</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleY</codeph>-Eigenschaft beeinflusst. Bei manchen Komponenten ist die Höhe theoretisch unbeschränkt. In diesen Fällen wird die <codeph>maxHeight</codeph> auf <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph> gesetzt.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      Die empfohlene maximale Breite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die empfohlene maximale Breite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben. Der Standardwert dieser Eigenschaft wird vom Komponentenentwickler eingestellt.
           <p>Mit dieser Eigenschaft legt der Komponentenentwickler eine Höchstgrenze für die Breite der Komponente fest.</p>
           <p>Überschreibt der Anwendungsentwickler den Standardwert von maxWidth, wird der neue Wert in explicitMaxWidth gespeichert. Der Standardwert von maxWidth wird nicht geändert. Wurde maxWidth explizit vom Anwendungsentwickler festgelegt, wird daher zum Zeitpunkt der Layouterstellung als empfohlener Höchstwert für die Breite der Komponente der Wert von explicitMaxWidth verwendet. Wird maxWidth nicht explizit vom Benutzer eingestellt, wird der Standardwert verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>maxWidth</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleX</codeph>-Eigenschaft beeinflusst. Bei manchen Komponenten ist die Breite theoretisch unbeschränkt. In diesen Fällen wird die <codeph>maxWidth</codeph> auf <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph> gesetzt.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      Die Standardhöhe der Komponente in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Standardhöhe der Komponente in Pixeln. Dieser Wert wird von der <codeph>measure()</codeph>-Methode festgelegt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc>
      Die standardmäßige Mindesthöhe der Komponente in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die standardmäßige Mindesthöhe der Komponente in Pixeln. Dieser Wert wird von der <codeph>measure()</codeph>-Methode festgelegt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc>
      Die standardmäßige Mindestbreite der Komponente in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die standardmäßige Mindestbreite der Komponente in Pixeln. Dieser Wert wird von der <codeph>measure()</codeph>-Methode festgelegt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      Die Standardbreite der Komponente in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Standardbreite der Komponente in Pixeln. Dieser Wert wird von der <codeph>measure()</codeph>-Methode festgelegt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      Die empfohlene Mindesthöhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die empfohlene Mindesthöhe der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben. Der Standardwert hängt von der Implementierung der Komponente ab.
           <p>Legt der Anwendungsentwickler den Wert von minHeight fest, wird der neue Wert in explicitMinHeight gespeichert. Der Standardwert von minHeight wird nicht geändert. Wurde minHeight explizit vom Anwendungsentwickler festgelegt, wird daher zum Zeitpunkt der Layouterstellung als empfohlener Mindestwert für die Höhe der Komponente der Wert von explicitMinHeight verwendet. Wird minHeight nicht explizit vom Anwendungsentwickler eingestellt, wird der Wert von measuredMinHeight verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>minHeight</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleY</codeph>-Eigenschaft beeinflusst.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      Die empfohlene Mindestbreite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die empfohlene Mindestbreite der Komponente, die vom übergeordneten Element während der Layouterstellung berücksichtigt wird. Dieser Wert wird in den Koordinaten der Komponente in Pixeln angegeben. Der Standardwert hängt von der Implementierung der Komponente ab.
           <p>Legt der Anwendungsentwickler den Wert von minWidth fest, wird der neue Wert in explicitMinWidth gespeichert. Der Standardwert von minWidth wird nicht geändert. Wurde minWidth explizit vom Anwendungsentwickler festgelegt, wird daher zum Zeitpunkt der Layouterstellung als empfohlener Mindestwert für die Breite der Komponente der Wert von explicitMinWidth verwendet. Wird minWidth nicht explizit vom Anwendungsentwickler eingestellt, wird der Wert von measuredMinWidth verwendet.</p>
           <p>Dieser Wert wird vom Container beim Berechnen von Größe und Position der Komponente verwendet. Er wird nicht von der Komponente selbst zum Bestimmen der Standardgröße verwendet. Daher hat diese Eigenschaft möglicherweise keine Wirkung, wenn das übergeordnete Element einem oder mehreren Container(n) entspricht, die diese Eigenschaft nicht berücksichtigen. Da der Wert in Komponentenkoordinaten angegeben wird, wird die tatsächliche <codeph>minWidth</codeph> mit Bezug zum übergeordneten Objekt von der <codeph>scaleX</codeph>-Eigenschaft beeinflusst.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Eine Modul-Factory wird als Kontext für die Verwendung eingebetteter Schriftarten und für die Suche nach dem Stilmanager, der die Stile dieser Komponente steuert, verwendet. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      Gibt an, ob die Komponente den Fokus erhalten kann, wenn darauf geklickt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die Komponente den Fokus erhalten kann, wenn darauf geklickt wird. Wenn <codeph>false</codeph> angegeben ist, wird der Fokus auf das erste übergeordnete Element übertragen, für das <codeph>mouseFocusEnable</codeph> auf <codeph>true</codeph> gesetzt ist. Beispielsweise können Sie diese Eigenschaft für ein Button-Steuerelement auf <codeph>false</codeph> setzen, sodass Sie den Fokus durch Drücken der Tabulatortaste auf das Steuerelement verschieben können, das Steuerelement jedoch nicht den Fokus erhält, wenn Sie darauf klicken.
          <p>Der Standardwert ist <codeph>true</codeph> für die meisten Unterklassen, außer für die Spark-TabBar. In diesem Fall ist der Standardwert <codeph>false</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      Die Tiefe dieses Objekts in der enthaltenden Hierarchie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Tiefe dieses Objekts in der enthaltenden Hierarchie. Diese Zahl wird vom Messungs- und Layoutcode verwendet. Der Wert ist 0, wenn diese Komponente nicht in der DisplayList enthalten ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Beginn der Kette von Komponentenstilen, die keine Vererbungsstile sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Beginn der Kette von Komponentenstilen, die keine Vererbungsstile sind. Die <codeph>getStyle()</codeph>-Methode greift einfach auf <codeph>nonInheritingStyles[styleName]</codeph> zu, um die vollständige, mit dem Entwurf verknüpfte Kette zu durchsuchen. Dieses Objekt wird durch die <codeph>initProtoChain()</codeph>-Methode eingerichtet. Unter normalen Umständen brauchen Entwickler auf diese Eigenschaft nie direkt zuzugreifen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      
      Anzahl der untergeordneten Automatisierungselemente, die dieser Container besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Anzahl der untergeordneten Automatisierungselemente, die dieser Container besitzt. Diese Summe sollte keine untergeordneten Compositeelemente enthalten. Sie enthält jedoch untergeordnete Elemente, welche innerhalb der Automatisierungshierarchie keine Signifikanz besitzen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentApplication:get"><apiName>parentApplication</apiName><shortdesc>
      Ein Verweis auf das Application-Objekt, das diese UIComponent-Instanz enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="initialize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Verweis auf das Application-Objekt, das diese UIComponent-Instanz enthält. Dieses Application-Objekt kann in einem SWFLoader-Steuerelement in einer anderen Anwendung enthalten sein, wodurch eine Kette von Application-Objekten entsteht, die mit parentApplication durchlaufen werden kann.
           <p>Die <codeph>parentApplication</codeph>-Eigenschaft einer Anwendung entspricht nie der Anwendung selbst, sondern der Anwendung, in die sie geladen wurde, oder null (für eine Anwendung auf oberster Ebene). </p>
           <p>Das Durchlaufen einer Anwendungskette mithilfe der <codeph>parentApplication</codeph>-Eigenschaft ähnelt dem Durchlaufen einer Dokumentkette mithilfe der <codeph>parentDocument</codeph>-Eigenschaft. Sie können auf die <codeph>application</codeph>-Eigenschaft mithilfe der Application-Klasse zugreifen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentDocument:get"><apiName>parentDocument</apiName><shortdesc>
      Ein Verweis auf das übergeordnete Dokumentobjekt, das mit dieser UIComponent verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="initialize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Verweis auf das übergeordnete Dokumentobjekt, das mit dieser UIComponent verknüpft ist. Ein Document-Objekt ist ein UIComponent-Objekt auf der obersten Hierarchieebene einer Flex-Anwendung, einer MXML- oder AS-Komponente. 
           <p>Für das Application-Objekt ist die <codeph>parentDocument</codeph>-Eigenschaft null. Die Eigenschaft ist in MXML-Skripten nützlich, um in der Kette von Dokumentobjekten auf die nächsthöhere Ebene zu wechseln. Sie kann verwendet werden, um diese Kette mit <codeph>parentDocument.parentDocument</codeph> usw. zu durchlaufen. </p>
           <p>Sie ist als Objekt typisiert, sodass Autoren Eigenschaften und Methoden auf übergeordneten Dokumentobjekten ohne Konvertieren zugreifen können.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parent:get"><apiName>parent</apiName><shortdesc conref="mx.core.IVisualElement#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Legt die Höhe einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Legt die Höhe einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest. Zulässige Werte sind 0 bis 100. Der Standardwert ist NaN. Die Einstellung der Eigenschaften <codeph>height</codeph> oder <codeph>explicitHeight</codeph> führt dazu, dass diese Eigenschaft auf „NaN“ zurückgesetzt wird.
           <p>Diese Eigenschaft gibt nur dann einen numerischen Wert zurück, wenn die Eigenschaft zuvor eingestellt wurde. Der Wert spiegelt nicht die exakte Größe der Komponente in Prozent wider.</p>
           <p>Für das UITextField-Steuerelement ist diese Eigenschaft immer auf NaN eingestellt.</p>
      
      <p>Wenn diese Eigenschaft bei Spark-Layouts verwendet wird, wird mit ihrer Hilfe die Höhe der Komponentengrenzen nach Skalierung und Drehung berechnet. Beispiel: Wenn die Komponente bei 90 Grad gedreht wird, wirkt sich die Festlegung von <codeph>percentHeight</codeph> auf die Breite der Komponente aus.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Legt die Breite einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Legt die Breite einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest. Zulässige Werte sind 0 bis 100. Der Standardwert ist NaN. Die Einstellung der Eigenschaften <codeph>width</codeph> oder <codeph>explicitWidth</codeph> führt dazu, dass diese Eigenschaft auf „NaN“ zurückgesetzt wird.
           <p>Diese Eigenschaft gibt nur dann einen numerischen Wert zurück, wenn die Eigenschaft zuvor eingestellt wurde. Der Wert spiegelt nicht die exakte Größe der Komponente in Prozent wider.</p>
           <p>Für das UITextField-Steuerelement ist diese Eigenschaft immer auf NaN eingestellt.</p>
     
      <p>Wenn diese Eigenschaft bei Spark-Layouts verwendet wird, wird mit ihrer Hilfe die Breite der Komponentengrenzen nach Skalierung und Drehung berechnet. Beispiel: Wenn die Komponente bei 90 Grad gedreht wird, wirkt sich die Festlegung von <codeph>percentWidth</codeph> auf die Breite der Komponente aus.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc conref="mx.core.IVisualElement#postLayoutTransformOffsets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#postLayoutTransformOffsets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      Nach der Erstellung untergeordneter Objekte (unmittelbar oder verzögert) auf „true“ eingestellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Nach der Erstellung untergeordneter Objekte (unmittelbar oder verzögert) auf <codeph>true</codeph> eingestellt. Für ein Containerobjekt wird dies nach Ausführung der <codeph>createComponentsFromDescriptors()</codeph>-Methode auf <codeph>true</codeph> gesetzt. Das heißt, dass das Container-Objekt untergeordnete Elemente aus seinen untergeordneten Deskriptoren erstellt.
           <p>Wenn beispielsweise ein Accordion-Container eine verzögerte Instanziierung verwendet, nimmt die <codeph>processedDescriptors</codeph>-Eigenschaft des zweiten Fensters des Accordion-Containers erst den Wert <codeph>true</codeph> an, wenn der Benutzer zu diesem Fenster navigiert und dieses Fenster untergeordnete Elemente erstellt. Ist jedoch für das Accordion die <codeph>creationPolicy</codeph>-Eigenschaft auf <codeph>"all"</codeph> gesetzt, wird die <codeph>processedDescriptors</codeph>-Eigenschaft für das zweite Fenster während des Anwendungsstarts auf <codeph>true</codeph> gesetzt.</p>
           <p>Für Klassen, die keine Container sind und die keine Deskriptoren aufweisen, wird dies auf <codeph>true</codeph> gesetzt, nachdem die <codeph>createChildren()</codeph>-Methode interne untergeordnete Komponentenelemente erstellt hat.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndex:get"><apiName>repeaterIndex</apiName><shortdesc>
      Die Indexposition des Elements im Datenprovider des Repeaters, der diese UIComponent erzeugt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition des Elements im Datenprovider des Repeaters, der diese UIComponent erzeugt hat. Verwenden Sie diese Eigenschaft statt der <codeph>repeaterIndices</codeph>-Eigenschaft, wenn die UIComponent durch ein einziges Repeater-Objekt erstellt wird. Verwenden Sie die <codeph>repeaterIndices</codeph>-Eigenschaft, wenn diese UIComponent in verschachtelten Repeater-Objekten erstellt wird.
           <p>Die Eigenschaft wird auf -1 gesetzt, wenn diese UIComponent nicht durch einen Repeater erstellt wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      Ein Array mit den Indexpositionen der Elemente im Datenprovider des Repeaters im übergeordneten Dokument, der diese UIComponent erzeugt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array mit den Indexpositionen der Elemente im Datenprovider des Repeaters im übergeordneten Dokument, der diese UIComponent erzeugt hat. Das Array enthält nur einen Wert, wenn diese UIComponent sich in mindestens einem Repeater befindet.
           <p>Das erste Element im Array entspricht dem äußersten Repeater. Wenn <codeph>repeaterIndices</codeph> dem Wert [2,4] entspricht, bedeutet dies, dass der äußere Repeater das Element <codeph>dataProvider[2]</codeph> und der innere Repeater das Element <codeph>dataProvider[4]</codeph> verwendet hat.</p>
           <p>Beachten Sie, dass sich diese Eigenschaft von der <codeph>instanceIndices</codeph>-Eigenschaft unterscheidet, wenn die <codeph>startingIndex</codeph>-Eigenschaft eines beliebigen Repeaters nicht 0 entspricht. Auch wenn ein Repeater beispielsweise bei <codeph>dataProvider[4]</codeph> beginnt, lautet der Dokumentverweis des ersten wiederholten Objekts b[0], und nicht b[4].</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeater:get"><apiName>repeater</apiName><shortdesc>
      Ein Verweis auf das Repeater-Objekt im übergeordneten Dokument, das diese UIComponent erzeugt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IRepeater</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf das Repeater-Objekt im übergeordneten Dokument, das diese UIComponent erzeugt hat. Verwenden Sie diese Eigenschaft statt der <codeph>repeaters</codeph>-Eigenschaft, wenn die UIComponent durch ein einziges Repeater-Objekt erstellt wird. Verwenden Sie die <codeph>repeaters</codeph>-Eigenschaft, wenn diese UIComponent in verschachtelten Repeater-Objekten erstellt wird.
           <p>Die Eigenschaft wird auf <codeph>null</codeph> gesetzt, wenn diese UIComponent nicht durch einen Repeater erstellt wird.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      Ein Array mit Verweisen auf die Repeater-Objekte im übergeordneten Dokument, die diese UIComponent erzeugt haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array mit Verweisen auf die Repeater-Objekte im übergeordneten Dokument, die diese UIComponent erzeugt haben. Das Array enthält nur einen Wert, wenn diese UIComponent sich in mindestens einem Repeater befindet. Das erste Element entspricht dem äußersten Repeater-Objekt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc>
      Ein Verweis auf ein Objekt, welches alle lokalisierten Ressourcen der Anwendung verwaltet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf ein Objekt, welches alle lokalisierten Ressourcen der Anwendung verwaltet. Dabei handelt es sich um eine Singleton-Instanz, die die IResourceManager-Schnittstelle implementiert.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:right:get"><apiName>right</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive in MXML oder dem Wert <codeph>undefined</codeph> im ActionScript-Code für die Eigenschaft den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>right.s2="@Clear()"</codeph> die <codeph>right</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.right = undefined</codeph> die <codeph>right</codeph>-Beschränkung des <codeph>button</codeph>.</p>
      
      
      Der horizontale Abstand in Pixeln von der rechten Kante der Komponente zur rechten Kante des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungsspalte sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „col1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationX:get"><apiName>rotationX</apiName><shortdesc>
     Gibt die x-Achsendrehung der DisplayObject-Instanz in Grad an, und zwar bezogen auf die ursprüngliche Ausrichtung zum übergeordneten 3D-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Gibt die Drehung der x-Achse der DisplayObject-Instanz in Grad an, ausgehend von ihrer ursprünglichen Ausrichtung relativ zum übergeordneten 3D-Container. Werte zwischen 0 und 180 geben eine Rechtsdrehung, Werte zwischen 0 und -180 eine Linksdrehung an. Werte außerhalb dieses Bereichs werden zu 360 addiert bzw. von 360 subtrahiert, damit sich ein Wert innerhalb des Bereichs ergibt. Diese Eigenschaft wird während der Berechnung von 2D-Layouts in Flex ignoriert. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationY:get"><apiName>rotationY</apiName><shortdesc>
     Gibt die y-Achsendrehung der DisplayObject-Instanz in Grad an, und zwar bezogen auf die ursprüngliche Ausrichtung zum übergeordneten 3D-Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Gibt die Drehung der y-Achse der DisplayObject-Instanz in Grad an, ausgehend von ihrer ursprünglichen Ausrichtung relativ zum übergeordneten 3D-Container. Werte zwischen 0 und 180 geben eine Rechtsdrehung, Werte zwischen 0 und -180 eine Linksdrehung an. Werte außerhalb dieses Bereichs werden zu 360 addiert bzw. von 360 subtrahiert, damit sich ein Wert innerhalb des Bereichs ergibt. Diese Eigenschaft wird während der Berechnung von 2D-Layouts in Flex ignoriert. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationZ:get"><apiName>rotationZ</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:UIComponent:rotation:get"><apiName>rotation</apiName><shortdesc conref="mx.core.IFlexDisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.IFlexDisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleX:get"><apiName>scaleX</apiName><shortdesc>
      Zahl, die den horizontalen Skalierungsfaktor angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleXChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die den horizontalen Skalierungsfaktor angibt.
           <p>Der Standardwert ist 1,0, d. h. das Objekt wird nicht skaliert. Ein <codeph>scaleX</codeph>-Wert von 2,0 bedeutet, dass das Objekt um den Faktor 2 vergrößert wurde. Ein <codeph>scaleX</codeph>-Wert von 0,5 bedeutet, dass das Objekt um den Faktor 2 verkleinert wurde.</p>
           <p>Der Wert 0,0 ist ungültig. Setzen Sie den Wert nicht auf 0,0, sondern auf einen niedrigen Wert, oder legen Sie für die <codeph>visible</codeph>-Eigenschaft <codeph>false</codeph> fest, um die Komponente auszublenden.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleY:get"><apiName>scaleY</apiName><shortdesc>
      Zahl, die den vertikalen Skalierungsfaktor angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleYChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die den vertikalen Skalierungsfaktor angibt.
           <p>Der Standardwert ist 1,0, d. h. das Objekt wird nicht skaliert. Ein <codeph>scaleY</codeph>-Wert von 2,0 bedeutet, dass das Objekt um den Faktor 2 vergrößert wurde. Ein <codeph>scaleY</codeph>-Wert von 0,5 bedeutet, dass das Objekt um den Faktor 2 verkleinert wurde.</p>
           <p>Der Wert 0,0 ist ungültig. Setzen Sie den Wert nicht auf 0,0, sondern auf einen niedrigen Wert, oder legen Sie für die <codeph>visible</codeph>-Eigenschaft <codeph>false</codeph> fest, um die Komponente auszublenden.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleZ:get"><apiName>scaleZ</apiName><shortdesc>
      Zahl, die den Skalierungsfaktor entlang der z-Achse angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleZChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die den Skalierungsfaktor entlang der z-Achse angibt.
           <p>Eine Skalierung entlang der z-Achse wirkt sich normalerweise nicht auf flache Komponenten aus, die sich in der Ebene z=0 befinden. Sie betrifft nur Komponenten, auf deren untergeordnete Elemente eine 3D-Transformation angewendet wurde, oder Komponenten mit einem anderen transformZ-Wert als null.</p>
      
      <p>Der Standardwert ist 1,0, d. h. das Objekt wird nicht skaliert. </p>
     
      <p>Diese Eigenschaft wird während der Berechnung von 2D-Layouts in Flex ignoriert. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:screen:get"><apiName>screen</apiName><shortdesc>
      Gibt ein Objekt mit Größe und Position der Basiszeichenoberfläche dieses Objekts zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Gibt ein Objekt mit Größe und Position der Basiszeichenoberfläche dieses Objekts zurück.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
       
      Ein Flag, welches bestimmt, ob ein Automatisierungsobjekt in der Automatisierungshierarchie angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
      Ein Flag, das bestimmt, ob ein Automatisierungsobjekt in der Automatisierungshierarchie angezeigt wird. Untergeordnete Elemente von Containern, die in der Hierarchie nicht sichtbar sind, erscheinen als untergeordnete Elemente des nächsthöheren sichtbaren übergeordneten Elements. Container für Layout, z. B. Felder und Arbeitsfläche, erscheinen normalerweise nicht in der Hierarchie.
     
      <p>Manche Steuerelemente erzwingen ein Erscheinen ihrer untergeordneten Elemente in der Hierarchie, wenn erforderlich. Beispiel: Eine Liste zwingt Elementrenderer, einschließlich Felder, immer in der Hierarchie zu erscheinen. Implementierer müssen das Ändern dieser Einstellungen auf <codeph>true</codeph> unterstützen.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:states:get"><apiName>states</apiName><shortdesc>
      Die Ansichtsstatus, die für diese Komponente definiert sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Die Ansichtsstatus, die für diese Komponente definiert sind. Sie können die <codeph>states</codeph>-Eigenschaft nur im Stamm der Anwendung oder im Stamm-Tag einer MXML-Komponente angeben. Der Compiler gibt einen Fehler aus, wenn Sie sie für ein anderes Steuerelement angeben.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc>
      Speicher für die Inline-Vererbungsstile zu diesem Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc>
      Speicher für die Inline-Vererbungsstile zu diesem Objekt. Diese CSSStyleDeclaration wird erstellt, wenn die <codeph>setStyle()</codeph>-Methode für diese Komponente zum ersten Mal aufgerufen wird, um einen Vererbungsstil zu erstellen. Unter normalen Umständen brauchen Entwickler auf diese Eigenschaft nie direkt zuzugreifen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleManager:get"><apiName>styleManager</apiName><shortdesc>
      Gibt die von dieser Komponente verwendete StyleManager-Instanz zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IStyleManager2</apiValueClassifier></apiValueDef><apiDesc>
      Gibt die von dieser Komponente verwendete StyleManager-Instanz zurück.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleName:get"><apiName>styleName</apiName><shortdesc>
      Der Klassenstil, der von dieser Komponente verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Klassenstil, der von dieser Komponente verwendet wird. Dies kann ein String, eine CSSStyleDeclaration oder ein IStyleClient sein.
           <p>Ist dies ein String, entspricht er dem Namen von einem oder mehreren durch Leerzeichen getrennten Klassendeklarationen in einem <codeph>&lt;fx:Style></codeph>-Tag oder einer CSS-Datei. Sie können den Punkt nicht in den <codeph>styleName</codeph> aufnehmen. Wenn der Klassenstil beispielsweise <codeph>".bigText"</codeph> heißt, setzen Sie die <codeph>styleName</codeph>-Eigenschaft auf<codeph>"bigText"</codeph> (kein Punkt).</p>
           <p>Wenn es sich um einen IStyleClient (normalerweise eine UIComponent) handelt, werden alle Stile im <codeph>styleName</codeph>-Objekt von dieser Komponente verwendet.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleParent:get"><apiName>styleParent</apiName><shortdesc>
      Das übergeordnete Element einer Komponente wird zur Überprüfung der untergeordneten Selektoren verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      Das übergeordnete Element einer Komponente wird zur Überprüfung der untergeordneten Selektoren verwendet. Ein übergeordnetes Element muss außerdem ein IAdvancedStyleClient sein, um an erweiterten Stildeklarationen teilzunehmen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      Gibt das von dieser Komponente verwendete SystemManager-Objekt zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Gibt das von dieser Komponente verwendete SystemManager-Objekt zurück.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Ein Flag, das angibt, ob dieses Objekt über die Tabulatortaste den Fokus erhalten kann. Dies ähnelt der von Flash Player verwendeten tabEnabled-Eigenschaft. Dieses Flag ist normalerweise für Komponenten, die Tastatureingaben verarbeiten können, auf „true“ gesetzt. Für einige Komponenten in Steuerleisten ist das Flag jedoch auf „false“ gesetzt, damit sie einer anderen Komponente (z. B. einem Editor) den Fokus nicht „stehlen“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="tabFocusEnabledChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob dieses Objekt über die Tabulatortaste den Fokus erhalten kann.
     
      <p>Ähnlich der von Flash Player verwendeten <codeph>tabEnabled</codeph>-Eigenschaft.</p>
     
      <p>Dieses Flag ist normalerweise für Komponenten, die Tastatureingaben verarbeiten können, auf <codeph>true</codeph> gesetzt. Für einige Komponenten in Steuerleisten ist das Flag jedoch auf <codeph>false</codeph> gesetzt, damit sie einer anderen Komponente (z. B. einem Editor) den Fokus nicht „stehlen“.
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:toolTip:get"><apiName>toolTip</apiName><shortdesc>
      Im ToolTip anzuzeigender Text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="toolTipChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Im ToolTip anzuzeigender Text.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:top:get"><apiName>top</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive in MXML oder dem Wert <codeph>undefined</codeph> im ActionScript-Code für die Eigenschaft den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>top.s2="@Clear()"</codeph> die <codeph>top</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.top = undefined</codeph> die <codeph>top</codeph>-Beschränkung des <codeph>button</codeph>.</p>
      
      
      Der vertikale Abstand in Pixeln vom oberen Rand der Komponente zum oberen Rand des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungszeile sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transformX:get"><apiName>transformX</apiName><shortdesc>
      Legt die x-Koordinate für die Transformationsmitte der Komponente fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Legt die x-Koordinate für die Transformationsmitte der Komponente fest.
     
      <p>Wenn diese Komponente das Ziel eines Spark-Transformationseffekts ist, können Sie diese Eigenschaft überschreiben, indem Sie die <codeph>AnimateTransform.autoCenterTransform</codeph>-Eigenschaft festlegen. Wenn <codeph>autoCenterTransform</codeph> den Wert <codeph>false</codeph> aufweist, wird die Transformationsmitte von den Eigenschaften <codeph>transformX</codeph>, <codeph>transformY</codeph> und <codeph>transformZ</codeph> des Effektziels bestimmt. Hat <codeph>autoCenterTransform</codeph> den Wert <codeph>true</codeph>, tritt der Effekt um die Mitte des Ziels auf, <codeph>(width/2, height/2)</codeph>.</p>
           <p>Durch Festlegen dieser Eigenschaft bei der Spark Effect-Klasse wird die Eigenschaft der Zielkomponente überschrieben.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformX"><linktext>spark.effects.AnimateTransform.transformX</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformY:get"><apiName>transformY</apiName><shortdesc>
      Legt die y-Koordinate für die Transformationsmitte der Komponente fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Legt die y-Koordinate für die Transformationsmitte der Komponente fest.
     
      <p>Wenn diese Komponente das Ziel eines Spark-Transformationseffekts ist, können Sie diese Eigenschaft überschreiben, indem Sie die <codeph>AnimateTransform.autoCenterTransform</codeph>-Eigenschaft festlegen. Wenn <codeph>autoCenterTransform</codeph> den Wert <codeph>false</codeph> aufweist, wird die Transformationsmitte von den Eigenschaften <codeph>transformX</codeph>, <codeph>transformY</codeph> und <codeph>transformZ</codeph> des Effektziels bestimmt. Hat <codeph>autoCenterTransform</codeph> den Wert <codeph>true</codeph>, tritt der Effekt um die Mitte des Ziels auf, <codeph>(width/2, height/2)</codeph>.</p>
           <p>Durch Festlegen dieser Eigenschaft bei der Spark Effect-Klasse wird die Eigenschaft der Zielkomponente überschrieben.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformY"><linktext>spark.effects.AnimateTransform.transformY</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformZ:get"><apiName>transformZ</apiName><shortdesc>
      Legt die z-Koordinate für die Transformationsmitte der Komponente fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Legt die z-Koordinate für die Transformationsmitte der Komponente fest.
     
      <p>Wenn diese Komponente das Ziel eines Spark-Transformationseffekts ist, können Sie diese Eigenschaft überschreiben, indem Sie die <codeph>AnimateTransform.autoCenterTransform</codeph>-Eigenschaft festlegen. Wenn <codeph>autoCenterTransform</codeph> den Wert <codeph>false</codeph> aufweist, wird die Transformationsmitte von den Eigenschaften <codeph>transformX</codeph>, <codeph>transformY</codeph> und <codeph>transformZ</codeph> des Effektziels bestimmt. Hat <codeph>autoCenterTransform</codeph> den Wert <codeph>true</codeph>, tritt der Effekt um die Mitte des Ziels auf, <codeph>(width/2, height/2)</codeph>.</p>
           <p>Durch Festlegen dieser Eigenschaft bei der Spark Effect-Klasse wird die Eigenschaft der Zielkomponente überschrieben.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformZ"><linktext>spark.effects.AnimateTransform.transformZ</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transitions:get"><apiName>transitions</apiName><shortdesc>
      Ein Array von Transition-Objekten, wobei jedes Transition-Objekt einem Satz von Effekten entspricht, die bei Änderung des Ansichtsstatus wiedergegeben werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array von Transition-Objekten, wobei jedes Transition-Objekt einem Satz von Effekten entspricht, die bei Änderung des Ansichtsstatus wiedergegeben werden.
           </apiDesc></apiValueDetail><related-links><link href="mx.states.xml#Transition"><linktext>mx.states.Transition</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      Array von Eigenschaften, die derzeit auf diesem Objekt getweent werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Array von Eigenschaften, die derzeit auf diesem Objekt getweent werden.
           <p>Wird verwendet, um den EffectManager davon zu benachrichtigen, dass bestimmte Eigenschaften dieses Objekts getweent werden, damit der EffectManger nicht versucht, die gleichen Eigenschaften zu animieren.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:uid:get"><apiName>uid</apiName><shortdesc>
      Ein eindeutiger Bezeichner für das Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Ein eindeutiger Bezeichner für das Objekt. Steuerelemente, die von Flex-Daten gesteuert werden, einschließlich aller Steuerelemente, die Unterklassen der List-Klasse sind, verfolgen Datenproviderelemente mit einer UID.
           <p>Flex kann UIDs automatisch erstellen und verwalten. Unter Umständen müssen Sie jedoch eine eigene <codeph>uid</codeph>-Eigenschaft bereitstellen, indem Sie die IUID-Schnittstelle implementieren. Möglicherweise wird auch die Verarbeitung durch Bereitstellung einer eigenen <codeph>uid</codeph>-Eigenschaft deutlich effizienter. UIDs brauchen für die meisten Verwendungszwecke in Flex nicht universell eindeutig zu sein. Eine Ausnahme bilden Meldungen, die von Datendiensten gesendet werden.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUID"><linktext>IUID</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledHeight:get"><apiName>unscaledHeight</apiName><shortdesc>
      Eine bequeme Methode zum Bestimmen der nicht skalierten Höhe der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine bequeme Methode zum Bestimmen der nicht skalierten Höhe der Komponente. Die gesamte Komponente und ihre untergeordneten Elemente sollten innerhalb eines Begrenzungsrechtecks mit dieser Höhe gezeichnet und angeordnet werden. Das Begrenzungsrechteck wird auch als Argument an <codeph>updateDisplayList()</codeph> übergeben.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledWidth:get"><apiName>unscaledWidth</apiName><shortdesc>
      Eine bequeme Methode zum Bestimmen der nicht skalierten Breite der Komponente. Die gesamte Komponente und ihre untergeordneten Elemente sollten innerhalb eines Begrenzungsrechtecks mit dieser Breite gezeichnet und angeordnet werden. Das Begrenzungsrechteck wird auch als Argument an updateDisplayList() übergeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine bequeme Methode zum Bestimmen der nicht skalierten Breite der Komponente. Die gesamte Komponente und ihre untergeordneten Elemente sollten innerhalb eines Begrenzungsrechtecks mit dieser Breite gezeichnet und angeordnet werden. Das Begrenzungsrechteck wird auch als Argument an <codeph>updateDisplayList()</codeph> übergeben.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
      Wird von einen Validator zum Verknüpfen eines Unterfelds mit dieser Komponente verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Wird von einen Validator zum Verknüpfen eines Unterfelds mit dieser Komponente verwendet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Bei Komponenten ist diese Eigenschaft zur Begrenzung des Layouts eine Fassade (facade) über dem ähnlich benannten Stil. Legen Sie mit der @Clear()-Direktive in MXML oder dem Wert <codeph>undefined</codeph> im ActionScript-Code für die Eigenschaft den Standardwert <codeph>undefined</codeph> fest. Beispiel: Im MXML-Code deaktiviert <codeph>verticalCenter.s2="@Clear()"</codeph> die <codeph>verticalCenter</codeph>-Beschränkung im s2-Status. Im ActionScript-Code deaktiviert <codeph>button.verticalCenter = undefined</codeph> die <codeph>verticalCenter</codeph>-Beschränkung des <codeph>button</codeph>.</p>
      
      
      Der vertikale Abstand in Pixeln von der Mitte der Komponente zur Mitte des Inhaltsbereichs des Ankerziels.
           <p>Das standardmäßige Ankerziel ist der Container selbst. </p>
           <p>In Layouts mit erweiterten Beschränkungen kann das Ankerziel eine Beschränkungszeile sein. Dann entspricht der Inhaltsbereich dem Raum zwischen der vorherigen Zeile (oder Containerseite) und der Zielzeile.</p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „constraintColumnId:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:visible:get"><apiName>visible</apiName><shortdesc>
      Gibt an, ob das Anzeigeobjekt sichtbar ist oder nicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="show"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob das Anzeigeobjekt sichtbar ist oder nicht. Nicht sichtbare Anzeigeobjekte sind deaktiviert. Wenn beispielsweise für eine InteractiveObject-Instanz <codeph>visible=false</codeph> gesetzt ist, können Benutzer nicht auf diese Instanz klicken. 
           <p>Bei Festlegung auf <codeph>true</codeph> löst das Objekt ein <codeph>show</codeph>-Ereignis aus. Bei Festlegung auf <codeph>fals</codeph> löst das Objekt ein <codeph>hide</codeph>-Ereignis aus. In beiden Fällen lösen die untergeordneten Objekte kein <codeph>show</codeph>- oder <codeph>hide</codeph>-Ereignis aus, es sei denn, das Objekt hat ausdrücklich eine diesbezügliche Anweisung geschrieben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:width:get"><apiName>width</apiName><shortdesc>
      Eine Zahl, die die Breite der Komponente in Pixeln als Koordinaten des übergeordneten Elements angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="widthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die Breite der Komponente in Pixeln als Koordinaten des übergeordneten Elements angibt. Der Standardwert ist 0. Diese Eigenschaft enthält jedoch die tatsächliche Komponentenbreite, nachdem Flex die Größenänderung der Komponenten in der Anwendung abgeschlossen hat.
           <p>Hinweis: Sie können im MXML <codeph>width</codeph>-Attribut einen Prozentwert wie etwa <codeph>width="100%"</codeph> angeben, Sie können jedoch keinen Prozentwert für die <codeph>width</codeph>-Eigenschaft in ActionScript verwenden. Verwenden Sie stattdessen die <codeph>percentWidth</codeph>-Eigenschaft.</p>
           <p>Durch Festlegen dieser Eigenschaft wird ein <codeph>resize</codeph>-Ereignis ausgelöst. Weitere Informationen zur Auslösung dieses Ereignisses finden Sie in der Beschreibung zum <codeph>resize</codeph>-Ereignis.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/percentWidth"><linktext>percentWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:x:get"><apiName>x</apiName><shortdesc>
      Zahl, die die horizontale Position der Komponente in Pixeln innerhalb des übergeordneten Containers angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="xChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die die horizontale Position der Komponente in Pixeln innerhalb des übergeordneten Containers angibt.
           <p>Das direkte Einstellen dieser Eigenschaft oder das Aufrufen von <codeph>move()</codeph> hat keine oder nur eine temporäre Wirkung, wenn die Komponente einem Layoutcontainer wie HBox, Grid oder Form untergeordnet ist, da die Layoutberechnungen dieser Container die <codeph>x</codeph>-Position auf die Ergebnisse der Berechnung setzen. Die <codeph>x</codeph>-Eigenschaft muss jedoch immer festgelegt werden, wenn das übergeordnete Element ein Arbeitsflächen- oder ein anderer Container mit absoluter Positionierung ist, da der Standardwert 0 lautet.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:y:get"><apiName>y</apiName><shortdesc>
      Zahl, die die vertikale Position der Komponente in Pixeln innerhalb des übergeordneten Containers angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="yChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die die vertikale Position der Komponente in Pixeln innerhalb des übergeordneten Containers angibt.
           <p>Das direkte Einstellen dieser Eigenschaft oder das Aufrufen von <codeph>move()</codeph> hat keine oder nur eine temporäre Wirkung, wenn die Komponente einem Layoutcontainer wie HBox, Grid oder Form untergeordnet ist, da die Layoutberechnungen dieser Container die <codeph>x</codeph>-Position auf die Ergebnisse der Berechnung setzen. Die <codeph>x</codeph>-Eigenschaft muss jedoch immer festgelegt werden, wenn das übergeordnete Element ein Arbeitsflächen- oder ein anderer Container mit absoluter Positionierung ist, da der Standardwert 0 lautet.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:z:get"><apiName>z</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="zChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:UIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc>
      Wird von Flex zum Bitmapcaching des Objekts verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Wird von Flex zum Bitmapcaching des Objekts verwendet. Wenn <codeph>cachePolicy</codeph> auf <codeph>UIComponentCachePolicy.AUTO</codeph> gesetzt ist, dann wird <codeph>cacheHeuristic</codeph> zum Steuern der<codeph>cacheAsBitmap</codeph>-Eigenschaft verwendet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      Die Transformationsmatrix, die zur Berechnung des Layouts der Komponente relativ zu ihren Parallelobjekten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Die Transformationsmatrix, die zur Berechnung des Layouts der Komponente relativ zu ihren Parallelobjekten verwendet wird. Diese Matrix wird von den 3D-Eigenschaften der Komponente definiert (zu denen 2D-Eigenschaften wie <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph> sowie <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>scaleZ</codeph>, <codeph>z</codeph> und <codeph>transformZ</codeph> gehören).
      
      <p>Für die meisten Komponenten sind keine 3D-Transformationseigenschaften eingestellt.</p>
      
      <p>Diese Layoutmatrix wird mit den Werten der <codeph>postLayoutTransformOffsets</codeph>-Eigenschaft kombiniert, um die endgültige berechnete Matrix der Komponente zu bestimmen.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:maintainProjectionCenter:set"><apiName>maintainProjectionCenter</apiName><shortdesc>
      Bei „true“ ist die Projektionsmatrix der Komponente weiterhin in ihrem Begrenzungsrahmen zentriert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Bei „true“ ist die Projektionsmatrix der Komponente weiterhin in ihrem Begrenzungsrahmen zentriert. Wenn keine Projektionsmatrix für die Komponente definiert ist, wird automatisch eine hinzugefügt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transform:set"><apiName>transform</apiName><shortdesc>
      Ein Objekt mit Eigenschaften, die zur Matrix, Farbtransformation und Pixelbegrenzung eines Anzeigeobjekts gehören.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc>
      Ein Objekt mit Eigenschaften, die zur Matrix, Farbtransformation und Pixelbegrenzung eines Anzeigeobjekts gehören. Die spezifischen Eigenschaften – „matrix“, „colorTransform“ und drei schreibgeschützte Eigenschaften (<codeph>concatenatedMatrix</codeph>, <codeph>concatenatedColorTransform</codeph> und <codeph>pixelBounds</codeph>) – werden im Eintrag für die <codeph>Transform</codeph>-Klasse erläutert.  
      
      <p>Jede Eigenschaft des transform-Objekts ist selbst wiederum ein Objekt. Dies ist wichtig, da für matrix- und colorTransform-Objekte neue Werte nur gesetzt werden können, indem ein neues Objekt erstellt und in die transform.matrix- oder transform.colorTransform-Eigenschaft kopiert wird.</p>
     
      <p>Um etwa den tx-Wert einer Anzeigeobjekt-Matrix zu erhöhen, müssen Sie eine Kopie des gesamten Matrixobjekts anfertigen und anschließend das neue Objekt in die matrix-Eigenschaft des transform-Objekts kopieren:</p>
           <pre>
      var myMatrix:Matrix = myUIComponentObject.transform.matrix;  
      myMatrix.tx += 10; 
      myUIComponent.transform.matrix = myMatrix;
      </pre>
       
      Sie können die tx-Eigenschaft nicht direkt setzen. Der folgende Code hat keine Auswirkung auf myUIComponent:
     
      <pre>
      myUIComponent.transform.matrix.tx += 10;
      </pre>
           <p>Beachten Sie, dass die <codeph>transform</codeph> für die <codeph>UIComponent</codeph>, im Gegensatz zum <codeph>DisplayObject</codeph>, den <codeph>matrix</codeph>- und <codeph>matrix3D</codeph>-Wert synchronisiert hält und <codeph>matrix3D</codeph> nicht gleich null ist, selbst wenn die Komponente selbst keine eingestellten 3D-Eigenschaften aufweist. Entwickler sollten die <codeph>is3D</codeph>-Eigenschaft verwenden, um zu überprüfen, ob die Komponente eingestellte 3D-Eigenschaften aufweist. Wenn die Komponente 3D-Eigenschaften aufweist, sollte die <codeph>matrix3D</codeph> der Transformation anstelle der <codeph>matrix</codeph> der Transformation verwendet werden.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#UIComponent/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#UIComponent/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/is3D"><linktext>is3D</linktext></link><link href="mx.geom.xml#Transform"><linktext>mx.geom.Transform</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
  BitmapAsset ist eine Unterklasse der flash.display.Bitmap-Klasse, die Vektorgrafiken repräsentiert, die Sie in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexBitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  BitmapAsset ist eine Unterklasse der flash.display.Bitmap-Klasse, die Vektorgrafiken repräsentiert, die Sie in eine Flex-Anwendung einbetten. Sie implementiert die IFlexDisplayObject-Schnittstelle, durch die eine eingebettete Bitmap in einem Image-Steuerelement angezeigt oder als Containerhintergrund für eine Komponentenskin verwendet werden kann.
 
  <p>Die einzubettende Bitmap kann als JPEG-, GIF- oder PNG-Datei vorliegen. Sie können auch ein Bitmap-Symbol einbetten, das sich in einer von Flash erzeugten SWF-Datei befindet. In jedem dieser Fälle generiert der MXML-Compiler automatisch eine Klasse, die die BitmapAsset-Klasse erweitert, um die eingebettete Schriftart zu repräsentieren.</p>
 
  <p>Sie brauchen beim Schreiben einer Flex-Anwendung die BitmapAsset-Klasse normalerweise nicht direkt zu verwenden. Beispiel: Sie können eine GIF-Datei einbetten und das Bild in einem Image-Steuerelement anzeigen, indem Sie Folgendes schreiben:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Logo.gif')"/></pre>
 
  <p>Alternativ dazu können Sie es in der CSS-Syntax als Hintergrundbild der Anwendung verwenden, indem Sie Folgendes schreiben:</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Logo.gif")
      }
  &lt;fx:Style/></pre>
 
  <p>Sie brauchen die Tatsache, dass der MXML-Compiler für Sie eine Unterklasse der BitmapAsset-Klasse erstellt hat, nicht weiter zur verstehen.</p>
 
  <p>Es kann jedoch nützlich sein, dass Sie verstehen, was auf der ActionScript-Ebene abläuft. Zum Einbetten einer Bitmap in ActionScript deklarieren Sie eine Variable des Class-Typs und versehen sie mit <codeph>[Embed]</codeph>-Metadaten. Beispielsweise betten Sie eine GIF-Datei wie folgt ein:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Logo.gif")]
  private var logoClass:Class;</pre>
 
  <p>Der MXML-Compiler erkennt die GIF-Erweiterung, transkodiert die GIF-Daten in das vom Player verwendete Bitmap-Format, generiert automatisch eine Unterklasse der BitmapAsset-Klasse und stellt Ihre Variable so ein, dass sie einen Verweis auf diese automatisch generierte Klasse darstellt. Sie können diesen Klassenverweis zum Erstellen von Instanzen der BitmapAsset-Klasse mit dem <codeph>new</codeph>-Operator verwenden, und Sie können in Verbindung mit diesen Instanzen die APIs der BitmapAsset-Klasse verwenden:</p>
 
  <pre>
  var logo:BitmapAsset = BitmapAsset(new logoClass());
  logo.bitmapData.noise(4);</pre>
 
  <p>Es wird jedoch selten erforderlich sein, dass Sie selbst BitmapAsset-Instanzen erstellen, da bildbezogene Eigenschaften und Stile einfach auf eine bilderzeugende Klasse eingestellt werden können und die Komponenten nach Bedarf Instanzen erstellen. Beispiel: Zur Anzeige dieses Bilds in einem Image-Steuerelement können Sie die <codeph>source</codeph>-Eigenschaft des Bilds auf <codeph>logoClass</codeph> setzen. In MXML gehen Sie dazu wie folgt vor:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:BitmapAsset:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>Die Daten für die Bitmap. 
     
      </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Gibt an, ob die Bitmap am nächsten Pixel ausgerichtet wird.
     
      </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob die Bitmap beim Skalieren geglättet wird.  
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:BitmapAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird. Bei Unterschieden ist diese Methode dafür zuständig, den Inhalt des Elements zu spiegeln und die Transformation des Elements nach dem Layout so zu aktualisieren, dass die Nachfolger ein gespiegeltes Koordinatensystem erben. IVisualElements implementieren die Spiegelung in der Regel, indem sie mithilfe von postLayoutTransformOffsets die x-Achse um -1 skalieren und die x-Koordinate des Ursprungs um die Breite des Elements verschieben. Der Nettoeffekt dieser „Spiegeltransformation“ ist eine Umkehrung der Richtung, in welcher die x-Achse verlängert wird, ohne dass die Position des Elements relativ zum Ursprung seines übergeordneten Elements verändert wird.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:move"><apiName>move</apiName><shortdesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Position für dieses Objekt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Position für dieses Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite dieses Objekts.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe dieses Objekts.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.
	 
	  <p>Diese Methode dient hauptsächlich zur Implementierung der <codeph>updateDisplayList()</codeph>-Methode. Dabei berechnen Sie die tatsächliche Größe des Objekts aus der explizit angegebenen Größe, der Größe im Verhältnis zum übergeordneten Element (Prozent) und der gemessenen Größe. Dann wenden Sie diese tatsächliche Größe durch Aufrufen von <codeph>setActualSize()</codeph> auf das Objekt an.</p>
	 
	  <p>In anderen Fällen sollten Sie <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> oder <codeph>percentHeight</codeph> festlegen, statt diese Methode aufzurufen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:BitmapAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          Legt die gewünschte Layoutrichtung für ein Element fest: entweder LayoutDirection.LTR (von links nach rechts), LayoutDirection.RTL (von rechts nach links) oder null (vererben).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          Legt die gewünschte Layoutrichtung für ein Element fest: entweder LayoutDirection.LTR (von links nach rechts), LayoutDirection.RTL (von rechts nach links) oder null (vererben). Diese Eigenschaft wird in der Regel durch einen vererbenden Stil unterstützt. Bei null wird der layoutDirection-Stil als undefiniert festgelegt. Klassen wie GraphicElement, die ILayoutDirectionElement implementieren, aber Stile nicht unterstützen, müssen zusätzlich einen Nullwert für diese Eigenschaft unterstützen. Das heißt, dass die layoutDirection vom übergeordneten Element vererbt werden muss. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Die gemessene Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Höhe dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Die gemessene Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Breite dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutDirectionElement"><apiName>ILayoutDirectionElement</apiName><shortdesc>
      Die ILayoutDirectionElement-Schnittstelle definiert, welche Eigenschaften und Methoden mindestens erforderlich sind, damit ein Objekt die layoutDirection-Eigenschaft unterstützen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      Die ILayoutDirectionElement-Schnittstelle definiert, welche Eigenschaften und Methoden mindestens erforderlich sind, damit ein Objekt die layoutDirection-Eigenschaft unterstützen kann.
      
      </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links><apiOperation id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Elemente müssen diese Methode aufrufen, wenn ihre eigene layoutDirection oder die layoutDirection des übergeordneten Elements geändert wird. Bei Unterschieden ist diese Methode dafür zuständig, den Inhalt des Elements zu spiegeln und die Transformation des Elements nach dem Layout so zu aktualisieren, dass die Nachfolger ein gespiegeltes Koordinatensystem erben. IVisualElements implementieren die Spiegelung in der Regel, indem sie mithilfe von postLayoutTransformOffsets die x-Achse um -1 skalieren und die x-Koordinate des Ursprungs um die Breite des Elements verschieben. Der Nettoeffekt dieser „Spiegeltransformation“ ist eine Umkehrung der Richtung, in welcher die x-Achse verlängert wird, ohne dass die Position des Elements relativ zum Ursprung seines übergeordneten Elements verändert wird.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
          Legt die gewünschte Layoutrichtung für ein Element fest: entweder LayoutDirection.LTR (von links nach rechts), LayoutDirection.RTL (von rechts nach links) oder null (vererben).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          Legt die gewünschte Layoutrichtung für ein Element fest: entweder LayoutDirection.LTR (von links nach rechts), LayoutDirection.RTL (von rechts nach links) oder null (vererben). Diese Eigenschaft wird in der Regel durch einen vererbenden Stil unterstützt. Bei null wird der layoutDirection-Stil als undefiniert festgelegt. Klassen wie GraphicElement, die ILayoutDirectionElement implementieren, aber Stile nicht unterstützen, müssen zusätzlich einen Nullwert für diese Eigenschaft unterstützen. Das heißt, dass die layoutDirection vom übergeordneten Element vererbt werden muss. 
          
          </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeProvider"><apiName>ISWFBridgeProvider</apiName><shortdesc>
  Ein Implementor von ISWFBridgeProvider bietet eine Brücke zu einer Anwendung in einer anderen Sicherheits-Sandbox oder zu einer Anwendung, die mit einer anderen Version des Flex-Compilers erstellt wurde und unter einer anderen ApplicationDomain ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Ein Implementor von ISWFBridgeProvider bietet eine Brücke zu einer Anwendung in einer anderen Sicherheits-Sandbox oder zu einer Anwendung, die mit einer anderen Version des Flex-Compilers erstellt wurde und unter einer anderen ApplicationDomain ausgeführt wird. Mit dieser Schnittstelle kann der Aufrufer eine Brücke zu dieser Anwendung abrufen. Sobald der Aufrufer über die Brücke verfügt, können Ereignisse an die Anwendung gesendet werden.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
      Testet, ob das untergeordnete Element dem übergeordneten Element Zugriff auf seine Anzeigeobjekte gestattet und ihm erlaubt, auf Meldungen zu warten, die aus dem untergeordneten Objekt stammen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Überprüft, ob das übergeordnete Element Zugriff auf die Anzeigeobjekte des untergeordneten Elements hat oder auf Meldungen warten darf, die ihren Ursprung im untergeordneten Element haben. <codeph>true</codeph>, wenn Zugriff erlaubt ist, wenn nicht, <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
      Testet, ob das übergeordnete Element dem untergeordneten Element Zugriff auf seine Anzeigeobjekte gestattet und ihm erlaubt, auf Meldungen zu warten, die aus dem übergeordneten Objekt stammen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Überprüft, ob das untergeordnete Element Zugriff auf die Anzeigeobjekte des übergeordneten Elements hat oder auf Meldungen warten darf, die ihren Ursprung im übergeordneten Element haben. <codeph>true</codeph>, wenn Zugriff erlaubt ist, wenn nicht, <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
      Eine Brücke zur Anwendung, die mit dem Implementor der Schnittstelle verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Eine Brücke zur Anwendung, die mit dem Implementor dieser Schnittstelle verknüpft ist. Der IEventDispatcher, der verwendet werden kann, um Ereignisse an eine Anwendung in einer anderen ApplicationDomain oder einer anderen Sandbox zu senden.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
  Eine ClassFactory-Instanz ist ein „Factory-Objekt“, das Flex zum Generieren von Instanzen einer anderen Klasse verwendet, wobei jede dieser Instanzen exakt dieselben Eigenschaften hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFactory</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine ClassFactory-Instanz ist ein „Factory-Objekt“, das Flex zum Generieren von Instanzen einer anderen Klasse verwendet, wobei jede dieser Instanzen exakt dieselben Eigenschaften hat.
 
  <p>Sie geben eine <codeph>generator</codeph>-Klasse an, wenn Sie das Factory-Objekt erstellen. Dann legen Sie die <codeph>properties</codeph>-Eigenschaft des Factory-Objekts fest. Flex verwendet das Factory-Objekt, um Instanzen durch Aufrufen der <codeph>newInstance()</codeph>-Methode des Factory-Objekts zu generieren.</p>
 
  <p>Die <codeph>newInstance()</codeph>-Methode erstellt eine neue Instanz der <codeph>generator</codeph>-Klasse und legt die von <codeph>properties</codeph> angegebenen Eigenschaften in der neuen Instanz fest. Wenn Sie die generierten Instanzen weiter anpassen müssen, können Sie die <codeph>newInstance()</codeph>-Methode überschreiben.</p>
 
  <p>Die ClassFactory-Klasse implementiert die IFactory-Schnittstelle. Mit dieser Schnittstelle können Sie daher Objekte erstellen, die Eigenschaften des Typs IFactory zugewiesen werden können. Dazu zählen beispielsweise die <codeph>itemRenderer</codeph>-Eigenschaft eines List-Steuerelements oder die <codeph>itemEditor</codeph>-Eigenschaft eines DataGrid-Steuerelements.</p>
 
  <p>Sie können beispielsweise eine Elementrenderer-Klasse namens ProductRenderer mit der <codeph>showProductImage</codeph>-Eigenschaft erstellen, die den Wert <codeph>true</codeph> oder <codeph>false</codeph> annehmen kann. Mit dem folgenden Code erstellen Sie ein List-Steuerelement mit diesem Renderer, wobei jede Renderer-Instanz ein Bild des Produkts anzeigt:</p>
 
  <pre>
  var productRenderer:ClassFactory = new ClassFactory(ProductRenderer);
  productRenderer.properties = { showProductImage: true };
  myList.itemRenderer = productRenderer;</pre>
 
  <p>Das List-Steuerelement ruft die <codeph>newInstance()</codeph>-Methode von <codeph>itemRenderer</codeph> auf, um einzelne Instanzen von ProductRenderer zu erstellen. Dabei ist die <codeph>showProductImage</codeph>-Eigenschaft für jede Instanz auf <codeph>true</codeph> gesetzt. Wenn ein anderes List-Steuerelement keine Bilder des Produkts anzeigen soll, erstellen Sie mit der ProductRenderer-Klasse eine weitere ClassFactory, die die<codeph>properties</codeph>-Eigenschaft <codeph>{ showProductImage: false }</codeph> hat.</p>
 
  <p>Die Konfiguration von Instanzen mit der <codeph>properties</codeph>-Eigenschaft kann äußerst leistungsfähig sein, da sie verschiedene Möglichkeiten zur Verwendung einer einzigen Generatorklasse erlaubt. Häufig werden jedoch nicht konfigurierbare Generatorklassen erstellt, für die keine Eigenschaften eingestellt werden müssen. Daher können Sie folgende Syntax in MXML verwenden: </p>
 
  <pre>
  &lt;mx:List id="myList" itemRenderer="ProductRenderer"></pre>
 
  <p>Der MXML-Compiler erstellt die ClassFactory-Instanz automatisch.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IFactory"><linktext>mx.core.IFactory</linktext></link><link href="" invalidHref="mx.controls.List.xml"><linktext>mx.controls.List</linktext></link></related-links><apiConstructor id="mx.core:ClassFactory:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Die Klasse, die die <codeph>newInstance()</codeph>-Methode zur Erstellung von Objekten ausgehend von diesem Factory-Objekt verwendet.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Erstellt eine neue Instanz der generator-Klasse mit den durch „properties“ festgelegten Eigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die neu erstellte Instanz.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Erstellt eine neue Instanz der <codeph>generator</codeph>-Klasse mit den durch <codeph>properties</codeph> festgelegten Eigenschaften.
	 
	  <p>Diese Methode implementiert die <codeph>newInstance()</codeph>-Methode der IFactory-Schnittstelle.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ClassFactory:generator"><apiName>generator</apiName><shortdesc>
      Die Klasse, die die newInstance()-Methode zur Erstellung von Objekten ausgehend von diesem Factory-Objekt verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Die Klasse, die die <codeph>newInstance()</codeph>-Methode zur Erstellung von Objekten ausgehend von diesem Factory-Objekt verwendet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ClassFactory:properties"><apiName>properties</apiName><shortdesc>
	 Ein Objekt, dessen Name/Wert-Paare die Eigenschaften angeben, die für jedes von der newInstance()-Methode generierte Objekt festgelegt werden müssen. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	 Ein Objekt, dessen Name/Wert-Paare die Eigenschaften angeben, die für jedes von der <codeph>newInstance()</codeph>-Methode generierte Objekt festgelegt werden müssen. 
	 
	  <p>Wenn Sie beispielsweise <codeph>properties</codeph> auf <codeph>{ text: "Hello", width: 100 }</codeph> setzen, dann wird für jede Instanz der <codeph>generator</codeph>-Klasse, die durch Aufrufen von <codeph>newInstance()</codeph> generiert wird, <codeph>text</codeph> auf <codeph>"Hello"</codeph> und <codeph>width</codeph> auf <codeph>100</codeph> gesetzt.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IUITextField"><apiName>IUITextField</apiName><shortdesc>
  Die IUITextField-Schnittstelle definiert den grundlegenden API-Satz für UITextField-Instanzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IUITextField-Schnittstelle definiert den grundlegenden API-Satz für UITextField-Instanzen.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:appendText"><apiName>appendText</apiName><shortdesc conref="flash.text.TextField#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc conref="flash.text.TextField#getCharBoundaries()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharBoundaries()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getImageReference"><apiName>getImageReference</apiName><shortdesc conref="flash.text.TextField#getImageReference()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getImageReference()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc conref="flash.text.TextField#getLineIndexOfChar()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexOfChar()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineLength"><apiName>getLineLength</apiName><shortdesc conref="flash.text.TextField#getLineLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc conref="flash.text.TextField#getLineMetrics()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineMetrics()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc conref="flash.text.TextField#getLineOffset()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineOffset()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineText"><apiName>getLineText</apiName><shortdesc conref="flash.text.TextField#getLineText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc conref="flash.text.TextField#getParagraphLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getParagraphLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UITextField#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Der Stilwert.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Name der style-Eigenschaft.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc conref="flash.text.TextField#getTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextFormat"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc conref="mx.core.UITextField#getUITextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier><apiDesc>Ein Objekt mit Formatierungsinformationen für diese Komponente.
           </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#getUITextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc conref="flash.text.TextField#replaceSelectedText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceSelectedText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceText"><apiName>replaceText</apiName><shortdesc conref="flash.text.TextField#replaceText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setColor"><apiName>setColor</apiName><shortdesc conref="mx.core.UITextField#setColor()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Die neue Schriftfarbe.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#setColor()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UITextField#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setSelection"><apiName>setSelection</apiName><shortdesc conref="flash.text.TextField#setSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc conref="flash.text.TextField#setTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flash.text:TextFormat"/></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc conref="mx.core.UITextField#truncateToFit()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn der Text gekürzt werden musste.
      
      </apiDesc></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der Text, der nach der Stelle, an der der Text gekürzt wurde, angehängt werden muss. Wenn der Wert <codeph>null</codeph> übergeben wird, wird ein lokalisierbarer String wie <codeph>"..."</codeph> verwendet.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#truncateToFit()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUITextField:mx.core:IUITextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc conref="flash.text.TextField#alwaysShowSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#alwaysShowSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc conref="flash.text.TextField#antiAliasType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#antiAliasType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:autoSize:get"><apiName>autoSize</apiName><shortdesc conref="flash.text.TextField#autoSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#autoSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc conref="flash.text.TextField#backgroundColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#backgroundColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:background:get"><apiName>background</apiName><shortdesc conref="flash.text.TextField#background">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#background">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:borderColor:get"><apiName>borderColor</apiName><shortdesc conref="flash.text.TextField#borderColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#borderColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:border:get"><apiName>border</apiName><shortdesc conref="flash.text.TextField#border">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#border">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc conref="flash.text.TextField#bottomScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#bottomScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc conref="flash.text.TextField#caretIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#caretIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc conref="flash.text.TextField#condenseWhite">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#condenseWhite">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc conref="flash.text.TextField#defaultTextFormat">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc conref="flash.text.TextField#defaultTextFormat">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc conref="flash.text.TextField#embedFonts">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#embedFonts">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc conref="flash.text.TextField#gridFitType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#gridFitType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:htmlText:get"><apiName>htmlText</apiName><shortdesc conref="flash.text.TextField#htmlText">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#htmlText">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc conref="mx.core.UITextField#ignorePadding">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UITextField#ignorePadding">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc conref="mx.core.UITextField#inheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#inheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:length:get"><apiName>length</apiName><shortdesc conref="flash.text.TextField#length">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#length">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc conref="flash.text.TextField#maxScrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc conref="flash.text.TextField#maxScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc conref="flash.text.TextField#mouseWheelEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#mouseWheelEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:multiline:get"><apiName>multiline</apiName><shortdesc conref="flash.text.TextField#multiline">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#multiline">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UITextField#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UITextField#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc conref="mx.core.UITextField#nonInheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonInheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc conref="mx.core.UITextField#nonZeroTextHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonZeroTextHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:numLines:get"><apiName>numLines</apiName><shortdesc conref="flash.text.TextField#numLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#numLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollH:get"><apiName>scrollH</apiName><shortdesc conref="flash.text.TextField#scrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollV:get"><apiName>scrollV</apiName><shortdesc conref="flash.text.TextField#scrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectable:get"><apiName>selectable</apiName><shortdesc conref="flash.text.TextField#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc conref="flash.text.TextField#selectionBeginIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionBeginIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc conref="flash.text.TextField#selectionEndIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionEndIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:sharpness:get"><apiName>sharpness</apiName><shortdesc conref="flash.text.TextField#sharpness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#sharpness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc conref="flash.text.TextField#styleSheet">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/></apiValueDef><apiDesc conref="flash.text.TextField#styleSheet">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textColor:get"><apiName>textColor</apiName><shortdesc conref="flash.text.TextField#textColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#textColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textHeight:get"><apiName>textHeight</apiName><shortdesc conref="flash.text.TextField#textHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textWidth:get"><apiName>textWidth</apiName><shortdesc conref="flash.text.TextField#textWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:text:get"><apiName>text</apiName><shortdesc conref="flash.text.TextField#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#text">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:thickness:get"><apiName>thickness</apiName><shortdesc conref="flash.text.TextField#thickness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#thickness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:type:get"><apiName>type</apiName><shortdesc conref="flash.text.TextField#type">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#type">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:useRichTextClipboard:get"><apiName>useRichTextClipboard</apiName><shortdesc conref="flash.text.TextField#useRichTextClipboard">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#useRichTextClipboard">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc conref="flash.text.TextField#wordWrap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#wordWrap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponentCachePolicy"><apiName>UIComponentCachePolicy</apiName><shortdesc>
  Die ContainerCreationPolicy-Klasse definiert die Konstantenwerte für die cachePolicy-Eigenschaft der UIComponent-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ContainerCreationPolicy-Klasse definiert die Konstantenwerte für die <codeph>cachePolicy</codeph>-Eigenschaft der UIComponent-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/cachePolicy"><linktext>mx.core.UIComponent.cachePolicy</linktext></link></related-links><apiValue id="mx.core:UIComponentCachePolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
      Legt fest, dass das Flex-Framework für die Entscheidung, ob das Objekt als Bitmap zwischengespeichert werden soll, heuristische Verfahren verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass das Flex-Framework für die Entscheidung, ob das Objekt als Bitmap zwischengespeichert werden soll, heuristische Verfahren verwendet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:OFF"><apiName>OFF</apiName><shortdesc>
      Legt fest, dass das Flex-Framework nie versuchen sollte, das Objekt als Bitmap zu speichern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass das Flex-Framework nie versuchen sollte, das Objekt als Bitmap zu speichern.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:ON"><apiName>ON</apiName><shortdesc>
      Legt fest, dass das Flex-Framework das Objekt immer als Bitmap speichern soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass das Flex-Framework das Objekt immer als Bitmap speichern soll.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
  Die FlexSprite-Klasse ist eine Unterklasse der Sprite-Klasse des Players und die Superklasse der UIComponent-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexSprite-Klasse ist eine Unterklasse der Sprite-Klasse des Players und die Superklasse der UIComponent-Klasse. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSprite:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
	 
	  <p>Stellt die <codeph>name</codeph>-Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird.</p>
	 
	  <p>Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, der innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"Button17"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSprite:toString"><apiName>toString</apiName><shortdesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, z. B. <codeph>"MyApp0.HBox5.Button17"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse aus der <codeph>name</codeph>-Eigenschaft des Objekts und seiner Vorgänger erstellt.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IConstraintClient"><apiName>IConstraintClient</apiName><shortdesc>
  Die IConstraintClient-Schnittstelle definiert die Schnittstelle für Komponenten, die Layoutbeschränkungen unterstützen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IConstraintClient-Schnittstelle definiert die Schnittstelle für Komponenten, die Layoutbeschränkungen unterstützen. Diese Schnittstelle wird nur von Implementierungen beschränkungsbasierter Layouts verwendet. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      Gibt den festgelegten Beschränkungswert zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Beschränkungswert oder null, wenn er nicht definiert ist.
     
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Name des Beschränkungswerts. Beschränkungsparameter sind „<codeph>baseline</codeph>“, „<codeph>bottom</codeph>“, „<codeph>horizontalCenter</codeph>“, „<codeph>left</codeph>“, „<codeph>right</codeph>“, „<codeph>top</codeph>“ und „<codeph>verticalCenter</codeph>“.
     
      <p>Weitere Informationen zu diesen Parametern finden Sie unter den Canvas- und Panel-Containern und unter der Beschreibung der Stilmetadaten für AnchorStyles.</p>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den festgelegten Beschränkungswert zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.containers.Canvas.xml"><linktext>mx.containers.Canvas</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      Legt den angegebenen Beschränkungswert fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Name des Beschränkungswerts. Beschränkungsparameter sind „<codeph>baseline</codeph>“, „<codeph>bottom</codeph>“, „<codeph>horizontalCenter</codeph>“, „<codeph>left</codeph>“, „<codeph>right</codeph>“, „<codeph>top</codeph>“ und „<codeph>verticalCenter</codeph>“.
     
      <p>Weitere Informationen zu diesen Parametern finden Sie unter den Canvas- und Panel-Containern und unter der Beschreibung der Stilmetadaten für AnchorStyles.</p>
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Der neue Wert für die Beschränkung.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt den angegebenen Beschränkungswert fest.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.containers.Canvas.xml"><linktext>mx.containers.Canvas</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:ISelectableList"><apiName>ISelectableList</apiName><shortdesc>
  Die ISelectableList-Schnittstelle gibt an, dass der Implementor ein IList-Element ist, das eine selectedIndex-Eigenschaft unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die ISelectableList-Schnittstelle gibt an, dass der Implementor ein IList-Element ist, das eine <codeph>selectedIndex</codeph>-Eigenschaft unterstützt.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ISelectableList_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Wird ausgelöst, wenn sich die selectedIndex-Eigenschaft ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>selectedIndex</codeph>-Eigenschaft ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:ISelectableList_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Wird ausgelöst, wenn sich die selectedIndex-Eigenschaft ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>selectedIndex</codeph>-Eigenschaft ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="mx.core:ISelectableList:mx.core:ISelectableList:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      Die Indexposition des ausgewählten IList-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Indexposition des ausgewählten IList-Objekts.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
  Eine Klassen-Factory, die einen Systemmanager als einen Kontext von dem Ort bietet, an dem die Klasse erstellt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ClassFactory</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine Klassen-Factory, die einen Systemmanager als einen Kontext von dem Ort bietet, an dem die Klasse erstellt werden soll.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ContextualClassFactory:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Die Klasse, die die <codeph>newInstance()</codeph>-Methode zur Erstellung von Objekten ausgehend von diesem Factory-Objekt verwendet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Systemmanagerkontext, in dem das Objekt erstellt werden soll.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Konstruktor.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ContextualClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Erstellt eine neue Instanz der generator-Klasse mit den durch „properties“ festgelegten Eigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die neu erstellte Instanz.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Erstellt eine neue Instanz der <codeph>generator</codeph>-Klasse mit den durch <codeph>properties</codeph> festgelegten Eigenschaften.
	 
	  <p>Diese Methode implementiert die <codeph>newInstance()</codeph>-Methode der IFactory-Schnittstelle.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ContextualClassFactory:moduleFactory"><apiName>moduleFactory</apiName><shortdesc>
	  Der Kontext, in dem ein Objekt erstellt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Der Kontext, in dem ein Objekt erstellt werden soll.
	 
	  <p>Dies dient der Lösung mithilfe der in einer Anwendungs-SWF eingebetteten Schriftarten, wenn das Framework als eine RSL geladen wird (die RSL hat ihren eigenen SWF-Kontext). Der Zugriff auf eingebettete Schriftarten darf nur von dem SWF-Dateikontext aus erfolgen, in dem sie erstellt wurden. Durch Verwendung des <codeph>systemManager</codeph> der Anwendungs-SWF, kann die RSL Objekte im Anwendungs-SWF-Kontext erstellen, die Zugriff auf die eingebetteten Schriftarten der Anwendung haben. <codeph>moduleFactory</codeph> ruft die <codeph>create()</codeph>-Methode zur Erstellung eines Objekts im Kontext der <codeph>moduleFactory</codeph> auf.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IProgrammaticSkin"><apiName>IProgrammaticSkin</apiName><shortdesc>
  Die IProgrammaticSkin-Schnittstelle definiert die Schnittstelle, die Skinklassen implementieren müssen, wenn sie die name-Eigenschaft-Skinschnittstelle verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IProgrammaticSkin-Schnittstelle definiert die Schnittstelle, die Skinklassen implementieren müssen, wenn sie die <codeph>name</codeph>-Eigenschaft-Skinschnittstelle verwenden. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
  ByteArrayAsset ist eine Unterklasse der flash.utils.ByteArray-Klasse, welche eine willkürliche Folge von Byte-Daten darstellt, die Sie in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.utils:ByteArray</apiBaseClassifier></apiClassifierDef><apiDesc>
  ByteArrayAsset ist eine Unterklasse der flash.utils.ByteArray-Klasse, welche eine willkürliche Folge von Byte-Daten darstellt, die Sie in eine Flex-Anwendung einbetten.
 
  <p>Die von Ihnen eingebetteten Byte-Daten können sich in einer Datei eines beliebigen Typs befinden und es wird immer die vollständige Datei eingebettet. Es ist nicht möglich, die Byte eines bestimmten Bestands, der sich in einer SWF-Datei befindet, einzubetten, obwohl eine vollständige SWF-Datei eingebettet werden kann.</p>
 
  <p>Der MXML-Compiler generiert automatisch eine Klasse, die die ByteArrayAsset-Klasse zur Darstellung der eingebetteten Daten erweitert.</p>
 
  <p>Wenn Sie eine beliebige Datei einbetten möchten, deklarieren Sie eine Variable des Typs Klasse und versehen sie mit <codeph>[Embed]</codeph>-Metadaten mithilfe des <codeph>application/octet-stream</codeph> vom Typ MIME. Beispielsweise betten Sie eine Textdatei wie folgt ein:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Story.txt", mimeType="application/octet-stream")]
  private var storyClass:Class;
  </pre>
 
  <p>Der Compiler generiert automatisch eine Unterklasse der ByteArrayAsset-Klasse und stellt Ihre Variable so ein, dass sie einen Verweis auf diese automatisch generierte Klasse darstellt. Sie können diesen Klassenverweis zum Erstellen von Instanzen der ByteArrayAsset-Klasse mithilfe des <codeph>new</codeph>-Operators verwenden, und Sie können Informationen aus dem Byte-Array mit Methoden der ByteArray-Klasse extrahieren:</p>
 
  <pre>
  var storyByteArray:ByteArrayAsset = ByteArrayAsset(new storyClass());
  var story:String = storyByteArray.readUTFBytes(storyByteArray.length);
  </pre>
 
  <p>Sie müssen angeben, dass der MIME-Typ für die Einbettung <codeph>application/octet-stream</codeph> ist. Dies führt dazu, dass die Byte-Daten „wie besehen“ und ohne Interpretation eingebettet werden. Eine andere Folge davon ist, dass die automatisch generierte Klasse die ByteArrayAsset-Klasse und nicht eine andere Bestandsklasse erweitert.</p>
 
  <p>Beispiel: Wenn Sie eine PNG-Datei einbetten, ohne diesen MIME-Typ anzugeben, werden die PNG-Daten automatisch in das vom Player verwendete Bitmap-Format transkodiert und es wird automatisch eine Unterklasse der BitmapAsset-Klasse generiert, um sie darzustellen. Wenn Sie jedoch den MIME-Typ als <codeph>application/octet-stream</codeph> angeben, tritt keine Transkodierung auf, die PNG-Daten werden „wie besehen“ eingebettet und die automatisch generierte Klasse erweitert ByteArrayAsset.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ByteArrayAsset:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
  Eine UIComponentDescriptor-Instanz fasst die von Ihnen in einem MXML-Tag für eine Instanz einer visuellen Komponente angegebenen Informationen zusammen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ComponentDescriptor</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine UIComponentDescriptor-Instanz fasst die von Ihnen in einem MXML-Tag für eine Instanz einer visuellen Komponente angegebenen Informationen zusammen.
 
  <p>Die meisten Tags in einer MXML-Datei beschreiben eine aus UIComponent-Objekten bestehende Baumstruktur. Beispiel: Das <codeph>&lt;mx:Application></codeph>-Tag repräsentiert ein UIComponent-Objekt, und seine untergeordneten Container und Steuerelemente sind alle UIComponent-Objekte.</p>
 
  <p>Der MXML-Compiler kompiliert jedes dieser MXML-Tags in einer UIComponentDescriptor-Instanz. Genauer gesagt, generiert der MXML-Compiler automatisch eine ActionScript-Datenstruktur, welche eine Baumstruktur bestehend aus UIComponentDescriptor-Objekten ist.</p>
 
  <p>Während der Laufzeit verwendet die <codeph>createComponentsFromDescriptors()</codeph>-Methode der Container-Klasse die Informationen in den UIComponentDescriptor-Objekten im <codeph>childDescriptors</codeph>-Array des Containers, um die tatsächlichen UIComponent-Objekte, die untergeordneten Elemente des Containers, sowie untergeordnete Elemente tieferer Ebenen zu erstellen. Abhängig vom Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers können die untergeordneten Elemente beim Anwendungsstart erstellt werden, wenn ein Teil der Komponente in Kürze sichtbar wird oder wenn der Anwendungsentwickler die <codeph>createComponentsFromDescriptors()</codeph>-Methode manuell aufruft.</p>
 
  <p>Sie erstellen UIComponentDescriptor-Instanzen normalerweise nicht selbst. Sie können auf diejenigen zugreifen, die der MXML-Compiler automatisch mithilfe des <codeph>childDescriptors</codeph>-Arrays der Container-Klasse generiert.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="" invalidHref="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:UIComponentDescriptor:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>Ein Objekt, das Name/Wert-Paare für die Eigenschaften des UIComponentDescriptor-Objekts enthält, wie etwa <codeph>type</codeph>, <codeph>id</codeph>, <codeph>propertiesFactory</codeph>, <codeph>events</codeph>, <codeph>stylesFactory</codeph> und <codeph>effects</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:UIComponentDescriptor:effects"><apiName>effects</apiName><shortdesc>
      Ein Array, das die Effekte für die Komponente wie in MXML angegeben enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array, das die Effekte für die Komponente wie in MXML angegeben enthält.
     
      <p>Betrachten Sie beispielsweise, was passiert, wenn Sie folgenden Code schreiben:</p>
	 
      <pre>
	  &lt;mx:TextInput showEffect="Fade" hideEffect="Fade"/></pre>
	 
      <p>Die <codeph>effects</codeph>-Eigenschaft des Deskriptors ist das Array <codeph>[ "showEffect", "hideEffect" ]</codeph>.</p>
     
      <p>Die <codeph>effects</codeph>-Eigenschaft ist <codeph>null</codeph>, wenn für die Komponente keine MXML-Effekte angegeben wurden.</p>
	 
	  <p>Beachten Sie, dass die Werte der Effektattribute nicht in dieser Eigenschaft festgelegt werden. Stattdessen werden Effekte wie Stile behandelt und sind deshalb in der <codeph>stylesFactory</codeph>-Eigenschaft enthalten. Das <codeph>effect</codeph>-Array verfolgt einfach, welche Stile in der <codeph>stylesFactory</codeph> eigentlich Effekte sind.</p>
	 
      <p>Diese Eigenschaft wird von der Container-Methode <codeph>createComponentsFromDescriptors()</codeph> verwendet, um die Effekte beim EffectManager zu registrieren.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentDescriptor:stylesFactory"><apiName>stylesFactory</apiName><shortdesc>
      Eine Funktion, die ein Objekt konstruiert, das Name/Wert-Paare für die Instanzstile für die Komponente entsprechen der Angaben in MXML enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Eine Funktion, die ein Objekt konstruiert, das Name/Wert-Paare für die Instanzstile für die Komponente entsprechen der Angaben in MXML enthält.
	 
	  <p>Betrachten Sie beispielsweise, was passiert, wenn Sie folgenden Code schreiben:</p>
	 
      <pre>
	  &lt;mx:TextInput borderColor="0x888888" color="0xDDDDDD"/></pre>
	 
	  <p>Die <codeph>stylesFactory</codeph>-Eigenschaft des Deskriptors ist die Funktion:</p>
	 
      <pre>
	  function():void { this.borderColor = 0x888888; this.color = 0xDDDDDD };</pre>
	 
      <p>Die <codeph>stylesFactory</codeph>-Eigenschaft ist <codeph>null</codeph>, wenn für die Komponenteninstanz keine MXML-Stile angegeben wurden.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
  Die FlexLoader-Klasse ist eine Unterklasse der Loader-Klasse des Players.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Loader</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexLoader-Klasse ist eine Unterklasse der Loader-Klasse des Players. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexLoader:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Stellt die <codeph>name</codeph>-Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird.</p>
      <p>Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, welcher innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"FlexLoader13"</codeph>.</p>
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/createUniqueName()"><linktext>mx.utils.NameUtils.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexLoader:toString"><apiName>toString</apiName><shortdesc>
      Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, z. B. <codeph>"MyApp0.HBox5.FlexLoader13"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse aus der <codeph>name</codeph>-Eigenschaft des Objekts und seiner Vorgänger erstellt.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/displayObjectToString()"><linktext>mx.utils.NameUtils.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUID"><apiName>IUID</apiName><shortdesc>
  Die IUID-Schnittstelle definiert die Schnittstelle für Objekte, die eindeutige Bezeichner (UIDs) zum eindeutigen Identifizieren des Objekts haben müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IUID-Schnittstelle definiert die Schnittstelle für Objekte, die eindeutige Bezeichner (UIDs) zum eindeutigen Identifizieren des Objekts haben müssen. UIDs brauchen für die meisten Verwendungszwecke in Flex nicht universell eindeutig zu sein. Eine Ausnahme besteht für Meldungen, die durch Datendienste gesendet werden.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IUID:mx.core:IUID:uid:get"><apiName>uid</apiName><shortdesc>
	  Der eindeutige Bezeichner für dieses Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Der eindeutige Bezeichner für dieses Objekt.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexShape"><apiName>FlexShape</apiName><shortdesc>
  FlexShape ist eine Unterklasse der Shape-Klasse von Player.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Shape</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexShape ist eine Unterklasse der Shape-Klasse des Players. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexShape:FlexShape"><apiName>FlexShape</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
	 
	  <p>Stellt die <codeph>name</codeph> -Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird.</p>
	 
	  <p>Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, welcher innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"FlexShape15"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexShape:toString"><apiName>toString</apiName><shortdesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, wie z. B. <codeph>"MyApp0.HBox5.FlexShape15"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse von der <codeph>name</codeph>-Eigenschaft des Objekts und seiner übergeordneten Objekte erstellt.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:INavigatorContent"><apiName>INavigatorContent</apiName><shortdesc>
  Die INavigatorContent-Schnittstelle definiert die Schnittstelle, die ein Container implementieren muss, damit er als untergeordnetes Objekt eines Navigatorcontainers verwendet werden kann. Beispiele: ViewStack-, TabNavigator- und Accordion-Navigatorcontainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die INavigatorContent-Schnittstelle definiert die Schnittstelle, die ein Container implementieren muss, damit er als untergeordnetes Objekt eines Navigatorcontainers verwendet werden kann. Beispiele: ViewStack-, TabNavigator- und Accordion-Navigatorcontainer.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      Das vom Navigatorcontainer angezeigte Symbol für diesen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Das vom Navigatorcontainer angezeigte Symbol für diesen Container. Das Symbol wird im Schaltflächenbereich des Accordion-Containers und im Registerkartenbereich des TabNavigator-Containers angezeigt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      Der vom Navigatorcontainer angezeigte Text für diesen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der vom Navigatorcontainer angezeigte Text für diesen Container. Beispiel: Der Text wird im Schaltflächenbereich des Accordion-Containers und im Registerkartenbereich des TabNavigator-Containers angezeigt.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FontAsset"><apiName>FontAsset</apiName><shortdesc>
  Die FontAsset-Klasse ist eine Unterklasse der flash.text.Font-Klasse, welche von Ihnen in eine Flex-Anwendung eingebettete Schriftarten repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.text:Font</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FontAsset-Klasse ist eine Unterklasse der flash.text.Font-Klasse, welche von Ihnen in eine Flex-Anwendung eingebettete Schriftarten repräsentiert.
 
  <p>Die von Ihnen eingebettete Schriftart kann TrueType (TTF) oder OpenType (OTF) sein. Sie können auch eine Systemschriftart oder eine in einer von Flash erzeugten SWF-Datei befindliche Schriftart einbetten. In jedem dieser Fälle generiert der MXML-Compiler automatisch eine Klasse, die die FontAsset-Klasse erweitert, um die eingebettete Schriftart zu repräsentieren.</p>
 
  <p>Normalerweise verwenden Sie beim Schreiben einer Flex-Anwendung die FontAsset-Klasse nicht direkt. Beispiel: Sie können eine Schriftart mithilfe des <codeph>font-face</codeph>-CSS-Selektors einbetten, ohne dass Sie dazu genau verstehen müssen, dass der MXML-Compiler für Sie eine Unterklasse der FontAsset-Klasse erstellt hat.</p>
 
  <p>Es kann jedoch nützlich sein, dass Sie verstehen, was auf der ActionScript-Ebene abläuft. Zum Einbetten einer Schriftart in ActionScript deklarieren Sie eine Variable des Typs Klasse und versehen sie mit <codeph>[Embed]</codeph>-Metadaten. Beispielsweise betten Sie eine TTF-Datei wie folgt ein:</p>
 
  <pre>
  [Embed(source="Fancy.ttf", fontName="Fancy")] 
  var fancyClass:Class;
  </pre>
 
  <p>Der MXML-Compiler transkodiert die TTF-DAten in das vom Player verwendete Schriftartformat, generiert automatisch eine Unterklasse der FontAsset-Klasse und stellt Ihre Variable so ein, dass sie einen Verweis auf diese automatisch generierte Klasse darstellt. Sie können diesen Klassenverweis zum Erstellen von Instanzen von FontAsset mithilfe des <codeph>new</codeph>-Operators verwenden. Und Sie können für diese Instanzen APIs der Font-Klasse verwenden, beispielsweise die folgenden:</p>
 
  <pre>
  var fancyFont:FontAsset = FontAsset(new fancyClass());
  var hasDigits:Boolean = fancyFont.hasGlyphs("0123456789");
  </pre>
 
  <p>Es kommt jedoch selten vor, dass Sie FontAsset-Instanzen selbst erstellen müssen, da Sie als Verweis auf die Schriftart den <codeph>fontName</codeph> verwenden, den Sie in den <codeph>[Embed]</codeph>-Metadaten angeben. Beispielsweise stellen Sie den <codeph>fontFamily</codeph>-CSS-Stil auf den Schriftartnamen (in diesem Beispiel <codeph>"Fancy"</codeph>), und nicht auf eine FontAsset-Instanz wie <codeph>fancyFont</codeph> oder auf den <codeph>fancyClass</codeph>-Klassenverweis ein. Beispiel:</p>
 
  <pre>
  &lt;mx:Label text="Thank you for your order." fontFamily="Fancy"/>
  </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.Font.xml"><linktext>flash.text.Font</linktext></link></related-links><apiConstructor id="mx.core:FontAsset:FontAsset"><apiName>FontAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
  Werte für die horizontalScrollPolicy- und die verticalScrollPolicy-Eigenschaft des Containers und der ScrollControlBase-Klassen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Werte für die <codeph>horizontalScrollPolicy</codeph>- und die <codeph>verticalScrollPolicy</codeph>-Eigenschaft des Containers und der ScrollControlBase-Klassen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.ScrollControlBase.xml"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  Zeigt die Bildlaufleiste an, wenn die Abmessungen der untergeordneten Objekte größer sind als die des übergeordneten Objekts bzw. Eigentümers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Zeigt die Bildlaufleiste an, wenn die Abmessungen der untergeordneten Objekte größer sind als die des übergeordneten Objekts bzw. Eigentümers. Die Größe der übergeordneten Objekte wird nicht an die Größe der eingeblendeten Bildlaufleisten angepasst. Die Bildlaufleiste verdeckt daher unter Umständen Inhalte des Steuerelements oder des Containers.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc>
	  Bildlaufleiste wird nie eingeblendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Bildlaufleiste wird nie eingeblendet.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc>
	  Bildlaufleiste wird immer eingeblendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Bildlaufleiste wird immer eingeblendet. Die Größe der Bildlaufleiste wird automatisch zur Größe der übergeordneten Inhalte hinzugefügt, um deren Größe zu bestimmen, wenn diese nicht ausdrücklich angegeben wurde.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient"><apiName>IStateClient</apiName><shortdesc>
  Die IStateClient-Schnittstelle definiert die Schnittstelle, die Komponenten zur Unterstützung von Anzeigestatus implementieren müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IStateClient-Schnittstelle definiert die Schnittstelle, die Komponenten zur Unterstützung von Anzeigestatus implementieren müssen.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IStateClient:mx.core:IStateClient:currentState:get"><apiName>currentState</apiName><shortdesc>
      Der aktuelle Anzeigestatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Der aktuelle Anzeigestatus.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElement"><apiName>IVisualElement</apiName><shortdesc>
  Die IVisualElement-Schnittstelle definiert die für das Layout und die Anzeige eines visuellen Elements in einem Spark-Container mindestens erforderlichen Eigenschaften und Methoden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ILayoutElement</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IVisualElement-Schnittstelle definiert die für das Layout und die Anzeige eines visuellen Elements in einem Spark-Container mindestens erforderlichen Eigenschaften und Methoden.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:depth:get"><apiName>depth</apiName><shortdesc>
      Bestimmt die Reihenfolge, in der die Elemente innerhalb von Containern gerendert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt die Reihenfolge zum Rendern von Elementen in Containern fest. In Spark-Containern werden Elemente auf der Basis ihrer <codeph>depth</codeph>-Eigenschaft angeordnet. Die unterste Tiefe befindet sich hinten, die darüber liegenden Tiefen davor. Elemente mit demselben Tiefenwert werden in der Reihenfolge angezeigt, in der sie dem Container hinzugefügt werden.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:designLayer:get"><apiName>designLayer</apiName><shortdesc>
      Gibt die optionale DesignLayer-Instanz zurück, die mit diesem visuellen Element verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt die optionale DesignLayer-Instanz zurück, die mit diesem visuellen Element verknüpft ist.  
     
      <p>Wenn ein DesignLayer zugewiesen wird, müssen visuelle Elemente Sichtbarkeit und Alpha ihrer übergeordneten Ebene berücksichtigen, wenn sie ihre eigenen Werte für effektive Sichtbarkeit oder Alpha an ihr Basis-DisplayObject übergeben (sofern zutreffend).</p>
     
      <p>Visuelle Elemente müssen auf <codeph>layerPropertyChange</codeph>-Benachrichtigungen von der verknüpften übergeordneten Ebene warten. Wenn sich <codeph>effectiveAlpha</codeph> oder <codeph>effectiveVisibility</codeph> der Ebene ändern, muss das entsprechende Element seine eigene effektive Sichtbarkeit (oder sein Alpha) berechnen und entsprechend anwenden.</p>
     
      <p>Legen Sie diese Eigenschaft in MXML nicht direkt fest.</p>
      
      <p>Die <codeph>designLayer</codeph>-Eigenschaft wird nicht zur z-Reihenfolgesteuerung verwendet. Weitere Informationen finden Sie unter <codeph>depth</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/depth"><linktext>depth</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:is3D:get"><apiName>is3D</apiName><shortdesc>
      Enthält „true“, wenn das Element in 3D vorliegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn das Element in 3D vorliegt. Das Element kann in 3D vorliegen, weil es entweder 3D-Transformationseigenschaften hat oder 3D-Transformationsoffsets nach dem Layout oder beides.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link><link href="mx.core.xml#ILayoutElement/hasLayoutMatrix3D"><linktext>mx.core.ILayoutElement.hasLayoutMatrix3D</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:owner:get"><apiName>owner</apiName><shortdesc>
      Der Eigentümer dieses IVisualElement-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Der Eigentümer dieses IVisualElement-Objekts. Standardmäßig ist dies das übergeordnete Objekt dieses IVisualElement-Objekts. Wenn jedoch dieses IVisualElement eine untergeordnete Komponente ist, die von ihrer übergeordneten Komponente als Popup angezeigt wird, wie etwa die Dropdownliste eines ComboBox-Steuerelements, ist der Eigentümer die Komponente, die dieses IVisualElement-Objekt als Popup angezeigt hat.
     
      <p>Diese Eigenschaft wird nicht von Flex, sondern von jeder Komponente selbst verwaltet. Wenn Sie also die <codeph>PopUpManger.createPopUp()</codeph>- oder die <codeph>PopUpManger.addPopUp()</codeph>-Methode verwenden, um eine untergeordnete Komponente als Popup anzuzeigen, sollten Sie die <codeph>owner</codeph>-Eigenschaft der untergeordneten Komponente auf die Komponente, die sie als Popup angezeigt hat, setzen.</p>
     
      <p>Standardmäßig ist dies der Wert der <codeph>parent</codeph>-Eigenschaft.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:parent:get"><apiName>parent</apiName><shortdesc>
      Der übergeordnete Container bzw. die übergeordnete Komponente dieser Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Der übergeordnete Container oder die übergeordnete Komponente für diese Komponente. Nur visuelle Elemente sollten über eine <codeph>parent</codeph>-Eigenschaft verfügen. Nicht visuelle Elemente sollten eine andere Eigenschaft verwenden, um auf das Objekt zu verweisen, zu dem sie gehören. Üblicherweise sollten nicht visuelle Objekte eine <codeph>owner</codeph>-Eigenschaft verwenden, um auf das Objekt zu verweisen, zu dem sie gehören.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc>
      Definiert Anpassungen, die auf die Transformation des Objekts angewendet werden können, jedoch für das Layout des übergeordneten Objekts unsichtbar bleiben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc>
      Definiert Anpassungen, die auf die Transformation des Objekts angewendet werden können, jedoch für das Layout des übergeordneten Objekts unsichtbar bleiben. 
      
      <p>Wenn Sie beispielsweise das Layout eines Objekts anpassen möchten, das um 90 Grad gedreht wird, legen Sie die <codeph>rotation</codeph>-Eigenschaft des Objekts fest. Wenn das Layout des gedrehten Objekts <i>nicht</i> angepasst werden soll, legen Sie dessen <codeph>postLayoutTransformOffsets.rotationZ</codeph>-Eigenschaft fest.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:visible:get"><apiName>visible</apiName><shortdesc>
      Steuert die Sichtbarkeit dieses visuellen Elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Steuert die Sichtbarkeit dieses visuellen Elements. Bei <codeph>true</codeph> ist das Objekt sichtbar.
     
      <p>Ist ein Objekt nicht sichtbar, aber die <codeph>includeInLayout</codeph>-Eigenschaft ist auf <codeph>true</codeph> gesetzt, dann nimmt das Objekt zwar Platz im Container ein, ist aber unsichtbar.</p>
     
      <p>Wenn <codeph>visible</codeph> auf <codeph>true</codeph> eingestellt ist, ist das Objekt möglicherweise aufgrund seiner Größe und je nachdem, ob Container-Clipping aktiviert ist oder nicht, nicht unbedingt sichtbar.</p>
     
      <p>Wird <codeph>visible</codeph> auf <codeph>false</codeph> eingestellt, verhindert dies, dass die Komponente den Fokus erhält.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ILayoutElement/includeInLayout"><linktext>ILayoutElement.includeInLayout</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
  Die FlexSimpleButton-Klasse ist eine Unterklasse der SimpleButton-Klasse des Players.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:SimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexSimpleButton-Klasse ist eine Unterklasse der SimpleButton-Klasse des Players. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSimpleButton:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
	 
	  <p>Stellt die <codeph>name</codeph>-Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird.</p>
	 
	  <p>Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, der innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"FlexSimpleButton16"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSimpleButton:toString"><apiName>toString</apiName><shortdesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, z. B. <codeph>"MyApp0.HBox5.FlexSimpleButton16"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse aus der <codeph>name</codeph>-Eigenschaft des Objekts und seiner Vorgänger erstellt.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IContainer"><apiName>IContainer</apiName><shortdesc>
  IContainer ist eine Schnittstelle, die eine Komponente angibt, die die mx.core.Container-Klasse erweitert oder nachahmt.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IContainer ist eine Schnittstelle, die eine Komponente angibt, die die mx.core.Container-Klasse erweitert oder nachahmt.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link></related-links><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChildAt"><apiName>addChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChild"><apiName>addChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:areInaccessibleObjectsUnderPoint"><apiName>areInaccessibleObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:contains"><apiName>contains</apiName><shortdesc conref="flash.display.DisplayObjectContainer#contains()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#contains()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildAt"><apiName>getChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildByName"><apiName>getChildByName</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildIndex"><apiName>getChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChildAt"><apiName>removeChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChild"><apiName>removeChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:setChildIndex"><apiName>setChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:startDrag"><apiName>startDrag</apiName><shortdesc conref="flash.display.Sprite#startDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lockCenter</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Sprite#startDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:stopDrag"><apiName>stopDrag</apiName><shortdesc conref="flash.display.Sprite#stopDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Sprite#stopDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildrenAt"><apiName>swapChildrenAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildren"><apiName>swapChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>child2</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IContainer:mx.core:IContainer:buttonMode:get"><apiName>buttonMode</apiName><shortdesc conref="flash.display.Sprite#buttonMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#buttonMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc conref="mx.core.Container#creatingContentPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.Container#creatingContentPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc conref="mx.core.Container#defaultButton">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#defaultButton">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:dropTarget:get"><apiName>dropTarget</apiName><shortdesc conref="flash.display.Sprite#dropTarget">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.Sprite#dropTarget">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc conref="mx.core.UIComponent#focusManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#focusManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:graphics:get"><apiName>graphics</apiName><shortdesc conref="flash.display.Sprite#graphics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Graphics"/></apiValueDef><apiDesc conref="flash.display.Sprite#graphics">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:hitArea:get"><apiName>hitArea</apiName><shortdesc conref="flash.display.Sprite#hitArea">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="flash.display.Sprite#hitArea">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="mx.core.Container#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:numChildren:get"><apiName>numChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#numChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#numChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc conref="flash.display.Sprite#soundTransform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc conref="flash.display.Sprite#soundTransform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabChildren:get"><apiName>tabChildren</apiName><shortdesc>
      Bestimmt, ob die dem Objekt untergeordneten Objekte per Tabulatortaste aktivierbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Bestimmt, ob die dem Objekt untergeordneten Objekte per Tabulatortaste aktivierbar sind. 
      
      <p><b>Hinweis:</b>Verwenden Sie diese Eigenschaft nicht in Flex. Verwenden Sie stattdessen die <codeph>UIComponent.hasFocusableChildren</codeph>-Eigenschaft.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/hasFocusableChildren"><linktext>mx.core.UIComponent.hasFocusableChildren</linktext></link></related-links></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:textSnapshot:get"><apiName>textSnapshot</apiName><shortdesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.text:TextSnapshot"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:useHandCursor:get"><apiName>useHandCursor</apiName><shortdesc conref="flash.display.Sprite#useHandCursor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#useHandCursor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="mx.core.Container#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc conref="mx.core.Container#viewMetrics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#viewMetrics">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:RSLData"><apiName>RSLData</apiName><shortdesc>
  Eine Klasse, die Konfigurationsdaten für eine RSL beschreibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine Klasse, die Konfigurationsdaten für eine RSL beschreibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:RSLData:RSLData"><apiName>RSLData</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>rslURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Die Position der RSL.
      </apiDesc></apiParam><apiParam><apiItemName>policyFileURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der Speicherort der Richtliniendatei-URL (optional).
      </apiDesc></apiParam><apiParam><apiItemName>digest</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Das Digest der RSL. Für eine RSL ohne Digest ist dieser Wert „null“.
      </apiDesc></apiParam><apiParam><apiItemName>hashType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der Hashtyp, der zum Erstellen des Digest verwendet wird. Es wird nur der Wert <codeph>SHA256.TYPE_ID</codeph> unterstützt.
      </apiDesc></apiParam><apiParam><apiItemName>isSigned</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>„True“, wenn die RSL von Adobe signiert wurde. Anderenfalls „false“.
      </apiDesc></apiParam><apiParam><apiItemName>verifyDigest</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bestimmt, ob das Digest der RSL nach dem Laden überprüft werden soll. 
      </apiDesc></apiParam><apiParam><apiItemName>applicationDomainTarget</apiItemName><apiType value="String"/><apiData>default</apiData><apiDesc>Die Anwendungsdomäne, in der die RSL geladen werden soll. Gültige Werte finden Sie in der ApplicationDomainTarget-Aufzählung.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiConstructor><apiValue id="mx.core:RSLData:applicationDomainTarget:get"><apiName>applicationDomainTarget</apiName><shortdesc>
      Die angeforderte Anwendungsdomäne, in die die RSL geladen werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Die angeforderte Anwendungsdomäne, in die die RSL geladen werden soll. Gültige Werte finden Sie in der ApplicationDomainTarget-Aufzählung.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiValue><apiValue id="mx.core:RSLData:digest:get"><apiName>digest</apiName><shortdesc>
      Das Digest der RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Das Digest der RSL. Für eine RSL ohne Digest ist dieser Wert „null“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:hashType:get"><apiName>hashType</apiName><shortdesc>
      Der Hashtyp, der zum Erstellen des RSL-Digest verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Hashtyp, der zum Erstellen des RSL-Digest verwendet wird. Es wird nur der Hashtyp <codeph>SHA256.TYPE_ID</codeph> unterstützt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:isSigned:get"><apiName>isSigned</apiName><shortdesc>
      „True“, wenn die RSL von Adobe signiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      „True“, wenn die RSL von Adobe signiert wurde. Anderenfalls „false“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Ungleich null, wenn diese RSL in eine andere Anwendungsdomäne geladen werden soll als die Anwendungsdomäne, die mit der den Ladevorgang ausführenden Module-Factory verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Ungleich null, wenn diese RSL in eine andere Anwendungsdomäne geladen werden soll als die Anwendungsdomäne, die mit der den Ladevorgang ausführenden Module-Factory verknüpft ist. Wenn „null“, wird sie in die aktuelle Anwendungsdomäne geladen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:policyFileURL:get"><apiName>policyFileURL</apiName><shortdesc>
      Eine URL, die den Speicherort der Richtliniendatei angibt (optional).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Eine URL, die den Speicherort der Richtliniendatei angibt (optional).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:rslURL:get"><apiName>rslURL</apiName><shortdesc>
      Die Position der RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Die Position der RSL. Die URL kann absolut oder relativ zur Anwendung oder zum Modul sein. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:verifyDigest:get"><apiName>verifyDigest</apiName><shortdesc>
      „True“, wenn das Digest überprüft werden muss, bevor die RSL in den Arbeitsspeicher geladen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      „True“, wenn das Digest überprüft werden muss, bevor die RSL in den Arbeitsspeicher geladen wird. Wenn „false“, wird die RSL ohne Überprüfung geladen. Signierte RSLs werden unabhängig vom Wert immer überprüft.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
  TextFieldAsset ist eine Unterklasse der flash.text.TextField-Klasse, die TextField-Symbole darstellt, die Sie von einer mithilfe von Flash erzeugten SWF-Datei in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextFieldAsset ist eine Unterklasse der flash.text.TextField-Klasse, die TextField-Symbole darstellt, die Sie von einer mithilfe von Flash erzeugten SWF-Datei in eine Flex-Anwendung einbetten. Sie implementiert die IFlexDisplayObject-Schnittstelle, durch die ein TextFieldAsset in einem Image-Steuerelement angezeigt bzw. als Containerhintergrund oder Komponentenskin verwendet werden kann.
 
  <p>Diese Klasse ist zur Vollständigkeit in Flex enthalten, sodass jede Art von Symbol in einer mit Flash erstellten SWF-Datei in eine Flex-Anwendung eingebettet werden kann. Flex-Anwendungen verwenden jedoch normalerweise keine eingebetteten TextFields. Weitere Informationen zur Funktionsweise von eingebetteten Elementen in Flex finden Sie bei häufiger verwendeten Bestandsklassen wie etwa der BitmapAsset-Klasse.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:TextFieldAsset:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:TextFieldAsset:move"><apiName>move</apiName><shortdesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Position für dieses Objekt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Position für dieses Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:TextFieldAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite dieses Objekts.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe dieses Objekts.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.
	 
	  <p>Diese Methode dient hauptsächlich zur Implementierung der <codeph>updateDisplayList()</codeph>-Methode. Dabei berechnen Sie die tatsächliche Größe des Objekts aus der explizit angegebenen Größe, der Größe im Verhältnis zum übergeordneten Element (Prozent) und der gemessenen Größe. Dann wenden Sie diese tatsächliche Größe durch Aufrufen von <codeph>setActualSize()</codeph> auf das Objekt an.</p>
	 
	  <p>In anderen Fällen sollten Sie <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> oder <codeph>percentHeight</codeph> festlegen, statt diese Methode aufzurufen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:TextFieldAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Die gemessene Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Höhe dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:TextFieldAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Die gemessene Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Breite dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IInvalidating"><apiName>IInvalidating</apiName><shortdesc>
  Die IInvalidating-Schnittstelle definiert die Schnittstelle für Komponenten, die die Invalidierung für verzögerte (statt unmittelbare) Eigenschaftenübernahme, Messung, Zeichnung und Layouterstellung verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IInvalidating-Schnittstelle definiert die Schnittstelle für Komponenten, die die Invalidierung für verzögerte (statt unmittelbare) Eigenschaftenübernahme, Messung, Zeichnung und Layouterstellung verwenden.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  Der Aufruf dieser Methode bewirkt einen Aufruf der validateDisplayList()-Methode der Komponente, bevor die Anzeigeliste wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Der Aufruf dieser Methode bewirkt einen Aufruf der <codeph>validateDisplayList()</codeph>-Methode der Komponente, bevor die Anzeigeliste wiedergegeben wird.
	 
	  <p>Für Komponenten, die UIComponent erweitern, bedeutet dies, dass <codeph>updateDisplayList()</codeph> aufgerufen wird.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  Der Aufruf dieser Methode bewirkt einen Aufruf der validateProperties()-Methode der Komponente, bevor die Anzeigeliste wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Der Aufruf dieser Methode bewirkt einen Aufruf der <codeph>validateProperties()</codeph>-Methode der Komponente, bevor die Anzeigeliste wiedergegeben wird.
	 
	  <p>Für Komponenten, die UIComponent erweitern, bedeutet dies, dass <codeph>commitProperties()</codeph> aufgerufen wird.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  Der Aufruf dieser Methode bewirkt einen Aufruf der validateSize()-Methode der Komponente, bevor die Anzeigeliste wiedergegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Der Aufruf dieser Methode bewirkt einen Aufruf der <codeph>validateSize()</codeph>-Methode der Komponente, bevor die Anzeigeliste wiedergegeben wird.
	 
	  <p>Für Komponenten, die UIComponent erweitern, bedeutet dies, dass <codeph>measure()</codeph> aufgerufen wird, wenn nicht für die Komponente sowohl <codeph>explicitWidth</codeph> als auch <codeph>explicitHeight</codeph> festgelegt ist.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:validateNow"><apiName>validateNow</apiName><shortdesc>
      Überprüft und aktualisiert die Eigenschaften und das Layout dieses Objekts, indem erforderlichenfalls unverzüglich validateProperties(), validateSize() und validateDisplayList() aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Validiert und aktualisiert die Eigenschaften und das Layout dieses Objekts, indem erforderlichenfalls unverzüglich <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> und <codeph>validateDisplayList()</codeph> aufgerufen wird.
     
      <p>Wenn Eigenschaften geändert werden, wirken sich die neuen Werte nicht sofort auf die Komponente aus. Normalerweise wird der vollständige Programmcode der Anwendung ausgeführt, der zu diesem Zeitpunkt ausgeführt werden muss. Danach startet der LayoutManager den Aufruf der Methoden <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> und <codeph>validateDisplayList()</codeph> für Komponenten, wenn diese validiert werden müssen und basierend auf ihrer Tiefe in der Hierarchie der Anzeigelistenobjekte.</p>
	 
      <p>Beispielsweise wird das Festlegen der <codeph>width</codeph>-Eigenschaft verzögert, weil dafür möglicherweise eine Neuberechnung der Breiten der untergeordneten Objekte oder des übergeordneten Objekts erforderlich ist. Eine Verzögerung der Verarbeitung verhindert auch, dass sie mehrfach wiederholt werden muss, wenn der Programmcode der Anwendung die <codeph>width</codeph>-Eigenschaft mehr als einmal festlegt. Mit dieser Methode können Sie dieses Verhalten überschreiben.</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IChildList"><apiName>IChildList</apiName><shortdesc>
  Die IChildList-Schnittstelle definiert die Eigenschaften und Methoden für Zugriff auf und Manipulation von Child-Listen, welche Teilmengen der untergeordneten Objekte eines DisplayObjectContainer sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IChildList-Schnittstelle definiert die Eigenschaften und Methoden für Zugriff auf und Manipulation von Child-Listen, welche Teilmengen der untergeordneten Objekte eines DisplayObjectContainer sind.
 
  <p>Sehen Sie sich beispielsweise die Container-Klasse an. Sie überschreibt DisplayObjectContainer-APIs wie die <codeph>numChildren</codeph>- und die <codeph>getChildAt()</codeph>-Methode, um ausschließlich auf untergeordnete „Inhalt“-Objekte zuzugreifen. Damit sind dort abgelegte Steuerelemente und andere Container gemeint. Ein Container kann jedoch auch zusätzliche, automatisch vom Framework erstellte untergeordnete Objekte haben, wie etwa Hintergrund- oder Rahmen-Skin und Bildlaufleisten. Container stellt also eine Eigenschaft des Typs IChildList mit dem Namen <codeph>rawChildren</codeph> bereit, mit der Sie auf alle untergeordneten Objekte, und nicht nur auf die untergeordneten Inhaltsobjekte, zugreifen können.</p>
 
  <p>Ein weiteres Beispiel ist die SystemManager-Klasse. Sie ist ein DisplayObjectContainer, dessen untergeordnete Objekte in verschiedene Ebenen unterteilt: normale untergeordnete Objekte wie die Anwendung sind unten, Popups darüber, QuickInfos wiederum darüber und Cursors an oberster Stelle angeordnet. Die SystemManager-Klasse hat Eigenschaften mit den Namen <codeph>popUpChildren</codeph>, <codeph>toolTipChildren</codeph> und <codeph>cursorChildren</codeph>, mit denen Sie auf diese Ebenen zugreifen können. Der Typ aller dieser Eigenschaften ist IChildList. So können Sie mithilfe der <codeph>systemManager.popUpChildren.numChildren</codeph>-Eigenschaft die Anzahl der Popups zählen, mithilfe der <codeph>systemManager.toolTipChildren.addChild()</codeph>-Methode ein weiteres DisplayObject in die QuickInfo-Ebene einfügen usw.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/rawChildren"><linktext>mx.core.Container.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/rawChildren"><linktext>mx.managers.SystemManager.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/popUpChildren"><linktext>mx.managers.SystemManager.popUpChildren</linktext></link><link href="mx.managers.xml#SystemManager/toolTipChildren"><linktext>mx.managers.SystemManager.toolTipChildren</linktext></link><link href="mx.managers.xml#SystemManager/cursorChildren"><linktext>mx.managers.SystemManager.cursorChildren</linktext></link></related-links><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      Fügt dieser Child-Liste an der angegebenen Indexposition ein untergeordnetes DisplayObject hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das hinzugefügte untergeordnete Objekt. Dieses ist mit dem übergebenen <codeph>child</codeph>-Argument identisch.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das DisplayObject, das als untergeordnetes Objekt hinzugefügt werden soll.
	 
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das untergeordnete Objekt hinzugefügt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt dieser Child-Liste an der angegebenen Indexposition ein untergeordnetes DisplayObject hinzu. Die Indexposition 0 bedeutet den Anfang der DisplayList, die Indexposition <codeph>numChildren</codeph> bedeutet das Ende der Liste.
	 
	  <p>Das Hinzufügen eines untergeordneten Objekts an einer anderen Position als dem Ende der Child-Liste führt dazu, dass die Indexpositionen von untergeordneten Objekten, die zuvor diese oder eine höhere Indexposition innehatten, erhöht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChild"><apiName>addChild</apiName><shortdesc>
      Fügt nach dem Ende dieser Child-Liste ein untergeordnetes DisplayObject hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das hinzugefügte untergeordnete Objekt. Dieses ist mit dem übergebenen Argument identisch.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das DisplayObject, das als untergeordnetes Objekt hinzugefügt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt nach dem Ende dieser Child-Liste ein untergeordnetes DisplayObject hinzu.
     
	  <p>Der Aufruf von <codeph>childList.addChild(child)</codeph> ist gleichbedeutend mit dem Aufruf von <codeph>childList.addChild(child, childList.numChildren)</codeph>. Nach dem Hinzufügen des neuen untergeordneten Objekts hat dieses die Indexposition <codeph>(child.numChildren - 1)</codeph></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:contains"><apiName>contains</apiName><shortdesc>
	  Bestimmt, ob sich ein DisplayObject in dieser Child-Liste befindet oder ein untergeordnetes Element eines der untergeordneten Elemente in dieser Child-Liste ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn sich das DisplayObject in dieser Child-Liste befindet oder wenn es ein untergeordnetes Element eines der untergeordneten Elemente in dieser Child-Liste ist. Andernfalls <codeph>false</codeph>.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu überprüfende DisplayObject.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Bestimmt, ob sich ein DisplayObject in dieser Child-Liste befindet oder ein untergeordnetes Element eines der untergeordneten Elemente in dieser Child-Liste ist.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildAt"><apiName>getChildAt</apiName><shortdesc>
	  Ruft das untergeordnete DisplayObject an der angegebenen Indexposition dieser Child-Liste ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das untergeordnete Element an der festgelegten Indexposition.
	  
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Eine Ganzzahl zwischen 0 und <codeph>(numChildren - 1)</codeph>, die die Indexposition eines untergeordneten Objekts in dieser Child-Liste angibt.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ruft das untergeordnete DisplayObject an der angegebenen Indexposition dieser Child-Liste ab.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      Ruft das untergeordnete DisplayObject mit dem angegebenen Namen aus dieser Child-Liste ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das untergeordnete Objekt mit dem angegebenen Namen.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Der Name des untergeordneten Objekts, das zurückgegeben werden soll.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft das untergeordnete DisplayObject mit dem angegebenen Namen aus dieser Child-Liste ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
	  Ruft die Indexposition eines bestimmten untergeordneten Objekts aus dieser Child-Liste ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition des untergeordneten Objekts, welche eine Ganzzahl zwischen 0 und <codeph>(numChildren - 1)</codeph> sein muss.
	  
	  </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das untergeordnete Objekt, dessen Indexposition abgerufen werden soll.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ruft die Indexposition eines bestimmten untergeordneten Objekts aus dieser Child-Liste ab.
	 
	  <p>Das erste untergeordnete Objekt in der Child-Liste hat die Indexposition 0, das zweite die Indexposition 1 und das letzte die Indexposition <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>Gibt <codeph>getChildIndex(myChild)</codeph> den Wert 5 zurück, gibt <codeph>myView.getChildAt(5)</codeph> das Objekt <codeph>myChild</codeph> zurück.</p>
	 
	  <p>Wenn Sie ein untergeordnetes Objekt durch Aufruf der <codeph>addChild()</codeph>-Methode hinzufügen, ist die Indexposition des neuen untergeordneten Objekts gleich der höchsten Indexposition unter den vorhandenen untergeordneten Objekten plus 1.</p>
	 
	  <p>Sie können ein untergeordnetes Objekt mithilfe der <codeph>addChildAt()</codeph>-Methode an der angegebenen Indexposition einfügen. In diesem Fall erhöht sich die Indexposition der untergeordneten Objekte mit dieser oder einer höheren Indexposition um 1, sodass alle untergeordneten Objekte eine Indexposition zwischen 0 und <codeph>(numChildren - 1)</codeph> einnehmen.</p>
	 
	  <p>Wenn Sie ein untergeordnetes Objekt durch Aufruf der <codeph>removeChild()</codeph>- oder der <codeph>removeChildAt()</codeph>-Methode entfernen, nimmt die Indexposition der untergeordneten Objekte an den Indexpositionen darüber um 1 ab, sodass alle untergeordneten Objekte eine Indexposition zwischen 0 bis <codeph>(numChildren - 1)</codeph> einnehmen.</p>
	 
	  <p>Wenn Sie die Indexposition eines untergeordneten Objekts durch Aufruf der <codeph>setChildIndex()</codeph>-Methode ändern, werden die Indexpositionen der untergeordneten Objekte zwischen der alten und der neuen Indexposition (einschließlich) so angepasst, dass alle untergeordneten Objekte eine Indexposition zwischen 0 und <codeph>(numChildren - 1)</codeph> einnehmen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc>
      Gibt ein Array von DisplayObjects zurück, die unter dem angegebenen Punkt liegen und sich in dieser Child-Liste befinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Array von Objekten, die unter einem bestimmten Punkt liegen und untergeordnete Objekte dieses Containers sind.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Der Punkt, unter dem nachgeschaut werden soll.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt ein Array von DisplayObjects zurück, die unter dem angegebenen Punkt liegen und sich in dieser Child-Liste befinden.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      Entfernt das untergeordnete DisplayObject an der angegebenen Indexposition aus dieser Child-Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das entfernte untergeordnete Objekt.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Child-Indexposition des zu entfernenden Anzeigeobjekts.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt das untergeordnete DisplayObject an der angegebenen Indexposition aus dieser Child-Liste.
	 
	  <p>Das Entfernen eines untergeordneten Objekts von einer anderen Position als dem Ende der Child-Liste führt dazu, dass sich die Indexpositionen aller untergeordneten Objekte an höheren Indexpositionen verringern.</p>
     
      <p>Das übergeordnete Objekt des entfernten untergeordneten Objekts wird auf „null“ gesetzt, und das untergeordnete Objekt selbst wird gelöscht, wenn kein anderer Verweis darauf vorhanden ist.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChild"><apiName>removeChild</apiName><shortdesc>
      Entfernt das angegebene untergeordnete DisplayObject aus dieser Child-Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das entfernte untergeordnete Objekt. Dieses ist mit dem übergebenen Argument identisch.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das zu entfernende DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt das angegebene untergeordnete DisplayObject aus dieser Child-Liste.
	 
	  <p>Das Entfernen eines untergeordneten Objekts von einer anderen Position als dem Ende der Child-Liste führt dazu, dass sich die Indexpositionen aller untergeordneten Objekte an höheren Indexpositionen verringern.</p>
     
	  <p>Das übergeordnete Objekt des entfernten untergeordneten Objekts wird auf „null“ gesetzt, und das untergeordnete Objekt selbst wird gelöscht, wenn kein anderer Verweis darauf vorhanden ist.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
	  Ändert die Indexposition eines bestimmten untergeordneten Objekts in dieser Child-Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das untergeordnete Objekt, dessen Indexposition eingestellt werden soll.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Die neue Indexposition für das angegebene untergeordnete Objekt. Dies muss eine Ganzzahl zwischen null und <codeph>(numChildren - 1)</codeph> sein.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ändert die Indexposition eines bestimmten untergeordneten Objekts in dieser Child-Liste. Ein Beschreibung der <codeph>getChildIndex()</codeph>-Methode des Index dieses untergeordneten Objekts.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IChildList:mx.core:IChildList:numChildren:get"><apiName>numChildren</apiName><shortdesc>
	  Die Anzahl der untergeordneten Objekte in dieser Child-Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
	  Die Anzahl der untergeordneten Objekte in dieser Child-Liste.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredContentOwner"><apiName>IDeferredContentOwner</apiName><shortdesc>
  Die IDeferredContentOwner-Schnittstelle definiert die Eigenschaften und Methoden für die verzögerte Instanziierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IDeferredContentOwner-Schnittstelle definiert die Eigenschaften und Methoden für die verzögerte Instanziierung.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#INavigatorContent"><linktext>mx.core.INavigatorContent</linktext></link></related-links><adobeApiEvent id="mx.core:IDeferredContentOwner_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  Wird ausgelöst, nachdem der Inhalt für diese Komponente erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem der Inhalt für diese Komponente erstellt wurde. Mit der verzögerten Instanziierung kann der Inhalt für eine Komponente lange nach dem Erstellen einer Komponente erstellt werden.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Erstellen Sie den Inhalt für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Erstellen Sie den Inhalt für diese Komponente. Wenn der Wert der <codeph>creationPolicy</codeph>-Eigenschaft <codeph>auto</codeph> oder <codeph>all</codeph> lautet, ruft das Flex-Framework diese Methode auf. Wenn die <codeph>creationPolicy</codeph>-Eigenschaft den Wert <codeph>none</codeph> hat, müssen Sie diese Methode explizit aufrufen, um den Inhalt der Komponente zu erstellen.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      Richtlinie zur Inhaltserstellung für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Richtlinie zur Inhaltserstellung für diese Komponente.
     
      <p>Folgende Werte sind möglich:
        <ul>
          <li><codeph>auto</codeph> – Der Inhalt wird unmittelbar, bevor er benötigt wird, automatisch erstellt.</li>
          <li><codeph>all</codeph> – Der Inhalt wird erstellt, sobald die Erstellung der übergeordneten Komponente abgeschlossen ist. Diese Option sollte nur als letzte Möglichkeit verwendet werden, da sie die Startzeit und den Speicherbedarf erhöht.</li>
          <li><codeph>none</codeph> - Der Inhalt muss manuell erstellt werden, indem die <codeph>createDeferredContent()</codeph>-Methode aufgerufen wird.</li>
        </ul>
      </p>
      
      <p>Wenn für einen Container keine <codeph>creationPolicy</codeph> angegeben ist, erbt dieser Container den Wert der <codeph>creationPolicy</codeph>-Eigenschaft seines übergeordneten Containers.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Ein Flag, das angibt, ob der verzögerte Inhalt erstellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der verzögerte Inhalt erstellt wurde.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITransientDeferredInstance"><apiName>ITransientDeferredInstance</apiName><shortdesc>
  Die ITransientDeferredInstance-Schnittstelle erweitert IDeferredInstance und fügt die Möglichkeit für den Benutzer, die zurückgestellte Instanz-Factory auf ihren ursprünglichen Status zurückzusetzen (dies bedeutet, dass alle bekannten Verweise auf die Komponente, wie etwa die Einstellung der Eigenschaft des besitzenden Dokuments, die auf die auf null gesetzte Instanz verweist, bereitgestellt wird).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredInstance</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die ITransientDeferredInstance-Schnittstelle erweitert IDeferredInstance und fügt die Möglichkeit für den Benutzer hinzu, die zurückgestellte Instanz-Factory auf ihren ursprünglichen Status zurückzusetzen (dies bedeutet, dass alle bekannten Verweise auf die Komponente, wie etwa die Einstellung der Eigenschaft des besitzenden Dokuments, die auf die auf null gesetzte Instanz verweist, freigegeben werden). Diese zusätzliche Funktion wird genutzt von der AddItems-Statusüberschreibung, wenn das gewünschte Verhalten darin besteht, ein statusspezifisches Element zu zerstören, wenn ein Status nicht mehr gültig ist. Der Flex-Compiler verwendet dieselbe automatischen Coercion-Regeln wie in Verbindung mit IDeferredInstance.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddItems"><linktext>mx.states.AddItems</linktext></link><link href="mx.core.xml#IDeferredInstance"><linktext>mx.core.IDeferredInstance</linktext></link></related-links><apiOperation id="mx.core:ITransientDeferredInstance:mx.core:ITransientDeferredInstance:reset"><apiName>reset</apiName><shortdesc>
      Setzt den Status unserer Factory auf ihren ursprünglichen Status zurück und löscht alle Verweise auf die zwischengespeicherte Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt den Status unserer Factory auf ihren ursprünglichen Status zurück und löscht alle Verweise auf die zwischengespeicherte Instanz.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
  ButtonAsset ist eine Unterklasse der flash.display.SimpleButton-Klasse, welche Schaltflächensymbole darstellt, die Sie von einer mithilfe von Flash erzeugten SWF-Datei in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexSimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset ist eine Unterklasse der flash.display.SimpleButton-Klasse, welche Schaltflächensymbole darstellt, die Sie von einer mithilfe von Flash erzeugten SWF-Datei in eine Flex-Anwendung einbetten. Sie implementiert die IFlexDisplayObject-Schnittstelle, durch welche ein SimpleButtonAsset in einem Image-Steuerelement angezeigt oder als Containerhintergrund für eine Komponentenskin verwendet werden kann.
 
  <p>Diese Klasse ist zur Vollständigkeit in Flex enthalten, sodass jede Art von Symbol in einer mit Flash erstellten SWF-Datei in eine Flex-Anwendung eingebettet werden kann. Flex-Anwendungen verwenden jedoch normalerweise keine eingebetteten SimpleButtons. Weitere Informationen zur Funktionsweise von eingebetteten Elementen in Flex finden Sie bei häufiger verwendeten Bestandsklassen wie etwa der BitmapAsset-Klasse.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ButtonAsset:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ButtonAsset:move"><apiName>move</apiName><shortdesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Position für dieses Objekt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Position für dieses Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ButtonAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite dieses Objekts.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe dieses Objekts.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.
	 
	  <p>Diese Methode dient hauptsächlich zur Implementierung der <codeph>updateDisplayList()</codeph>-Methode. Dabei berechnen Sie die tatsächliche Größe des Objekts aus der explizit angegebenen Größe, der Größe im Verhältnis zum übergeordneten Element (Prozent) und der gemessenen Größe. Dann wenden Sie diese tatsächliche Größe durch Aufrufen von <codeph>setActualSize()</codeph> auf das Objekt an.</p>
	 
	  <p>In anderen Fällen sollten Sie <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> oder <codeph>percentHeight</codeph> festlegen, statt diese Methode aufzurufen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ButtonAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Die gemessene Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Höhe dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ButtonAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Die gemessene Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Breite dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
  MovieClipLoaderAsset ist eine Unterklasse der MovieClipAsset-Klasse, die SWF-Dateien repräsentiert, die Sie in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:MovieClipAsset</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipLoaderAsset ist eine Unterklasse der MovieClipAsset-Klasse, die SWF-Dateien repräsentiert, die Sie in eine Flex-Anwendung einbetten.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:MovieClipLoaderAsset_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Wird nach dem vollständigen Laden des SWF-Elements ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird nach dem vollständigen Laden des SWF-Elements ausgelöst.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:MovieClipLoaderAsset:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialHeight"><apiName>initialHeight</apiName><shortdesc>
	  Zugrunde liegender Speicher für die measuredHeight-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Zugrunde liegender Speicher für die <codeph>measuredHeight</codeph>-Eigenschaft. Unterklassen sollten diesen Wert im Konstruktor einstellen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialWidth"><apiName>initialWidth</apiName><shortdesc>
	  Zugrunde liegender Speicher für die measuredWidth-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Zugrunde liegender Speicher für die <codeph>measuredWidth</codeph>-Eigenschaft. Unterklassen sollten diesen Wert im Konstruktor einstellen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:movieClipData:get"><apiName>movieClipData</apiName><shortdesc>
	  Ein ByteArray, das den inneren Inhalt enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:ByteArray"/></apiValueDef><apiDesc>
	  Ein ByteArray, das den inneren Inhalt enthält. In Unterklassen überschrieben.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IPropertyChangeNotifier"><apiName>IPropertyChangeNotifier</apiName><shortdesc>
  Die IPropertyChangeNotifier-Schnittstelle definiert eine Markierungsschnittstelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IUID</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die <codeph>IPropertyChangeNotifier</codeph> -Schnittstelle definiert eine Markierungsschnittstelle. Klassen, die diese Schnittstelle unterstützen, deklarieren die Unterstützung für die Ereignisweitergabe auf eine spezielle Weise. Klassen, die diese Schnittstelle implementieren, müssen für jede Eigenschaft dieser Klasse und gegebenenfalls darin verschachtelte Klassen, die öffentlich als Eigenschaften bereitgestellt sind, Ereignisse auslösen. Für diejenigen Eigenschaften, die anonym (komplex und nicht stark typisiert) sind, bieten Implementierungsklassen eine benutzerdefinierte Unterstützung oder verwenden direkt die ObjectProxy-Klasse. Implementoren dieser Schnittstelle müssen die <codeph>PropertyChangeEvent.createUpdateEvent()</codeph>-Methode verwenden, um ein entsprechendes Aktualisierungsereignis zu konstruieren, das dann ausgelöst wird.
  </apiDesc><example>
  <codeph><pre>
   
 function set myProperty(value:Object):void
 {
    var oldValue:IPropertyChangeNotifier = _myProperty;
    var newValue:IPropertyChangeNotifier = value;
    
    // Need to ensure to dispatch changes on the new property.
    // Listeners use the source property to determine which object 
    // actually originated the event.
    // In their event handler code, they can tell if an event has been 
    // propagated from deep within the object graph by comparing 
    // event.target and event.source. If they are equal, then the property
    // change is at the surface of the object. If they are not equal, the
    // property change is somewhere deeper in the object graph.
    newValue.addEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE, 
                dispatchEvent);
 
    // need to stop listening for events from the old property
    oldValue.removeEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE,
                dispatchEvent);
 
    _myProperty = newValue;
 
    // now notify anyone that is listening
    if (dispatcher.hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE))
    {
         var event:PropertyChangeEvent = 
                         PropertyChangeEvent.createUpdateEvent(
                                                       this,
                                                       "myProperty",
                                                       newValue,
                                                       oldValue);
        dispatchEvent(event);
     }
  }
 
      
  </pre></codeph>
  
  </example></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IVisualElementContainer"><apiName>IVisualElementContainer</apiName><shortdesc>
  Die IVisualElementContainer-Schnittstelle definiert die von einem Container für das Verwalten der Anzeige von Spark-Komponenten mindestens erforderlichen Eigenschaften und Methoden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IVisualElementContainer-Schnittstelle definiert die von einem Container für das Verwalten der Anzeige von Spark-Komponenten mindestens erforderlichen Eigenschaften und Methoden.
   <p>Beachten Sie, dass die Spark SkinnableDataContainer- und DataGroup-Container diese Schnittstelle nicht implementieren. Diese Container verwalten ihre untergeordneten Objekte mithilfe der <codeph>dataProvider</codeph>-Eigenschaft.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IVisualElement"><linktext>mx.core.IVisualElement</linktext></link></related-links><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Fügt diesem Container ein visuelles Element hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn das Element dem Container entspricht.
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn die Indexposition in der Child-Liste nicht vorhanden ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das hinzugefügte Element.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das Element, das diesem Container als untergeordnetes Objekt hinzugefügt werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das Element hinzugefügt wird. Wenn Sie eine gerade besetzte Indexposition angeben, werden das untergeordnete Objekt an dieser Stelle sowie alle darüber liegenden Positionen innerhalb der Child-Liste um eine Position nach oben verschoben.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt diesem Container ein visuelles Element hinzu. Das Element wird an der angegebenen Indexposition eingefügt. Die Indexposition 0 bezeichnet das erste Element der Anzeigeliste.
     
      <p>Wenn Sie ein visuelles Element hinzufügen, das bereits einem anderen Container untergeordnet ist, wird es aus dem anderen Container entfernt.</p>  
           </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn das Element der Child-Liste hinzugefügt wird.
     
      </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn das Element der Child-Liste hinzugefügt wird.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement"><apiName>addElement</apiName><shortdesc>
      Fügt diesem Container ein visuelles Element hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn das Element dem visuellen Container entspricht.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das hinzugefügte Element.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das visuelle Element, das als untergeordnetes Objekt dieses Containers hinzugefügt werden soll.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt diesem Container ein visuelles Element hinzu. Das Element wird nach allen anderen Elementen hinzugefügt und über allen anderen Elementen angezeigt. Mit der <codeph>addElementAt()</codeph>-Methode fügen Sie ein visuelles Element an einer bestimmten Indexposition hinzu.
     
      <p>Wenn Sie ein visuelles Element hinzufügen, das bereits einem anderen Container untergeordnet ist, wird es aus dem anderen Container entfernt.</p>  
           </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn das Element der Child-Liste hinzugefügt wird.
     
      </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn das Element der Child-Liste hinzugefügt wird.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      Gibt das visuelle Element an der angegebenen Indexposition zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition in der Child-Liste nicht vorhanden ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element an der angegebenen Indexposition.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des abzurufenden Elements.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt das visuelle Element an der angegebenen Indexposition zurück.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      Gibt die Indexposition eines visuellen Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn das Element diesem visuellen Container nicht untergeordnet ist.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Indexposition des Elements im Container.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das visuelle Element.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Indexposition eines visuellen Elements zurück.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      Entfernt alle visuellen Elemente aus dem Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt alle visuellen Elemente aus dem Container.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      Entfernt ein visuelles Element von der angegebenen Indexposition im Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition in der Child-Liste nicht vorhanden ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element, das entfernt wurde.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des zu entfernenden Elements.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt ein visuelles Element von der angegebenen Indexposition im Container. Die Indexpositionen aller Elemente über dem Element in diesem visuellen Container werden um 1 verringert.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      Entfernt das angegebene visuelle Element aus der Liste untergeordneter Elemente dieses Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn der Elementparameter kein untergeordnetes Element dieses visuellen Containers ist.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element, das entfernt wurde.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das aus dem Container zu entfernende Element.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt das angegebene visuelle Element aus der Child-Liste dieses Containers. Die Indexpositionen aller Elemente über dem Element in diesem visuellen Container werden um 1 verringert.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      Ändert die Position eines vorhandenen visuellen Elements im visuellen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition in der Child-Liste nicht vorhanden ist.
           </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn der Elementparameter kein untergeordnetes Element dieses visuellen Containers ist.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das Element, dessen Indexpositionsnummer Sie ändern möchten.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die resultierende Indexnummer für das Element.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert die Position eines vorhandenen visuellen Elements im visuellen Container.
     
      <p>Wenn Sie die <codeph>setElementIndex()()</codeph>-Methode verwenden und eine bereits belegte Indexposition angeben, werden nur die Positionen zwischen der alten und der neuen Position des Elements geändert. Alle anderen Positionen bleiben unverändert.</p>
           <p>Wird ein visuelles Element an eine niedrigere Indexposition verschoben, erhöht sich die Indexposition aller Elemente zwischen der aktuellen und der neuen Position des Elements um 1. Wenn ein Element an eine Indexposition verschoben wird, die höher als die aktuelle Indexposition ist, wird die Indexposition von allen Elementen dazwischen um 1 verringert.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      Tauscht die visuellen Elemente an den beiden angegebenen Indexpositionen im Container aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn beide Indexpositionen im visuellen Container nicht vorhanden sind.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des ersten Elements.
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des zweiten Elements.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Tauscht die visuellen Elemente an den beiden angegebenen Indexpositionen im Container aus. Alle anderen visuellen Elemente bleiben an ihrer aktuellen Indexposition.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      Tauscht die Indexposition von zwei angegebenen visuellen Elementen aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das erste visuelle Element.
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Das zweite visuelle Element.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Tauscht die Indexposition von zwei angegebenen visuellen Elementen aus. Alle anderen Elemente bleiben an ihrer aktuellen Indexposition.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      Die Anzahl an visuellen Elementen in diesem Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl an visuellen Elementen in diesem Container. Visuelle Elemente enthalten Klassen, die die IVisualElement-Schnittstelle implementieren, z. B. Unterklassen von UIComponent und GraphicElement.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeaterClient"><apiName>IRepeaterClient</apiName><shortdesc>
  Die IRepeaterClient-Schnittstelle definiert die APIs für Komponenten, für die ein Repeater mehrere Instanzen erstellen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IRepeaterClient-Schnittstelle definiert die APIs für Komponenten, für die ein Repeater mehrere Instanzen erstellen kann. Die IRepeaterClient-Schnittstelle wird von der UIComponent-Klasse implementiert und daher an alle Flex-Framework-Steuerelemente und Container vererbt.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Initialisiert die Eigenschaften instanceIndices, repeaterIndices und repeaters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>Der übergeordnete Repeater, der diese Komponente erstellt hat.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialisiert die Eigenschaften <codeph>instanceIndices</codeph>, <codeph>repeaterIndices</codeph> und <codeph>repeaters</codeph>.
     
      <p>Diese Methode wird vom Flex-Framework aufgerufen. Entwickler brauchen sie im Normalfall nicht aufzurufen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      Ein Array mit den Indexpositionen, die erforderlich sind, um in einem Dokument auf eine wiederholte Instanz zu verweisen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array mit den Indexpositionen, die erforderlich sind, um in einem Dokument auf eine wiederholte Instanz zu verweisen. Das Array enthält nur einen Wert, wenn die Komponente sich in mindestens einem Repeater befindet. Das erste Element entspricht dem äußersten Repeater. Ist die <codeph>id</codeph> beispielsweise <codeph>"b"</codeph> und <codeph>instanceIndices</codeph> <codeph>[ 2, 4 ]</codeph>, lautet der Verweis im Dokument <codeph>b[2][4]</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:isDocument:get"><apiName>isDocument</apiName><shortdesc conref="mx.core.UIComponent#isDocument">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isDocument">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      Ein Array mit den Indexpositionen der Elemente in den Datenprovidern der Repeater, die diese Komponente erzeugt haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array mit den Indexpositionen der Elemente in den Datenprovidern der Repeater, die diese Komponente erzeugt haben. Das Array enthält nur einen Wert, wenn die Komponente sich in mindestens einem Repeater befindet. Das erste Element entspricht der äußersten Repeater-Komponente. Wenn beispielsweise <codeph>repeaterIndices</codeph> dem Wert <codeph>[ 2, 4 ]</codeph> entspricht, verwendet die äußere Repeater-Komponente das <codeph>dataProvider[2]</codeph>-Datenelement und die innere Repeater-Komponente das <codeph>dataProvider[4]</codeph>-Datenelement.
     
      <p>Diese Eigenschaft unterscheidet sich von <codeph>instanceIndices</codeph>, wenn <codeph>startingIndex</codeph> einer Repeater-Komponente einen anderen Wert als null aufweist. Wenn eine Repeater-Komponente beispielsweise bei <codeph>dataProvider</codeph>-Element 4 beginnt, lautet der Dokumentverweis der ersten wiederholten Komponente <codeph>b[0]</codeph>, und nicht <codeph>b[4]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      Ein Array, das die umschließenden Repeater der Komponente enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ein Array, das die umschließenden Repeater der Komponente enthält. Das Array enthält nur einen Wert, wenn die Komponente sich in mindestens einem Repeater befindet. Das erste Element entspricht dem äußersten Repeater. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDataRenderer"><apiName>IDataRenderer</apiName><shortdesc>
  Die IDataRenderer-Schnittstelle definiert die Schnittstelle für Komponenten, die eine date-Eigenschaft haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IDataRenderer-Schnittstelle definiert die Schnittstelle für Komponenten, die eine <codeph>data</codeph>-Eigenschaft haben.
 
  <p>Komponenten, die in einem Elementrenderer oder einem Elementeditor in einem Listensteuerelement (wie etwa List, HorizontalList, TileList, DataGrid und Tree) oder als Renderer in einem Diagramm verwendet werden, erhalten die Daten zum Rendern oder Bearbeiten unter Verwendung der <codeph>data</codeph>-Eigenschaft. Die Komponente muss IDataRenderer implementieren, sodass die Hostkomponenten diese Informationen übergeben können. Alle Flex-Container und viele Flex-Komponenten implementieren IDataRenderer und die <codeph>data</codeph>-Eigenschaft.</p>
 
  <p>In einem Listensteuerelement stellt Flex die <codeph>data</codeph>-Eigenschaft eines Elementrenderers oder Elementeditors auf das Element im Datenprovider, das dem gerenderten oder bearbeiteten Element entspricht. Bei einem DataGrid-Steuerelement enthält die <codeph>data</codeph>-Eigenschaft das Datenproviderelement für die gesamte Zeile des DataGrid-Steuerelements, und nicht nur für das betreffende Element.</p>
 
  <p>Um diese Schnittstelle zu implementieren, definieren Sie eine Set- und Get-Methode zur Implementierung der <codeph>data</codeph>-Eigenschaft. In der Regel schreibt die Set-Methode den Wert der <codeph>data</codeph>-Eigenschaft in eine interne Variable und löst ein <codeph>dataChange</codeph>-Ereignis aus, und die Get-Methode gibt den aktuellen Wert der internen Variablen zurück, wie im folgenden Beispiel illustriert:</p>
  
  <pre>
    // Internal variable for the property value.
    private var _data:Object;
    
    // Make the data property bindable.
    [Bindable("dataChange")]
    
    // Define the getter method.
    public function get data():Object {
        return _data;
    }
    
    // Define the setter method, and dispatch an event when the property
    // changes to support data binding.
    public function set data(value:Object):void {
        _data = value;
    
        dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
    }
  </pre>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IDataRenderer:mx.core:IDataRenderer:data:get"><apiName>data</apiName><shortdesc>
	  Die zu rendernden oder zu bearbeitenden Daten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Die zu rendernden oder zu bearbeitenden Daten.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITextInput"><apiName>ITextInput</apiName><shortdesc>
  Definiert eine Schnittstelle für ein einzeiliges, optional bearbeitbares Textfeld.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Definiert eine Schnittstelle für ein einzeiliges, optional bearbeitbares Textfeld.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      Wählt den Text in dem Bereich aus, der von den Parametern festgelegt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>Der auf null basierende Zeichenindexwert des ersten Zeichens in der aktuellen Auswahl.
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Die auf null basierende Indexposition der Position nach dem letzten Zeichen der aktuellen Auswahl (entspricht der auf eins basierenden Indexposition des letzten Zeichens).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wählt den Text in dem Bereich aus, der von den Parametern festgelegt wurde.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:showBorderAndBackground"><apiName>showBorderAndBackground</apiName><shortdesc>
      Bestimmt, ob Rahmen und Hintergrund des TextInput sichtbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn sichtbar, andernfalls <codeph>false</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bestimmt, ob Rahmen und Hintergrund des TextInput sichtbar sind. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ITextInput:mx.core:ITextInput:editable:get"><apiName>editable</apiName><shortdesc>
      Zeigt an, ob der Benutzer berechtigt ist, den Text dieses Steuerelements zu ändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3196
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>Legt fest, ob die Komponente bearbeitbar ist.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Zeigt an, ob der Benutzer berechtigt ist, den Text dieses Steuerelements zu ändern. Wenn <codeph>true</codeph>, kann der Benutzer den Text bearbeiten.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Pixelposition des Pixels, das innerhalb des Inhaltsbereichs momentan am weitesten links angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3194
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0

      </apiDefaultValue><apiTipTexts><apiTipText>Die Pixelposition des Zeichens, welches aktuell am weitesten links angezeigt wird.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Pixelposition des Pixels, das innerhalb des Inhaltsbereichs momentan am weitesten links angezeigt wird. (Der Inhaltsbereich enthält alle Inhalte eines Steuerelements, nicht nur den Anteil, der gerade angezeigt wird.) Diese Eigenschaft ist immer auf 0 gesetzt und ignoriert Änderungen, wenn <codeph>wordWrap</codeph> auf <codeph>true</codeph> gesetzt ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Die maximale Anzahl an Zeichen, die ein Benutzer in einem Textfeld eingeben kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3191
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>Die maximale Anzahl an Zeichen, die TextInput enthalten kann.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Die maximale Anzahl an Zeichen, die ein Benutzer in einem Textfeld eingeben kann. Diese Eigenschaft schränkt die Länge des Texts nicht ein, der durch die Einstellung der <codeph>text</codeph>- oder <codeph>htmlText</codeph>-Eigenschaft festgelegt wurde.
     
      <p>Der Standardwert ist 0. Dies ist ein Spezialfall und bedeutet eine unbegrenzte Anzahl.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
      Bei „true“ werden Aufrufe der drawFocus()-Methode dieses Steuerelements an die drawFocus()-Methode seines übergeordneten Elements weitergegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bei „true“ werden Aufrufe der <codeph>drawFocus()</codeph>-Methode dieses Steuerelements an die <codeph>drawFocus()</codeph>-Methode seines übergeordneten Elements weitergegeben. Verwendet, wenn ein TextInput Teil eines Composite-Steuerelements wie NumericStepper oder ComboBox ist.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
      Gibt den Zeichensatz an, der vom Benutzer im Steuerelement eingegeben kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3193
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      </apiDefaultValue><apiTipTexts><apiTipText>Der Zeichensatz, der in TextInput eingetragen werden kann.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Gibt den Satz an Zeichen an, die ein Benutzer in das Steuerelement eingeben kann. Wenn die <codeph>restrict</codeph>-Eigenschaft auf <codeph>null</codeph> gesetzt ist, kann jedes beliebige Zeichen eingegeben werden. Wenn die <codeph>restrict</codeph>-Eigenschaft einen leeren String enthält, können keine Zeichen eingegeben werden. Mit dieser Eigenschaft werden nur Benutzereingaben eingeschränkt. Mit einem Skript kann jeder beliebige Text in das Textfeld gestellt werden. Wenn der Wert der <codeph>restrict</codeph>-Eigenschaft ein String von Zeichen ist, können Sie nur Zeichen des Strings in das Textfeld eingeben.
     
      <p>Flex scannt den String von links nach rechts. Sie können mithilfe eines Bindestrichs (-) einen Zeichenbereich angeben. Wenn der String mit dem Einfügezeichen (^) beginnt, werden anfänglich alle Zeichen akzeptiert, aber nachfolgende Zeichen im String werden nicht in die Liste der zulässigen Zeichen aufgenommen. Wenn der String nicht mit dem Einfügezeichen (^) beginnt, werden anfänglich keine Zeichen akzeptiert, aber nachfolgende Zeichen im String werden in die Liste der zulässigen Zeichen aufgenommen.</p>
     
      <p>Da in der <codeph>restrict</codeph>-Eigenschaft einige Zeichen eine besondere Bedeutung haben, müssen Sie das Backslash-Zeichen verwenden, damit die Textzeichen „-“, „ ^“ und „\“ angezeigt werden. Wenn Sie die <codeph>restrict</codeph>-Eigenschaft als Attribut in einem MXML-Tag verwenden, verwenden Sie einzelne Backslashes, wie hier gezeigt: \^\-\\. Wenn Sie <codeph>restrict</codeph> in einem ActionScript-Ausdruck einsetzen, verwenden Sie doppelte Backslashes, wie hier gezeigt: \\^\\-\\\.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
      Ein Flag, das angibt, ob der im TextInput vorhandene Text ausgewählt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der im TextInput vorhandene Text ausgewählt werden kann.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      Die auf null basierende Indexposition der Position nach dem letzten Zeichen der aktuellen Auswahl (entspricht der auf eins basierenden Indexposition des letzten Zeichens).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Der auf null basierende Indexwert des letzten Zeichens in der Auswahl.
     
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Die auf null basierende Indexposition der Position <i>nach</i> dem letzten Zeichen der aktuellen Auswahl (entspricht der auf eins basierenden Indexposition des letzten Zeichens). Wenn das letzte Zeichen in der Auswahl das fünfte Zeichen von vorn ist, besitzt die Eigenschaft den Wert 5. Wenn das Steuerelement den Fokus erhält, ist die Auswahl sichtbar, sofern die <codeph>selectionAnchorIndex</codeph>- und <codeph>selectionActiveIndex</codeph>-Eigenschaften festgelegt sind.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      Der auf null basierende Zeichenindexwert des ersten Zeichens in der aktuellen Auswahl.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Der auf null basierende Indexwert des ersten Zeichens in der Auswahl.
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Der auf null basierende Indexwert des ersten Zeichens in der aktuellen Auswahl. Das erste Zeichen ist beispielsweise 0, das zweite Zeichen 1 usw. Wenn das Steuerelement den Fokus erhält, ist die Auswahl sichtbar, sofern die <codeph>selectionAnchorIndex</codeph>- und <codeph>selectionActiveIndex</codeph>-Eigenschaften festgelegt sind.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:text:get"><apiName>text</apiName><shortdesc>
      Unformatierter Text, der im Steuerelement angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3190
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>Ruft den TextInput-Inhalt ab oder legt ihn fest.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Unformatierter Text, der im Steuerelement angezeigt wird. Das Aussehen wird von den CSS-Stilen dieses Label-Steuerelements bestimmt.
      
      <p>Alle HTML-Tags im Textstring werden ignoriert und so angezeigt, wie sie in den String geschrieben wurden. Verwenden Sie die Eigenschaft <codeph>htmlText</codeph>, um stattdessen mit HTML-Tags formatierten Text anzuzeigen. Mit der <codeph>htmlText</codeph>-Eigenschaft ersetzt HTML jeglichen Text, den Sie mit dieser Eigenschaft festgelegt haben und die <codeph>text</codeph>-Eigenschaft gibt eine Nur-Text-Version des HTML-Texts ohne HTML-Tags zurück. Weitere Informationen finden Sie im Abschnitt der <codeph>htmlText</codeph>-Eigenschaft.</p>
     
      <p>Um die Sonderzeichen spitze Klammer links „&lt;“, spitze Klammer rechts „>“ oder das Und-Zeichen „&amp;“ innerhalb des Texts verwenden zu können, schließen Sie den Text in CDATA-Tags ein. Sie können alternativ auch HTML-Zeichenentitäten für Sonderzeichen verwenden wie z. B. <codeph>&amp;lt;</codeph>.</p>
     
      <p>Wenn Sie versuchen, diese Eigenschaft auf <codeph>null</codeph> zu setzen, wird sie stattdessen auf einen leeren String gesetzt. Die <codeph>text</codeph>-Eigenschaft kann vorübergehend den Wert <codeph>null</codeph> aufweisen. Dies zeigt an, dass <codeph>htmlText</codeph> kürzlich gesetzt und der entsprechende <codeph>text</codeph>-Wert noch nicht ermittelt wurde.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexDisplayObject"><apiName>IFlexDisplayObject</apiName><shortdesc>
  Die IFlexDisplayObject-Schnittstelle definiert die Schnittstelle für die Skinelemente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.display:IBitmapDrawable</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFlexDisplayObject-Schnittstelle definiert die Schnittstelle für die Skinelemente. Eine Skin muss mindestens ein DisplayObject sein und diese Schnittstelle implementieren.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getBounds"><apiName>getBounds</apiName><shortdesc conref="flash.display.DisplayObject#getBounds()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getBounds()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getRect"><apiName>getRect</apiName><shortdesc conref="flash.display.DisplayObject#getRect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getRect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:globalToLocal"><apiName>globalToLocal</apiName><shortdesc conref="flash.display.DisplayObject#globalToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#globalToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestObject"><apiName>hitTestObject</apiName><shortdesc conref="flash.display.DisplayObject#hitTestObject()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestObject()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestPoint"><apiName>hitTestPoint</apiName><shortdesc conref="flash.display.DisplayObject#hitTestPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>shapeFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:localToGlobal"><apiName>localToGlobal</apiName><shortdesc conref="flash.display.DisplayObject#localToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#localToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:move"><apiName>move</apiName><shortdesc>
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Position für dieses Objekt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Position für dieses Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:setActualSize"><apiName>setActualSize</apiName><shortdesc>
	  Legt die tatsächliche Größe dieses Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite dieses Objekts.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe dieses Objekts.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Legt die tatsächliche Größe dieses Objekts fest.
	 
	  <p>Diese Methode dient hauptsächlich zur Implementierung der <codeph>updateDisplayList()</codeph>-Methode. Dabei berechnen Sie die tatsächliche Größe des Objekts aus der explizit angegebenen Größe, der Größe im Verhältnis zum übergeordneten Element (Prozent) und der gemessenen Größe. Dann wenden Sie diese tatsächliche Größe durch Aufrufen von <codeph>setActualSize()</codeph> auf das Objekt an.</p>
	 
	  <p>In anderen Fällen sollten Sie <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> oder <codeph>percentHeight</codeph> festlegen, statt diese Methode aufzurufen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:accessibilityProperties:get"><apiName>accessibilityProperties</apiName><shortdesc conref="flash.display.DisplayObject#accessibilityProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.accessibility:AccessibilityProperties"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#accessibilityProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:blendMode:get"><apiName>blendMode</apiName><shortdesc conref="flash.display.DisplayObject#blendMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#blendMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:cacheAsBitmap:get"><apiName>cacheAsBitmap</apiName><shortdesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:filters:get"><apiName>filters</apiName><shortdesc conref="flash.display.DisplayObject#filters">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#filters">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc conref="flash.display.DisplayObject#loaderInfo">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#loaderInfo">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mask:get"><apiName>mask</apiName><shortdesc conref="flash.display.DisplayObject#mask">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mask">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
	  Die gemessene Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Die gemessene Höhe dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
	  Die gemessene Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Die gemessene Breite dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseX:get"><apiName>mouseX</apiName><shortdesc conref="flash.display.DisplayObject#mouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseY:get"><apiName>mouseY</apiName><shortdesc conref="flash.display.DisplayObject#mouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:name:get"><apiName>name</apiName><shortdesc conref="flash.display.DisplayObject#name">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#name">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:opaqueBackground:get"><apiName>opaqueBackground</apiName><shortdesc conref="flash.display.DisplayObject#opaqueBackground">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#opaqueBackground">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:parent:get"><apiName>parent</apiName><shortdesc conref="flash.display.DisplayObject#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:root:get"><apiName>root</apiName><shortdesc conref="flash.display.DisplayObject#root">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#root">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:rotation:get"><apiName>rotation</apiName><shortdesc conref="flash.display.DisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scale9Grid:get"><apiName>scale9Grid</apiName><shortdesc conref="flash.display.DisplayObject#scale9Grid">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scale9Grid">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleX:get"><apiName>scaleX</apiName><shortdesc conref="flash.display.DisplayObject#scaleX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleY:get"><apiName>scaleY</apiName><shortdesc conref="flash.display.DisplayObject#scaleY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scrollRect:get"><apiName>scrollRect</apiName><shortdesc conref="flash.display.DisplayObject#scrollRect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scrollRect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:stage:get"><apiName>stage</apiName><shortdesc conref="flash.display.DisplayObject#stage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#stage">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:transform:get"><apiName>transform</apiName><shortdesc conref="flash.display.DisplayObject#transform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#transform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:visible:get"><apiName>visible</apiName><shortdesc conref="flash.display.DisplayObject#visible">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#visible">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EventPriority"><apiName>EventPriority</apiName><shortdesc>
  Die EventPriority-Klasse definiert Konstantenwerte für das Priority-Argument der addEventListener()-Methode des EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die EventPriority-Klasse definiert Konstantenwerte für das <codeph>Priority</codeph>-Argument der <codeph>addEventListener()</codeph>-Methode des EventDispatcher.
 
  <p>Je höher die Zahl, um so höher ist die Priorität des Ereignis-Listeners. Alle Listener mit der Priorität <codeph>N</codeph> werden vor Listenern mit der Priorität <codeph>N - 1</codeph> verarbeitet. Wenn zwei oder mehr Listener die gleiche Priorität aufweisen, werden sie in der Reihenfolge verarbeitet, in der sie hinzugefügt wurden. </p>
 
  <p>Prioritäten können positiv, 0 oder negativ sein. Die Standardpriorität ist 0.</p>
 
  <p>Sie sollten keinen Code schreiben, der von numerischen Werten dieser Konstanten abhängt. Diese numerischen Werte können sich in zukünftigen Flex-Versionen ändern.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:EventPriority:BINDING"><apiName>BINDING</apiName><shortdesc>
	  Automatisch generierte Ereignisprozeduren, deren Evaluierungsergebnis darin besteht, dass Datenbindungsausdrücke vor allen anderen Ausdrücken ausgeführt werden müssen, sodass sie eine gegenüber dem Standard höhere Priorität haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Automatisch generierte Ereignisprozeduren, deren Evaluierungsergebnis darin besteht, dass Datenbindungsausdrücke vor allen anderen Ausdrücken ausgeführt werden müssen, sodass sie eine gegenüber dem Standard höhere Priorität haben.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:CURSOR_MANAGEMENT"><apiName>CURSOR_MANAGEMENT</apiName><shortdesc>
	  Der CursorManager hat Prozeduren für Mausereignisse, welche vor anderen Mausereignisprozeduren ausgeführt werden müssen, sodass sie eine hohe Priorität haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>200</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Der CursorManager hat Prozeduren für Mausereignisse, welche vor anderen Mausereignisprozeduren ausgeführt werden müssen, sodass sie eine hohe Priorität haben.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT_HANDLER"><apiName>DEFAULT_HANDLER</apiName><shortdesc>
	  Manche Komponenten reagieren auf Ereignisse, die sie für sich selbst auslösen, und lassen andere Listener die preventDefault()-Methode aufrufen, um der Komponente zu melden, dass sie keine Standardaktion ausführen soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-50</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Manche Komponenten reagieren auf Ereignisse, die sie für sich selbst auslösen, und lassen andere Listener die <codeph>preventDefault()</codeph>-Methode aufrufen, um der Komponente zu melden, dass sie keine Standardaktion ausführen soll. Diese Komponenten müssen mit einer niedrigeren Priorität als der Standardpriorität reagieren, sodass die anderen Prozeduren zuerst ausgeführt werden und die Möglichkeit haben, <codeph>preventDefault()</codeph> aufzurufen.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	  Ereignisprozeduren für Komponenteninstanzen werden mit der Standardpriorität „0“ ausgeführt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Ereignisprozeduren für Komponenteninstanzen werden mit der Standardpriorität <codeph>0</codeph> ausgeführt.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:EFFECT"><apiName>EFFECT</apiName><shortdesc>
	  Automatisch generierte Ereignisprozeduren, die Effekte auslösen, werden für Komponenteninstanzen nach anderen Ereignisprozeduren ausgeführt, sodass sie eine niedrigere Priorität als die Standardpriorität haben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Automatisch generierte Ereignisprozeduren, die Effekte auslösen, werden für Komponenteninstanzen nach anderen Ereignisprozeduren ausgeführt, sodass sie eine niedrigere Priorität als die Standardpriorität haben.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFactory"><apiName>IFactory</apiName><shortdesc>
  Die IFactory-Schnittstelle definiert die von Factory-Klassen wie ClassFactory zu implementierende Schnittstelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFactory-Schnittstelle definiert die von Factory-Klassen wie ClassFactory zu implementierende Schnittstelle. Ein Objekt des Typs IFactory ist ein „Factory-Objekt“, das Flex zum Generieren von mehreren Instanzen einer anderen Klasse verwendet, wobei jede dieser Instanzen exakt dieselben Eigenschaften hat.
 
  <p>Beispiel: Eine DataGridColumn hat einen <codeph>itemRenderer</codeph> des Typs IFactory. Sie ruft <codeph>itemRenderer.newInstance()</codeph> auf, um die Zellen für eine bestimmte Spalte des DataGrid zu erstellen.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#ClassFactory"><linktext>mx.core.ClassFactory</linktext></link></related-links><apiOperation id="mx.core:IFactory:mx.core:IFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Erstellt eine Instanz einer Klasse (hängt von der Klass ab, die IFactory implementiert).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die neu erstellte Instanz.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Erstellt eine Instanz einer Klasse (hängt von der Klass ab, die IFactory implementiert).
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
  Eine zurückgestellte Instanz-Factory, die eine Instanz einer bestimmten Klasse erstellt und zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine zurückgestellte Instanz-Factory, die eine Instanz einer bestimmten Klasse erstellt und zurückgibt. Eine Anwendung kann die <codeph>getInstance()</codeph>-Methode zum Erstellen einer Instanz der Klasse verwenden, wenn sie zum ersten Mal benötigt wird, und danach zum Abrufen eines Verweises auf die Instanz.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromFunction"><linktext>DeferredInstanceFromFunction</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromClass:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiDesc>Die Klasse, deren Instanz die <codeph>getInstance()</codeph>-Methode erstellt und zurückgibt.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromClass:getInstance"><apiName>getInstance</apiName><shortdesc>
      Erstellt eine Instanz der im DeferredInstanceFromClass-Konstruktor angegebenen Klasse und gibt sie zurück, wenn sie nicht bereits vorhanden ist. Andernfalls gibt er die bereits erstellte Klasseninstanz zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Instanz der im DeferredInstanceFromClass-Konstruktor angegebenen Klasse.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Erstellt eine Instanz der im DeferredInstanceFromClass-Konstruktor angegebenen Klasse und gibt sie zurück, wenn sie nicht bereits vorhanden ist. Andernfalls gibt er die bereits erstellte Klasseninstanz zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromClass:reset"><apiName>reset</apiName><shortdesc>
      Setzt den Status der Factory auf den anfänglichen, nicht initialisierten Status zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt den Status der Factory auf den anfänglichen, nicht initialisierten Status zurück. Der Verweis auf die zwischengespeicherte Instanz wird gelöscht.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
  Die FlexMovieClip-Klasse ist eine Unterklasse der MovieClip-Klasse des Players.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexMovieClip-Klasse ist eine Unterklasse der MovieClip-Klasse des Players. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexMovieClip:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
	 
	  <p>Stellt die <codeph>name</codeph>-Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird.</p>
	 
	  <p>Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, welcher innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"UITextField14"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexMovieClip:toString"><apiName>toString</apiName><shortdesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, z. B. <codeph>"MyApp0.HBox5.FlexMovieClip14"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse aus der <codeph>name</codeph>-Eigenschaft des Objekts und seiner Vorgänger erstellt.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUIComponent"><apiName>IUIComponent</apiName><shortdesc>
  Die IUIComponent-Schnittstelle definiert den Basissatz von APIs, die Sie zum Erstellen eines untergeordneten Objekts eines Flex-Containers oder einer Flex-Liste implementieren müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IUIComponent-Schnittstelle definiert den Basissatz von APIs, die Sie zum Erstellen eines untergeordneten Objekts eines Flex-Containers oder einer Flex-Liste implementieren müssen.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Eine Zahl, die explicitHeight entspricht, wenn sie definiert ist, oder measuredHeight entspricht, wenn sie nicht definiert ist.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Eine Zahl, die explicitWidth entspricht, wenn sie definiert ist, oder measuredWidth entspricht, wenn sie nicht definiert ist.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      Initialisiert das Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialisiert das Objekt.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/initialize()"><linktext>mx.core.UIComponent.initialize()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:owns"><apiName>owns</apiName><shortdesc conref="mx.core.UIComponent#owns()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn das untergeordnete Objekt diese UIComponent als übergeordnetes Objekt oder Eigentümer hat.
      
      </apiDesc></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Eine UIComponent.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#owns()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc conref="mx.core.UIComponent#parentChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Das übergeordnete Objekt dieses UIComponent-Objekts.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#parentChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:setVisible"><apiName>setVisible</apiName><shortdesc conref="mx.core.UIComponent#setVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Der neue Wert der <codeph>visible</codeph>-Eigenschaft. Geben Sie <codeph>true</codeph> an, um die Komponente einzublenden, und <codeph>false</codeph>, um sie auszublenden.
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Ist der Wert <codeph>true</codeph>, sollten Sie kein Ereignis auslösen. Ist der Wert <codeph>false</codeph>, lösen Sie, wenn die Komponente sichtbar wird, ein <codeph>show</codeph>-Ereignis, und wenn sie nicht sichtbar wird, ein <codeph>hide</codeph>-Ereignis aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Die y-Koordinate der Grundlinie der ersten Textzeile der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die y-Koordinate der Grundlinie der ersten Textzeile der Komponente.
     
      <p>Diese Eigenschaft dient der Implementierung des <codeph>baseline</codeph>-Beschränkungsstils. Sie wird auch zum Ausrichten der Beschriftung eines FormItem an den Steuerelementen im FormItem verwendet.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:document:get"><apiName>document</apiName><shortdesc>
      Ein Verweis auf das Dokumentobjekt, das mit dieser Komponente verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Verweis auf das Dokumentobjekt, das mit dieser Komponente verknüpft ist. Ein Dokumentobjekt ist ein Objekt an der ersten Stelle der Hierarchie einer Flex-Anwendung, eine MXML-Komponente oder eine ActionScript-Komponente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:enabled:get"><apiName>enabled</apiName><shortdesc>
      Legt fest, ob die Komponente Benutzereingaben akzeptieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob die Komponente eine Interaktion mit dem Benutzer gestattet. Nachdem die <codeph>enabled</codeph>-Eigenschaft auf <codeph>false</codeph> eingestellt wurde, reagieren manche Komponenten immer noch auf Mausbewegungen wie beispielsweise mouseOver. Daher müssen Sie zu einer vollständigen Deaktivierung von UIComponents auch den Wert der <codeph>mouseEnabled</codeph>-Eigenschaft auf <codeph>false</codeph> festlegen. Wenn Sie die <codeph>enabled</codeph>-Eigenschaft für einen Container auf <codeph>false</codeph> festlegen, blendet Flex die Farbe des Containers und aller seiner untergeordneten Objekte ab und blockiert Benutzereingaben in den Container und alle seine untergeordneten Objekte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Die explizit festgelegte Höhe für die Komponente in Pixeln als Koordinaten der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die explizit festgelegte Höhe für die Komponente in Pixeln als Koordinaten der Komponente. Wenn keine Höhe explizit festgelegt ist, lautet der Wert <codeph>NaN</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitHeight"><linktext>mx.core.UIComponent.explicitHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Eine Zahl, die die maximale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die maximale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Eine Zahl, die die maximale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die maximale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      Eine Zahl, die die minimale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die minimale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinHeight"><linktext>mx.core.UIComponent.explicitMinHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      Eine Zahl, die die minimale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die minimale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinWidth"><linktext>mx.core.UIComponent.explicitMinWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Die explizit festgelegte Breite für die Komponente in Pixeln als Koordinaten der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die explizit festgelegte Breite für die Komponente in Pixeln als Koordinaten der Komponente. Wenn keine Breite explizit festgelegt ist, lautet der Wert <codeph>NaN</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitWidth"><linktext>mx.core.UIComponent.explicitWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Ein einzelnes Sprite-Objekt, das von Komponenten gemeinsam und als Überlagerung für das Zeichnen der Fokusanzeige verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Ein einzelnes Sprite-Objekt, das von Komponenten gemeinsam und als Überlagerung für das Zeichnen der Fokusanzeige verwendet wird. Komponenten nutzen dieses Objekt gemeinsam, wenn ihr übergeordnetes Objekt eine Komponente mit Fokus ist, nicht aber wenn die Komponente die IFocusManagerComponent-Schnittstelle implementiert.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/focusPane"><linktext>mx.core.UIComponent.focusPane</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      Eine Zahl, die die maximale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die maximale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxHeight"><linktext>mx.core.UIComponent.maxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      Eine Zahl, die die maximale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die maximale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxWidth"><linktext>mx.core.UIComponent.maxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      Eine Zahl, die die minimale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die minimale Höhe der Komponente in Pixeln als Koordinaten der Komponente angibt. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minHeight"><linktext>mx.core.UIComponent.minHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      Eine Zahl, die die minimale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die minimale Breite der Komponente in Pixeln als Koordinaten der Komponente angibt. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minWidth"><linktext>mx.core.UIComponent.minWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Eine Zahl, die die Höhe einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts festlegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die Höhe einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts festlegt. Zulässige Werte sind 0 bis 100.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Eine Zahl, die die Breite einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts festlegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Eine Zahl, die die Breite einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts festlegt. Zulässige Werte sind 0 bis 100.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      Ein Verweis auf das SystemManager-Objekt für diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf das SystemManager-Objekt für diese Komponente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      Vom EffectManager verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Vom EffectManager verwendet. Gibt ein von null verschiedenes Ergebnis zurück, wenn eine Komponente nicht den EffectManager verwendet, um ein Tween auszuführen.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
  Die FlexTextField-Klasse ist eine Unterklasse der TextField-Klasse des Players und die Superklasse der UITextField-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexTextField-Klasse ist eine Unterklasse der TextField-Klasse des Players und die Superklasse der UITextField-Klasse. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexTextField:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
	 
	  <p>Stellt die <codeph>name</codeph>-Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird.</p>
	 
	  <p>Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, welcher innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"UITextField18"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexTextField:toString"><apiName>toString</apiName><shortdesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, z. B. <codeph>"MyApp0.HBox5.UITextField18"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse aus der <codeph>name</codeph>-Eigenschaft des Objekts und seiner Vorgänger erstellt.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IRawChildrenContainer"><apiName>IRawChildrenContainer</apiName><shortdesc>
  Die IRawChildrenContainer-Schnittstelle definiert die APIs für Container, die eine IChildList zurückgeben können, die alle seine untergeordneten Elemente repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IRawChildrenContainer-Schnittstelle definiert die APIs für Container, die eine IChildList zurückgeben können, die alle seine untergeordneten Elemente repräsentiert. Diese Schnittstelle sollte von einem Container implementiert werden, der IChildList-APIs wie die <codeph>numChildren</codeph>- und <codeph>addChild()</codeph>-Methode überschrieben hat, um nur einen Teil seiner tatsächlich existierenden untergeordneten Elemente zu verwalten. Die mx.core.Container-Klasse verfügt beispielsweise über eine Gruppe von untergeordneten Inhaltselementen, getrennt von den untergeordneten Nicht-Inhaltselementen wie Rahmenlinien, Titelleisten und Trennlinien.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link></related-links><apiValue id="mx.core:IRawChildrenContainer:mx.core:IRawChildrenContainer:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  Gibt eine IChildList zurück, die alle untergeordneten Elemente repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Gibt eine IChildList zurück, die alle untergeordneten Elemente repräsentiert. Dies wird vom FocusManager zum Auffinden von untergeordneten Nicht-Inhaltselementen verwendet, die möglicherweise trotzdem den Fokus erhalten können (z. B. Komponenten in ControlBars).
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DragSource"><apiName>DragSource</apiName><shortdesc>
  Die DragSource-Klasse enthält die gezogenen Daten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die DragSource-Klasse enthält die gezogenen Daten. Die Daten können abhängig vom Typ des Steuerelements, das den Ziehvorgang initiierte, in vielen verschiedenen Formaten vorliegen.
 
  <p>Jedes Datenformat wird mit einem String identifiziert. Mit der <codeph>hasFormat()</codeph>-Methode wird bestimmt, ob das Objekt Daten im entsprechenden Format hat. Mit der <codeph>dataForFormat()</codeph>-Methode werden die Daten im angegebenen Format abgerufen.</p>
 
  <p>Daten können mit der <codeph>addData()</codeph>-Methode direkt, oder mit der <codeph>addHandler()</codeph>-Methode indirekt hinzugefügt werden. Die <codeph>addHandler()</codeph>-Methode registriert einen Rückruf, der bei Anforderung der Daten augerufen wird. Dies ist zum Hinzufügen von Daten in einem nicht nativen Format nützlich, die möglicherweise einen größeren Berechnungs- oder Konvertierungsaufwand benötigen. Beispiel: Wenn Sie rohe Sounddaten haben, können Sie eine MP3-Formatprozedur hinzufügen. Die MP3-Konvertierung wird nur dann durchgeführt, wenn die MP3-Daten angefordert werden.</p>
  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:DragSource:DragSource"><apiName>DragSource</apiName><shortdesc>
	  Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Konstruktor.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DragSource:addData"><apiName>addData</apiName><shortdesc>
	  Fügt der Ziehquelle Daten und einen entsprechenden Formatstring hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objekt, das die Ziehdaten angibt. Dies kann jedes beliebige Objekt sein, z. B. ein String oder ein DataProvider.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>String, der eine das Format dieser Daten beschreibende Beschriftung angibt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Fügt der Ziehquelle Daten und einen entsprechenden Formatstring hinzu. Diese Methode gibt keinen Wert zurück.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:addHandler"><apiName>addHandler</apiName><shortdesc>
	  Fügt eine Prozedur hinzu, die bei Anforderung von Daten im angegebenen Format aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>handler</apiItemName><apiType value="Function"/><apiDesc>Funktion, die die zur Anforderung der Daten aufgerufene Prozedur angibt. Diese Funktion muss die Daten im angegebenen Format zurückgeben.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>String, der das Format für diese Daten angibt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Fügt eine Prozedur hinzu, die bei Anforderung von Daten im angegebenen Format aufgerufen wird. Dies ist beim Ziehen großer Datenmengen nützlich. Die Prozedur wird nur dann aufgerufen, wenn die Daten angefordert werden. Diese Methode gibt keinen Wert zurück.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:dataForFormat"><apiName>dataForFormat</apiName><shortdesc>
	  Ruft die Daten für das angegebene Format ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Objekt, das die Daten im angeforderten Format enthält. Wenn Sie mehrere Elemente ziehen, ist der zurückgegebene Wert ein Array. Bei listenbasierten Steuerelementen ist der Rückgabewert immer ein Array, auch wenn es nur ein einziges Element enthält.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>String, der eine das Format der zurückzugebenden Daten beschreibende Beschriftung angibt. Dieser String kann ein benutzerdefinierter Wert sein, wenn Sie mit der <codeph>addData()</codeph>-Methode ein benutzerdefiniertes Ablageziel erstellen. 
	  <p>Listenbasierte Steuerelemente haben vordefinierte Werte für den <codeph>format</codeph>-Parameter. Wenn das Steuerelement, das den Ziehvorgang initiiert hat, ein Tree-Steuerelement ist, ist das Format „treeItems“ und die Elemente implementieren die ITreeDataProvider-Schnittstelle. Bei allen anderen listenbasierten Steuerelementen mit integrierter Drag &amp; Drop-Unterstützung ist das Format „items“ und die Elemente implementieren die IDataProvider-Schnittstelle.</p>
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ruft die Daten für das angegebene Format ab. Wurden die Daten mit der <codeph>addData()</codeph>-Methode hinzugefügt, werden sie direkt zurückgegeben. Wurden die Daten mit der <codeph>addHandler()</codeph>-Methode hinzugefügt, wird für die Rückgabe der Daten die Prozedurfunktion aufgerufen.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:hasFormat"><apiName>hasFormat</apiName><shortdesc>
	  Gibt „true“ zurück, wenn die Datenquelle das angefordertert Format enthält. Andernfalls wird „false“ zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wen die Datenquelle das angeforderte Format enthält.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>String, der eine das Format der Daten beschreibende Beschriftung angibt. 
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Gibt <codeph>true</codeph> zurück, wenn die Datenquelle das angefordertert Format enthält. Andernfalls wird <codeph>false</codeph> zurückgegeben.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DragSource:formats:get"><apiName>formats</apiName><shortdesc>
	  Enthält die Formate der Ziehdaten als Array von Strings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
	  Enthält die Formate der Ziehdaten als Array von Strings. Stellt diese Eigenschaft mit der <codeph>addData()</codeph>- oder der <codeph>addHandler()</codeph>-Methode ein. Der Standardwert hängt von den dem DragSource-Objekt hinzugefügten Daten ab.
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:InteractionMode"><apiName>InteractionMode</apiName><shortdesc>
      Die InteractionMode-Klasse definiert die Werte für die interactionMode-Eigenschaft der UIComponent-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      Die InteractionMode-Klasse definiert die Werte für die <codeph>interactionMode</codeph>-Eigenschaft der UIComponent-Klasse.
           </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.ScrollControlBase.xml"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:InteractionMode:MOUSE"><apiName>MOUSE</apiName><shortdesc>
          Der Hauptinteraktionsmodus für diese Komponente erfolgt über die Maus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouse</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Der Hauptinteraktionsmodus für diese Komponente erfolgt über die Maus.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:InteractionMode:TOUCH"><apiName>TOUCH</apiName><shortdesc>
          Der Hauptinteraktionsmodus für diese Komponente erfolgt über Berührung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>touch</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Der Hauptinteraktionsmodus für diese Komponente erfolgt über Berührung.
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
  Die FlexBitmap-Klasse ist eine Unterklasse der Bitmap-Klasse des Players.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Bitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexBitmap-Klasse ist eine Unterklasse der Bitmap-Klasse des Players. Sie überschreibt die <codeph>toString()</codeph>-Methode, um einen String zurückzugeben, der die Position des Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung angibt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexBitmap:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>Die Daten für die Bitmap. 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Gibt an, ob die Bitmap am nächsten Pixel ausgerichtet wird.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob die Bitmap beim Skalieren geglättet wird.  
	 
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
	 
	  <p>Stellt die <codeph>name</codeph> -Eigenschaft auf einen String ein, der von der <codeph>createUniqueName()</codeph>-Methode der mx.utils.NameUtils-Klasse zurückgegeben wird. Dieser String ist der mit einer Ganzzahl verkettete Name der Klasse des Objekts, welcher innerhalb der Anwendung eindeutig ist, wie etwa <codeph>"FlexBitmap12"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexBitmap:toString"><apiName>toString</apiName><shortdesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der die Position dieses Objekts innerhalb der DisplayObject-Hierarchie angibt. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Gibt einen String zurück, der die Position dieses Objekts innerhalb der DisplayObjects-Hierarchie in der Anwendung zurückgibt. Dieser String, z. B. <codeph>"MyApp0.HBox5.FlexBitmap12"</codeph> wird von der <codeph>displayObjectToString()</codeph>-Methode der mx.utils.NameUtils-Klasse aus der <codeph>name</codeph>-Eigenschaft des Objekts und seiner Vorgänger erstellt.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IMXMLObject"><apiName>IMXMLObject</apiName><shortdesc>
  Die IMXMLObject-Schnittstelle definiert die APIs, die eine nicht visuelle Komponente implementieren muss, damit sie vom MXML-Compiler richtig verarbeitet werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IMXMLObject-Schnittstelle definiert die APIs, die eine nicht visuelle Komponente implementieren muss, damit sie vom MXML-Compiler richtig verarbeitet werden kann. Gegenwärtig wird nur die <codeph>initialized()</codeph>-Methode unterstützt.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IMXMLObject:mx.core:IMXMLObject:initialized"><apiName>initialized</apiName><shortdesc>
      Wird aufgerufen, nachdem das Implementierungsobjekt erstellt und sämtliche im MXML-Tag angegebenen Komponenteneigenschaften initialisiert wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Das MXML-Dokument, das dieses Objekt erstellt hat.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Der von <codeph>document</codeph> für den Verweis auf dieses Objekt verwendete Bezeichner. Wenn das Objekt eine verschachtelte Eigenschaft in <codeph>document</codeph> ist, ist <codeph> id</codeph> „ null“.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, nachdem das Implementierungsobjekt erstellt und sämtliche im MXML-Tag angegebenen Komponenteneigenschaften initialisiert wurden.
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:RuntimeDPIProvider"><apiName>RuntimeDPIProvider</apiName><shortdesc>
  Die RuntimeDPIProvider-Klasse stellt die Standardzuordnung ähnlicher DPI-Gerätewerte in vordefinierten DPI-Klassen bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die RuntimeDPIProvider-Klasse stellt die Standardzuordnung ähnlicher DPI-Gerätewerte in vordefinierten DPI-Klassen bereit. Eine Anwendung kann ihre runtimeDPIProvider-Eigenschaft auf eine Unterklasse der RuntimeDPIProvider-Eigenschaft eingestellt haben, um die Standardzuordnungen von Flex zu überschreiben. Das Überschreiben der Standardzuordnungen von Flex verursacht Änderungen im automatischen Skalierverhalten der Anwendung.
 
  <p>Das Überschreiben der Standardzuordnungen von Flex ist normalerweise nur für Geräte notwendig, die ihre screenDPI falsch melden, und für Geräte, die in einer anderen DPI-Klasse besser skalieren.</p>
 
  <p>Die Standardzuordnungen von Flex lauten wie folgt:
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><tbody><row><entry>160 DPI</entry><entry>&lt;200 DPI</entry></row><row><entry>240 DPI</entry><entry>>=200 DPI und &lt;280 DPI</entry></row><row><entry>320 DPI</entry><entry>>=280 DPI</entry></row></tbody></tgroup></adobetable>
  </p>
 
  <p>Unterklassen von RuntimeDPIProvider sollten nur von Laufzeit-APIs und nicht von Klassen, die sich auf das Flex-Framework beziehen, außer <codeph>mx.core.DPIClassification</codeph>, abhängig sein. </p>
  
  </apiDesc><example conref="RuntimeDPIProviderApp.mxml"/><example conref="RuntimeDPIProviderExample.as"/><example conref="RuntimeDPIProviderAppView.mxml"/></apiClassifierDetail><related-links><link href="mx.core.xml#DPIClassification"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="spark.components.xml#Application/applicationDPI"><linktext>spark.components.Application.applicationDPI</linktext></link></related-links><apiConstructor id="mx.core:RuntimeDPIProvider:RuntimeDPIProvider"><apiName>RuntimeDPIProvider</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:RuntimeDPIProvider:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      Gibt die Laufzeit-DPI des aktuellen Geräts durch die Zuordnung seiner flash.system.Capabilities.screenDPI zu einem der zahlreichen DPI-Werte in mx.core.DPIClassification zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Gibt die Laufzeit-DPI des aktuellen Geräts durch die Zuordnung seiner <codeph>lash.system.Capabilities.screenDPI</codeph> zu einem der zahlreichen DPI-Werte in <codeph>mx.core.DPIClassification</codeph> zurück. Eine Reihe von Geräten kann leicht andere DPI-Werte aufweisen und Flex ordnet diese den verschiedenen DPI-Klassen zu. Flex verwendet diese Methode zur Berechnung des aktuellen DPI-Wertes, wenn eine für einen bestimmten DPI-Wert erstellte Anwendung durch Skalierung an den aktuellen Wert angepasst wird.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.Capabilities.xml"><linktext>flash.system.Capabilities</linktext></link><link href="mx.core.xml#DPIClassification"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:FlexVersion"><apiName>FlexVersion</apiName><shortdesc> 
  Diese Klasse steuert die Abwärtskompatibilität des Frameworks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Diese Klasse steuert die Abwärtskompatibilität des Frameworks. Mit jeder neuen Version, werden gewisse Aspekte des Frameworks, wie etwa Verhaltensweisen, Stile und Standardeinstellungen, geändert. Dies kann sich auf Ihre Anwendung auswirken. Durch Einstellen der <codeph>compatibilityVersion</codeph>-Eigenschaft kann das Verhalten so geändert werden, dass es demjenigen vorheriger Versionen entspricht. Dies ist ein „globales“ Flag. Sie können nicht eine Version auf eine Komponente oder Komponentengruppe, und eine andere Version auf eine andere Komponente oder Komponentengruppe anwenden.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
      Die aktuell veröffentlichte Version des Flex-SDK, als uint-Wert kodiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04060000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Die aktuell veröffentlichte Version des Flex-SDK, als uint-Wert kodiert.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0_1"><apiName>VERSION_2_0_1</apiName><shortdesc> 
      Der compatibilityVersion-Wert von Flex 2.0.1, numerisch kodiert als uint-Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000001</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Der <codeph>compatibilityVersion</codeph>-Wert von Flex 2.0.1, numerisch kodiert als ein <codeph>uint</codeph>-Wert. Der Code kann diese Konstante mit <codeph>compatibilityVersion</codeph> vergleichen, um versionsspezifisches Verhalten zu implementieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
      Der compatibilityVersion-Wert von Flex 2.0, numerisch kodiert als uint-Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Der <codeph>compatibilityVersion</codeph>-Wert von Flex 2.0, numerisch kodiert als ein <codeph>uint</codeph>-Wert. Der Code kann diese Konstante mit <codeph>compatibilityVersion</codeph> vergleichen, um versionsspezifisches Verhalten zu implementieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
      Der compatibilityVersion-Wert von Flex 3.0, numerisch kodiert als uint-Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Der <codeph>compatibilityVersion</codeph>-Wert von Flex 3.0, numerisch kodiert als ein <codeph>uint</codeph>-Wert. Der Code kann diese Konstante mit <codeph>compatibilityVersion</codeph> vergleichen, um versionsspezifisches Verhalten zu implementieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_0"><apiName>VERSION_4_0</apiName><shortdesc> 
      Der compatibilityVersion-Wert von Flex 4.0, numerisch kodiert als uint-Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Der <codeph>compatibilityVersion</codeph>-Wert von Flex 4.0, numerisch kodiert als ein <codeph>uint</codeph>-Wert. Der Code kann diese Konstante mit <codeph>compatibilityVersion</codeph> vergleichen, um versionsspezifisches Verhalten zu implementieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_5"><apiName>VERSION_4_5</apiName><shortdesc> 
      Der compatibilityVersion-Wert von Flex 4.5, numerisch kodiert als ein uint-Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04050000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Der <codeph>compatibilityVersion</codeph>-Wert von Flex 4.5, numerisch kodiert als ein <codeph>uint</codeph>-Wert. Der Code kann diese Konstante mit <codeph>compatibilityVersion</codeph> vergleichen, um versionsspezifisches Verhalten zu implementieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_6"><apiName>VERSION_4_6</apiName><shortdesc> 
      Der Wert compatibilityVersion von Flex 4.6, numerisch kodiert als ein uint-Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04060000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Der Wert <codeph>compatibilityVersion</codeph> von Flex 4.6, numerisch kodiert als ein <codeph>uint</codeph>-Wert. Der Code kann diese Konstante mit <codeph>compatibilityVersion</codeph> vergleichen, um versionsspezifisches Verhalten zu implementieren.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_READ"><apiName>VERSION_ALREADY_READ</apiName><shortdesc>
      Ein String, der als Parameter an die compatibilityErrorFunction()-Methode übergeben wird, wenn die Kompatibilitätsversion bereits gelesen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadyRead</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ein String, der als Parameter an die <codeph>compatibilityErrorFunction()</codeph>-Methode übergeben wird, wenn die Kompatibilitätsversion bereits gelesen wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_SET"><apiName>VERSION_ALREADY_SET</apiName><shortdesc>
      Ein String, der als Parameter an die compatibilityErrorFunction()-Methode übergeben wird, wenn die Kompatibilitätsversion bereits eingestellt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadySet</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Ein String, der als Parameter an die <codeph>compatibilityErrorFunction()</codeph>-Methode übergeben wird, wenn die Kompatibilitätsversion bereits eingestellt wurde.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityErrorFunction:get"><apiName>compatibilityErrorFunction</apiName><shortdesc> 
      Eine Funktion, die aufgerufen wird, wenn die Kompatibilitätsversion mehr als einmal oder nach dem Lesen eingestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      Eine Funktion, die aufgerufen wird, wenn die Kompatibilitätsversion mehr als einmal oder nach dem Lesen eingestellt wird. Ist diese Funktion nicht eingestellt, erzeugt das SDK einen Fehler. Ist sie eingestellt, ruft die Datei diese Funktion auf, aber der Entwickler entscheidet, wie der Aufruf gehandhabt werden soll. Diese Funktion wird auch dann aufgerufen, wenn die Funktion mehr als einmal eingestellt wird. Die Funktion verwendet zwei Parameter: der erste ist ein <codeph>uint</codeph>-Wert, der der Version entspricht, die eingestellt werden sollte, und der zweite ist ein String zur Angabe des Grunds, warum dies fehlschlug, und zwar entweder <codeph>VERSION_ALREADY_SET</codeph> oder <codeph>VERSION_ALREADY_READ</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersionString:get"><apiName>compatibilityVersionString</apiName><shortdesc> 
      Die Kompatibilitätsversion, als String der Form „X.X.X“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Die Kompatibilitätsversion, als String der Form „X.X.X“. Dies ist ein an die <codeph>compatibilityVersion</codeph>-Eigenschaft übergebener String, welcher die Zahl in eine besser lesbare Stringversion (und zurück) konvertiert.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersion:get"><apiName>compatibilityVersion</apiName><shortdesc> 
      Die aktuelle Version, für die das Framework die Kompatibilität aufrechterhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiDefaultValue>FlexVersion.CURRENT_VERSION
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Die aktuelle Version, für die das Framework die Kompatibilität aufrechterhält. Standardmäßig ist dies <codeph>CURRENT_VERSION</codeph>. Diese Einstellung kann nur einmal geändert werden. Eine zweite Änderung führt zu einem Aufruf der <codeph>compatibilityErrorFunction()</codeph>-Methode, wenn diese vorhanden ist, oder zu einem Laufzeitfehler. Ein Ändern dieser Einstellung nach dem Lesen der <codeph>compatibilityVersion</codeph>-Eigenschaft führt zu einem Fehler, da von der Version abhängiger Code bereits ausgeführt wurde. Es gibt keine Benachrichtigungen. Es wird davon ausgegangen, dass diese Einstellung nur einmal vorgenommen wird, und zwar so früh, dass davon abhängiger Code noch nicht ausgeführt wurde.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToolTip"><apiName>IToolTip</apiName><shortdesc>
  Die IToolTip-Schnittstelle definiert die API, die tooltip-ähnliche Komponenten implementieren müssen, damit sie zusammen mit dem ToolTipManager eingesetzt werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IToolTip-Schnittstelle definiert die API, die tooltip-ähnliche Komponenten implementieren müssen, damit sie zusammen mit dem ToolTipManager eingesetzt werden können. Die ToolTip-Klasse implementiert diese Schnittstelle.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link></related-links><apiValue id="mx.core:IToolTip:mx.core:IToolTip:screen:get"><apiName>screen</apiName><shortdesc>
	  Ein Rechteck, das die Größe und Position der Basiszeichenoberfläche für diese QuickInfo angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  Ein Rechteck, das die Größe und Position der Basiszeichenoberfläche für diese QuickInfo angibt.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IToolTip:mx.core:IToolTip:text:get"><apiName>text</apiName><shortdesc>
	  Der Text, der in der QuickInfo angezeigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Der Text, der in der QuickInfo angezeigt wird.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient2"><apiName>IStateClient2</apiName><shortdesc>
  Die IStateClient2-Schnittstelle definiert die Schnittstelle, die Komponenten zur Unterstützung der Flex 4-Anzeigestatussemantik implementieren müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IStateClient2-Schnittstelle definiert die Schnittstelle, die Komponenten zur Unterstützung der Flex 4-Anzeigestatussemantik implementieren müssen.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IStateClient2:mx.core:IStateClient2:hasState"><apiName>hasState</apiName><shortdesc>
      Bestimmt, ob der angegebene Status auf dieser UIComponent definiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Bestimmt, ob der angegebene Status definiert wurde. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Der Name des überprüften Status. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Bestimmt, ob der angegebene Status auf dieser UIComponent definiert wurde. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:states:get"><apiName>states</apiName><shortdesc>
      Der Satz von Anzeigestatusobjekten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Der Satz von Anzeigestatusobjekten.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:transitions:get"><apiName>transitions</apiName><shortdesc>
      Der Satz von Anzeigestatusübergängen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Der Satz von Anzeigestatusübergängen.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
  Eine zurückgestellte Instanz-Factory verwendet eine Generatorfunktion zum Erstellen einer Instanz des erforderlichen Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine zurückgestellte Instanz-Factory verwendet eine Generatorfunktion zum Erstellen einer Instanz des erforderlichen Objekts. Eine Anwendung verwendet die <codeph>getInstance()</codeph>-Methode zum Erstellen einer Instanz eines Objekts, wenn es zum ersten Mal benötigt wird, und danach zum Abrufen eines Verweises auf das Objekt.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromClass"><linktext>DeferredInstanceFromClass</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromFunction:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Function"/><apiDesc>Eine Funktion, die eine Instanz des erforderlichen Objekts erstellt und zurückgibt.
     
      </apiDesc></apiParam><apiParam><apiItemName>destructor</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Eine optionale Funktion, die zur Bereinigung von ausstehenden Verweisen verwendet wird, wenn <codeph>reset()</codeph> aufgerufen wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromFunction:getInstance"><apiName>getInstance</apiName><shortdesc>
      Gibt einen Verweis auf eine Instanz des gewünschten Objekts zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Instanz des Objekts.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Gibt einen Verweis auf eine Instanz des gewünschten Objekts zurück. Ist keine Instanz des erforderlichen Objekts vorhanden, wird die im <codeph>generator</codeph>-Konstruktorparameter dieser Klasse angegebene Funktion aufgerufen.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromFunction:reset"><apiName>reset</apiName><shortdesc>
      Setzt den Status der Factory auf den anfänglichen, nicht initialisierten Status zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt den Status der Factory auf den anfänglichen, nicht initialisierten Status zurück. Der Verweis auf die zwischengespeicherte Instanz wird gelöscht.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
  Eine SWFBridgeGroup repräsentiert alle Sandbox-Brücken, die eine Anwendung zur Kommunikation mit ihren übergeordneten und untergeordneten Objekten benötigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeGroup</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine SWFBridgeGroup repräsentiert alle Sandbox-Brücken, die eine Anwendung zur Kommunikation mit ihren übergeordneten und untergeordneten Objekten benötigt.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SWFBridgeGroup:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>Das DisplayObject, das Eigentümer dieser Gruppe ist. Dies sollte der SystemManager einer Anwendung sein.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
	  
      Fügt dem Pod eine neue Brücke hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die Brücke für die Kommunikation mit dem Inhalt des untergeordneten Objekts.
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>Das DisplayObject, das den durch die Brücke repräsentierten Inhalt geladen hat. Normalerweise ist dies eine Instanz der SWFLoader-Klasse.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Fügt dem Pod eine neue Brücke hinzu.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
	  
      Testet, ob die gegebene Brücke eine der Sandbox-Brücken in dieser Gruppe ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Prozedur gefunden wird, anderenfalls <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die zu überprüfende Brücke.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Testet, ob die gegebene Brücke eine der Sandbox-Brücken in dieser Gruppe ist.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
	  
      Ruft den Eigentümer einer Brücke und auch das DisplayObject, das das untergeordnete Objekt geladen hat, auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Objekt, das das untergeordnete Objekt geladen hat. 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die Zielbrücke.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Ruft den Eigentümer einer Brücke und auch das DisplayObject, das das untergeordnete Objekt geladen hat, auf. Diese Methode ist nützlich, wenn ein Ereignis erhalten wird und <codeph>event.target</codeph> die Brücke ist. Die Brücke kann dann in das besitzende DisplayObject konvertiert werden.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
	  
      Ruft alle untergeordneten Brücken in dieser Gruppe ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Array aller untergeordneten Brücken in dieser Gruppe. Jedes Objekt im Array ist ein Objekt des Typs <codeph>IEventDispatcher</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
	  
      Ruft alle untergeordneten Brücken in dieser Gruppe ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
	  
      Entfernt die untergeordnete Brücke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die zu entfernende Brücke.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Entfernt die untergeordnete Brücke.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      Lässt Kommunikation mit dem übergeordneten Element zu, wenn sich das übergeordnete Element in einer anderen Sandbox befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Lässt Kommunikation mit dem übergeordneten Element zu, wenn sich das übergeordnete Element in einer anderen Sandbox befindet. Darf <codeph>null</codeph> sein, wenn sich das übergeordnete Element in derselben Sandbox befindet oder dies die Stammanwendung der obersten Ebene ist.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IIMESupport"><apiName>IIMESupport</apiName><shortdesc>
  Die IIMESupport-Schnittstelle definiert die Schnittstelle für jede Komponente, die IME (Input Method Editor) unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IIMESupport-Schnittstelle definiert die Schnittstelle für jede Komponente, die IME (Input Method Editor) unterstützt. IME wird für die Eingabe von chinesischen, japanischen und koreanischen Zeichen verwendet.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link></related-links><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Gibt an, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn diese Komponente den Fokus hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn diese Komponente den Fokus hat. Selbst wenn Komponenten den IME verwenden, trifft dies möglicherweise nicht auf alle Konfigurationen zu. Beispiel: TextArea setzt enableIME auf „false“, wenn <codeph>editable</codeph> den Wert <codeph>false</codeph> hat, da in dieser Konfiguration keine Eingabe zulässig ist. Genauso setzt DataGrid enableIME immer auf „false“. Wenn das DataGrid einen ItemEditor verwendet, lautet dessen <codeph>enableIME</codeph>-Wert <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:imeMode:get"><apiName>imeMode</apiName><shortdesc>
	  Der IME-Modus der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Der IME-Modus der Komponente.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstantiationUIComponent"><apiName>IDeferredInstantiationUIComponent</apiName><shortdesc>
  Die IDeferredInstantiationUIComponent-Schnittstelle definiert die Schnittstelle für eine Komponente oder ein Objekt, das die Instanziierung zurückstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IDeferredInstantiationUIComponent-Schnittstelle definiert die Schnittstelle für eine Komponente oder ein Objekt, das die Instanziierung zurückstellt.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      Erstellt einen ID-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Das übergeordnete Element dieses IUIComponent-Objekts. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Erstellt einen <codeph>id</codeph>-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt. Diese Funktion kann mehrdimensionale Verweise wie b[2][4] für Objekte in einem oder mehreren Repeatern erstellen. Wenn die Indexpositionen null sind, erstellt sie einen einfachen Verweis, der kein Array ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      Löscht den ID-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Das übergeordnete Element dieses IUIComponent-Objekts. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Löscht den <codeph>id</codeph>-Verweis auf dieses IUIComponent-Objekt im übergeordneten Dokumentobjekt. Diese Funktion kann mehrdimensionale Verweise wie b[2][4] für Objekte in einem oder mehreren Repeatern löschen. Wenn die Indexpositionen null entsprechen, löscht sie den einfachen Verweis, der kein Array ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc conref="mx.core.UIComponent#executeBindings()">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Führt die Bindungen für untergeordnete Elemente dieser Komponente rekursiv aus.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#executeBindings()">
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
	  Registriert den EffectManager jedes Effektereignisses als Ereignis-Listener.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Ein Array von Strings mit Effektnamen.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Registriert den EffectManager jedes Effektereignisses als Ereignis-Listener.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc conref="mx.core.UIComponent#cachePolicy">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cachePolicy">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc conref="mx.core.UIComponent#descriptor">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#descriptor">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:id:get"><apiName>id</apiName><shortdesc conref="mx.core.UIComponent#id">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#id">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc conref="mx.core.UIComponent#cacheHeuristic">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cacheHeuristic">
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFontContextComponent"><apiName>IFontContextComponent</apiName><shortdesc>
  Ermöglicht einer Komponente die Unterstützung einer Schriftartkontext-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Ermöglicht einer Komponente die Unterstützung einer Schriftartkontext-Eigenschaft. Die Eigenschaft wird für die Komponente vom Framework als untergeordnetes Element eingestellt und der Anzeigeliste hinzugefügt. Ein Schriftartkontext ist für Komponenten wichtig, die flash.text.TextField-Objekte mit eingebetteten Schriftarten erstellen. Wenn eine eingebettete Schriftart nicht mit Font.registerFont() registriert wurde, können TextField-Objekte nur eingebettete Schriftarten verwenden, wenn sie im Kontext der eingebetteten Schriftart erstellt werden. Diese Schnittstelle ermöglicht die Verfolgung des Schriftartkontexts einer Komponente.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IFontContextComponent:mx.core:IFontContextComponent:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      Die module-Factory, die den Schriftartkontext für diese Komponente bereitstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Die module-Factory, die den Schriftartkontext für diese Komponente bereitstellt.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeGroup"><apiName>ISWFBridgeGroup</apiName><shortdesc>
  Eine Sandbox-Brückengruppe ist eine Gruppe von Brücken, die Anwendungen repräsentieren, mit denen diese Anwendung kommunizieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Eine Sandbox-Brückengruppe ist eine Gruppe von Brücken, die Anwendungen repräsentieren, mit denen diese Anwendung kommunizieren kann. Diese Anwendung kann mit den anderen Anwendungen in der Gruppe den Speicher nicht gemeinsam nutzen oder auf die anderen Anwendungen in der Gruppe zugreifen. Sie verwendet stattdessen die Brücke für die Kommunikation mit diesen Anwendungen.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
      Fügt dem Pod eine neue Brücke hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die Brücke für die Kommunikation mit dem Inhalt des untergeordneten Objekts.
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>Das DisplayObject, das den durch die Brücke repräsentierten Inhalt geladen hat. Normalerweise ist dies eine Instanz der SWFLoader-Klasse.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt dem Pod eine neue Brücke hinzu.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
      Testet, ob die gegebene Brücke eine der Sandbox-Brücken in dieser Gruppe ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn die Prozedur gefunden wird, anderenfalls <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die zu überprüfende Brücke.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Testet, ob die gegebene Brücke eine der Sandbox-Brücken in dieser Gruppe ist.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
      Ruft den Eigentümer einer Brücke und auch das DisplayObject, das das untergeordnete Objekt geladen hat, auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Objekt, das das untergeordnete Objekt geladen hat. 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die Zielbrücke.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft den Eigentümer einer Brücke und auch das DisplayObject, das das untergeordnete Objekt geladen hat, auf. Diese Methode ist nützlich, wenn ein Ereignis erhalten wird und <codeph>event.target</codeph> die Brücke ist. Die Brücke kann dann in das besitzende DisplayObject konvertiert werden.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
      Ruft alle untergeordneten Brücken in dieser Gruppe ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Array aller untergeordneten Brücken in dieser Gruppe. Jedes Objekt im Array ist ein Objekt des Typs <codeph>IEventDispatcher</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Ruft alle untergeordneten Brücken in dieser Gruppe ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
      Entfernt die untergeordnete Brücke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Die zu entfernende Brücke.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt die untergeordnete Brücke.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      Die für die Kommunikation mit der übergeordneten Anwendung dieser Gruppe verwendete Brücke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Die für die Kommunikation mit der übergeordneten Anwendung dieser Gruppe verwendete Brücke.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutElement"><apiName>ILayoutElement</apiName><shortdesc>
  Die ILayoutElement-Schnittstelle wird von den Layout-Klassen primär zur Abfrage, Größenanpassung und Platzierung der Elemente von GroupBase-Containern verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die ILayoutElement-Schnittstelle wird von den Layout-Klassen primär zur Abfrage, Größenanpassung und Platzierung der Elemente von GroupBase-Containern verwendet.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      Gibt die x-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die x-Koordinate der Grenzen des Elements für die angegebene Elementgröße.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Breite der Elementgrenzen oder „NaN“, um die bevorzugte Breite zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Höhe der Elementgrenzen oder „NaN“, um die bevorzugte Höhe zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die x-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der angegebenen Größe für die Grenzen, der Layoutposition und der Layouttransformationsmatrix berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die x-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück.
     
      <p>Diese Methode wird normalerweise von Layouts während des Aufrufs der <codeph>measure()</codeph>-Methode verwendet, um vorherzusagen, welche Position das Element einnimmt, wenn dessen Größe auf bestimmte Abmessungen geändert wird.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize()"><linktext>setLayoutBoundsSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionX()"><linktext>getLayoutPositionX()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      Gibt die y-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die y-Koordinate der Grenzen des Elements für die angegebene Elementgröße.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Breite der Elementgrenzen oder „NaN“, um die bevorzugte Breite zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Höhe der Elementgrenzen oder „NaN“, um die bevorzugte Höhe zu verwenden.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die y-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der angegebenen Größe für die Grenzen, der Layoutposition und der Layouttransformationsmatrix berechnet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die y-Koordinate der Grenzen des Elements für die angegebene Elementgröße zurück. Diese Methode wird normalerweise von Layouts während des Aufrufs von <codeph>measure()</codeph>-verwendet, um vorherzusagen, welche Position das Element einnimmt, wenn dessen Größe auf bestimmte Abmessungen geändert wird.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize()"><linktext>setLayoutBoundsSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionY()"><linktext>getLayoutPositionY()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      Gibt die Layouthöhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Layouthöhe des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert „true“, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Layouthöhe des Elements zurück. Dies ist die Größe, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutWidth()"><linktext>getLayoutWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      Gibt die Layoutbreite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Layoutbreite des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert „true“, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Layoutbreite des Elements zurück. Dies ist die Größe, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutHeight()"><linktext>getLayoutHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      Gibt die x-Koordinate zurück, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die x-Koordinate, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die x-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die x-Koordinate zurück, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionY()"><linktext>getLayoutPositionY()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      Gibt die y-Koordinate zurück, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die y-Koordinate, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> den Wert „true“ hat, gibt die Methode die y-Koordinate der oberen linken Ecke des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die y-Koordinate zurück, die für das Element beim Zeichnen auf dem Bildschirm verwendet wird.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionX()"><linktext>getLayoutPositionX()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      Gibt die Layouttransformations-Matrix3D für dieses Element zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Matrix3D zur Transformation des Layouts für dieses Element. Ändern Sie nicht direkt den Rückgbewert, sondern rufen Sie stattdessen die <codeph>setLayoutMatrix()</codeph>-Method auf.
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Layouttransformations-Matrix3D für dieses Element zurück.
     
      <p>Diese Matrix wird normalerweise durch die Transformationseigenschaften der Komponente definiert, wie etwa <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph>. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>-Eigenschaft.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      Gibt die Transformationsmatrix zurück, die zur Berechnung des Layouts der Komponente relativ zu ihren Parallelobjekten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Layouttransformationsmatrix für dieses Element. Ändern Sie nicht direkt den Rückgbewert, sondern rufen Sie stattdessen die <codeph>setLayoutMatrix()</codeph>-Methode auf.
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      Gibt die Transformationsmatrix zurück, die zur Berechnung des Layouts der Komponente relativ zu ihren Parallelobjekten verwendet wird.
           <p>Diese Matrix wird normalerweise durch die 2D-Eigenschaften der Komponente, wie etwa <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph> definiert. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>-Eigenschaft.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      Gibt die maximale Höhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Höhe des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf „true“ eingestellt ist, gibt die Methode die Höhe des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der maximalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die maximale Höhe des Elements zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxWidth()"><linktext>getMaxWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      Gibt die maximale Breite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Breite des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert „true“, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der maximalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die maximale Breite des Elements zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxHeight()"><linktext>getMaxHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      Gibt die Mindesthöhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Höhe des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf <codeph>true</codeph> eingestellt ist, gibt die Methode die Höhe des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der minimalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Mindesthöhe des Elements zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinWidth()"><linktext>getMinWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      Gibt die Mindestbreite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Maximale Breite des Elements.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert <codeph>true</codeph>, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der minimalen Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Mindestbreite des Elements zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinHeight()"><linktext>getMinHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      Gibt die bevorzugte Höhe des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt die bevorzugte Höhe des Elements zurück. Die bevorzugte Höhe basiert normalerweise auf der standardmäßigen Elementgröße und expliziten Überschreibungen davon, falls vorhanden. Für UIComponent ist dies derselbe Wert, der von der <codeph>getExplicitOrMeasuredHeight()</codeph>-Methode zurückgegeben wird.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf <codeph>true</codeph> eingestellt ist, gibt die Methode die Höhe des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der bevorzugten Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die bevorzugte Höhe des Elements zurück.  
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredWidth()"><linktext>getPreferredWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      Gibt die bevorzugte Breite des Elements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt die bevorzugte Breite des Elements zurück. Die bevorzugte Breite basiert normalerweise auf der standardmäßigen Elementgröße und expliziten Überschreibungen davon, falls vorhanden. Für UIComponent ist dies derselbe Wert, der von der <codeph>getExplicitOrMeasuredWidth()</codeph>-Methode zurückgegeben wird.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Hat <codeph>postLayoutTransform</codeph> den Wert <codeph>true</codeph>, gibt die Methode die Breite des Begrenzungsrahmens des Elements zurück. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der bevorzugten Layoutgröße und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die bevorzugte Breite des Elements zurück.   
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredHeight()"><linktext>getPreferredHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      Legt die Koordinaten fest, die für das Zeichnen des Elements auf dem Bildschirm verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die x-Koordinate in der linken oberen Ecke des Begrenzungsrahmens  
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die y-Koordinate in der linken oberen Ecke des Begrenzungsrahmens.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf <codeph>true</codeph> eingestellt ist, wird das Element so platziert, dass die linke obere Ecke des Begrenzungsrahmens gleich (x, y) ist. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Koordinaten fest, die für das Zeichnen des Elements auf dem Bildschirm verwendet werden.
           <p>Aufrufe der <codeph>setLayoutBoundSize()</codeph>-Methode können sich auf die Layoutposition auswirken. Rufen Sie deshalb <codeph>setLayoutBoundPosition()</codeph> auf, nachdem Sie <codeph>setLayoutBoundSize()</codeph> aufgerufen haben.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutSize()"><linktext>setLayoutSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      Legt die Layoutgröße des Elements fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Die Layoutbreite des Elements.
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Die Layouthöhe des Elements.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>postLayoutTransform</codeph> auf „true“ eingestellt ist, entsprechen die angegebenen Größen denen des Begrenzungsrahmens des Elements. Der Begrenzungsrahmen ist im übergeordneten Koordinatenraum des Elements und wird ausgehend von der Layoutgröße, Layoutposition und der Layouttransformationsmatrix des Elements berechnet.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Layoutgröße des Elements fest. Dies ist die Größe, die für das Zeichnen des Elements auf dem Bildschirm verwendet wird.
      
      <p>Wenn die <codeph>width</codeph>- und/oder <codeph>height</codeph>-Parameter nicht angegebene werden (NaN), stellt Flex die Layoutgröße des Elements auf dessen bevorzugte Breite bzw. Höhe ein.</p>
     
      <p>Aufrufe der <codeph>setLayoutBoundSize()</codeph>-Methode können sich auf die Layoutposition auswirken. Rufen Sie deshalb <codeph>setLayoutBoundPosition()</codeph> auf, nachdem Sie <codeph>setLayoutBoundSize()</codeph> aufgerufen haben.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutPosition()"><linktext>setLayoutPosition()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      Legt die Transformations-Matrix3D fest, die zur Berechnung der Layoutgröße und -position der Komponenete relativ zu ihren Parallelobjekten verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/><apiDesc>Die Matrix.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, um den übergeordneten Container zu zwingen, seine untergeordneten Elemente neu anzuordnen. Normalerweise übergeben Sie <codeph>true</codeph> an die <codeph>invalidateLayout()</codeph>-Methode.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Transformations-Matrix3D fest, die zur Berechnung der Layoutgröße und -position der Komponenete relativ zu ihren Parallelobjekten verwendet wird.
           <p>Diese Matrix wird normalerweise durch die Transformationseigenschaften der Komponente definiert, wie etwa <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph>. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>-Eigenschaft.</p>
      
      <p>Beachten Sie, dass die Layout-Matrix3D in <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> und <codeph>getLayoutSize()</codeph> berücksichtigt wird, wenn sie in übergeordneten Koordinaten berechnet wird, und in <codeph>getLayoutPosition()</codeph> für übergeordnete und untergeordnete Koordinaten. Layouts, die die Transformationsmatrix explizit berechnen, rufen diese Methode normalerweise auf und arbeiten mit Größen in untergeordneten Koordinaten. Layouts, die diese Methode aufrufen, übergeben <codeph>false</codeph> an die <codeph>invalidateLayout()</codeph>-Methode, sodass keine nachfolgende Übergabe eines Layouts ausgelöst wird.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      Legt die Transformationsmatrix fest, die verwendet wird, um die Layoutgröße der Komponente und die Position relativ zu den Geschwisterelementen zu berechnen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/><apiDesc>Die Matrix.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, um den übergeordneten Container zu zwingen, seine untergeordneten Elemente neu anzuordnen. Normalerweise übergeben Sie <codeph>true</codeph> an die <codeph>invalidateLayout()</codeph>-Methode.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Transformationsmatrix fest, die verwendet wird, um die Layoutgröße der Komponente und die Position relativ zu den Geschwisterelementen zu berechnen.
           <p>Die Matrix wird normalerweise mit den 2D-Eigenschaften der Komponente wie <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> und <codeph>transformY</codeph> definiert. Manche Komponenten können zusätzliche Transformationseigenschaften aufweisen, die auf der Layoutmatrix angewendet werden, um die endgültige, berechnete Matrix zu bestimmen. Beispielsweise definiert <codeph>UIComponent</codeph> die <codeph>offsets</codeph>.</p>
      
      <p>Beachten Sie, dass die Layout-Matrix in <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> und <codeph>getLayoutSize()</codeph> unterteilt ist, wenn sie in übergeordneten Koordinaten berechnet wird, sowie in <codeph>getLayoutPosition()</codeph> für übergeordnete und untergeordnete Koordinaten. Layouts, die die Transformationsmatrix explizit berechnen, rufen diese Methode normalerweise auf und arbeiten mit Größen in untergeordneten Koordinaten. Layouts, die diese Methode aufrufen, übergeben <codeph>false</codeph> an die <codeph>invalidateLayout()</codeph>-Methode, sodass keine nachfolgende Übergabe eines Layouts ausgelöst wird.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:transformAround"><apiName>transformAround</apiName><shortdesc>
      Eine Dienstprogrammmethode zum Aktualisieren der Drehung, Skalierung und Versetzung der Transformation, während gleichzeitig ein im Koordinatenraum der Komponente selbst angegebener bestimmter Punkt im übergeordneten Koordinatenraum unverändert erhalten bleibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Der Punkt (in den Koordinaten der Komponente selbst), der relativ zu seinem übergeordneten Objekt unverändert erhalten bleiben soll.
           </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Skalierung der Transformation.
           </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Drehung der Transformation
           </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Versetzung der Transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Skalierung der Transformation nach dem Layout.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Drehung der Transformation nach dem Layout.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Die neuen Werte für die Versetzung der Transformation nach dem Layout.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bei <codeph>true</codeph> sind die Größe und Anzeige des übergeordneten Containers ungültig. Layouts, die diese Methode aufrufen, übergeben <codeph>false</codeph>, sodass eine darauf folgende Übergabe durch das Layout nicht ausgelöst wird.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eine Dienstprogrammmethode zum Aktualisieren der Drehung, Skalierung und Versetzung der Transformation, während gleichzeitig ein im Koordinatenraum der Komponente selbst angegebener bestimmter Punkt im übergeordneten Koordinatenraum unverändert erhalten bleibt. Diese Funktion weist die bereitgestellten Drehungs-, Skalierungs- und Versetzungswerte zu und aktualisiert dann die x/y/z-Eigenschaften nach Bedarf, um den Transformationsmittelpunkt unverändert beizubehalten.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Die y-Koordinate der Grundlinie der ersten Textzeile der Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die y-Koordinate der Grundlinie der ersten Textzeile der Komponente.
           <p>Diese Eigenschaft dient der Implementierung des <codeph>baseline</codeph>-Beschränkungsstils. Sie wird auch zum Ausrichten der Beschriftung eines FormItem an den Steuerelementen im FormItem verwendet.</p>
           <p>Jede Komponente sollte diese Eigenschaft überschreiben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baseline:get"><apiName>baseline</apiName><shortdesc>
      Der vertikale Abstand in Pixeln vom Ankerziel zur Grundlinienposition des Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der vertikale Abstand in Pixeln vom Ankerziel zur Grundlinienposition des Steuerelements.
           <p>Standardmäßig entspricht das Ankerziel dem oberen Rand des Inhaltsbereichs im Container. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungszeile sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:bottom:get"><apiName>bottom</apiName><shortdesc>
      Der vertikale Abstand in Pixeln vom unteren Rand der Komponente zum unteren Rand des Ankerziels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der vertikale Abstand in Pixeln vom unteren Rand der Komponente zum unteren Rand des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungszeile sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      Enthält „true“, wenn das Element eine 3D-Matrix hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Enthält <codeph>true</codeph>, wenn das Element eine 3D-Matrix hat.
           <p>Verwenden Sie <codeph>hasLayoutMatrix3D</codeph>, anstatt den Rückgabewert von <codeph>getLayoutMatrix3D()</codeph> aufzurufen und zu prüfen, da diese Methode auch dann eine gültige Matrix zurückgibt, wenn es sich um ein 2D-Element handelt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      Der horizontale Abstand in Pixeln vom Mittelpunkt der Komponente zum Mittelpunkt des Inhaltsbereichs des Ankerziels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der horizontale Abstand in Pixeln vom Mittelpunkt der Komponente zum Mittelpunkt des Inhaltsbereichs des Ankerziels.
           <p>Das standardmäßige Ankerziel ist der Container selbst. </p>
           <p>In Layouts mit erweiterten Beschränkungen kann das Ankerziel eine Beschränkungsspalte sein. Dann entspricht der Inhaltsbereich dem Raum zwischen der vorherigen Spalte (oder Containerseite) und der Zielspalte.</p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „constraintColumnId:value“ ein. Beispiel: „col1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:left:get"><apiName>left</apiName><shortdesc>
      Der horizontale Abstand in Pixeln vom linken Rand der Komponente zum linken Rand des Ankerziels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der horizontale Abstand in Pixeln vom linken Rand der Komponente zum linken Rand des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungsspalte sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „col1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Legt die Höhe einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt die Höhe einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest. Zulässige Werte sind 0 bis 100. Die Einstellung der Eigenschaften <codeph>height</codeph> oder <codeph>explicitHeight</codeph> führt dazu, dass diese Eigenschaft auf „NaN“ zurückgesetzt wird.
           <p>Diese Eigenschaft gibt nur dann einen numerischen Wert zurück, wenn die Eigenschaft zuvor eingestellt wurde. Der Wert spiegelt nicht die exakte Größe der Komponente in Prozent wider.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Legt die Breite einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt die Breite einer Komponente als Prozentsatz der Größe ihres übergeordneten Objekts fest. Zulässige Werte sind 0 bis 100. Die Einstellung der Eigenschaften <codeph>width</codeph> oder <codeph>explicitWidth</codeph> führt dazu, dass diese Eigenschaft auf „NaN“ zurückgesetzt wird.
           <p>Diese Eigenschaft gibt nur dann einen numerischen Wert zurück, wenn die Eigenschaft zuvor eingestellt wurde. Der Wert spiegelt nicht die exakte Größe der Komponente in Prozent wider.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:right:get"><apiName>right</apiName><shortdesc>
      Der horizontale Abstand in Pixeln von der rechten Kante der Komponente zur rechten Kante des Ankerziels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der horizontale Abstand in Pixeln von der rechten Kante der Komponente zur rechten Kante des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungsspalte sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „col1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:top:get"><apiName>top</apiName><shortdesc>
      Der vertikale Abstand in Pixeln vom oberen Rand der Komponente zum oberen Rand des Ankerziels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der vertikale Abstand in Pixeln vom oberen Rand der Komponente zum oberen Rand des Ankerziels.
           <p>Standardmäßig entspricht das Ankerziel dem Inhaltsbereich des Containers. In Layouts mit erweiterten Beschränkungen kann das Ziel eine Beschränkungszeile sein. </p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „anchorTargetName:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      Der vertikale Abstand in Pixeln von der Mitte der Komponente zur Mitte des Inhaltsbereichs des Ankerziels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der vertikale Abstand in Pixeln von der Mitte der Komponente zur Mitte des Inhaltsbereichs des Ankerziels.
           <p>Das standardmäßige Ankerziel ist der Container selbst. </p>
           <p>In Layouts mit erweiterten Beschränkungen kann das Ankerziel eine Beschränkungszeile sein. Dann entspricht der Inhaltsbereich dem Raum zwischen der vorherigen Zeile (oder Containerseite) und der Zielzeile.</p>
           <p>Mit dem Einstellen der Eigenschaft auf eine Zahl oder einen numerischen String wie „10“ wird die Verwendung des standardmäßigen Ankerziels festgelegt.</p>
           <p>Um ein Ankerziel anzugeben, stellen Sie den Eigenschaftswert auf einen String im Format „constraintColumnId:value“ ein. Beispiel: „row1:10“.</p>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerCreationPolicy"><apiName>ContainerCreationPolicy</apiName><shortdesc>
  Die ContainerCreationPolicy-Klasse definiert die Konstantenwerte für die creationPolicy-Eigenschaft der UIComponent-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ContainerCreationPolicy-Klasse definiert die Konstantenwerte für die <codeph>creationPolicy</codeph>-Eigenschaft der Container-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link></related-links><apiValue id="mx.core:ContainerCreationPolicy:ALL"><apiName>ALL</apiName><shortdesc>
	  Erstellt sofort die untergeordneten Elemente aller Ebenen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Erstellt sofort die untergeordneten Elemente aller Ebenen.
	 
	  <p>Vermeiden Sie möglichst die Verwendung der <codeph>creationPolicy</codeph>-Methode, denn sie führt zu einer wesentlich erhöhten Startzeit Ihrer Anwendung. Normalerweise gibt es keinen plausiblen Grund dafür, zur Startzeit Komponenten zu erstellen, welche der Benutzer nicht sehen kann. Wenn Sie diese Richtlinie dazu verwenden, Daten zur Startzeit in verborgene Komponenten zu laden, sollten Sie Ihre Anwendung so konzipieren, dass die in Datenvariablen gespeicherten Daten und Komponenten, die später erstellt werden, diese Daten über Databinding oder eine <codeph>initialize</codeph>-Prozeder abrufen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  Verzögert die Erstellung einiger oder aller untergeordneten Elemente, bis sie benötigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Verzögert die Erstellung einiger oder aller untergeordneten Elemente, bis sie benötigt werden.
	 
	  <p>Wenn beispielsweise ein Navigator-Container wie etwa TabNavigator diese <codeph>creationPolicy</codeph> hat, erstellt er sofort alle untergeordneten Elemente sowie die untergeordneten Elemente des ursprünglich ausgewählten untergeordneten Elements. Die Erstellung der den anderen untergeordneten Elementen untergeordneten Elemente wird jedoch zurückgestellt, bis der Benutzer zu diesen Elementen navigiert.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:NONE"><apiName>NONE</apiName><shortdesc>
	  Es werden keine untergeordneten Objekte erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Es werden keine untergeordneten Objekte erstellt.
	 
	  <p>Mit dieser <codeph>creationPolicy</codeph> liegt es in der Verantwortung des Entwicklers, die untergeordneten Objekte der UIComponentDescriptors durch Aufruf der <codeph>createComponentsFromDescriptors()</codeph>-Methode vom übergeordneten Container aus programmgesteuert zu erstellen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:QUEUED"><apiName>QUEUED</apiName><shortdesc>
	  Fügt den Container einer Erstellungswarteschlange hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>queued</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Fügt den Container einer Erstellungswarteschlange hinzu. Seit Flex 4.0 veraltet.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextField"><apiName>UITextField</apiName><shortdesc>
  Die UITextField-Klasse definiert die von vielen Flex-Komponenten zum Anzeigen von Text verwendete Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="direction"/><styles><style format="Length" inherit="yes" name="textIndent" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Offset der ersten Textzeile von der linken Seite des Containers in Pixeln.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:UITextField" playerVersion="Flash10" type="Class">
<description>
  Die Klasse, die IUITextField implementiert, das von dieser Komponente für die Darstellung von Text verwendet wird.
 
  <p>Sie kann auf die mx.core.UITextField-Klasse (zur Verwendung der in Flash Player integrierten klassischen TextField-Klasse) oder die mx.core.UIFTETextField-Klasse (zur Verwendung des Text Layout Frameworks, um verbesserte Textdarstellungen, einschließlich bidirektionalem Layout, zu erhalten) eingestellt werden.</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text unterstrichen wird. Mögliche Werte sind <codeph>"none"</codeph> und <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Ausrichtung von Text in einem Container. Mögliche Werte sind <codeph>"left"</codeph>, <codeph>"right"</codeph> oder <codeph>"center"</codeph>.
 
  <p>Der Standardwert für die meisten Steuerelemente ist <codeph>„left“</codeph>. Für die FormItem-Komponente ist der Standardwert <codeph>„right“</codeph>. Für die Button-, LinkButton- und AccordionHeader-Komponenten ist der Standardwert <codeph>„center“</codeph>, und diese Eigenschaft wird nur erkannt, wenn die <codeph>labelPlacement</codeph>-Eigenschaft auf <codeph>„left“</codeph> oder <codeph>„right“</codeph> eingestellt ist. Wenn <codeph>labelPlacement</codeph> auf <codeph>"top"</codeph> oder <codeph>"bottom"</codeph> gesetzt wird, werden der Text und eventuell vorhandene Symbole zentriert.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  Das Gebietsschema des von dieser Komponente angezeigten Texts.
 
  <p>FTE und TLF verwenden dieses Gebietsschema für die Zuordnung von Unicode-Schriftarten zu Schriftartglyphen und für die Suche nach Ausweichschriftarten.</p>
 
  <p>Hinweis: Dieser Stil gilt nur, wenn eine MX-Komponente UIFTETextField als ihre <codeph>textFieldClass</codeph> festlegt.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Die Anzahl der zusätzlichen Pixel, die zwischen den Zeichen angezeigt werden. Durch einen positiven Wert wird der Zeichenabstand über den normalen Abstand hinaus vergrößert und durch einen negativen Wert verkleinert.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:UITextField" playerVersion="Flash9" type="Boolean">
<description>
  Ein boolescher Wert, der angibt, ob Kerning aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Kerning reduziert den Abstand zwischen bestimmten Zeichenpaaren, um die Lesbarkeit zu verbessern, und sollte nur verwendet werden, wenn dies wirklich nötig ist, etwa bei Titeln mit großer Schrift. Kerning wird nur für eingebettete Schriftarten unterstützt. Bestimmte Schriftarten wie Verdana und Schriftarten mit fester Breite wie Courier New unterstützen Kerning nicht
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text fett formatiert wird. Gültige Werte sind <codeph>normal</codeph> und <codeph>bold</codeph>. Der Standardwert für die Button-Steuerelemente ist <codeph>bold</codeph>. Der Standardwert für alle anderen Steuerelemente ist <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Legt die <codeph>thickness</codeph>-Eigenschaft von internen TextFields-Elementen fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Stärke der Glyphenkanten an. Die möglichen Werte sind Zahlen von -200 bis 200. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkung auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Bestimmt, ob der Text kursiv formatiert wird. Gültige Werte sind <codeph>"normal"</codeph> und <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Die Höhe des Texts in Pixeln. Beim Halo-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 10. Für das ColorPicker-Steuerelement des Halo-Designs lautet der Standardwert 11. Beim Spark-Design lautet der Standardwert für alle Steuerelemente mit Ausnahme des ColorPicker-Steuerelements 12. Für das ColorPicker-Steuerelement des Spark-Designs lautet der Standardwert 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Legt die Eigenschaft <codeph>sharpness</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Diese Eigenschaft gibt die Schärfe der Glyphenkanten an. Die möglichen Werte sind Zahlen von -400 bis 400. 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>gridFitType</codeph> von internen Textfeldern fest, die Text in Flex-Steuerelementen darstellen. Die möglichen Werte sind <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) und <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Diese Eigenschaft kommt nur zur Anwendung, wenn Sie eine eingebettete Schriftart verwenden und die <codeph>fontAntiAliasType</codeph>-Eigenschaft auf <codeph>„advanced“</codeph> eingestellt ist.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
 
  <p>Dieser Stil wird auf den gesamten Text eines untergeordneten TextField-Steuerelements angewendet. Sie können ihn nicht auf einige Zeichen anwenden und auf andere nicht.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Der Name der zu verwendenden Schriftart. Anders als in einer vollständigen CSS-Implementierung werden durch Kommas getrennte Listen nicht unterstützt. Sie können den Namen einer beliebigen Schriftartfamilie verwenden. Wenn Sie eine generische Schriftartbezeichnung wählen, wird diese in eine entsprechende Geräteschriftart konvertiert. Die Standardschriftart für das Halo-Design ist <codeph>"Verdana"</codeph>. Die Standardschriftart für das Spark-Design ist <codeph>"Arial"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Legt die Eigenschaft <codeph>antiAliasType</codeph> von internen Textfeldern fest. Die möglichen Werte sind <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) und <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Der Standardwert ist <codeph>„advanced“</codeph>, wodurch ein Anti-Aliasing für die Schriftart aktiviert wird. Auf <codeph>„normal“</codeph> eingestellt, um das erweiterte Anti-Aliasing zu deaktivieren.</p>
  
  <p>Dieser Stil hat keine Auswirkungen auf Systemschriftarten.</p>
  
  <p>Dieser Stil wird auf alle Texte in einem TextField-Substeuerelement angewendet. Es ist nicht möglich, ihn selektiv auf einzelne Zeichen anzuwenden.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, wenn deaktiviert.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  Farbe des Texts in der Komponente, einschließlich der Komponentenbeschriftung. Der Standardwert für das Halo-Design ist <codeph>0x0B333C</codeph>. Der Standardwert für das Spark-Design ist <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der rechten Rahmenlinie der Komponente und dem rechten Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Anzahl der Pixel zwischen der linken Rahmenlinie der Komponente und dem linken Rand ihres Inhaltsbereichs.
  <p>Der Standardwert ist 0.</p>
  <p>Der Standardwert für ein Schaltflächensteuerelement im Halo-Design beträgt 10 und im Spark-Design 6.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 5.</p>
  <p>Der Standardwert für den Form-Container ist 16.</p>
  <p>Der Standardwert für das Tree-Steuerelement ist 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Zusätzlicher vertikaler Abstand zwischen Textzeilen.
 
  <p>Der Standardwert ist 2.</p>
  <p>Der Standardwert für das ComboBox-Steuerelement ist 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUITextField</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die UITextField-Klasse definiert die von vielen Flex-Komponenten zum Anzeigen von Text verwendete Komponente. Beispiel: Das mx.controls.Button-Steuerelement verwendet eine UITextField-Komponente zum Definieren des Beschriftungsbereichs des Button-Steuerelements. 
 
  <p>Die UITextField-Klasse erweitert die flash.text.TextField-Klasse zur Unterstützung zusätzlicher Funktionen, die von Flex benötigt werden, beispielsweise folgende: CSS-Stile, Invalidierung/Messung/Layout, Aktivierung/Deaktivierung, QuickInfos und IME-Unterstützung (Input Method Editor) für die Eingabe chinesischen, japanischen und koreanischen Textes.</p>
 
  <p>Warnung: Wenn UITextField <codeph>layoutDirection="rtl"</codeph> erbt, ändert es seine eigene <codeph>transform.matrix</codeph>, um das standardmäßige Koordinatensystem lokal wiederherzustellen.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link></related-links><apiConstructor id="mx.core:UITextField:UITextField"><apiName>UITextField</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Eine Zahl, die explicitHeight entspricht, wenn sie definiert ist, oder measuredHeight entspricht, wenn sie nicht definiert ist.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Eine Zahl, die explicitWidth entspricht, wenn sie definiert ist, oder measuredWidth entspricht, wenn sie nicht definiert ist.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UIComponent#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Der Stilwert.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Name der style-Eigenschaft.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getTextStyles"><apiName>getTextStyles</apiName><shortdesc>
      Gibt das TextFormat-Objekt zurück, das die Zeichenformatierungsinformationen für dieses UITextField-Objekt repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein TextFormat-Objekt. 
           </apiDesc><apiType value="flash.text:TextFormat"/></apiReturn></apiOperationDef><apiDesc>
      Gibt das TextFormat-Objekt zurück, das die Zeichenformatierungsinformationen für dieses UITextField-Objekt repräsentiert.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextFormat.xml"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc>
      Gibt ein UITextFormat-Objekt zurück, das Formatierungsinformationen für diese Komponente enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Objekt mit Formatierungsinformationen für diese Komponente.
           </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Gibt ein UITextFormat-Objekt zurück, das Formatierungsinformationen für diese Komponente enthält. Diese Methode ähnelt der <codeph>getTextFormat()</codeph>-Methode der flash.text.TextField-Klasse, sie gibt jedoch ein UITextFormat-Objekt statt eines TextFormat-Objekts zurück.
           <p>Die UITextFormat-Klasse erweitert die TextFormat-Klasse zum Hinzufügen der Textmessungsmethoden <codeph>measureText()</codeph> und <codeph>measureHTMLText()</codeph>.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:initialize"><apiName>initialize</apiName><shortdesc>
      Initialisiert diese Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialisiert diese Komponente.
           <p>Diese Method wird zwar von der IUIComponent-Schnittstelle benötigt, hat jedoch für ein UITextField keine Auswirkung.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateSize"><apiName>invalidateSize</apiName><shortdesc conref="mx.core.UIComponent#invalidateSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:move"><apiName>move</apiName><shortdesc conref="mx.core.UIComponent#move()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Position „links“ der Komponente in ihrer übergeordneten Komponente.
             </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position „oben“ der Komponente in ihrer übergeordneten Komponente.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#move()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:owns"><apiName>owns</apiName><shortdesc>
      Gibt „true“ zurück, wenn das untergeordnete Objekt dieses Objekt als übergeordnetes Objekt oder Eigentümer hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn das untergeordnete Objekt diese UITextField-Objekt als übergeordnetes Objekt oder Eigentümer hat.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Das untergeordnete DisplayObject.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt <codeph>true</codeph> zurück, wenn das untergeordnete Objekt dieses Objekt als übergeordnetes Objekt oder Eigentümer hat.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextField/owner"><linktext>Eigentümer</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      Diese Funktion wird aufgerufen, wenn ein UITextField-Objekt einem übergeordneten Objekt zugewiesen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Das übergeordnete Objekt dieses UITextField-Objekts.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Diese Funktion wird aufgerufen, wenn ein UITextField-Objekt einem übergeordneten Objekt zugewiesen wird. Unter normalen Umständen brauchen Sie diese Methode nie aufzurufen.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      Wiederholt das festgelegte Ereignis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn eine Wiederholung erfolgreich war.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Das zu wiederholende Ereignis.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Wiederholt das festgelegte Ereignis. Komponentenautoren sollten super.replayAutomatableEvent für den Fall aufrufen, dass das voreingestellte Wiederholverhalten in einer Superklasse definiert wurde.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setActualSize"><apiName>setActualSize</apiName><shortdesc conref="mx.core.UIComponent#setActualSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Breite des Objekts.
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Höhe des Objekts.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setActualSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setColor"><apiName>setColor</apiName><shortdesc>
      Legt die Schriftfarbe des Texts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Die neue Schriftfarbe.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die Schriftfarbe des Texts fest.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UIComponent#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setStyle"><apiName>setStyle</apiName><shortdesc>
      Hat keine Auswirkung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Name der style-Eigenschaft.
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Neuer Wert für den Stil.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Hat keine Auswirkung. Ein UITextField darf keine Inline-Stile haben.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setVisible"><apiName>setVisible</apiName><shortdesc>
      Legt die visible-Eigenschaft dieses UITextField-Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, wenn dieses UITextField sichtbar sein soll und <codeph>false</codeph>, wenn es nicht sichtbar sein soll.
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph>, um die Generierung eines Ereignisses bei Änderung der Sichtbarkeit zu unterdrücken.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Legt die <codeph>visible</codeph>-Eigenschaft dieses UITextField-Objekts fest.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:styleChanged"><apiName>styleChanged</apiName><shortdesc conref="mx.core.UIComponent#styleChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Der Name der Stileigenschaft oder „null“, wenn sich alle Stile für diese Komponente geändert haben.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#styleChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      Kürzt den Text so, dass er horizontal in den für dieses Steuerelement definierten Bereich passt, und hängt an das Ende des gekürzten Texts drei Punkte (...) an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn der Text gekürzt werden musste.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der Text, der nach der Stelle, an der der Text gekürzt wurde, angehängt werden muss. Wenn der Wert <codeph>null</codeph> übergeben wird, wird ein lokalisierbarer String wie <codeph>"..."</codeph> verwendet.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Kürzt den Text so, dass er horizontal in den für dieses Steuerelement definierten Bereich passt, und hängt an das Ende des gekürzten Texts drei Punkte (...) an.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.core.UIComponent#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UITextField:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Das Delegatenobjekt, das die automationsbezogenen Funktionen verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Das Delegatenobjekt, das die automationsbezogenen Funktionen verarbeitet.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      „True“, wenn diese Komponente automationsfähig ist, andernfalls „false“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      „True“, wenn diese Komponente automationsfähig ist, andernfalls „false“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      Name, der als Bezeichner für dieses Objekt verwendet werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Name, der als Bezeichner für dieses Objekt verwendet werden kann.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      Der Eigentümer dieser Komponente für Automationszwecke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Der Eigentümer dieser Komponente für Automationszwecke.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      Das übergeordnete Element dieser Komponente für Automationszwecke.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Das übergeordnete Element dieser Komponente für Automationszwecke.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationValue:get"><apiName>automationValue</apiName><shortdesc>
      
      Dieser Wert entspricht im Allgemeinen der gerenderten Darstellung des Objekts und kann verwendet werden, um den Bezeichner mit dem Objekt, wie es in der Anwendung erscheint, in Beziehung zu setzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Dieser Wert entspricht im Allgemeinen der gerenderten Darstellung des Objekts und kann verwendet werden, um den Bezeichner mit dem Objekt, wie es in der Anwendung erscheint, in Beziehung zu setzen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      „True“, wenn diese Komponente für die Automation sichtbar ist, andernfalls „false“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      „True“, wenn diese Komponente für die Automation sichtbar ist, andernfalls „false“.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Die y-Koordinate der Grundlinie der ersten Textzeile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die y-Koordinate der Grundlinie der ersten Textzeile.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:className:get"><apiName>className</apiName><shortdesc>
      Der Name der Klasse dieser Instanz, beispielsweise „DataGridItemRenderer“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Der Name der Klasse dieser Instanz, beispielsweise <codeph>"DataGridItemRenderer"</codeph>.
           <p>Dieser String enthält nicht den Paketnamen. Wenn Sie den Paketnamen ebenfalls benötigen, rufen Sie die <codeph>getQualifiedClassName()</codeph>-Methode im flash.utils-Paket auf. Dadurch wird ein String wie beispielsweise <codeph>"mx.controls.dataGridClasses::DataGridItemRenderer"</codeph> zurückgegeben.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:document:get"><apiName>document</apiName><shortdesc>
      Ein Verweis auf das Dokumentobjekt, das mit diesem UITextField-Objekt verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Verweis auf das Dokumentobjekt, das mit diesem UITextField-Objekt verknüpft ist. Ein Document-Objekt ist ein Objekt auf der obersten Hierarchieebene einer Flex-Anwendung, MXML-Komponente oder AS-Komponente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das angibt, ob der IME (Eingabemethodeneditor) aktiviert werden soll, wenn die Komponente den Fokus erhält.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enabled:get"><apiName>enabled</apiName><shortdesc>
      Ein boolescher Wert, der angibt, ob die Komponente aktiviert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein boolescher Wert, der angibt, ob die Komponente aktiviert wird. Diese Eigenschaft wirkt sich nur auf die Farbe des Texts aus, und nicht darauf, ob das UITextField bearbeitbar ist. Verwenden Sie zur Steuerung der Bearbeitbarkeit die <codeph>flash.text.TextField.type</codeph>-Eigenschaft.
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Zahl, die die maximal zulässige Höhe der Komponente in Pixeln und deren Koordinaten angibt, wenn die maxHeight-Eigenschaft gesetzt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die die maximal zulässige Höhe der Komponente in Pixeln und deren Koordinaten angibt, wenn die maxHeight-Eigenschaft gesetzt ist. Da maxHeight schreibgeschützt ist, gibt diese Methode „NaN“ zurück. Sie müssen diese Methode überschreiben und zum Verwenden dieser Eigenschaft eine Set-Methode hinzufügen.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Zahl, die die maximal zulässige Breite der Komponente in Pixel, in den Koordinaten der Komponente angibt, wenn die maxWidth-Eigenschaft gesetzt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Zahl, die die maximal zulässige Breite der Komponente in Pixel, in den Koordinaten der Komponente angibt, wenn die maxWidth-Eigenschaft gesetzt ist. Da maxWidth schreibgeschützt ist, gibt diese Methode „NaN“ zurück. Sie müssen diese Methode überschreiben und zum Verwenden dieser Eigenschaft eine Set-Methode hinzufügen.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      Ein einzelnes Sprite-Objekt, das von Komponenten gemeinsam und als Überlagerung für das Zeichnen der Fokusanzeige verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Ein einzelnes Sprite-Objekt, das von Komponenten gemeinsam und als Überlagerung für das Zeichnen der Fokusanzeige verwendet wird. Komponenten nutzen dieses Objekt gemeinsam, wenn ihr übergeordnetes Objekt eine Komponente mit Fokus ist, nicht aber wenn die Komponente die IFocusManagerComponent-Schnittstelle implementiert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc>
      Wenn „true“, fügen die Stile paddingLeft und paddingRight keinen Platz um den Text der Komponente herum ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn <codeph>true</codeph>, fügen die Stile <codeph>paddingLeft</codeph> und <codeph>paddingRight</codeph> keinen Platz um den Text der Komponente herum ein.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Gibt den Modus des Eingabemethodeneditors (IME) an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt den Modus des Eingabemethodeneditors (IME) an. Mithilfe des Eingabemethodeneditors können chinesische, japanische und koreanische Schriftzeichen eingegeben werden. Flex stellt den festgelegten IME-Modus ein, wenn das Steuerelement den Fokus erhält und setzt es auf den vorherigen Wert zurück, wenn das Steuerelement den Fokus verliert.
          <p>Die flash.system.IMEConversionMode-Klasse definiert Konstanten für gültige Werte dieser Eigenschaft. Sie können auch <codeph>null</codeph> festlegen, um keinen IME festzulegen.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Der Beginn der Vererbungsstilkette für dieses UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Der Beginn der Vererbungsstilkette für dieses UITextField. Die <codeph>getStyle()</codeph>-Methode greift auf <codeph>inheritingStyles[styleName]</codeph> zu, um die vollständige, mit dem Entwurf verknüpfte Kette zu durchsuchen. Dieses Objekt wird durch die <codeph>initProtoChain()</codeph>-Methode eingerichtet. Unter normalen Umständen brauchen Sie auf diese Eigenschaft nie direkt zuzugreifen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:initialized:get"><apiName>initialized</apiName><shortdesc>
      Ein Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxHeight:get"><apiName>maxHeight</apiName><shortdesc conref="mx.core.UIComponent#maxHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxWidth:get"><apiName>maxWidth</apiName><shortdesc conref="mx.core.UIComponent#maxWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minHeight:get"><apiName>minHeight</apiName><shortdesc conref="mx.core.UIComponent#minHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minWidth:get"><apiName>minWidth</apiName><shortdesc conref="mx.core.UIComponent#minWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Die moduleFactory zum Erstellen von TextFields im korrekten SWF-Kontext.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Die moduleFactory zum Erstellen von TextFields im korrekten SWF-Kontext. Dies ist als Voraussetzung für das Funktionieren eingebetteter Schriftarten erforderlich.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Der Beginn der Kette nicht vererbter Stile für dieses UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Der Beginn der Kette nicht vererbter Stile für dieses UITextField. Die <codeph>getStyle()</codeph>-Methode greift auf <codeph>nonInheritingStyles[styleName]</codeph> zu, um die vollständige, mit dem Entwurf verknüpfte Kette zu durchsuchen. Dieses Objekt wird durch die <codeph>initProtoChain()</codeph>-Methode eingerichtet. Unter normalen Umständen brauchen Sie auf diese Eigenschaft nie direkt zuzugreifen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc>
      Im Unterschied zu textHeight gibt diese Methode einen Wert zurück, der nicht null ist, selbst wenn der Text leer ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Im Unterschied zu textHeight gibt diese Methode einen Wert zurück, der nicht null ist, selbst wenn der Text leer ist. In diesem Fall gibt die Methode den Wert zurück, den textHeight hätte, wenn der Text nicht leer wäre.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:owner:get"><apiName>owner</apiName><shortdesc>
      Standardmäßig auf den übergeordneten Container dieses Objekts eingestellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Standardmäßig auf den übergeordneten Container dieses Objekts eingestellt. Wenn jedoch dieses Objekt eine untergeordnete Komponente ist, die von ihrer übergeordneten Komponente als Popup angezeigt wird, wie etwa die Dropdownliste eines ComboBox-Steuerelements, ist der Eigentümer die Komponente, die dieses Objekt als Popup angezeigt hat. 
           <p>Diese Eigenschaft wird nicht von Flex, sondern von jeder Komponente selbst verwaltet. Wenn Sie also die <codeph>PopUpManger.createPopUp()</codeph>- oder die <codeph>PopUpManger.addPopUp()</codeph>-Methode verwenden, um eine untergeordnete Komponente als Popup anzuzeigen, sollten Sie die <codeph>owner</codeph>-Eigenschaft der untergeordneten Komponente auf die Komponente, die sie als Popup angezeigt hat, setzen.</p>
     
      <p>Standardmäßig ist dies der Wert der <codeph>parent</codeph>-Eigenschaft.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:parent:get"><apiName>parent</apiName><shortdesc>
      Der übergeordnete Container bzw. die übergeordnete Komponente dieser Komponente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Der übergeordnete Container bzw. die übergeordnete Komponente dieser Komponente.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentHeight:get"><apiName>percentHeight</apiName><shortdesc conref="mx.core.UIComponent#percentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentWidth:get"><apiName>percentWidth</apiName><shortdesc conref="mx.core.UIComponent#percentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      Auf „true“ eingestellt, nachdem die createChildren()-Methode die untergeordneten Objekte (falls vorhanden) der internen Komponente erstellt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Auf <codeph>true</codeph> eingestellt, nachdem die <codeph>createChildren()</codeph>-Methode die untergeordneten Objekte (falls vorhanden) der internen Komponente erstellt hat.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:styleName:get"><apiName>styleName</apiName><shortdesc conref="mx.core.UIComponent#styleName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UIComponent#styleName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:toolTip:get"><apiName>toolTip</apiName><shortdesc conref="mx.core.UIComponent#toolTip">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#toolTip">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc conref="mx.core.UIComponent#tweeningProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.core.UIComponent#tweeningProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Ein Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Ein Flag, das bestimmt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
  MovieClipAsset ist eine Unterklasse der flash.display.MovieClip-Klasse, welche Movie-Clip-Symbole darstellt, die Sie von einer mithilfe von Flash erzeugten SWF-Datei in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexMovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipAsset ist eine Unterklasse der flash.display.MovieClip-Klasse, welche Movie-Clip-Symbole darstellt, die Sie von einer mithilfe von Flash erzeugten SWF-Datei in eine Flex-Anwendung einbetten. Sie implementiert die IFlexDisplayObject-Schnittstelle, durch welche der MovieClip in einem Image-Steuerelement angezeigt oder als Containerhintergrund für eine Komponentenskin verwendet werden kann.
 
  <p>Der von Ihnen eingebettete MovieClip muss ein Movie-Clip-Symbol in einer SWF-Datei sein. Ein häufiger Grund für die Verwendung eines eingebetteten Movie-Clips besteht darin, dass Sie eine bildbasierte Anwendung in Flash erstellt haben und diese in einer Flex-Anwendung verwenden möchten. Der MXML-Compiler generiert automatisch eine Klasse, die die MovieClipAsset-Klasse zur Darstellung der eingebetteten Animation erweitert.</p>
 
  <p>Normalerweise brauchen Sie beim Schreiben einer Flex-Anwendung die MovieClipAsset-Klasse nicht direkt zu verwenden. Sie können eine Movie-Clip-Animation beispielsweise als Hintergrundbild einer Anwendung verwenden, indem Sie folgendes schreiben:</p>
 
  <pre>
  &lt;mx:Application backgroundImage="@Embed(source='Assets.swf', symbol='BackgroundAnimation')"/></pre>
 
  <p>oder</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol="BackgroundAnimation")
      }
  &lt;fx:Style/></pre>
 
  <p>ohne verstehen zu müssen, dass der MXML-Compiler für Sie eine Unterklasse der MovieClipAsset-Klasse erstellt hat. </p>
 
  <p>Es kann jedoch nützlich sein, dass Sie verstehen, was auf der ActionScript-Ebene abläuft. Zum Einbetten eines Movie-Clips in ActionScript deklarieren Sie eine Variable des Typs Klasse und versehen sie mit <codeph>[Embed]</codeph>-Metadaten. Beispiel:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="BackgroundAnimation")]
  private var backgroundAnimationClass:Class;</pre>
 
  <p>Der MXML-Compiler stellt fest, dass das BackgroundAnimation-Symbol in Assets.swf ein Movie-Clip ist. Er generiert zu seiner Darstellung automatisch eine Unterklasse der MovieClipAsset-Klasse und stellt Ihre Variable so ein, dass sie einen Verweis auf diese automatisch generierte Klasse darstellt. Sie können diesen Klassenverweis zum Erstellen von Instanzen von MovieClipAsset mithilfe des <codeph>new</codeph>-Operators verwenden. Und Sie können für diese Instanzen APIs der MovieClip-Klasse verwenden:</p>
 
  <pre>
  var backgroundAnimation:MovieClipAsset =
      MovieClipAsset(new backgroundAnimationClass());
  var n:int = backgroundAnimation.totalFrames;</pre>
 
  <p>Es wird jedoch selten erforderlich sein, dass Sie selbst MovieClipAsset-Instanzen erstellen, da bildbezogene Eigenschaften und Stile auf eine bilderzeugende Klasse eingestellt werden können und die Komponenten nach Bedarf Instanzen erstellen. Beispiel: Zum Einstellen des Anwendungshintergrunds auf diese Animation können Sie einfach Folgendes schreiben:</p>
 
  <pre>
  &lt;mx:Application backgroundImage="{backgroundAnimationClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MovieClipAsset:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MovieClipAsset:move"><apiName>move</apiName><shortdesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Die neue x-Position für dieses Objekt.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Die neue y-Position für dieses Objekt.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Verschiebt dieses Objekt an die angegebenen x- und y-Koordinaten.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:MovieClipAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Die neue Breite dieses Objekts.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Die neue Höhe dieses Objekts.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Legt die tatsächliche Größe dieses Objekts fest.
	 
	  <p>Diese Methode dient hauptsächlich zur Implementierung der <codeph>updateDisplayList()</codeph>-Methode. Dabei berechnen Sie die tatsächliche Größe des Objekts aus der explizit angegebenen Größe, der Größe im Verhältnis zum übergeordneten Element (Prozent) und der gemessenen Größe. Dann wenden Sie diese tatsächliche Größe durch Aufrufen von <codeph>setActualSize()</codeph> auf das Objekt an.</p>
	 
	  <p>In anderen Fällen sollten Sie <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> oder <codeph>percentHeight</codeph> festlegen, statt diese Methode aufzurufen.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:MovieClipAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Gibt ein EdgeMetrics-Objekt für den Rahmen zurück, das über vier Eigenschaften verfügt: „left“, „top“, „right“ und „bottom“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Gibt ein EdgeMetrics-Objekt für den Rahmen zurück, das über vier Eigenschaften verfügt: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> und <codeph>bottom</codeph>. Der Wert der Eigenschaften entspricht der Rahmenstärke an einer Seite des Rahmens in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Die gemessene Höhe dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Höhe dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Die gemessene Breite dieses Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Die gemessene Breite dieses Objekts.
	 
	  <p>Dies wird in der Regel für grafische Skins fest einprogrammiert, weil diese Zahl einfach die Anzahl von Pixeln in der Grafik ist. Bei Code-Skins kann dies auch fest programmiert sein, wenn Sie erwarten, dass das Objekt in einer bestimmten Größe gezeichnet wird. Wenn sich die Größe je nach Eigenschaften ändern kann, empfiehlt sich auch ein ILayoutManagerClient, damit eine <codeph>measure()</codeph>-Methode zu einem geeigneten Zeitpunkt aufgerufen werden kann und Sie die Möglichkeit erhalten, eine <codeph>measuredHeight</codeph> zu berechnen.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
  SoundAsset ist eine Unterklasse der flash.media.Sound-Klasse, die Sounds repräsentiert, die Sie in eine Flex-Anwendung einbetten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.media:Sound</apiBaseClassifier></apiClassifierDef><apiDesc>
  SoundAsset ist eine Unterklasse der flash.media.Sound-Klasse, die Sounds repräsentiert, die Sie in eine Flex-Anwendung einbetten.
 
  <p>Der eingebettete Sound kann das Format einer MP3-Datei haben. Sie können auch ein Soundsymbol einbetten, das sich in einer von Flash erzeugten SWF-Datei befindet. In beiden Fällen generiert der MXML-Compiler automatisch eine die die SoundAsset-Klasse erweiternde Klasse zur Repräsentation der eingebetteten Sounddaten.</p>
 
  <p>Sie brauchen beim Schreiben einer Flex-Anwendung die SoundAsset-Klasse normalerweise nicht direkt zu verwenden. Beispiel: Sie können eine MP3-Datei einbetten und in einem SoundEffect verwenden, indem Sie einfach Folgendes schreiben:</p>
 
  <pre>
  &lt;mx:SoundEffect id="beep" source="@Embed(source='Beep.mp3')"/></pre>
 
  <p>Sie brauchen die Tatsache, dass der MXML-Compiler für Sie eine Unterklasse der SoundAsset-Klasse erstellt hat, nicht weiter zur verstehen.</p>
 
  <p>Es kann jedoch nützlich sein, dass Sie verstehen, was auf der ActionScript-Ebene abläuft. Zum Einbetten einer Bitmap in ActionScript deklarieren Sie eine Variable des Class-Typs und versehen sie mit <codeph>[Embed]</codeph>-Metadaten. Eine MP3-Datei betten Sie beispielsweise wie folgt ein:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Beep.mp3")]
  private var beepClass:Class;</pre>
 
  <p>Der MXML-Compiler erkennt die MP3-Erweiterung, transkodiert die MP3-Daten in das vom Player verwendete Soundformat, generiert automatisch eine Unterklasse der SoundAsset-Klasse und stellt Ihre Variable so ein, dass sie einen Verweis auf diese automatisch generierte Klasse darstellt. Sie können diesen Klassenverweis zum Erstellen von Instanzen der SoundAsset-Klasse mit dem <codeph>new</codeph>-Operator verwenden, und Sie können in Verbindung mit diesen Instanzen die APIs der Sound-Klasse verwenden:</p>
 
  <pre>
    var beepSound:SoundAsset = SoundAsset(new beepClass());
    beepSound.play();</pre>
 
  <p>Es ist jedoch selten erforderlich, dass Sie SoundAsset-Instanzen selbst erstellen, da soundbezogene Eigenschaften und Stile einfach auf eine sounderzeugende Klasse eingestellt werden können und die Komponenten Sound-Instanzen nach Bedarf erstellen. Beispiel: Zur Wiedergabe dieses Sounds mit einem SoundEffect können Sie die <codeph>source</codeph>-Eigenschaft des SoundEffect auf <codeph>beepClass</codeph> einstellen. In MXML gehen Sie dazu wie folgt vor:</p>
 
  <pre>
  &lt;mx:SoundEffect id="beepEffect" source="{beepClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SoundAsset:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ApplicationDomainTarget"><apiName>ApplicationDomainTarget</apiName><shortdesc>
  Die ApplicationDomainTarget-Klasse definiert die möglichen Werte für die applicationDomainTarget-Eigenschaft der RSLData-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ApplicationDomainTarget-Klasse definiert die möglichen Werte für die <codeph>applicationDomainTarget</codeph>-Eigenschaft der <codeph>RSLData</codeph>-Klasse. Jedes Anwendungsdomänenziel gibt eine relative Anwendungsdomäne an, die während der Laufzeit aufgelöst wird.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#RSLData"><linktext>mx.core.RSLData</linktext></link></related-links><apiValue id="mx.core:ApplicationDomainTarget:CURRENT"><apiName>CURRENT</apiName><shortdesc>
      Die Anwendungsdomäne der aktuellen Module-Factory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>current</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Die Anwendungsdomäne der aktuellen Module-Factory.
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
      Standardmäßig wird eine RSL auf die höchstmögliche Ebene in der übergeordneten Module-Factory-Kette geladen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Standardmäßig wird eine RSL auf die höchstmögliche Ebene in der übergeordneten Module-Factory-Kette geladen. Damit eine RSL in eine übergeordnete Module-Factory geladen werden kann, muss diese Module-Factory mit dieser in den Compiler-Optionen festgelegten RSL kompiliert worden sein. Wenn keine übergeordneten Module-Factorys mit dieser RSL kompiliert wurden, wird die RSL in die Anwendungsdomäne der Module-Factory geladen, die die RSL lädt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:PARENT"><apiName>PARENT</apiName><shortdesc>
      Die Anwendungsdomäne der übergeordneten Module-Factory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Die Anwendungsdomäne der übergeordneten Module-Factory.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:TOP_LEVEL"><apiName>TOP_LEVEL</apiName><shortdesc>
      Die Anwendungsdomäne der Module-Factory auf oberster Ebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top-level</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Die Anwendungsdomäne der Module-Factory auf oberster Ebene.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModuleFactory"><apiName>IFlexModuleFactory</apiName><shortdesc>
  Die IFlexModuleFactory-Schnittstelle repräsentiert die erwartete Vereinbarung für Bootstrapping von Flex-Anwendungen und dynamisch geladene Module.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IFlexModuleFactory-Schnittstelle repräsentiert die erwartete Vereinbarung für Bootstrapping von Flex-Anwendungen und dynamisch geladene Module.
   <p>Das Aufrufen der <codeph>info()</codeph>-Methode ist zulässig, unmittelbar nachdem das <codeph>complete</codeph>-Ereignis ausgelöst wird.</p>
   <p>Ein ordnungsgemäß funktionierendes Modul löst ein <codeph>ready</codeph>-Ereignis aus, wenn die <codeph>create()</codeph>-Methode unbedenklich aufgerufen werden kann.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      Fügt der preloadedRSLs-Liste eine RSL hinzu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>Die loaderInfo der geladenen RSL.
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>Die Konfigurationsinformationen der RSL. Ein Vektor der RSLData. Das erste Element im Array ist die primäre RSL. Die übrigen Elemente sind Failover-RSLs.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt der preloadedRSLs-Liste eine RSL hinzu. Diese Methode wird von untergeordneten Module-Factorys aufgerufen, wenn sie eine RSL in die Anwendungsdomäne der jeweiligen Module-Factory laden.
           <p>Sie können diese Methode nicht direkt aufrufen. Diese Methode wird von untergeordneten Module-Factorys aufgerufen, wenn sie eine RSL in die Anwendungsdomäne der jeweiligen Module-Factory laden.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Ruft die Security.allowDomain()-Methode für die mit dieser IFlexModuleFactory verknüpfte SWF-Datei auf sowie alle SWF-Dateien, die mit von dieser IFlexModuleFactory vorausgeladenen RSLs verknüpft sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>Ein oder mehrere Strings bzw. URLRequest-Objekte zur Bezeichnung der Domänen, über die Sie den Zugriff gewähren möchten. Sie können die Sonderdomäne „*“ angeben, um Zugriff von allen Domänen aus zuzulassen. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die <codeph>Security.allowDomain()</codeph>-Methode für die mit dieser IFlexModuleFactory verknüpfte SWF-Datei auf sowie alle SWF-Dateien, die mit von dieser IFlexModuleFactory vorausgeladenen RSLs verknüpft sind. Die nach diesem Aufruf geladenen RSLs lassen standardmäßig die gleichen Domänen wie in vorherigen Aufrufen dieser Methode zu. Dieses Verhalten wird von der <codeph>allowDomainsInNewRSLs</codeph>-Eigenschaft gesteuert.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Ruft die Security.allowInsecureDomain()-Methode für die mit dieser IFlexModuleFactory verknüpfte SWF-Datei auf sowie alle SWF-Dateien, die mit von dieser IFlexModuleFactory vorausgeladenen RSLs verknüpft sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>Ein oder mehrere Strings bzw. URLRequest-Objekte zur Bezeichnung der Domänen, über die Sie den Zugriff gewähren möchten. Sie können die Sonderdomäne „*“ angeben, um Zugriff von allen Domänen aus zuzulassen. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die <codeph>Security.allowInsecureDomain()</codeph>-Methode für die mit dieser IFlexModuleFactory verknüpfte SWF-Datei auf sowie alle SWF-Dateien, die mit von dieser IFlexModuleFactory vorausgeladenen RSLs verknüpft sind. Die nach diesem Aufruf geladenen RSLs lassen standardmäßig die gleichen Domänen wie in vorherigen Aufrufen dieser Methode zu. Dieses Verhalten wird von der <codeph>allowInsecureDomainsInNewRSLs</codeph>-Eigenschaft gesteuert.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowInsecureDomain()"><linktext>flash.system.Security.allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc>
      Eine Art des Methodenaufrufs im Kontext dieser IFlexModuleFactory
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Von der Funktion zurückgegebenes Ergebnis, falls vorhanden.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>Die aufzurufende Funktion oder Methode..
      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>Der <codeph>this</codeph>-Zeiger für die Funktion.
      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>Die Argumente für die Funktion.
      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Wenn <codeph>true</codeph>, gibt die Funktion einen Wert zurück.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eine Art des Methodenaufrufs im Kontext dieser IFlexModuleFactory
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="Function.apply.xml"><linktext>Function.apply</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:create"><apiName>create</apiName><shortdesc>
      Eine Factory-Methode, die eine Instanz einer Definition anfordert, die dem Modul bekannt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Instanz des Moduls oder <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>parameters</apiItemName><apiType value="restParam"/><apiDesc>Eine optionale Liste von Argumenten. Sie können eine beliebige Anzahl von Argumenten übergeben, die in dem Array <codeph>parameters</codeph> gespeichert wird.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Eine Factory-Methode, die eine Instanz einer Definition anfordert, die dem Modul bekannt ist.
           <p>Sie können eine optionale Gruppe von Parametern bereitstellen, damit Building Factories abhängig von der Eingabe andere Elemente erstellen können. Bei Übergabe von <codeph>null</codeph> wird die Standarddefinition erstellt, falls möglich.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:getImplementation"><apiName>getImplementation</apiName><shortdesc>
      Ruft die Implementierung für eine Schnittstelle ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Implementierung für die Schnittstelle.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>Die Schnittstelle.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die Implementierung für eine Schnittstelle ab. Ähnlich wie die <codeph>Singleton.getInstance()</codeph>-Methode, aber pro IFlexModuleFactory.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:info"><apiName>info</apiName><shortdesc>
      Gibt einen Block mit Schlüssel/Wert-Paaren zurück, die dem Modul bekannte statische Daten enthalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Objekt, das Schlüssel/Wert-Paare enthält. Normalerweise enthält dieses Objekt Informationen über das oder die von dieser Factory erstellte(n) Modul(e), beispielsweise:
     
      <pre>
      return {"description": "This module returns 42."};
      </pre>
      
      Weitere allgemeine Werte im zurückgegebenen Objekt sind beispielsweise folgende:
      <ul>
       <li><codeph>fonts</codeph>: Eine Liste der eingebetteten Schriften.</li>
       <li><codeph>rsls</codeph>: Eine Liste von gemeinsam genutzten Laufzeitbibliotheken.</li>
       <li><codeph>mixins</codeph>: Eine Liste der beim Start initialisierten Klassen.</li>
      </ul>
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Gibt einen Block mit Schlüssel/Wert-Paaren zurück, die dem Modul bekannte statische Daten enthalten. Diese Methode ist immer erfolgreich, gibt jedoch möglicherweise ein leeres Objekt zurück.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:registerImplementation"><apiName>registerImplementation</apiName><shortdesc>
      Registriert eine Implementierung für eine Schnittstelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>Die Schnittstelle.
           </apiDesc></apiParam><apiParam><apiItemName>impl</apiItemName><apiType value="Object"/><apiDesc>Die Implementierung.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Registriert eine Implementierung für eine Schnittstelle. Ähnlich wie <codeph>Singleton.registerClass()</codeph>-Methode, aber pro IFlexModuleFactory. Verwendet außerdem eine Instanz und nicht eine Klasse.
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      Steuert, ob die für Aufrufe an AllowDomain() zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Steuert, ob die für Aufrufe an <codeph>allowDomain()</codeph> zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden. Zusätzliche RSLs können durch untergeordnete Anwendungen oder Module in diese Modul-Factory geladen werden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      Steuert, ob die für Aufrufe an allowInsecureDomain() zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Steuert, ob die für Aufrufe an <codeph>allowInsecureDomain()</codeph> zulässigen Domänen auch von den nach dem Aufruf geladenen RSLs zugelassen werden. Zusätzliche RSLs können durch untergeordnete Anwendungen oder Module zu dieser Modul-Factory hinzugefügt werden.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      Die RSLs, die von diesem SystemManager oder dieser FlexModuleFactory vor dem Start der Anwendung geladen werden. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Die RSLs, die von diesem SystemManager oder dieser FlexModuleFactory vor dem Start der Anwendung geladen werden. Dieses Wörterbuch kann auch RSLs enthalten, die von anderen Modulen oder Unteranwendungen in die Anwendungsdomäne dieser Module-Factory geladen wurden. Wenn ein neuer Wörterbucheintrag von einer untergeordneten Module-Factory hinzugefügt wird, löst die zum Wörterbuch gehörende Module-Factory ein <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph>-Ereignis aus. Informationen zu preloadedRSLs werden in einem Wörterbuch gespeichert. Der Schlüssel ist die LoaderInfo der RSL. Der Wert ist der Vektor von RSLData. Das erste Element ist die primäre RSL und die übrigen Elemente sind Failover-RSLs.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexGlobals"><apiName>FlexGlobals</apiName><shortdesc>
  Eine Klasse mit für alle Anwendungen innerhalb derselben ApplicationDomain global gültigen Variablen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Eine Klasse mit für alle Anwendungen innerhalb derselben ApplicationDomain global gültigen Variablen.
 
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexGlobals:topLevelApplication"><apiName>topLevelApplication</apiName><shortdesc>
      Die erste Anwendung, die in einer ApplicationDomain ausgeführt wird, ist die Anwendung auf der obersten Ebene.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/></apiValueDef><apiDesc>
      Die erste Anwendung, die in einer ApplicationDomain ausgeführt wird, ist die Anwendung auf der obersten Ebene. Diese Eigenschaft ist auf einen Verweis auf die Anwendung der obersten Ebene im Konstruktor der Anwendung der obersten Ebene eingestellt. Jede ApplicationDomain hat ihre eigene <codeph>topLevelApplication</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToggleButton"><apiName>IToggleButton</apiName><shortdesc>
  Die IToggleButton-Schnittstelle ist eine Markierungsschnittstelle, die anzeigt, dass eine Komponente als eine umschaltbare Schaltfläche fungiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Die IToggleButton-Schnittstelle ist eine Markierungsschnittstelle, die anzeigt, dass eine Komponente als eine umschaltbare Schaltfläche fungiert. Sie wird von der standardmäßigen Schaltflächenlogik des Frameworks primär als Filter verwendet. Diese Schnittstelle wird <b>nur</b> von alten MX-Komponenten verwendet.
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
  ComponentDescriptor ist die Basisklasse der UIComponentDescriptor-Klasse, die die von Ihnen in einem MXML-Tag für eine Instanz einer visuellen Komponente angegebenen Informationen zusammenfasst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComponentDescriptor ist die Basisklasse der UIComponentDescriptor-Klasse, die die von Ihnen in einem MXML-Tag für eine Instanz einer visuellen Komponente angegebenen Informationen zusammenfasst. Komponenten, die keine visuellen Komponenten sind, werden in Flex anders behandelt und haben keine Deskriptoren. In einer zukünftigen Version wird jedoch möglicherweise die ComponentDescriptor-Basisklasse auch für sie verwendet.
 
  <p>Die meisten Tags in einer MXML-Datei beschreiben eine aus UIComponent-Objekten bestehende Baumstruktur. Beispiel: Das <codeph>&lt;mx:Application></codeph>-Tag repräsentiert ein UIComponent-Objekt, und seine untergeordneten Container und Steuerelemente sind alle UIComponent-Objekte.</p>
 
  <p>Der MXML-Compiler kompiliert jedes dieser MXML-Tags in einer UIComponentDescriptor-Instanz. Genauer gesagt, generiert der MXML-Compiler automatisch eine ActionScript-Datenstruktur, welche eine Baumstruktur bestehend aus UIComponentDescriptor-Objekten ist.</p>
 
  <p>Während der Laufzeit verwendet die <codeph>createComponentsFromDescriptors()</codeph>-Methode der Container-Klasse die Informationen in den UIComponentDescriptor-Objekten im <codeph>childDescriptors</codeph>-Array des Containers, um die tatsächlichen UIComponent-Objekte, die untergeordneten Elemente des Containers, sowie untergeordnete Elemente tieferer Ebenen zu erstellen. Abhängig vom Wert der <codeph>creationPolicy</codeph>-Eigenschaft des Containers können die untergeordneten Elemente beim Anwendungsstart erstellt werden, wenn ein Teil der Komponente in Kürze sichtbar wird oder wenn der Anwendungsentwickler die <codeph>createComponentsFromDescriptors()</codeph>-Methode manuell aufruft.</p>
 
  <p>Sie erstellen ComponentDescriptor- oder UIComponentDescriptor-Instanzen normalerweise nicht selbst. Sie können auf diejenigen zugreifen, die der MXML-Compiler automatisch mithilfe des <codeph>childDescriptors</codeph>-Arrays der Container-Klasse generiert.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="" invalidHref="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:ComponentDescriptor:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>Ein Objekt, das Name/Wert-Paare für die Eigenschaften des ComponentDescriptor-Objekts enthält, wie etwa <codeph>type</codeph>, <codeph>id</codeph>, <codeph>propertiesFactory</codeph> und <codeph>events</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ComponentDescriptor:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Macht die properties-Eigenschaft im Cache ungültig.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Macht die <codeph>properties</codeph>-Eigenschaft im Cache ungültig. Wenn die <codeph>properties</codeph>-Eigenschaft das nächste Mal gelesen wird, werden die Eigenschaften von der Funktion neu generiert, die durch den Wert der <codeph>propertiesFactory</codeph>-Eigenschaft angegeben wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ComponentDescriptor:toString"><apiName>toString</apiName><shortdesc>
      Gibt den String „ComponentDescriptor_“ und den Wert der ID-Eigenschaft an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt den String „ComponentDescriptor_“ und den Wert der <codeph>id</codeph>-Eigenschaft an.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den String „ComponentDescriptor_“ und den Wert der <codeph>id</codeph>-Eigenschaft an.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ComponentDescriptor:document"><apiName>document</apiName><shortdesc>
      Ein Verweis auf das Dokumentenobjekt, in dem die Komponente erstellt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Verweis auf das Dokumentenobjekt, in dem die Komponente erstellt werden soll.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUIComponent/document"><linktext>mx.core.IUIComponent.document</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:events"><apiName>events</apiName><shortdesc>
      Ein Objekt, das Name/Wert-Paare für die Ereignisprozeduren der Komponente entsprechend der Angaben in MXML enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Objekt, das Name/Wert-Paare für die Ereignisprozeduren der Komponente entsprechend der Angaben in MXML enthält.
     
      <p>Beispiel:</p>
     
      <pre>
      &lt;mx:DataGrid id="dg" initialize="fetchData(); initDataGrid();"  change="changeHandler(event);"/>
      </pre>
     
      <p>In diesem Beispiel entspricht die <codeph>events</codeph>-Eigenschaft des Deskriptors dem Objekt</p>
     
      <pre>
      { initialize: "__dg_initialize", change: "__dg_change" }
      </pre>
     
      <p>Die <codeph>event</codeph>-Eigenschaft ist <codeph>null</codeph>, wenn keine MXML-Ereignisprozeduren für die Komponente angegeben wurden.</p>
     
      <p>Die Strings <codeph>"__dg_initialize"</codeph> und <codeph>"__dg_change"</codeph> sind die Namen der Ereignisprozedurmethoden, die der MXML-Compiler automatisch generiert. Der Hauptteil dieser Methoden enthält die ActionScript-Anweisungen, die Sie als Werte der Ereignisattribute angegeben haben. Beispiel für die automatisch generierte <codeph>initialize</codeph>-Prozedur:</p>
     
      <pre>
      public function __dg_initialize(event:mx.events.FlexEvent):void
      {
          fetchData();
          initDataGrid();
      }
      </pre>
     
      <p>Automatisch generierte Ereignisprozeduren werden nicht immer durch Namen angegeben. Dies kann sich jedoch in zukünftigen Flex-Versionen ändern.</p>
      
      <p>Diese Eigenschaft wird von der Container-Methode <codeph>createComponentsFromDescriptors()</codeph> verwendet, um automatisch generierte Ereignisprozeduren mit der <codeph>addEventListener()</codeph>-Methode zu registrieren.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:id"><apiName>id</apiName><shortdesc>
      Der Bezeichner der Komponente, wie in MXML angegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Der Bezeichner der Komponente, wie in MXML angegeben. 
     
      <p>Beispiel:</p>
     
      <pre>
      &lt;mx:TextInput id="firstName" text="Enter your first name here"/>
      </pre>
     
      <p>In diesem Beispiel entspricht die <codeph>id</codeph>-Eigenschaft des Deskriptors dem String <codeph>"firstName"</codeph>.</p>
     
      <p>Die <codeph>id</codeph>-Eigenschaft ist <codeph>null</codeph>, wenn für die Komponente keine MXML-ID angegeben wurde.</p>
     
      <p>Der Wert der <codeph>id</codeph>-Eigenschaft wird der Name einer öffentlichen Variable im MXML-Dokumentenobjekt, das vom MXML-Compiler automatisch generiert wird. Der Wert dieser Variablen ist ein Verweis auf das UIComponent-Objekt, das von diesem Deskriptor erstellt wird. Aus diesem Grund können Sie beispielsweise an einer beliebigen Stelle eines Dokuments, das eine TextInput-Instanz enthält, mit <codeph>firstName.text</codeph> auf die <codeph>text</codeph>-Eigenschaft dieses TextInput-Steuerelements verweisen.</p>
     
      <p>Wenn eine <codeph>id</codeph> angegeben wird, die kein leerer String ist, wird sie auch zum <codeph>name</codeph> des DisplayObject-Objekts. Wenn keine <codeph>id</codeph> angegeben wird oder der String leer ist, wird der <codeph>name</codeph> des DisplayObject-Objekts weiterhin automatisch generiert (beispielsweise <codeph>"Button3"</codeph>, wie von der <codeph>NameUtil.createUniqueName()</codeph>-Methode zurückgegeben). Der <codeph>name</codeph> dient zum Generieren des Strings, der von der <codeph>toString()</codeph>-Methode zurückgegeben wird. Außerdem wird er verwendet, um von einem übergeordneten Element aus mit <codeph>getChildByName()</codeph> eine bestimmte Komponente zu suchen.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:propertiesFactory"><apiName>propertiesFactory</apiName><shortdesc>
      Eine Funktion, die ein Objekt zurückgibt, das Name/Wert-Paare für die Eigenschaften der Komponente entsprechend der Angaben in MXML enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Eine Funktion, die ein Objekt zurückgibt, das Name/Wert-Paare für die Eigenschaften der Komponente entsprechend der Angaben in MXML enthält.
     
      <p>Beispiel:</p>
      
      <pre>
      &lt;mx:TextInput width="150" text="Hello">
      </pre>
     
      <p>In diesem Beispiel entspricht die <codeph>propertiesFactory</codeph>-Eigenschaft des Deskriptors dieser Funktion:</p>
     
      <pre>
      function():Object { return { width: 150, text: "Hello" }; }
      </pre>
     
      <p>Die <codeph>propertiesFactory</codeph>-Eigenschaft ist <codeph>null</codeph>, wenn für die Komponente keine MXML-Eigenschaften angegeben wurden. In diesem Fall verwendet die Komponente Standard-Eigenschaftswerte.</p>
     
      <p>Statt eines tatsächlichen Objekts wird die Funktion <codeph>propertyFactory</codeph> verwendet, um ein Objekt zurückzugeben, damit die Objekte des ComponentDescriptor-Baums einzeln „aufgeklappt“ werden können. Wenn alle Deskriptoren im Deskriptorbaum des Dokuments beim Start erstellt werden, nimmt der Start mehr Zeit in Anspruch.</p>
     
      <p>Die <codeph>properties</codeph>-Eigenschaft gibt ein Objekt im Cache zurück, dass von dieser Factory-Funktion erzeugt wurde.</p>
      
      <p>Hinweis: Ereignisprozeduren wie <codeph>click="doSomething();"</codeph> kommen im <codeph>events</codeph>-Objekt und nicht im <codeph>properties</codeph>-Objekt vor.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/properties"><linktext>properties</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:type"><apiName>type</apiName><shortdesc>
      Die Klasse der Komponente, entsprechend den Angaben in MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Die Klasse der Komponente, entsprechend den Angaben in MXML.
     
      <p>Beispiel:</p>
     
      <pre>
      &lt;mx:TextInput/>
      </pre>
     
      <p>In diesem Beispiel entspricht die <codeph>type</codeph>-Eigenschaft des Deskriptors der Klasse mx.controls.TextInput.</p>
     
      <p>Die Eigenschaft ist für vom MXML-Compiler erstellte ComponentDescriptor-Objekte nie <codeph>null</codeph>, da jedes MXML-Tag einen Tag-Namen wie mx:TextInput aufweist.</p>
     
      <p>Die Zuordnung des MXML-Tags zur entsprechenden Klasse wird durch den XML-Namespace und ggf. durch dessen Manifestdatei bestimmt. Der durch mx: prefix dargestellte Flex-Standardnamespace <codeph>http://www.adobe.com/2006/mxml</codeph> ist in der Datei flex-config.xml mit der Manifestdatei mxml-manifest.xml verknüpft. Das Tag</p>
     
      <pre>
      &lt;component id="TextInput" class="mx.controls.TextInput"/>
      </pre>
     
      <p>in dieser Datei ordnet den Tag-Namen mx:TextInput der Klasse mx.controls.TextInput zu. Beachten Sie, dass bei Verwendung einer Manifestdatei Komponenten in einem einzigen XML-Namespace Klassen in mehreren ActionScript-Paketen zugeordnet werden können.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:properties:get"><apiName>properties</apiName><shortdesc>
      Ein Objekt, das Name/Wert-Paare für die Eigenschaften der Komponente entsprechend der Angaben in MXML enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ein Objekt, das Name/Wert-Paare für die Eigenschaften der Komponente entsprechend der Angaben in MXML enthält.
     
      <p>Beispiel:</p>
     
      <pre>
      &lt;mx:TextInput width="150" text="Hello"/>
      </pre>
     
      <p>In diesem Beispiel entspricht die <codeph>properties</codeph>-Eigenschaft des Deskriptors dem Objekt</p>
     
      <pre>
      { width: 150, text: "Hello" }
      </pre>
     
      <p>Die <codeph>properties</codeph>-Eigenschaft ist <codeph>null</codeph>, wenn für die Komponente keine MXML-Eigenschaften angegeben wurden. In diesem Fall verwendet die Komponente Standard-Eigenschaftswerte.</p>
     
      <p> Dieses Objekt wird erzeugt, indem die von der <codeph>propertiesFactory</codeph>-Eigenschaft angegebene Funktion aufgerufen wird und dann für zukünftige Zugriffe im Cache gespeichert wird. Wenn jedoch ein Repeater von demselben Deskriptor mehrere Instanzen einer Komponente erzeugt, sollte für jede Instanz eine neue Kopie des <codeph>properties</codeph>-Objekts erstellt werden, damit Eigenschaftswerte, die Arrays oder Objektverweise sind, nicht gemeinsam verwendet werden. Dazu ruft der Repeater die <codeph>invalidateProperties()</codeph>-Methode des Deskriptors auf.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/propertiesFactory"><linktext>propertiesFactory</linktext></link><link href="mx.core.xml#ComponentDescriptor/invalidateProperties()"><linktext>invalidateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>