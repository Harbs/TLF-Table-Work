<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:IButton"><apiName>IButton</apiName><shortdesc>
  L’interface IButton est une interface de marqueur qui indique qu’un composant agit comme un bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IButton est une interface de marqueur qui indique qu’un composant agit comme un bouton.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IButton:mx.core:IButton:callLater"><apiName>callLater</apiName><shortdesc conref="mx.core.UIComponent#callLater()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>Référence à une méthode à exécuter ultérieurement.
           </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau d’objets qui représentent les arguments à transmettre à la méthode.
           
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#callLater()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IButton:mx.core:IButton:emphasized:get"><apiName>emphasized</apiName><shortdesc conref="mx.controls.Button#emphasized">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Button#emphasized">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFLoader"><apiName>ISWFLoader</apiName><shortdesc>
  L’interface ISWFLoader définit une API ayant une méthode et des propriétés particulières requise lors du chargement d’applications compatibles ou non approuvées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeProvider</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface ISWFLoader définit une API ayant une méthode et des propriétés particulières requise lors du chargement d’applications compatibles ou non approuvées.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFLoader:mx.core:ISWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet <codeph>Rectangle</codeph> incluant la portion visible de cet objet. Le rectangle utilise les coordonnées globales.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si le rectangle visible est calculé uniquement en fonction des objets d’affichage de cette application ou également de toutes les applications parent. L’inclusion d’autres applications parent peut réduire la zone visible renvoyée. Si la valeur est <codeph>true</codeph>, toutes les applications sont utilisées pour rechercher la zone visible. Sinon, seuls les objets d’affichage de cette application sont utilisés.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFLoader:mx.core:ISWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      Indicateur précisant si le contenu est chargé afin qu’il puisse interagir avec des applications générées avec une version différente de Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si le contenu est chargé afin qu’il puisse interagir avec des applications générées avec une version différente de Flex. La compatibilité avec d’autres applications Flex s’effectue en chargeant l’application dans une classe ApplicationDomain sœur (ou homologue). Cet indicateur est ignoré si la sous-application est chargée dans un autre domaine SecurityDomain que l’application principale. Si la valeur est <codeph>true</codeph>, le contenu est chargé dans une classe ApplicationDomain sœur. Si la valeur est <codeph>false</codeph>, le contenu est chargé dans une classe ApplicationDomain enfant.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
  La classe UITextFormat représente des informations de formatage de caractères pour la classe UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextFormat</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe UITextFormat représente des informations de formatage de caractères pour la classe UITextField. La classe UITextField définit la composante utilisée par de nombreux composants Flex composite pour afficher du texte.
 
  <p>La classe UITextFormat étend la classe flash.text.TextFormat pour ajouter les méthodes de mesure de texte <codeph>measureText()</codeph> et <codeph>measureHTMLText()</codeph> et pour ajouter des propriétés permettant de contrôler la fonction avancée d’anti-aliasing des polices.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UITextField"><linktext>mx.core.UITextField</linktext></link></related-links><apiConstructor id="mx.core:UITextFormat:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>Objet SystemManager. La propriété SystemManager conserve la liste des polices incorporées. En règle générale, elle est obtenue à partir de la propriété <codeph>systemManager</codeph> de UIComponent.
     
      </apiDesc></apiParam><apiParam><apiItemName>font</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Chaîne spécifiant le nom d’une police, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nombre spécifiant une taille de police en pixels, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Entier non signé indiquant la couleur RVB du texte, par exemple 0xFF0000 pour le rouge, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Indicateur à valeur booléenne spécifiant si le texte est en gras, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Indicateur à valeur booléenne spécifiant si le texte est en italique, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Indicateur à valeur booléenne spécifiant si le texte est souligné, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Chaîne indiquant l’URL à laquelle le texte est lié, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Chaîne spécifiant la fenêtre cible pour l’affichage de l’URL de l’hyperlien. Si la fenêtre cible correspond à <codeph>null</codeph> ou à une chaîne vide, la page liée s’affiche dans la même fenêtre de navigateur. Si le paramètre <codeph>urlString</codeph> correspond à <codeph>null</codeph>ou à une chaîne vide, cette propriété n’a aucun effet. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Chaîne spécifiant l’alignement du paragraphe en tant que valeur flash.text.TextFormatAlign, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nombre spécifiant la marge gauche du paragraphe en pixels, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nombre spécifiant la marge droite du paragraphe en pixels, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nombre spécifiant le retrait en pixels à appliquer de la marge gauche au premier caractère du paragraphe, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Nombre spécifiant l’espace vertical supplémentaire entre les lignes, ou <codeph>null</codeph> pour indiquer que cette classe UITextFormat ne spécifie pas cette propriété. Ce paramètre est facultatif, avec la valeur par défaut <codeph>null</codeph>.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.TextFormatAlign.xml"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:UITextFormat:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      Renvoie des informations de mesure pour le texte HTML spécifié pouvant contenir des balises HTML (telles que &amp;lt;font&amp;gt; et &amp;lt;b&amp;gt;), en supposant qu’il est affiché dans un champ UITextField à une seule ligne et en utilisant cet objet UITextFormat pour définir le format de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextLineMetrics contenant les mesures du texte.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant le texte HTML à mesurer.
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indicateur à valeur booléenne spécifiant l’arrondi ou non de la largeur et de la hauteur mesurées au nombre entier le plus proche. L’arrondi est approprié dans la plupart des cas. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie des informations de mesure pour le texte HTML spécifié pouvant contenir des balises HTML (telles que <codeph>&lt;font></codeph> et <codeph>&lt;b></codeph>), en supposant qu’il est affiché dans un champ UITextField à une seule ligne et en utilisant cet objet UITextFormat pour définir le format de texte.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextFormat:measureText"><apiName>measureText</apiName><shortdesc>
      Renvoie des informations de mesure pour le texte spécifié en supposant qu’il est affiché dans un composant UITextField à une seule ligne et en utilisant cet objet UITextFormat pour définir le format de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextLineMetrics contenant les mesures du texte.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant le texte à mesurer.
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indicateur à valeur booléenne spécifiant l’arrondi ou non de la largeur et de la hauteur mesurées au nombre entier le plus proche. L’arrondi est approprié dans la plupart des cas. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie des informations de mesure pour le texte spécifié en supposant qu’il est affiché dans un composant UITextField à une seule ligne et en utilisant cet objet UITextFormat pour définir le format de texte. 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.core:UITextFormat:antiAliasType"><apiName>antiAliasType</apiName><shortdesc>
      Définit le paramètre d’anti-aliasing pour la classe UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"advanced"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit le paramètre d’anti-aliasing pour la classe UITextField. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
      
      <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé pour la police incorporée. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
      
      <p>Cette propriété n’a aucun effet pour les polices système.</p>
      
      <p>Cette propriété s’applique à l’intégralité du texte d’un objet UITextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:direction"><apiName>direction</apiName><shortdesc>
      Direction du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Direction du texte.
     
      <p>Les valeurs autorisées sont <codeph>"ltr"</codeph> pour les textes rédigés de gauche à droite, comme dans les scripts de style latin et <codeph>"rtl"</codeph> pour les textes rédigés de droite à gauche, comme l’arabe ou l’hébreu. </p>
     
      <p>FTE et TLF utilisent cette valeur dans leur algorithme de mise en forme de texte bidirectionnel, lequel mappe l’ordre des caractères Unicode sur ordre des glyphes. </p>
     
      <p>Remarque : ce style s’applique uniquement lorsque cet objet UITextFormat est utilisé avec une classe UIFTETextField plutôt qu’avec une classe UITextField. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:gridFitType"><apiName>gridFitType</apiName><shortdesc>
      Définit le paramètre d’adaptation à la grille pour la classe UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"pixel"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit le paramètre d’adaptation à la grille pour la classe UITextField. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
      
      <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
      
      <p>Cette propriété n’a aucun effet pour les polices système.</p>
     
      <p>Cette propriété s’applique à l’intégralité du texte d’un objet UITextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:locale"><apiName>locale</apiName><shortdesc>
      Paramètres régionaux du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Paramètres régionaux du texte.
     
      <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
     
      <p>Remarque : ce style s’applique uniquement lorsque ce UITextFormat est utilisé avec une classe UIFTETextField plutôt qu’avec une classe UITextField. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:sharpness"><apiName>sharpness</apiName><shortdesc>
      Définit le paramètre de netteté pour la classe UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit le paramètre de netteté pour la classe UITextField. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
      
      <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
      
      <p>Cette propriété n’a aucun effet pour les polices système.</p>
     
      <p>Cette propriété s’applique à l’intégralité du texte d’un objet UITextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:thickness"><apiName>thickness</apiName><shortdesc>
      Définit le paramètre d’épaisseur pour la classe UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit le paramètre d’épaisseur pour la classe UITextField. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
      
      <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
      
      <p>Cette propriété n’a aucun effet pour les polices système.</p>
     
      <p>Cette propriété s’applique à l’intégralité du texte d’un objet UITextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:useFTE"><apiName>useFTE</apiName><shortdesc>
      Détermine la manière dont les méthodes measureText() et measureHTMLText() effectuent les mesures de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine la manière dont les méthodes <codeph>measureText()</codeph> et <codeph>measureHTMLText()</codeph> effectuent les mesures de texte.
     
      <p>Si la valeur est <codeph>true</codeph>, elles utilisent une occurrence hors écran de la classe FTETextField dans Text Layout Framework. Si la valeur est <codeph>false</codeph>, elles utilisent une occurrence hors écran de la classe TextField dans le lecteur Flash.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Fabrique moduleFactory utilisée en vue de créer des champs TextField pour les polices incorporées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Fabrique moduleFactory utilisée pour la création des champs TextField pour les polices incorporées. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstance"><apiName>IDeferredInstance</apiName><shortdesc>
  L’interface IDeferredInstance définit l’interface de fabrique d’occurrence différée de Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IDeferredInstance définit l’interface de fabrique d’occurrence différée de Flex. Une implémentation de la classe IDeferredInstance crée une valeur d’occurrence particulière lors du premier appel de la méthode <codeph>getInstance()</codeph> et renvoie une référence à cette valeur lors des appels ultérieurs de la méthode <codeph>getInstance()</codeph>.
 
  <p>Le compilateur Flex effectue les coercitions automatiques suivantes lorsqu’il rencontre du code MXML qui affecte une valeur à une propriété avec le type IDeferredInstance :</p>
 
  <ol>
      <li>Si vous affectez à une propriété du type IDeferredInstance une valeur correspondant à une balise MXML enfant représentant une classe, telle qu’une balise de composant, le compilateur crée une implémentation IDeferredInstance dont la méthode <codeph>getInstance()</codeph> renvoie une occurrence de la classe, configurée comme spécifié dans le code MXML. L’exemple suivant illustre ce format. Dans cet exemple, MyComp est un composant personnalisé ayant une variable nommée myDeferredInstanceProperty de type IDeferredInstance. Le compilateur génère une implémentation IDeferredInstance1 dont la méthode <codeph>getInstance()</codeph> renvoie une occurrence de la classe Label, avec sa propriété text définie sur « Ceci est un libellé différé » :
          <pre>
          &lt;MyComp>
              &lt;myDeferredInstanceProperty>
                  &lt;Label text="This is a deferred label"/>
              &lt;/myDeferredInstanceProperty>
          &lt;/MyComp></pre>
      </li>
      <li>Si vous affectez une chaîne de caractères à une propriété du type IDeferredInstance, le compilateur interprète la chaîne comme un nom complet de classe et crée une implémentation IDeferredInstance dont la méthode <codeph>getInstance()</codeph> renvoie une nouvelle occurrence de la classe spécifiée. La classe spécifiée doit présenter un constructeur sans arguments. L’exemple suivant illustre ce format. Dans cet exemple, le compilateur génère une implémentation IDeferredInstance1 dont la méthode <codeph>getInstance()</codeph> renvoie une occurrence de la classe MyClass :
          <pre>
          &lt;MyComp myDeferredInstanceProperty="myPackage.MyClass/></pre>
      </li>
  </ol>
 
  <p>Utilisez l’interface IDeferredInstance lorsqu’une classe ActionScript diffère l’instanciation d’une valeur de propriété. Vous ne pouvez pas utiliser l’interface IDeferredInstance si une classe ActionScript nécessite plusieurs occurrences de la même valeur. Dans ces situations, utilisez l’interface IFactory.</p>
  
  <p>La classe states.AddChild comprend une propriété <codeph>childFactory</codeph> de type IDeferredInstance.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddChild"><linktext>mx.states.AddChild</linktext></link></related-links><apiOperation id="mx.core:IDeferredInstance:mx.core:IDeferredInstance:getInstance"><apiName>getInstance</apiName><shortdesc>
      Crée une occurrence Object à partir d’une classe ou d’une fonction, si l’occurrence n’existe pas encore. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet de l’occurrence.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Crée une occurrence Object à partir d’une classe ou d’une fonction, si l’occurrence n’existe pas encore. 
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
  La classe SpriteAsset est une sous-classe de flash.display.Sprite, classe qui représente les images vectorielles incorporées dans une application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SpriteAsset est une sous-classe de flash.display.Sprite, classe qui représente les images vectorielles incorporées dans une application. Elle implémente l’interface IFlexDisplayObject, ce qui permet l’affichage d’une image vectorielle dans un contrôle d’image, ou son utilisation en tant qu’arrière-plan de conteneur ou habillage de composant.
 
  <p>L’image vectorielle à incorporer peut figurer dans un fichier SVG. Vous pouvez également incorporer un symbole sprite figurant dans un fichier SWF produit par Flash. Dans les deux cas, le compilateur MXML génère automatiquement une classe qui étend la classe SpriteAsset pour représenter l’image vectorielle incorporée.</p>
 
  <p>Généralement, il n’est pas nécessaire d’utiliser la classe SpriteAsset directement lors de l’écriture d’une application Flex. Par exemple, vous pouvez incorporer un symbole sprite à partir d’un fichier SWF et l’afficher dans un contrôle d’image en écrivant le code suivant :</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Assets.swf', symbol='Logo')"/></pre>
 
  <p>Ou l’utiliser comme image d’arrière-plan de l’application en syntaxe CSS en écrivant le code suivant :</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol='Logo')
      }
  &lt;fx:Style/></pre>
 
  <p>sans devoir comprendre que le compilateur MXML crée automatiquement une sous-classe de BitmapAsset.</p>
 
  <p>Cependant, il peut être utile de comprendre ce qui se passe au niveau du code ActionScript. Afin d’incorporer une image vectorielle dans ActionScript, vous déclarez une variable de type Class pour lui ajouter des métadonnées <codeph>[Embed]</codeph>. Par exemple, pour incorporer un symbole sprite à partir d’un fichier SWF, procédez comme suit :</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="Logo")]
  private var logoClass:Class;</pre>
 
  <p>Le compilateur MXML détecte que le symbole Logo dans Assets.swf est un sprite, génère automatiquement une sous-classe de la classe SpriteAsset pour le représenter et définit la variable comme référence à cette classe auto-générée. Vous pouvez ensuite utiliser cette référence de classe pour créer des occurrences de la classe SpriteAsset à l’aide de l’opérateur <codeph>new</codeph> et utiliser les API de la classe Sprite sur ces dernières :</p>
 
  <pre>
  var logo:SpriteAsset = SpriteAsset(new logoClass());
  logo.rotation=45;</pre>
 
  <p>Toutefois, il est rarement nécessaire de créer des occurrences SpriteAsset manuellement. En effet, les propriétés et styles liés aux images peuvent être définis sur une classe produisant une image. Les composants créent ainsi les occurrences d’image en tant que de besoin. Par exemple, pour afficher cette image vectorielle dans un contrôle d’image, vous pouvez définir la propriété <codeph>source</codeph> de l’image sur <codeph>logoClass</codeph>. Dans MXML, procédez de la manière suivante :</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SpriteAsset:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SpriteAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change. Si celles-ci diffèrent, la méthode est chargée de la réflexion du contenu de l'élément et de la mise à jour de la transformation post-mise en forme de l'élément afin que les descendants héritent d'un système de coordonnées par symétrie. IVisualElements met généralement en œuvre la réflexion en utilisant postLayoutTransformOffsets pour réduire l'axe des abscisses par -1 et pour translater la coordonnée de l'axe des x de l'origine par la largeur de l'élément. L'effet net de cette transformation « miroir » est d'inverser la direction dans laquelle l'axe des abscisses augmente sans modifier l'emplacement de l'élément par rapport à l'origine de son parent.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:move"><apiName>move</apiName><shortdesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position x de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position y de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Définit la taille réelle de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Définit la taille réelle de cet objet.
	 
	  <p>Cette méthode est principalement utilisée dans le cadre de l’implémentation de la méthode <codeph>updateDisplayList()</codeph>, qui permet de calculer la taille réelle de l’objet, en fonction de sa taille explicite, de sa taille par rapport au parent (pourcentage) et de sa taille mesurée. Vous pouvez ensuite appliquer cette taille réelle à l’objet en appelant la méthode <codeph>setActualSize()</codeph>.</p>
	 
	  <p>Dans d’autres situations, il est préférable de définir les propriétés telles que <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph> plutôt que d’appeler cette méthode.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SpriteAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Retourne un objet EdgeMetrics pour la bordure qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Renvoie un objet EdgeMetrics pour la bordure qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur d’un côté de la bordure, exprimée en pixels.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          Spécifie la direction de mise en forme souhaitée pour un élément : l'une des valeurs LayoutDirection.LTR (de gauche à droite), LayoutDirection.RTL (de droite à gauche) ou null (héritée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          Spécifie la direction de mise en forme souhaitée pour un élément: l'une des valeurs LayoutDirection.LTR (de gauche à droite), LayoutDirection.RTL (de droite à gauche) ou null (héritée). Cette propriété est généralement soutenue par un style héritable. Si sa valeur est null, le style layoutDirection est défini sur undefined. Les classes telles que GraphicElement, qui mettent en œuvre ILayoutDirectionElement mais ne prennent pas en charge les styles, doivent en outre prendre en charge la valeur null pour cette propriété, ce qui signifie que la direction de la mise en forme doit être héritée de son parent. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Hauteur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Hauteur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Largeur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Largeur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
  La classe EdgeMetrics indique l’épaisseur (en pixels) des quatre zones de bordure autour d’un composant visuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe EdgeMetrics indique l’épaisseur (en pixels) des quatre zones de bordure autour d’un composant visuel.
 
  <p>Les propriétés Flex suivantes ont des valeurs correspondant à des objets EdgeMetrics :</p>
 
  <ul>
  <li>La propriété <codeph>borderMetrics</codeph> des classes mx.core.Container et mx.skins.Border inclut uniquement la bordure dans le calcul des valeurs de propriété de l’objet EdgeMetrics.</li>
 
  <li>La propriété <codeph>viewMetrics</codeph> de la classe mx.core.Container et des sous-classes de la classe Container inclut les barres de défilement et éléments sans contenu éventuels (tels que la zone d’en-tête d’un conteneur Panel et la zone d’un composant ControlBar) dans les calculs des valeurs de propriété de l’objet EdgeMetrics.</li>
 
  <li>La propriété <codeph>viewMetricsAndPadding</codeph> de la classe mx.core.Container inclut les éléments répertoriés pour la propriété <codeph>viewMetrics</codeph>, plus les zones éventuellement définies par les marges du conteneur dans le calcul des valeurs de propriété de l’objet EdgeMetrics.</li>
  </ul>
 
  <p>Ces trois propriétés renvoient toutes une référence au même objet EdgeMetrics que le conteneur utilise pour sa mesure et sa présentation. Elles ne renvoient pas une copie de cet objet. Pour obtenir une copie, appelez la méthode <codeph>clone()</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="mx.skins.xml#Border"><linktext>mx.skins.Border</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.core:EdgeMetrics:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Largeur (en pixels) de la zone de bordure gauche.
     
      </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Hauteur (en pixels) de la zone de bordure supérieure.
     
      </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Largeur (en pixels) de la zone de bordure droite.
     
      </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Hauteur (en pixels) de la zone de bordure inférieure.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:EdgeMetrics:clone"><apiName>clone</apiName><shortdesc>
      Renvoie une copie de cet objet EdgeMetrics.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Copie de cet objet EdgeMetrics.
      
      </apiDesc><apiOperationClassifier>mx.core:EdgeMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Renvoie une copie de cet objet EdgeMetrics.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:EdgeMetrics:EMPTY"><apiName>EMPTY</apiName><shortdesc>
      Objet EdgeMetrics avec une valeur de zéro pour ses propriétés left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Objet EdgeMetrics avec une valeur de zéro pour ses propriétés <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:bottom"><apiName>bottom</apiName><shortdesc>
      Hauteur (en pixels) de la zone de bordure inférieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur (en pixels) de la zone de bordure inférieure.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:left"><apiName>left</apiName><shortdesc>
      Largeur (en pixels) de la zone de bordure gauche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur (en pixels) de la zone de bordure gauche.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:right"><apiName>right</apiName><shortdesc>
      Largeur (en pixels) de la zone de bordure droite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur (en pixels) de la zone de bordure droite.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:top"><apiName>top</apiName><shortdesc>
      Hauteur (en pixels) de la zone de bordure supérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur (en pixels) de la zone de bordure supérieure.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeater"><apiName>IRepeater</apiName><shortdesc>
  L’interface IRepeater définit les API publiques de l’objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IRepeater définit les API publiques de l’objet Repeater.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      Exécute les liaisons dans tous les composants UIComponent créés par ce composant Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Exécute les liaisons dans tous les composants UIComponent créés par ce composant Repeater.
     
      <p>Cette méthode est appelée par la structure Flex. Les développeurs ne doivent pas nécessairement l’appeler.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
      Initialise un nouvel objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>Conteneur qui contient cet objet Repeater et dans lequel cet objet crée ses enfants.
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Indicateur à valeur booléenne indiquant si l’objet Repeater doit créer tous les descendants de ses enfants.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialise un nouvel objet Repeater.
     
      <p>Cette méthode est appelée par la structure Flex. Les développeurs ne doivent pas nécessairement l’appeler.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeater:mx.core:IRepeater:container:get"><apiName>container</apiName><shortdesc>
      Conteneur qui contient cet objet Repeater et dans lequel cet objet crée ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      Conteneur qui contient cet objet Repeater et dans lequel cet objet crée ses enfants.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:count:get"><apiName>count</apiName><shortdesc>
      Nombre d’exécutions de cet objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre d’exécutions de cet objet Repeater.
     
      <p>Si l’objet Repeater atteint la fin du fournisseur de données lors de l’exécution, le nombre effectif d’exécutions est inférieur au nombre demandé.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
      Position d’index de l’élément dans le fournisseur dataProvider en cours de traitement lors de l’exécution de cet objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Position d’index de l’élément dans le fournisseur <codeph>dataProvider</codeph>en cours de traitement lors de l’exécution de cet objet Repeater.
     
      <p>Lorsque l’exécution de l’objet Repeater est terminée, cette propriété a la valeur <codeph>-1</codeph>. Toutefois, la propriété <codeph>repeaterIndex</codeph> d’une occurrence de composant répété mémorise la position d’index de l’élément <codeph>dataProvider</codeph> à partir duquel il a été créé. Dans le cas d’objets Repeater imbriqués, vous pouvez utiliser le tableau <codeph>repeaterIndices</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/repeaterIndex"><linktext>mx.core.UIComponent.repeaterIndex</linktext></link><link href="mx.core.xml#UIComponent/repeaterIndices"><linktext>mx.core.UIComponent.repeaterIndices</linktext></link><link href="mx.core.xml#UIComponent/instanceIndex"><linktext>mx.core.UIComponent.instanceIndex</linktext></link><link href="mx.core.xml#UIComponent/instanceIndices"><linktext>mx.core.UIComponent.instanceIndices</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
      Elément dans le fournisseur dataProvider en cours de traitement lors de l’exécution de cet objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Elément dans le fournisseur <codeph>dataProvider</codeph> en cours de traitement lors de l’exécution de cet objet Repeater.
     
      <p>Lorsque l’exécution de l’objet Repeater est terminée, cette propriété a la valeur <codeph>null</codeph>. Dans ce cas, vous pouvez toutefois appeler la méthode <codeph>getRepeaterItem()</codeph> de l’occurrence du composant répété pour obtenir l’élément <codeph>dataProvider</codeph> à partir duquel il a été créé.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/getRepeaterItem()"><linktext>mx.core.UIComponent.getRepeaterItem()</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Fournisseur de données utilisé par cet objet Repeater pour créer des occurrences répétées de ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fournisseur de données utilisée par cet objet Repeater pour créer des occurrences répétées de ses enfants.
      
      <p>Si vous lisez la propriété <codeph>dataProvider</codeph>, vous obtenez toujours un objet ICollectionView ou <codeph>null</codeph>. Si vous définissez la propriété <codeph>dataProvider</codeph> sur une valeur différente de <codeph>null</codeph>, elle est converti en objet ICollectionView selon les règles suivantes :</p>
     
      <ul>
        <li>Si vous la définissez sur un objet Array, elle est convertie en ensemble ArrayCollection.</li>
        <li>Si vous la définissez sur une vue ICollectionView, aucune conversion n’est effectuée.</li>
        <li>Si vous la définissez sur une liste IList, elle est convertie en vue ListCollectionView.</li>
        <li>Si vous la définissez sur un objet XML ou XMLList, elle est convertie en ensemble XMLListCollection.</li>
        <li>Dans le cas contraire, elle est convertie en un ensemble ArrayCollection avec un élément unique.</li>
      </ul>
     
      <p>Vous devez spécifier une valeur pour la propriété <codeph>dataProvider</codeph> afin de permettre l’exécution du composant Repeater.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
      Indicateur à valeur booléenne indiquant si ce composant Repeater doit réutiliser des enfants créés précédemment ou en créer de nouveaux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur à valeur booléenne indiquant si ce composant Repeater doit réutiliser des enfants créés précédemment ou en créer de nouveaux.
     
      <p>Si la valeur est <codeph>true</codeph>, si la propriété <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph> ou <codeph>count</codeph> du composant Repeater est modifiée, il recycle les enfants existants en leur reliant les nouvelles données. Si plus d’enfants sont nécessaires, ils sont créés et ajoutés. Si moins d’enfants sont nécessaires, les enfants en trop sont supprimés et nettoyés.</p>
     
      <p>Si la valeur est <codeph>false</codeph>, si la propriété <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph> ou <codeph>count</codeph> du composant Repeater est modifiée, il supprime les enfants qu’il a éventuellement créés, puis crée et ajoute de nouveaux enfants à partir des nouveaux éléments de données.</p>
     
      <p>Par défaut, cette propriété a la valeur <codeph>false</codeph>. Sa définition sur <codeph>true</codeph> permet d’améliorer les performances, mais n’est pas adaptée dans tous les cas. Par exemple, si les enfants créés précédemment comportent des informations sur l’état tel que le texte saisi par un utilisateur, alors cet état n’est pas réinitialisé lorsque les enfants sont recyclés.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
      Position d’index dans l’élément dataProvider à laquelle ce composant Repeater commence la création d’enfants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Position d’index dans l’élément <codeph>dataProvider</codeph> à laquelle ce composant Repeater commence la création d’enfants.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:LayoutDirection"><apiName>LayoutDirection</apiName><shortdesc>
      La classe LayoutDirection définit les valeurs constantes du style layoutDirection d'un IStyleClient et de la propriété layoutDirection d'un ILayoutDirectionElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      La classe LayoutDirection définit les valeurs constantes du style <codeph>layoutDirection</codeph> d'un propriété IStyleClient et de la propriété <codeph>layoutDirection</codeph> d'un ILayoutDirectionElement. layoutDirection de gauche à droite se retrouve généralement dans les scripts des systèmes de script latin. layoutDirection de droite à gauche se retrouve dans les scripts arabes ou hébreux par exemple. Dans un IStyleClient, définissez le style layoutDirection sur undefined pour hériter de la propriété layoutDirection de son ancêtre. Dans un ILayoutDirectionElement, définissez la propriété layoutDirection sur null pour hériter de la propriété layoutDirection de son ancêtre.
     
      </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#IStyleClient"><linktext>mx.styles.IStyleClient</linktext></link><link href="mx.core.xml#ILayoutDirectionElement"><linktext>mx.core.ILayoutDirectionElement</linktext></link></related-links><apiValue id="mx.core:LayoutDirection:LTR"><apiName>LTR</apiName><shortdesc>
          Spécifie la direction de mise en forme de gauche à droite d'un client de style ou d'un élément visuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie la direction de mise en forme de gauche à droite d'un client de style ou d'un élément visuel.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutDirection:RTL"><apiName>RTL</apiName><shortdesc>
          Spécifie la direction de mise en forme de droite à gauche d'un client de style ou d'un élément visuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie la direction de mise en forme de droite à gauche d'un client de style ou d'un élément visuel.
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRectangularBorder"><apiName>IRectangularBorder</apiName><shortdesc>
  L’interface IRectangularBorder définit l’interface que toutes les classes utilisées pour les habillages de bordure rectangulaire doivent implémenter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IRectangularBorder définit l’interface que toutes les classes utilisées pour les habillages de bordure rectangulaire doivent implémenter.
 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:layoutBackgroundImage"><apiName>layoutBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:backgroundImageBounds:get"><apiName>backgroundImageBounds</apiName><shortdesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:hasBackgroundImage:get"><apiName>hasBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
  La classe MXMLObjectAdapter est une implémentation souche de l’interface IMXMLObject. Vous pouvez donc implémenter l’interface sans définir l’ensemble des méthodes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe MXMLObjectAdapter est une implémentation souche de l’interface IMXMLObject. Vous pouvez donc implémenter l’interface sans définir l’ensemble des méthodes. Toutes les implémentations correspondent à des absences d’opération. Si la méthode est supposée renvoyer quelque chose, le résultat est null, 0 ou false.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MXMLObjectAdapter:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MXMLObjectAdapter:initialized"><apiName>initialized</apiName><shortdesc>
      
      Appelé une fois que l’objet d’implémentation a été créé et que toutes les propriétés de composants spécifiées sur la balise MXML ont été initialisées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML ayant créé cet objet.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Identifiant utilisé par le <codeph>document</codeph> pour se référer à cet objet. Si l’objet est une propriété profonde de la propriété <codeph>document</codeph>, <codeph>id</codeph> a la valeur null.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelé une fois que l’objet d’implémentation a été créé et que toutes les propriétés de composants spécifiées sur la balise MXML ont été initialisées.
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IFlexModule"><apiName>IFlexModule</apiName><shortdesc>
  L’interface IFlexModule est utilisée comme contrat facultatif avec l’interface IFlexModuleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFlexModule est utilisée comme contrat facultatif avec l’interface IFlexModuleFactory. Lorsqu’une occurrence IFlexModule est créée avec l’interface IFlexModuleFactory, la fabrique stocke une référence à elle-même après la création.
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
      La classe DesignLayer représente un groupe de visibilité qui peut être associé à une ou plusieurs occurrences IVisualElement lors de l’exécution. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      La classe DesignLayer représente un groupe de visibilité qui peut être associé à une ou plusieurs occurrences IVisualElement lors de l’exécution. Les occurrences DesignLayer prennent en charge une propriété <codeph>visible</codeph> et alpha qui, lorsqu’elle est définie, se propage aux enfants du calque associé. 
     
      </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:DesignLayer_mx.events.PropertyChangeEvent_layerPropertyChange"><apiName>layerPropertyChange</apiName><shortdesc>
      Distribué par le calque lors de la modification d’effectiveVisibility ou d’effectiveAlpha. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.PropertyChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Distribué par le calque lors de la modification d’<codeph>effectiveVisibility</codeph> ou <codeph>effectiveAlpha</codeph>. 
      
      </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:DesignLayer:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
          Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Constructeur.
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DesignLayer:addLayer"><apiName>addLayer</apiName><shortdesc>
          Ajoute un enfant de l’objet DesignLayer à ce calque. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>Enfant de calque à ajouter.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Ajoute un enfant de l’objet DesignLayer à ce calque. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:getLayerAt"><apiName>getLayerAt</apiName><shortdesc>
          Renvoie l’enfant de l’objet DesignLayer à l’index spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant de l’objet DesignLayer si l’index est compris entre 0 et <codeph>numLayers</codeph> - 1. Renvoie <codeph>null</codeph> si l’index n’est pas valide. 
         
          </apiDesc><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index en base zéro d’un enfant de l’objet DesignLayer. 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Renvoie l’enfant de l’objet DesignLayer à l’index spécifié. 
         
          <p>Notez que l’ordre des enfants de l’objet DesignLayer est insignifiant. La méthode <codeph>getLayerAt</codeph> est utilisée en conjonction avec numLayers pour effectuer une itération sur la liste d’enfants. </p> 
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.numLayers.xml"><linktext>numLayers</linktext></link></related-links></apiOperation><apiOperation id="mx.core:DesignLayer:initialized"><apiName>initialized</apiName><shortdesc>
          
      Appelé une fois que l’objet d’implémentation a été créé et que toutes les propriétés de composants spécifiées sur la balise MXML ont été initialisées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML ayant créé cet objet.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Identifiant utilisé par le <codeph>document</codeph> pour se référer à cet objet. Si l’objet est une propriété profonde de la propriété <codeph>document</codeph>, <codeph>id</codeph> a la valeur null.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      Appelé une fois que l’objet d’implémentation a été créé et que toutes les propriétés de composants spécifiées sur la balise MXML ont été initialisées.
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:removeLayer"><apiName>removeLayer</apiName><shortdesc>
          Supprime un enfant de l’objet DesignLayer de ce calque. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>Enfant de calque à supprimer.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Supprime un enfant de l’objet DesignLayer de ce calque. 
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DesignLayer:alpha:get"><apiName>alpha</apiName><shortdesc>
          Valeur alpha de cette occurrence de création de calque, comprise entre 0.0 et 1.0. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Valeur alpha de cette occurrence de création de calque, comprise entre 0.0 et 1.0. 
         
          <p>Lors de sa mise à jour, l’événement de modification approprié pour <codeph>effectiveAlpha</codeph> est distribué à tous les écouteurs <codeph>layerPropertyChange</codeph> de ce calque, ainsi qu’à ceux des calques descendants affectés, le cas échéant. </p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveAlpha:get"><apiName>effectiveAlpha</apiName><shortdesc>
          Propriété qui renvoie les valeurs alpha réelles, comprises entre 0.0 et 1.0, de cette création de calque. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Propriété qui renvoie les valeurs alpha réelles, comprises entre 0.0 et 1.0, de cette création de calque. Cette valeur multiplie la valeur alpha de ce calque par celle de n’importe quel calque ancêtre.   
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveVisibility:get"><apiName>effectiveVisibility</apiName><shortdesc>
          Renvoie la visibilité réelle de cette création de calque. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Renvoie la visibilité réelle de cette création de calque. Cette valeur prend en considération la visibilité de ce calque et de tous les calques ancêtres.   
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:id:get"><apiName>id</apiName><shortdesc>
          ID du composant de calque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          ID du composant de calque. Cette valeur devient le nom d’occurrence du calque et ne doit pas contenir d’espace ni de caractère spécial. 
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:numLayers:get"><apiName>numLayers</apiName><shortdesc>
          Nombre d’enfants de l’objet DesignLayer dont ce calque est le parent direct. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Nombre d’enfants de l’objet DesignLayer dont ce calque est le parent direct. 
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:parent:get"><apiName>parent</apiName><shortdesc>
          Calque parent de ce calque. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Calque parent de ce calque.  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:visible:get"><apiName>visible</apiName><shortdesc>
          Visibilité de cette occurrence de calque de conception. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Visibilité de cette occurrence de calque de conception. 
         
          <p>Lors de sa mise à jour, l’événement de modification approprié pour <codeph>effectiveVisibility</codeph> est distribué à tous les écouteurs <codeph>layerPropertyChange</codeph> de ce calque, ainsi qu’à ceux des calques descendants affectés, le cas échéant. </p>
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexAsset"><apiName>IFlexAsset</apiName><shortdesc>
  IFlexAsset est une interface marqueur avec la signification suivante : si une classe déclare qu’elle implémente IFlexAsset, cette classe représente un élément (tel qu’un bitmap, une police, ou un son) incorporé dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexAsset est une interface marqueur avec la signification suivante : si une classe déclare qu’elle implémente IFlexAsset, cette classe représente un élément (tels qu’un bitmap, une police, ou un son) incorporé dans une application Flex. Cette interface ne définit aucune propriété ou méthode que la classe doit réellement implémenter.
 
  <p>Le lecteur utilise les classes ActionScript pour représenter les éléments incorporés, ainsi que le code ActionScript exécutable. Lorsque vous incorporez un élément dans une application Flex, le compilateur MXML génère automatiquement une classe pour le représenter. Toutes les classes de ce type déclarent qu’elles implémentent l’interface IFlexAsset afin de permettre de les distinguer des classes de code.</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IBorder"><apiName>IBorder</apiName><shortdesc>
  L’interface IBorder définit l’interface que toutes les classes utilisées pour les habillages de bordure doivent implémenter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IBorder définit l’interface que toutes les classes utilisées pour les habillages de bordure doivent implémenter.
 
  <p>Cela ne constitue pas une erreur si l’habillage de bordure n’implémente pas l’interface IBorder. Dans ce cas toutefois, le conteneur qui utilise l’habillage ne peut pas déterminer les métriques de la bordure. Par conséquent, le conteneur place le contenu en commençant par son coin supérieur gauche (ajusté pour la marge, le cas échéant). Pour la classe HaloBorder, le style <codeph>borderThickness</codeph> détermine habituellement la valeur du style <codeph>borderMetrics</codeph>. Pour les classes d’habillage graphiques, Flex examine la propriété <codeph>scale9Grid</codeph> pour déterminer la valeur du style <codeph>borderMetrics</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IBorder:mx.core:IBorder:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Retourne un objet EdgeMetrics pour la bordure qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Renvoie un objet EdgeMetrics pour la bordure qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur d’un côté de la bordure, exprimée en pixels.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IAssetLayoutFeatures"><apiName>IAssetLayoutFeatures</apiName><shortdesc>
  L'interface IAssetLayoutFeatures définit les propriétés minimales et les méthodes requises pour qu'un Objet prenne en charge les transformations avancées dans les actifs intégrés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L'interface IAssetLayoutFeatures définit les propriétés minimales et les méthodes requises pour qu'un Objet prenne en charge les transformations avancées dans les actifs intégrés.
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.AdvancedLayoutFeatures.xml"><linktext>mx.core.AdvancedLayoutFeatures</linktext></link></related-links><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix3D:get"><apiName>computedMatrix3D</apiName><shortdesc>
      Matrice 3D calculée, obtenue en combinant la matrice de mise en forme 3D et les écarts fournis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Matrice 3D calculée, obtenue en combinant la matrice de mise en forme 3D et les écarts fournis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix:get"><apiName>computedMatrix</apiName><shortdesc>
      Matrice calculée, obtenue en combinant la matrice de mise en forme et les écarts fournis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      Matrice calculée, obtenue en combinant la matrice de mise en forme et les écarts fournis.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:is3D:get"><apiName>is3D</apiName><shortdesc>
      True si la transformation calculée contient des valeurs 3D.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True si la transformation calculée contient des valeurs 3D.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutIs3D:get"><apiName>layoutIs3D</apiName><shortdesc>
      True si la transformation de mise en forme contient des valeurs 3D.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True si la transformation de mise en forme contient des valeurs 3D.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutWidth:get"><apiName>layoutWidth</apiName><shortdesc>
      Utilisée par la transformation de réflexion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Utilisée par la transformation de réflexion. Voir la propriété du miroir.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:mirror:get"><apiName>mirror</apiName><shortdesc>
      Si la valeur est true, l'axe des abscisses est appelée par -1 et la coordonnée de l'axe des x de l'origine est traduite par la largeur du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est true, l'axe des abscisses est appelée par -1 et la coordonnée de l'axe des x de l'origine est traduite par la largeur du composant. L'effet net de cette transformation « miroir » est de projeter en miroir la direction vers laquelle augmente l'axe des abscisses sans modifier l'emplacement de l'élément de mise en forme relative à l'origine parent.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchX:get"><apiName>stretchX</apiName><shortdesc>
      La valeur stretchY est le composant horizontal du facteur d’étirement d’échelle appliqué avant toute autre propriété de transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      La valeur stretchY est le composant horizontal du facteur d’étirement d’échelle appliqué avant toute autre propriété de transformation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchY:get"><apiName>stretchY</apiName><shortdesc>
      La valeur stretchY est le composant vertical du facteur d’étirement d’échelle appliqué avant toute autre propriété de transformation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      La valeur stretchY est le composant vertical du facteur d’étirement d’échelle appliqué avant toute autre propriété de transformation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      Matrice 3D utilisée lors des calculs de mise en forme pour déterminer la mise en forme et la taille du composant et de ses parents et sa fratrie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Matrice 3D utilisée lors des calculs de mise en forme pour déterminer la mise en forme et la taille du composant et de ses parents et sa fratrie.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix:set"><apiName>layoutMatrix</apiName><shortdesc>
      Matrice 2D utilisée lors des calculs de mise en forme pour déterminer la mise en forme et la taille du composant et de ses parents et sa fratrie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      Matrice 2D utilisée lors des calculs de mise en forme pour déterminer la mise en forme et la taille du composant et de ses parents et sa fratrie.
      
       </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationX:set"><apiName>layoutRotationX</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente la rotation autour de l’axe X de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationY:set"><apiName>layoutRotationY</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente la rotation autour de l’axe Y de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationZ:set"><apiName>layoutRotationZ</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente la rotation autour de l’axe Z de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleX:set"><apiName>layoutScaleX</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente l’échelle le long de l’axe X de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleY:set"><apiName>layoutScaleY</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente l’échelle le long de l’axe Y de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleZ:set"><apiName>layoutScaleZ</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente l’échelle le long de l’axe Z de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutX:set"><apiName>layoutX</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente la valeur x de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutY:set"><apiName>layoutY</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente la valeur y de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutZ:set"><apiName>layoutZ</apiName><shortdesc>
      Propriété de commodité de transformation de mise en forme</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété de commodité de transformation de mise en forme Représente la valeur z de la matrice de présentation, utilisée dans la présentation et dans la transformation calculée.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformX:set"><apiName>transformX</apiName><shortdesc>
      Valeur x du point autour duquel toute rotation ou mise à l'échelle est effectuée aussi bien dans la mise en forme que dans la matrice calculée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur x du point autour duquel toute rotation ou mise à l'échelle est effectuée aussi bien dans la mise en forme que dans la matrice calculée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformY:set"><apiName>transformY</apiName><shortdesc>
      Valeur y du point autour duquel toute rotation ou mise à l'échelle est effectuée aussi bien dans la mise en forme que dans la matrice calculée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur y du point autour duquel toute rotation ou mise à l'échelle est effectuée aussi bien dans la mise en forme que dans la matrice calculée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformZ:set"><apiName>transformZ</apiName><shortdesc>
      Valeur z du point autour duquel toute rotation ou mise à l'échelle est effectuée aussi bien dans la mise en forme que dans la matrice calculée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur z du point autour duquel toute rotation ou mise à l'échelle est effectuée aussi bien dans la mise en forme que dans la matrice calculée.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DPIClassification"><apiName>DPIClassification</apiName><shortdesc>
  Enumération des classes de densité de l’écran du périphérique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Enumération des classes de densité de l’écran du périphérique. Avec les PPP, Flex réduit les valeurs PPP similaires en classes DPI.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.xml#Application/applicationDPI"><linktext>spark.components.Application.applicationDPI</linktext></link><link href="" invalidHref="spark.components.xml#Application/runtimeDPI"><linktext>spark.components.Application.runtimeDPI</linktext></link></related-links><apiValue id="mx.core:DPIClassification:DPI_160"><apiName>DPI_160</apiName><shortdesc>
      Valeur de densité pour les périphériques de densité faible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur de densité pour les périphériques de densité faible.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DPIClassification:DPI_240"><apiName>DPI_240</apiName><shortdesc>
      Valeur de densité pour les périphériques de densité moyenne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>240</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur de densité pour les périphériques de densité moyenne.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DPIClassification:DPI_320"><apiName>DPI_320</apiName><shortdesc>
      Valeur de densité pour les périphériques de densité élevée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>320</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur de densité pour les périphériques de densité élevée.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponent"><apiName>UIComponent</apiName><shortdesc>
  La classe UIComponent constitue la classe de base de tous les composants visuels, interactifs ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="layoutDirection"/><effects><effect event="removed" name="removedEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant est supprimé d’un conteneur.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="added" name="addedEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant est ajouté en tant qu’enfant à un conteneur.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusOut" name="focusOutEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant perd le focus du clavier.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusIn" name="focusInEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant obtient le focus du clavier.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOut" name="rollOutEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque l’utilisateur déplace la souris pour enlever le curseur du composant.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOver" name="rollOverEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque l’utilisateur déplace la souris sur le composant.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseUp" name="mouseUpEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque l’utilisateur relâche le bouton de la souris pendant qu’elle est située sur le composant.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseDown" name="mouseDownEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque l’utilisateur appuie sur le bouton de la souris pendant qu’elle est située sur le composant.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hide" name="hideEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant devient invisible.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="show" name="showEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant devient visible.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resize" name="resizeEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant est redimensionné.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="move" name="moveEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant est déplacé.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="creationComplete" name="creationCompleteEffect" owner="mx.core:UIComponent">
<description>
  Lue lorsque le composant est créé.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Color" inherit="yes" name="themeColor" owner="mx.core:UIComponent" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de thème d’un composant. Cette propriété détermine l’aspect de la surbrillance, l’aspect de la sélection d’un composant et d’autres signaux visuels, mais n’a aucun impact sur les bordures ou couleurs d’arrière-plan habituelles du composant. Les valeurs par défaut sont <codeph>haloGreen</codeph>, <codeph>haloBlue</codeph>, <codeph>haloOrange</codeph> et <codeph>haloSilver</codeph>, mais toute valeur de couleur valide peut être utilisée.
   <p>Les valeurs par défaut des styles <codeph>rollOverColor</codeph> et <codeph>selectionColor</codeph> sont basées sur la valeur <codeph>themeColor</codeph>.</p>
   </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="showErrorTip" owner="mx.core:UIComponent" playerVersion="Flash10" type="Boolean">
<description>
  Afficher l'erreur-bulle lorsque ce composant n'est pas valide et que l'utilisateur pointe le curseur dessus 
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="showErrorSkin" owner="mx.core:UIComponent" playerVersion="Flash10" type="Boolean">
<description>
  Montrer l'erreur bordure ou enveloppe lorsque ce composant n'est pas valide.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl" inherit="yes" name="layoutDirection" owner="mx.core:UIComponent" playerVersion="Flash10" type="String">
<description>
  Spécifie la direction de mise en forme souhaitée d'un composant. Les valeurs souhaitées sont <codeph>"ltr"</codeph> pour la mise en forme de gauche à droite utilisée pour les composants de script latin, et <codeph>"rlt"</codeph> pour la mise en forme de droite à gauche utilisée pour les composants de scripts arabe ou hébreux par exemple.
 
  <p>Dans ActionScript, vous pouvez définir la direction de la mise en forme à l'aide des valeurs <codeph>mx.core.LayoutDirection.LTR</codeph>,<codeph> mx.core.LayoutDirection.RTL</codeph> ou <codeph>undefined</codeph> pour hériter de la direction de mise en forme du parent.</p>
 
  <p>La direction de la mise en forme doit typiquement être définie sur l'<codeph>Application</codeph> plutôt que sur des composants individuels. Si la direction de la mise en forme est <codeph>"rtl"</codeph>, la plupart des éléments visuels seront renvoyés par symétrie, à l'exception du texte et des images. La directionnalité du texte est déterminée par le style de <codeph>direction</codeph>.</p>
 
  <p>Les composants qui traitent des événements Keyboard.LEFT et Keyboard.RIGHT permutent généralement le sens de la touche lorsque la direction de la mise en forme est <codeph>"rtl"</codeph>. Autrement dit, Toujours à gauche signifie Déplacer à gauche, et Toujours à droite signifie Déplacer à droite, quelle que soit la <codeph>direction de la mise en forme</codeph></p>
 
  <p>Remarque : Ce style s'applique à tous les composants Spark et aux composants MX qui spécifient UIFTETextField comme étant leur classe textfieldClass.</p> 
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>mx.core.ILayoutDirectionElement
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.1
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="MXFTEText.css.xml"><linktext>MXFTEText.css</linktext></link><link href="mx.core.xml#ILayoutDirectionElement"><linktext>mx.core.ILayoutDirectionElement</linktext></link><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links></style><style format="Length" inherit="no" name="focusThickness" owner="mx.core:UIComponent" playerVersion="Flash9" type="Number">
<description>
  Epaisseur du contour du rectangle de focus, en pixels.
   </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusSkin" owner="mx.core:UIComponent" playerVersion="Flash9" type="Class">
<description>
  Habillage utilisé pour tracer le rectangle de focus. La valeur par défaut pour les composants Halo est mx.skins.halo.HaloFocusRect. La valeur par défaut des composants Spark est spark.skins.spark.FocusSkin. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusBlendMode" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Mode de fusion utilisé par le rectangle de focus. Pour plus d’informations, voir la propriété <codeph>blendMode</codeph> de la classe flash.display.DisplayObject.
   </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="mouse,touch" inherit="yes" name="interactionMode" owner="mx.core:UIComponent" playerVersion="Flash10" type="String">
<description>
  Le principal mode d’interaction pour ce composant. Les valeurs possibles sont : <codeph>souris</codeph> et <codeph>touche</codeph>. La valeur par défaut du thème Halo est <codeph>souris</codeph>. La valeur par défaut du thème Spark est <codeph>souris</codeph>. La valeur par défaut du thème Mobile est <codeph>touche</codeph>.
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

<see>mx.core.InteractionMode#TOUCH
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="mx.core.xml#InteractionMode/MOUSE"><linktext>mx.core.InteractionMode.MOUSE</linktext></link><link href="mx.core.xml#InteractionMode/TOUCH"><linktext>mx.core.InteractionMode.TOUCH</linktext></link></related-links></style><style format="Color" inherit="yes" name="errorColor" owner="mx.core:UIComponent" playerVersion="Flash9" type="uint">
<description>
  Couleur de surbrillance du composant lorsque la validation échoue. Flex définit également le style <codeph>borderColor</codeph> du composant sur cette couleur <codeph>errorColor</codeph> lors d’un échec de validation. La valeur par défaut du thème Halo est <codeph>0xFF0000</codeph>. La valeur par défaut du thème Spark est <codeph>0xFE0000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:UIComponent" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur principale d’un composant.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance verticale, en pixels, du centre de la zone de contenu du composant au centre du composant. Si ce style est défini, le centre du composant est ancré au centre de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux centres restent séparés verticalement.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="top" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance verticale, en pixels, entre le bord supérieur du composant et le bord supérieur de la zone de contenu de son conteneur parent. Si ce style est défini, le bord supérieur du composant est ancré au bord supérieur de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux bords restent séparés.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="right" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance horizontale, en pixels, du bord droit du composant au bord droit de la zone de contenu de son conteneur parent. Si ce style est défini, le bord droit du composant est ancré au bord droit de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux bords restent séparés.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="left" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance horizontale, en pixels, du bord gauche du composant au bord gauche de la zone de contenu de son conteneur parent. Si ce style est défini, le bord gauche du composant est ancré au bord gauche de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux bords restent séparés.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance horizontale, en pixels, entre le centre de la zone de contenu et celui du composant. Si ce style est défini, le centre du composant est ancré au centre de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux centres restent séparés horizontalement.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="bottom" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance verticale, en pixels, entre le bord inférieur du composant et le bord inférieur de la zone de contenu de son conteneur parent. Si ce style est défini, le bord inférieur du composant est ancré au bord inférieur de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux bords restent séparés.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="baseline" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Distance verticale en pixels du bord supérieur de la zone de contenu à la position de la ligne de base de la commande. Si ce style est défini, la ligne de base du composant est ancrée au bord supérieur de sa zone de contenu. Lorsque son conteneur est redimensionné, les deux bords restent séparés.
 
  <p>Ce style n’a d’effet que lorsqu’il est utilisé sur un composant dans un conteneur Canvas, ou sur un composant dans un conteneur Panel ou Application dont la propriété <codeph>layout</codeph> est définie sur <codeph>absolute</codeph>.</p> 
 
  <p>La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>All user interface components in Flex extend the UIComponent class.
  Flex components inherit the following properties from the UIComponent
  class:</p>
   <pre>
  &lt;mx:<i>tagname</i>
   <b>Properties </b>
    accessibilityDescription="null"
    accessibilityName="null"
    accessibilityShortcut="null"
    accessibilitySilent="true|false"
    automationName="null"
    cachePolicy="auto|on|off"
    currentState="null"
    doubleClickEnabled="false|true"
    enabled="true|false"
    explicitHeight="NaN"
    explicitMaxHeight="NaN"
    explicitMaxWidth="NaN"
    explicitMinHeight="NaN"
    explicitMinWidth="NaN"
    explicitWidth="NaN"
    focusEnabled="true|false"
    hasFocusableChildren="false|true"
    height="0"
    id=""
    includeInLayout="true|false"
    maxHeight="10000"
    maxWidth="10000"
    measuredHeight=
    measuredMinHeight=
    measuredMinWidth=
    measuredWidth=
    minHeight="0"
    minWidth="0"
    mouseFocusEnabled="true|false"
    percentHeight="NaN"
    percentWidth="NaN"
    scaleX="1.0"
    scaleY="1.0"
    states="null"
    styleName="undefined"
    toolTip="null"
    transitions=""
    validationSubField
    width="0"
    x="0"
    y="0"
   <b>Styles</b>
    bottom="undefined"
    errorColor="0xFF0000"
    focusBlendMode="normal"
    focusSkin="HaloFocusRect""
    focusThickness="2"
    horizontalCenter="undefined"
    layoutDirection="ltr"
    left="undefined"
    right="undefined"
    themeColor="haloGreen"
    top="undefined"
    verticalCenter="undefined"
   <b>Effects</b>
    addedEffect="<i>No default</i>"
    creationCompleteEffect="<i>No default</i>"
    focusInEffect="<i>No default</i>"
    focusOutEffect="<i>No default</i>"
    hideEffect="<i>No default</i>"
    mouseDownEffect="<i>No default</i>"
    mouseUpEffect="<i>No default</i>"
    moveEffect="<i>No default</i>"
    removedEffect="<i>No default</i>"
    resizeEffect="<i>No default</i>"
    rollOutEffect="<i>No default</i>"
    rollOverEffect="<i>No default</i>"
    showEffect="<i>No default</i>"
   <b>Events</b>
    add="<i>No default</i>"
    creationComplete="<i>No default</i>"
    currentStateChange="<i>No default</i>"
    currentStateChanging="<i>No default</i>"
    dragComplete="<i>No default</i>"
    dragDrop="<i>No default</i>"
    dragEnter="<i>No default</i>"
    dragExit="<i>No default</i>"
    dragOver="<i>No default</i>"
    effectEnd="<i>No default</i>"
    effectStart="<i>No default</i>"
    enterState="<i>No default</i>"
    exitState="<i>No default</i>"
    hide="<i>No default</i>"
    initialize="<i>No default</i>"
    invalid="<i>No default</i>"
    mouseDownOutside="<i>No default</i>"
    mouseWheelOutside="<i>No default</i>"
    move="<i>No default</i>"
    preinitialize="<i>No default</i>"
    remove="<i>No default</i>"
    resize="<i>No default</i>"
    show="<i>No default</i>"
    toolTipCreate="<i>No default</i>"
    toolTipEnd="<i>No default</i>"
    toolTipHide="<i>No default</i>"
    toolTipShow="<i>No default</i>"
    toolTipShown="<i>No default</i>"
    toolTipStart="<i>No default</i>"
    updateComplete="<i>No default</i>"
    valid="<i>No default</i>"
    valueCommit="<i>No default</i>"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IConstraintClient</apiBaseInterface><apiBaseInterface>mx.core:IDeferredInstantiationUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseInterface>mx.core:IRepeaterClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseInterface>mx.styles:IAdvancedStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.validators:IValidatorListener</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe UIComponent constitue la classe de base de tous les composants visuels, interactifs ou non.
   <p>Un composant interactif peut participer à la tabulation et à d’autres types de focus de l’élément réalisés à l’aide du clavier, accepter des événements de bas niveau comme les saisies du clavier et de la souris, et être désactivé afin de ne pas recevoir les saisies du clavier et de la souris. Ceci diffère des composants non interactifs, tels que Label et ProgressBar, qui affichent simplement un contenu et ne sont pas manipulés par l’utilisateur.</p>
  <p>La classe UIComponent n’est pas utilisée comme une balise MXML, mais comme classe de base pour d’autres classes.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_START_toolTipStart"><apiName>toolTipStart</apiName><shortdesc>
  Distribué par un composant dont la propriété toolTip est définie, dès que l’utilisateur le survole avec la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_START</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par un composant dont la propriété <codeph>toolTip</codeph> est définie, dès que l’utilisateur passe le pointeur de la souris sur le composant.
   <p>La séquence des événements ToolTip est <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> et <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOWN_toolTipShown"><apiName>toolTipShown</apiName><shortdesc>
  Distribué par le composant lorsque son composant ToolTip a été affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOWN</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le composant lorsque son composant ToolTip a été affiché.
   <p>Si vous spécifiez un effet à l’aide de la propriété <codeph>ToolTipManager.showEffect</codeph>, cet événement est distribué après la fin de la lecture de l’effet.</p>
   <p>La séquence des événements ToolTip est <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> et <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOW_toolTipShow"><apiName>toolTipShow</apiName><shortdesc>
  Distribué par le composant lorsque son composant ToolTip est sur le point d’être affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOW</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le composant lorsque son composant ToolTip est sur le point d’être affiché.
   <p>Si vous spécifiez un effet à l’aide de la propriété <codeph>ToolTipManager.showEffect</codeph>, cet événement est distribué avant le début de la lecture de l’effet. Cet événement permet de modifier le composant ToolTip avant qu’il ne s’affiche.</p>
   <p>La séquence des événements ToolTip est <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> et <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_HIDE_toolTipHide"><apiName>toolTipHide</apiName><shortdesc>
  Distribué par le composant lorsque son composant ToolTip est sur le point d’être masqué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_HIDE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le composant lorsque son composant ToolTip est sur le point d’être masqué.
   <p>Si vous spécifiez un effet à l’aide de la propriété <codeph>ToolTipManager.hideEffect</codeph>, cet événement est distribué avant le début de la lecture de l’effet.</p>
   <p>La séquence des événements ToolTip est <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> et <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_END_toolTipEnd"><apiName>toolTipEnd</apiName><shortdesc>
  Distribué par le composant lorsque son objet ToolTip a été masqué et va être rapidement supprimé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_END</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le composant lorsque son objet ToolTip a été masqué et va être rapidement supprimé. 
   <p>Si vous spécifiez un effet à l’aide de la propriété <codeph>ToolTipManager.hideEffect</codeph>, cet événement est distribué après la fin de la lecture de l’effet.</p>
   <p>La séquence des événements ToolTip est <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> et <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_CREATE_toolTipCreate"><apiName>toolTipCreate</apiName><shortdesc>
  Distribué par le composant lorsqu’il est nécessaire de créer un composant ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_CREATE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le composant lorsqu’il est nécessaire de créer un composant ToolTip.
   <p>Si vous créez votre propre objet IToolTip et placez une référence correspondante dans la propriété <codeph>toolTip</codeph>de l’objet d’événement transmis au gestionnaire <codeph>toolTipCreate</codeph>, le gestionnaire ToolTipManager affiche l’élément ToolTip personnalisé. Dans le cas contraire, le gestionnaire ToolTipManager crée une occurrence de <codeph>ToolTipManager.toolTipClass</codeph> à afficher.</p>
   <p>La séquence des événements ToolTip est <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> et <codeph>toolTipEnd</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_END_touchInteractionEnd"><apiName>touchInteractionEnd</apiName><shortdesc>
  Evénement non annulable, distribué par un composant lorsque celui-ci a terminé de réagir à un geste d’interaction tactile de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_END</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Evénement non annulable, distribué par un composant lorsque celui-ci a terminé de réagir à un geste d’interaction tactile de l’utilisateur.
 
  <p>L’événement est un événement de propagation distribué sur la classe DisplayObject indiquant que l’interaction tactile a commencé (là où l’événement mouseDown / touchBegin s’est produit).</p>
 
  <p>Les composants répondant aux interactions tactiles doivent écouter les événements d’interaction tactile pour se coordonner avec les autres composants en ce qui concerne le type d’interaction tactile que l’utilisateur a l’intention d’effectuer et le composant chargé de répondre à cette interaction tactile.</p>
 
  <p>Un composant Scroller distribuera un événement touchInteractionEnd pour signaler aux autres composants qu’il a fini de répondre à l’interaction tactile de l’utilisateur.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_START_touchInteractionStart"><apiName>touchInteractionStart</apiName><shortdesc>
  Evénement non annulable, distribué par un composant lorsque celui-ci commence à réagir à un geste d’interaction tactile de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_START</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Evénement non annulable, distribué par un composant lorsque celui-ci commence à réagir à un geste d’interaction tactile de l’utilisateur.
 
  <p>L’événement est un événement de propagation distribué sur la classe DisplayObject indiquant que l’interaction tactile a commencé (là où l’événement mouseDown / touchBegin s’est produit).</p>
 
  <p>Les composants répondant aux interactions tactiles doivent écouter les événements d’interaction tactile pour se coordonner avec les autres composants en ce qui concerne le type d’interaction tactile que l’utilisateur a l’intention d’effectuer et le composant chargé de répondre à cette interaction tactile.</p>
 
  <p>Un composant Scroller distribuera un événement touchInteractionStart pour signaler aux autres composants susceptibles de réagir à la même interaction tactile de l’utilisateur qu’il prend le contrôle de cette interaction tactile. Lorsqu’ils voient cet événement, les autres composantes doivent cesser de réagir à l’interaction tactile, supprimer toutes les éventuelles indications visuelles qu’ils réagissent à l’interaction tactile et effectuer un autre nettoyage.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_STARTING_touchInteractionStarting"><apiName>touchInteractionStarting</apiName><shortdesc>
  Evénement annulable, distribué par un composant tentant de réagir à un geste d’interaction tactile de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_STARTING</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Evénement annulable, distribué par un composant tentant de réagir à un geste d’interaction tactile de l’utilisateur.
 
  <p>L’événement est un événement de propagation distribué sur la classe DisplayObject indiquant que l’interaction tactile a commencé (là où l’événement mouseDown / touchBegin s’est produit).</p>
 
  <p>Les composants répondant aux interactions tactiles doivent écouter les événements d’interaction tactile pour se coordonner avec les autres composants en ce qui concerne le type d’interaction tactile que l’utilisateur a l’intention d’effectuer et le composant chargé de répondre à cette interaction tactile.</p>
 
  <p>Un composant Scroller distribuera un événement touchInteractionStarting pour signaler aux autres composants susceptibles de réagir à la même interaction tactile de l’utilisateur qu’il souhaite prendre le contrôle de cette interaction tactile. Ceci est une opportunité pour les autres composants d’annuler l’action de Scroller et de conserver le contrôle de cette interaction tactile.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.STATE_CHANGE_INTERRUPTED_stateChangeInterrupted"><apiName>stateChangeInterrupted</apiName><shortdesc>
  Distribué lorsqu’un composant interrompt une transition à son état actuel afin de basculer dans un nouvel état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.STATE_CHANGE_INTERRUPTED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un composant interrompt une transition à son état actuel afin de basculer dans un nouvel état. 
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.STATE_CHANGE_COMPLETE_stateChangeComplete"><apiName>stateChangeComplete</apiName><shortdesc>
  Distribué après le basculement du composant dans un nouvel état et après la lecture de toute animation de transition d’état vers cet état.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.STATE_CHANGE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après le basculement du composant dans un nouvel état et après la lecture de toute animation de transition d’état vers cet état. L’événement est distribué immédiatement en l’absence de transition en cours entre les états. Si le composant bascule dans un autre état alors que la transition est en cours, cet événement sera distribué après que le composant aura terminé la transition vers ce nouvel état.
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.EXIT_STATE_exitState"><apiName>exitState</apiName><shortdesc>
  Distribué juste avant que le composant quitte un état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.EXIT_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué juste avant que le composant quitte un état d’affichage.
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ENTER_STATE_enterState"><apiName>enterState</apiName><shortdesc>
  Distribué après l’entrée du composant dans un état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l’entrée du composant dans un état d’affichage.
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGE_currentStateChange"><apiName>currentStateChange</apiName><shortdesc>
  Distribué après la modification de l’état d’affichage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification de l’état d’affichage. 
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGING_currentStateChanging"><apiName>currentStateChanging</apiName><shortdesc>
  Distribué après la modification de la propriété currentState, mais avant la modification de l’état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la modification de la propriété <codeph>currentState</codeph>, mais avant celle de l’état d’affichage.
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  Distribué après la fin d’un effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la fin d’un effet.
   <p>L’effet exécute le dernier ensemble de changements visuels avant le déclenchement de cet événement, mais ces modifications ne sont pas rendues sur l’écran. Ainsi, vous devez éventuellement utiliser la méthode <codeph>callLater()</codeph> pour retarder les autres modifications souhaitées en attendant le rendu des modifications à l’écran.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  Distribué après l’arrêt d’un effet, ce qui se produit uniquement par l’appel de la méthode stop() sur l’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l’arrêt d’un effet, ce qui se produit uniquement par l’appel de la méthode <codeph>stop()</codeph> sur l’effet.
   <p>L’effet distribue ensuite l’événement EFFECT_END lorsque l’effet se termine. L’utilité de l’événement EFFECT_STOP consiste à indiquer aux écouteurs que l’effet a été terminé de façon prématurée, au lieu terminer naturellement ou en raison d’un appel de la fonction <codeph>end()</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  Distribué juste avant le démarrage d’un effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué juste avant le démarrage d’un effet.
   <p>L’effet ne commence la modification des visuels qu’après le déclenchement de cet événement.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_START_dragStart"><apiName>dragStart</apiName><shortdesc>
  Distribué par l’initiateur du déplacement lors du démarrage d’une opération de déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_START</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par l’initiateur du déplacement lors du démarrage d’une opération de déplacement. Cet événement est utilisé en interne par les commandes basées sur une liste. Il n’est pas géré lors de l’implémentation d’une opération de glisser-déposer. Si vous souhaitez contrôler le début d’une opération de glisser-déposer, utilisez l’événement <codeph>mouseDown</codeph> ou <codeph>mouseMove</codeph>.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_COMPLETE_dragComplete"><apiName>dragComplete</apiName><shortdesc>
  Distribué par l’initiateur de l’action glisser (le composant source des données en cours de déplacement) lorsque l’opération de glissement se termine, lorsque vous déposez les données glissées sur une cible de dépôt ou lorsque vous terminez l’opération de glisser-déposer sans avoir effectué un dépôt. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par l’initiateur de l’action glisser (le composant source des données en cours de déplacement) lorsque l’opération de glissement se termine, lorsque vous déposez les données glissées sur une cible de dépôt ou lorsque vous terminez l’opération de glisser-déposer sans avoir effectué un dépôt. 
   <p>Cet événement permet d’effectuer un nettoyage final éventuel pour l’opération de glisser-déposer. Par exemple, si vous faites glisser un élément de commande List d’une liste à une autre, vous pouvez supprimer l’élément de commande List de la source s’il est devenu superflu.</p>
   <p>Si vous appelez la méthode <codeph>Event.preventDefault()</codeph> dans le gestionnaire d’événement pour l’événement <codeph>dragComplete</codeph> pour une commande Tree lors du déplacement de données d’une commande d’arborescence à une autre, la méthode empêche le dépôt.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_DROP_dragDrop"><apiName>dragDrop</apiName><shortdesc>
  Distribué par la cible de dépôt lorsque l’utilisateur libère le bouton de la souris au-dessus de la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_DROP</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par la cible de dépôt lorsque l’utilisateur libère le bouton de la souris au-dessus de la cible.
   <p>Ce gestionnaire d’événement permet d’ajouter les données du déplacement à la cible de dépôt.</p>
   <p>Si vous appelez la méthode <codeph>Event.preventDefault()</codeph> dans le gestionnaire d’événement pour l’événement <codeph>dragDrop</codeph> pour une commande Tree lors du déplacement de données d’une commande d’arborescence à une autre, la méthode empêche le dépôt.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_EXIT_dragExit"><apiName>dragExit</apiName><shortdesc>
  Distribué par le composant lorsque l’utilisateur effectue un déplacement en dehors du composant, mais ne dépose pas les données sur la cible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_EXIT</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par le composant lorsque l’utilisateur effectue un déplacement en dehors du composant, mais ne dépose pas les données sur la cible.
   <p>Cet événement permet de rendre à la cible de dépôt son aspect normal s’il a été modifié dans le cadre de la gestion des événements <codeph>dragEnter</codeph> ou <codeph>dragOver</codeph>.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_OVER_dragOver"><apiName>dragOver</apiName><shortdesc>
  Distribué par un composant lorsque l’utilisateur déplace la souris en survolant le composant pendant une opération de glissement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_OVER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par un composant lorsque l’utilisateur déplace le pointeur de la souris situé sur le composant pendant une opération de déplacement. Dans Flash Player, l’événement est distribué lorsque vous faites glisser un élément sur une cible de dépôt valide. Dans AIR, l’événement est distribué lorsque vous faites glisser un élément sur un composant quelconque, même si le composant n’est pas une cible de dépôt valide.
   <p>Dans le gestionnaire, vous pouvez modifier l’aspect de la cible de dépôt pour indiquer visuellement à l’utilisateur que le composant peut accepter le déplacement. Par exemple, vous pouvez tracer une bordure autour de la cible de dépôt, ou donner le focus à la cible de dépôt.</p>
   <p>Cet événement doit être géré pour effectuer une logique supplémentaire avant d’autoriser le dépôt. Il peut s’agir par exemple du dépôt de données à différents emplacements de la cible de dépôt, de la lecture de la saisie clavier pour déterminer si l’action de glisser-déposer est un déplacement ou une copie des données déplacées ou de l’émission de différents signaux visuels en fonction du type d’action de glisser-déposer.</p>
   <p>Vous pouvez également modifier le type d’action de déplacement en modifiant la méthode <codeph>DragManager.showFeedback()</codeph>. La valeur par défaut de la propriété <codeph>action</codeph> est <codeph>DragManager.MOVE</codeph>.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_ENTER_dragEnter"><apiName>dragEnter</apiName><shortdesc>
  Distribué par un composant lorsque l’utilisateur passe le pointeur de la souris sur le composant pendant une opération de déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_ENTER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par un composant lorsque l’utilisateur passe le pointeur de la souris sur le composant pendant une opération de déplacement. Dans une application s’exécutant dans Flash Player, l’événement est distribué plusieurs fois lorsque vous déplacez la souris sur un composant. Dans une application s’exécutant dans AIR, l’événement est distribué une seule fois.
   <p>Afin d’assurer la validité de la cible de dépôt, vous devez définir un gestionnaire pour cet événement. Dans le gestionnaire, vous pouvez modifier l’aspect de la cible de dépôt pour indiquer visuellement à l’utilisateur que le composant peut accepter le déplacement. Par exemple, vous pouvez tracer une bordure autour de la cible de dépôt, ou donner le focus à la cible de dépôt.</p>
   <p>Si vous souhaitez accepter le déplacement, appelez la méthode <codeph>DragManager.acceptDragDrop()</codeph>. Si vous n’appelez pas <codeph>acceptDragDrop()</codeph>, vous n’obtiendrez pas les autres événements de glissement. </p>
   <p>Dans Flash Player, la valeur de la propriété <codeph>action</codeph> est toujours <codeph>DragManager.MOVE</codeph>, même si vous effectuez une copie. L’événement <codeph>dragEnter</codeph> se produit en effet avant que le contrôle ne reconnaisse que la touche Ctrl est enfoncée pour signaler une copie. La propriété <codeph>action</codeph> de l’objet d’événement pour l’événement <codeph>dragOver</codeph> contient une valeur qui indique le type d’opération de déplacement. Vous pouvez modifier le type d’action de déplacement en appelant la méthode <codeph>DragManager.showFeedback()</codeph>.</p>
   <p>Dans AIR, la valeur par défaut de la propriété <codeph>action</codeph> est <codeph>DragManager.COPY</codeph>.</p>
   <p>En raison de la structuration des données d’une arborescence, les commandes Tree effectuent les glisser-déposer différemment des autres commandes basées sur une liste. Pour la commande Tree, le gestionnaire d’événement pour l’événement <codeph>dragDrop</codeph> n’effectue une action que lorsque vous déplacez ou copiez des données dans la même arborescence, ou copiez des données vers une autre arborescence. Si vous faites glisser des données d’une commande Tree et les déposez dans une autre afin de déplacer les données, le gestionnaire d’événement pour l’événement <codeph>dragComplete</codeph> effectue le travail d’ajout des données à l’arborescence de destination à la place du gestionnaire d’événement pour l’événement dragDrop et supprime également les données de l’arborescence source. Cette opération est nécessaire car pour réapparenter les données déplacées, Flex doit d’abord les supprimer du contrôle Tree source.</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Distribué si un composant est contrôlé par un validateur et que la validation a réussi.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si un composant est contrôlé par un validateur et que la validation a réussi.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc>
  Distribué si un composant est contrôlé par un validateur et que la validation a échoué.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si un composant est contrôlé par un validateur et que la validation a échoué.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Distribué lorsque les valeurs sont modifiées soit par programmation, soit par interaction de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque les valeurs sont modifiées soit par programmation, soit par interaction de l’utilisateur.
   <p>Puisqu’une modification de programmation déclenche cet événement, assurez-vous que les gestionnaires d’événements <codeph>valueCommit</codeph> ne modifient pas une valeur qui entraîne un autre événement <codeph>valueCommit</codeph>. Par exemple, ne modifiez pas la propriété <codeph>dataProvider</codeph> d’une commande dans un gestionnaire d’événement <codeph>valueCommit</codeph>. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE_mouseWheelOutside"><apiName>mouseWheelOutside</apiName><shortdesc>
  Distribué à partir d’un composant ouvert à l’aide du gestionnaire PopUpManager lorsque l’utilisateur fait défiler la molette de la souris en dehors de celui-ci. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à partir d’un composant ouvert à l’aide du gestionnaire PopUpManager lorsque l’utilisateur fait défiler la molette de la souris en dehors de celui-ci. 
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE_mouseDownOutside"><apiName>mouseDownOutside</apiName><shortdesc>
  Distribué par un composant ouvert à l’aide du gestionnaire PopUpManager lorsque l’utilisateur clique en dehors du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué par un composant ouvert à l’aide du gestionnaire PopUpManager lorsque l’utilisateur clique en dehors du composant.
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  Distribué lorsqu’un objet passe de l’état invisible à l’état visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un objet passe de l’état invisible à l’état visible.
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ResizeEvent.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  Distribué lorsque le composant est redimensionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ResizeEvent.RESIZE</apiEventType><adobeApiEventClassifier>mx.events.ResizeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant est redimensionné.
   <p>Vous pouvez redimensionner le composant en définissant la propriété <codeph>width</codeph> ou <codeph>height</codeph>, en appelant la méthode <codeph>setActualSize()</codeph> ou en définissant l’une des propriétés suivantes sur le composant ou sur d’autres composants, obligeant ainsi le gestionnaire LayoutManager à modifier les propriétés <codeph>width</codeph> ou <codeph>height</codeph> du composant :</p>
   <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
   <p>L’événement <codeph>resize</codeph> n’est pas distribué tant que la propriété n’a pas été modifiée. </p>
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.REMOVE_remove"><apiName>remove</apiName><shortdesc>
  Distribué lorsque le composant est supprimé d’un conteneur en tant que contenu enfant en utilisant la méthode removeChild(), removeChildAt(), removeElement() ou removeElementAt(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REMOVE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant est supprimé d’un conteneur en tant que contenu enfant en utilisant la méthode <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph>, <codeph>removeElement()</codeph> ou <codeph>removeElementAt()</codeph>. Si le composant est supprimé du conteneur en tant qu’enfant ne comportant pas de contenu à l’aide de la méthode <codeph>rawChildren.removeChild()</codeph> ou <codeph>rawChildren.removeChildAt()</codeph>, l’événement n’est pas distribué. 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.PREINITIALIZE_preinitialize"><apiName>preinitialize</apiName><shortdesc>
  Distribué au début de la séquence d’initialisation du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.PREINITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué au début de la séquence d’initialisation du composant. Le composant est dans un état très brut lorsque cet événement est distribué. De nombreux composants, tels que la commande Button, créent des composants enfant internes pour implémenter leur fonctionnalité. Par exemple, la commande Button crée un composant UITextField interne pour représenter son texte de libellé. Lorsque Flex distribue l’événement <codeph>preinitialize</codeph>, les enfants d’un composant n’ont pas encore été créés (y compris les enfants internes).
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.MoveEvent.MOVE_move"><apiName>move</apiName><shortdesc>
  Distribué lorsque l’objet a été déplacé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MoveEvent.MOVE</apiEventType><adobeApiEventClassifier>mx.events.MoveEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’objet a été déplacé.
   <p>Vous pouvez déplacer le composant en définissant la propriété <codeph>x</codeph> ou <codeph>y</codeph>, en appelant la méthode <codeph>move()</codeph> ou en définissant l’une des propriétés suivantes sur le composant ou sur d’autres composants, obligeant ainsi le gestionnaire LayoutManager à modifier les propriétés <codeph>x</codeph> ou <codeph>y</codeph> du composant :</p>
   <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
   <p>Lorsque vous appelez la méthode <codeph>move()</codeph>, l’événement <codeph>move</codeph> est distribué avant le renvoi de la méthode. Dans tous les autres cas, l’événement <codeph>move</codeph> n’est distribué qu’après la modification de la propriété.</p>
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INITIALIZE_initialize"><apiName>initialize</apiName><shortdesc>
  Distribué lorsque le composant a terminé sa construction et dispose de toutes les propriétés d’initialisation définies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant a terminé sa construction et dispose de toutes les propriétés d’initialisation définies.
   <p>Après la phase d’initialisation les propriétés sont traitées, le composant est mesuré, présenté et tracé, puis l’événement <codeph>creationComplete</codeph> est distribué.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  Distribué lorsqu’un objet passe de l’état visible à l’état invisible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un objet passe de l’état visible à l’état invisible.
 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.UPDATE_COMPLETE_updateComplete"><apiName>updateComplete</apiName><shortdesc>
  Distribué lorsque les méthodes commitProperties(), measure() et updateDisplayList() d’un objet ont été appelées (si nécessaire).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.UPDATE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque les méthodes <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> et <codeph>updateDisplayList()</codeph> d’un objet ont été appelées (si nécessaire).
   <p>Il s’agit de la dernière possibilité de modifier le composant avant son affichage. Toutes les propriétés ont été validées et le composant a été mesuré et présenté. </p>
   <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.CREATION_COMPLETE_creationComplete"><apiName>creationComplete</apiName><shortdesc>
  Distribué lorsque le composant a terminé sa construction, son traitement de propriétés, sa mesure, sa présentation et son tracé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant a terminé sa construction, son traitement de propriétés, sa mesure, sa présentation et son tracé.
   <p>A ce stade, en fonction de sa propriété <codeph>visible</codeph>, le composant n’est pas visible même s’il a été tracé.</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ADD_add"><apiName>add</apiName><shortdesc>
  Distribué lorsque le composant est ajouté à un conteneur en tant que contenu enfant à l’aide de la méthode addChild(), addChildAt(), addElement() ou addElementAt().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ADD</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant est ajouté à un conteneur en tant que contenu enfant à l’aide de la méthode <codeph>addChild()</codeph>, <codeph>addChildAt()</codeph>, <codeph>addElement()</codeph> ou <codeph>addElementAt()</codeph>. Si le composant est ajouté au conteneur en tant qu’élément enfant ne comportant pas de contenu à l’aide de la méthode <codeph>rawChildren.addChild()</codeph> ou <codeph>rawChildren.addChildAt()</codeph>, l’événement n’est pas distribué. 
  <p>Cet événement est distribué uniquement lorsqu’il existe un ou plusieurs écouteurs concernés associés à l’objet de distribution. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:UIComponent:UIComponent"><apiName>UIComponent</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UIComponent:addStyleClient"><apiName>addStyleClient</apiName><shortdesc>
      Ajoute un client de style non visuel à cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si le paramètre <codeph>styleClient</codeph> est un objet <codeph>DisplayObject</codeph>. 
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleClient</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>L’interface <codeph>IAdvancedStyleClient</codeph> à ajouter à la liste de clients de style non visuels de ce composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un client de style non visuel à cette occurrence de composant. Une fois que cette méthode a été appelée, le client de style héritera les changements de style à partir de cette occurrence de composant. Les clients de style qui sont des objets DisplayObject doivent utiliser les méthodes <codeph>addChild</codeph> ou <codeph>addChildAt</codeph> pour être ajoutés à un composant <codeph>UIComponent</codeph>. De façon colatérale, cette méthode définit la propriété <codeph>styleParent</codeph> du paramètre <codeph>styleClient</codeph> pour faire référence à cette occurrence du composant <codeph>UIComponent</codeph>. Si le paramètre <codeph>styleClient</codeph> possède déjà une propriété <codeph>styleParent</codeph>, cette méthode appelle <codeph>removeStyleClient</codeph> à partir de cette propriété <codeph>styleParent</codeph> précédente.  
     
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.removeStyleClient.xml"><linktext>removeStyleClient</linktext></link><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:adjustFocusRect"><apiName>adjustFocusRect</apiName><shortdesc>
      Ajuste le rectangle de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>Composant dont le rectangle de focus doit être modifié. Si ce paramètre est omis, la valeur par défaut correspond à cet objet UIComponent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajuste le rectangle de focus.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:applyComputedMatrix"><apiName>applyComputedMatrix</apiName><shortdesc>
      Valide la matrice calculée générée par combinaison de la matrice de présentation et des décalages de transformation de la transformation de l’objet flash displayObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Valide la matrice calculée générée par combinaison de la matrice de présentation et des décalages de transformation de la transformation de l’objet flash displayObject.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Il s’agit d’une méthode interne utilisée par la structure Flex pour prendre en charge l’effet Fondre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Il s’agit d’une méthode interne utilisée par la structure Flex pour prendre en charge l’effet Fondre. Il est inutile de l’appeler ou de la remplacer.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:callLater"><apiName>callLater</apiName><shortdesc>
      Place en attente une fonction à appeler ultérieurement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>Référence à une méthode à exécuter ultérieurement.
           </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Tableau d’objets qui représentent les arguments à transmettre à la méthode.
           
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Place en attente une fonction à appeler ultérieurement.
           <p>Avant chaque actualisation de l’écran, Flash Player ou AIR appelle le jeu de fonctions prévues pour l’actualisation. Parfois, une fonction doit être appelée dans la prochaine actualisation pour permettre l’exécution du code restant prévu pour l’actualisation en cours. Certaines fonctionnalités, comme les effets, peuvent retarder les fonctions en attente jusqu’à ce que la fonctionnalité se termine.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:canSkipMeasurement"><apiName>canSkipMeasurement</apiName><shortdesc>
      Détermine si l’appel à la méthode measure() peut être ignoré. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> lorsque la méthode <codeph>measureSizes()</codeph> peut ignorer l’appel à la méthode <codeph>measure()</codeph>. Par exemple, la valeur est généralement la valeur <codeph>true</codeph> lorsque <codeph>explicitWidth</codeph> et <codeph>explicitHeight</codeph> sont chacun défini. Pour les chemins, la valeur est <codeph>true</codeph> lorsque les limites du chemin n’ont pas changé.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Détermine si l’appel à la méthode <codeph>measure()</codeph> peut être ignoré.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:childrenCreated"><apiName>childrenCreated</apiName><shortdesc>
      Effectue les traitements finals éventuels après la création des objets enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Effectue les traitements finals éventuels après la création des objets enfant. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      Définit une propriété de style depuis cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime une propriété de style de cette occurrence de composant.
           <p>La méthode <codeph>getStyle()</codeph> ne renvoie pas nécessairement la valeur <codeph>undefined</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      Traite les propriétés définies sur le composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Traite les propriétés définies sur le composant. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent. 
           <p>Vous n’appelez pas cette méthode directement. Flex appelle la méthode <codeph>commitProperties()</codeph> lorsque vous utilisez la méthode <codeph>addChild()</codeph> pour ajouter un composant à un conteneur ou lorsque vous appelez la méthode <codeph>invalidateProperties()</codeph> du composant. Les appels de la méthode <codeph>commitProperties()</codeph> sont réalisés avant les appels de la méthode <codeph>measure()</codeph>. Ainsi, vous pouvez définir des valeurs de propriété susceptibles d’être utilisées par la méthode <codeph>measure()</codeph>.</p>
           <p>Certains composants présentent des propriétés influant sur le nombre ou le type d’objets enfant à créer, ou des propriétés liées les unes aux autres, telles que <codeph>horizontalScrollPolicy</codeph> et <codeph>horizontalScrollPosition</codeph>. En règle générale, il est préférable de traiter toutes ces propriétés en même temps au démarrage pour éviter d’avoir à réaliser plusieurs fois les mêmes opérations.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc>
      Convertit un objet Point de coordonnées de contenu en coordonnées globales.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet Point dont les coordonnées sont relatives à la scène.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Objet Point qui spécifie les coordonnées <i>x</i> et <i>y</i> dans le système de coordonnées du contenu en tant que propriétés.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit un objet <codeph>Point</codeph> de coordonnées de contenu en coordonnées globales. Les coordonnées de contenu spécifient une position de pixel par rapport au coin supérieur gauche du contenu du composant. Elles incluent l’ensemble de la zone de contenu du composant, y compris les régions actuellement découpées, accessibles uniquement par défilement du composant. Le système de coordonnées du contenu permet de définir et d’obtenir les positions des enfants d’un conteneur qui utilise le positionnement absolu. Les coordonnées globales spécifient une position de pixel par rapport au coin supérieur gauche de la scène, qui est la bordure extérieure de l’application.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/globalToContent()"><linktext>globalToContent()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:contentToLocal"><apiName>contentToLocal</apiName><shortdesc>
      Convertit un objet Point de coordonnées de contenu en coordonnées locales.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Pointer sur un objet Point dont les coordonnées sont relatives au système de coordonnées local.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Objet Point qui spécifie les coordonnées <i>x</i> et <i>y</i> dans le système de coordonnées du contenu en tant que propriétés.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit un objet <codeph>Point</codeph> de coordonnées de contenu en coordonnées locales. Les coordonnées de contenu spécifient une position de pixel par rapport au coin supérieur gauche du contenu du composant. Elles incluent l’ensemble de la zone de contenu du composant, y compris les régions actuellement découpées, accessibles uniquement par défilement du composant. Le système de coordonnées du contenu permet de définir et d’obtenir les positions des enfants d’un conteneur qui utilise le positionnement absolu. Les coordonnées locales spécifient une position de pixel par rapport au coin supérieur gauche du composant. 
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      
      Renvoie un ensemble de propriétés sous la forme d’ID d’automatisation qui identifient l’enfant au sein de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ensemble de propriétés décrivant l’enfant qui peut par la suite être utilisé pour résoudre le composant.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>Enfant pour lequel fournir l’ID.
     
      </apiDesc></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/><apiDesc>Doit être pris en compte pour former l’ID. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie un ensemble de propriétés sous la forme d’ID d’automatisation qui identifient l’enfant au sein de ce conteneur. Ces valeurs ne doivent pas changer pendant la durée de vie de l’application
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      
      Retourne un ensemble de propriétés qui identifient l’enfant au sein de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ensemble de propriétés décrivant l’enfant qui peut par la suite être utilisé pour résoudre le composant.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>Enfant pour lequel fournir l’ID.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie un ensemble de propriétés qui identifient l’enfant au sein de ce conteneur. Ces valeurs ne doivent pas changer pendant la durée de vie de l’application.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Crée des objets enfant du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée les objets enfant du composant. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent. 
           <p>Un composant qui crée d’autres composants ou des objets à l’intérieur de ce composant s’appelle un composant composite. Par exemple, le contrôle ComboBox de Flex est réellement composé d’un contrôle TextInput qui permet de définir la zone de texte du contrôle ComboBox et d’un contrôle Button qui définit la flèche du contrôle ComboBox. Les composants implémentent la méthode <codeph>createChildren()</codeph> pour créer des objets enfant (d’autres composants, par exemple) dans le composant.</p>
           <p>Vous appelez la méthode <codeph>addChild()</codeph> au sein d’un remplacement de la méthode <codeph>createChildren()</codeph> pour ajouter chaque objet enfant. </p>
           <p>Vous n’appelez pas cette méthode directement. Flex appelle la méthode <codeph>createChildren()</codeph> en réponse à l’appel de la méthode <codeph>addChild()</codeph> pour ajouter le composant à son parent. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInFontContext"><apiName>createInFontContext</apiName><shortdesc>
      Crée un nouvel objet à l’aide d’un contexte basé sur la police incorporée en cours d’utilisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Occurrence de la classe créée dans le contexte du fichier SWF propriétaire de la police incorporée. Si cet objet n’utilise aucune police incorporée, la classe est créée dans le contexte de l’objet. 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classObj</apiItemName><apiType value="Class"/><apiDesc>Classe à créer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée un nouvel objet à l’aide d’un contexte basé sur la police incorporée en cours d’utilisation. 
           <p>Cette méthode est utilisée pour la résolution d’un problème concernant l’accès aux polices incorporées dans un fichier SWF d’application lorsque la structure est chargée en tant que bibliothèque RSL (la bibliothèque RSL possède son propre fichier SWF de contexte). Les polices incorporées sont uniquement accessibles à partir du fichier SWF du contexte dans lequel elles ont été créées. A l’aide du contexte du fichier SWF de l’application, la bibliothèque RSL peut créer des objets dans le fichier SWF de contexte de l’application ayant accès aux polices incorporées de l’application.</p>
           <p>Appelez cette méthode uniquement après la définition des styles de police pour cet objet.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInModuleContext"><apiName>createInModuleContext</apiName><shortdesc>
      Crée l’objet à l’aide d’une fabrique moduleFactory donnée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Objet créé dans le contexte de la fabrique moduleFactory.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiDesc>Fabrique moduleFactory dans laquelle créer la classe. Peut avoir la valeur null.
           </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="String"/><apiDesc>Nom de la classe à créer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée l’objet à l’aide d’une fabrique moduleFactory donnée. Si la propriété moduleFactory a la valeur null ou l’objet ne peut pas être créé à l’aide de la fabrique de module, revenez à la création de l’objet par un gestionnaire systemManager.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      
      Crée une référence id pour cet objet IUIComponent sur son objet document parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Parent de cet objet IUIComponent.  
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Crée une référence d’<codeph>id</codeph> à cet objet IUIComponent sur son objet de document parent. Cette fonction peut créer des références multidimensionnelles telles que b[2][4] pour les objets figurant dans un ou plusieurs objets Repeater. Si les indices ont la valeur null, il crée une référence simple, sans tableau.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      
      Supprime la référence d’id à cet objet IUIComponent sur son objet de document parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Parent de cet objet IUIComponent.  
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Supprime la référence d’<codeph>id</codeph> à cet objet IUIComponent sur son objet de document parent. Cette fonction peut effectuer des suppressions dans des références multidimensionnelles telles que b[2][4] pour les objets figurant dans un ou plusieurs objets Repeater. Si les index sont définis sur null, elle supprime la référence simple autre qu’un tableau. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:determineTextFormatFromStyles"><apiName>determineTextFormatFromStyles</apiName><shortdesc>
      Renvoie un objet UITextFormat correspondant aux styles du texte pour ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet UITextFormat correspondant aux styles du texte pour ce composant UIComponent.
      
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Renvoie un objet UITextFormat correspondant aux styles du texte pour ce composant UIComponent.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      Distribue un événement dans le flux d’événements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Une valeur <codeph>true</codeph> si l’événement a bien été distribué. Une valeur <codeph>false</codeph> indique un échec ou que la méthode <codeph>preventDefault()</codeph> a été appelée sur l’événement.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet Event qui est distribué dans le flux d’événements. Si l’événement est redistribué, un clone est automatiquement créé. Après la distribution d’un événement, il est impossible de modifier sa propriété <codeph>target</codeph>. Pour que la redistribution fonctionne, vous devez donc créer une copie de l’événement.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Distribue un événement dans le flux d’événements. La cible de l’événement est l’objet EventDispatcher sur lequel la méthode <codeph>dispatchEvent()</codeph> est appelée.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:dispatchPropertyChangeEvent"><apiName>dispatchPropertyChangeEvent</apiName><shortdesc> 
      Méthode d’assistance permettant la distribution d’un événement PropertyChangeEvent lorsqu’une propriété est actualisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prop</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété qui a changé.
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="any"/><apiDesc>Ancienne valeur de la propriété.
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Nouvelle valeur de la propriété.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Méthode d’assistance permettant la distribution d’un événement PropertyChangeEvent lorsqu’une propriété est actualisée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      Affiche ou masque l’indicateur de focus autour de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>Détermine si l’indicateur de focus doit être affiché. Définissez la propriété sur <codeph>true</codeph> pour afficher l’indicateur de focus. Définissez la propriété sur <codeph>false</codeph> pour le masquer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affiche ou masque l’indicateur de focus autour de ce composant.
           <p>UIComponent effectue cette implémentation en créant une occurrence de la classe spécifiée par le style <codeph>focusSkin</codeph> et en la positionnant de manière approprié.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawRoundRect"><apiName>drawRoundRect</apiName><shortdesc>
      Trace par programmation un rectangle dans l’objet Graphics de cet habillage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Position horizontale du coin supérieur gauche du rectangle dans cet habillage.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position verticale du coin supérieur gauche du rectangle dans cet habillage.
           </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Largeur du rectangle en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Hauteur du rectangle en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>r</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Rayon(s) d’arrondi du rectangle. Peut correspondre à la valeur <codeph>null</codeph>, à un nombre ou à un objet. Si la valeur est <codeph>null</codeph>, elle indique que les coins doivent être carrés et non pas arrondis. S’il s’agit d’un nombre, il indique le même rayon en pixels pour les quatre coins. S’il s’agit d’un objet, il doit présenter des propriétés appelées <codeph>tl</codeph>, <codeph>tr</codeph>, <codeph>bl</codeph> et <codeph>br</codeph>, dont les valeurs sont des nombres spécifiant le rayon (en pixels) pour les coins supérieur gauche, supérieur droit, inférieur gauche et inférieur droit. Par exemple, vous pouvez transmettre un objet simple tel que <codeph>{ tl: 5, tr: 5, bl: 0, br: 0 }</codeph>. La valeur par défaut est null (angles carrés).
           </apiDesc></apiParam><apiParam><apiItemName>c</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Couleur(s) RVB pour le remplissage. Peut correspondre à la valeur <codeph>null</codeph>, à un uint ou à un tableau. Si la valeur est <codeph>null</codeph>, le rectangle n’est pas rempli. S’il s’agit d’un uint, il indique une couleur RVB de remplissage. Par exemple, transmettez <codeph>0xFF0000</codeph> pour un remplissage en rouge. S’il s’agit d’un tableau, il doit contenir des nombres uint spécifiant les couleurs de dégradé. Par exemple, transmettez <codeph>[ 0xFF0000, 0xFFFF00, 0x0000FF ]</codeph> pour un remplissage dégradé du rouge au bleu en passant par le jaune. Vous pouvez définir jusqu’à 15 couleurs dans le dégradé. La valeur par défaut est null (aucun remplissage).
           </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Valeur(s) alpha pour le remplissage. Peut correspondre à la valeur null, à un nombre ou à un tableau. Cet argument est ignoré si la propriété <codeph>color</codeph>a la valeur null. Si la propriété <codeph>color</codeph> est un uint spécifiant une couleur RVB de remplissage, alors <codeph>alpha</codeph> doit être un nombre spécifiant la transparence du remplissage, où 0.0 est entièrement transparent et 1.0 est entièrement opaque. Dans ce cas, vous pouvez également transmettre la valeur null au lieu de 1,0 pour spécifier l’opacité complète. Si la propriété <codeph>color</codeph> est un tableau spécifiant des couleurs de dégradé, alors <codeph>alpha</codeph> doit être un tableau de nombres de même longueur, spécifiant les valeurs alpha correspondantes du dégradé. Dans ce cas, la valeur par défaut est <codeph>null</codeph> (entièrement opaque).
           </apiDesc></apiParam><apiParam><apiItemName>rot</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Objet Matrix utilisé pour le remplissage dégradé. Les méthodes utilitaires <codeph>horizontalGradientMatrix()</codeph>, <codeph>verticalGradientMatrix()</codeph> et <codeph>rotatedGradientMatrix()</codeph> peuvent être utilisées pour créer la valeur de ce paramètre.
           </apiDesc></apiParam><apiParam><apiItemName>gradient</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Type de remplissage en dégradé. Les valeurs possibles sont <codeph>GradientType.LINEAR</codeph> ou <codeph>GradientType.RADIAL</codeph> (la classe GradientType figure dans le package flash.display).
           </apiDesc></apiParam><apiParam><apiItemName>ratios</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>
      Spécifie la distribution des couleurs. Le nombre d’entrées doit correspondre au nombre de couleurs définies dans le paramètre <codeph>color</codeph>. Chaque valeur définit le pourcentage de la largeur où la couleur est échantillonnée sur 100 %. La valeur 0 représente la position de gauche dans la zone de dégradés, tandis que 255 représente la position de droite. 
           </apiDesc></apiParam><apiParam><apiItemName>hole</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Trou rectangulaire arrondi à découper au milieu du rectangle plein arrondi { x: #, y: #, w: #, h: #, r: # ou { br: #, bl: #, tl: #, tr: # } }.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace par programmation un rectangle dans l’objet Graphics de cet habillage. 
           <p>Le rectangle peut présenter des coins arrondis. Ses bords sont tracés avec le style de trait actuel de l’objet Graphics. Elle peut avoir un remplissage de couleur unie, un remplissage dégradé, ou pas de remplissage. Un remplissage uni peut avoir une transparence alpha. Un remplissage dégradé peut être linéaire ou radial. Vous pouvez définir jusqu’à 15 couleurs et valeurs alpha à des points spécifiques le long du dégradé. Vous pouvez également spécifier un angle de rotation ou une matrice de transformation pour le dégradé. Enfin, un trou rectangulaire arrondi peut être découpé dans le rectangle.</p>
           <p>Cette routine de tracé de rectangle polyvalente est utilisée par de nombreux habillages. Il appelle les méthodes <codeph>drawRect()</codeph> ou <codeph>drawRoundRect()</codeph> (dans la classe flash.display.Graphics) pour tracer dans l’objet Graphics de cet habillage.</p>
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:effectFinished"><apiName>effectFinished</apiName><shortdesc>
      Appelé par l’occurrence d’effet lors de la fin de sa lecture sur le composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Objet d’occurrence de l’effet en cours de lecture sur le composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé par l’occurrence d’effet lors de la fin de sa lecture sur le composant. Vous pouvez utiliser cette méthode pour restaurer une modification du composant apportée par la méthode <codeph>effectStarted()</codeph> lors du lancement de l’effet ou effectuer une autre action à la fin de l’effet.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:effectStarted"><apiName>effectStarted</apiName><shortdesc>
      Appelé par l’occurrence d’effet lors du début de sa lecture sur le composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Objet d’occurrence de l’effet en cours de lecture sur le composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé par l’occurrence d’effet lors du début de sa lecture sur le composant. Vous pouvez utiliser cette méthode pour effectuer une modification du composant dans le cadre d’un effet. Vous pouvez utiliser la méthode <codeph>effectFinished()</codeph> pour restaurer la modification à la fin de l’effet.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:endEffectsStarted"><apiName>endEffectsStarted</apiName><shortdesc>
      Termine tous les effets en cours de lecture sur le composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Termine tous les effets en cours de lecture sur le composant.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      Exécute toutes les liaisons dont l’objet UIComponent est la destination.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Exécute de façon récursive les liaisons pour les enfants de ce composant. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Exécute toutes les liaisons dont l’objet UIComponent est la destination.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:finishPrint"><apiName>finishPrint</apiName><shortdesc>
      Appelée après la fin de l’impression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Contient les propriétés du composant permettant de le restaurer dans son état avant l’impression.
           </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Composant qui vient de terminer l’impression. Il peut s’agir du composant actif ou de l’un de ses enfants.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelée après la fin de l’impression. Pour la classe UIComponent, la méthode n’effectue aucune action. Les conteneurs Flex remplacent la méthode pour restaurer le conteneur après l’impression.
           <p>Normalement, cette méthode n’est pas utilisée par les développeurs d’applications. </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusInHandler"><apiName>focusInHandler</apiName><shortdesc>
      Gestionnaire d’événement appelé lorsqu’un objet UIComponent obtient le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire d’événement appelé lorsqu’un objet UIComponent obtient le focus. Si vous remplacez cette méthode, assurez-vous d’appeler la version de classe de base.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc>
      Gestionnaire d’événement appelé lorsqu’un objet UIComponent perd le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire d’événement appelé lorsqu’un objet UIComponent perd le focus. Si vous remplacez cette méthode, assurez-vous d’appeler la version de classe de base.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
       
      Fournit l’objet d’automatisation à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant à l’index spécifié.
      
      </apiDesc><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’enfant à renvoyer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      Fournit l’objet d’automatisation à l’index spécifié. Cette liste ne doit inclure aucun enfant composite.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      
      Fournit la liste d’objets d’automatisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Les enfants d’automatisation. 
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      Fournit la liste d’objets d’automatisation. Cette liste n’inclut aucun enfant composite.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      Renvoie la coordonnée x des limites de l’élément à la taille d’élément spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée x des limites de l’élément à la taille d’élément spécifiée.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur des limites de l’élément ou NaN pour utiliser la largeur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur des limites de l’élément ou NaN pour utiliser la hauteur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la coordonnée x du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément et est calculé d’après la taille des limites, la position de la présentation et la matrice de transformation de la présentation spécifiées. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la coordonnée x des limites de l’élément à la taille d’élément spécifiée.
     
      <p>Cette méthode est généralement utilisée par les présentations pendant un appel de la méthode <codeph>measure()</codeph> pour prévoir la position de l’élément, si l’élément est redimensionné sur certaines dimensions. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      Renvoie la coordonnée y des limites de l’élément à la taille d’élément spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée y des limites de l’élément à la taille d’élément spécifiée.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur des limites de l’élément ou NaN pour utiliser la largeur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur des limites de l’élément ou NaN pour utiliser la hauteur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque la valeur de l’élément <codeph>postLayoutTransform</codeph> est true, la méthode renvoie la coordonnée y du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément et est calculé en fonction de la taille des limites spécifiées, la position de la présentation et de la matrice de transformation de la présentation. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la coordonnée y des limites de l’élément à la taille d’élément spécifiée. Cette méthode est généralement utilisée par les présentations pendant un appel de la méthode <codeph>measure()</codeph> pour prévoir la position de l’élément, si l’élément est redimensionné sur certaines dimensions. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc>
      Recherche les sélecteurs de type de cette occurrence UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau de sélecteurs de type de cette occurrence UIComponent.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Recherche les sélecteurs de type de cette occurrence UIComponent. L’algorithme remonte la chaîne de super-classe. Par exemple, supposons que la classe MyButton étende le contrôle Button. Une occurrence MyButton recherche d’abord un sélecteur de type MyButton, puis un sélecteur de type Button. Ensuite, elle recherche un sélecteur de type UIComponent (la chaîne de super-classe est considérée s’arrêter à la classe UIComponent et non Object).
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      Renvoie une valeur de contrainte de présentation, ce qui revient à obtenir le style de contrainte pour ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la valeur de contrainte de présentation, qui peut être spécifiée avec deux formes distinctes. Elle peut être spécifiée en tant que chaîne numérique, par exemple « 10 », ou en tant que chaîne identifier:numeric. Pour la chaîne identifier:numeric, l’identifiant est l’<codeph>id</codeph> d’un élément ConstraintRow ou ConstraintColumn. Par exemple, la valeur « cc1:10 » indique une valeur de 10 pour la colonne ConstraintColumn portant l’<codeph>id</codeph>« cc1 ».
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Nom de la contrainte de style, qui peut être l’un des suivants : left, right, top, bottom, verticalCenter, horizontalCenter, baseline.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une valeur de contrainte de présentation, ce qui revient à obtenir le style de contrainte pour ce composant.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      Méthode pratique pour déterminer si la hauteur explicite ou mesurée doit être utilisée
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nombre qui est explicitHeight si elle est définie ou measuredHeight dans le cas contraire. 
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Méthode pratique pour déterminer si la hauteur explicite ou mesurée doit être utilisée
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      Méthode pratique pour déterminer si la largeur explicite ou mesurée doit être utilisée
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nombre qui est explicitWidth si elle est définie ou measuredWidth dans le cas contraire. 
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Méthode pratique pour déterminer si la largeur explicite ou mesurée doit être utilisée
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getFocus"><apiName>getFocus</apiName><shortdesc>
      Récupère l’objet ayant actuellement le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet qui a le focus.
      
      </apiDesc><apiType value="flash.display:InteractiveObject"/></apiReturn></apiOperationDef><apiDesc>
      Récupère l’objet ayant actuellement le focus. Il peut ne pas s’agir de cet objet. Notez que cette méthode ne renvoie pas nécessairement le composant qui a le focus. Elle peut renvoyer le sous-composant interne du composant qui détient le focus. Pour obtenir le composant qui a le focus, utilisez la propriété <codeph>focusManager.focus</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      
      Renvoie la hauteur de présentation de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Hauteur de la présentation de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation et de la matrice de transformation de présentation de l’élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la hauteur de présentation de l’élément. Il s’agit de la taille que l’élément utilise pour son affichage à l’écran. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      
      Renvoie la largeur de la présentation de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Largeur de la présentation de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation et de la matrice de transformation de présentation de l’élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la largeur de présentation de l’élément. Il s’agit de la taille que l’élément utilise pour son affichage à l’écran. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      
      Renvoie la coordonnée x que l’élément utilise pour dessiner à l’écran. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée x que l’élément utilise pour le traçage sur l’écran. 
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la coordonnée x du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la coordonnée x que l’élément utilise pour dessiner à l’écran. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      
      Renvoie la coordonnée y utilisée par l’élément pour son affichage à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée y utilisée par l’élément pour son affichage à l’écran.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la coordonnée y du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la coordonnée y utilisée par l’élément pour son affichage à l’écran.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      
      Renvoie la matrice Matrix3D de transformation de présentation pour cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrice Matrix3D de transformation de présentation pour cet élément. Au lieu de modifier directement la valeur renvoyée, appelez la méthode <codeph>setLayoutMatrix()</codeph>.
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      
      Renvoie la matrice Matrix3D de transformation de présentation pour cet élément.
     
      <p>Cette matrice est habituellement définie par les propriétés de transformation du composant, comme <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      
      Renvoie la matrice de transformation utilisée pour calculer la présentation du composant par rapport à ses frères. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrice de transformation de la présentation pour cet élément. Au lieu de modifier directement la valeur renvoyée, appelez la méthode <codeph>setLayoutMatrix()</codeph>.
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      
      Renvoie la matrice de transformation utilisée pour calculer la présentation du composant par rapport à ses frères. 
           <p>Cette matrice est habituellement définie par les propriétés 2D du composant, telles que <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      
      Renvoie la hauteur maximale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Hauteur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la hauteur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille maximale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la hauteur maximale de l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      
      Renvoie la largeur maximale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Largeur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille maximale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la largeur maximale de l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      
      Renvoie la hauteur minimale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Hauteur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la hauteur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille minimale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la hauteur minimale de l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      
      Renvoie la largeur minimale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Largeur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille minimale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la largeur minimale de l’élément.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      
      Renvoie la hauteur préférée de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la hauteur préférée de l’élément. La hauteur par défaut est habituellement basée sur la taille d’élément par défaut et tout remplacement explicite éventuel. Pour un composant UIComponent, il s’agit de la même valeur que celle renvoyée par la méthode <codeph>getExplicitOrMeasuredHeight()</codeph>. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la hauteur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille préférée et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la hauteur préférée de l’élément.   
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      
      Renvoie la largeur préférée de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la largeur préférée de l’élément. La largeur par défaut est habituellement basée sur la taille d’élément par défaut et tout remplacement explicite éventuel. Pour le composant UIComponent, il s’agit de la même valeur que celle renvoyée par la méthode <codeph>getExplicitOrMeasuredWidth()</codeph>. 
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille préférée et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie la largeur préférée de l’élément.    
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getRepeaterItem"><apiName>getRepeaterItem</apiName><shortdesc>
      Renvoie l’élément de l’objet dataProvider utilisé par le composant Repeater spécifié pour produire ce composant Repeater, ou null si ce composant Repeater n’est pas répété.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Elément Repeater demandé.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>whichRepeater</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Nombre de l’objet Repeater, en comptant à partir du plus externe, en commençant à 0. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’élément de l’objet <codeph>dataProvider</codeph> utilisé par le composant Repeater spécifié pour produire ce composant Repeater, ou <codeph>null</codeph> si ce composant Repeater n’est pas répété. L’argument <codeph>whichRepeater</codeph> est de 0 pour l’objet Repeater le plus excentré, 1 pour le prochain objet Repeater vers l’intérieur, et ainsi de suite. Si la propriété <codeph>whichRepeater</codeph> n’est pas spécifiée, le composant Repeater le plus interne est utilisé.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getStyle"><apiName>getStyle</apiName><shortdesc>
      Extrait une propriété de style ayant été définie n’importe où dans la chaîne de recherche de style de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur du style.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Extrait une propriété de style ayant été définie n’importe où dans la chaîne de recherche de style de ce composant. 
           <p>Cette méthode étant utilisée pour obtenir un type de propriété de style, la valeur renvoyée peut être une valeur booléenne, de chaîne, de nombre, int, uint (pour une couleur RVB), de classe (pour un habillage) ou un type d’objet. Par conséquent, le type renvoyé est simplement spécifié en tant que ~~.</p>
           <p>Si vous obtenez une propriété de style particulière, vous connaissez son type et souhaitez souvent stocker le résultat dans une variable de ce type. Aucune projection n’est nécessaire depuis ~~ vers ce type.</p>
           <p>
      <codeph> var backgroundColor:uint = getStyle("backgroundColor"); </codeph>
      </p>
           <p>Si la propriété de style n’a pas été définie à un endroit quelconque de la chaîne de recherche de style, la valeur renvoyée par la méthode <codeph>getStyle()</codeph> est <codeph>undefined</codeph>. Notez que <codeph>undefined</codeph> est une valeur spéciale qui ne correspond pas à <codeph>false</codeph>, <codeph>""</codeph>, <codeph>NaN</codeph>, <codeph>0</codeph> ou <codeph>null</codeph>. Aucune valeur de style valide n’est jamais <codeph>undefined</codeph>. Vous pouvez utiliser la méthode <codeph>IStyleManager2.isValidStyleValue()</codeph> pour vérifier si une valeur a été définie.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:globalToContent"><apiName>globalToContent</apiName><shortdesc>
      Convertit un objet Point de coordonnées globales en coordonnées de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Pointer sur un objet Point dont les coordonnées sont relatives au composant.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Objet Point qui spécifie les coordonnées <i>x</i> et <i>y</i> dans le système de coordonnées global (de la scène) en tant que propriétés.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit un objet <codeph>Point</codeph> de coordonnées globales en coordonnées de contenu. Les coordonnées globales spécifient une position de pixel par rapport au coin supérieur gauche de la scène, qui est la bordure extérieure de l’application. Les coordonnées de contenu spécifient une position de pixel par rapport au coin supérieur gauche du contenu du composant. Elles incluent l’ensemble de la zone de contenu du composant, y compris les régions actuellement découpées, accessibles uniquement par défilement du composant. Le système de coordonnées du contenu permet de définir et d’obtenir les positions des enfants d’un conteneur qui utilise le positionnement absolu.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:hasCSSState"><apiName>hasCSSState</apiName><shortdesc>
      
      Renvoie true si la valeur currentCSSState n’est pas nulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si la valeur <codeph>currentCSSState</codeph> n’est pas égale à <codeph>null</codeph>. Par défaut, <codeph>currentCSSState</codeph> est identique à <codeph>currentState</codeph>. En l’absence d’état, elle renvoie la valeur false.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
      Renvoie <codeph>true</codeph> si la valeur <codeph>currentCSSState</codeph> n’est pas égale à <codeph>null</codeph>. Vous ne devez généralement pas appeler cette méthode directement. Elle est appelée par la méthode <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph>. 
           <p>Notez que les composants Spark utilisent leur état d’habillage comme pseudo état. Les composants Halo utilisent la propriété <codeph>currentState</codeph>. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:hasState"><apiName>hasState</apiName><shortdesc conref="mx.core.IStateClient2#hasState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Indique si l’état spécifié a été défini ou non 
      
      </apiDesc></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Le nom de l’état en cours de vérification.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.IStateClient2#hasState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:horizontalGradientMatrix"><apiName>horizontalGradientMatrix</apiName><shortdesc>
      Renvoie une matrice de zone pouvant être transmise à la méthode drawRoundRect() en tant que paramètre rot lors du tracé d’un dégradé horizontal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrice pour le dégradé horizontal.
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée de gauche du dégradé, en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée supérieure du dégradé, en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur du gradient, en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur du gradient, en pixels.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une matrice de zone pouvant être transmise à la méthode <codeph>drawRoundRect()</codeph> en tant que paramètre <codeph>rot</codeph> lors du tracé d’un dégradé horizontal.
           <p>Pour des raisons de performances, la matrice est stockée dans une variable statique réutilisée par tous les appels des méthodes <codeph>horizontalGradientMatrix()</codeph> et <codeph>verticalGradientMatrix()</codeph>. Par conséquent, la matrice obtenue doit être transmise à la méthode <codeph>drawRoundRect()</codeph> avant un nouvel appel de la méthode <codeph>horizontalGradientMatrix()</codeph> ou <codeph>verticalGradientMatrix()</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initAdvancedLayoutFeatures"><apiName>initAdvancedLayoutFeatures</apiName><shortdesc>
      Initialise l’implémentation et le stockage de certaines des fonctions de présentation avancées d’un composant utilisées plus rarement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialise l’implémentation et le stockage de certaines des fonctions de présentation avancées d’un composant utilisées plus rarement. Appelez cette fonction avant de tenter d’utiliser l’une des fonctions implémentées par l’objet AdvancedLayoutFeatures.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializationComplete"><apiName>initializationComplete</apiName><shortdesc>
      Termine l’initialisation de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Termine l’initialisation de ce composant.
           <p>Cette méthode est le dernier code qui s’exécute lors de l’ajout d’un composant à un parent pour la première fois à l’aide de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph>. Elle gère certaines tâches d’entretien liées à la distribution de l’événement <codeph>initialize</codeph>. Si vous écrivez un composant, il est inutile de remplacer cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializeAccessibility"><apiName>initializeAccessibility</apiName><shortdesc>
      Initialise le code d’accessibilité de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialise le code d’accessibilité de ce composant.
           <p>Cette méthode est appelée par la méthode<codeph>initialize()</codeph> pour accrocher le code d’accessibilité du composant. Ce code réside dans une classe distincte dans le package mx.accessibility. Chaque sous-classe prenant en charge l’accessibilité doit remplacer cette méthode, car le processus d’accroche utilise une variable statique distincte dans chaque sous-classe.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Initialise différentes propriétés qui effectuent le suivi des occurrences répétées de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>Objet parent contenant le composant Repeater qui a créé ce composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialise différentes propriétés qui effectuent le suivi des occurrences répétées de ce composant.
           <p>Une balise <codeph>&lt;mx:Repeater/></codeph> peut provoquer la création d’occurrences répétées d’un composant, une occurrence par élément du fournisseur de données de l’objet Repeater. Les propriétés <codeph>instanceIndices</codeph>, <codeph>repeaters</codeph> et <codeph>repeaterIndices</codeph> de l’objet UIComponent assurent le suivi des éléments de données et des objets Repeater respectifs desquels proviennent les différentes occurrences.</p>
           <p>Cette méthode est une méthode interne appelée automatiquement par la structure Flex. Il est inutile de l’appeler ou de la remplacer.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      Initialise la structure interne de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialise la structure interne de ce composant.
           <p>L’initialisation d’un composant UIComponent est la quatrième étape de la création d’un composant visuel. Elle est exécutée automatiquement la première fois que l’occurrence est ajoutée à un parent. Par conséquent, il est généralement inutile d’appeler la méthode <codeph>initialize()</codeph>. La structure Flex l’appelle automatiquement à partir du remplacement par le composant UIComponent des méthodes <codeph>addChild()</codeph> et <codeph>addChildAt()</codeph>.</p>
           <p>La première étape de la création d’une occurrence de composant visuel est la construction, avec l’opérateur <codeph>new</codeph> :</p>
           <pre>
      var okButton:Button = new Button();</pre>
           <p>Après la construction, la nouvelle occurrence de la classe Button est un objet DisplayObject isolé. Elle ne présente pas encore d’objet UITextField comme enfant permettant d’afficher son libellé et elle n’a pas de parent. </p>
           <p>La deuxième étape est la configuration de l’occurrence générée avec les propriétés, les styles et les gestionnaires d’événement appropriés :</p>
           <pre>
      okButton.label = "OK";
      okButton.setStyle("cornerRadius", 0);
      okButton.addEventListener(MouseEvent.CLICK, clickHandler);</pre>
           <p>La troisième étape est l’ajout de l’occurrence à un parent :</p>
           <pre>
      someContainer.addChild(okButton);</pre>
           <p>L’appel de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph> lors du premier ajout d’un composant à un parent a pour effet secondaire l’appel automatique de la méthode <codeph>initialize</codeph>.</p>
           <p>Cette méthode distribue d’abord un événement <codeph>preinitialize</codeph>, permettant aux développeurs utilisant ce composant de le modifier avant la création de sa structure interne. Il appelle ensuite la méthode <codeph>createChildren()</codeph> pour créer la structure interne du composant. Pour un composant Button, cette méthode crée et ajoute l’élément UITextField pour le libellé. Ensuite, il distribue un événement <codeph>initialize</codeph> permettant aux développeurs de modifier le composant après la création de sa structure interne.</p>
           <p>Notez que l’association d’un composant à un parent pour la première fois déclenche la création de sa structure interne. Si sa structure interne comporte d’autres composants UIComponent, alors il s’agit d’un processus récursif dans lequel l’arborescence d’objets DisplayObject augmente d’un nœud terminal à la fois.</p>
           <p>Si vous écrivez un composant, il est inutile de remplacer cette méthode.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      Marque un composant de sorte que sa méthode updateDisplayList() soit appelée au cours d’une actualisation d’écran ultérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Marque un composant de sorte que sa méthode <codeph>updateDisplayList()</codeph> soit appelée au cours d’une actualisation d’écran ultérieure.
           <p>L’invalidation est un mécanisme efficace pour éliminer la répétition inutile d’opérations. Elle retarde le traitement des modifications apportées à un composant à une actualisation d’écran ultérieure. Par exemple, si vous souhaitez modifier la largeur et la hauteur, il est inutile de mettre à jour le composant immédiatement après la modification de la largeur, puis de réaliser une autre mise à jour pour la hauteur. Il est ainsi plus efficace de modifier les deux propriétés et de rendre le composant une seule fois en utilisant les nouvelles dimensions.</p>
           <p>Les méthodes d’invalidation sont rarement appelées. En général, le fait de définir une propriété sur un composant provoque automatiquement l’appel de la méthode d’invalidation adaptée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayering"><apiName>invalidateLayering</apiName><shortdesc>
      Appelé par les éléments d’un composant pour indiquer que leur propriété de profondeur a changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.4"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Appelé par les éléments d’un composant pour indiquer que leur propriété <codeph>depth</codeph> a changé. Notez que bien que cette fonction soit définie sur <codeph>UIComponent</codeph>, les sous-classes sont chargées d’implémenter la prise en charge de la superposition complexe. Par défaut, seules <codeph>Group</codeph> et <codeph>DataGroup</codeph> prennent en charge la superposition arbitraire de leurs enfants. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/depth"><linktext>depth</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
     
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change. Si celles-ci diffèrent, la méthode est chargée de la réflexion du contenu de l'élément et de la mise à jour de la transformation post-mise en forme de l'élément afin que les descendants héritent d'un système de coordonnées par symétrie. IVisualElements met généralement en œuvre la réflexion en utilisant postLayoutTransformOffsets pour réduire l'axe des abscisses par -1 et pour translater la coordonnée de l'axe des x de l'origine par la largeur de l'élément. L'effet net de cette transformation « miroir » est d'inverser la direction dans laquelle l'axe des abscisses augmente sans modifier l'emplacement de l'élément par rapport à l'origine de son parent.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Méthode d’assistance permettant d’invalider la taille du parent et la liste d’affichage si cet objet affecte sa présentation (includeInLayout est défini sur true). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Méthode d’assistance permettant d’invalider la taille du parent et la liste d’affichage si cet objet affecte sa présentation (includeInLayout est défini sur true). 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Marque un composant de sorte que sa méthode commitProperties() soit appelée au cours d’une actualisation d’écran ultérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Marque un composant de sorte que sa méthode <codeph>commitProperties()</codeph> soit appelée au cours d’une actualisation d’écran ultérieure.
           <p>L’invalidation est un mécanisme efficace pour éliminer la répétition inutile d’opérations. Elle retarde le traitement des modifications apportées à un composant à une actualisation d’écran ultérieure. Par exemple, si vous souhaitez modifier la couleur du texte et la taille de la police, il est inutile de mettre à jour la couleur immédiatement après sa modification, puis de réaliser une autre mise à jour pour la taille de police. Il est plus efficace de modifier les deux propriétés et de rendre le texte une seule fois avec sa nouvelle couleur et sa nouvelle taille.</p>
           <p>Les méthodes d’invalidation sont rarement appelées. En général, le fait de définir une propriété sur un composant provoque automatiquement l’appel de la méthode d’invalidation adaptée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      Marque un composant de sorte que sa méthode measure() soit appelée au cours d’une actualisation d’écran ultérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Marque un composant de sorte que sa méthode <codeph>measure()</codeph> soit appelée au cours d’une actualisation d’écran ultérieure.
           <p>L’invalidation est un mécanisme efficace pour éliminer la répétition inutile d’opérations. Elle retarde le traitement des modifications apportées à un composant à une actualisation d’écran ultérieure. Par exemple, si vous souhaitez modifier le texte et la taille de la police, il est inutile de mettre à jour le composant immédiatement après la modification du texte, puis de réaliser une autre mise à jour pour la taille de police. Il est ainsi plus efficace de modifier les deux propriétés et de rendre le composant une seule fois en utilisant le nouveau texte à sa nouvelle taille.</p>
           <p>Les méthodes d’invalidation sont rarement appelées. En général, le fait de définir une propriété sur un composant provoque automatiquement l’appel de la méthode d’invalidation adaptée.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:isOurFocus"><apiName>isOurFocus</apiName><shortdesc>
      Généralement remplacée par les composants contenant des objets UITextField, où l’objet UITextField obtient le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si l’objet UITextField a le focus.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet UIComponent contenant un objet UITextField pouvant recevoir le focus.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Généralement remplacée par les composants contenant des objets UITextField, où l’objet UITextField obtient le focus.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc>
      Gestionnaire d’événement appelé pour un événement keyDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire d’événement appelé pour un événement <codeph>keyDown</codeph>. Si vous remplacez cette méthode, assurez-vous d’appeler la version de classe de base.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc>
      Gestionnaire d’événement appelé pour un événement keyUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire d’événement appelé pour un événement <codeph>keyUp</codeph>. Si vous remplacez cette méthode, assurez-vous d’appeler la version de classe de base.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:localToContent"><apiName>localToContent</apiName><shortdesc>
      Convertit un objet Point de coordonnées locales en coordonnées de contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Pointer sur un objet Point dont les coordonnées sont relatives au système de coordonnées du contenu.
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Objet Point qui spécifie les coordonnées <i>x</i> et <i>y</i> dans le système de coordonnées local en tant que propriétés.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit un objet <codeph>Point</codeph> de coordonnées locales en coordonnées de contenu. Les coordonnées locales spécifient une position de pixel par rapport au coin supérieur gauche du composant. Les coordonnées de contenu spécifient une position de pixel par rapport au coin supérieur gauche du contenu du composant. Elles incluent l’ensemble de la zone de contenu du composant, y compris les régions actuellement découpées, accessibles uniquement par défilement du composant. Le système de coordonnées du contenu permet de définir et d’obtenir les positions des enfants d’un conteneur qui utilise le positionnement absolu.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToLocal()"><linktext>contentToLocal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc>
      
      Renvoie la valeur true si cssState correspond à currentCSSState. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si <codeph>cssState</codeph> correspond à <codeph>currentCSSState</codeph>. Par défaut, <codeph>currentCSSState</codeph> est identique à <codeph>currentState</codeph>. En l’absence d’état, elle renvoie la valeur null.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/><apiDesc>Une valeur possible de <codeph>CSSCondition.value</codeph>. Elle représente l’état actuel de ce composant utilisé pour faire correspondre les pseudo-sélecteurs CSS.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie <codeph>true</codeph> si <codeph>cssState</codeph> correspond à <codeph>currentCSSState</codeph>. Vous ne devez généralement pas appeler cette méthode directement. Elle est appelée par la méthode <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph>. 
           <p>Notez que les composants Spark utilisent leur état d’habillage comme pseudo état. Les composants Halo utilisent la propriété <codeph>currentState</codeph>. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc>
      
      Détermine si l’occurrence est identique au, ou est une sous-classe du, type donné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si <codeph>cssType</codeph> est dans la hiérarchie des sélecteurs de types qualifiés. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/><apiDesc>Objet CSSSelector. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Détermine si l’occurrence est identique au, ou est une sous-classe du, type donné. Vous ne devez généralement pas appeler cette méthode directement. Elle est appelée par la méthode <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph>. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      Mesure le texte HTML spécifié, pouvant contenir des balises HTML telles que &amp;lt;font&amp;gt; et &amp;lt;b&amp;gt;, en supposant qu’il s’affiche sur un objet UITextField à une seule ligne, avec un format UITextFormat déterminé par les styles de ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextLineMetrics contenant les mesures du texte.
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant le texte HTML à mesurer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mesure le texte HTML spécifié, pouvant contenir des balises HTML telles que <codeph>&lt;font></codeph> et <codeph>&lt;b></codeph>, en supposant qu’il s’affiche sur un objet UITextField à une seule ligne, avec un format UITextFormat déterminé par les styles de ce composant UIComponent.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureText"><apiName>measureText</apiName><shortdesc>
      Mesure le texte spécifié, en supposant qu’il s’affiche sur un objet UITextField (ou UIFTETextField) à une seule ligne, avec un format UITextFormat déterminé par les styles de ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextLineMetrics contenant les mesures du texte.
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant le texte à mesurer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Mesure le texte spécifié, en supposant qu’il s’affiche sur un objet UITextField (ou UIFTETextField) à une seule ligne, avec un format UITextFormat déterminé par les styles de ce composant UIComponent. Ne fonctionne pas avec les composants Spark, car ils n’utilisent pas UITextField (ou UIFTETextField). Pour mesurer du texte dans les composants Spark, vous pouvez obtenir les mesures d’un composant spark.components.Label ou spark.components.RichText
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule la taille par défaut du composant. Peut également calculer sa taille minimale par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule la taille par défaut du composant. Peut également calculer sa taille minimale par défaut. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent. 
           <p>Vous n’appelez pas cette méthode directement. Flex appelle la méthode <codeph>measure()</codeph> lorsque le composant est ajouté à un conteneur à l’aide de la méthode <codeph>addChild()</codeph> et lorsque la méthode <codeph>invalidateSize()</codeph> du composant est appelée. </p>
           <p>Lorsque vous définissez une hauteur et une largeur spécifiques à un composant, Flex n’appelle pas la méthode <codeph>measure()</codeph>, même si vous appelez explicitement la méthode <codeph>invalidateSize()</codeph>. En d’autres termes, Flex appelle uniquement la méthode <codeph>measure()</codeph> si la propriété <codeph>explicitWidth</codeph> ou <codeph>explicitHeight</codeph> du composant a la valeur NaN. </p>
           <p>Dans votre remplacement de cette méthode, vous devez définir les propriétés <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph> pour définir la taille par défaut. Vous pouvez éventuellement définir les propriétés <codeph>measuredMinWidth</codeph> et <codeph>measuredMinHeight</codeph> pour définir la taille minimale par défaut.</p>
           <p>La plupart des composants calculent ces valeurs en fonction du contenu qu’ils affichent et d’après les propriétés qui affectent l’affichage du contenu. Quelques composants disposent simplement de valeurs par défaut codées de manière irréversible. </p>
           <p>L’objectif conceptuel de la propriété <codeph>measure()</codeph> est que le composant doit fournir sa propre taille naturelle ou intrinsèque comme valeur par défaut. Par conséquent, les propriétés <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph> doivent être déterminées par des facteurs comme :</p>
      <ul>
         <li>La quantité de texte que le composant doit afficher.</li>
         <li>Les styles, par exemple <codeph>fontSize</codeph>, de ce texte.</li>
         <li>La taille d’une image JPEG affichée par le composant.</li>
         <li>Les tailles mesurées ou explicites des enfants du composant.</li>
         <li>Les bordures, marges et espacements.</li>
      </ul>
           <p>Dans certains cas, aucune méthode intrinsèque ne permet de déterminer les valeurs par défaut. Par exemple, un simple composant GreenCircle peut simplement définir measuredWidth = 100 et measuredHeight = 100 dans sa méthode <codeph>measure()</codeph> pour donner une taille par défaut raisonnable. Dans d’autres cas, comme le contrôle TextArea, un calcul approprié (comme rechercher la hauteur et la largeur correctes qui permettront d’afficher tout le texte et respecteront les proportions d’un rectangle d’or) peut s’avérer trop long pour que cela en vaille la peine.</p>
           <p>L’implémentation par défaut de la méthode <codeph>measure()</codeph> permet de définir les propriétés <codeph>measuredWidth</codeph>, <codeph>measuredHeight</codeph>, <codeph>measuredMinWidth</codeph> et <codeph>measuredMinHeight</codeph> sur<codeph>0</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:move"><apiName>move</apiName><shortdesc>
       Déplace le composant vers une position spécifiée dans son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Position de gauche du composant dans son parent.
             </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position supérieure du composant dans son parent.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Déplace le composant vers une position spécifiée dans son parent. L’appel de cette méthode est exactement identique à la définition des propriétés <codeph>x</codeph> et <codeph>y</codeph> du composant.
             <p>Si vous remplacez la méthode <codeph>updateDisplayList()</codeph> dans un composant personnalisé, appelez la méthode <codeph>move()</codeph> plutôt que de définir les propriétés <codeph>x</codeph> et <codeph>y</codeph>. La différence est que la méthode <codeph>move()</codeph> modifie l’emplacement du composant, puis distribue un événement <codeph>move</codeph> lors de l’appel de la méthode. En effet, le définition des propriétés <codeph>x</codeph> et <codeph>y</codeph> modifie l’emplacement du composant et distribue l’événement lors de la prochaine actualisation de l’écran.</p>
             </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc>
      Propage les modifications de style aux enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant le nom de la propriété de style.
           </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Notifier tous les enfants de ce composant de manière récursive.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Propage les modifications de style aux enfants. En règle générale, vous n’avez pas besoin d’appeler cette méthode.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:owns"><apiName>owns</apiName><shortdesc>
      Renvoie true si la chaîne de propriétés du propriétaire pointe de l’enfant vers ce composant UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si l’enfant est le parent ou est administré par ce composant UIComponent. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Composant UIComponent. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie <codeph>true</codeph> si la chaîne de propriétés <codeph>owner</codeph> pointe de <codeph>child</codeph> à ce composant UIComponent. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      Appelé par Flex lorsqu’un composant UIComponent est ajouté à ou supprimé d’un parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Parent de cet objet IUIComponent. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé par Flex lorsqu’un composant UIComponent est ajouté à ou supprimé d’un parent. Les développeurs n’ont généralement pas besoin d’appeler cette méthode. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:prepareToPrint"><apiName>prepareToPrint</apiName><shortdesc>
      Prépare un objet IFlexDisplayObject pour l’impression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet contenant les propriétés du composant actif requises par la méthode <codeph>finishPrint()</codeph> pour le restaurer dans son état précédent.
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Composant à imprimer. Il peut s’agir du composant actif ou de l’un de ses enfants.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Prépare un objet IFlexDisplayObject pour l’impression. Pour la classe UIComponent, la méthode n’effectue aucune action. Les conteneurs Flex remplacent la méthode pour préparer l’impression, par exemple en supprimant les barres de défilement sur la sortie imprimée. 
           <p>Normalement, cette méthode n’est pas utilisée par les développeurs d’applications. </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc>
      Construit ou reconstruit le cache de style CSS pour ce composant et, si le paramètre recursive a la valeur true, pour tous les descendants de ce composant également.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Régénère de façon récursive le cache du style de tous les enfants de ce composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Construit ou reconstruit le cache de style CSS pour ce composant et, si le paramètre <codeph>recursive</codeph> a la valeur <codeph>true</codeph>, pour tous les descendants de ce composant également.
           <p>La structure Flex appelle cette méthode dans les situations suivantes :</p>
           <ul>
        <li>Lorsque vous ajoutez un composant UIComponent à un parent à l’aide de la méthode <codeph>addChild()</codeph> ou <codeph>addChildAt()</codeph>.</li>
        <li>Lorsque vous modifiez la propriété <codeph>styleName</codeph> d’un composant UIComponent.</li>
        <li>Lorsque vous définissez un style dans un sélecteur CSS à l’aide de la méthode <codeph>setStyle()</codeph> de CSSStyleDeclaration.</li>
      </ul>
           <p>La génération du cache de style est une opération lourde en calculs, il est donc déconseillé de modifier la propriété <codeph>styleName</codeph> ou de définir les styles de sélecteur sans y être contraint.</p>
           <p>Cette méthode n’est pas appelée lorsque vous définissez un style d’occurrence en appelant la méthode <codeph>setStyle()</codeph>de l’objet UIComponent. La définition d’un style d’occurrence est une opération relativement rapide par rapport à la définition d’un style de sélecteur.</p>
           <p>Il est inutile d’appeler ou de remplacer cette méthode.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
      Pour chaque événement d’effet, enregistre le gestionnaire EffectManager comme l’un des écouteurs d’événement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Nom des événements d’effet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Pour chaque événement d’effet, enregistre le gestionnaire EffectManager comme l’un des écouteurs d’événement. En règle générale, vous n’avez pas besoin d’appeler cette méthode.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:removeStyleClient"><apiName>removeStyleClient</apiName><shortdesc>
      Supprime un client de style non visuel de cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le client de style non visuel qui a été transmis en tant que paramètre <codeph>styleClient</codeph>. 
     
      </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>styleClient</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>L’interface <codeph>IAdvancedStyleClient</codeph> à supprimer de la liste de clients de style non visuels de ce composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime un client de style non visuel de cette occurrence de composant. Une fois que cette méthode a été appelée, le client de style n’héritera plus les changements de style à partir de cette occurrence de composant. De façon colatérale, cette méthode définit la propriété <codeph>styleParent</codeph> du paramètre <codeph>styleClient</codeph> sur <codeph>null</codeph>. Si le paramètre <codeph>styleClient</codeph> n’a pas été ajouté à cette occurrence de composant, aucune action n’est entreprise. 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.addStyleClient.xml"><linktext>addStyleClient</linktext></link><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      Réexécute l’événement spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si une réexécution a réussi.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Evénement à réexécuter.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Réexécute l’événement spécifié. Un auteur de composant doit probablement appeler l’événement super.replayAutomatableEvent si le comportement de réexécution par défaut a été défini dans une super-classe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      
      Résout un enfant en utilisant l’ID fourni.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’enfants qui correspondent au critère ou <codeph>null</codeph> si aucun enfant n’a pu être résolu.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/><apiDesc>Ensemble de propriétés décrivant l’enfant. Le critère peut contenir des valeurs d’expressions régulières résultant dans l’association de plusieurs enfants.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Résout un enfant en utilisant l’ID fourni. L’ID est un ensemble de propriétés tel que fourni par la méthode <codeph>createAutomationIDPart()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      Cette méthode est appelée lors de la construction d’une classe UIComponent, puis chaque fois que ResourceManager envoie un événement « change » pour indiquer que les ressources localisées ont subi une modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Cette méthode est appelée lors de la construction d’une classe UIComponent, puis chaque fois que ResourceManager envoie un événement <codeph>"change"</codeph> pour indiquer que les ressources localisées ont subi une modification.
           <p>Cet événement est distribué lorsque vous définissez la propriété <codeph>localeChain</codeph> de la classe ResourceManager, lorsqu’un module de ressource termine de se charger et lorsque vous appelez la méthode <codeph>update()</codeph> de la classe ResourceManager.</p>
           <p>Les sous-classes doivent remplacer cette méthode et, après avoir appelé la méthode <codeph>super.resourcesChanged()</codeph>, effectuer les tâches appropriées en réponse aux nouvelles valeurs de ressources.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resumeBackgroundProcessing"><apiName>resumeBackgroundProcessing</apiName><shortdesc>
      Reprend le traitement en arrière-plan des méthodes mises en attente par la méthode callLater(), après un appel à la méthode suspendBackgroundProcessing().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Reprend le traitement en arrière-plan des méthodes mises en attente par la méthode <codeph>callLater()</codeph>, après un appel à la méthode <codeph>suspendBackgroundProcessing()</codeph>.
           <p>Reportez-vous à la description de la méthode <codeph>suspendBackgroundProcessing()</codeph> pour plus d’informations.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      Dimensionne l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Largeur de l’objet.
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Hauteur de l’objet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Dimensionne l’objet. Contrairement à la définition directe des propriétés <codeph>width</codeph> et <codeph>height</codeph>, l’appel de la méthode <codeph>setActualSize()</codeph> ne définit pas les propriétés <codeph>explictWidth</codeph> et <codeph>explicitHeight</codeph>. Un calcul de présentation ultérieur peut donc restaurer l’objet sur sa taille précédente. Cette méthode est principalement utilisée par les développeurs de composants qui implémentent la méthode <codeph>updateDisplayList()</codeph>, par des effets, et par le gestionnaire LayoutManager.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      Définit une valeur de contrainte de présentation, ce qui revient à définir le style de contrainte pour ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Nom de la contrainte de style, qui peut être l’un des suivants : left, right, top, bottom, verticalCenter, horizontalCenter, baseline.
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>La valeur de la contrainte peut être spécifiée sous l’une ou l’autre forme. Elle peut être spécifiée en tant que chaîne numérique, par exemple « 10 », ou en tant que chaîne identifier:numeric. Pour la chaîne identifier:numeric, l’identifiant est l’<codeph>id</codeph> d’un élément ConstraintRow ou ConstraintColumn. Par exemple, la valeur « cc1:10 » indique une valeur de 10 pour la colonne ConstraintColumn portant l’<codeph>id</codeph>« cc1 ».
           
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit une valeur de contrainte de présentation, ce qui revient à définir le style de contrainte pour ce composant.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setCurrentState"><apiName>setCurrentState</apiName><shortdesc>
      Définir l’état actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Nom du nouvel état d’affichage.
           </apiDesc></apiParam><apiParam><apiItemName>playTransition</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, lire la transition appropriée lorsque l’état d’affichage change.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définir l’état actuel.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/currentState"><linktext>currentState</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      Définit le focus sur ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Définit le focus sur ce composant. Le composant peut à son tour transmettre le focus à un sous-composant.
           <p><b>Remarque :</b> seules les commandes TextInput et TextArea affichent une surbrillance lorsque cette méthode définit le focus. Toutes les commandes s’affichent en surbrillance lorsque l’utilisateur les parcourt avec la touche de tabulation.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      
      Définit les coordonnées utilisées par l’élément pour son affichage à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée x du coin supérieur gauche du cadre de sélection. 
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée y du coin supérieur gauche du cadre de sélection.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> est défini sur <codeph>true</codeph>, l’élément est placé de manière à faire correspondre le coin supérieur gauche de son cadre de sélection avec les coordonnées (x, y). Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Définit les coordonnées utilisées par l’élément pour son affichage à l’écran.
           <p>Notez que les appels de la méthode <codeph>setLayoutBoundSize()</codeph> peuvent affecter la position de présentation. Vous devez donc appeler <codeph>setLayoutBoundPosition()</codeph> après avoir appelé <codeph>setLayoutBoundSize()</codeph>. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      
      Définit la taille de la présentation de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur de la présentation de l’élément. 
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur de la présentation de l’élément. 
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, les dimensions spécifiées sont celles du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Définit la taille de la présentation de l’élément. Il s’agit de la taille que l’élément utilise pour son affichage à l’écran. 
      
      <p>Si les paramètres <codeph>width</codeph> et/ou <codeph>height</codeph> ne sont pas spécifiés (NaN), Flex définit la taille de la présentation de l’élément sur la largeur et/ou la hauteur préférées.</p>
     
      <p>Notez que les appels de la méthode <codeph>setLayoutBoundSize()</codeph> peuvent affecter la position de présentation. Vous devez donc appeler <codeph>setLayoutBoundPosition()</codeph> après avoir appelé <codeph>setLayoutBoundSize()</codeph>. </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      
      Définit la matrice de transformation Matrix3D utilisée pour calculer la taille et la position de la présentation du composant par rapport à ses frères.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/><apiDesc>Matrice. 
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>La valeur <codeph>true</codeph> entraîne le conteneur parent à réorganiser ses enfants. En règle générale, vous transmettez la valeur <codeph>true</codeph> à la méthode <codeph>invalidateLayout()</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Définit la matrice de transformation Matrix3D utilisée pour calculer la taille et la position de la présentation du composant par rapport à ses frères.
           <p>Cette matrice est habituellement définie par les propriétés de transformation du composant, comme <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
      
      <p>Notez que la matrice de présentation Matrix3D est utilisée comme facteur dans les méthodes <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> et <codeph>getLayoutSize()</codeph> lorsqu’elle est calculée dans les coordonnées du parent, ainsi que dans <codeph>getLayoutPosition()</codeph> dans les coordonnées du parent et de l’enfant. Généralement, les présentations permettant de calculer la matrice de transformation appellent explicitement cette méthode et utilisent des tailles dans les coordonnées de l’enfant. Les présentations qui appellent cette méthode transmettent la valeur <codeph>false</codeph> à la méthode <codeph>invalidateLayout</codeph> afin qu’une transmission de présentation suivante ne soit pas déclenchée.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      
      Définit la matrice de transformation utilisée pour calculer la taille de présentation et la position du composant par rapport à ses frères. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/><apiDesc>Matrice. 
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>La valeur <codeph>true</codeph> entraîne le conteneur parent à réorganiser ses enfants. En règle générale, vous transmettez la valeur <codeph>true</codeph> à la méthode <codeph>invalidateLayout()</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Définit la matrice de transformation utilisée pour calculer la taille de présentation et la position du composant par rapport à ses frères. 
           <p>La matrice est habituellement définie par les propriétés 2D du composant, telles que <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
      
      <p>Notez que la matrice de présentation Matrix est utilisée comme facteur dans les méthodes <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> et <codeph>getLayoutSize()</codeph> lorsqu’elle est calculée dans les coordonnées du parent, ainsi que dans <codeph>getLayoutPosition()</codeph> dans les coordonnées du parent et de l’enfant. Généralement, les présentations permettant de calculer la matrice de transformation appellent explicitement cette méthode et utilisent des tailles dans les coordonnées de l’enfant. Les présentations qui appellent cette méthode transmettent la valeur <codeph>false</codeph> à la méthode <codeph>invalidateLayout</codeph> afin qu’une transmission de présentation suivante ne soit pas déclenchée.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:setStretchXY"><apiName>setStretchXY</apiName><shortdesc>
      Spécifie un facteur d’étirement de transformation dans le sens horizontal et vertical.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stretchX</apiItemName><apiType value="Number"/><apiDesc>Composante horizontale du facteur d’étirement.
      </apiDesc></apiParam><apiParam><apiItemName>stretchY</apiItemName><apiType value="Number"/><apiDesc>Composante verticale du facteur d’étirement.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Spécifie un facteur d’étirement de transformation dans le sens horizontal et vertical. Le facteur d’étirement est appliqué à la matrice calculée avant toute autre transformation.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setStyle"><apiName>setStyle</apiName><shortdesc>
      Définit une propriété de style pour cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>Nouvelle valeur du style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit une propriété de style pour cette occurrence de composant.
           <p>Ceci peut remplacer un style défini globalement.</p>
           <p>L’appel de la méthode <codeph>setStyle()</codeph> peut entraîner une baisse des performances. Utilisez-la uniquement lorsque cela est nécessaire.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setVisible"><apiName>setVisible</apiName><shortdesc>
      Appelé lorsque la propriété visible est modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Nouvelle valeur de la propriété <codeph>visible</codeph>. Spécifiez <codeph>true</codeph> pour afficher le composant et <codeph>false</codeph> pour le masquer. 
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est<codeph> true</codeph>, ne distribuez pas d’événement. Si la valeur est <codeph>false</codeph>, distribuez un événement <codeph>show</codeph> lorsque le composant devient visible et un événement <codeph>hide</codeph> lorsqu’il devient invisible. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsque la propriété <codeph>visible</codeph> est modifiée. Définissez la propriété <codeph>visible</codeph> pour afficher ou masquer un composant au lieu d’appeler cette méthode directement. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:stateChanged"><apiName>stateChanged</apiName><shortdesc>
      Cette méthode est appelée lorsqu’un état change pour vérifier si des styles spécifiques à l’état s’appliquent à ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="String"/><apiDesc>Nom de l’état antérieur. 
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="String"/><apiDesc>Nom du nouvel état.
           </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Défini sur <codeph>true</codeph> pour exécuter une vérification récursive. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Cette méthode est appelée lorsqu’un état change pour vérifier si des styles spécifiques à l’état s’appliquent à ce composant. S’il peut exister un pseudo-sélecteur CSS correspondant à l’état actif, le cache de style doit être régénéré pour cette occurrence, ainsi qu’éventuellement tous les enfants si le paramètre <codeph>recursive</codeph> est défini sur <codeph>true</codeph>.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      Détecte les modifications apportées aux propriétés de style.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style ou null si tous les styles de ce composant ont été modifiés.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détecte les modifications apportées aux propriétés de style. Lorsqu’une propriété de style est définie, Flex appelle la méthode <codeph>styleChanged()</codeph> et lui transmet le nom du style défini.
           <p>Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent. Lorsque vous créez un composant personnalisé, vous pouvez remplacer la méthode <codeph>styleChanged()</codeph> pour vérifier le nom de style qui lui a été transmis et traiter la modification en conséquence. Vous pouvez ainsi remplacer le comportement par défaut d’un style existant ou ajouter vos propres propriétés de style personnalisé.</p>
           <p>Si vous traitez la propriété de style, le remplacement de la méthode <codeph>styleChanged()</codeph> doit appeler la méthode <codeph>invalidateDisplayList()</codeph> pour que Flex exécute la méthode <codeph>updateDisplayList()</codeph> du composant lors de la prochaine mise à jour de l’affichage.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      Flex() appelle la méthode stylesInitialized() lorsque les styles d’un composant sont d’abord initialisés. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Flex appelle la méthode <codeph>stylesInitialized()</codeph> lorsque les styles d’un composant sont d’abord initialisés.
           <p>Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent. Flex garantit que les styles du composant sont entièrement initialisés avant le premier appel des méthodes <codeph>measure</codeph> et <codeph>updateDisplayList</codeph> du composant. Cela suffit pour la plupart des composants. Si toutefois vous devez accéder rapidement aux valeurs de style, vous pouvez remplacer la fonction stylesInitialized() pour accéder aux propriétés de style dès leur première initialisation.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Bloque le traitement en arrière-plan des méthodes placées en attente par callLater(), jusqu’à l’appel de la méthode resumeBackgroundProcessing().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Bloque le traitement en arrière-plan des méthodes placées en attente par <codeph>callLater()</codeph>, jusqu’à l’appel de la méthode <codeph>resumeBackgroundProcessing()</codeph>.
           <p>Ces méthodes peuvent être utiles lorsque vous avez du code urgent qui doit s’exécuter sans interruption. Par exemple, lorsque vous définissez la propriété <codeph>suspendBackgroundProcessing</codeph> d’un effet sur <codeph>true</codeph>, la méthode <codeph>suspendBackgroundProcessing()</codeph> est automatiquement appelée lors du début de la lecture et la méthode <codeph>resumeBackgroundProcessing</codeph> est appelée lors de l’arrêt, afin d’assurer une animation fluide.</p>
           <p>Puisque le gestionnaire LayoutManager utilise la méthode <codeph>callLater()</codeph>, les méthodes <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> et <codeph>updateDisplayList()</codeph> ne sont pas appelées entre les appels des méthodes <codeph>suspendBackgroundProcessing()</codeph> et <codeph>resumeBackgroundProcessing()</codeph>.</p>
           <p>Il est possible pour une méthode externe et interne (c’est-à-dire une méthode appelée par la méthode externe) d’appeler les méthodes <codeph>suspendBackgroundProcessing()</codeph> et <codeph>resumeBackgroundProcessing()</codeph>, car ces méthodes incrémentent et décrémentent en réalité un compteur qui détermine si le traitement en arrière-plan est effectué.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformAround"><apiName>transformAround</apiName><shortdesc conref="mx.core.ILayoutElement#transformAround()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Point, dans les coordonnées du composant, à garder fixe par rapport à son parent. 
           </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs d’échelle de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>nouvelles valeurs de rotation de la transformation
           </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs de translation de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs d’échelle après mise en forme de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs de rotation après mise en forme de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs de translation après mise en forme de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, la taille et l’affichage du conteneur parent sont invalidés. Les présentations qui appellent cette méthode transmettent <codeph>false</codeph> afin qu’une transmission de présentation suivante ne soit pas déclenchée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.ILayoutElement#transformAround()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformPointToParent"><apiName>transformPointToParent</apiName><shortdesc>
      Méthode utilitaire permettant de transformer un point spécifié dans les coordonnées locales de cet objet en emplacement dans les coordonnées du parent de l’objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>localPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Le point à transformer, spécifié dans les coordonnées locales de l’objet. 
     
      </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Point Vector3D contenant le résultat antérieur à la présentation. Si null, le paramètre est ignoré. 
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Point Vector3D contenant le résultat postérieur à la présentation. Si null, le paramètre est ignoré. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode utilitaire permettant de transformer un point spécifié dans les coordonnées locales de cet objet en emplacement dans les coordonnées du parent de l’objet. Le résultat antérieur et postérieur à la présentation est défini sur les paramètres <codeph>position</codeph> et <codeph>postLayoutPosition</codeph>, s’ils n’ont pas la valeur null. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Trace l’objet et/ou dimensionne et place ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace l’objet et/ou dimensionne et place ses enfants. Il s’agit d’une méthode avancée que vous pouvez remplacer lorsque vous créez une sous-classe de la classe UIComponent. 
           <p>Vous n’appelez pas cette méthode directement. Flex appelle la méthode <codeph>updateDisplayList()</codeph> lorsque le composant est ajouté à un conteneur par le biais de la méthode <codeph>addChild()</codeph> et lorsque la méthode <codeph>invalidateDisplayList()</codeph> du composant est appelée. </p>
           <p>Si le composant n’a pas d’enfant, cette méthode permet de réaliser un tracé par programmation en utilisant les méthodes sur l’objet Graphics du composant, par exemple <codeph>graphics.drawRect()</codeph>.</p>
           <p>Si le composant a au moins un enfant, cette méthode permet d’appeler les méthodes <codeph>move()</codeph> et <codeph>setActualSize()</codeph> sur ces enfants.</p>
           <p>Les composants peuvent réaliser un tracé par programmation, même s’ils ont des enfants. Pour ce faire, utilisez les propriétés <codeph>unscaledWidth</codeph> et <codeph>unscaledHeight</codeph> du composant comme ses limites.</p>
           <p>Il est indispensable d’utiliser <codeph>unscaledWidth</codeph> et <codeph>unscaledHeight</codeph> à la place des propriétés <codeph>width</codeph> et <codeph>height</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      
      Valide la position et la taille des enfants, et trace d’autres effets visuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Valide la position et la taille des enfants, et trace d’autres effets visuels. Si la méthode <codeph>LayoutManager.invalidateDisplayList()</codeph> est appelée avec cette interface ILayoutManagerClient, la méthode <codeph>validateDisplayList()</codeph> est alors appelée lorsqu’il est temps de mettre à jour la liste d’affichage.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateNow"><apiName>validateNow</apiName><shortdesc>
      Valide et actualise les propriétés et la présentation de cet objet, puis le retrace si nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Valide et actualise les propriétés et la présentation de cet objet, puis le retrace si nécessaire. Les propriétés de traitement qui nécessitent de nombreux calculs ne sont généralement pas traitées avant la fin de l’exécution du script. Par exemple, la définition de la propriété <codeph>width</codeph> est retardée, car elle peut nécessiter un nouveau calcul des largeurs des enfants ou du parent de l’objet. Le fait de retarder le traitement l’empêche de se répéter lorsque le code de l’application définit la propriété <codeph>width</codeph> à plusieurs reprises. Cette méthode permet de remplacer manuellement ce comportement.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      Utilisé par la logique de présentation pour valider les propriétés d’un composant par l’appel de la méthode commitProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Utilisé par la logique de présentation pour valider les propriétés d’un composant par l’appel de la méthode <codeph>commitProperties()</codeph>. En général, les sous-classes doivent remplacer la méthode <codeph>commitProperties()</codeph> et non cette méthode.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateSize"><apiName>validateSize</apiName><shortdesc>
      
      Valide la taille mesurée du composant si la méthode LayoutManager.invalidateSize() est appelée avec cette interface ILayoutManagerClient, puis la méthode validateSize() est appelée lorsqu’il est temps d’effectuer les mesures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, cette méthode est appelée sur les enfants des objets.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Valide la taille mesurée du composant si la méthode <codeph>LayoutManager.invalidateSize()</codeph> est appelée avec cette interface ILayoutManagerClient, puis la méthode <codeph>validateSize()</codeph> est appelée lorsqu’il est temps d’effectuer les mesures.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
      Traite à la fois les événements valid et invalid d’une classe Validator assignée à ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>Objet d’événement pour la validation.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Traite à la fois les événements <codeph>valid</codeph> et <codeph>invalid</codeph> d’une classe Validator assignée à ce composant.
           <p>Vous gérez en général les événements <codeph>valid</codeph> et <codeph>invalid</codeph> distribués par une classe Validator en assignant des écouteurs d’événements aux classes Validator. Si vous voulez gérer directement les événements de validation dans le composant en cours de validation, vous pouvez remplacer cette méthode pour gérer les événements <codeph>valid</codeph> et <codeph>invalid</codeph>. La méthode <codeph>super.validationResultHandler(event)</codeph> est généralement appelée dans le remplacement.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:verticalGradientMatrix"><apiName>verticalGradientMatrix</apiName><shortdesc>
      Renvoie une matrice de zone pouvant être transmise à la méthode drawRoundRect() en tant que paramètre rot lors du tracé d’un dégradé vertical.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrice pour le dégradé horizontal.
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée de gauche du dégradé, en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée supérieure du dégradé, en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur du gradient, en pixels.
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur du gradient, en pixels.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une matrice de zone pouvant être transmise à la méthode <codeph>drawRoundRect()</codeph> en tant que paramètre <codeph>rot</codeph> lors du tracé d’un dégradé vertical.
           <p>Pour des raisons de performances, la matrice est stockée dans une variable statique réutilisée par tous les appels des méthodes <codeph>horizontalGradientMatrix()</codeph> et <codeph>verticalGradientMatrix()</codeph>. Par conséquent, la matrice obtenue doit être transmise à la méthode <codeph>drawRoundRect()</codeph> avant un nouvel appel de la méthode <codeph>horizontalGradientMatrix()</codeph> ou <codeph>verticalGradientMatrix()</codeph>.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UIComponent:DEFAULT_MAX_HEIGHT"><apiName>DEFAULT_MAX_HEIGHT</apiName><shortdesc>
      Valeur par défaut pour la propriété maxHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur par défaut pour la propriété <codeph>maxHeight</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MAX_WIDTH"><apiName>DEFAULT_MAX_WIDTH</apiName><shortdesc>
      Valeur par défaut pour la propriété maxWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur par défaut pour la propriété <codeph>maxWidth</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_HEIGHT"><apiName>DEFAULT_MEASURED_HEIGHT</apiName><shortdesc>
      Valeur par défaut pour la propriété measuredHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur par défaut pour la propriété <codeph>measuredHeight</codeph>. La plupart des composants calculent une valeur measuredHeight, mais certains composants basés sur un flux doivent choisir un nombre qui semble adapté.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_HEIGHT"><apiName>DEFAULT_MEASURED_MIN_HEIGHT</apiName><shortdesc>
      Valeur par défaut pour la propriété measuredMinHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur par défaut pour la propriété <codeph>measuredMinHeight</codeph>. La plupart des composants calculent une valeur measuredMinHeight, mais certains composants basés sur un flux doivent choisir un nombre qui semble adapté.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_WIDTH"><apiName>DEFAULT_MEASURED_MIN_WIDTH</apiName><shortdesc>
      Valeur par défaut pour la propriété measuredMinWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>40</apiData><apiType value="Number"/><apiDefaultValue>40
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur par défaut pour la propriété <codeph>measuredMinWidth</codeph>. La plupart des composants calculent une valeur measuredMinWidth, mais certains composants basés sur un flux doivent choisir un nombre qui semble adapté.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_WIDTH"><apiName>DEFAULT_MEASURED_WIDTH</apiName><shortdesc>
      Valeur par défaut pour la propriété measuredWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/><apiDefaultValue>160
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur par défaut pour la propriété <codeph>measuredWidth</codeph>. La plupart des composants calculent une valeur measuredWidth, mais certains composants basés sur un flux doivent choisir un nombre qui semble adapté.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityDescription:get"><apiName>accessibilityDescription</apiName><shortdesc>
      Accesseur pratique pour la propriété description de l’objet accessibilityProperties de ce composant UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Accesseur pratique pour la propriété <codeph>description</codeph> de l’objet <codeph>accessibilityProperties</codeph> de ce composant UIComponent. 
           <p>L’accesseur Get renvoie simplement la propriété <codeph>accessibilityProperties.description</codeph>ou "" si <codeph>accessibilityProperties</codeph> est null. L’accesseur Set vérifie si la valeur de la propriété <codeph>accessibilityProperties</codeph> est null, et le cas échéant, la définit sur une nouvelle occurrence AccessibilityProperties. Elle définit ensuite la propriété <codeph>accessibilityProperties.description</codeph>. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityEnabled:get"><apiName>accessibilityEnabled</apiName><shortdesc>
      Accesseur pratique pour la propriété silent de l’objet accessibilityProperties de ce composant UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Accesseur pratique pour la propriété <codeph>silent</codeph> de l’objet <codeph>accessibilityProperties</codeph> de ce composant UIComponent. 
           <p>Notez que le sens de <codeph>accessibilityEnabled</codeph> est opposé à celui de silent ; <codeph>accessibilityEnabled</codeph> est <codeph>true</codeph> si <codeph>silent</codeph> est <codeph>false</codeph>. </p>
           <p>L’accesseur Get renvoie simplement la propriété <codeph>accessibilityProperties.silent</codeph> ou <codeph>true</codeph> si <codeph>accessibilityProperties</codeph> est null. L’accesseur Set vérifie si la valeur de la propriété <codeph>accessibilityProperties</codeph> est null, et le cas échéant, la définit sur une nouvelle occurrence AccessibilityProperties. Elle définit ensuite la propriété <codeph>accessibilityProperties.silent</codeph>. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityName:get"><apiName>accessibilityName</apiName><shortdesc>
      Accesseur pratique pour la propriété name de l’objet accessibilityProperties de ce composant UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Accesseur pratique pour la propriété <codeph>name</codeph> de l’objet <codeph>accessibilityProperties</codeph> de ce composant UIComponent. 
           <p>L’accesseur Get renvoie simplement la propriété <codeph>accessibilityProperties.name</codeph>ou "" si accessibilityProperties est null. L’accesseur Set vérifie si la valeur de la propriété <codeph>accessibilityProperties</codeph> est null, et le cas échéant, la définit sur une nouvelle occurrence AccessibilityProperties. Elle définit ensuite la propriété <codeph>accessibilityProperties.name</codeph>. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityShortcut:get"><apiName>accessibilityShortcut</apiName><shortdesc>
      Accesseur pratique pour la propriété shortcut de l’objet accessibilityProperties de ce composant UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Accesseur pratique pour la propriété <codeph>shortcut</codeph> de l’objet <codeph>accessibilityProperties</codeph> de ce composant UIComponent. 
           <p>L’accesseur Get renvoie simplement la propriété <codeph>accessibilityProperties.shortcut</codeph>ou "" si <codeph>accessibilityProperties</codeph> est null. L’accesseur Set vérifie si la valeur de la propriété <codeph>accessibilityProperties</codeph> est null, et le cas échéant, la définit sur une nouvelle occurrence AccessibilityProperties. Elle définit ensuite la propriété <codeph>accessibilityProperties.shortcut</codeph>. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:activeEffects:get"><apiName>activeEffects</apiName><shortdesc>
      Liste des effets en cours de lecture sur le composant, sous forme d’un tableau d’occurrences EffectInstance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Liste des effets en cours de lecture sur le composant, sous forme d’un tableau d’occurrences EffectInstance.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Objet délégué qui traite la fonction d’automatisation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet délégué qui traite la fonction d’automatisation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      True si ce composant est activé pour l’automatisation, false dans le cas contraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True si ce composant est activé pour l’automatisation, false dans le cas contraire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      Nom pouvant être utilisé comme identifiant de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Nom pouvant être utilisé comme identifiant de cet objet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      Propriétaire de ce composant à des fins d’automatisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Propriétaire de ce composant à des fins d’automatisation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      Parent de ce composant à des fins d’automatisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Parent de ce composant à des fins d’automatisation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      
      Implémentation de l’interface IAutomationTabularData, qui peut être utilisée pour récupérer les données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Implémentation de l’interface <codeph>IAutomationTabularData</codeph>, qui peut être utilisée pour récupérer les données.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      True si ce composant est visible pour l’automatisation, false dans le cas contraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True si ce composant est visible pour l’automatisation, false dans le cas contraire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      Coordonnée y de la ligne de base de la première ligne de texte du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Coordonnée y de la ligne de base de la première ligne de texte du composant. 
     
      <p>Cette propriété est utilisée pour implémenter le style de contrainte <codeph>baseline</codeph>. Elle est également utilisée pour aligner l’étiquette d’une classe FormItem aux contrôles dans la classe FormItem. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baseline:get"><apiName>baseline</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear() dans MXML ou la valeur <codeph>undefined</codeph>dans le code ActionScript. Par exemple, dans le code MXML, <codeph>baseline.s2="@Clear()"</codeph> désélectionnez la contrainte <codeph>baseline</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.baseline = undefined</codeph> désélectionnez la contrainte <codeph>baseline</codeph> sur <codeph>button</codeph>.</p>
      
      
      Distance verticale en pixels de la cible d’ancrage à la position de ligne de base du contrôle.
           <p>Par défaut, la cible d’ancrage est le bord supérieur de la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:bottom:get"><apiName>bottom</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear() dans MXML ou la valeur <codeph>undefined</codeph>dans le code ActionScript. Par exemple, dans le code MXML, <codeph>bottom.s2="@Clear()"</codeph> désélectionnez la contrainte <codeph>bottom</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.bottom = undefined</codeph> désélectionnez la contrainte <codeph>bottom</codeph> sur <codeph>button</codeph>.</p>
      
      
      Distance verticale en pixels du bord inférieur du composant au bord inférieur de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc>
      Spécifie la stratégie de mise en cache sous forme de bitmap de cet objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>UIComponentCachePolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la stratégie de mise en cache sous forme de bitmap de cet objet. Les valeurs possibles dans MXML sont <codeph>"on"</codeph>, <codeph>"off"</codeph> et <codeph>"auto"</codeph> (valeur par défaut).
           <p>Les valeurs possibles dans ActionScript sont <codeph>UIComponentCachePolicy.ON</codeph>, <codeph>UIComponentCachePolicy.OFF</codeph> et <codeph>UIComponentCachePolicy.AUTO</codeph> (valeur par défaut).</p>
           <p><ul>
        <li>La valeur <codeph>UIComponentCachePolicy.ON</codeph> signifie que l’objet est toujours mis en cache sous forme de bitmap.</li>
        <li>La valeur <codeph>UIComponentCachePolicy.OFF</codeph> signifie que l’objet n’est jamais mis en cache sous forme de bitmap.</li>
        <li>La valeur <codeph>UIComponentCachePolicy.AUTO</codeph> signifie que le framework utilise une méthode heuristique pour déterminer si l’objet doit être mis en cache sous forme de bitmap.</li>
      </ul></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:className:get"><apiName>className</apiName><shortdesc>
      Nom de la classe de cette occurrence, par exemple « Button ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom de la classe de cette occurrence, par exemple <codeph>"DataGridItemRenderer"</codeph>.
           <p>Cette chaîne n’inclut pas le nom du package. Si vous avez besoin du nom du package, appelez la méthode <codeph>getQualifiedClassName()</codeph> du package flash.utils. Il renvoie une chaîne telle que <codeph>« mx.contrôle::Button »</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc>
      Renvoie la position x de la souris, dans le système de coordonnées du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Renvoie la position <i>x</i> de la souris, dans le système de coordonnées du contenu. Les coordonnées de contenu spécifient une position de pixel par rapport au coin supérieur gauche du contenu du composant. Elles incluent l’ensemble de la zone de contenu du composant, y compris les régions actuellement découpées, accessibles uniquement par défilement du composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc>
      Renvoie la position y de la souris, dans le système de coordonnées du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Renvoie la position <i>y</i> de la souris, dans le système de coordonnées du contenu. Les coordonnées de contenu spécifient une position de pixel par rapport au coin supérieur gauche du contenu du composant. Elles incluent l’ensemble de la zone de contenu du composant, y compris les régions actuellement découpées, accessibles uniquement par défilement du composant. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Etat à utiliser pour faire correspondre les pseudo-sélecteurs CSS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Etat à utiliser pour faire correspondre les pseudo-sélecteurs CSS. Par défaut, il s’agit de l’état <codeph>currentState</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:currentState:get"><apiName>currentState</apiName><shortdesc>
      Etat d’affichage actuel du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="currentStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Etat d’affichage actuel du composant. Définissez la propriété sur <codeph>""</codeph> ou <codeph>null</codeph> pour réinitialiser le composant dans son état de base.
           <p>Lorsque vous utilisez cette propriété pour définir l’état d’un composant, Flex applique une transition définie. Vous pouvez également utiliser la méthode <codeph>setCurrentState()</codeph> pour définir l’état actuel. Cette méthode permet également de modifier les états sans appliquer une transition.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setCurrentState()"><linktext>setCurrentState()</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:cursorManager:get"><apiName>cursorManager</apiName><shortdesc>
      Récupère le gestionnaire CursorManager qui contrôle le curseur pour ce composant et ses homologues.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.managers:ICursorManager"/></apiValueDef><apiDesc>
      Récupère le gestionnaire CursorManager qui contrôle le curseur pour ce composant et ses homologues. Chaque fenêtre de niveau supérieur possède sa propre occurrence d’un gestionnaire CursorManager. Pour vous assurer de parler au gestionnaire concerné, utilisez cette méthode.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:depth:get"><apiName>depth</apiName><shortdesc>
      
      Détermine l’ordre dans lequel les éléments sont rendus au sein des conteneurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Détermine l’ordre dans lequel les éléments sont rendus au sein des conteneurs. Les conteneurs Spark organisent leurs éléments en fonction de leur propriété <codeph>depth</codeph>, avec la profondeur la plus basse à l’arrière-plan et la plus élevée à l’avant. Les éléments avec la même valeur de profondeur apparaissent dans leur ordre d’ajout au conteneur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc>
      Référence à la classe UIComponentDescriptor, le cas échéant, utilisée par la méthode createComponentFromDescriptor() pour créer cette occurrence UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      Référence à la classe UIComponentDescriptor, le cas échéant, utilisé par la méthode <codeph>createComponentFromDescriptor()</codeph> pour créer cette occurrence UIComponent. Si cette occurrence UIComponent n’a pas été créée à partir d’un descripteur, cette propriété est définie sur null. 
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:designLayer:get"><apiName>designLayer</apiName><shortdesc conref="mx.core.IVisualElement#designLayer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#designLayer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:document:get"><apiName>document</apiName><shortdesc>
      Référence à l’objet de document associé à ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Référence à l’objet de document associé à ce composant UIComponent. Un objet de document est un objet qui se trouve au sommet de la hiérarchie d’une application Flex, d’un composant MXML ou d’un composant AS.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc>
      Spécifie si l’objet UIComponent reçoit les événements doubleClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie si l’objet UIComponent reçoit les événements <codeph>doubleClick</codeph>. La valeur par défaut est <codeph>false</codeph>, ce qui signifie que le composant UIComponent ne reçoit pas les événements <codeph>doubleClick</codeph>.
           <p>La propriété <codeph>mouseEnabled</codeph> doit également être définie sur <codeph>true</codeph>, sa valeur par défaut, pour que l’objet reçoive les événements <codeph>doubleClick</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:enabled:get"><apiName>enabled</apiName><shortdesc conref="mx.core.IUIComponent#enabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="enabledChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.IUIComponent#enabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:errorString:get"><apiName>errorString</apiName><shortdesc>
      Texte affiché par le conseil d’erreur d’un composant lorsqu’un composant est surveillé par un programme de validation et que la validation échoue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="errorStringChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Texte affiché par le conseil d’erreur d’un composant lorsqu’un composant est surveillé par un programme de validation et que la validation échoue.
           <p>Vous pouvez utiliser la propriété <codeph>errorString</codeph> afin d’afficher une erreur de validation pour un composant, sans utiliser réellement une classe Validator. Lorsque vous écrivez une valeur de chaîne dans la propriété <codeph>errorString</codeph>, Flex trace une bordure rouge autour du composant pour indiquer l’erreur de validation et la chaîne apparaît dans une info-bulle en tant que message d’erreur de validation lorsque vous placez le curseur sur le composant, tout comme si un programme de validation détectait une erreur de validation.</p>
           <p>Pour effacer l’erreur de validation, écrivez une chaîne vide, "", dans la propriété <codeph>errorString</codeph>.</p>
           <p>Ecrire une valeur dans la propriété <codeph>errorString</codeph> ne déclenche pas les événements valid ou invalid ; cela change uniquement la couleur de bordure et affiche le message d’erreur de validation.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Nombre définissant la hauteur explicite du composant en pixels, dans les coordonnées du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur explicite du composant en pixels, dans les coordonnées du composant.
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>explicitHeight</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleY</codeph>.</p>
      <p>La définition de la propriété <codeph>height</codeph> définit également cette propriété sur la valeur de hauteur spécifiée.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Hauteur maximale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur maximale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est exprimée dans les coordonnées du composant, en pixels.
           <p>Généralement, les développeurs d’applications ne définissent pas la propriété explicitMaxHeight. Au lieu de cela, ils définissent la valeur de la propriété maxHeight, ce qui définit la propriété explicitMaxHeight. La valeur de maxHeight ne change pas.</p>
           <p>Lors de la présentation, si maxHeight a été explicitement définie par le développeur de l’application, la valeur explicitMaxHeight est utilisée. Dans le cas contraire, la valeur par défaut pour maxHeight est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>maxHeight</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleY</codeph>. Certains composants n’ont aucune limite théorique pour leur hauteur. Dans ces cas, leur propriété <codeph>maxHeight</codeph> est définie sur <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Largeur maximale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur maximale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est exprimée dans les coordonnées du composant, en pixels.
           <p>Généralement, les développeurs d’applications ne définissent pas la propriété explicitMaxWidth. Au lieu de cela, ils définissent la valeur de la propriété maxWidth, ce qui définit la propriété explicitMaxWidth. La valeur de maxWidth ne change pas.</p>
           <p>Lors de la présentation, si maxWidth a été explicitement définie par le développeur de l’application, la valeur explicitMaxWidth est utilisée. Dans le cas contraire, la valeur par défaut pour maxWidth est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>maxWidth</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleX</codeph>. Certains composants n’ont aucune limite théorique pour leur largeur. Dans ces cas, leur propriété <codeph>maxWidth</codeph> est définie sur <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      Hauteur minimale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explictMinHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur minimale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est exprimée dans les coordonnées du composant, en pixels.
           <p>Généralement, les développeurs d’applications ne définissent pas la propriété explicitMinHeight. Au lieu de cela, ils définissent la valeur de la propriété minHeight, ce qui définit la propriété explicitMinHeight. La valeur de minHeight ne change pas.</p>
           <p>Lors de la présentation, si minHeight a été explicitement définie par le développeur de l’application, la valeur explicitMinHeight est utilisée. Dans le cas contraire, la valeur de measuredMinHeight est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>minHeight</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleY</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      Largeur minimale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur minimale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est dans les coordonnées du composant, en pixels.
           <p>Généralement, les développeurs d’applications ne définissent pas la propriété explicitMinWidth. Au lieu de cela, ils définissent la valeur de la propriété minWidth, ce qui définit la propriété explicitMinWidth. La valeur de minWidth ne change pas.</p>
           <p>Lors de la présentation, si minWidth a été explicitement définie par le développeur de l’application, la valeur explicitMinWidth est utilisée. Dans le cas contraire, la valeur de measuredMinWidth est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>minWidth</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleX</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Nombre définissant la largeur explicite du composant en pixels, dans les coordonnées du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur explicite du composant en pixels, dans les coordonnées du composant.
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>explicitWidth</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleX</codeph>.</p>
      <p>La définition de la propriété <codeph>width</codeph> définit également cette propriété sur la valeur de largeur spécifiée.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:flexContextMenu:get"><apiName>flexContextMenu</apiName><shortdesc>
      Menu contextuel pour ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:IFlexContextMenu</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Menu contextuel pour ce composant UIComponent.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      Indique si le composant peut recevoir le focus par tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le composant peut recevoir le focus par tabulation. Vous pouvez définir la propriété <codeph>focusEnabled</codeph> sur <codeph>false</codeph> lorsqu’un composant UIComponent est utilisé comme sous-composant d’un autre composant, pour que cet autre composant devienne l’entité pouvant recevoir le focus. Si la valeur de cette propriété est <codeph>false</codeph>, le focus est transféré au premier parent ayant une propriété <codeph>focusEnable</codeph> définie sur <codeph>true</codeph>. 
           <p>La valeur par défaut est <codeph>true</codeph>, sauf pour le composant spark.components.Scroller. Pour ce composant, la valeur par défaut est <codeph>false</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.Scroller.xml"><linktext>spark.components.Scroller</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      Récupère le FocusManager qui contrôle le focus pour ce composant et ses homologues.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      Récupère le FocusManager qui contrôle le focus pour ce composant et ses homologues. Chaque fenêtre contextuelle possède sa propre boucle de focus et donc sa propre occurrence du gestionnaire FocusManager. Pour vous assurer de parler au gestionnaire concerné, utilisez cette méthode.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Volet de focus associé à cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Volet de focus associé à cet objet. Un objet dispose d’un panneau de focus si l’un de ses enfants a le focus.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:hasComplexLayoutMatrix:get"><apiName>hasComplexLayoutMatrix</apiName><shortdesc>
      Renvoie true si la classe UIComponent possède des propriétés de transformation de non-translation (x,y).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Renvoie <codeph>true</codeph> si la classe UIComponent possède des propriétés de transformation de non-translation (x,y) 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc>
      Indicateur qui signale si les objets enfant peuvent recevoir le focus </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hasFocusableChildrenChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si les objets enfant peuvent recevoir le focus 
     
      <p><b>Remarque : </b>cette fonction est similaire à la propriété <codeph>tabChildren</codeph> utilisée par Flash Player. Utilisez la propriété <codeph>hasFocusableChildren</codeph> avec les applications Flex. N’utilisez pas la propriété <codeph>tabChildren</codeph>. </p>
     
      <p>La valeur de cette propriété est généralement <codeph>false</codeph>, car la plupart des composants reçoivent le focus ou le délèguent à un sous-composant interne unique et apparaissent comme s’ils avaient reçu le focus. Par exemple, un contrôle TextInput contient un contrôle RichEditableText enfant pouvant recevoir le focus, mais si le sous-composant RichEditableText reçoit le focus, le composant TextInput s’affiche comme s’il avait le focus. TextInput définit <codeph>hasFocusableChildren</codeph> sur <codeph>false</codeph>, car TextInput est considéré comme le composant ayant le focus. Sa structure interne est une abstraction. </p>
           <p>Généralement, seuls les indicateurs des composants de navigateur tels que TabNavigator et Accordion sont définis sur <codeph>true</codeph>, car, bien qu’ils reçoivent le focus sur l’onglet, le focus est attribué aux composants des conteneurs enfant des onglets ultérieurs. </p>
           <p>La valeur par défaut est <codeph>false</codeph>, sauf pour le composant spark.components.Scroller. Pour ce composant, la valeur par défaut est <codeph>true</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.Scroller.xml"><linktext>spark.components.Scroller</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      
      Contient true si l’élément possède une matrice 3D.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> si l’élément possède une matrice 3D.
           <p>Utilisez <codeph>hasLayoutMatrix3D</codeph> au lieu d’appeler et d’examiner la valeur renvoyée par la méthode <codeph>getLayoutMatrix3D()</codeph>, car cette méthode renvoie une matrice valide même lorsque l’élément est en 2D. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:height:get"><apiName>height</apiName><shortdesc>
      Nombre définissant la hauteur du composant en pixels, dans les coordonnées du parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="heightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur du composant en pixels, dans les coordonnées du parent. La valeur par défaut est 0, mais cette propriété contient la hauteur réelle du composant dès lors que Flex termine le dimensionnement des composants de l’application.
           <p>Remarque : vous pouvez spécifier une valeur de pourcentage pour l’attribut MXML <codeph>height</codeph>, par exemple <codeph>height="100%"</codeph>, mais pas pour la propriété <codeph>height</codeph> dans ActionScript. Utilisez dans ce cas la propriété <codeph>percentHeight</codeph>.</p>
           <p>La définition de cette propriété entraîne la distribution d’un événement <codeph>resize</codeph>. Reportez-vous à l’événement <codeph>resize</codeph> pour plus d’informations sur le moment de distribution de cet événement. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/percentHeight"><linktext>percentHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear() dans MXML ou la valeur <codeph>undefined</codeph>dans le code ActionScript. Par exemple, dans le code MXML, <codeph>horizontalCenter.s2="@Clear()"</codeph>, désélectionnez la contrainte <codeph>horizontalCenter</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.horizontalCenter = undefined</codeph> désélectionnez la contrainte <codeph>horizontalCenter</codeph> sur <codeph>button</codeph>.</p>
      
      
      Distance horizontale en pixels du centre du composant au centre de la zone de contenu de la cible d’ancrage.
           <p>La cible d’ancrage par défaut est le conteneur lui-même.</p>
           <p>Dans les présentations avec contraintes avancées, la cible d’ancrage peut être une colonne de contrainte. Dans ce cas, la zone de contenu est l’espace entre la colonne précédente (ou le côté du conteneur) et la colonne cible.</p>
           <p>Définir la propriété sur un nombre ou une chaîne numérique (par exemple, 10) spécifie l’utilisation de la cible d’ancrage par défaut. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « constraintColumnId:value ». Par exemple, « col1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:id:get"><apiName>id</apiName><shortdesc>
      ID du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ID du composant. Cette valeur devient le nom d’occurrence de l’objet et ne doit pas contenir d’espace ni de caractère spécial. Chaque composant d’une application doit avoir un id unique. 
           <p>Si l’application va être testée par des outils tiers, donnez à chaque composant un id significatif. Les outils de test utilisent des id pour représenter le contrôle dans leurs scripts. Leur donner un nom significatif permet de réaliser des scripts plus lisibles. Par exemple, définissez la valeur d’un bouton sur submit_button plutôt que sur b1 ou button1. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc>
      Indique si ce composant est inclus dans la présentation du conteneur parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="includeInLayoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si ce composant est inclus dans la présentation du conteneur parent. Si la valeur est <codeph>true</codeph>, l’objet est inclus dans la mise en forme du conteneur parent et est dimensionné et agencé par son conteneur parent par les règles de sa mise en page. Si la valeur est <codeph>false</codeph>, la taille et la position de l’objet ne sont pas affectés par la mise en page de son conteneur parent.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Début de la chaîne de styles hérités de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Début de la chaîne de styles hérités de ce composant. La méthode <codeph>getStyle()</codeph> accède simplement à <codeph>inheritingStyles[styleName]</codeph> pour parcourir la totalité de la chaîne liée au prototype. Cet objet est défini par la méthode <codeph>initProtoChain()</codeph>. En règle générale, les développeurs n’ont jamais besoin d’accéder à cette propriété directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:initialized:get"><apiName>initialized</apiName><shortdesc>
      Indicateur déterminant si un objet a traversé les trois phases de présentation : validation, mesure et présentation (si besoin était).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur déterminant si un objet a traversé les trois phases de présentation : validation, mesure et présentation (si besoin était).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndex:get"><apiName>instanceIndex</apiName><shortdesc>
      Index d’un composant répété.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index d’un composant répété. Si le composant n’est pas dans un objet Repeater, la valeur est -1.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      Tableau contenant les indices requis pour faire référence à cet objet UIComponent à partir de son document parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les indices requis pour faire référence à cet objet UIComponent à partir de son document parent. Le tableau est vide, sauf si cet objet UIComponent figure dans un ou plusieurs objets Repeater. Le premier élément correspond à l’objet Repeater le plus excentré. Par exemple, si id a la valeur « b » et instanceIndices a la valeur [2,4], la référence dans le document parent est b[2][4].
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:is3D:get"><apiName>is3D</apiName><shortdesc>
      
      Contient true lorsque l’élément est en 3D.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Contient <codeph>true</codeph> lorsque l’élément est en 3D. L’élément peut être en 3D parce qu’il possède des propriétés de transformation 3D, des décalages de transformation 3D après la mise en forme ou les deux. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isDocument:get"><apiName>isDocument</apiName><shortdesc>
      Contient la valeur true si l’occurrence UIComponent est un objet document. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient la valeur <codeph>true</codeph> si l’occurrence UIComponent est un objet document. Cela signifie qu’il se trouve au sommet de la hiérarchie d’une application Flex ou d’un composant MXML ou ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc>
      Défini sur true par le gestionnaire PopUpManager pour indiquer que composant a été ouvert sous forme de menu contextuel. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Défini sur <codeph>true</codeph> par le gestionnaire PopUpManager pour indiquer que composant a été ouvert sous forme de menu contextuel. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:left:get"><apiName>left</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété spécifique d'un état dans MXML sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear(). Par exemple, dans le code MXML, <codeph>left.s2="@Clear()"</codeph>, désélectionnez la contrainte <codeph>left</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.left = undefined</codeph> désélectionnez la contrainte <codeph>left</codeph> sur <codeph>button</codeph>.</p>
     
      
      Distance horizontale en pixels du bord gauche du composant au bord gauche de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une colonne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « col1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      Hauteur maximale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur maximale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est exprimée dans les coordonnées du composant, en pixels. La valeur par défaut de cette propriété est définie par le développeur du composant.
           <p>Le développeur de composant utilise cette propriété pour définir une limite supérieure pour la hauteur du composant.</p>
           <p>Si le développeur de l’application remplace la valeur par défaut de la propriété maxHeight, la nouvelle valeur est stockée dans la propriété explicitMaxHeight. La valeur par défaut de maxHeight ne change pas. Par conséquent, lors de la présentation, si maxHeight a été explicitement définie par le développeur de l’application, la valeur explicitMaxHeight est utilisée pour la hauteur maximale recommandée du composant. Si la propriété maxHeight n’est pas définie de façon explicite par l’utilisateur, la valeur par défaut est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>maxHeight</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleY</codeph>. Certains composants n’ont aucune limite théorique pour leur hauteur. Dans ces cas, leur propriété <codeph>maxHeight</codeph> est définie sur <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      Largeur maximale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur maximale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est exprimée dans les coordonnées du composant, en pixels. La valeur par défaut de cette propriété est définie par le développeur du composant.
           <p>Le développeur de composant utilise cette propriété pour définir une limite supérieure pour la largeur du composant.</p>
           <p>Si le développeur de l’application remplace la valeur par défaut de la propriété maxWidth, la nouvelle valeur est stockée dans la propriété explicitMaxWidth. La valeur par défaut de maxWidth ne change pas. Par conséquent, lors de la présentation, si maxWidth a été explicitement définie par le développeur de l’application, la valeur explicitMaxWidth est utilisée pour la largeur maximale recommandée du composant. Si la propriété maxWidth n’est pas définie de façon explicite par l’utilisateur, la valeur par défaut est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>maxWidth</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleX</codeph>. Certains composants n’ont aucune limite théorique pour leur largeur. Dans ces cas, leur propriété <codeph>maxWidth</codeph> est définie sur <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      Hauteur par défaut du composant, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur par défaut du composant, en pixels. Cette valeur est définie par la méthode <codeph>measure()</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc>
      Hauteur minimale par défaut du composant, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur minimale par défaut du composant, en pixels. Cette valeur est définie par la méthode <codeph>measure()</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc>
      Largeur minimale par défaut du composant, en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur minimale par défaut du composant, en pixels. Cette valeur est définie par la méthode <codeph>measure()</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      Largeur par défaut du composant, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur par défaut du composant, en pixels. Cette valeur est définie par la méthode <codeph>measure()</codeph>. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      Hauteur minimale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur minimale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est dans les coordonnées du composant, en pixels. La valeur par défaut dépend de l’implémentation du composant.
           <p>Si le développeur de l’application définit la valeur de la propriété minHeight, la nouvelle valeur est stockée dans la propriété explicitMinHeight. La valeur par défaut de minHeight ne change pas. Par conséquent, lors de la présentation, si minHeight a été explicitement définie par le développeur de l’application, la valeur explicitMinHeight est utilisée pour la hauteur minimale recommandée du composant. Si la propriété minHeight n’est pas définie de façon explicite par le développeur de l’application, la valeur de la propriété measuredMinHeight est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>minHeight</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleY</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      Largeur minimale recommandée du composant à prendre en compte par le parent lors de la présentation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur minimale recommandée du composant à prendre en compte par le parent lors de la présentation. Cette valeur est dans les coordonnées du composant, en pixels. La valeur par défaut dépend de l’implémentation du composant.
           <p>Si le développeur de l’application définit la valeur de la propriété minWidth, la nouvelle valeur est stockée dans la propriété explicitMinWidth. La valeur par défaut de minWidth ne change pas. Par conséquent, lors de la présentation, si minWidth a été explicitement définie par le développeur de l’application, la valeur explicitMinWidth est utilisée pour la largeur minimale recommandée du composant. Si la propriété minWidth n’est pas définie de façon explicite par le développeur de l’application, la valeur de la propriété measuredMinWidth est utilisée.</p>
           <p>Cette valeur est utilisée par le conteneur lors du calcul de la taille et de la position du composant. Elle n’est pas utilisée par le composant lui-même pour déterminer sa taille par défaut. Ainsi, cette propriété peut n’avoir aucun effet si elle a pour parent un objet Container ou des conteneurs qui n’utilisent pas cette propriété comme facteur. Puisque la valeur est dans les coordonnées du composant, la valeur <codeph>minWidth</codeph> réelle par rapport à son parent est affectée par la propriété <codeph>scaleX</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Une fabrique de modules est utilisée comme contexte d’utilisation de polices intégrées et pour la recherche du gestionnaire de style qui contrôle les styles de ce composant.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      Indique si le composant peut recevoir le focus à l’aide de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le composant peut recevoir le focus à l’aide de la souris. Si la valeur est <codeph>false</codeph>, le focus est transféré au premier parent ayant une propriété <codeph>mouseFocusEnabled</codeph> définie sur <codeph>true</codeph>. Par exemple, vous pouvez définir cette propriété sur <codeph>false</codeph> sur une commande Button afin de permettre l’utilisation de la touche de tabulation pour passer le focus à la commande, mais ne pas passer le focus à la commande lorsque vous cliquez dessus.
          <p>La valeur par défaut est <codeph>true</codeph> pour la plupart des sous-classes, à l’exception de TabBar de Spark. Dans ce cas, la valeur par défaut est <codeph>false</codeph>.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      Profondeur de cet objet dans la hiérarchie de confinement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Profondeur de cet objet dans la hiérarchie de confinement. Ce nombre est utilisé par le code de mesure et de présentation. La valeur est 0 si ce composant n’est pas dans la liste DisplayList.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Début de la chaîne de styles non hérités de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Début de la chaîne de styles non hérités de ce composant. La méthode <codeph>getStyle()</codeph> accède simplement à <codeph>nonInheritingStyles[styleName]</codeph> pour parcourir la totalité de la chaîne liée au prototype. Cet objet est défini par la méthode <codeph>initProtoChain()</codeph>. En règle générale, les développeurs n’ont jamais besoin d’accéder à cette propriété directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      
      Nombre d’enfants d’automatisation que ce conteneur comporte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Nombre d’enfants d’automatisation que ce conteneur comporte. Cette somme ne doit inclure aucun enfant composite, bien qu’elle inclue les enfants non significatifs dans la hiérarchie d’automatisation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentApplication:get"><apiName>parentApplication</apiName><shortdesc>
      Référence à l’objet d’application contenant cette occurrence UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="initialize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Référence à l’objet d’application contenant cette occurrence UIComponent. Cet objet Application peut exister dans un contrôle SWFLoader dans un autre objet Application et ainsi de suite, créant une chaîne d’objets Application pouvant être remontée à l’aide de parentApplication.
           <p>La propriété <codeph>parentApplication</codeph> d’une application n’est jamais l’application elle-même. Elle correspond soit à l’application dans laquelle elle a été chargée, soit à la valeur null (pour l’application de plus haut niveau). </p>
           <p>Le parcours de la chaîne d’application à l’aide de la propriété <codeph>parentApplication</codeph> est comparable au parcours de la chaîne de document à l’aide de la propriété <codeph>parentDocument</codeph>. Vous pouvez accéder à l’application de plus haut niveau à l’aide de la propriété <codeph>application</codeph> de la classe Application.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentDocument:get"><apiName>parentDocument</apiName><shortdesc>
      Référence à l’objet de document parent pour ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="initialize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Référence à l’objet de document parent pour ce composant UIComponent. Un objet de document est un objet UIComponent qui se trouve au sommet de la hiérarchie d’une application Flex, d’un composant MXML ou d’un composant AS. 
           <p>Pour l’objet Application, la propriété <codeph>parentDocument</codeph> a la valeur null. Cette propriété est utile dans les scripts MXML pour remonter d’un niveau dans la chaîne d’objets de document. Elle peut être utilisée pour parcourir cette chaîne, à l’aide de la syntaxe <codeph>parentDocument.parentDocument</codeph>, etc.</p>
           <p>Il est typé en tant qu’objet pour que les auteurs puissent accéder à des propriétés et méthodes sur des objets de document ancêtre sans projection.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parent:get"><apiName>parent</apiName><shortdesc conref="mx.core.IVisualElement#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Spécifie la hauteur d'un composant en tant que pourcentage de la taille de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la hauteur d'un composant en tant que pourcentage de la taille de son parent. Valeurs autorisées : 0 à 100. La valeur par défaut est NaN. Définir les propriétés <codeph>height</codeph> ou <codeph>explicitHeight</codeph> réinitialise cette propriété sur NaN.
           <p>Cette propriété renvoie une valeur numérique uniquement si elle a été précédemment définie. Elle ne reflète pas la taille exacte du composant en pourcentage. </p>
           <p>Cette propriété est toujours définie sur NaN pour la commande UITextField.</p>
      
      <p>Lorsqu'elle est utilisée dans des mises en forme Spark, cette propriété permet de calculer la hauteur des limites du composant après la mise à l'échelle et la rotation. Par exemple, si le composant pivote à 90 degrés, le fait de spécifier <codeph>percentHeight</codeph> affecte sa largeur.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Spécifie la largeur d'un composant en tant que pourcentage de la taille de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Spécifie la largeur d'un composant en tant que pourcentage de la taille de son parent. Valeurs autorisées : 0 à 100. La valeur par défaut est NaN. La définition des valeurs <codeph>width</codeph> ou <codeph>explicitWidth</codeph> restaure cette propriété sur la valeur NaN.
           <p>Cette propriété renvoie une valeur numérique uniquement si elle a été précédemment définie. Elle ne reflète pas la taille exacte du composant en pourcentage. </p>
           <p>Cette propriété est toujours définie sur NaN pour la commande UITextField.</p>
     
      <p>Lorsqu'elle est utilisé avec des mises en forme Spark, cette propriété permet de calculer la largeur des limites du composant après la mise à l'échelle et la rotation. Par exemple, si le composant pivote à 90 degrés, le fait de spécifier <codeph>percentWidth</codeph> affecte la hauteur du composant.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc conref="mx.core.IVisualElement#postLayoutTransformOffsets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#postLayoutTransformOffsets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      Définie sur true après la création d’enfant immédiate ou différée, en fonction de celle effectuée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Définie sur <codeph>true</codeph> après la création d’enfant immédiate ou différée, en fonction de celle effectuée. Pour un objet Container, elle est définie sur <codeph>true</codeph> à la fin de la méthode <codeph>createComponentsFromDescriptors()</codeph>, donc après la création des enfants du conteneur à partir de ses descripteurs enfant.
           <p>Par exemple, si un conteneur Accordion utilise l’instanciation différée, la propriété <codeph>processedDescriptors</codeph> pour le deuxième volet du conteneur Accordion ne prend pas la valeur <codeph>true</codeph> jusqu’à ce que l’utilisateur accède au volet et que le volet crée ses enfants. Si toutefois le composant Accordion a défini la propriété <codeph>creationPolicy</codeph> sur <codeph>"all"</codeph>, la propriété <codeph>processedDescriptors</codeph> de son deuxième panneau est définie sur <codeph>true</codeph> au démarrage de l’application.</p>
           <p>Pour les classes qui ne sont pas des conteneurs, qui n’ont pas de descripteurs, elle est définie sur <codeph>true</codeph> après la création des enfants de composant internes éventuels par la méthode <codeph>createChildren()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndex:get"><apiName>repeaterIndex</apiName><shortdesc>
      Index de l’élément dans le fournisseur de données de l’objet Repeater ayant produit ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de l’élément dans le fournisseur de données de l’objet Repeater ayant produit ce composant UIComponent. Utilisez cette propriété plutôt que la propriété <codeph>repeaterIndices</codeph> lorsque l’objet UIComponent est créé par un seul objet Repeater. Utilisez la propriété <codeph>repeaterIndices</codeph> lorsque cet objet UIComponent est créé par des objets Repeater imbriqués.
           <p>Cette propriété est définie sur -1 lorsque cet objet UIComponent n’est pas créé par un objet Repeater.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      Tableau contenant les indices des éléments dans le fournisseur de données du des objets Repeater dans le document parent ayant produit ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les indices des éléments dans le fournisseur de données du des objets Repeater dans le document parent ayant produit ce composant UIComponent. Le tableau est vide, sauf si ce composant UIComponent figure dans un ou plusieurs objets Repeater.
           <p>Le premier élément du tableau correspond à l’objet Repeater le plus externe. Par exemple, si la propriété <codeph>repeaterIndices</codeph> a la valeur [2,4] cela signifie que l’objet Repeater extérieur a utilisé l’élément <codeph>dataProvider[2]</codeph> et que l’objet Repeater intérieur a utilisé l’élément <codeph>dataProvider[4]</codeph>.</p>
           <p>Notez que cette propriété est différente de la propriété <codeph>instanceIndices</codeph> si la propriété <codeph>startingIndex</codeph> de l’un des objets Repeater n’a pas la valeur 0. Par exemple, même si un composant Repeater commence à l’élément <codeph>dataProvider[4]</codeph>, la référence du document au premier objet répété est b[0] et non b[4].</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeater:get"><apiName>repeater</apiName><shortdesc>
      Référence à l’objet Repeater dans le document parent ayant produit ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IRepeater</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’objet Repeater dans le document parent ayant produit ce composant UIComponent. Utilisez cette propriété plutôt que la propriété <codeph>repeaters</codeph> lorsque l’objet UIComponent est créé par un seul objet Repeater. Utilisez la propriété <codeph>repeaters</codeph> lorsque cet objet UIComponent est créé par des objets Repeater imbriqués.
           <p>La propriété est définie sur <codeph>null</codeph> lorsque cet objet UIComponent n’est pas créé par un objet Repeater.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      Tableau contenant des références aux objets Repeater dans le document parent ayant produit ce composant UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant des références aux objets Repeater dans le document parent ayant produit ce composant UIComponent. Le tableau est vide, sauf si ce composant UIComponent figure dans un ou plusieurs objets Repeater. Le premier élément correspond à l’objet Repeater le plus excentré.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc>
      Référence à l’objet qui gère toutes les ressources localisées de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’objet qui gère toutes les ressources localisées de l’application. Il s’agit d’une occurrence Singleton qui implémente l’interface IResourceManager.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:right:get"><apiName>right</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear() dans MXML ou la valeur <codeph>undefined</codeph>dans le code ActionScript. Par exemple, dans le code MXML, <codeph>right.s2="@Clear()"</codeph>, désélectionnez la contrainte <codeph>right</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.right = undefined</codeph> désélectionnez la contrainte <codeph>right</codeph> sur <codeph>button</codeph>.</p>
      
      
      Distance horizontale en pixels du bord droit du composant au bord droit de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une colonne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « col1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationX:get"><apiName>rotationX</apiName><shortdesc>
     Indique la rotation de l’axe des x de l’occurrence DisplayObject, en degrés, à partir de son orientation d’origine par rapport au conteneur 3D parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Indique la rotation de l’axe des x de l’occurrence DisplayObject, en degrés, à partir de son orientation d’origine par rapport au conteneur 3D parent. Les valeurs comprises entre 0 et 180 représentent la rotation en sens horaire ; les valeurs comprises entre 0 et -180 représentent la rotation en sens anti-horaire. Les valeurs hors de cette plage sont ajoutées ou soustraites de 360 pour obtenir une valeur comprise dans la plage. Cette propriété est ignorée lors du calcul par une présentation 2D Flex.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationY:get"><apiName>rotationY</apiName><shortdesc>
     Indique la rotation de l’axe des y de l’occurrence DisplayObject, en degrés, à partir de son orientation d’origine par rapport au conteneur 3D parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Indique la rotation de l’axe des y de l’occurrence DisplayObject, en degrés, à partir de son orientation d’origine par rapport au conteneur 3D parent. Les valeurs comprises entre 0 et 180 représentent la rotation en sens horaire ; les valeurs comprises entre 0 et -180 représentent la rotation en sens anti-horaire. Les valeurs hors de cette plage sont ajoutées ou soustraites de 360 pour obtenir une valeur comprise dans la plage. Cette propriété est ignorée lors du calcul par une présentation 2D Flex.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationZ:get"><apiName>rotationZ</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:UIComponent:rotation:get"><apiName>rotation</apiName><shortdesc conref="mx.core.IFlexDisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.IFlexDisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleX:get"><apiName>scaleX</apiName><shortdesc>
      Nombre spécifiant le facteur de mise à l’échelle horizontale. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleXChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre spécifiant le facteur de mise à l’échelle horizontale. 
           <p>La valeur par défaut est 1,0, ce qui signifie que l’objet n’est pas redimensionné. Une valeur <codeph>scaleX</codeph> de 2.0 signifie que l’objet a été agrandi par 2 et une valeur <codeph>scaleX</codeph> de 0.5 signifie que l’objet a été réduit par 2. </p>
           <p>La valeur 0.0 n’est pas valide. Au lieu de le définir sur 0.0, choisissez une valeur faible ou définissez la propriété <codeph>visible</codeph> sur <codeph>false</codeph> pour masquer le composant. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleY:get"><apiName>scaleY</apiName><shortdesc>
      Nombre spécifiant le facteur de mise à l’échelle verticale. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleYChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre spécifiant le facteur de mise à l’échelle verticale. 
           <p>La valeur par défaut est 1,0, ce qui signifie que l’objet n’est pas redimensionné. Une valeur <codeph>scaleY</codeph> de 2.0 signifie que l’objet a été agrandi par 2 et une valeur <codeph>scaleY</codeph> de 0.5 signifie que l’objet a été réduit par 2. </p>
           <p>La valeur 0.0 n’est pas valide. Au lieu de le définir sur 0.0, choisissez une valeur faible ou définissez la propriété <codeph>visible</codeph> sur <codeph>false</codeph> pour masquer le composant. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleZ:get"><apiName>scaleZ</apiName><shortdesc>
      Nombre spécifiant le facteur de mise à l’échelle sur l’axe z. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleZChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre spécifiant le facteur de mise à l’échelle sur l’axe z. 
           <p>Une mise à l’échelle le long de l’axe z n’a pas d’incidence sur un composant standard, allongé dans le plan z=0. Les composants avec enfants auxquels sont appliquées des transformations 3D ou composants avec une valeur de la propriété transformZ différente de zéro, sont affectés. </p>
      
      <p>La valeur par défaut est 1,0, ce qui signifie que l’objet n’est pas redimensionné. </p>
     
      <p>Cette propriété est ignorée lors du calcul par une présentation 2D Flex.  </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:screen:get"><apiName>screen</apiName><shortdesc>
      Renvoie un objet contenant la taille et la position de la surface de tracé de base pour cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Renvoie un objet contenant la taille et la position de la surface de tracé de base pour cet objet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
       
      Indicateur qui détermine si un objet d’automatisation s’affiche dans la hiérarchie d’automatisation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
      Indicateur qui détermine si un objet d’automatisation apparaît dans la hiérarchie d’automatisation. Les enfants des conteneurs qui ne sont pas visibles dans la hiérarchie apparaissent en tant qu’enfants du parent visible le plus élevé suivant. En général, les conteneurs utilisés pour la présentation (par exemple, cases et dessins) n’apparaissent pas dans la hiérarchie.
     
      <p>Certains contrôles forcent leurs enfants à apparaître dans la hiérarchie lorsque cela est approprié. Par exemple, une liste force toujours les fonctionnalités de rendu d’éléments, y compris les cases, à apparaître dans la hiérarchie. Les implémentateurs doivent prendre en charge la définition de cette propriété sur <codeph>true</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:states:get"><apiName>states</apiName><shortdesc>
      Etats d’affichage définis pour ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Etats d’affichage définis pour ce composant. La propriété <codeph>states</codeph> peut être spécifiée uniquement sur la racine de l’application ou sur la balise racine d’un composant MXML. Le compilateur génère une erreur si vous la spécifiez sur une autre commande. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc>
      Stockage pour les styles d’héritage intégrés sur cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc>
      Stockage pour les styles d’héritage intégrés sur cet objet. Cet objet CSSStyleDeclaration est créé lors du premier appel de la méthode <codeph>setStyle()</codeph> sur ce composant afin de définir un style d’héritage. En règle générale, les développeurs n’ont jamais besoin d’accéder à cette propriété directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleManager:get"><apiName>styleManager</apiName><shortdesc>
      Renvoie l’occurrence SystemManager utilisée par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IStyleManager2</apiValueClassifier></apiValueDef><apiDesc>
      Renvoie l’occurrence SystemManager utilisée par ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleName:get"><apiName>styleName</apiName><shortdesc>
      Style de classe utilisé par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Style de classe utilisé par ce composant. Il peut s’agir d’une chaîne, d’une déclaration CSSStyleDeclaration ou d’une interface IStyleClient.
           <p>S’il s’agit d’une chaîne, elle correspond au nom d’une ou plusieurs déclarations de classe séparées par des espaces blancs dans une balise <codeph>&lt;fx:Style></codeph> ou un fichier CSS. N’incluez pas le point dans la propriété <codeph>styleName</codeph>. Par exemple, si vous disposez d’un style de classe nommé <codeph>".bigText"</codeph>, définissez la propriété <codeph>styleName</codeph> sur <codeph>"bigText"</codeph> (sans point).</p>
           <p>S’il s’agit d’une interface IStyleClient (généralement un composant UIComponent), tous les styles de l’objet <codeph>styleName</codeph> sont utilisés par ce composant.</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleParent:get"><apiName>styleParent</apiName><shortdesc>
      Le parent d’un composant permet d’évaluer les sélecteurs descendants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      Le parent d’un composant permet d’évaluer les sélecteurs descendants. Un parent doit également être une interface IAdvancedStyleClient pour participer aux déclarations de style avancées.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      Renvoie l’objet SystemManager utilisé par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Renvoie l’objet SystemManager utilisé par ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Indicateur qui signale si cet objet peut recevoir le focus via la touche de tabulation. Cette fonction est similaire à la propriété tabEnabled utilisée par le lecteur Flash. Sa valeur est généralement true pour les composants qui gèrent l’entrée au clavier, mais certains composants des barres de contrôle les définissent sur false, car il est conseillé de ne pas voler le focus d’un autre composant (un éditeur, par exemple).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="tabFocusEnabledChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur qui signale si cet objet peut recevoir le focus via la touche de tabulation 
     
      <p>Cette fonction est similaire à la propriété <codeph>tabEnabled</codeph> de Flash Player. </p>
     
      <p>Cette valeur est généralement <codeph>true</codeph> pour les composants qui traitent les entrée au clavier, mais certains composants des barres de contrôle la définissent sur <codeph>false</codeph>, car il est conseillé de ne pas voler le focus d’un autre composant (un éditeur, par exemple). 
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:toolTip:get"><apiName>toolTip</apiName><shortdesc>
      Texte à afficher dans l’info-bulle. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="toolTipChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher dans l’info-bulle. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:top:get"><apiName>top</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear() dans MXML ou la valeur <codeph>undefined</codeph>dans le code ActionScript. Par exemple, dans le code MXML, <codeph>top.s2="@Clear()"</codeph>, désélectionnez la contrainte <codeph>top</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.top = undefined</codeph> désélectionnez la contrainte <codeph>top</codeph> sur <codeph>button</codeph>.</p>
      
      
      Distance verticale en pixels du bord supérieur du composant au bord supérieur de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transformX:get"><apiName>transformX</apiName><shortdesc>
      Définit la coordonnée x du centre de la transformation du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Définit la coordonnée x du centre de la transformation du composant. 
     
      <p>Lorsque ce composant est la cible d’un effet de transformation Spark, vous pouvez remplacer cette propriété en définissant la propriété <codeph>AnimateTransform.autoCenterTransform</codeph>. Si <codeph>autoCenterTransform</codeph> est <codeph>false</codeph>, le centre de la transformation est déterminé par les propriétés <codeph>transformX</codeph>, <codeph>transformY</codeph> et <codeph>transformZ</codeph> de la cible de l’effet. Si <codeph>autoCenterTransform</codeph> est <codeph>true</codeph>, l’effet se produit autour du centre de la cible, <codeph>(largeur/2, hauteur/2)</codeph>. </p>
           <p>La définition de cette propriété sur la classe d’effet Spark remplace le paramètre sur le composant cible. </p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformX"><linktext>spark.effects.AnimateTransform.transformX</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformY:get"><apiName>transformY</apiName><shortdesc>
      Définit la coordonnée y du centre de la transformation du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Définit la coordonnée y du centre de la transformation du composant. 
     
      <p>Lorsque ce composant est la cible d’un effet de transformation Spark, vous pouvez remplacer cette propriété en définissant la propriété <codeph>AnimateTransform.autoCenterTransform</codeph>. Si <codeph>autoCenterTransform</codeph> est <codeph>false</codeph>, le centre de la transformation est déterminé par les propriétés <codeph>transformX</codeph>, <codeph>transformY</codeph> et <codeph>transformZ</codeph> de la cible de l’effet. Si <codeph>autoCenterTransform</codeph> est <codeph>true</codeph>, l’effet se produit autour du centre de la cible, <codeph>(largeur/2, hauteur/2)</codeph>. </p>
           <p>La définition de cette propriété sur la classe d’effet Spark remplace le paramètre sur le composant cible. </p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformY"><linktext>spark.effects.AnimateTransform.transformY</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformZ:get"><apiName>transformZ</apiName><shortdesc>
      Définit la coordonnée z du centre de la transformation du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Définit la coordonnée z du centre de la transformation du composant. 
     
      <p>Lorsque ce composant est la cible d’un effet de transformation Spark, vous pouvez remplacer cette propriété en définissant la propriété <codeph>AnimateTransform.autoCenterTransform</codeph>. Si <codeph>autoCenterTransform</codeph> est <codeph>false</codeph>, le centre de la transformation est déterminé par les propriétés <codeph>transformX</codeph>, <codeph>transformY</codeph> et <codeph>transformZ</codeph> de la cible de l’effet. Si <codeph>autoCenterTransform</codeph> est <codeph>true</codeph>, l’effet se produit autour du centre de la cible, <codeph>(largeur/2, hauteur/2)</codeph>. </p>
           <p>La définition de cette propriété sur la classe d’effet Spark remplace le paramètre sur le composant cible. </p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformZ"><linktext>spark.effects.AnimateTransform.transformZ</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transitions:get"><apiName>transitions</apiName><shortdesc>
      Tableau d’objets de transition, où chaque objet de transition définit un ensemble d’effets à lire lors d’un changement de l’état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets de transition, où chaque objet de transition définit un ensemble d’effets à lire lors d’un changement de l’état d’affichage.
           </apiDesc></apiValueDetail><related-links><link href="mx.states.xml#Transition"><linktext>mx.states.Transition</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      Tableau de propriétés en cours d’interpolation sur cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de propriétés en cours d’interpolation sur cet objet.
           <p>Utilisé pour avertir le gestionnaire EffectManager que certaines propriétés de cet objet sont en cours d’interpolation, de sorte qu’il ne tente pas d’animer les mêmes propriétés.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:uid:get"><apiName>uid</apiName><shortdesc>
      Identifiant unique de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Identifiant unique de l’objet. Les commandes de données Flex, y compris toutes les commandes correspondant à des sous-classes de la classe List, utilisent un UID pour le suivi des éléments du fournisseur de données.
           <p>Flex peut automatiquement créer et gérer des UID. Toutefois, dans certaines circonstances vous devez fournir votre propre propriété <codeph>uid</codeph> en implémentant l’interface IUID, ou fournir votre propre propriété <codeph>uid</codeph> pour améliorer l’efficacité de traitement. Les UID n’ont pas besoin d’être universellement uniques pour la plupart des utilisations dans Flex. Les messages transmis par les services de données constituent une exception.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUID"><linktext>IUID</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledHeight:get"><apiName>unscaledHeight</apiName><shortdesc>
      Méthode pratique pour déterminer la hauteur non mise à l’échelle du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Méthode pratique pour déterminer la hauteur non mise à l’échelle du composant. L’ensemble du traçage et de la présentation des enfants d’un composant doit être réalisé dans un rectangle de délimitation de cette hauteur, qui est également transmise comme argument à la méthode <codeph>updateDisplayList()</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledWidth:get"><apiName>unscaledWidth</apiName><shortdesc>
      Méthode pratique pour déterminer la hauteur non mise à l’échelle du composant. L’ensemble du traçage et de la présentation des enfants d’un composant doit être réalisé dans un rectangle de délimitation de cette largeur, qui est également transmise comme argument à la méthode updateDisplayList().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Méthode pratique pour déterminer la hauteur non mise à l’échelle du composant. L’ensemble du traçage et de la présentation des enfants d’un composant doit être réalisé dans un rectangle de délimitation de cette largeur, qui est également transmise comme argument à la méthode <codeph>updateDisplayList()</codeph>.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
      Utilisé par un validateur pour associer un sous-champ à ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Utilisé par un validateur pour associer un sous-champ avec ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>Pour les composants, cette propriété de contrainte de mise en page est une façade s'ajoutant au style du même nom. Pour définir la propriété sur sa valeur par défaut <codeph>undefined</codeph>, utilisez la directive @Clear() dans MXML ou la valeur <codeph>undefined</codeph>dans le code ActionScript. Par exemple, dans le code MXML, <codeph>verticalCenter.s2="@Clear()"</codeph>, désélectionnez la contrainte <codeph>verticalCenter</codeph> dans l'état s2. Ou dans le code ActionScript, <codeph>button.verticalCenter = undefined</codeph> désélectionnez la contrainte <codeph>verticalCenter</codeph> sur <codeph>button</codeph>.</p>
      
      
      Distance verticale en pixels du centre du composant au centre de la zone de contenu de la cible d’ancrage.
           <p>La cible d’ancrage par défaut est le conteneur lui-même.</p>
           <p>Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. La zone de contenu est alors l’espace entre la rangée précédente (ou le côté du conteneur) et la rangée cible.</p>
           <p>Définir la propriété sur un nombre ou une chaîne numérique (par exemple, 10) spécifie l’utilisation de la cible d’ancrage par défaut. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « constraintColumnId:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:visible:get"><apiName>visible</apiName><shortdesc>
      Indique si l’objet d’affichage est visible ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="show"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si l’objet d’affichage est visible ou non. Les objets d’affichage qui ne sont pas visibles sont désactivés. Par exemple, si <codeph>visible=false</codeph> pour une occurrence InteractiveObject, il est impossible de cliquer sur cette dernière. 
           <p>Lorsque la valeur est définie sur <codeph>true</codeph>, l’objet distribue un événement <codeph>show</codeph>. Lorsque la valeur est définie sur <codeph>false</codeph>, l’objet distribue un événement <codeph>hide</codeph>. Dans les deux cas, les enfants de l’objet ne génèrent pas d’événement <codeph>show</codeph> ou <codeph>hide</codeph>, sauf si l’objet écrit de façon explicite une telle implémentation.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:width:get"><apiName>width</apiName><shortdesc>
      Nombre définissant la largeur du composant en pixels, dans les coordonnées du parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="widthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur du composant en pixels, dans les coordonnées du parent. La valeur par défaut est 0, mais cette propriété contient la largeur réelle du composant dès lors que Flex termine le dimensionnement des composants de l’application.
           <p>Remarque : vous pouvez spécifier une valeur de pourcentage pour l’attribut MXML <codeph>width</codeph>, par exemple <codeph>width="100%"</codeph>, mais pas pour la propriété <codeph>width</codeph> dans ActionScript. Utilisez plutôt la propriété <codeph>percentWidth</codeph>.</p>
           <p>La définition de cette propriété entraîne la distribution d’un événement <codeph>resize</codeph>. Reportez-vous à l’événement <codeph>resize</codeph> pour plus d’informations sur le moment de distribution de cet événement. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/percentWidth"><linktext>percentWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:x:get"><apiName>x</apiName><shortdesc>
      Nombre spécifiant la position horizontale du composant, en pixels, au sein de son conteneur parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="xChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre spécifiant la position horizontale du composant, en pixels, au sein de son conteneur parent. 
           <p>La définition de cette propriété directement, ou en appelant la méthode <codeph>move()</codeph> n’a aucun effet (ou seulement un effet temporaire) si le composant a pour parent un conteneur de présentation tel que HBox, Grid ou Form. En effet, les calculs de présentation de ces conteneurs définissent la position <codeph>x</codeph> d’après les résultats des calculations. Toutefois, la propriété <codeph>x</codeph> doit être quasiment toujours définie lorsque le parent est un conteneur Canvas ou tout autre conteneur à positionnement absolu, car la valeur par défaut est 0. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:y:get"><apiName>y</apiName><shortdesc>
      Nombre spécifiant la position verticale du composant, en pixels, au sein de son conteneur parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="yChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre spécifiant la position verticale du composant, en pixels, au sein de son conteneur parent. 
           <p>La définition de cette propriété directement, ou en appelant la méthode <codeph>move()</codeph> n’a aucun effet (ou seulement un effet temporaire) si le composant a pour parent un conteneur de présentation tel que HBox, Grid ou Form. En effet, les calculs de présentation de ces conteneurs définissent la position <codeph>x</codeph> d’après les résultats des calculations. Toutefois, la propriété <codeph>x</codeph> doit être quasiment toujours définie lorsque le parent est un conteneur Canvas ou tout autre conteneur à positionnement absolu, car la valeur par défaut est 0. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:z:get"><apiName>z</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="zChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:UIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc>
      Utilisé par Flex pour suggérer la mise en cache sous forme de bitmap de l’objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Utilisé par Flex pour suggérer la mise en cache sous forme de bitmap de l’objet. Si la propriété <codeph>cachePolicy</codeph> est définie sur la valeur <codeph>UIComponentCachePolicy.AUTO</codeph>, alors la propriété <codeph>cacheHeuristic</codeph> est utilisée pour contrôler la propriété <codeph>cacheAsBitmap</codeph> de l’objet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      Matrice de transformation utilisée pour calculer la présentation d’un composant par rapport à ses frères.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Matrice de transformation utilisée pour calculer la présentation d’un composant par rapport à ses frères. Cette matrice est définie par les propriétés 3D du composant (qui incluent les propriétés 2D, par exemple <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>, ainsi que <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>scaleZ</codeph>, <codeph>z</codeph> et <codeph>transformZ</codeph>).
      
      <p>La plupart des composants ne disposent pas de propriétés de transformation 3D définies.</p>
      
      <p>Cette matrice de mise en forme est combinée avec les valeurs de la propriété <codeph>postLayoutTransformOffsets</codeph> pour déterminer la matrice calculée finale du composant. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:maintainProjectionCenter:set"><apiName>maintainProjectionCenter</apiName><shortdesc>
      Lorsque sa valeur est true, le composant garde sa matrice de projection centrée sur le milieu de son cadre de sélection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Lorsque sa valeur est true, le composant garde sa matrice de projection centrée sur le milieu de son cadre de sélection. Si aucune matrice de projection n’est définie sur le composant, elle est ajoutée automatiquement. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transform:set"><apiName>transform</apiName><shortdesc>
      Objet dont les propriétés se rapportent à la matrice, à la transformation des couleurs et aux limites des pixels d’un objet d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc>
      Objet dont les propriétés se rapportent à la matrice, à la transformation des couleurs et aux limites des pixels d’un objet d’affichage. Les propriétés spécifiques, telles que matrix, colorTransform et trois propriétés en lecture seule (<codeph>concatenatedMatrix</codeph>, <codeph>concatenatedColorTransform</codeph> et <codeph>pixelBounds</codeph>) sont décrites dans la section relative à la classe <codeph>Transform</codeph>.  
      
      <p>Chacune des propriétés de l’objet transform constitue un objet. Ce concept est important dans la mesure où la seule façon de définir de nouvelles valeurs pour les objets matrix ou colorTransform consiste à créer un objet et à le copier dans la propriété transform.matrix ou transform.colorTransform.</p>
     
      <p>Par exemple, pour augmenter la valeur tx d’une matrice d’objet d’affichage, vous devez copier l’ensemble de l’objet de la matrice, puis copier le nouvel objet dans la propriété matrix de l’objet transform :</p>
           <pre>
      var myMatrix:Matrix = myUIComponentObject.transform.matrix;  
      myMatrix.tx += 10; 
      myUIComponent.transform.matrix = myMatrix;
      </pre>
       
      Vous ne pouvez pas définir directement la propriété tx. Le code suivant n’a pas d’effet sur myUIComponent :
     
      <pre>
      myUIComponent.transform.matrix.tx += 10;
      </pre>
           <p>Notez que pour <codeph>UIComponent</codeph>, contrairement à <codeph>DisplayObject</codeph>, l’opération <codeph>transform</codeph> conserve la synchronisation des valeurs <codeph>matrix</codeph> et <codeph>matrix3D</codeph> et <codeph>matrix3D</codeph> n’est pas null, même lorsque le composant lui-même n’a aucune propriété 3D définie. Les développeurs doivent utiliser la propriété <codeph>is3D</codeph> pour vérifier si le composant dispose de propriétés 3D définies. Si le composant a des propriétés 3D, la propriété <codeph>matrix3D</codeph> de la transformation doit être utilisée à la place de la propriété <codeph>matrix</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#UIComponent/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#UIComponent/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/is3D"><linktext>is3D</linktext></link><link href="mx.geom.xml#Transform"><linktext>mx.geom.Transform</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
  La classe BitmapAsset est une sous-classe de flash.display.Bitmap, classe qui représente les images bitmap incorporées dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexBitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe BitmapAsset est une sous-classe de flash.display.Bitmap, classe qui représente les images bitmap incorporées dans une application Flex. Elle implémente l’interface IFlexDisplayObject, ce qui permet l’affichage d’une image bitmap dans un contrôle d’image, ou son utilisation en tant qu’arrière-plan de conteneur ou habillage de composant.
 
  <p>L’image bitmap incorporée peut figurer dans un fichier JPEG, GIF ou PNG. Vous pouvez également incorporer un symbole bitmap figurant dans un fichier SWF produit par Flash. Dans chacun de ces cas, le compilateur MXML génère automatiquement une classe qui étend la classe BitmapAsset pour représenter l’image bitmap incorporée.</p>
 
  <p>Généralement, il n’est pas nécessaire d’utiliser la classe BitmapAsset directement lors de l’écriture d’une application Flex. Par exemple, vous pouvez incorporer un fichier GIF et afficher l’image dans un contrôle d’image en écrivant le code suivant :</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Logo.gif')"/></pre>
 
  <p>ou l’utiliser comme image d’arrière-plan de l’application en syntaxe CSS en écrivant le code suivant :</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Logo.gif")
      }
  &lt;fx:Style/></pre>
 
  <p>sans devoir comprendre que le compilateur MXML crée automatiquement une sous-classe de BitmapAsset.</p>
 
  <p>Cependant, il peut être utile de comprendre ce qui se passe au niveau du code ActionScript. Afin d’incorporer une image bitmap dans ActionScript, vous déclarez une variable de type Class pour lui ajouter des métadonnées <codeph>[Embed]</codeph>. Par exemple, incorporez un fichier GIF de la manière suivante :</p>
 
  <pre>
  [Bindable]
  [Embed(source="Logo.gif")]
  private var logoClass:Class;</pre>
 
  <p>Le compilateur MXML détecte l’extension .gif, transcode les données GIF dans le format bitmap utilisé par le lecteur, génère automatiquement une sous-classe de la classe BitmapAsset et définit la variable comme référence à cette classe auto-générée. Vous pouvez ensuite utiliser cette référence de classe pour créer des occurrences de la classe BitmapAsset à l’aide de l’opérateur <codeph>new</codeph> et utiliser les API de la classe BitmapAsset sur ces dernières :</p>
 
  <pre>
  var logo:BitmapAsset = BitmapAsset(new logoClass());
  logo.bitmapData.noise(4);</pre>
 
  <p>Toutefois, il est rarement nécessaire de créer des occurrences BitmapAsset manuellement. En effet, les propriétés et styles liés aux images peuvent être définis sur une classe produisant une image. Les composants créent ainsi les occurrences d’image en tant que de besoin. Par exemple, pour afficher cette image dans un contrôle d’image, vous pouvez définir la propriété <codeph>source</codeph> de l’image sur <codeph>logoClass</codeph>. Dans MXML, procédez de la manière suivante :</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:BitmapAsset:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>Données de l’image bitmap. 
     
      </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Indique si l’objet Bitmap est accroché ou non au pixel le plus proche.
     
      </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indique si l’image bitmap est lissée lorsqu’elle est mise à l’échelle.  
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:BitmapAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change. Si celles-ci diffèrent, la méthode est chargée de la réflexion du contenu de l'élément et de la mise à jour de la transformation post-mise en forme de l'élément afin que les descendants héritent d'un système de coordonnées par symétrie. IVisualElements met généralement en œuvre la réflexion en utilisant postLayoutTransformOffsets pour réduire l'axe des abscisses par -1 et pour translater la coordonnée de l'axe des x de l'origine par la largeur de l'élément. L'effet net de cette transformation « miroir » est d'inverser la direction dans laquelle l'axe des abscisses augmente sans modifier l'emplacement de l'élément par rapport à l'origine de son parent.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:move"><apiName>move</apiName><shortdesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position x de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position y de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Définit la taille réelle de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Définit la taille réelle de cet objet.
	 
	  <p>Cette méthode est principalement utilisée dans le cadre de l’implémentation de la méthode <codeph>updateDisplayList()</codeph>, qui permet de calculer la taille réelle de l’objet, en fonction de sa taille explicite, de sa taille par rapport au parent (pourcentage) et de sa taille mesurée. Vous pouvez ensuite appliquer cette taille réelle à l’objet en appelant la méthode <codeph>setActualSize()</codeph>.</p>
	 
	  <p>Dans d’autres situations, il est préférable de définir les propriétés telles que <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph> plutôt que d’appeler cette méthode.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:BitmapAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          Spécifie la direction de mise en forme souhaitée pour un élément : l'une des valeurs LayoutDirection.LTR (de gauche à droite), LayoutDirection.RTL (de droite à gauche) ou null (héritée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          Spécifie la direction de mise en forme souhaitée pour un élément: l'une des valeurs LayoutDirection.LTR (de gauche à droite), LayoutDirection.RTL (de droite à gauche) ou null (héritée). Cette propriété est généralement soutenue par un style héritable. Si sa valeur est null, le style layoutDirection est défini sur undefined. Les classes telles que GraphicElement, qui mettent en œuvre ILayoutDirectionElement mais ne prennent pas en charge les styles, doivent en outre prendre en charge la valeur null pour cette propriété, ce qui signifie que la direction de la mise en forme doit être héritée de son parent. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Hauteur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Hauteur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Largeur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Largeur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutDirectionElement"><apiName>ILayoutDirectionElement</apiName><shortdesc>
      L'interface ILayoutDirectionElement définit les propriétés minimales et les méthodes requises pour qu'un Objet prenne en charge la propriété layoutDirection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      L'interface ILayoutDirectionElement définit les propriétés minimales et les méthodes requises pour qu'un Objet prenne en charge la propriété layoutDirection.
      
      </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links><apiOperation id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          Un élément doit appeler cette méthode lorsque la direction de la mise en forme change ou lorsque la direction de la mise en forme de son parent change. Si celles-ci diffèrent, la méthode est chargée de la réflexion du contenu de l'élément et de la mise à jour de la transformation post-mise en forme de l'élément afin que les descendants héritent d'un système de coordonnées par symétrie. IVisualElements met généralement en œuvre la réflexion en utilisant postLayoutTransformOffsets pour réduire l'axe des abscisses par -1 et pour translater la coordonnée de l'axe des x de l'origine par la largeur de l'élément. L'effet net de cette transformation « miroir » est d'inverser la direction dans laquelle l'axe des abscisses augmente sans modifier l'emplacement de l'élément par rapport à l'origine de son parent.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
          Spécifie la direction de mise en forme souhaitée pour un élément : l'une des valeurs LayoutDirection.LTR (de gauche à droite), LayoutDirection.RTL (de droite à gauche) ou null (héritée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          Spécifie la direction de mise en forme souhaitée pour un élément: l'une des valeurs LayoutDirection.LTR (de gauche à droite), LayoutDirection.RTL (de droite à gauche) ou null (héritée). Cette propriété est généralement soutenue par un style héritable. Si sa valeur est null, le style layoutDirection est défini sur undefined. Les classes telles que GraphicElement, qui mettent en œuvre ILayoutDirectionElement mais ne prennent pas en charge les styles, doivent en outre prendre en charge la valeur null pour cette propriété, ce qui signifie que la direction de la mise en forme doit être héritée de son parent. 
          
          </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeProvider"><apiName>ISWFBridgeProvider</apiName><shortdesc>
  Un implémenteur de ISWFBridgeProvider fournit un pont vers une application dans un sandbox de sécurité différent, ou vers une application compilée avec une version différente du compilateur Flex et exécutée dans un autre domaine ApplicationDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Un implémenteur de ISWFBridgeProvider fournit un pont vers une application dans un sandbox de sécurité différent, ou vers une application compilée avec une version différente du compilateur Flex et exécutée dans un autre domaine ApplicationDomain. Cette interface permet à un appelant d’obtenir un pont vers cette application. Dès lors que l’appelant dispose du pont, il peut distribuer des événements à l’application. 
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
      Vérifie si l’enfant autorise son parent à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans l’enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Vérifie si l’enfant autorise son parent à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans l’enfant. La valeur est <codeph>true</codeph> si l’accès est autorisé. Sinon, la valeur est <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
      Vérifie si le parent autorise son enfant à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans le parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Vérifie si le parent autorise son enfant à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans le parent. La valeur est <codeph>true</codeph> si l’accès est autorisé. Sinon, la valeur est <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
      Pont vers l’application qui est associé à l’implémentation de cette interface.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Pont vers l’application qui est associé à l’implémentation de cette interface. Objet IEventDispatcher pouvant servir à envoyer des événements à une application dans un objet ApplicationDomain différent ou un sandbox différent.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
  Une occurrence ClassFactory est un « objet fabrique » utilisé par Flex pour générer des occurrences d’une autre classe, ayant toutes des propriétés identiques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFactory</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Une occurrence ClassFactory est un « objet fabrique » utilisé par Flex pour générer des occurrences d’une autre classe, ayant toutes des propriétés identiques.
 
  <p>Vous spécifiez une classe <codeph>generator</codeph> lorsque vous créez l’objet fabrique. Vous pouvez alors définir la propriété <codeph>properties</codeph> sur l’objet fabrique. Flex utilise l’objet fabrique pour générer des occurrences en appelant la méthode <codeph>newInstance()</codeph> de l’objet fabrique.</p>
 
  <p>La méthode <codeph>newInstance()</codeph> crée une nouvelle occurrence de la classe <codeph>generator</codeph> et définit les propriétés spécifiées par <codeph>properties</codeph> dans la nouvelle occurrence. Le cas échéant, pour personnaliser les occurrences générées, vous pouvez remplacer la méthode <codeph>newInstance()</codeph>.</p>
 
  <p>La classe ClassFactory met en œuvre l’interface IFactory. Par conséquent, elle permet de créer des objets pouvant être affectés à des propriétés du type IFactory, telles que la propriété <codeph>itemRenderer</codeph> d’une commande List ou la propriété <codeph>itemEditor</codeph> d’une commande DataGrid.</p>
 
  <p>Par exemple, supposons que vous écrivez une classe de rendu d’élément appelée ProductRenderer contenant une propriété <codeph>showProductImage</codeph> pouvant avoir la valeur <codeph>true</codeph> ou <codeph>false</codeph>. Si vous souhaitez permettre à une commande List d’utiliser ce rendu, puis faire afficher une image du produit par chaque occurrence de rendu, vous devez écrire le code suivant :</p>
 
  <pre>
  var productRenderer:ClassFactory = new ClassFactory(ProductRenderer);
  productRenderer.properties = { showProductImage: true };
  myList.itemRenderer = productRenderer;</pre>
 
  <p>La commande List appelle la méthode <codeph>newInstance()</codeph> sur l’objet <codeph>itemRenderer</codeph> pour créer des occurrences individuelles de la classe ProductRenderer ayant toutes la propriété <codeph>showProductImage</codeph> définie sur <codeph>true</codeph>. Pour faire omettre l’image du produit par une autre commande List, utilisez la classe ProductRenderer pour créer une autre fabrique ClassFactory avec la propriété <codeph>properties</codeph> définie sur <codeph>{ showProductImage: false }</codeph>.</p>
 
  <p>L’utilisation de la propriété <codeph>properties</codeph> pour configurer les occurrences peut être efficace, car elle permet l’utilisation d’une même classe generator de différentes façons. Toutefois, il est très courant de créer des classes generator non configurables qui ne nécessitent aucune définition de propriétés. Pour cette raison, MXML permet d’utiliser la syntaxe suivante : </p>
 
  <pre>
  &lt;mx:List id="myList" itemRenderer="ProductRenderer"></pre>
 
  <p>Le compilateur MXML crée automatiquement l’occurrence ClassFactory.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IFactory"><linktext>mx.core.IFactory</linktext></link><link href="" invalidHref="mx.controls.List.xml"><linktext>mx.controls.List</linktext></link></related-links><apiConstructor id="mx.core:ClassFactory:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Classe utilisée par la méthode <codeph>newInstance()</codeph> pour la création d’objets à partir de cet objet de fabrique.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Crée une nouvelle occurrence de la classe generator, avec les propriétés spécifiées par properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Nouvelle occurrence ayant été créée.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Crée une nouvelle occurrence de la classe <codeph>generator</codeph> avec les propriétés spécifiées par <codeph>properties</codeph>.
	 
	  <p>Cette méthode implémente la méthode <codeph>newInstance()</codeph> de l’interface IFactory.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ClassFactory:generator"><apiName>generator</apiName><shortdesc>
      Classe utilisée par la méthode newInstance() pour la création d’objets à partir de cet objet de fabrique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Classe utilisée par la méthode <codeph>newInstance()</codeph> pour la création d’objets à partir de cet objet de fabrique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ClassFactory:properties"><apiName>properties</apiName><shortdesc>
	 Objet dont les paires nom/valeur spécifient les propriétés à définir sur chaque objet généré par la méthode newInstance().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	 Objet dont les paires nom/valeur spécifient les propriétés à définir sur chaque objet généré par la méthode <codeph>newInstance()</codeph>.
	 
	  <p>Par exemple, si vous définissez <codeph>properties</codeph> sur <codeph>{ text: "Hello", width: 100 }</codeph>, alors chaque occurrence de la classe <codeph>generator</codeph> générée par l’appel de la méthode <codeph>newInstance()</codeph> aura une propriété <codeph>text</codeph> définie sur <codeph>"Hello"</codeph> et une propriété <codeph>width</codeph> définie sur <codeph>100</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IUITextField"><apiName>IUITextField</apiName><shortdesc>
  L’interface IUITextField définit l’ensemble des API de base pour les occurrences UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IUITextField définit l’ensemble des API de base pour les occurrences UITextField.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:appendText"><apiName>appendText</apiName><shortdesc conref="flash.text.TextField#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc conref="flash.text.TextField#getCharBoundaries()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharBoundaries()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getImageReference"><apiName>getImageReference</apiName><shortdesc conref="flash.text.TextField#getImageReference()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getImageReference()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc conref="flash.text.TextField#getLineIndexOfChar()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexOfChar()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineLength"><apiName>getLineLength</apiName><shortdesc conref="flash.text.TextField#getLineLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc conref="flash.text.TextField#getLineMetrics()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineMetrics()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc conref="flash.text.TextField#getLineOffset()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineOffset()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineText"><apiName>getLineText</apiName><shortdesc conref="flash.text.TextField#getLineText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc conref="flash.text.TextField#getParagraphLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getParagraphLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UITextField#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Valeur du style.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc conref="flash.text.TextField#getTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextFormat"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc conref="mx.core.UITextField#getUITextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier><apiDesc>Objet comportant des informations de formatage pour ce composant.
           </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#getUITextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc conref="flash.text.TextField#replaceSelectedText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceSelectedText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceText"><apiName>replaceText</apiName><shortdesc conref="flash.text.TextField#replaceText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setColor"><apiName>setColor</apiName><shortdesc conref="mx.core.UITextField#setColor()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Nouvelle couleur de police.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#setColor()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UITextField#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setSelection"><apiName>setSelection</apiName><shortdesc conref="flash.text.TextField#setSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc conref="flash.text.TextField#setTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flash.text:TextFormat"/></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc conref="mx.core.UITextField#truncateToFit()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si le texte a dû être tronqué.
      
      </apiDesc></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Texte à ajouter après la troncature. Si vous transmettez <codeph>null</codeph>, une chaîne localisable telle que <codeph>"..."</codeph> est utilisée.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#truncateToFit()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUITextField:mx.core:IUITextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc conref="flash.text.TextField#alwaysShowSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#alwaysShowSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc conref="flash.text.TextField#antiAliasType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#antiAliasType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:autoSize:get"><apiName>autoSize</apiName><shortdesc conref="flash.text.TextField#autoSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#autoSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc conref="flash.text.TextField#backgroundColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#backgroundColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:background:get"><apiName>background</apiName><shortdesc conref="flash.text.TextField#background">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#background">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:borderColor:get"><apiName>borderColor</apiName><shortdesc conref="flash.text.TextField#borderColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#borderColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:border:get"><apiName>border</apiName><shortdesc conref="flash.text.TextField#border">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#border">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc conref="flash.text.TextField#bottomScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#bottomScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc conref="flash.text.TextField#caretIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#caretIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc conref="flash.text.TextField#condenseWhite">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#condenseWhite">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc conref="flash.text.TextField#defaultTextFormat">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc conref="flash.text.TextField#defaultTextFormat">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc conref="flash.text.TextField#embedFonts">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#embedFonts">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc conref="flash.text.TextField#gridFitType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#gridFitType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:htmlText:get"><apiName>htmlText</apiName><shortdesc conref="flash.text.TextField#htmlText">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#htmlText">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc conref="mx.core.UITextField#ignorePadding">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UITextField#ignorePadding">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc conref="mx.core.UITextField#inheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#inheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:length:get"><apiName>length</apiName><shortdesc conref="flash.text.TextField#length">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#length">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc conref="flash.text.TextField#maxScrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc conref="flash.text.TextField#maxScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc conref="flash.text.TextField#mouseWheelEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#mouseWheelEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:multiline:get"><apiName>multiline</apiName><shortdesc conref="flash.text.TextField#multiline">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#multiline">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UITextField#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UITextField#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc conref="mx.core.UITextField#nonInheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonInheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc conref="mx.core.UITextField#nonZeroTextHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonZeroTextHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:numLines:get"><apiName>numLines</apiName><shortdesc conref="flash.text.TextField#numLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#numLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollH:get"><apiName>scrollH</apiName><shortdesc conref="flash.text.TextField#scrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollV:get"><apiName>scrollV</apiName><shortdesc conref="flash.text.TextField#scrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectable:get"><apiName>selectable</apiName><shortdesc conref="flash.text.TextField#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc conref="flash.text.TextField#selectionBeginIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionBeginIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc conref="flash.text.TextField#selectionEndIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionEndIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:sharpness:get"><apiName>sharpness</apiName><shortdesc conref="flash.text.TextField#sharpness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#sharpness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc conref="flash.text.TextField#styleSheet">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/></apiValueDef><apiDesc conref="flash.text.TextField#styleSheet">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textColor:get"><apiName>textColor</apiName><shortdesc conref="flash.text.TextField#textColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#textColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textHeight:get"><apiName>textHeight</apiName><shortdesc conref="flash.text.TextField#textHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textWidth:get"><apiName>textWidth</apiName><shortdesc conref="flash.text.TextField#textWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:text:get"><apiName>text</apiName><shortdesc conref="flash.text.TextField#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#text">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:thickness:get"><apiName>thickness</apiName><shortdesc conref="flash.text.TextField#thickness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#thickness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:type:get"><apiName>type</apiName><shortdesc conref="flash.text.TextField#type">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#type">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:useRichTextClipboard:get"><apiName>useRichTextClipboard</apiName><shortdesc conref="flash.text.TextField#useRichTextClipboard">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#useRichTextClipboard">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc conref="flash.text.TextField#wordWrap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#wordWrap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponentCachePolicy"><apiName>UIComponentCachePolicy</apiName><shortdesc>
  La classe ContainerCreationPolicy définit les valeurs de constante de la propriété cachePolicy de la classe UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ContainerCreationPolicy définit les valeurs de constante de la propriété <codeph>cachePolicy</codeph>de la classe UIComponent.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/cachePolicy"><linktext>mx.core.UIComponent.cachePolicy</linktext></link></related-links><apiValue id="mx.core:UIComponentCachePolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
      Spécifie que la structure Flex doit utiliser des heuristiques pour décider si l’objet est mis en mémoire cache sous forme de bitmap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie que la structure Flex doit utiliser l’heuristique pour décider si l’objet est mis en mémoire cache sous forme de bitmap.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:OFF"><apiName>OFF</apiName><shortdesc>
      Spécifie que la structure Flex ne doit jamais tenter de mettre l’objet en mémoire cache sous forme de bitmap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie que la structure Flex ne doit jamais tenter de mettre l’objet en mémoire cache sous forme de bitmap.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:ON"><apiName>ON</apiName><shortdesc>
      Spécifie que la structure Flex doit toujours mettre l’objet en mémoire cache sous forme de bitmap.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Spécifie que la structure Flex doit toujours mettre l’objet en mémoire cache sous forme de bitmap.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
  La classe FlexSprite est une sous-classe de la classe Sprite du lecteur et la super-classe de UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FlexSprite est une sous-classe de la classe Sprite du lecteur et la super-classe de UIComponent. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSprite:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
	 
	  <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils.</p>
	 
	  <p>Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"Button17"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSprite:toString"><apiName>toString</apiName><shortdesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.Button17"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IConstraintClient"><apiName>IConstraintClient</apiName><shortdesc>
  L’interface IConstraintClient définit l’interface pour les composants qui prennent en charge les contraintes de présentation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IConstraintClient définit l’interface pour les composants qui prennent en charge les contraintes de présentation. Cette interface est uniquement utilisée par les implémentations de présentations basées sur les contraintes.  
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      Renvoie la valeur de contrainte spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur de contrainte ou null si elle n’est pas définie.
     
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Nom de la valeur de contrainte. Les paramètres de contrainte sont "<codeph>baseline</codeph>", "<codeph>bottom</codeph>", "<codeph>horizontalCenter</codeph>", "<codeph>left</codeph>", "<codeph>right</codeph>", "<codeph>top</codeph>" et "<codeph>verticalCenter</codeph>".
     
      <p>Pour plus d’informations sur ces paramètres, voir les conteneurs Canvas et Panel et les métadonnées de style AnchorStyles.</p>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur de contrainte spécifiée.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.containers.Canvas.xml"><linktext>mx.containers.Canvas</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      Définit la valeur de contrainte spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Nom de la valeur de contrainte. Les paramètres de contrainte sont "<codeph>baseline</codeph>", "<codeph>bottom</codeph>", "<codeph>horizontalCenter</codeph>", "<codeph>left</codeph>", "<codeph>right</codeph>", "<codeph>top</codeph>" et "<codeph>verticalCenter</codeph>".
     
      <p>Pour plus d’informations sur ces paramètres, voir les conteneurs Canvas et Panel et les métadonnées de style AnchorStyles.</p>
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Nouvelle valeur de la contrainte.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la valeur de contrainte spécifiée.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.containers.Canvas.xml"><linktext>mx.containers.Canvas</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:ISelectableList"><apiName>ISelectableList</apiName><shortdesc>
  L’interface ISelectableList indique que l’implémenteur est un élément IList qui prend en charge la propriété selectedIndex. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface ISelectableList indique que l’implémenteur est un élément IList qui prend en charge la propriété <codeph>selectedIndex</codeph>. 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ISelectableList_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Distribué lorsque la propriété selectedIndex change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>selectedIndex</codeph> change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:ISelectableList_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la propriété selectedIndex change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>selectedIndex</codeph> change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="mx.core:ISelectableList:mx.core:ISelectableList:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      Index de l’élément IList sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de l’élément IList sélectionné.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
  Fabrique de classe fournissant un gestionnaire système en tant que contexte de création de la classe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ClassFactory</apiBaseClassifier></apiClassifierDef><apiDesc>
  Fabrique de classe fournissant un gestionnaire système en tant que contexte de création de la classe.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ContextualClassFactory:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Classe utilisée par la méthode <codeph>newInstance()</codeph> pour la création d’objets à partir de cet objet de fabrique.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Contexte de gestionnaire système dans lequel l’objet doit être créé. 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Constructeur.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ContextualClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Crée une nouvelle occurrence de la classe generator, avec les propriétés spécifiées par properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Nouvelle occurrence ayant été créée.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Crée une nouvelle occurrence de la classe <codeph>generator</codeph> avec les propriétés spécifiées par <codeph>properties</codeph>.
	 
	  <p>Cette méthode implémente la méthode <codeph>newInstance()</codeph> de l’interface IFactory.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ContextualClassFactory:moduleFactory"><apiName>moduleFactory</apiName><shortdesc>
	  Contexte dans lequel un objet doit être créé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Contexte dans lequel un objet doit être créé. 
	 
	  <p>Il est utilisé pour la résolution à l’aide des polices incorporées dans un fichier SWF d’application lorsque la structure est chargée en tant que bibliothèque RSL (la bibliothèque RSL possède son propre fichier SWF de contexte). Les polices incorporées sont uniquement accessibles à partir du fichier SWF du contexte dans lequel elles ont été créées. A l’aide du gestionnaire <codeph>systemManager</codeph> du fichier SWF de l’application, la bibliothèque RSL peut créer des objets dans le fichier SWF de contexte de l’application ayant accès aux polices incorporées de l’application. La propriété <codeph>moduleFactory</codeph> appelle la méthode <codeph>create()</codeph> pour créer un objet dans le contexte de <codeph>moduleFactory</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IProgrammaticSkin"><apiName>IProgrammaticSkin</apiName><shortdesc>
  L’interface IProgrammaticSkin définit l’interface que les classes d’habillage doivent implémenter si elles utilisent l’interface d’habillage de la propriété name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IProgrammaticSkin définit l’interface que les classes d’habillage doivent implémenter si elles utilisent l’interface d’habillage de la propriété <codeph>name</codeph>. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
  ByteArrayAsset est une sous-classe de flash.utils.ByteArray, classe qui représente une séquence arbitraire d’octets de données à incorporer dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.utils:ByteArray</apiBaseClassifier></apiClassifierDef><apiDesc>
  ByteArrayAsset est une sous-classe de flash.utils.ByteArray, classe qui représente une séquence arbitraire d’octets de données à incorporer dans une application Flex.
 
  <p>Les octets de données à incorporer peuvent figurer dans tout type de fichier, et le fichier est toujours incorporé en intégralité. Vous ne pouvez pas incorporer les octets d’un élément particulier figurant dans un fichier SWF, mais vous pouvez incorporer l’ensemble du fichier SWF.</p>
 
  <p>Le compilateur MXML génère automatiquement une classe qui étend la classe ByteArrayAsset pour représenter les données incorporées.</p>
 
  <p>Pour incorporer un fichier arbitraire, déclarez une variable de type Class et ajoutez-lui des métadonnées <codeph>[Embed]</codeph> à l’aide du type MIME <codeph>application/octet-stream</codeph>. Par exemple, incorporez un fichier texte de la manière suivante :</p>
 
  <pre>
  [Bindable]
  [Embed(source="Story.txt", mimeType="application/octet-stream")]
  private var storyClass:Class;
  </pre>
 
  <p>Le compilateur génère automatiquement une sous-classe de la classe ByteArrayAsset et définit la variable en tant que référence à cette classe auto-générée. Vous pouvez ensuite utiliser cette référence de classe pour créer des occurrences de la classe ByteArrayAsset à l’aide de l’opérateur <codeph>new</codeph>, et vous pouvez extraire les données du tableau d’octets à l’aide des méthodes de la classe ByteArray :</p>
 
  <pre>
  var storyByteArray:ByteArrayAsset = ByteArrayAsset(new storyClass());
  var story:String = storyByteArray.readUTFBytes(storyByteArray.length);
  </pre>
 
  <p>Pour l’incorporation, spécifiez le type MIME <codeph>application/octet-stream</codeph>, afin d’incorporer les données d’octet « en l’état », sans interprétation. Ce type implique également que la classe générée automatiquement étend la classe ByteArrayAsset plutôt qu’une autre classe d’éléments.</p>
 
  <p>Par exemple, si vous incorporez un fichier PNG sans spécifier ce type MIME, les données PNG sont automatiquement transcodées au format bitmap utilisé par le lecteur et une sous-classe de la classe BitmapAsset est générée automatiquement pour représenter le fichier. Si vous spécifiez le type MIME <codeph>application/octet-stream</codeph>, aucun transcodage n’est effectué, les données PNG sont incorporées en l’état et la classe générée automatiquement étend la classe ByteArrayAsset.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ByteArrayAsset:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
  Une occurrence UIComponentDescriptor encapsule les données spécifiées dans une balise MXML pour une occurrence d’un composant visuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ComponentDescriptor</apiBaseClassifier></apiClassifierDef><apiDesc>
  Une occurrence UIComponentDescriptor encapsule les données spécifiées dans une balise MXML pour une occurrence d’un composant visuel.
 
  <p>La plupart des balises d’un fichier MXML décrivent une arborescence d’objets UIComponent. Par exemple, la balise <codeph>&lt;mx:Application></codeph> représente un objet UIComponent et ses commandes et conteneurs enfant sont tous des objets UIComponent.</p>
 
  <p>Le compilateur MXML compile chacune de ces balises MXML dans une occurrence UIComponentDescriptor. Pour être précis, le compilateur MXML génère automatiquement une structure de données ActionScript qui correspond à une arborescence d’objets UIComponentDescriptor.</p>
 
  <p>Lors de l’exécution, la méthode <codeph>createComponentsFromDescriptors()</codeph> de la classe Container utilise les informations des objets UIComponentDescriptor dans le tableau <codeph>childDescriptors</codeph>du conteneur pour créer les objets UIComponent réels qui sont les enfants du conteneur, ainsi que des descendants plus éloignés. Selon la valeur de la propriété <codeph>creationPolicy</codeph> du conteneur, les descendants peuvent être créés au démarrage de l’application, lorsqu’une partie du composant est sur le point de devenir visible, ou lorsque le développeur de l’application appelle manuellement la méthode <codeph>createComponentsFromDescriptors()</codeph>.</p>
 
  <p>Généralement, il n’est pas nécessaire de créer les occurrences UIComponentDescriptor manuellement. Vous pouvez accéder à celles que le compilateur MXML génère automatiquement via le tableau <codeph>childDescriptors</codeph> de la classe Container.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="" invalidHref="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:UIComponentDescriptor:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>Objet contenant des paires nom/valeur pour les propriétés de l’objet UIComponentDescriptor, telles que <codeph>type</codeph>, <codeph>id</codeph>, <codeph>propertiesFactory</codeph>, <codeph>events</codeph>, <codeph>stylesFactory</codeph> et <codeph>effects</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:UIComponentDescriptor:effects"><apiName>effects</apiName><shortdesc>
      Tableau contenant les effets pour le composant, tels que spécifiés dans le code MXML. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les effets pour le composant, tels que spécifiés dans le code MXML. 
     
      <p>Si, par exemple, vous écrivez le code suivant :</p>
	 
      <pre>
	  &lt;mx:TextInput showEffect="Fade" hideEffect="Fade"/></pre>
	 
      <p>La propriété <codeph>effects</codeph> du descripteur est le tableau <codeph>[ "showEffect", "hideEffect" ]</codeph>.</p>
     
      <p>La propriété <codeph>effects</codeph> a la valeur <codeph>null</codeph> si aucun effet MXML n’est spécifié pour le composant.</p>
	 
	  <p>Notez que les valeurs des attributs d’effet ne sont pas spécifiées dans cette propriété. Au lieu de cela, les effets sont traités comme des styles et sont donc inclus dans la propriété <codeph>stylesFactory</codeph>. Le tableau <codeph>effect</codeph> conserve une liste des styles de la propriété <codeph>stylesFactory</codeph> qui sont réellement des effets.</p>
	 
      <p>Cette propriété est utilisée par la méthode <codeph>createComponentsFromDescriptors()</codeph> pour enregistrer les effets dans le gestionnaire EffectManager.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentDescriptor:stylesFactory"><apiName>stylesFactory</apiName><shortdesc>
      Fonction qui construit un objet contenant des paires nom/valeur pour les styles hérités du composant, tels que spécifiés dans le code MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction qui construit un objet contenant des paires nom/valeur pour les styles hérités du composant, tels que spécifiés dans le code MXML.
	 
	  <p>Si, par exemple, vous écrivez le code suivant :</p>
	 
      <pre>
	  &lt;mx:TextInput borderColor="0x888888" color="0xDDDDDD"/></pre>
	 
	  <p>alors la propriété <codeph>stylesFactory</codeph> du descripteur est la fonction :</p>
	 
      <pre>
	  function():void { this.borderColor = 0x888888; this.color = 0xDDDDDD };</pre>
	 
      <p>La propriété <codeph>stylesFactory</codeph> a la valeur <codeph>null</codeph> si aucun style MXML n’est spécifié pour l’occurrence du composant.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
  FlexLoader est une sous-classe de la classe Loader du lecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Loader</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexLoader est une sous-classe de la classe Loader du lecteur. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexLoader:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils.</p>
      <p>Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"FlexLoader13"</codeph>.</p>
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/createUniqueName()"><linktext>mx.utils.NameUtils.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexLoader:toString"><apiName>toString</apiName><shortdesc>
      Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.FlexLoader13"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/displayObjectToString()"><linktext>mx.utils.NameUtils.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUID"><apiName>IUID</apiName><shortdesc>
  L’interface IUID définit l’interface pour les objets qui doivent porter des identifiants uniques (UID) pour identifier de façon unique l’objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IUID définit l’interface pour les objets qui doivent porter des identifiants uniques (UID) pour identifier de façon unique l’objet. Les UID n’ont pas besoin d’être universellement uniques pour la plupart des utilisations dans Flex. Les messages transmis par les services de données constituent une exception.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IUID:mx.core:IUID:uid:get"><apiName>uid</apiName><shortdesc>
	  ID unique de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  ID unique de cet objet.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexShape"><apiName>FlexShape</apiName><shortdesc>
  FlexShape est une sous-classe de la classe Shape du lecteur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Shape</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexShape est une sous-classe de la classe Shape du lecteur. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexShape:FlexShape"><apiName>FlexShape</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
	 
	  <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils.</p>
	 
	  <p>Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"FlexShape15"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexShape:toString"><apiName>toString</apiName><shortdesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.FlexShape15"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:INavigatorContent"><apiName>INavigatorContent</apiName><shortdesc>
  L’interface INavigatorContent définit l’interface qu’un conteneur doit implémenter pour être utilisé comme l’enfant d’un conteneur de navigateur, telles que les conteneurs de navigateur ViewStack, TabNavigator et Accordion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface INavigatorContent définit l’interface qu’un conteneur doit implémenter pour être utilisé comme l’enfant d’un conteneur de navigateur, telles que les conteneurs de navigateur ViewStack, TabNavigator et Accordion.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      Icône affichée par le conteneur de navigateur pour ce conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Icône affichée par le conteneur de navigateur pour ce conteneur. L’icône s’affiche dans la zone du bouton d’un conteneur Accordion et dans la zone des onglets du conteneur TabNavigator. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      Texte affiché par le conteneur de navigateur pour ce conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Texte affiché par le conteneur de navigateur pour ce conteneur. Par exemple, le texte s’affiche dans la zone du bouton d’un conteneur Accordion et dans la zone des onglets du conteneur TabNavigator. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FontAsset"><apiName>FontAsset</apiName><shortdesc>
  La classe FontAsset est une sous-classe de flash.text.Font, classe qui représente les polices incorporées dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.text:Font</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FontAsset est une sous-classe de flash.text.Font, classe qui représente les polices incorporées dans une application Flex.
 
  <p>La police incorporée peut être de type TrueType (TTF) ou OpenType (OTF). Vous pouvez également incorporer une police système ou une police figurant dans un fichier SWF produit par Flash. Dans chacun de ces cas, le compilateur MXML génère automatiquement une classe qui étend la classe FontAsset pour représenter la police incorporée. </p>
 
  <p>Généralement, il n’est pas nécessaire d’utiliser la classe FontAsset directement lors de l’écriture d’une application Flex. Par exemple, vous pouvez incorporer une police à l’aide du sélecteur CSS <codeph>font-face</codeph> sans devoir comprendre que le compilateur MXML crée automatiquement une sous-classe de FontAsset.</p>
 
  <p>Cependant, il peut être utile de comprendre ce qui se passe au niveau du code ActionScript. Afin d’incorporer une police dans ActionScript, vous déclarez une variable de type Class pour lui ajouter des métadonnées <codeph>[Embed]</codeph>. Par exemple, incorporez un fichier TTF de la manière suivante :</p>
 
  <pre>
  [Embed(source="Fancy.ttf", fontName="Fancy")] 
  var fancyClass:Class;
  </pre>
 
  <p>Le compilateur MXML transcode les données TTF dans le format audio utilisé par le lecteur, génère automatiquement une sous-classe de la classe FontAsset et définit la variable comme référence à cette classe auto-générée. Vous pouvez ensuite utiliser cette référence de classe pour créer des occurrences de la classe FontAsset à l’aide de l’opérateur <codeph>new</codeph> et utiliser les API de la classe Font sur ces dernières :</p>
 
  <pre>
  var fancyFont:FontAsset = FontAsset(new fancyClass());
  var hasDigits:Boolean = fancyFont.hasGlyphs("0123456789");
  </pre>
 
  <p>Toutefois, il est rarement nécessaire de créer des occurrences FontAsset manuellement. En effet, le nom <codeph>fontName</codeph> spécifié dans les métadonnées <codeph>[Embed]</codeph> permet d’établir la référence à la police. Par exemple, définissez le style CSS <codeph>fontFamily</codeph> sur le nom de police (dans cet exemple, <codeph>"Fancy"</codeph>) et non sur une occurrence FontAsset telle que <codeph>fancyFont</codeph>, ou sur la référence de classe <codeph>fancyClass</codeph>. Par exemple :</p>
 
  <pre>
  &lt;mx:Label text="Thank you for your order." fontFamily="Fancy"/>
  </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.Font.xml"><linktext>flash.text.Font</linktext></link></related-links><apiConstructor id="mx.core:FontAsset:FontAsset"><apiName>FontAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
  Valeurs des propriétés horizontalScrollPolicy et verticalScrollPolicy des classes Container et ScrollControlBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Valeurs des propriétés <codeph>horizontalScrollPolicy</codeph> et <codeph>verticalScrollPolicy</codeph> des classes Container et ScrollControlBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.ScrollControlBase.xml"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  Afficher la barre de défilement si les enfants excèdent les dimensions du propriétaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Afficher la barre de défilement si les enfants excèdent les dimensions du propriétaire. La taille du propriétaire n’étant pas ajustée pour tenir compte des barres de défilement lorsqu’elles apparaissent, la barre de défilement risque de dissimuler le contenu du composant ou du conteneur.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc>
	  Ne jamais afficher la barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Ne jamais afficher la barre de défilement.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc>
	  Toujours afficher la barre de défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Toujours afficher la barre de défilement. La taille de la barre de défilement est automatiquement ajoutée à celle du contenu du propriétaire pour déterminer cette dernière lorsque aucune taille n’est spécifiée de façon explicite.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient"><apiName>IStateClient</apiName><shortdesc>
  L’interface IStateClient définit l’interface à implémenter par les composants pour la prise en charge des états de vue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IStateClient définit l’interface à implémenter par les composants pour la prise en charge des états de vue.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IStateClient:mx.core:IStateClient:currentState:get"><apiName>currentState</apiName><shortdesc>
      Etat d’affichage actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Etat d’affichage actuel.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElement"><apiName>IVisualElement</apiName><shortdesc>
  L’interface IVisualElement définit les propriétés et les méthodes minimales nécessaires à la mise en forme et à l’affichage d’un élément visuel un conteneur Spark. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ILayoutElement</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IVisualElement définit les propriétés et les méthodes minimales nécessaires à la mise en forme et à l’affichage d’un élément visuel un conteneur Spark. 
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:depth:get"><apiName>depth</apiName><shortdesc>
      Détermine l’ordre dans lequel les éléments sont rendus au sein des conteneurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine l’ordre dans lequel les éléments sont rendus au sein des conteneurs. Les conteneurs Spark organisent leurs éléments en fonction de leur propriété <codeph>depth</codeph>, avec la profondeur la plus basse à l’arrière-plan et la plus élevée à l’avant. Les éléments avec la même valeur de profondeur apparaissent dans leur ordre d’ajout au conteneur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:designLayer:get"><apiName>designLayer</apiName><shortdesc>
      Spécifie l’occurrence DesignLayer facultative associée à cet élément visuel. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’occurrence DesignLayer facultative associée à cet élément visuel.   
     
      <p>Lorsqu’un objet DesignLayer est affecté, un élément visuel doit prendre en compte la visibilité et la valeur alpha de son calque parent, lors de l’enregistrement de ses propres valeurs de visibilité ou alpha réelles sur son objet DisplayObject de sauvegarde (si applicable). </p>
     
      <p>Un élément visuel doit écouter les notifications <codeph>layerPropertyChange</codeph> du calque parent associé. Lorsque la propriété <codeph>effectiveAlpha</codeph> ou <codeph>effectiveVisibility</codeph> est modifiée, l’élément doit ensuite calculer sa propre propriété de visibilité (ou alpha) et l’appliquer en conséquence. </p>
     
      <p>Cette propriété ne doit pas être définie directement dans MXML. </p>
      
      <p>La propriété <codeph>designLayer</codeph> n’est pas utilisée pour le contrôle de l’ordre de plan. Voir <codeph>depth</codeph>. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/depth"><linktext>depth</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:is3D:get"><apiName>is3D</apiName><shortdesc>
      Contient true lorsque l’élément est en 3D.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> lorsque l’élément est en 3D. L’élément peut être en 3D parce qu’il possède des propriétés de transformation 3D, des décalages de transformation 3D après la mise en forme ou les deux. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link><link href="mx.core.xml#ILayoutElement/hasLayoutMatrix3D"><linktext>mx.core.ILayoutElement.hasLayoutMatrix3D</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:owner:get"><apiName>owner</apiName><shortdesc>
      Propriétaire de cet objet IVisualElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Propriétaire de cet objet IVisualElement. Par défaut, il s’agit du parent de cet objet IVisualElement. Toutefois, si cet objet IVisualElement est un composant enfant déclenché par son parent, comme la liste déroulante d’un composant de commande ComboBox, le propriétaire est le composant ayant affiché cet objet IVisualElement.
     
      <p>Cette propriété n’est pas gérée par Flex, mais par chaque composant. Aussi, si vous utilisez la méthode <codeph>PopUpManger.createPopUp()</codeph> ou <codeph>PopUpManger.addPopUp()</codeph> pour afficher un composant enfant, définissez la propriété <codeph>owner</codeph> du composant enfant sur le composant l’ayant affiché.</p>
     
      <p>La valeur par défaut est la valeur de la propriété <codeph>parent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:parent:get"><apiName>parent</apiName><shortdesc>
      Conteneur ou composant parent de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Conteneur ou composant parent de ce composant. Seuls les éléments visuels doivent avoir une propriété <codeph>parent</codeph>. Les éléments non visuels doivent utiliser une autre propriété pour faire référence à l’objet auquel ils appartiennent. Par convention, les objets non visuels utilisent une propriété <codeph>owner</codeph> pour faire référence à l’objet auquel ils appartiennent.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc>
      Définit un ensemble de réglages pouvant être appliqué à la transformation d’un objet de manière invisible pour la présentation de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc>
      Définit un ensemble de réglages pouvant être appliqués à la transformation d’un objet de manière invisible pour la présentation de son parent. 
      
      <p>Par exemple, si vous souhaitez que la présentation s’adapte à un objet devant subir une rotation de 90 degrés, définissez la propriété <codeph>rotation</codeph> de ce dernier. Si vous souhaitez que la présentation ne s’adapte <i>pas</i> à un objet subissant une rotation, définissez sa propriété <codeph>postLayoutTransformOffsets.rotationZ</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:visible:get"><apiName>visible</apiName><shortdesc>
      Contrôle la visibilité de cet élément visuel. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle la visibilité de cet élément visuel. Si la valeur est <codeph>true</codeph>, l’objet est visible.
     
      <p>Si un objet n’est pas visible, mais que la propriété <codeph>includeInLayout</codeph> est définie sur <codeph>true</codeph>, l’objet occupe de l’espace dans le conteneur, mais est invisible. </p>
     
      <p>Si la valeur de <codeph>visible</codeph> est définie sur <codeph>true</codeph>, l’objet n’est pas nécessairement visible en raison de sa taille et de l’activation ou non de l’écrêtage du conteneur.</p>
     
      <p>Définir <codeph>visible</codeph> sur <codeph>false</codeph> empêche la mise en focus du composant.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ILayoutElement/includeInLayout"><linktext>ILayoutElement.includeInLayout</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
  FlexSimpleButton est une sous-classe de la classe SimpleButton du lecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:SimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSimpleButton est une sous-classe de la classe SimpleButton du lecteur. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSimpleButton:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
	 
	  <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils.</p>
	 
	  <p>Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"FlexSimpleButton16"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSimpleButton:toString"><apiName>toString</apiName><shortdesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.FlexSimpleButton16"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IContainer"><apiName>IContainer</apiName><shortdesc>
  IContainer est une interface indiquant qu’un composant étend ou reproduit la classe mx.core.Container.
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IContainer est une interface indiquant qu’un composant étend ou reproduit la classe mx.core.Container.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link></related-links><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChildAt"><apiName>addChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChild"><apiName>addChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:areInaccessibleObjectsUnderPoint"><apiName>areInaccessibleObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:contains"><apiName>contains</apiName><shortdesc conref="flash.display.DisplayObjectContainer#contains()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#contains()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildAt"><apiName>getChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildByName"><apiName>getChildByName</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildIndex"><apiName>getChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChildAt"><apiName>removeChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChild"><apiName>removeChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:setChildIndex"><apiName>setChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:startDrag"><apiName>startDrag</apiName><shortdesc conref="flash.display.Sprite#startDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lockCenter</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Sprite#startDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:stopDrag"><apiName>stopDrag</apiName><shortdesc conref="flash.display.Sprite#stopDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Sprite#stopDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildrenAt"><apiName>swapChildrenAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildren"><apiName>swapChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>child2</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IContainer:mx.core:IContainer:buttonMode:get"><apiName>buttonMode</apiName><shortdesc conref="flash.display.Sprite#buttonMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#buttonMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc conref="mx.core.Container#creatingContentPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.Container#creatingContentPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc conref="mx.core.Container#defaultButton">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#defaultButton">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:dropTarget:get"><apiName>dropTarget</apiName><shortdesc conref="flash.display.Sprite#dropTarget">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.Sprite#dropTarget">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc conref="mx.core.UIComponent#focusManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#focusManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:graphics:get"><apiName>graphics</apiName><shortdesc conref="flash.display.Sprite#graphics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Graphics"/></apiValueDef><apiDesc conref="flash.display.Sprite#graphics">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:hitArea:get"><apiName>hitArea</apiName><shortdesc conref="flash.display.Sprite#hitArea">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="flash.display.Sprite#hitArea">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="mx.core.Container#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:numChildren:get"><apiName>numChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#numChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#numChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc conref="flash.display.Sprite#soundTransform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc conref="flash.display.Sprite#soundTransform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabChildren:get"><apiName>tabChildren</apiName><shortdesc>
      Détermine si les enfants de l’objet prennent ou non en charge la tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Détermine si les enfants de l’objet prennent ou non en charge la tabulation. 
      
      <p><b>Remarque :</b> n’utilisez pas cette propriété avec Flex. Utilisez plutôt la propriété <codeph>UIComponent.hasFocusableChildren</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/hasFocusableChildren"><linktext>mx.core.UIComponent.hasFocusableChildren</linktext></link></related-links></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:textSnapshot:get"><apiName>textSnapshot</apiName><shortdesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.text:TextSnapshot"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:useHandCursor:get"><apiName>useHandCursor</apiName><shortdesc conref="flash.display.Sprite#useHandCursor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#useHandCursor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="mx.core.Container#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc conref="mx.core.Container#viewMetrics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#viewMetrics">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:RSLData"><apiName>RSLData</apiName><shortdesc>
  Une classe qui décrit les données de configuration pour une bibliothèque RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe qui décrit les données de configuration pour une bibliothèque RSL.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:RSLData:RSLData"><apiName>RSLData</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>rslURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Emplacement de la bibliothèque RSL.
      </apiDesc></apiParam><apiParam><apiItemName>policyFileURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>L’emplacement de l’URL du fichier de règles (facultatif).
      </apiDesc></apiParam><apiParam><apiItemName>digest</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Le condensé de la bibliothèque RSL. La valeur est null pour une bibliothèque RSL sans condensé.
      </apiDesc></apiParam><apiParam><apiItemName>hashType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Le type de hachage utilisé pour créer le condensé. La seule valeur prise en charge est <codeph>SHA256.TYPE_ID</codeph>.
      </apiDesc></apiParam><apiParam><apiItemName>isSigned</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>True si la bibliothèque RSL a été signée par Adobe, false dans le cas contraire.
      </apiDesc></apiParam><apiParam><apiItemName>verifyDigest</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si le condensé de la bibliothèque RSL doit être vérifié après son chargement. 
      </apiDesc></apiParam><apiParam><apiItemName>applicationDomainTarget</apiItemName><apiType value="String"/><apiData>default</apiData><apiDesc>Le domaine d’application dans lequel la bibliothèque RSL doit être chargée. Pour les valeurs possibles, voir l’énumération ApplicationDomainTarget.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiConstructor><apiValue id="mx.core:RSLData:applicationDomainTarget:get"><apiName>applicationDomainTarget</apiName><shortdesc>
      Le domaine d’application demandé dans lequel la bibliothèque RSL doit être chargée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Le domaine d’application demandé dans lequel la bibliothèque RSL doit être chargée. Pour les valeurs possibles, voir l’énumération ApplicationDomainTarget.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiValue><apiValue id="mx.core:RSLData:digest:get"><apiName>digest</apiName><shortdesc>
      Le condensé de la bibliothèque RSL. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Le condensé de la bibliothèque RSL. La valeur est null pour une bibliothèque RSL sans condensé.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:hashType:get"><apiName>hashType</apiName><shortdesc>
      Le type de hachage utilisé pour créer le condensé de la bibliothèque RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Le type de hachage utilisé pour créer le condensé de la bibliothèque RSL. Le seul type de hachage pris en charge est <codeph>SHA256.TYPE_ID</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:isSigned:get"><apiName>isSigned</apiName><shortdesc>
      True si la bibliothèque RSL a été signée par Adobe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True si la bibliothèque RSL a été signée par Adobe. False dans le cas contraire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Valeur autre que null si cette bibliothèque RSL doit être chargée dans un domaine d’application autre que le domaine d’application associé à la fabrique de modules effectuant le chargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Valeur autre que null si cette bibliothèque RSL doit être chargée dans un domaine d’application autre que le domaine d’application associé à la fabrique de modules effectuant le chargement. Si la valeur est null, chargez dans le domaine d’application actuel.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:policyFileURL:get"><apiName>policyFileURL</apiName><shortdesc>
      Une URL qui spécifie l’emplacement du fichier de règles (facultatif).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Une URL qui spécifie l’emplacement du fichier de règles (facultatif).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:rslURL:get"><apiName>rslURL</apiName><shortdesc>
      Emplacement de la bibliothèque RSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Emplacement de la bibliothèque RSL. L’URL peut être absolue ou relative à l’application ou au module. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:verifyDigest:get"><apiName>verifyDigest</apiName><shortdesc>
      La valeur est true si le condensé doit être vérifié avant le chargement de la bibliothèque RSL dans la mémoire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      La valeur est true si le condensé doit être vérifié avant le chargement de la bibliothèque RSL dans la mémoire. La valeur False autorise le chargement de la bibliothèque RSL sans vérification. Les bibliothèques RSL signées sont toujours vérifiées, quelle que soit la valeur.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
  TextFieldAsset est une sous-classe de la classeflash.text.TextField qui représente des symboles TextField à incorporer dans une application Flex à partir d’un fichier SWF produit par Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextFieldAsset est une sous-classe de la classeflash.text.TextField qui représente des symboles TextField à incorporer dans une application Flex à partir d’un fichier SWF produit par Flash. Elle implémente l’interface IFlexDisplayObject, ce qui permet l’affichage d’un élément TextFieldAsset dans un contrôle d’image, ou son utilisation en tant qu’arrière-plan de conteneur ou habillage de composant.
 
  <p>Cette classe est incluse dans Flex dans un souci d’exhaustivité, de sorte que tout type de symbole d’un fichier SWF produit par Flash peut être incorporé dans une application Flex. Toutefois, en règle générale les applications Flex n’utilisent pas les éléments TextField incorporés. Reportez-vous à des classes d’éléments plus couramment utilisées, telle que BitmapAsset pour plus d’informations sur le fonctionnement des éléments incorporés dans Flex.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:TextFieldAsset:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:TextFieldAsset:move"><apiName>move</apiName><shortdesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position x de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position y de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:TextFieldAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Définit la taille réelle de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Définit la taille réelle de cet objet.
	 
	  <p>Cette méthode est principalement utilisée dans le cadre de l’implémentation de la méthode <codeph>updateDisplayList()</codeph>, qui permet de calculer la taille réelle de l’objet, en fonction de sa taille explicite, de sa taille par rapport au parent (pourcentage) et de sa taille mesurée. Vous pouvez ensuite appliquer cette taille réelle à l’objet en appelant la méthode <codeph>setActualSize()</codeph>.</p>
	 
	  <p>Dans d’autres situations, il est préférable de définir les propriétés telles que <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph> plutôt que d’appeler cette méthode.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:TextFieldAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Hauteur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Hauteur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:TextFieldAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Largeur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Largeur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IInvalidating"><apiName>IInvalidating</apiName><shortdesc>
  L’interface IInvalidating définit l’interface des composants qui utilisent l’invalidation pour retarder la validation de propriété, la mesure, le tracé et la présentation (au lieu de les effectuer immédiatement).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IInvalidating définit l’interface des composants qui utilisent l’invalidation pour retarder la validation de propriété, la mesure, le tracé et la présentation (au lieu de les effectuer immédiatement).
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  L’appel de cette méthode provoque l’appel de la méthode validateDisplayList() du composant avant le rendu de la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  L’appel de cette méthode provoque l’appel de la méthode <codeph>validateDisplayList()</codeph> du composant avant le rendu de la liste d’affichage.
	 
	  <p>Pour les composants qui étendent l’interface UIComponent, cela provoque l’appel de la méthode <codeph>updateDisplayList()</codeph>.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  L’appel de cette méthode provoque l’appel de la méthode validateProperties() du composant avant le rendu de la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  L’appel de cette méthode provoque l’appel de la méthode <codeph>validateProperties()</codeph> du composant avant le rendu de la liste d’affichage.
	 
	  <p>Pour les composants qui étendent l’interface UIComponent, cela provoque l’appel de la méthode <codeph>commitProperties</codeph>.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  L’appel de cette méthode provoque l’appel de la méthode validateSize() du composant avant le rendu de la liste d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  L’appel de cette méthode provoque l’appel de la méthode <codeph>validateSize()</codeph> du composant avant le rendu de la liste d’affichage.
	 
	  <p>Pour les composants qui étendent l’interface UIComponent, cela provoque l’appel de la méthode <codeph>measure()</codeph>, sauf si les propriétés <codeph>explicitWidth</codeph> et <codeph>explicitHeight</codeph> du composant sont toutes deux définies.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:validateNow"><apiName>validateNow</apiName><shortdesc>
      Valide et met à jour les propriétés et la mise en forme de cet objet en appelant immédiatement les méthodes validateProperties(), validateSize() et validateDisplayList() lorsque cela est nécessaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Valide et met à jour les propriétés et la mise en forme de cet objet en appelant immédiatement les méthodes <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> et <codeph>validateDisplayList()</codeph> lorsque cela est nécessaire.
     
      <p>Lorsque des propriétés sont modifiées, les nouvelles valeurs ne prennent pas effet immédiatement sur le composant. Généralement, l’ensemble du code d’application devant être exécuté à ce moment est exécuté. La classe LayoutManager appelle ensuite les méthodes <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> et <codeph>validateDisplayList()</codeph> sur les composants, en fonction de la nécessité ou non de les valider et de leur profondeur dans la hiérarchie des objets de la liste d’affichage.</p>
	 
      <p>Par exemple, la définition de la propriété <codeph>width</codeph> est retardée, car elle peut nécessiter un nouveau calcul des largeurs des enfants ou des parents de l’objet. Le fait de retarder le traitement l’empêche de se répéter lorsque le code de l’application définit la propriété <codeph>width</codeph> à plusieurs reprises. Cette méthode permet de remplacer manuellement ce comportement.</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IChildList"><apiName>IChildList</apiName><shortdesc>
  L’interface IChildList définit les propriétés et les méthodes pour l’accès et la manipulation des listes d’enfants, qui sont des sous-ensembles des enfants d’un conteneur DisplayObjectContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IChildList définit les propriétés et les méthodes pour l’accès et la manipulation des listes d’enfants, qui sont des sous-ensembles des enfants d’un conteneur DisplayObjectContainer.
 
  <p>Par exemple, considérez la classe Container. Elle remplace les API DisplayObjectContainer telles que les méthodes <codeph>numChildren</codeph> et <codeph>getChildAt()</codeph> pour l’accès aux seuls enfants de « contenu », correspondant aux commandes et autres conteneurs placés dans celles-ci. Mais un conteneur peut également comprendre des enfants supplémentaires créés automatiquement par la structure, par exemple un habillage d’arrière-plan ou de bordure, ainsi que des barres de défilement. Ainsi, la classe Container expose une propriété du type IChildList appelée <codeph>rawChildren</codeph>, permettant d’accéder à tous ses enfants, et non seulement aux enfants de contenu.</p>
 
  <p>A titre d’autre exemple, la classe SystemManager est un objet DisplayObjectContainer dont les enfants sont répartis sur différents calques : les enfants normaux comme l’application figurent en dessous, puis viennent les fenêtres contextuelles, puis les infos-bulles, enfin les curseurs figurent tout en haut. La classe SystemManager dispose de propriétés nommées <codeph>popUpChildren</codeph>, <codeph>toolTipChildren</codeph> et <codeph>cursorChildren</codeph> permettant d’accéder à ces calques. Toutes ces propriétés sont de type IChildList. Par conséquent, vous pouvez compter le nombre de fenêtres contextuelles à l’aide de la propriété <codeph>systemManager.popUpChildren.numChildren</codeph>, insérer un autre objet DisplayObject dans le calque d’info-bulle à l’aide de la méthode <codeph>systemManager.toolTipChildren.addChild()</codeph> et ainsi de suite.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/rawChildren"><linktext>mx.core.Container.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/rawChildren"><linktext>mx.managers.SystemManager.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/popUpChildren"><linktext>mx.managers.SystemManager.popUpChildren</linktext></link><link href="mx.managers.xml#SystemManager/toolTipChildren"><linktext>mx.managers.SystemManager.toolTipChildren</linktext></link><link href="mx.managers.xml#SystemManager/cursorChildren"><linktext>mx.managers.SystemManager.cursorChildren</linktext></link></related-links><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      Ajoute une occurrence enfant de DisplayObject à cette liste d’enfants à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant ajouté. Correspond à l’argument <codeph>child</codeph> transmis en entrée.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter comme enfant.
	 
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index à laquelle ajouter l’enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute une occurrence enfant de DisplayObject à cette liste d’enfants à l’index spécifié. La position d’index 0 représente le début de la liste DisplayList et la position d’index <codeph>numChildren</codeph> représente la valeur de fin.
	 
	  <p>L’ajout d’un enfant à toute position, sauf à la fin d’une liste d’enfants, incrémente les index des enfants précédemment situés à cette position d’index ou à des indices supérieurs.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChild"><apiName>addChild</apiName><shortdesc>
      Ajoute un objet DisplayObject enfant à la fin de la liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant ajouté. Correspond à l’argument transmis.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à ajouter comme enfant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un objet DisplayObject enfant à la fin de la liste d’enfants.
     
	  <p>Le résultat des méthodes <codeph>childList.addChild(child)</codeph> et <codeph>childList.addChild(child, childList.numChildren)</codeph> est identique. Une fois l’enfant ajouté, son index est <codeph>(child.numChildren - 1)</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:contains"><apiName>contains</apiName><shortdesc>
	  Détermine si un objet DisplayObject figure dans cette liste d’enfants ou est un descendant d’un enfant de cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si l’objet DisplayObject figure dans cette liste d’enfants ou est un descendant d’un enfant de cette liste d’enfants ; <codeph>false</codeph>dans le cas contraire.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à tester.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Détermine si un objet DisplayObject figure dans cette liste d’enfants ou est un descendant d’un enfant de cette liste d’enfants.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildAt"><apiName>getChildAt</apiName><shortdesc>
	  Obtient l’objet DisplayObject enfant qui se trouve à la position d’index spécifiée de cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant à l’index spécifié.
	  
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Entier compris entre 0 et <codeph>(numChildren - 1)</codeph> qui spécifie la position d’index d’un enfant de cette liste d’enfants.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Obtient l’objet DisplayObject enfant qui se trouve à la position d’index spécifiée de cette liste d’enfants.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      Obtient l’objet DisplayObject enfant avec le nom spécifié dans cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant portant le nom spécifié.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Nom de l’enfant à renvoyer.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient l’objet DisplayObject enfant avec le nom spécifié dans cette liste d’enfants.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
	  Récupère la position d’index d’un enfant spécifique dans cette liste d’enfants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Position d’index de l’enfant, correspondant à un entier compris entre 0 et <codeph>(numChildren - 1)</codeph>.
	  
	  </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Enfant portant la position d’index à obtenir.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Récupère l’index d’un enfant spécifique dans cette liste d’enfants. 
	 
	  <p>Le premier enfant dans la liste d’enfants a un index de 0, le deuxième enfant a un index de 1, et le dernier enfant a un index de <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>Si <codeph>getChildIndex(myChild)</codeph> renvoie 5, alors <codeph>myView.getChildAt(5)</codeph> renvoie <codeph>myChild</codeph>.</p>
	 
	  <p>Si vous ajoutez un enfant en appelant la méthode <codeph>addChild()</codeph>, la position d’index du nouvel enfant est égale à la plus grande position d’index parmi les enfants existants plus un.</p>
	 
	  <p>Vous pouvez insérer un enfant à une position d’index spécifiée à l’aide de la méthode <codeph>addChildAt()</codeph>. Dans ce cas, les enfants précédemment à cette position d’index et aux indices supérieurs ont leur position d’index augmentée de 1 pour que tous les enfants soient indexés entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>Si vous supprimez un enfant en appelant les méthodes <codeph>removeChild()</codeph> ou <codeph>removeChildAt()</codeph>, les enfants des indices supérieurs ont leur position d’index diminuée de 1 pour que tous les enfants soient indexés entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>Si vous modifiez la position d’index d’un enfant en appelant la méthode <codeph>setChildIndex()</codeph>, les positions d’index des enfants situés entre l’ancienne position d’index et la nouvelle (incluse) sont ajustées pour que tous les enfants soient indexés entre 0 et <codeph>(numChildren - 1)</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc>
      Renvoie un tableau d’objets DisplayObject de niveau inférieur au point spécifié et figurant dans cette liste d’enfants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets de niveau inférieur au point spécifié qui sont des enfants de ce conteneur.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Le point sous lequel sont extraits les objets.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un tableau d’objets DisplayObject de niveau inférieur au point spécifié et figurant dans cette liste d’enfants. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      Supprime l’objet DisplayObject enfant qui se trouve à l’index spécifié de cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant supprimé.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index enfant de l’objet DisplayObject à supprimer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’objet DisplayObject enfant qui se trouve à l’index spécifié de cette liste d’enfants.
	 
	  <p>La suppression d’un enfant ailleurs qu’à la fin d’une liste d’enfants décrémente les index des enfants d’index supérieur.</p>
     
      <p>Le parent de l’enfant supprimé est défini sur null et l’enfant fait l’objet d’une récupération de place si plus aucun élément n’y fait référence.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChild"><apiName>removeChild</apiName><shortdesc>
      Supprime l’objet DisplayObject enfant spécifié de cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Enfant supprimé. Correspond à l’argument transmis.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject à supprimer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’objet DisplayObject enfant spécifié de cette liste d’enfants.
	 
	  <p>La suppression d’un enfant ailleurs qu’à la fin d’une liste d’enfants décrémente les index des enfants d’index supérieur.</p>
     
	  <p>Le parent de l’enfant supprimé est défini sur null et l’enfant fait l’objet d’une récupération de place si plus aucun élément n’y fait référence.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
	  Modifie la position d’index d’un enfant particulier de cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Enfant pour lequel définir la position d’index.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Nouvel index pour l’enfant spécifié. Il doit correspondre à un entier compris entre zéro et <codeph>(numChildren - 1)</codeph>.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Modifie la position d’index d’un enfant particulier de cette liste d’enfants. Voir la méthode <codeph>getChildIndex()</codeph> pour une description de l’index de l’enfant.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IChildList:mx.core:IChildList:numChildren:get"><apiName>numChildren</apiName><shortdesc>
	  Nombre d’enfants dans cette liste d’enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
	  Nombre d’enfants dans cette liste d’enfants.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredContentOwner"><apiName>IDeferredContentOwner</apiName><shortdesc>
  L’interface IDeferredContentOwner définit les propriétés et les méthodes de l’instanciation. différée </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IDeferredContentOwner définit les propriétés et les méthodes de l’instanciation. différée 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#INavigatorContent"><linktext>mx.core.INavigatorContent</linktext></link></related-links><adobeApiEvent id="mx.core:IDeferredContentOwner_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  Distribué une fois que le contenu du composant a été créé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué une fois que le contenu du composant a été créé. Grâce à l’instanciation différée, le contenu d’un composant peut être créé longtemps après la création du composant.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Créer le contenu de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Créer le contenu de ce composant. Si la valeur de la propriété <codeph>creationPolicy</codeph> est <codeph>auto</codeph> ou <codeph>all</codeph>, la structure Flex appelle cette méthode. Si la valeur de la propriété <codeph>creationPolicy</codeph> est <codeph>none</codeph>, vous devez explicitement appeler cette méthode pour créer le contenu pour le composant. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      Stratégie de création de contenu de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Stratégie de création de contenu de ce composant. 
     
      <p>Valeurs possibles :
        <ul>
          <li><codeph>auto</codeph> : crée automatiquement le contenu immédiatement, avant qu’il ne soit nécessaire.</li>
          <li><codeph>all</codeph> : crée le contenu dès que le composant parent est créé. Cette option ne doit être utilisée qu’en dernier recours, car elle augmente le temps de démarrage et l’utilisation de la mémoire.</li>
          <li><codeph>none</codeph> : le contenu doit être créé manuellement en appelant la méthode <codeph>createDeferredContent()</codeph>.</li>
        </ul>
      </p>
      
      <p>Si aucune propriété <codeph>creationPolicy</codeph> n’est spécifiée pour un conteneur, ce dernier hérite la valeur de la propriété <codeph>creationPolicy</codeph> de son parent.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Indicateur qui signale si le contenu différé a été créé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si le contenu différé a été créé. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITransientDeferredInstance"><apiName>ITransientDeferredInstance</apiName><shortdesc>
  L’interface ITransientDeferredInstance étend IDeferredInstance et ajoute la possibilité pour l’utilisateur de réinitialiser la fabrique d’occurrence différée sur son état initial (en règle générale, cela implique de libérer les références connues au composant, par exemple de définir la propriété de document propriétaire faisant référence à l’occurrence sur null).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredInstance</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface ITransientDeferredInstance étend IDeferredInstance et ajoute la possibilité pour l’utilisateur de réinitialiser la fabrique d’occurrence différée sur son état initial (en règle générale, cela implique de libérer les références connues au composant, par exemple de définir la propriété de document propriétaire faisant référence à l’occurrence sur null). Cette fonctionnalité supplémentaire est exploitée par le remplacement d’états AddItems si le comportement souhaité est de supprimer un élément spécifique à un état lorsque l’état ne s’applique plus. Le compilateur Flex utilise les mêmes règles de coercition automatique qu’avec l’interface IDeferredInstance.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddItems"><linktext>mx.states.AddItems</linktext></link><link href="mx.core.xml#IDeferredInstance"><linktext>mx.core.IDeferredInstance</linktext></link></related-links><apiOperation id="mx.core:ITransientDeferredInstance:mx.core:ITransientDeferredInstance:reset"><apiName>reset</apiName><shortdesc>
      Rétablit notre fabrique sur son état initial, en effaçant toute référence à l’occurrence mise en cache. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Rétablit notre fabrique sur son état initial, en effaçant toute référence à l’occurrence mise en cache. 
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
  ButtonAsset est une sous-classe de la classe flash.display.SimpleButton qui représente des symboles de bouton à incorporer dans une application Flex à partir d’un fichier SWF produit par Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexSimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset est une sous-classe de la classe flash.display.SimpleButton qui représente des symboles de bouton à incorporer dans une application Flex à partir d’un fichier SWF produit par Flash. Elle implémente l’interface IFlexDisplayObject, ce qui permet l’affichage d’un élément SimpleButtonAsset dans un contrôle d’image, ou son utilisation en tant qu’arrière-plan de conteneur ou habillage de composant.
 
  <p>Cette classe est incluse dans Flex dans un souci d’exhaustivité, de sorte que tout type de symbole d’un fichier SWF produit par Flash peut être incorporé dans une application Flex. Toutefois, en règle générale les applications Flex n’utilisent pas les éléments SimpleButton incorporés. Reportez-vous à des classes d’éléments plus couramment utilisées, telle que BitmapAsset pour plus d’informations sur le fonctionnement des éléments incorporés dans Flex.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ButtonAsset:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ButtonAsset:move"><apiName>move</apiName><shortdesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position x de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position y de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ButtonAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Définit la taille réelle de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Définit la taille réelle de cet objet.
	 
	  <p>Cette méthode est principalement utilisée dans le cadre de l’implémentation de la méthode <codeph>updateDisplayList()</codeph>, qui permet de calculer la taille réelle de l’objet, en fonction de sa taille explicite, de sa taille par rapport au parent (pourcentage) et de sa taille mesurée. Vous pouvez ensuite appliquer cette taille réelle à l’objet en appelant la méthode <codeph>setActualSize()</codeph>.</p>
	 
	  <p>Dans d’autres situations, il est préférable de définir les propriétés telles que <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph> plutôt que d’appeler cette méthode.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ButtonAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Hauteur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Hauteur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ButtonAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Largeur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Largeur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
  La classe MovieClipLoaderAsset est une sous-classe de MovieClipAsset, classe qui représente les fichiers SWF incorporés dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:MovieClipAsset</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe MovieClipLoaderAsset est une sous-classe de MovieClipAsset, classe qui représente les fichiers SWF incorporés dans une application Flex.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:MovieClipLoaderAsset_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué après le chargement complet du fichier SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après le chargement complet du fichier SWF.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:MovieClipLoaderAsset:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialHeight"><apiName>initialHeight</apiName><shortdesc>
	  Stockage de sauvegarde de la propriété measuredHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Stockage de sauvegarde de la propriété <codeph>measuredHeight</codeph>. Les sous-classes doivent définir cette valeur dans le constructeur.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialWidth"><apiName>initialWidth</apiName><shortdesc>
	  Stockage de sauvegarde de la propriété measuredWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Stockage de sauvegarde de la propriété <codeph>measuredWidth</codeph>. Les sous-classes doivent définir cette valeur dans le constructeur.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:movieClipData:get"><apiName>movieClipData</apiName><shortdesc>
	  Objet ByteArray contenant le contenu interne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:ByteArray"/></apiValueDef><apiDesc>
	  Objet ByteArray contenant le contenu interne. Remplacée dans les sous-classes.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IPropertyChangeNotifier"><apiName>IPropertyChangeNotifier</apiName><shortdesc>
  L’interface IPropertyChangeNotifier définit une interface de marqueur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IUID</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface <codeph>IPropertyChangeNotifier</codeph> définit une interface de marqueur. Les classes qui prennent en charge cette interface déclarent la prise en charge de la propagation d’événement de manière spécifique. Les classes qui implémentent cette interface doivent diffuser les événements pour chaque propriété de cette classe ainsi que pour les classes imbriquées éventuelles, publiquement exposées en tant que propriétés. Pour les propriétés anonymes (complexes et non fortement typées), les classes d’implémentation fournissent une prise en charge personnalisée ou utilisent directement la classe ObjectProxy. Les implémenteurs de cette interface doivent utiliser la méthode <codeph>PropertyChangeEvent.createUpdateEvent()</codeph> pour construire un événement de mise à jour approprié à diffuser. 
  </apiDesc><example>
  <codeph><pre>
   
 function set myProperty(value:Object):void
 {
    var oldValue:IPropertyChangeNotifier = _myProperty;
    var newValue:IPropertyChangeNotifier = value;
    
    // Need to ensure to dispatch changes on the new property.
    // Listeners use the source property to determine which object 
    // actually originated the event.
    // In their event handler code, they can tell if an event has been 
    // propagated from deep within the object graph by comparing 
    // event.target and event.source. If they are equal, then the property
    // change is at the surface of the object. If they are not equal, the
    // property change is somewhere deeper in the object graph.
    newValue.addEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE, 
                dispatchEvent);
 
    // need to stop listening for events from the old property
    oldValue.removeEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE,
                dispatchEvent);
 
    _myProperty = newValue;
 
    // now notify anyone that is listening
    if (dispatcher.hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE))
    {
         var event:PropertyChangeEvent = 
                         PropertyChangeEvent.createUpdateEvent(
                                                       this,
                                                       "myProperty",
                                                       newValue,
                                                       oldValue);
        dispatchEvent(event);
     }
  }
 
      
  </pre></codeph>
  
  </example></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IVisualElementContainer"><apiName>IVisualElementContainer</apiName><shortdesc>
  L’interface IVisualElementContainer définit les propriétés et les méthodes minimale nécessaires à un conteneur pour gérer l’affichage des composants Spark. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IVisualElementContainer définit les propriétés et les méthodes minimales nécessaires à un conteneur pour gérer l’affichage des composants Spark. 
   <p>Notez que les conteneurs DataGroup et SkinnableDataContainer Spark n’implémentent pas cette interface. Ces conteneurs gèrent leurs enfants via la propriété <codeph>dataProvider</codeph>. </p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IVisualElement"><linktext>mx.core.IVisualElement</linktext></link></related-links><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Ajoute un élément visuel à ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’élément est le même que le conteneur.
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Si la position d’index n’existe pas dans la liste des enfants.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément ajouté. 
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Elément à ajouter en tant qu’enfant de ce conteneur visuel. 
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Position d’index à laquelle est ajouté l’élément. Si vous spécifiez une position d’index actuellement occupée, l’enfant associé à cette position et toutes les positions supérieures sont décalés d’une position vers le haut dans la liste des enfants.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un élément visuel à ce conteneur. L’élément est placé à la position d’index spécifiée. La position d’index 0 représente le premier élément de la liste d’affichage. 
     
      <p>Si vous ajoutez un élément visuel qui possède déjà un autre conteneur différent comme parent, il est supprimé de l’autre conteneur.</p>  
           </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Distribué lorsque l’élément est ajouté à la liste d’enfants.
     
      </apiDesc></adobeApiEventDetail><shortdesc>Distribué lorsque l’élément est ajouté à la liste d’enfants.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement"><apiName>addElement</apiName><shortdesc>
      Ajoute un élément visuel à ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’élément est le même que le conteneur visuel.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément ajouté. 
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Elément visuel à ajouter en tant qu’enfant de ce conteneur. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un élément visuel à ce conteneur. L’élément est ajouté après tous les autres éléments, au-dessus de ces derniers pour ajouter un élément visuel à une position d’index spécifique, utilisez la méthode <codeph>addElementAt()</codeph>.
     
      <p>Si vous ajoutez un élément visuel qui possède déjà un autre conteneur différent comme parent, il est supprimé de l’autre conteneur.</p>  
           </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Distribué lorsque l’élément est ajouté à la liste d’enfants.
     
      </apiDesc></adobeApiEventDetail><shortdesc>Distribué lorsque l’élément est ajouté à la liste d’enfants.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      Renvoie l’élément visuel à l’emplacement d’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si la position d’index n’existe pas dans la liste des enfants.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément présent à l’index spécifié.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément à récupérer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’élément visuel à l’index spécifié.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      Renvoie la position d’index d’un élément visuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’élément n’est pas un enfant de ce conteneur visuel.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Position d’index de l’élément dans le conteneur. 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Elément visuel. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la position d’index d’un élément visuel.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      Supprime tous les éléments visuels du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime tous les éléments visuels du conteneur. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      Supprime un élément visuel du conteneur, à la position d’index spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’index n’existe pas dans la liste d’enfants.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément supprimé.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément à supprimer.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime un élément visuel du conteneur, à la position d’index spécifiée. Les positions d’index de tout élément au-dessus de l’élément de ce conteneur visuel sont diminuées d’une unité. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      Supprime l’élément visuel spécifié de la liste des enfants de ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si le paramètre d’élément n’est pas un enfant de ce conteneur visuel.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Elément supprimé.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Elément à supprimer du conteneur. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime l’élément visuel spécifié de la liste des enfants de ce conteneur. Les positions d’index de tout élément au-dessus de l’élément de ce conteneur visuel sont diminuées d’une unité. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      Modifie la position d’un élément visuel existant dans le conteneur visuel. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’index n’existe pas dans la liste d’enfants.
           </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Si le paramètre d’élément n’est pas un enfant de ce conteneur visuel.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Elément dont vous voulez modifier le numéro d’index.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Nouveau numéro d’index de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Modifie la position d’un élément visuel existant dans le conteneur visuel. 
     
      <p>Lorsque vous appelez la méthode <codeph>setElementIndex()</codeph> et spécifiez une position d’index déjà occupée, les seules positions qui changent sont celles situées entre l’ancienne et la nouvelle position de l’élément. Toutes les autres positions restent identiques.</p>
           <p>Si un élément visuel est déplacé vers un index inférieur à son index actuel, l’index de tous les éléments entre les deux augmente de 1. Si un élément est déplacé vers un index supérieur à son index actuel, l’index de tous les éléments situés entre l’ancienne position et la nouvelle position diminue d’une unité.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      Intervertit les éléments visuels qui se trouvent aux deux positions d’index spécifiées dans le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Si l’un ou l’autre des index n’existe pas dans le conteneur visuel.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>Index du premier élément.
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>Index du second élément. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Intervertit les éléments visuels qui se trouvent aux deux positions d’index spécifiées dans le conteneur. Tous les autres éléments visuels gardent la même position d’index. 
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      Intervertit l’index des deux éléments visuels spécifiés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Premier élément visuel.
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Deuxième élément visuel.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Intervertit l’index des deux éléments visuels spécifiés. Tous les autres éléments gardent la même position d’index. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      Nombre d’éléments visuels dans ce conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre d’éléments visuels dans ce conteneur. Les éléments visuels comprennent des classes qui implémentent l’interface IVisualElement, tels que les sous-classes de UIComponent et GraphicElement. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeaterClient"><apiName>IRepeaterClient</apiName><shortdesc>
  L’interface IRepeaterClient définit les API pour les composants pouvant présenter plusieurs occurrences créées par un objet Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IRepeaterClient définit les API pour les composants pouvant présenter plusieurs occurrences créées par un objet Repeater. L’interface IRepeaterClient est implémentée par la classe UIComponent et donc héritée par tous les conteneurs et commandes de la structure Flex.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Initialise les propriétés instanceIndices, repeaterIndices et repeaters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>Objet Repeater parent ayant créé ce composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialise les propriétés <codeph>instanceIndices</codeph>, <codeph>repeaterIndices</codeph> et <codeph>repeaters</codeph>.
     
      <p>Cette méthode est appelée par la structure Flex. Les développeurs ne doivent pas nécessairement l’appeler.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      Tableau contenant les indices requis pour faire référence à l’occurrence du composant répété à partir de son document.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les indices requis pour faire référence à l’occurrence du composant répété à partir de son document. Ce tableau est vide, sauf si le composant figure dans un ou plusieurs objets Repeater. Le premier élément correspond à l’objet Repeater le plus excentré. Par exemple, si <codeph>id</codeph> a la valeur <codeph>"b"</codeph> et <codeph>instanceIndices</codeph> a la valeur <codeph>[ 2, 4 ]</codeph>, la référence dans le document est <codeph>b[2][4]</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:isDocument:get"><apiName>isDocument</apiName><shortdesc conref="mx.core.UIComponent#isDocument">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isDocument">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      Tableau contenant les indices des éléments dans les fournisseurs de données des objets Repeater ayant produit le composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les indices des éléments dans les fournisseurs de données des objets Repeater ayant produit le composant. Le tableau est vide, sauf si le composant figure dans un ou plusieurs objets Repeater. Le premier élément correspond au composant Repeater le plus excentré. Par exemple, si <codeph>repeaterIndices</codeph> a la valeur <codeph>[ 2, 4 ]</codeph>, alors le composant Repeater externe a utilisé son objet de données <codeph>dataProvider[2]</codeph> et le composant Repeater interne a utilisé son objet de données<codeph> dataProvider[4]</codeph>.
     
      <p>Cette propriété est différente de <codeph>instanceIndices</codeph> si la propriété <codeph>startingIndex</codeph> de l’un des composants Repeater est non nulle. Par exemple, même si un composant Repeater commence à l’élément <codeph>dataProvider</codeph> 4, la référence du document au premier composant répété est <codeph>b[0]</codeph> et non <codeph>b[4]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      Tableau contenant les objets Repeater englobants éventuels du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau contenant les objets Repeater englobants éventuels du composant. Le tableau est vide, sauf si le composant figure dans un ou plusieurs objets Repeater. Le premier élément correspond à l’objet Repeater le plus excentré. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDataRenderer"><apiName>IDataRenderer</apiName><shortdesc>
  L’interface IDataRenderer définit l’interface pour les composants ayant une propriété data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IDataRenderer définit l’interface pour les composants ayant une propriété <codeph>data</codeph>.
 
  <p>Les composants utilisés dans un rendu d’élément ou un éditeur d’éléments dans une liste de contrôles (tels que les contrôles List, HorizontalList, TileList, DataGrid et Tree), ou en tant que rendu dans un graphique reçoivent les données à rendre ou à modifier à l’aide de la propriété <codeph>data</codeph>. Le composant doit implémenter IDataRenderer pour permettre aux composants hôtes de transmettre ces données. Tous les conteneurs Flex et de nombreux composants Flex implémentent IDataRenderer et la propriété <codeph>data</codeph>.</p>
 
  <p>Dans une liste de contrôles, Flex définit la propriété <codeph>data</codeph> d’un rendu d’élément ou éditeur d’élément sur l’élément du fournisseur de données qui correspond à l’élément rendu ou modifié. Pour un contrôle DataGrid, la propriété <codeph>data</codeph>contient l’élément fournisseur de données pour toute la ligne du contrôle DataGrid et non seulement pour l’élément.</p>
 
  <p>Pour implémenter cette interface, définissez une méthode setter et getter pour implémenter la propriété <codeph>data</codeph>. En général, la méthode setter inscrit la valeur de la propriété <codeph>data</codeph> dans une variable interne et diffuse un événement <codeph>dataChange</codeph>. La méthode getter renvoie la valeur actuelle de la variable interne, comme l’illustre l’exemple suivant :</p>
  
  <pre>
    // Internal variable for the property value.
    private var _data:Object;
    
    // Make the data property bindable.
    [Bindable("dataChange")]
    
    // Define the getter method.
    public function get data():Object {
        return _data;
    }
    
    // Define the setter method, and dispatch an event when the property
    // changes to support data binding.
    public function set data(value:Object):void {
        _data = value;
    
        dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
    }
  </pre>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IDataRenderer:mx.core:IDataRenderer:data:get"><apiName>data</apiName><shortdesc>
	  Données à rendre ou à modifier. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Données à rendre ou à modifier. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITextInput"><apiName>ITextInput</apiName><shortdesc>
  Définit une interface pour un champ de texte d’une seule ligne éventuellement modifiable. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Définit une interface pour un champ de texte d’une seule ligne éventuellement modifiable. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>Valeur d’index de base zéro du premier caractère de la sélection actuelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de la position suivant le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:showBorderAndBackground"><apiName>showBorderAndBackground</apiName><shortdesc>
      Détermine si la bordure et l’arrière-plan du composant TextInput sont visibles. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc>Renvoie la valeur <codeph>true</codeph> s’ils sont visibles et <codeph>false</codeph> dans le cas contraire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si la bordure et l’arrière-plan du composant TextInput sont visibles.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ITextInput:mx.core:ITextInput:editable:get"><apiName>editable</apiName><shortdesc>
      Indique si l’utilisateur est autorisé à modifier le texte dans ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3196
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>Spécifie si le composant peut être modifié ou non
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si l’utilisateur est autorisé à modifier le texte dans ce contrôle. Si la valeur est <codeph>true</codeph>, l’utilisateur peut modifier le texte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Position dans la zone de contenu du pixel le plus à gauche qui est actuellement affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3194
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0

      </apiDefaultValue><apiTipTexts><apiTipText>Position de pixel du caractère le plus à gauche qui est actuellement affiché
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Position dans la zone de contenu du pixel le plus à gauche qui est actuellement affiché (la zone de contenu inclut tous les contenus d’un contrôle, pas seulement la portion qui est actuellement affichée). Cette propriété est toujours définie sur 0 et ignore les changements si la propriété <codeph>wordWrap</codeph> est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Nombre maximal de caractères que les utilisateurs peuvent entrer dans un champ de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3191
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>Nombre maximum de caractères pouvant être contenus dans la zone de saisie de texte
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Nombre maximal de caractères que les utilisateurs peuvent entrer dans un champ de texte. Cette propriété ne limite pas la longueur de texte spécifiée en définissant la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> du contrôle.
     
      <p>La valeur par défaut est 0, ce qui correspond à un cas particulier indiquant un nombre illimité.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
      Si la valeur est true, les appels de la méthode drawFocus() de ce contrôle sont transmis à la méthode drawFocus() de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est true, les appels de la méthode <codeph>drawFocus()</codeph> de ce contrôle sont transmis à la méthode <codeph>drawFocus()</codeph> de son parent. Cela est utilisé lorsqu’un TextInput fait partie d’un contrôle composite tel que NumericStepper ou ComboBox. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3193
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      </apiDefaultValue><apiTipTexts><apiTipText>Jeu de caractères pouvant être saisis dans le contrôle TextInput.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans le contrôle. Si la valeur de la propriété <codeph>restrict</codeph> est <codeph>null</codeph>, vous pouvez entrer n’importe quel caractère. Si la valeur de la propriété <codeph>restrict</codeph> est une chaîne vide, aucun caractère ne peut être entré. Cette propriété ne limite que l’interaction avec l’utilisateur ; un script peut mettre tout texte dans le champ de texte. Si la valeur de la propriété <codeph>restrict</codeph> est une chaîne de caractères, vous ne pouvez entrer que les caractères dans la chaîne du champ de texte.
     
      <p>Flex analyse la chaîne de gauche à droite. Vous pouvez spécifier une plage à l’aide du caractère (-). Si la chaîne commence par un caret (^), tous les caractères sont initialement acceptés et les caractères suivants de la chaîne sont exclus du jeu de caractères acceptés. Si la chaîne ne commence pas par un caret (^), aucun caractère n’est initialement accepté et les caractères suivants de la chaîne sont inclus dans le jeu de caractères acceptés.</p>
     
      <p>Comme certains caractères ont une signification particulière lorsqu’ils sont utilisés dans la propriété <codeph>restrict</codeph>, vous devez utiliser des barres obliques inverses pour spécifier les caractères de type littéral -, ^ et \. Lorsque vous utilisez la propriété <codeph>restrict</codeph> comme attribut dans une balise MXML, utilisez des barres obliques inverses uniques, comme dans cet exemple : \^\-\\. Lorsque vous définissez la propriété <codeph>restrict</codeph> dans une expression ActionScript, utilisez des barres obliques inverses doubles, comme dans cet exemple : \\^\\-\\\.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
      Indicateur signalant si le texte de TextInput peut être sélectionné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur signalant si le texte du champ TextInput peut être sélectionné. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      Index de base zéro de la position suivant le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Valeur d’index de base zéro du dernier caractère de la sélection.
     
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Index de base zéro de la position <i>suivant</i> le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère). Si le dernier caractère de la sélection, par exemple, est le cinquième caractère, cette propriété a la valeur 5. Lorsque le contrôle reçoit le focus, la sélection est visible si les propriétés <codeph>selectionAnchorIndex</codeph> et <codeph>selectionActiveIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      Valeur d’index de base zéro du premier caractère de la sélection actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Valeur d’index basée sur zéro du premier caractère de la sélection.
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Valeur d’index basée sur zéro du premier caractère de la sélection actuelle. Par exemple, le premier caractère est 0, le deuxième est 1, etc. Lorsque le contrôle reçoit le focus, la sélection est visible si les propriétés <codeph>selectionAnchorIndex</codeph> et <codeph>selectionActiveIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:text:get"><apiName>text</apiName><shortdesc>
      Texte ordinaire apparaissant dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3190
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>Récupère ou définit le contenu du contrôle TextInput
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Texte ordinaire apparaissant dans le contrôle. Son apparence est fonction des styles CSS de son contrôle Label.
      
      <p>Toutes les balises HTML de la chaîne de caractères sont ignorées et apparaissent telles qu’elles sont saisies dans la chaîne. Pour afficher un texte mis en forme à l’aide de balises HTML, utilisez plutôt la propriété <codeph>htmlText</codeph>. Si vous définissez la propriété <codeph>htmlText</codeph>, le code HTML remplace le texte défini à l’aide de cette propriété et la propriété <codeph>text</codeph> renvoie une version de texte ordinaire du texte HTML, dépouillée de toutes les balises HTML. Pour plus d’informations, voir la propriété <codeph>htmlText</codeph>.</p>
     
      <p>Pour inclure les caractères spéciaux de signe inférieur à (&lt;), de signe supérieur à (>) ou de perluète (&amp;) dans le texte, enveloppez la chaîne de caractères dans la balise CDATA. Vous pouvez également utiliser des entités de caractères HTML pour les caractères spéciaux, par exemple <codeph>&amp;lt;</codeph>.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. La propriété <codeph>text</codeph> peut avoir temporairement la valeur <codeph>null</codeph>, ce qui indique que la propriété <codeph>htmlText</codeph> a été récemment définie et que la propriété <codeph>text</codeph> n’a pas encore été déterminée.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexDisplayObject"><apiName>IFlexDisplayObject</apiName><shortdesc>
  L’interface IFlexDisplayObject définit l’interface des éléments d’habillage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.display:IBitmapDrawable</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFlexDisplayObject définit l’interface des éléments d’habillage. Au minimum, un habillage doit être un objet DisplayObject et doit implémenter cette interface.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getBounds"><apiName>getBounds</apiName><shortdesc conref="flash.display.DisplayObject#getBounds()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getBounds()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getRect"><apiName>getRect</apiName><shortdesc conref="flash.display.DisplayObject#getRect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getRect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:globalToLocal"><apiName>globalToLocal</apiName><shortdesc conref="flash.display.DisplayObject#globalToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#globalToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestObject"><apiName>hitTestObject</apiName><shortdesc conref="flash.display.DisplayObject#hitTestObject()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestObject()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestPoint"><apiName>hitTestPoint</apiName><shortdesc conref="flash.display.DisplayObject#hitTestPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>shapeFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:localToGlobal"><apiName>localToGlobal</apiName><shortdesc conref="flash.display.DisplayObject#localToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#localToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:move"><apiName>move</apiName><shortdesc>
	  Déplace cet objet vers les coordonnées x et y spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position x de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position y de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Déplace cet objet vers les coordonnées x et y spécifiées.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:setActualSize"><apiName>setActualSize</apiName><shortdesc>
	  Définit la taille réelle de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Définit la taille réelle de cet objet.
	 
	  <p>Cette méthode est principalement utilisée dans le cadre de l’implémentation de la méthode <codeph>updateDisplayList()</codeph>, qui permet de calculer la taille réelle de l’objet, en fonction de sa taille explicite, de sa taille par rapport au parent (pourcentage) et de sa taille mesurée. Vous pouvez ensuite appliquer cette taille réelle à l’objet en appelant la méthode <codeph>setActualSize()</codeph>.</p>
	 
	  <p>Dans d’autres situations, il est préférable de définir les propriétés telles que <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph> plutôt que d’appeler cette méthode.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:accessibilityProperties:get"><apiName>accessibilityProperties</apiName><shortdesc conref="flash.display.DisplayObject#accessibilityProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.accessibility:AccessibilityProperties"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#accessibilityProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:blendMode:get"><apiName>blendMode</apiName><shortdesc conref="flash.display.DisplayObject#blendMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#blendMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:cacheAsBitmap:get"><apiName>cacheAsBitmap</apiName><shortdesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:filters:get"><apiName>filters</apiName><shortdesc conref="flash.display.DisplayObject#filters">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#filters">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc conref="flash.display.DisplayObject#loaderInfo">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#loaderInfo">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mask:get"><apiName>mask</apiName><shortdesc conref="flash.display.DisplayObject#mask">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mask">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
	  Hauteur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Hauteur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
	  Largeur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Largeur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseX:get"><apiName>mouseX</apiName><shortdesc conref="flash.display.DisplayObject#mouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseY:get"><apiName>mouseY</apiName><shortdesc conref="flash.display.DisplayObject#mouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:name:get"><apiName>name</apiName><shortdesc conref="flash.display.DisplayObject#name">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#name">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:opaqueBackground:get"><apiName>opaqueBackground</apiName><shortdesc conref="flash.display.DisplayObject#opaqueBackground">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#opaqueBackground">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:parent:get"><apiName>parent</apiName><shortdesc conref="flash.display.DisplayObject#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:root:get"><apiName>root</apiName><shortdesc conref="flash.display.DisplayObject#root">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#root">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:rotation:get"><apiName>rotation</apiName><shortdesc conref="flash.display.DisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scale9Grid:get"><apiName>scale9Grid</apiName><shortdesc conref="flash.display.DisplayObject#scale9Grid">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scale9Grid">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleX:get"><apiName>scaleX</apiName><shortdesc conref="flash.display.DisplayObject#scaleX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleY:get"><apiName>scaleY</apiName><shortdesc conref="flash.display.DisplayObject#scaleY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scrollRect:get"><apiName>scrollRect</apiName><shortdesc conref="flash.display.DisplayObject#scrollRect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scrollRect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:stage:get"><apiName>stage</apiName><shortdesc conref="flash.display.DisplayObject#stage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#stage">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:transform:get"><apiName>transform</apiName><shortdesc conref="flash.display.DisplayObject#transform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#transform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:visible:get"><apiName>visible</apiName><shortdesc conref="flash.display.DisplayObject#visible">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#visible">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EventPriority"><apiName>EventPriority</apiName><shortdesc>
  La classe EventPriority définit les valeurs constantes pour l’argument priority de la méthode addEventListener() du composant EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe EventPriority définit les valeurs constantes pour l’argument <codeph>priority</codeph>de la méthode <codeph>addEventListener()</codeph> du composant EventDispatcher.
 
  <p>Plus le nombre est important, plus la priorité de l’écouteur d’événements est élevée. Tous les écouteurs dont la priorité correspond à <codeph>N</codeph> seront traités avant les écouteurs dotés de la priorité <codeph>N-1</codeph>. Les écouteurs dont la priorité est identique sont traités dans l’ordre où ils ont été ajoutés. </p>
 
  <p>La priorité peut être positive, 0, ou négative. La priorité par défaut est 0.</p>
 
  <p>Il est déconseillé d’écrire du code dépendant des valeurs numériques de ces constantes. Elles peuvent être modifiées dans les versions futures de Flex. </p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:EventPriority:BINDING"><apiName>BINDING</apiName><shortdesc>
	  Les gestionnaires d’événement générés automatiquement qui évaluent les expressions de liaison de données doivent être exécutés avant les autres. Ils ont donc une priorité supérieure à la valeur par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Les gestionnaires d’événement générés automatiquement qui évaluent les expressions de liaison de données doivent être exécutés avant les autres. Ils ont donc une priorité supérieure à la valeur par défaut.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:CURSOR_MANAGEMENT"><apiName>CURSOR_MANAGEMENT</apiName><shortdesc>
	  La classe CursorManager dispose de gestionnaires des événements de souris devant être exécutés avant les autres gestionnaires d’événements de souris, qui présentent donc une priorité supérieure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>200</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  La classe CursorManager dispose de gestionnaires des événements de souris devant être exécutés avant les autres gestionnaires d’événements de souris, qui présentent donc une priorité supérieure.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT_HANDLER"><apiName>DEFAULT_HANDLER</apiName><shortdesc>
	  Certains composants écoutent les événements qu’ils distribuent sur eux-mêmes et permettent à d’autres écouteurs d’appeler la méthode preventDefault() pour indiquer au composant de ne pas exécuter une action par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-50</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Certains composants écoutent les événements qu’ils distribuent sur eux-mêmes et permettent à d’autres écouteurs d’appeler la méthode <codeph>preventDefault()</codeph> pour indiquer au composant de ne pas exécuter une action par défaut. Ces composants doivent écouter avec une priorité inférieure à la priorité par défaut, de sorte que les autres gestionnaires sont exécutés en premier et ont la possibilité d’appeler la méthode <codeph>preventDefault()</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	  Les gestionnaires d’événement sur les occurrences de composants sont exécutés avec la priorité par défaut, 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Les gestionnaires d’événement sur les occurrences de composants sont exécutés avec la priorité par défaut, <codeph>0</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:EFFECT"><apiName>EFFECT</apiName><shortdesc>
	  Les gestionnaires d’événement générés automatiquement qui déclenchent des effets sont exécutés après les autres gestionnaires d’événement sur les occurrences de composant. Ils ont donc une priorité inférieure à la valeur par défaut. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Les gestionnaires d’événement générés automatiquement qui déclenchent des effets sont exécutés après les autres gestionnaires d’événement sur les occurrences de composant. Ils ont donc une priorité inférieure à la valeur par défaut. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFactory"><apiName>IFactory</apiName><shortdesc>
  L’interface IFactory définit l’interface que les classes de fabrique telles que ClassFactory doivent implémenter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFactory définit l’interface que les classes de fabrique telles que ClassFactory doivent implémenter. Un objet de type IFactory est un « objet fabrique » utilisé par Flex pour générer plusieurs occurrences d’une autre classe, ayant toutes des propriétés identiques.
 
  <p>Par exemple, un objet DataGridColumn présente une propriété <codeph>itemRenderer</codeph> du type IFactory. Il appelle la méthode <codeph>itemRenderer.newInstance()</codeph> pour créer les cellules d’une colonne particulière de l’objet DataGrid.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#ClassFactory"><linktext>mx.core.ClassFactory</linktext></link></related-links><apiOperation id="mx.core:IFactory:mx.core:IFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Crée une occurrence d’une classe (déterminée par la classe qui implémente IFactory).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence récemment créée.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Crée une occurrence d’une classe (déterminée par la classe qui implémente IFactory).
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
  Fabrique d’occurrence différée qui crée et renvoie une occurrence d’une classe spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Fabrique d’occurrence différée qui crée et renvoie une occurrence d’une classe spécifiée. Une application peut utiliser la méthode <codeph>getInstance()</codeph> pour créer une occurrence de la classe lors de son utilisation initiale et obtenir une référence à cette occurrence par la suite.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromFunction"><linktext>DeferredInstanceFromFunction</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromClass:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiDesc>Classe dont la méthode <codeph>getInstance()</codeph> crée et renvoie l’occurrence.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromClass:getInstance"><apiName>getInstance</apiName><shortdesc>
      Crée et renvoie une occurrence de la classe spécifiée dans le constructeur DeferredInstanceFromClass, si elle n’existe pas encore ; sinon, renvoie l’occurrence de classe déjà créée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence de la classe spécifiée dans le constructeur DeferredInstanceFromClass.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Crée et renvoie une occurrence de la classe spécifiée dans le constructeur DeferredInstanceFromClass, si elle n’existe pas encore ; sinon, renvoie l’occurrence de classe déjà créée. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromClass:reset"><apiName>reset</apiName><shortdesc>
      Rétablit l’état initial, non initialisé de la fabrique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Rétablit l’état initial, non initialisé de la fabrique. La référence à l’occurrence mise en cache est supprimée.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
  FlexMovieClip est une sous-classe de la classe MovieClip du lecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexMovieClip est une sous-classe de la classe MovieClip du lecteur. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexMovieClip:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
	 
	  <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils.</p>
	 
	  <p>Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"FlexMovieClip14"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexMovieClip:toString"><apiName>toString</apiName><shortdesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.FlexMovieClip14"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUIComponent"><apiName>IUIComponent</apiName><shortdesc>
  L’interface IUIComponent définit l’ensemble des API de base à implémenter pour créer un enfant d’un conteneur ou d’une liste Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IUIComponent définit l’ensemble des API de base à implémenter pour créer un enfant d’un conteneur ou d’une liste Flex.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Nombre qui est explicitHeight si elle est définie ou measuredHeight dans le cas contraire. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Nombre qui est explicitWidth si elle est définie ou measuredWidth dans le cas contraire. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      Initialise l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialise l’objet.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/initialize()"><linktext>mx.core.UIComponent.initialize(). </linktext></link></related-links></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:owns"><apiName>owns</apiName><shortdesc conref="mx.core.UIComponent#owns()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph> si l’enfant est le parent ou est administré par ce composant UIComponent. 
      
      </apiDesc></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Composant UIComponent. 
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#owns()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc conref="mx.core.UIComponent#parentChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Parent de cet objet IUIComponent. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#parentChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:setVisible"><apiName>setVisible</apiName><shortdesc conref="mx.core.UIComponent#setVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Nouvelle valeur de la propriété <codeph>visible</codeph>. Spécifiez <codeph>true</codeph> pour afficher le composant et <codeph>false</codeph> pour le masquer. 
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Si la valeur est<codeph> true</codeph>, ne distribuez pas d’événement. Si la valeur est <codeph>false</codeph>, distribuez un événement <codeph>show</codeph> lorsque le composant devient visible et un événement <codeph>hide</codeph> lorsqu’il devient invisible. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Coordonnée y de la ligne de base de la première ligne de texte du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée y de la ligne de base de la première ligne de texte du composant. 
     
      <p>Cette propriété est utilisée pour implémenter le style de contrainte <codeph>baseline</codeph>. Elle est également utilisée pour aligner l’étiquette d’une classe FormItem aux contrôles dans la classe FormItem. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:document:get"><apiName>document</apiName><shortdesc>
      Référence à l’objet de document associé à ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Référence à l’objet de document associé à ce composant. Un objet de document est un objet qui se trouve au sommet de la hiérarchie d’une application Flex ou d’un composant MXML ou ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:enabled:get"><apiName>enabled</apiName><shortdesc>
      Indique si le composant peut accepter une interaction de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le composant peut accepter une interaction de l’utilisateur. Même lorsque la propriété <codeph>enabled</codeph> est définie sur <codeph>false</codeph>, certains composants continuent à répondre aux interactions de souris telles que mouseOver. Par conséquent, pour désactiver entièrement des classes UIComponent, vous devez également définir la valeur de la propriété <codeph>mouseEnabled</codeph> sur <codeph>false</codeph>. Si vous définissez la propriété <codeph>enabled</codeph> sur <codeph>false</codeph> pour un conteneur, Flex estompe la couleur du conteneur et de ses enfants et empêche toute intervention de l’utilisateur sur le conteneur et ses enfants.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Hauteur du composant, en pixels, spécifiée explicitement en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur du composant, en pixels, spécifiée explicitement en tant que coordonnée du composant. Si aucune valeur de hauteur explicite n’est définie, la valeur est <codeph>NaN</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitHeight"><linktext>mx.core.UIComponent.explicitHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Nombre définissant la hauteur maximale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur maximale du composant, en pixels, en tant que coordonnée du composant. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Nombre définissant la largeur maximale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur maximale du composant, en pixels, en tant que coordonnée du composant. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      Nombre définissant la hauteur minimale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur minimale du composant, en pixels, en tant que coordonnée du composant. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinHeight"><linktext>mx.core.UIComponent.explicitMinHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      Nombre définissant la largeur minimale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur minimale du composant, en pixels, en tant que coordonnée du composant. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinWidth"><linktext>mx.core.UIComponent.explicitMinWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Largeur du composant, en pixels, spécifiée explicitement en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur du composant, en pixels, spécifiée explicitement en tant que coordonnée du composant. Si aucune valeur de largeur explicite n’est définie, la valeur est <codeph>NaN</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitWidth"><linktext>mx.core.UIComponent.explicitWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Objet Sprite unique partagé par différents composants et utilisé comme incrustation pour tracer l’indicateur de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Objet Sprite unique partagé par différents composants et utilisé comme incrustation pour tracer l’indicateur de focus. Les composants partagent cet objet si leur parent est un composant qui a le focus et non si le composant implémente l’interface IFocusManagerComponent.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/focusPane"><linktext>mx.core.UIComponent.focusPane</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      Nombre définissant la hauteur maximale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur maximale du composant, en pixels, en tant que coordonnée du composant.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxHeight"><linktext>mx.core.UIComponent.maxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      Nombre définissant la largeur maximale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur maximale du composant, en pixels, en tant que coordonnée du composant.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxWidth"><linktext>mx.core.UIComponent.maxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      Nombre définissant la hauteur minimale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur minimale du composant, en pixels, en tant que coordonnée du composant. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minHeight"><linktext>mx.core.UIComponent.minHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      Nombre définissant la largeur minimale du composant, en pixels, en tant que coordonnée du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur minimale du composant, en pixels, en tant que coordonnée du composant. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minWidth"><linktext>mx.core.UIComponent.minWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Nombre définissant la hauteur d’un composant sous forme de pourcentage de la taille de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la hauteur d’un composant sous forme de pourcentage de la taille de son parent. Valeurs autorisées : 0 à 100.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Nombre définissant la largeur d’un composant sous forme de pourcentage de la taille de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre définissant la largeur d’un composant sous forme de pourcentage de la taille de son parent. Valeurs autorisées : 0 à 100.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      Référence à l’objet SystemManager de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’objet SystemManager de ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      Utilisée par la classe EffectManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Utilisée par la classe EffectManager. Renvoie une valeur autre que null si un composant n’utilise pas la classe EffectManager pour réaliser une interpolation.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
  La classe FlexTextField est une sous-classe de la classe TextField du lecteur et la super-classe de UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FlexTextField est une sous-classe de la classe TextField du lecteur et la super-classe de UITextField. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexTextField:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
	 
	  <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils.</p>
	 
	  <p>Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"UITextField18"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexTextField:toString"><apiName>toString</apiName><shortdesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.UITextField18"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IRawChildrenContainer"><apiName>IRawChildrenContainer</apiName><shortdesc>
  L’interface IRawChildrenContainer définit les API pour les conteneurs pouvant renvoyer une interface IChildList représentant tous leurs enfants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IRawChildrenContainer définit les API pour les conteneurs pouvant renvoyer une interface IChildList représentant tous leurs enfants. Cette interface doit être implémentée par tout conteneur possédant des API IChildList remplacées, telles que les méthodes <codeph>numChildren</codeph> et <codeph>addChild()</codeph>, pour ne gérer qu’un sous-ensemble de ses enfants. La classe mx.core.Container, par exemple, présente un ensemble d’enfants de contenu distinct des enfants sans contenu, tels que les séparateurs, les bordures et les barres de titre.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link></related-links><apiValue id="mx.core:IRawChildrenContainer:mx.core:IRawChildrenContainer:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  Renvoie une interface IChildList représentant tous les enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Renvoie une interface IChildList représentant tous les enfants. Cela est utilisé par FocusManager pour rechercher les enfants sans contenu pouvant quand même obtenir le focus (par exemple, des composants dans les éléments ControlBar).
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DragSource"><apiName>DragSource</apiName><shortdesc>
  La classe DragSource contient les données qui font l’objet du déplacement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe DragSource contient les données qui font l’objet du déplacement. Les données peuvent présenter plusieurs formats, selon le type de commande ayant initié le déplacement.
 
  <p>Chaque format de données est identifié par une chaîne. La méthode <codeph>hasFormat()</codeph> est utilisée pour déterminer si l’objet comporte des données ayant ce format. La méthode <codeph>dataForFormat()</codeph> est utilisée pour récupérer les données dans le format spécifié.</p>
 
  <p>Les données peuvent être ajoutées directement à l’aide de la méthode <codeph>addData()</codeph> ou indirectement à l’aide de la méthode <codeph>addHandler()</codeph>. La méthode <codeph>addHandler()</codeph> enregistre un rappel qui est appelé si les données sont sollicitées. Cette fonction permet d’ajouter des données dans un format non natif pouvant nécessiter des conversions ou des calculs importants. Par exemple, si vous disposez de données audio brutes, vous pouvez ajouter un gestionnaire pour le format MP3. La conversion MP3 n’est effectuée que si les données MP3 sont sollicitées.</p>
  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:DragSource:DragSource"><apiName>DragSource</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DragSource:addData"><apiName>addData</apiName><shortdesc>
	  Ajoute des données et une chaîne de format correspondante à la source du déplacement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet qui spécifie les données à faire glisser. Il peut s’agir d’un objet quelconque, par exemple une chaîne, un objet DataProvider, et ainsi de suite.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Chaîne qui spécifie un libellé décrivant le format pour ces données.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ajoute des données et une chaîne de format correspondante à la source du déplacement. Cette méthode ne renvoie aucune valeur.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:addHandler"><apiName>addHandler</apiName><shortdesc>
	  Ajoute un gestionnaire appelé lorsque les données sont sollicitées pour le format spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>handler</apiItemName><apiType value="Function"/><apiDesc>Fonction qui spécifie le gestionnaire appelé pour solliciter les données. Cette fonction doit renvoyer les données dans le format spécifié.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Chaîne qui spécifie le format pour ces données.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Ajoute un gestionnaire appelé lorsque les données sont sollicitées pour le format spécifié. Cette fonction est utile lorsque vous faites glisser de grandes quantités de données. Le gestionnaire n’est appelé que si les données sont sollicitées. Cette méthode ne renvoie aucune valeur.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:dataForFormat"><apiName>dataForFormat</apiName><shortdesc>
	  Récupère les données pour le format spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet contenant les données dans le format demandé. Si vous faites glisser plusieurs éléments, la valeur renvoyée est un tableau. Pour une commande basée sur une liste, la valeur renvoyée est toujours un tableau, même si elle contient un seul élément. 
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Chaîne qui spécifie un libellé décrivant le format pour les données à renvoyer. Cette chaîne peut être une valeur personnalisée si vous créez une cible de dépôt personnalisée avec la méthode <codeph>addData()</codeph>. 
	  <p>Les commandes basées sur une liste disposent de valeurs prédéfinies pour le paramètre <codeph>format</codeph>. Si le contrôle à l’origine de l’opération de déplacement est une arborescence, le format est « treeItems » et les éléments implémentent l’interface ITreeDataProvider. Pour toutes les autres commandes basées sur une liste disposant d’une prise en charge intégrée du glisser-déposer, le format est « items » et les éléments implémentent l’interface IDataProvider.</p>
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Récupère les données pour le format spécifié. Si les données ont été ajoutées avec la méthode <codeph>addData()</codeph>, elles sont renvoyées directement. Si les données ont été ajoutées avec la méthode <codeph>addHandler()</codeph> la fonction de gestionnaire est appelée pour renvoyer les données.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:hasFormat"><apiName>hasFormat</apiName><shortdesc>
	  Renvoie true si la source de données contient le format demandé. Dans le cas contraire, elle renvoie false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la source de données contient le format demandé.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Chaîne qui spécifie un libellé décrivant le format pour les données. 
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Renvoie <codeph>true</codeph> si la source de données contient le format demandé. Dans le cas contraire, elle renvoie <codeph>false</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DragSource:formats:get"><apiName>formats</apiName><shortdesc>
	  Contient les formats des données du déplacement, sous la forme d’un tableau de chaînes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
	  Contient les formats des données du déplacement, sous la forme d’un tableau de chaînes. Définissez cette propriété à l’aide des méthodes <codeph>addData()</codeph> ou <codeph>addHandler()</codeph>. La valeur par défaut dépend des données ajoutées à l’objet DragSource.
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:InteractionMode"><apiName>InteractionMode</apiName><shortdesc>
      La classe InteractionMode définit les valeurs de la propriété interactionMode de la classe UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      La classe InteractionMode définit les valeurs de la propriété <codeph>interactionMode</codeph> de la classe UIComponent.
           </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.ScrollControlBase.xml"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:InteractionMode:MOUSE"><apiName>MOUSE</apiName><shortdesc>
          Le mode d’interaction principal pour ce composant est par le biais de la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouse</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Le mode d’interaction principal pour ce composant est par le biais de la souris.
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:InteractionMode:TOUCH"><apiName>TOUCH</apiName><shortdesc>
          Le mode d’interaction principal pour ce composant est par le biais d’une interaction tactile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>touch</apiData><apiType value="String"/></apiValueDef><apiDesc>
          Le mode d’interaction principal pour ce composant est par le biais d’une interaction tactile.
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
  FlexBitmap est une sous-classe de la classe Bitmap du lecteur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Bitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexBitmap est une sous-classe de la classe Bitmap du lecteur. Elle remplace la méthode <codeph>toString()</codeph> pour renvoyer une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexBitmap:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>Données de l’image bitmap. 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Indique si l’objet Bitmap est accroché ou non au pixel le plus proche.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Indique si l’image bitmap est lissée lorsqu’elle est mise à l’échelle.  
	 
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
	 
	  <p>Définit la propriété <codeph>name</codeph> sur une chaîne renvoyée par la méthode <codeph>createUniqueName()</codeph> de la classe mx.utils.NameUtils. Cette chaîne correspond au nom de la classe de l’objet, concaténé avec un entier unique au sein de l’application, tel que <codeph>"FlexBitmap12"</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexBitmap:toString"><apiName>toString</apiName><shortdesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Chaîne indiquant l’emplacement de cet objet dans la hiérarchie de la classe DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Renvoie une chaîne indiquant l’emplacement de l’objet dans la hiérarchie des objets DisplayObject de l’application. Cette chaîne, par exemple <codeph>"MyApp0.HBox5.FlexBitmap12"</codeph>, est générée par la méthode <codeph>displayObjectToString()</codeph> de la classe mx.utils.NameUtils à partir de la propriété <codeph>name</codeph> et des ancêtres de l’objet.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IMXMLObject"><apiName>IMXMLObject</apiName><shortdesc>
  L’interface IMXMLObject définit les API qu’un composant non visuel doit implémenter pour fonctionner correctement avec le compilateur MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IMXMLObject définit les API qu’un composant non visuel doit implémenter pour fonctionner correctement avec le compilateur MXML. Actuellement, la seule méthode prise en charge est <codeph>initialized()</codeph>.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IMXMLObject:mx.core:IMXMLObject:initialized"><apiName>initialized</apiName><shortdesc>
      Appelé une fois que l’objet d’implémentation a été créé et que toutes les propriétés de composants spécifiées sur la balise MXML ont été initialisées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML ayant créé cet objet.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Identifiant utilisé par le <codeph>document</codeph> pour se référer à cet objet. Si l’objet est une propriété profonde de la propriété <codeph>document</codeph>, <codeph>id</codeph> a la valeur null.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé une fois que l’objet d’implémentation a été créé et que toutes les propriétés de composants spécifiées sur la balise MXML ont été initialisées.
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:RuntimeDPIProvider"><apiName>RuntimeDPIProvider</apiName><shortdesc>
  La classe RuntimeDPIProvider fournit le mappage par défaut des valeurs PPP de périphérique similaires en classes PPP prédéfinies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe RuntimeDPIProvider fournit le mappage par défaut des valeurs PPP de périphérique similaires en classes PPP prédéfinies. Une application peut avoir une propriété runtimeDPIProvider définie sur une sous-classe de RuntimeDPIProvider pour remplacer les mappages par défaut de Flex. Le remplacement des mappages Flex par défaut entraîne des modifications dans le comportement de mise à l’échelle automatique de l’application.
 
  <p>Le remplacement des mappages Flex par défaut est généralement nécessaire uniquement pour les périphériques qui n’indiquent pas correctement leur valeur screenDPI ou qui présentent une meilleure mise à l’échelle dans une autre classe PPP.</p>
 
  <p>Les mappages par défaut de Flex sont les suivants :
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><tbody><row><entry>160 ppp</entry><entry>&lt;200 ppp</entry></row><row><entry>240 ppp</entry><entry>>=200 ppp et &lt;280 ppp</entry></row><row><entry>320 ppp</entry><entry>>=280 ppp</entry></row></tbody></tgroup></adobetable>
  </p>
 
  <p>Les sous-classes de RuntimeDPIProvider doivent dépendre uniquement des API d’exécution et non des classes spécifiques à la structure Flex, à l’exception de <codeph>mx.core.DPIClassification</codeph>.</p>
  
  </apiDesc><example conref="RuntimeDPIProviderApp.mxml"/><example conref="RuntimeDPIProviderExample.as"/><example conref="RuntimeDPIProviderAppView.mxml"/></apiClassifierDetail><related-links><link href="mx.core.xml#DPIClassification"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="spark.components.xml#Application/applicationDPI"><linktext>spark.components.Application.applicationDPI</linktext></link></related-links><apiConstructor id="mx.core:RuntimeDPIProvider:RuntimeDPIProvider"><apiName>RuntimeDPIProvider</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:RuntimeDPIProvider:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      Renvoie la valeur PPP d’exécution du périphérique actif en mappant sa propriété flash.system.Capabilities.screenDPI sur l’une de plusieurs valeurs PPP dans mx.core.DPIClassification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Renvoie la valeur PPP d’exécution du périphérique actif en mappant sa propriété <codeph>flash.system.Capabilities.screenDPI</codeph> sur l’une de plusieurs valeurs PPP dans <codeph>mx.core.DPIClassification</codeph>. Un certain nombre de périphériques peut présenter des valeurs PPP légèrement différentes et Flex les mappe dans plusieurs classes PPP. Flex utilise cette méthode pour calculer la valeur PPP actuelle lorsqu’une application programmée pour une certaine valeur PPP est adaptée à la valeur actuelle par mise à l’échelle.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.Capabilities.xml"><linktext>flash.system.Capabilities</linktext></link><link href="mx.core.xml#DPIClassification"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:FlexVersion"><apiName>FlexVersion</apiName><shortdesc> 
  Cette classe contrôle la compatibilité ascendante de la structure.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Cette classe contrôle la compatibilité ascendante de la structure. Avec chaque nouvelle version, certains aspects de la structure sont modifiés, tels que les comportements, les styles et tous les paramètres par défaut, ce qui peut affecter l’application. En définissant la propriété <codeph>compatibilityVersion</codeph>, le comportement peut être modifié pour correspondre aux versions précédentes. Il s’agit d’un indicateur « global ». Vous ne pouvez pas appliquer une version à un composant ou un groupe de composants et une autre version à un autre composant ou un groupe de composants.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
      Version publiée actuelle de SDK Flex, codée au format uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04060000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Version publiée actuelle de SDK Flex, codée au format uint.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0_1"><apiName>VERSION_2_0_1</apiName><shortdesc> 
      Valeur compatibilityVersion de Flex 2.0.1, codée au format numérique uint. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000001</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Valeur <codeph>compatibilityVersion</codeph> de Flex 2.0.1, codée au format numérique <codeph>uint</codeph>. Le code peut comparer cette constante avec la valeur <codeph>compatibilityVersion</codeph> pour mettre en œuvre un comportement de version spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
      Valeur compatibilityVersion de Flex 2.0, codée au format numérique uint. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Valeur <codeph>compatibilityVersion</codeph> de Flex 2.0, codée au format numérique <codeph>uint</codeph>. Le code peut comparer cette constante avec la valeur <codeph>compatibilityVersion</codeph> pour mettre en œuvre un comportement de version spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
      Valeur compatibilityVersion de Flex 3.0, codée au format numérique uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Valeur <codeph>compatibilityVersion</codeph> de Flex 3.0, codée au format numérique <codeph>uint</codeph>. Le code peut comparer cette constante avec la valeur <codeph>compatibilityVersion</codeph> pour mettre en œuvre un comportement de version spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_0"><apiName>VERSION_4_0</apiName><shortdesc> 
      Valeur compatibilityVersion de Flex 4.0, codée au format numérique uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Valeur <codeph>compatibilityVersion</codeph> de Flex 4.0, codée au format numérique <codeph>uint</codeph>. Le code peut comparer cette constante avec la valeur <codeph>compatibilityVersion</codeph> pour mettre en œuvre un comportement de version spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_5"><apiName>VERSION_4_5</apiName><shortdesc> 
      Valeur compatibilityVersion de Flex 4.5, codée au format numérique uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04050000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Valeur <codeph>compatibilityVersion</codeph> de Flex 4.5, codée au format numérique <codeph>uint</codeph>. Le code peut comparer cette constante avec la valeur <codeph>compatibilityVersion</codeph> pour mettre en œuvre un comportement de version spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_6"><apiName>VERSION_4_6</apiName><shortdesc> 
      Valeur compatibilityVersion de Flex 4.6, codée au format numérique uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04060000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Valeur <codeph>compatibilityVersion</codeph> de Flex 4.6, codée au format numérique <codeph>uint</codeph>. Le code peut comparer cette constante avec la valeur <codeph>compatibilityVersion</codeph> pour mettre en œuvre un comportement de version spécifique.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_READ"><apiName>VERSION_ALREADY_READ</apiName><shortdesc>
      Chaîne transmise en tant que paramètre à la méthode compatibilityErrorFunction() si la version de compatibilité a déjà été lue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadyRead</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne transmise en tant que paramètre à la méthode <codeph>compatibilityErrorFunction()</codeph> si la version de compatibilité a déjà été lue.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_SET"><apiName>VERSION_ALREADY_SET</apiName><shortdesc>
      Chaîne transmise en tant que paramètre à la méthode compatibilityErrorFunction() si la version de compatibilité a déjà été définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadySet</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne transmise en tant que paramètre à la méthode <codeph>compatibilityErrorFunction()</codeph> si la version de compatibilité a déjà été définie.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityErrorFunction:get"><apiName>compatibilityErrorFunction</apiName><shortdesc> 
      Fonction appelée lorsque la version de compatibilité est définie plusieurs fois, ou définie après sa lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      Fonction appelée lorsque la version de compatibilité est définie plusieurs fois, ou définie après sa lecture. Si cette fonction n’est pas définie, SDK renvoie une erreur. Si elle est définie, l’objet File appelle cette fonction, mais le développeur doit décider de la gestion de l’appel. Cette fonction est également appelée si la fonction est définie plusieurs fois. La fonction prend deux paramètres : le premier est un entier <codeph>uint</codeph> correspondant à la version dont la définition a été tentée ; le deuxième est une chaîne correspondant à la raison de l’échec, <codeph>VERSION_ALREADY_SET</codeph> ou <codeph>VERSION_ALREADY_READ</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersionString:get"><apiName>compatibilityVersionString</apiName><shortdesc> 
      Version de compatibilité, en tant que chaîne au format « X.X.X ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Version de compatibilité, en tant que chaîne au format « X.X.X ». Il s’agit d’un transfert vers la propriété <codeph>compatibilityVersion</codeph>, qui convertit le nombre depuis et vers une forme de chaîne plus lisible pour l’utilisateur.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersion:get"><apiName>compatibilityVersion</apiName><shortdesc> 
      Version actuelle pour laquelle la structure maintient la compatibilité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiDefaultValue>FlexVersion.CURRENT_VERSION
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Version actuelle pour laquelle la structure maintient la compatibilité. La valeur par défaut est <codeph>CURRENT_VERSION</codeph>. Elle ne peut être modifiée qu’une seule fois. Une deuxième modification implique un appel de la méthode <codeph>compatibilityErrorFunction()</codeph> si elle existe, ou provoque une erreur d’exécution. La modification après la lecture de la propriété <codeph>compatibilityVersion</codeph> entraîne une erreur car le code qui dépend de la version a déjà été exécuté. Il n’existe aucune notification. Cette propriété est supposée n’être définie qu’une seule fois, suffisamment tôt pour qu’aucun code affecté n’ait été exécuté.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToolTip"><apiName>IToolTip</apiName><shortdesc>
  L’interface IToolTip définit l’API que les composants du type info-bulle doivent implémenter pour fonctionner avec le gestionnaire ToolTipManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IToolTip définit l’API que les composants du type info-bulle doivent implémenter pour fonctionner avec le gestionnaire ToolTipManager. La classe ToolTip implémente cette interface.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link></related-links><apiValue id="mx.core:IToolTip:mx.core:IToolTip:screen:get"><apiName>screen</apiName><shortdesc>
	  Rectangle qui spécifie la taille et la position de la surface de traçage de base de cette info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  Rectangle qui spécifie la taille et la position de la surface de traçage de base de cette info-bulle.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IToolTip:mx.core:IToolTip:text:get"><apiName>text</apiName><shortdesc>
	  Texte qui s’affiche dans l’info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Texte qui s’affiche dans l’info-bulle.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient2"><apiName>IStateClient2</apiName><shortdesc>
  L’interface IStateClient2 définit l’interface à implémenter par les composants pour la prise en charge de la sémantique de l’état d’affichage de Flex 4.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IStateClient2 définit l’interface à implémenter par les composants pour la prise en charge de la sémantique de l’état d’affichage de Flex 4.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IStateClient2:mx.core:IStateClient2:hasState"><apiName>hasState</apiName><shortdesc>
      Détermine si l’état spécifié a été défini sur ce composant UIComponent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Indique si l’état spécifié a été défini ou non 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Le nom de l’état en cours de vérification.  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si l’état spécifié a été défini sur ce composant UIComponent.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:states:get"><apiName>states</apiName><shortdesc>
      Ensemble d’objets d’état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ensemble d’objets d’état d’affichage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:transitions:get"><apiName>transitions</apiName><shortdesc>
      Ensemble de transitions d’état d’affichage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ensemble de transitions d’état d’affichage.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
  Fabrique d’occurrence différée utilisant une fonction générateur pour créer une occurrence de l’objet requis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Fabrique d’occurrence différée utilisant une fonction générateur pour créer une occurrence de l’objet requis. Une application utilise la méthode <codeph>getInstance()</codeph> pour créer une occurrence d’un objet lors de son utilisation initiale et obtenir une référence à cet objet par la suite.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromClass"><linktext>DeferredInstanceFromClass</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromFunction:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Function"/><apiDesc>Fonction qui crée et renvoie une occurrence de l’objet requis.
     
      </apiDesc></apiParam><apiParam><apiItemName>destructor</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Fonction facultative utilisée pour nettoyer les références en suspens lorsque <codeph>reset()</codeph> est appelée.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromFunction:getInstance"><apiName>getInstance</apiName><shortdesc>
      Renvoie une référence à une occurrence de l’objet souhaité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence de l’objet.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie une référence à une occurrence de l’objet souhaité. Si aucune occurrence de l’objet nécessaire n’existe, appelle la fonction spécifiée dans le paramètre de constructeur <codeph>generator</codeph> de cette classe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromFunction:reset"><apiName>reset</apiName><shortdesc>
      Rétablit l’état initial, non initialisé de la fabrique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Rétablit l’état initial, non initialisé de la fabrique. La référence à l’occurrence mise en cache est supprimée.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
  Un constructeur SWFBridgeGroup représente tous les ponts sandbox nécessaires à une application pour communiquer avec son parent et ses enfants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeGroup</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un constructeur SWFBridgeGroup représente tous les ponts sandbox nécessaires à une application pour communiquer avec son parent et ses enfants.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SWFBridgeGroup:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>Classe DisplayObject propriétaire de ce groupe. Il doit s’agir de la classe SystemManager d’une application.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
	  
      Ajoute un nouveau pont au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont permettant de communiquer avec le contenu enfant.
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>Classe DisplayObject ayant chargé le contenu représenté par le pont. En général, il s’agit d’une occurrence de la classe SWFLoader. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Ajoute un nouveau pont au conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
	  
      Teste si le pont donné correspond à l’un des ponts de sandbox de ce groupe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la poignée est trouvée, <codeph>false</codeph> sinon.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont à tester.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Teste si le pont donné correspond à l’un des ponts sandbox de ce groupe. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
	  
      Récupère le propriétaire d’un pont, ainsi que la classe DisplayObject ayant chargé l’enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ayant chargé l’enfant. 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont cible.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Récupère le propriétaire d’un pont, ainsi que la classe DisplayObject ayant chargé l’enfant. Cette méthode est utile lorsqu’un événement est reçu, dont la cible <codeph>event.target</codeph> est le pont. Le pont peut ensuite être converti vers la classe DisplayObject propriétaire.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
	  
      Récupère tous les ponts enfant dans ce groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau de tous les ponts enfant dans ce groupe. Chaque objet du tableau est de type <codeph>IEventDispatcher</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
	  
      Récupère tous les ponts enfant dans ce groupe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
	  
      Supprime le pont enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont à supprimer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Supprime le pont enfant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      Permet la communication avec le parent s’il figure dans un sandbox différent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Permet la communication avec le parent s’il figure dans un sandbox différent. Peut avoir la valeur <codeph>null</codeph> si le parent est dans le même sandbox ou s’il s’agit de l’application racine de plus haut niveau.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IIMESupport"><apiName>IIMESupport</apiName><shortdesc>
  L’interface IIMESupport définit l’interface pour tout composant qui prend en charge IME (input method editor).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IIMESupport définit l’interface pour tout composant qui prend en charge l’éditeur de méthode de saisie (IME). IME est utilisé pour la saisie de caractères en chinois, japonais et coréen. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link></related-links><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Spécifie si l’IME doit être activé lorsque ce composant a le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Spécifie si l’IME doit être activé lorsque ce composant a le focus. Même si un composant utilise l’IME, ce n’est peut-être pas le cas dans toutes les configurations. Par exemple, TextArea enableIME est défini sur false si sa propriété <codeph>editable</codeph> est <codeph>false</codeph>, car aucune entrée n’est autorisée dans cette configuration. De même DataGrid définit toujours enableIME sur false. Si le composant DataGrid place un ItemEditor, la valeur <codeph>enableIME</codeph> de son éditeur est définie sur <codeph>true</codeph>. 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:imeMode:get"><apiName>imeMode</apiName><shortdesc>
	  Mode IME du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Mode IME du composant.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstantiationUIComponent"><apiName>IDeferredInstantiationUIComponent</apiName><shortdesc>
  L’interface IDeferredInstantiationUIComponent définit l’interface pour un composant ou un objet qui diffère l’instanciation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IDeferredInstantiationUIComponent définit l’interface pour un composant ou un objet qui diffère l’instanciation.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      Crée une référence id pour cet objet IUIComponent sur son objet document parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Parent de cet objet IUIComponent.  
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une référence d’<codeph>id</codeph> à cet objet IUIComponent sur son objet de document parent. Cette fonction peut créer des références multidimensionnelles telles que b[2][4] pour les objets figurant dans un ou plusieurs objets Repeater. Si les indices ont la valeur null, il crée une référence simple, sans tableau.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      Supprime la référence d’id à cet objet IUIComponent sur son objet de document parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Parent de cet objet IUIComponent.  
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime la référence d’<codeph>id</codeph> à cet objet IUIComponent sur son objet de document parent. Cette fonction peut effectuer des suppressions dans des références multidimensionnelles telles que b[2][4] pour les objets figurant dans un ou plusieurs objets Repeater. Si les index sont définis sur null, elle supprime la référence simple autre qu’un tableau. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc conref="mx.core.UIComponent#executeBindings()">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Exécute de façon récursive les liaisons pour les enfants de ce composant. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#executeBindings()">
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
	  Pour chaque événement d’effet, enregistrez le gestionnaire EffectManager comme l’un des écouteurs d’événement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Tableau de chaînes de noms d’effets.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Pour chaque événement d’effet, enregistrez le gestionnaire EffectManager comme l’un des écouteurs d’événement. 
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc conref="mx.core.UIComponent#cachePolicy">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cachePolicy">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc conref="mx.core.UIComponent#descriptor">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#descriptor">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:id:get"><apiName>id</apiName><shortdesc conref="mx.core.UIComponent#id">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#id">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc conref="mx.core.UIComponent#cacheHeuristic">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cacheHeuristic">
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFontContextComponent"><apiName>IFontContextComponent</apiName><shortdesc>
  Permet à un composant de prendre en charge une propriété de contexte de police.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Permet à un composant de prendre en charge une propriété de contexte de police. La propriété est définie sur le composant par la structure lorsque l’enfant est ajouté à la liste d’affichage. Un contexte de police est important pour les composants qui créent des objets flash.text.TextField avec des polices incorporées. Si une police incorporée n’est pas enregistrée à l’aide de la méthode Font.registerFont(), les objets TextField ne peuvent utiliser des polices incorporées que si elles sont créées dans le contexte de la police incorporée. Cette interface permet le suivi du contexte de police d’un composant.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IFontContextComponent:mx.core:IFontContextComponent:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      Fabrique de module qui fournit le contexte des polices de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Fabrique de module qui fournit le contexte des polices de ce composant.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeGroup"><apiName>ISWFBridgeGroup</apiName><shortdesc>
  Un groupe de pont de sandbox est un groupe de ponts qui représentent les applications avec lesquelles cette application peut communiquer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Un groupe de pont de sandbox est un groupe de ponts qui représentent les applications avec lesquelles cette application peut communiquer. Cette application ne peut pas partager de mémoire avec les autres applications dans le groupe ni accéder à celles-ci, mais utilise le pont pour communiquer avec elles.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
      Ajoute un nouveau pont au conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont permettant de communiquer avec le contenu enfant.
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>Classe DisplayObject ayant chargé le contenu représenté par le pont. En général, il s’agit d’une occurrence de la classe SWFLoader. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un nouveau pont au conteneur.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
      Teste si le pont donné correspond à l’un des ponts de sandbox de ce groupe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si la poignée est trouvée, <codeph>false</codeph> sinon.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont à tester.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Teste si le pont donné correspond à l’un des ponts sandbox de ce groupe. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
      Récupère le propriétaire d’un pont, ainsi que la classe DisplayObject ayant chargé l’enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet ayant chargé l’enfant. 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont cible.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Récupère le propriétaire d’un pont, ainsi que la classe DisplayObject ayant chargé l’enfant. Cette méthode est utile lorsqu’un événement est reçu, dont la cible <codeph>event.target</codeph> est le pont. Le pont peut ensuite être converti vers la classe DisplayObject propriétaire.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
      Récupère tous les ponts enfant dans ce groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau de tous les ponts enfant dans ce groupe. Chaque objet du tableau est de type <codeph>IEventDispatcher</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Récupère tous les ponts enfant dans ce groupe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
      Supprime le pont enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Pont à supprimer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime le pont enfant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      Pont utilisé pour communiquer avec l’application parent de ce groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Pont utilisé pour communiquer avec l’application parent de ce groupe.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutElement"><apiName>ILayoutElement</apiName><shortdesc>
  L’interface ILayoutElement est principalement utilisée par les classes de présentation pour obtenir, dimensionner et positionner les éléments des conteneurs GroupBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface ILayoutElement est principalement utilisée par les classes de présentation pour obtenir, dimensionner et positionner les éléments des conteneurs GroupBase.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      Renvoie la coordonnée x des limites de l’élément à la taille d’élément spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée x des limites de l’élément à la taille d’élément spécifiée.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur des limites de l’élément ou NaN pour utiliser la largeur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur des limites de l’élément ou NaN pour utiliser la hauteur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la coordonnée x du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément et est calculé d’après la taille des limites, la position de la présentation et la matrice de transformation de la présentation spécifiées. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la coordonnée x des limites de l’élément à la taille d’élément spécifiée.
     
      <p>Cette méthode est généralement utilisée par les présentations pendant un appel de la méthode <codeph>measure()</codeph> pour prévoir la position de l’élément, si l’élément est redimensionné sur certaines dimensions. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize()"><linktext>setLayoutBoundsSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionX()"><linktext>getLayoutPositionX()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      Renvoie la coordonnée y des limites de l’élément à la taille d’élément spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée y des limites de l’élément à la taille d’élément spécifiée.
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur des limites de l’élément ou NaN pour utiliser la largeur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur des limites de l’élément ou NaN pour utiliser la hauteur préférée. 
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque la valeur de l’élément <codeph>postLayoutTransform</codeph> est true, la méthode renvoie la coordonnée y du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément et est calculé en fonction de la taille des limites spécifiées, la position de la présentation et de la matrice de transformation de la présentation. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la coordonnée y des limites de l’élément à la taille d’élément spécifiée. Cette méthode est généralement utilisée par les présentations pendant un appel de la méthode <codeph>measure()</codeph> pour prévoir la position de l’élément, si l’élément est redimensionné sur certaines dimensions. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize()"><linktext>setLayoutBoundsSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionY()"><linktext>getLayoutPositionY()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      Renvoie la hauteur de présentation de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Hauteur de la présentation de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation et de la matrice de transformation de présentation de l’élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la hauteur de présentation de l’élément. Il s’agit de la taille que l’élément utilise pour son affichage à l’écran. 
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutWidth()"><linktext>getLayoutWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      Renvoie la largeur de la présentation de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Largeur de la présentation de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation et de la matrice de transformation de présentation de l’élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la largeur de présentation de l’élément. Il s’agit de la taille que l’élément utilise pour son affichage à l’écran. 
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutHeight()"><linktext>getLayoutHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      Renvoie la coordonnée x que l’élément utilise pour dessiner à l’écran. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée x que l’élément utilise pour le traçage sur l’écran. 
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la coordonnée x du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la coordonnée x que l’élément utilise pour dessiner à l’écran. 
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionY()"><linktext>getLayoutPositionY()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      Renvoie la coordonnée y utilisée par l’élément pour son affichage à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Coordonnée y utilisée par l’élément pour son affichage à l’écran.
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la coordonnée y du coin supérieur gauche du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la coordonnée y utilisée par l’élément pour son affichage à l’écran.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionX()"><linktext>getLayoutPositionX()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      Renvoie la matrice Matrix3D de transformation de présentation pour cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrice Matrix3D de transformation de présentation pour cet élément. Au lieu de modifier directement la valeur renvoyée, appelez la méthode <codeph>setLayoutMatrix()</codeph>.
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie la matrice Matrix3D de transformation de présentation pour cet élément.
     
      <p>Cette matrice est habituellement définie par les propriétés de transformation du composant, comme <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      Renvoie la matrice de transformation utilisée pour calculer la présentation du composant par rapport à ses frères. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Matrice de transformation de la présentation pour cet élément. Au lieu de modifier directement la valeur renvoyée, appelez la méthode <codeph>setLayoutMatrix()</codeph>.
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie la matrice de transformation utilisée pour calculer la présentation du composant par rapport à ses frères. 
           <p>Cette matrice est habituellement définie par les propriétés 2D du composant, telles que <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      Renvoie la hauteur maximale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Hauteur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la hauteur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille maximale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la hauteur maximale de l’élément.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxWidth()"><linktext>getMaxWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      Renvoie la largeur maximale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Largeur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille maximale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la largeur maximale de l’élément.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxHeight()"><linktext>getMaxHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      Renvoie la hauteur minimale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Hauteur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la hauteur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille minimale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la hauteur minimale de l’élément.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinWidth()"><linktext>getMinWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      Renvoie la largeur minimale de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Largeur maximale de l’élément. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille minimale et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la largeur minimale de l’élément.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinHeight()"><linktext>getMinHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      Renvoie la hauteur préférée de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la hauteur préférée de l’élément. La hauteur par défaut est habituellement basée sur la taille d’élément par défaut et tout remplacement explicite éventuel. Pour un composant UIComponent, il s’agit de la même valeur que celle renvoyée par la méthode <codeph>getExplicitOrMeasuredHeight()</codeph>. 
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la hauteur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille préférée et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la hauteur préférée de l’élément.   
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredWidth()"><linktext>getPreferredWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      Renvoie la largeur préférée de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Renvoie la largeur préférée de l’élément. La largeur par défaut est habituellement basée sur la taille d’élément par défaut et tout remplacement explicite éventuel. Pour le composant UIComponent, il s’agit de la même valeur que celle renvoyée par la méthode <codeph>getExplicitOrMeasuredWidth()</codeph>. 
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur <codeph>true</codeph>, la méthode renvoie la largeur du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille préférée et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la largeur préférée de l’élément.    
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredHeight()"><linktext>getPreferredHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      Définit les coordonnées utilisées par l’élément pour son affichage à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Coordonnée x du coin supérieur gauche du cadre de sélection. 
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Coordonnée y du coin supérieur gauche du cadre de sélection.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> est défini sur <codeph>true</codeph>, l’élément est placé de manière à faire correspondre le coin supérieur gauche de son cadre de sélection avec les coordonnées (x, y). Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit les coordonnées utilisées par l’élément pour son affichage à l’écran.
           <p>Notez que les appels de la méthode <codeph>setLayoutBoundSize()</codeph> peuvent affecter la position de présentation. Vous devez donc appeler <codeph>setLayoutBoundPosition()</codeph> après avoir appelé <codeph>setLayoutBoundSize()</codeph>. </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutSize()"><linktext>setLayoutSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      Définit la taille de la présentation de l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Largeur de la présentation de l’élément. 
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur de la présentation de l’élément. 
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Lorsque <codeph>postLayoutTransform</codeph> a la valeur true, les dimensions spécifiées sont celles du cadre de sélection de l’élément. Le cadre de sélection est dans l’espace de coordonnées parent de l’élément. Il est calculé à partir de la taille de présentation, de la position de présentation et de la matrice de transformation de présentation de l’élément.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la taille de la présentation de l’élément. Il s’agit de la taille que l’élément utilise pour son affichage à l’écran. 
      
      <p>Si les paramètres <codeph>width</codeph> et/ou <codeph>height</codeph> ne sont pas spécifiés (NaN), Flex définit la taille de la présentation de l’élément sur la largeur et/ou la hauteur préférées.</p>
     
      <p>Notez que les appels de la méthode <codeph>setLayoutBoundSize()</codeph> peuvent affecter la position de présentation. Vous devez donc appeler <codeph>setLayoutBoundPosition()</codeph> après avoir appelé <codeph>setLayoutBoundSize()</codeph>. </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutPosition()"><linktext>setLayoutPosition()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      Définit la matrice de transformation Matrix3D utilisée pour calculer la taille et la position de la présentation du composant par rapport à ses frères.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/><apiDesc>Matrice. 
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>La valeur <codeph>true</codeph> entraîne le conteneur parent à réorganiser ses enfants. En règle générale, vous transmettez la valeur <codeph>true</codeph> à la méthode <codeph>invalidateLayout()</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la matrice de transformation Matrix3D utilisée pour calculer la taille et la position de la présentation du composant par rapport à ses frères.
           <p>Cette matrice est habituellement définie par les propriétés de transformation du composant, comme <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
      
      <p>Notez que la matrice de présentation Matrix3D est utilisée comme facteur dans les méthodes <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> et <codeph>getLayoutSize()</codeph> lorsqu’elle est calculée dans les coordonnées du parent, ainsi que dans <codeph>getLayoutPosition()</codeph> dans les coordonnées du parent et de l’enfant. Généralement, les présentations permettant de calculer la matrice de transformation appellent explicitement cette méthode et utilisent des tailles dans les coordonnées de l’enfant. Les présentations qui appellent cette méthode transmettent la valeur <codeph>false</codeph> à la méthode <codeph>invalidateLayout</codeph> afin qu’une transmission de présentation suivante ne soit pas déclenchée.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      Définit la matrice de transformation utilisée pour calculer la taille de présentation et la position du composant par rapport à ses frères. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/><apiDesc>Matrice. 
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>La valeur <codeph>true</codeph> entraîne le conteneur parent à réorganiser ses enfants. En règle générale, vous transmettez la valeur <codeph>true</codeph> à la méthode <codeph>invalidateLayout()</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la matrice de transformation utilisée pour calculer la taille de présentation et la position du composant par rapport à ses frères. 
           <p>La matrice est habituellement définie par les propriétés 2D du composant, telles que <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> et <codeph>transformY</codeph>. Certains composants peuvent comporter des propriétés de transformation supplémentaires appliquées au-dessus de la matrice de présentation pour déterminer la matrice calculée finale. Par exemple, <codeph>UIComponent</codeph> définit la propriété <codeph>offsets</codeph>.</p>
      
      <p>Notez que la matrice de présentation Matrix est utilisée comme facteur dans les méthodes <codeph>getPreferredSize()</codeph>, <codeph>getMinSize()</codeph>, <codeph>getMaxSize()</codeph> et <codeph>getLayoutSize()</codeph> lorsqu’elle est calculée dans les coordonnées du parent, ainsi que dans <codeph>getLayoutPosition()</codeph> dans les coordonnées du parent et de l’enfant. Généralement, les présentations permettant de calculer la matrice de transformation appellent explicitement cette méthode et utilisent des tailles dans les coordonnées de l’enfant. Les présentations qui appellent cette méthode transmettent la valeur <codeph>false</codeph> à la méthode <codeph>invalidateLayout</codeph> afin qu’une transmission de présentation suivante ne soit pas déclenchée.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:transformAround"><apiName>transformAround</apiName><shortdesc>
      Méthode d’utilitaire permettant de mettre à jour la rotation, la mise à l’échelle et la translation de la transformation tout en conservant un point particulier, spécifié dans l’espace de coordonnées du composant, fixe dans l’espace de coordonnées du parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>Point, dans les coordonnées du composant, à garder fixe par rapport à son parent. 
           </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs d’échelle de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>nouvelles valeurs de rotation de la transformation
           </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs de translation de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs d’échelle après mise en forme de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs de rotation après mise en forme de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>Nouvelles valeurs de translation après mise en forme de la transformation.
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, la taille et l’affichage du conteneur parent sont invalidés. Les présentations qui appellent cette méthode transmettent <codeph>false</codeph> afin qu’une transmission de présentation suivante ne soit pas déclenchée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode d’utilitaire permettant de mettre à jour la rotation, la mise à l’échelle et la translation de la transformation tout en conservant un point particulier, spécifié dans l’espace de coordonnées du composant, fixe dans l’espace de coordonnées du parent. Cette fonction affecte les valeurs de rotation, d’échelle et de translation fournies, puis met à jour les propriétés x/y/z, le cas échéant, pour conserver le centre de transformation fixe. 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Coordonnée y de la ligne de base de la première ligne de texte du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée y de la ligne de base de la première ligne de texte du composant. 
           <p>Cette propriété est utilisée pour implémenter le style de contrainte <codeph>baseline</codeph>. Elle est également utilisée pour aligner l’étiquette d’une classe FormItem aux contrôles dans la classe FormItem. </p>
           <p>Chaque composant doit remplacer cette propriété. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baseline:get"><apiName>baseline</apiName><shortdesc>
      Distance verticale en pixels de la cible d’ancrage à la position de ligne de base du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance verticale en pixels de la cible d’ancrage à la position de ligne de base du contrôle.
           <p>Par défaut, la cible d’ancrage est le bord supérieur de la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:bottom:get"><apiName>bottom</apiName><shortdesc>
      Distance verticale en pixels du bord inférieur du composant au bord inférieur de la cible d’ancrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance verticale en pixels du bord inférieur du composant au bord inférieur de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      Contient true si l’élément possède une matrice 3D.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Contient <codeph>true</codeph> si l’élément possède une matrice 3D.
           <p>Utilisez <codeph>hasLayoutMatrix3D</codeph> au lieu d’appeler et d’examiner la valeur renvoyée par la méthode <codeph>getLayoutMatrix3D()</codeph>, car cette méthode renvoie une matrice valide même lorsque l’élément est en 2D. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      Distance horizontale en pixels du centre du composant au centre de la zone de contenu de la cible d’ancrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance horizontale en pixels du centre du composant au centre de la zone de contenu de la cible d’ancrage.
           <p>La cible d’ancrage par défaut est le conteneur lui-même.</p>
           <p>Dans les présentations avec contraintes avancées, la cible d’ancrage peut être une colonne de contrainte. Dans ce cas, la zone de contenu est l’espace entre la colonne précédente (ou le côté du conteneur) et la colonne cible.</p>
           <p>Définir la propriété sur un nombre ou une chaîne numérique (par exemple, 10) spécifie l’utilisation de la cible d’ancrage par défaut. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « constraintColumnId:value ». Par exemple, « col1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:left:get"><apiName>left</apiName><shortdesc>
      Distance horizontale en pixels du bord gauche du composant au bord gauche de la cible d’ancrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance horizontale en pixels du bord gauche du composant au bord gauche de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une colonne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « col1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Spécifie la hauteur d'un composant en tant que pourcentage de la taille de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la hauteur d'un composant en tant que pourcentage de la taille de son parent. Valeurs autorisées : 0 à 100. Définir les propriétés <codeph>height</codeph> ou <codeph>explicitHeight</codeph> réinitialise cette propriété sur NaN.
           <p>Cette propriété renvoie une valeur numérique uniquement si elle a été précédemment définie. Elle ne reflète pas la taille exacte du composant en pourcentage. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Spécifie la largeur d'un composant en tant que pourcentage de la taille de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la largeur d'un composant en tant que pourcentage de la taille de son parent. Valeurs autorisées : 0 à 100. La définition des valeurs <codeph>width</codeph> ou <codeph>explicitWidth</codeph> restaure cette propriété sur la valeur NaN.
           <p>Cette propriété renvoie une valeur numérique uniquement si elle a été précédemment définie. Elle ne reflète pas la taille exacte du composant en pourcentage. </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:right:get"><apiName>right</apiName><shortdesc>
      Distance horizontale en pixels du bord droit du composant au bord droit de la cible d’ancrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance horizontale en pixels du bord droit du composant au bord droit de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une colonne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « col1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:top:get"><apiName>top</apiName><shortdesc>
      Distance verticale en pixels du bord supérieur du composant au bord supérieur de la cible d’ancrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance verticale en pixels du bord supérieur du composant au bord supérieur de la cible d’ancrage.
           <p>Par défaut, la cible d’ancrage est la zone de contenu du conteneur. Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. </p>
           <p>La définition de la propriété sur un nombre ou une chaîne numérique (par exemple, 10) indique que la cible d’ancrage par défaut est utilisée. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « anchorTargetName:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      Distance verticale en pixels du centre du composant au centre de la zone de contenu de la cible d’ancrage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Distance verticale en pixels du centre du composant au centre de la zone de contenu de la cible d’ancrage.
           <p>La cible d’ancrage par défaut est le conteneur lui-même.</p>
           <p>Dans les présentations avec contraintes avancées, la cible peut être une ligne de contrainte. La zone de contenu est alors l’espace entre la rangée précédente (ou le côté du conteneur) et la rangée cible.</p>
           <p>Définir la propriété sur un nombre ou une chaîne numérique (par exemple, 10) spécifie l’utilisation de la cible d’ancrage par défaut. </p>
           <p>Pour spécifier une cible d’ancrage, définissez la valeur de propriété sur une chaîne au format « constraintColumnId:value ». Par exemple, « row1:10 ». </p>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerCreationPolicy"><apiName>ContainerCreationPolicy</apiName><shortdesc>
  La classe ContainerCreationPolicy définit les valeurs de constante de la propriété creationPolicy de la classe Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ContainerCreationPolicy définit les valeurs de constante de la propriété <codeph>creationPolicy</codeph> de la classe Container.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link></related-links><apiValue id="mx.core:ContainerCreationPolicy:ALL"><apiName>ALL</apiName><shortdesc>
	  Créer immédiatement tous les descendants.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Créer immédiatement tous les descendants.
	 
	  <p>Evitez d’utiliser cette stratégie <codeph>creationPolicy</codeph> car elle augmente le temps de démarrage de l’application. Il n’existe généralement aucune bonne raison de créer des composants au démarrage que l’utilisateur ne peut pas voir. Si vous utilisez cette stratégie pour pouvoir transmettre des données en mode « push » dans des composants masqués au démarrage, il est conseillé de concevoir l’application en stockant les données dans des variables de données. Les composants créés ultérieurement obtiennent ces données en mode « pull », via databinding ou à l’aide d’un gestionnaire <codeph>initialize</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  Retarder la création de certains ou de tous les descendants jusqu’à ce qu’ils soient nécessaires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Retarder la création de certains ou de tous les descendants jusqu’à ce qu’ils sont nécessaires.
	 
	  <p>Par exemple, si un conteneur de navigateur tel que TabNavigator a cette stratégie <codeph>creationPolicy</codeph>, il crée immédiatement tous ses enfants ainsi que les descendants de l’enfant initialement sélectionné. Toutefois, il attend pour créer les descendants des autres enfants jusqu’à ce que l’utilisateur y accède.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:NONE"><apiName>NONE</apiName><shortdesc>
	  Ne créer aucun enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Ne créer aucun enfant.
	 
	  <p>Avec cette stratégie <codeph>creationPolicy</codeph>, il revient au développeur de créer les enfants par programmation à partir des descripteurs UIComponentDescriptor, en appelant la méthode <codeph>createComponentsFromDescriptors()</codeph> sur le conteneur parent.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:QUEUED"><apiName>QUEUED</apiName><shortdesc>
	  Ajouter le conteneur à une file d’attente de création.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>queued</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Ajouter le conteneur à une file d’attente de création. Déconseillé depuis Flex 4.0. 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextField"><apiName>UITextField</apiName><shortdesc>
  La classe UITextField définit la composante utilisée par de nombreux composants Flex pour afficher du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="direction"/><styles><style format="Length" inherit="yes" name="textIndent" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte par rapport au côté gauche du conteneur (en pixels).
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:UITextField" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UIFTETextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  Paramètres régionaux du texte affiché par ce composant. 
 
  <p>FTE et TLF utilisent ces paramètres régionaux pour mapper des caractères Unicode à des glyphes de police et rechercher des polices de rechange. </p>
 
  <p>Remarque : ce style s’applique uniquement lorsqu’un composant MX spécifie UIFTETextField comme classe <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:UITextField" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. Dans le thème Halo, la valeur par défaut est 10 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Halo, la valeur par défaut est 11. Dans le thème Spark, la valeur par défaut est 12 pour tous les contrôles sauf ColorPicker. Pour le contrôle ColorPicker avec thème Spark, la valeur par défaut est 11.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée. La police par défaut du thème Halo est <codeph>"Verdana"</codeph>. La police par défaut du thème Spark est <codeph>"Arial"</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant. La valeur par défaut du thème Halo est <codeph>0x0B333C</codeph>. La valeur par défaut du thème Spark est <codeph>0x000000</codeph>. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button dans le thème Halo est 10 et dans le thème Spark est 6. </p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUITextField</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe UITextField définit la composante utilisée par de nombreux composants Flex pour afficher du texte. Par exemple, la classe mx.controls.Button utilise un composant UITextField pour définir la zone de libellé de la commande Button. 
 
  <p>La classe UITextField étend la classe flash.text.TextField pour prendre en charge des fonctionnalités supplémentaires requises par Flex. Il s’agit notamment des styles CSS, de l’annulation/mesure/présentation, de l’activation/désactivation, des infos-bulles et de la prise en charge de l’éditeur IME (Input Method Editor) pour la saisie de texte chinois, japonais et coréen.</p>
 
  <p>Avertissement : si UITextField hérite de <codeph>layoutDirection="rtl"</codeph>, il modifie sa propre matrice <codeph>transform.matrix</codeph> afin de restaurer localement le système de coordonnées par défaut.</p>
   </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link></related-links><apiConstructor id="mx.core:UITextField:UITextField"><apiName>UITextField</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Nombre qui est explicitHeight si elle est définie ou measuredHeight dans le cas contraire. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Nombre qui est explicitWidth si elle est définie ou measuredWidth dans le cas contraire. 
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UIComponent#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Valeur du style.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getTextStyles"><apiName>getTextStyles</apiName><shortdesc>
      Renvoie l’objet TextFormat qui représente les informations de formatage de caractères pour cet objet UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextFormat. 
           </apiDesc><apiType value="flash.text:TextFormat"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie l’objet TextFormat qui représente les informations de mise en forme des caractères pour cet objet UITextField.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextFormat.xml"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc>
      Renvoie un objet UITextFormat contenant des informations de formatage pour ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet comportant des informations de formatage pour ce composant.
           </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Renvoie un objet UITextFormat contenant des informations de formatage pour ce composant. Cette méthode est similaire à la méthode <codeph>getTextFormat()</codeph> de la classe flash.text.TextField, mais elle renvoie un objet UITextFormat au lieu d’un objet TextFormat.
           <p>La classe UITextFormat étend la classe TextFormat pour ajouter les méthodes de mesure de texte <codeph>measureText()</codeph> et <codeph>measureHTMLText()</codeph>.</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:initialize"><apiName>initialize</apiName><shortdesc>
      Initialise ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Initialise ce composant.
           <p>Cette méthode est requise par l’interface IUIComponent, mais elle est sans effet pour un élément UITextField.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateSize"><apiName>invalidateSize</apiName><shortdesc conref="mx.core.UIComponent#invalidateSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:move"><apiName>move</apiName><shortdesc conref="mx.core.UIComponent#move()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Position de gauche du composant dans son parent.
             </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position supérieure du composant dans son parent.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#move()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:owns"><apiName>owns</apiName><shortdesc>
      Renvoie true si cet objet est le propriétaire ou le parent de l’enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si cet objet UITextField est le propriétaire ou le parent de l’enfant.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Objet DisplayObject enfant.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie <codeph>true</codeph> si cet objet est le propriétaire ou le parent de l’enfant.
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextField/owner"><linktext>propriétaire</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      Cette fonction est appelée lorsqu’un parent est affecté à l’objet UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Parent de cet objet UITextField.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Cette fonction est appelée lorsqu’un parent est affecté à l’objet UITextField. En règle générale, vous n’avez pas besoin d’appeler cette méthode.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      Réexécute l’événement spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si une réexécution a réussi.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Evénement à réexécuter.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Réexécute l’événement spécifié. Un auteur de composant doit probablement appeler l’événement super.replayAutomatableEvent si le comportement de réexécution par défaut a été défini dans une super-classe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setActualSize"><apiName>setActualSize</apiName><shortdesc conref="mx.core.UIComponent#setActualSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Largeur de l’objet.
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Hauteur de l’objet.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setActualSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setColor"><apiName>setColor</apiName><shortdesc>
      Définit la couleur de police du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Nouvelle couleur de police.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la couleur de police du texte.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UIComponent#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setStyle"><apiName>setStyle</apiName><shortdesc>
      Sans effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>Nouvelle valeur du style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sans effet. Un objet UITextField ne peut pas avoir de styles inline.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setVisible"><apiName>setVisible</apiName><shortdesc>
      Définit la valeur de la propriété visible de cet objet UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> pour rendre cet objet UITextField visible et <codeph>false</codeph> pour le rendre invisible.
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> pour supprimer la génération d’un événement lorsque vous modifiez la visibilité.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la valeur de la propriété <codeph>visible</codeph> de cet objet UITextField.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:styleChanged"><apiName>styleChanged</apiName><shortdesc conref="mx.core.UIComponent#styleChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style ou null si tous les styles de ce composant ont été modifiés.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#styleChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      Tronquer le texte pour l’ajuster horizontalement dans la zone définie pour la commande et ajouter des points de suspension, trois points (...) au texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si le texte a dû être tronqué.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Texte à ajouter après la troncature. Si vous transmettez <codeph>null</codeph>, une chaîne localisable telle que <codeph>"..."</codeph> est utilisée.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Tronquer le texte pour l’ajuster horizontalement dans la zone définie pour la commande et ajouter des points de suspension, trois points (...) au texte.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.core.UIComponent#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UITextField:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Objet délégué qui traite la fonctionnalité liée à l’automatisation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet délégué qui traite la fonctionnalité liée à l’automatisation.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      True si ce composant est activé pour l’automatisation, false dans le cas contraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True si ce composant est activé pour l’automatisation, false dans le cas contraire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      Nom pouvant être utilisé comme identifiant de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Nom pouvant être utilisé comme identifiant de cet objet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      Propriétaire de ce composant à des fins d’automatisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Propriétaire de ce composant à des fins d’automatisation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      Parent de ce composant à des fins d’automatisation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Parent de ce composant à des fins d’automatisation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationValue:get"><apiName>automationValue</apiName><shortdesc>
      
      Cette valeur correspond généralement à l’apparence rendue de l’objet et doit être utilisable pour associer l’identifiant à l’objet lorsqu’il apparaît visuellement dans l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Cette valeur correspond généralement à l’apparence rendue de l’objet et doit être utilisable pour associer l’identifiant à l’objet lorsqu’il apparaît visuellement dans l’application.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      True si ce composant est visible pour l’automatisation, false dans le cas contraire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True si ce composant est visible pour l’automatisation, false dans le cas contraire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Coordonnée y de la ligne de base de la première ligne de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Coordonnée y de la ligne de base de la première ligne de texte.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:className:get"><apiName>className</apiName><shortdesc>
      Nom de la classe de cette occurrence, par exemple « DataGridItemRenderer ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom de la classe de cette occurrence, par exemple <codeph>"DataGridItemRenderer"</codeph>.
           <p>Cette chaîne n’inclut pas le nom du package. Si vous avez besoin du nom du package, appelez la méthode <codeph>getQualifiedClassName()</codeph> du package flash.utils. Elle renvoie une chaîne telle que <codeph>"mx.controls.dataGridClasses::DataGridItemRenderer"</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:document:get"><apiName>document</apiName><shortdesc>
      Référence à l’objet de document associé à cet objet UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Référence à l’objet de document associé à cet objet UITextField. Un objet de document est un objet qui se trouve au sommet de la hiérarchie d’une application Flex, d’un composant MXML ou d’un composant AS.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur qui signale si l’IME doit être activé lorsque le composant reçoit le focus. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enabled:get"><apiName>enabled</apiName><shortdesc>
      Valeur booléenne indiquant si le composant est activé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur booléenne indiquant si le composant est activé. Cette propriété affecte uniquement la couleur du texte et non si l’élément UITextField est modifiable. Pour contrôler le caractère modifiable, utilisez la propriété <codeph>flash.text.TextField.type</codeph>.
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Nombre qui spécifie la hauteur maximale du composant (en pixels) dans les coordonnées du composant, si la propriété maxHeight est définie. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre qui spécifie la hauteur maximale du composant (en pixels) dans les coordonnées du composant, si la propriété maxHeight est définie. Puisque la propriété maxHeight est en lecture seule, cette méthode renvoie NaN. Vous devez remplacer cette méthode et ajouter un setter pour utiliser cette propriété.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Nombre qui spécifie la largeur maximale du composant (en pixels) dans les coordonnées du composant, si la propriété maxWidth est définie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre qui spécifie la largeur maximale du composant (en pixels) dans les coordonnées du composant, si la propriété maxWidth est définie. Puisque la propriété maxWidth est en lecture seule, cette méthode renvoie NaN. Vous devez remplacer cette méthode et ajouter un setter pour utiliser cette propriété.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      Objet Sprite unique partagé par différents composants et utilisé comme incrustation pour tracer l’indicateur de focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Objet Sprite unique partagé par différents composants et utilisé comme incrustation pour tracer l’indicateur de focus. Les composants partagent cet objet si leur parent est un composant qui a le focus et non si le composant implémente l’interface IFocusManagerComponent.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc>
      Si la valeur est true, les styles paddingLeft et paddingRight n’ajoutent pas d’espace autour du texte du composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, les styles <codeph>paddingLeft</codeph> et <codeph>paddingRight</codeph> n’ajoutent pas d’espace autour du texte du composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle est mis en focus et rétablit la valeur précédente lorsque le contrôle est désactivé.
          <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs possibles de cette propriété. Vous pouvez également spécifier <codeph>null</codeph> si vous ne souhaitez pas spécifier d’éditeur IME.</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Début de la chaîne de styles hérités de cet élément UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Début de la chaîne de styles hérités de cet élément UITextField. La méthode <codeph>getStyle()</codeph> accède à <codeph>inheritingStyles[styleName]</codeph> pour parcourir la totalité de la chaîne liée au prototype. Cet objet est défini par la méthode <codeph>initProtoChain()</codeph>. En règle générale, vous n’avez pas besoin d’accéder à cette propriété directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:initialized:get"><apiName>initialized</apiName><shortdesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était)
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était)
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxHeight:get"><apiName>maxHeight</apiName><shortdesc conref="mx.core.UIComponent#maxHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxWidth:get"><apiName>maxWidth</apiName><shortdesc conref="mx.core.UIComponent#maxWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minHeight:get"><apiName>minHeight</apiName><shortdesc conref="mx.core.UIComponent#minHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minWidth:get"><apiName>minWidth</apiName><shortdesc conref="mx.core.UIComponent#minWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Fabrique moduleFactory utilisée pour la création d’objets TextField dans le contexte SWF adapté.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Fabrique moduleFactory utilisée pour la création d’objets TextField dans le contexte SWF adapté. Cette opération est nécessaire au fonctionnement des polices incorporées.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Début de la chaîne de styles non hérités de cet élément UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Début de la chaîne de styles non hérités de cet élément UITextField. La méthode <codeph>getStyle()</codeph> accède à la méthode <codeph>nonInheritingStyles[styleName]</codeph> pour parcourir la totalité de la chaîne liée au prototype. Cet objet est défini par la méthode <codeph>initProtoChain()</codeph>. En règle générale, vous n’avez pas besoin d’accéder à cette propriété directement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc>
      Contrairement à la propriété textHeight, cela renvoie une valeur non nulle même si le texte est vide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Contrairement à la propriété textHeight, cela renvoie une valeur non nulle même si le texte est vide. Dans ce cas, elle renvoie la valeur de la propriété textHeight si le texte n’était pas vide.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:owner:get"><apiName>owner</apiName><shortdesc>
      Défini par défaut sur le conteneur parent de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Défini par défaut sur le conteneur parent de cet objet. Toutefois, si cet objet est un composant enfant déclenché par son parent, comme la liste déroulante d’un composant de commande ComboBox, le propriétaire est le composant ayant affiché cet objet. 
           <p>Cette propriété n’est pas gérée par Flex, mais par chaque composant. Aussi, si vous utilisez la méthode <codeph>PopUpManger.createPopUp()</codeph> ou <codeph>PopUpManger.addPopUp()</codeph> pour afficher un composant enfant, définissez la propriété <codeph>owner</codeph> du composant enfant sur le composant l’ayant affiché.</p>
     
      <p>La valeur par défaut est la valeur de la propriété <codeph>parent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:parent:get"><apiName>parent</apiName><shortdesc>
      Conteneur ou composant parent de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Conteneur ou composant parent de ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentHeight:get"><apiName>percentHeight</apiName><shortdesc conref="mx.core.UIComponent#percentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentWidth:get"><apiName>percentWidth</apiName><shortdesc conref="mx.core.UIComponent#percentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      Définie sur true après la création des composants enfant internes éventuels par la méthode createChildren().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Définie sur <codeph>true</codeph> après la création des composants enfant internes éventuels par la méthode <codeph>createChildren()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:styleName:get"><apiName>styleName</apiName><shortdesc conref="mx.core.UIComponent#styleName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UIComponent#styleName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:toolTip:get"><apiName>toolTip</apiName><shortdesc conref="mx.core.UIComponent#toolTip">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#toolTip">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc conref="mx.core.UIComponent#tweeningProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.core.UIComponent#tweeningProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était)
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était)
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
  MovieClipAsset est une sous-classe de la classe flash.display.MovieClip, qui représente des symboles de clips à incorporer dans une application Flex à partir d’un fichier SWF produit par Flash. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexMovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipAsset est une sous-classe de la classe flash.display.MovieClip, qui représente des symboles de clips à incorporer dans une application Flex à partir d’un fichier SWF produit par Flash. Elle implémente l’interface IFlexDisplayObject, ce qui permet l’affichage du composant MovieClip dans un contrôle Image, ou son utilisation en tant qu’arrière-plan de conteneur ou habillage de composant.
 
  <p>L’objet MovieClip incorporé doit être un symbole de clip figurant dans un fichier SWF. Un clip incorporé permet habituellement l’utilisation dans une application Flex d’une animation à base d’images créée dans Flash. Le compilateur MXML génère automatiquement une classe qui étend la classe MovieClipAsset pour représenter l’animation incorporée.</p>
 
  <p>Il n’est généralement pas nécessaire d’utiliser la classe MovieClipAsset directement lors de l’écriture d’une application Flex. Par exemple, vous pouvez utiliser une séquence d’animation comme image d’arrière-plan d’une application en écrivant le code suivant :</p>
 
  <pre>
  &lt;mx:Application backgroundImage="@Embed(source='Assets.swf', symbol='BackgroundAnimation')"/></pre>
 
  <p>ou</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol="BackgroundAnimation")
      }
  &lt;fx:Style/></pre>
 
  <p>sans devoir comprendre que le compilateur MXML crée automatiquement une sous-classe de MovieClipAsset.</p>
 
  <p>Cependant, il peut être utile de comprendre ce qui se passe au niveau du code ActionScript. Afin d’incorporer un clip dans ActionScript, vous devez déclarer une variable de type Class et lui ajouter des métadonnées <codeph>[Embed]</codeph>. Par exemple :</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="BackgroundAnimation")]
  private var backgroundAnimationClass:Class;</pre>
 
  <p>Le compilateur MXML détecte que le symbole BackgroundAnimation dans Assets.swf est un clip, génère automatiquement une sous-classe de la classe MovieClipAsset pour le représenter et définit la variable comme référence à cette classe auto-générée. Vous pouvez ensuite utiliser cette référence de classe pour créer des occurrences de la classe MovieClipAsset à l’aide de l’opérateur <codeph>new</codeph> et utiliser les API de la classe MovieClip sur ces dernières :</p>
 
  <pre>
  var backgroundAnimation:MovieClipAsset =
      MovieClipAsset(new backgroundAnimationClass());
  var n:int = backgroundAnimation.totalFrames;</pre>
 
  <p>Toutefois, il est rarement nécessaire de créer des occurrences MovieClipAsset manuellement. En effet, les propriétés et styles liés aux images peuvent être définis sur une classe produisant une image. Les composants créent ainsi les occurrences en tant que de besoin. Par exemple, pour définir l’arrière-plan d’application sur cette animation, vous pouvez simplement écrire le code suivant :</p>
 
  <pre>
  &lt;mx:Application backgroundImage="{backgroundAnimationClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MovieClipAsset:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MovieClipAsset:move"><apiName>move</apiName><shortdesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position x de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Nouvelle position y de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Déplace cet objet vers les coordonnées x et y spécifiées.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:MovieClipAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Définit la taille réelle de cet objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Nouvelle largeur de l’objet.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Nouvelle hauteur de l’objet.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Définit la taille réelle de cet objet.
	 
	  <p>Cette méthode est principalement utilisée dans le cadre de l’implémentation de la méthode <codeph>updateDisplayList()</codeph>, qui permet de calculer la taille réelle de l’objet, en fonction de sa taille explicite, de sa taille par rapport au parent (pourcentage) et de sa taille mesurée. Vous pouvez ensuite appliquer cette taille réelle à l’objet en appelant la méthode <codeph>setActualSize()</codeph>.</p>
	 
	  <p>Dans d’autres situations, il est préférable de définir les propriétés telles que <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> et <codeph>percentHeight</codeph> plutôt que d’appeler cette méthode.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:MovieClipAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Retourne un objet EdgeMetrics pour la bordure qui comporte quatre propriétés : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Renvoie un objet EdgeMetrics pour la bordure qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur d’un côté de la bordure, exprimée en pixels.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Hauteur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Hauteur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Largeur mesurée de l’objet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Largeur mesurée de l’objet.
	 
	  <p>Cette valeur est généralement codée en dur pour les habillages graphiques, car ce nombre correspond tout simplement au nombre de pixels du graphique. Pour les habillages de code, la valeur peut également être codée en dur si vous souhaitez que l’objet soit tracé à une taille bien définie. Si la taille peut changer en fonction de différentes propriétés, vous pouvez également utiliser une interface ILayoutManagerClient, de sorte qu’une méthode <codeph>measure()</codeph> soit appelée au moment opportun. Vous pouvez ainsi calculer la hauteur <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
  La classe SoundAsset est une sous-classe de flash.media.Sound, classe qui représente les sons incorporés dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.media:Sound</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe SoundAsset est une sous-classe de flash.media.Sound, classe qui représente les sons incorporés dans une application Flex.
 
  <p>Les sons incorporés peuvent figurer dans un fichier MP3. Vous pouvez également incorporer un symbole de son figurant dans un fichier SWF produit par Flash. Dans les deux cas, le compilateur MXML génère automatiquement une classe qui étend la classe SoundAsset pour représenter les données audio incorporées.</p>
 
  <p>Généralement, il n’est pas nécessaire d’utiliser la classe SoundAsset directement lors de l’écriture d’une application Flex. Par exemple, vous pouvez simplement incorporer un fichier MP3 et l’utiliser dans un objet SoundEffect avec le code suivant :</p>
 
  <pre>
  &lt;mx:SoundEffect id="beep" source="@Embed(source='Beep.mp3')"/></pre>
 
  <p>sans devoir comprendre que le compilateur MXML crée automatiquement une sous-classe de SoundAsset.</p>
 
  <p>Cependant, il peut être utile de comprendre ce qui se passe au niveau du code ActionScript. Afin d’incorporer une image bitmap dans ActionScript, vous déclarez une variable de type Class pour lui ajouter des métadonnées <codeph>[Embed]</codeph>. Par exemple, incorporez un fichier MP3 de la manière suivante :</p>
 
  <pre>
  [Bindable]
  [Embed(source="Beep.mp3")]
  private var beepClass:Class;</pre>
 
  <p>Le compilateur MXML détecte l’extension .mp3, transcode les données mp3 dans le format audio utilisé par le lecteur, génère automatiquement une sous-classe de la classe SoundAsset et définit la variable comme référence à cette classe auto-générée. Vous pouvez ensuite utiliser cette référence de classe pour créer des occurrences de la classe SoundAsset à l’aide de l’opérateur <codeph>new</codeph> et utiliser les API de la classe Sound sur ces dernières :</p>
 
  <pre>
    var beepSound:SoundAsset = SoundAsset(new beepClass());
    beepSound.play();</pre>
 
  <p>Toutefois, il est rarement nécessaire de créer des occurrences SoundAsset manuellement. En effet, les propriétés et styles liés aux sons peuvent être définis sur une classe produisant un son. Les composants créent ainsi les occurrences audio en tant que de besoin. Par exemple, pour lire ce son avec un objet SoundEffect, vous pouvez définir la propriété <codeph>source</codeph> de l’objet SoundEffect sur <codeph>beepClass</codeph>. Dans MXML, procédez de la manière suivante :</p>
 
  <pre>
  &lt;mx:SoundEffect id="beepEffect" source="{beepClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SoundAsset:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ApplicationDomainTarget"><apiName>ApplicationDomainTarget</apiName><shortdesc>
  La classe ApplicationDomainTarget définit les valeurs possibles de la propriété applicationDomainTarget de la classe RSLData.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ApplicationDomainTarget définit les valeurs possibles de la propriété <codeph>applicationDomainTarget</codeph> de la classe <codeph>RSLData</codeph>. Chaque cible de domaine d’application spécifie un domaine d’application relatif qui est résolu à l’exécution.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#RSLData"><linktext>mx.core.RSLData</linktext></link></related-links><apiValue id="mx.core:ApplicationDomainTarget:CURRENT"><apiName>CURRENT</apiName><shortdesc>
      Le domaine d’application de la fabrique de modules actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>current</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Le domaine d’application de la fabrique de modules actuelle.
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
      Le comportement par défaut pour le chargement des bibliothèques RSL consiste à charger une bibliothèque RSL aussi haut que possible dans la chaîne de fabrique de modules parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Le comportement par défaut pour le chargement des bibliothèques RSL consiste à charger une bibliothèque RSL aussi haut que possible dans la chaîne de fabrique de modules parent. Afin de charger une bibliothèque RSL dans une fabrique de modules parent, cette fabrique de modules doit avoir été compilée avec la bibliothèque RSL spécifiée dans les options du compilateur. Si aucune fabrique de modules parent n’a été compilée avec cette bibliothèque RSL, la bibliothèque RSL est chargée dans le domaine d’application de la fabrique de modules qui charge la bibliothèque RSL.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:PARENT"><apiName>PARENT</apiName><shortdesc>
      Le domaine d’application de la fabrique de modules parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Le domaine d’application de la fabrique de modules parent.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:TOP_LEVEL"><apiName>TOP_LEVEL</apiName><shortdesc>
      Le domaine d’application de la fabrique de modules de niveau supérieur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top-level</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Le domaine d’application de la fabrique de modules de niveau supérieur.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModuleFactory"><apiName>IFlexModuleFactory</apiName><shortdesc>
  L’interface IFlexModuleFactory représente le contrat prévu pour les applications Flex d’amorçage et les modules chargés de façon dynamique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFlexModuleFactory représente le contrat prévu pour les applications Flex d’amorçage et les modules chargés de façon dynamique.
   <p>L’appel de la méthode <codeph>info()</codeph> est autorisé immédiatement après la distribution de l’événement <codeph>complete</codeph>.</p>
   <p>Un module correctement formé distribue un événement <codeph>ready</codeph>lorsque la méthode <codeph>create()</codeph> peut être appelée.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      Ajoute une bibliothèque RSL dans la liste des preloadedRSL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>Le loaderInfo de la bibliothèque RSL chargée.
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>Les informations de configuration de la bibliothèque RSL. Un vecteur de RSLData. Le premier élément du tableau est la bibliothèque RSL principale. Les éléments restants sont les bibliothèques RSL auxiliaires.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute une bibliothèque RSL dans la liste des preloadedRSL. Cette méthode est appelée par les fabriques de modules enfants lorsqu’elles ajoutent/chargent une bibliothèque RSL dans le domaine d’application de cette fabrique de modules.
           <p>Vous n’appelez pas cette méthode directement. Cette méthode est appelée par les fabriques de modules enfants lorsqu’elles ajoutent/chargent une bibliothèque RSL dans le domaine d’application de cette fabrique de modules.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Appelle la méthode Security.allowDomain() pour le fichier SWF associé à cette fabrique IFlexModuleFactory, plus tous les fichiers SWF associés aux bibliothèques RSL préchargées par cette dernière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>Une ou plusieurs chaînes ou objets URLRequest qui nomment les domaines à partir desquels vous souhaitez autoriser l’accès. Vous pouvez spécifier le domaine spécial « * » pour autoriser l’accès à partir de tous les domaines. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>Security.allowDomain()</codeph> pour le fichier SWF associé à cette fabrique IFlexModuleFactory, plus tous les fichiers SWF associés aux bibliothèques RSL préchargées par cette dernière. Par défaut, les bibliothèques RSL chargées après cet appel autorisent les mêmes domaines qui ont été autorisés par les appels précédents de cette méthode. Ce comportement est contrôlé par la propriété <codeph>allowDomainsInNewRSLs</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Appelle la méthode Security.allowInsecureDomain() pour le fichier SWF associé à cette fabrique IFlexModuleFactory, plus tous les fichiers SWF associés aux bibliothèques RSL préchargées par cette dernière.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>Une ou plusieurs chaînes ou objets URLRequest qui nomment les domaines à partir desquels vous souhaitez autoriser l’accès. Vous pouvez spécifier le domaine spécial « * » pour autoriser l’accès à partir de tous les domaines. 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelle la méthode <codeph>Security.allowInsecureDomain()</codeph> pour le fichier SWF associé à cette fabrique IFlexModuleFactory, plus tous les fichiers SWF associés aux bibliothèques RSL préchargées par cette dernière. Par défaut, les bibliothèques RSL chargées après cet appel autorisent les mêmes domaines qui ont été autorisés par les appels précédents de cette méthode. Ce comportement est contrôlé par la propriété <codeph> allowInsecureDomainsInNewRSLs</codeph>.
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowInsecureDomain()"><linktext>flash.system.Security.allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc>
      Moyen d’appeler une méthode dans le contexte de cet IFlexModuleFactory 
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Quel que soit le renvoi de la fonction. 
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>Fonction ou méthode à appeler.
      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>Pointeur <codeph>this</codeph> de la fonction.
      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>Arguments de la fonction. 
      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Si la valeur est <codeph>true</codeph>, la fonction renvoie une valeur.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Moyen d’appeler une méthode dans le contexte de cet IFlexModuleFactory 
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="Function.apply.xml"><linktext>Function.apply</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:create"><apiName>create</apiName><shortdesc>
      Méthode de fabrique qui demande une occurrence d’une définition connue au module.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence du module, ou valeur <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>parameters</apiItemName><apiType value="restParam"/><apiDesc>Liste facultative d’arguments. Vous pouvez transmettre autant d’arguments que vous voulez. Ils sont ensuite stockés dans un tableau appelé <codeph>parameters</codeph>.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode de fabrique qui demande une occurrence d’une définition connue au module.
           <p>Vous pouvez fournir un jeu facultatif de paramètres pour que les fabriques de construction changent ce qu’elles créent en fonction de la saisie. La transmission de la valeur <codeph>null</codeph> indique que la définition par défaut est créée, si possible.</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:getImplementation"><apiName>getImplementation</apiName><shortdesc>
      Obtenez l’implémentation une interface. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Mise en œuvre pour l’interface.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>Interface.
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtenez l’implémentation une interface. Similaire à la méthode <codeph>Singleton.getInstance()</codeph>, mais pour- IFlexModuleFactory.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:info"><apiName>info</apiName><shortdesc>
      Renvoie un bloc de paires clé/valeur contenant les données statistiques connues par le module.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet contenant des paires clé/valeur. En général, cet objet contient des informations sur le ou les module(s) créé(s) par cette fabrique, par exemple :
     
      <pre>
      return {"description": "This module returns 42."};
      </pre>
      
      L’objet renvoyé comprend également les données communes suivantes :
      <ul>
       <li><codeph>fonts</codeph> : liste de polices incorporées.</li>
       <li><codeph>rsls</codeph> : liste de bibliothèques d’exécution partagées.</li>
       <li><codeph>mixins</codeph> : liste de classes initialisées au démarrage.</li>
      </ul>
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie un bloc de paires clé/valeur contenant les données statistiques connues par le module. Cette méthode réussit toujours, mais peut renvoyer un objet vide.
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:registerImplementation"><apiName>registerImplementation</apiName><shortdesc>
      Enregistrez une implémentation pour une interface. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>Interface.
           </apiDesc></apiParam><apiParam><apiItemName>impl</apiItemName><apiType value="Object"/><apiDesc>Implémentation.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Enregistrez une implémentation pour une interface. Similaire à la méthode <codeph>Singleton.registerClass()</codeph>, mais pour- IFlexModuleFactory et accepte une occurrence, pas une classe 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      Contrôle si les domaines autorisés par les appels à allowDomain() sont également autorisés par les bibliothèques RSL chargées après l’appel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle si les domaines autorisés par les appels à <codeph>allowDomain()</codeph> sont également autorisés par les bibliothèques RSL chargées après l’appel. Les autres bibliothèques RSL peuvent être chargées dans cette fabrique de modules par les sous-applications ou modules.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      Contrôle si les domaines autorisés par les appels à allowInsecureDomain() sont également autorisés par les bibliothèques RSL chargées après l’appel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      Contrôle si les domaines autorisés par les appels à <codeph>allowInsecureDomain()</codeph> sont également autorisés par les bibliothèques RSL chargées après l’appel. Les autres bibliothèques RSL peuvent être ajoutées dans cette fabrique de modules par les sous-applications ou modules.
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      Les bibliothèques RSL chargées par ce SystemManager ou FlexModuleFactory avant le lancement de l’application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      Les bibliothèques RSL chargées par ce SystemManager ou FlexModuleFactory avant le lancement de l’application. Ce dictionnaire peut également inclure des bibliothèques RSL chargées dans le domaine d’application de cette fabrique de modules par d’autres modules ou sous-applications. Lorsqu’une nouvelle entrée de dictionnaire est ajoutée par une fabrique de modules enfant, un événement <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph> est distribué par la fabrique de modules propriétaire du dictionnaire. Les informations sur les preloadedRSL sont stockées dans un dictionnaire. La clé est l’objet LoaderInfo du RSL. La valeur est le vecteur de RSLData où le premier élément est la bibliothèque RSL principale et les éléments restants sont les bibliothèques RSL auxiliaires.
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexGlobals"><apiName>FlexGlobals</apiName><shortdesc>
  Classe contenant des variables globales pour toutes les applications au sein du même domaine ApplicationDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Classe contenant des variables globales pour toutes les applications au sein du même domaine ApplicationDomain.
 
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexGlobals:topLevelApplication"><apiName>topLevelApplication</apiName><shortdesc>
      La première application exécutée dans un domaine ApplicationDomain est l’application de plus haut niveau.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/></apiValueDef><apiDesc>
      La première application exécutée dans un domaine ApplicationDomain est l’application de plus haut niveau. Cette propriété est définie sur une référence à l’application de plus haut niveau dans le constructeur de l’application de plus haut niveau. Chaque domaine ApplicationDomain dispose d’une application <codeph>topLevelApplication</codeph> particulière.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToggleButton"><apiName>IToggleButton</apiName><shortdesc>
  L’interface IToggleButton est une interface de marqueur qui indique qu’un composant agit comme un bouton à bascule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IToggleButton est une interface de marqueur qui indique qu’un composant agit comme un bouton à bascule. Elle est principalement utilisée comme filtre par la logique de bouton par défaut de la structure. Cette interface est <b>uniquement</b> utilisée par les anciens composants MX. 
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
  ComponentDescriptor est la classe de base de UIComponentDescriptor, classe qui encapsule les informations spécifiées dans une balise MXML pour une occurrence d’un composant visuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComponentDescriptor est la classe de base de UIComponentDescriptor, classe qui encapsule les informations spécifiées dans une balise MXML pour une occurrence d’un composant visuel. Dans Flex, les composants non visuels sont traités différemment et sont dépourvus de descripteurs, mais dans une prochaine version ils pourraient également faire l’objet de la classe de base ComponentDescriptor.
 
  <p>La plupart des balises d’un fichier MXML décrivent une arborescence d’objets UIComponent. Par exemple, la balise <codeph>&lt;mx:Application></codeph> représente un objet UIComponent et ses commandes et conteneurs enfant sont tous des objets UIComponent.</p>
 
  <p>Le compilateur MXML compile chacune de ces balises MXML dans une occurrence UIComponentDescriptor. Pour être précis, le compilateur MXML génère automatiquement une structure de données ActionScript qui correspond à une arborescence d’objets UIComponentDescriptor.</p>
 
  <p>Lors de l’exécution, la méthode <codeph>createComponentsFromDescriptors()</codeph> de la classe Container utilise les informations des objets UIComponentDescriptor dans le tableau <codeph>childDescriptors</codeph>du conteneur pour créer les objets UIComponent réels qui sont les enfants du conteneur, ainsi que des descendants plus éloignés. Selon la valeur de la propriété <codeph>creationPolicy</codeph> du conteneur, les descendants peuvent être créés au démarrage de l’application, lorsqu’une partie du composant est sur le point de devenir visible, ou lorsque le développeur de l’application appelle manuellement la méthode <codeph>createComponentsFromDescriptors()</codeph>.</p>
 
  <p>Généralement, il n’est pas nécessaire de créer les occurrences ComponentDescriptor ou UIComponentDescriptor manuellement. Vous pouvez accéder à celles que le compilateur MXML génère automatiquement via le tableau <codeph>childDescriptors</codeph> de la classe Container.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="" invalidHref="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:ComponentDescriptor:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>Objet contenant des paires nom/valeur pour les propriétés de l’objet ComponentDescriptor, telles que <codeph>type</codeph>, <codeph>id</codeph>, <codeph>propertiesFactory</codeph> et <codeph>events</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ComponentDescriptor:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Invalide la propriété properties mise en cache.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Invalide la propriété <codeph>properties</codeph> mise en cache. La prochaine fois que vous lisez la propriété <codeph>properties</codeph>, les propriétés sont régénérées à partir de la fonction spécifiée par la valeur de la propriété <codeph>propertiesFactory</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ComponentDescriptor:toString"><apiName>toString</apiName><shortdesc>
      Renvoie la chaîne « ComponentDescriptor_ » plus la valeur de la propriété id.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Chaîne « ComponentDescriptor_ » plus la valeur de la propriété <codeph>id</codeph>.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Renvoie la chaîne « ComponentDescriptor_ » plus la valeur de la propriété <codeph>id</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ComponentDescriptor:document"><apiName>document</apiName><shortdesc>
      Référence à l’objet de document dans lequel le composant doit être créé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Référence à l’objet de document dans lequel le composant doit être créé.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUIComponent/document"><linktext>mx.core.IUIComponent.document</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:events"><apiName>events</apiName><shortdesc>
      Objet contenant des paires nom/valeur pour les gestionnaires d’événement du composant, tels que spécifiés dans le code MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet contenant des paires nom/valeur pour les gestionnaires d’événement du composant, tels que spécifiés dans le code MXML.
     
      <p>Par exemple, si vous écrivez</p>
     
      <pre>
      &lt;mx:DataGrid id="dg" initialize="fetchData(); initDataGrid();"  change="changeHandler(event);"/>
      </pre>
     
      <p>alors la propriété <codeph>events</codeph> du descripteur est l’objet</p>
     
      <pre>
      { initialize: "__dg_initialize", change: "__dg_change" }
      </pre>
     
      <p>La propriété <codeph>event</codeph> a la valeur <codeph>null</codeph> si aucun gestionnaire d’événements MXML n’est spécifié pour le composant.</p>
     
      <p>Les chaînes <codeph>"__dg_initialize"</codeph> et <codeph>"__dg_change"</codeph> correspondent aux noms des méthodes de gestionnaire d’événement générées automatiquement par le compilateur MXML. Le corps de ces méthodes contient les instructions ActionScript spécifiées en tant que valeurs des attributs d’événement. Par exemple, le gestionnaire d’événement <codeph>initialize</codeph> généré automatiquement est</p>
     
      <pre>
      public function __dg_initialize(event:mx.events.FlexEvent):void
      {
          fetchData();
          initDataGrid();
      }
      </pre>
     
      <p>Ne partez pas du principe que les gestionnaires d’événement générés automatiquement sont toujours spécifiés par leur nom. Cette situation peut évoluer dans une version future de Flex.</p>
      
      <p>Cette propriété est utilisée par la méthode Container <codeph>createComponentsFromDescriptors()</codeph> pour enregistrer les gestionnaires d’événement générés automatiquement à l’aide de la méthode <codeph>addEventListener()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:id"><apiName>id</apiName><shortdesc>
      Identifiant du composant, tel que spécifié dans le code MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Identifiant du composant, tel que spécifié dans le code MXML. 
     
      <p>Par exemple, si vous écrivez</p>
     
      <pre>
      &lt;mx:TextInput id="firstName" text="Enter your first name here"/>
      </pre>
     
      <p>alors la propriété <codeph>id</codeph> du descripteur est la chaîne <codeph>"firstName"</codeph>.</p>
     
      <p>La propriété <codeph>id</codeph> a la valeur <codeph>null</codeph> si aucun identifiant MXML n’est spécifié pour le composant.</p>
     
      <p>La valeur de la propriété <codeph>id</codeph> devient le nom d’une variable publique dans l’objet de document MXML, générée automatiquement par le compilateur MXML. La valeur de cette variable est une référence à l’objet UIComponent créé à partir de ce descripteur. C’est pourquoi vous pouvez, par exemple, faire référence à la propriété <codeph>text</codeph> du contrôle TextInput sous la forme <codeph>firstName.text</codeph> depuis tout emplacement du document contenant cette occurrence TextInput.</p>
     
      <p>Si une propriété <codeph>id</codeph> est spécifiée et différente de la chaîne vide, elle devient également la propriété <codeph>name</codeph> de l’objet DisplayObject. Si la propriété <codeph>id</codeph> n’est pas spécifiée ou vide, la propriété <codeph>name</codeph> de l’objet DisplayObject reste une chaîne générée automatiquement, par exemple <codeph>"Button3"</codeph>, telle que renvoyée par la méthode <codeph>NameUtil.createUniqueName()</codeph>. La propriété <codeph>name</codeph> est utilisée dans la génération de la chaîne renvoyée par la méthode <codeph>toString()</codeph>. Il peut également être utilisé pour trouver le composant à partir de son parent en appelant la méthode <codeph>getChildByName()</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:propertiesFactory"><apiName>propertiesFactory</apiName><shortdesc>
      Fonction qui renvoie un objet contenant des paires nom/valeur pour les propriétés du composant, telles que spécifiées dans le code MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction qui renvoie un objet contenant des paires nom/valeur pour les propriétés du composant, telles que spécifiées dans le code MXML.
     
      <p>Par exemple, si vous écrivez</p>
      
      <pre>
      &lt;mx:TextInput width="150" text="Hello">
      </pre>
     
      <p>alors la propriété <codeph>propertiesFactory</codeph> du descripteur est la fonction :</p>
     
      <pre>
      function():Object { return { width: 150, text: "Hello" }; }
      </pre>
     
      <p>La propriété <codeph>propertiesFactory</codeph> a la valeur <codeph>null</codeph> si aucune propriété MXML n’est spécifiée pour le composant. Dans ce cas, le composant utilise les valeurs par défaut des propriétés. </p>
     
      <p>La raison pour laquelle <codeph>propertyFactory</codeph> est une fonction renvoyant un objet plutôt qu’un objet réel est de permettre un « développement » par incréments de l’arborescence des objets ComponentDescriptor. Si tous les descripteurs de l’arborescence de descripteurs du document étaient créés au lancement, le temps de démarrage serait plus important.</p>
     
      <p>La propriété <codeph>properties</codeph> renvoie un objet mis en cache produit par cette fonction de fabrique.</p>
      
      <p>Remarque : les gestionnaires d’événements tels que <codeph>click="doSomething();"</codeph> apparaissent dans l’objet <codeph>events</codeph> et non dans l’objet <codeph>properties</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/properties"><linktext>propriétés</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:type"><apiName>type</apiName><shortdesc>
      Classe du composant, telle que spécifiée dans le code MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Classe du composant, telle que spécifiée dans le code MXML.
     
      <p>Par exemple, si vous écrivez</p>
     
      <pre>
      &lt;mx:TextInput/>
      </pre>
     
      <p>alors la propriété <codeph>type</codeph> du descripteur est la classe mx.controls.TextInput.</p>
     
      <p>La propriété n’a jamais la valeur <codeph>null</codeph> pour les objets ComponentDescriptor créés par le compilateur MXML, car chaque balise MXML a un nom de balise tel que mx:TextInput.</p>
     
      <p>La correspondance entre une balise MXML et sa classe correspondante est déterminée par l’espace de nom XML et le fichier « manifeste » (s’il existe) associé à cet espace de nom. Par exemple, l’espace de nom Flex standard <codeph>http://www.adobe.com/2006/mxml</codeph> représentée par le préfixe mx: est associé (dans le fichier flex-config.xml) avec le fichier manifeste mxml-manifest.xml. Ce fichier comporte la balise</p>
     
      <pre>
      &lt;component id="TextInput" class="mx.controls.TextInput"/>
      </pre>
     
      <p>qui fait correspondre le nom de la balise mx:TextInput à la classe mx.controls.TextInput. Notez que l’utilisation d’un fichier manifeste permet aux composants d’un même espace de noms XML d’établir la correspondance à des classes de plusieurs packages ActionScript.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:properties:get"><apiName>properties</apiName><shortdesc>
      Objet contenant des paires nom/valeur pour les propriétés du composant, telles que spécifiées dans le code MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet contenant des paires nom/valeur pour les propriétés du composant, telles que spécifiées dans le code MXML.
     
      <p>Par exemple, si vous écrivez</p>
     
      <pre>
      &lt;mx:TextInput width="150" text="Hello"/>
      </pre>
     
      <p>alors la propriété <codeph>properties</codeph> du descripteur est l’objet</p>
     
      <pre>
      { width: 150, text: "Hello" }
      </pre>
     
      <p>La propriété <codeph>properties</codeph> a la valeur <codeph>null</codeph> si aucune propriété MXML n’est spécifiée pour le composant. Dans ce cas, le composant utilise les valeurs par défaut des propriétés. </p>
     
      <p> Cet objet est créé par l’appel de la fonction spécifiée par la propriété <codeph>propertiesFactory</codeph>, puis mis en cache pour les accès ultérieurs. Toutefois, si un objet Repeater produit plusieurs occurrences d’un composant à partir du même descripteur, une nouvelle copie de l’objet <codeph>properties</codeph> doit être créée pour chaque occurrence de composant. Ainsi, les occurrences ne partagent pas des valeurs de propriétés correspondant à des tableaux ou des références d’objet. Pour ce faire, l’objet Repeater appelle la méthode <codeph>invalidateProperties()</codeph> sur le descripteur.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/propertiesFactory"><linktext>propertiesFactory</linktext></link><link href="mx.core.xml#ComponentDescriptor/invalidateProperties()"><linktext>invalidateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>