<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:IButton"><apiName>IButton</apiName><shortdesc>
  IButton 接口是一个标记接口，指示组件用作按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IButton 接口是一个标记接口，指示组件用作按钮。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IButton:mx.core:IButton:callLater"><apiName>callLater</apiName><shortdesc conref="mx.core.UIComponent#callLater()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>对稍后执行的方法的引用。
           </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>对象 Array，给出要传递给此方法的参数。
           
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#callLater()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IButton:mx.core:IButton:emphasized:get"><apiName>emphasized</apiName><shortdesc conref="mx.controls.Button#emphasized">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Button#emphasized">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFLoader"><apiName>ISWFLoader</apiName><shortdesc>
  ISWFLoader 接口定义一个 API，它含有加载兼容应用程序和不受信任的应用程序时所需的特殊属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeProvider</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISWFLoader 接口定义一个 API，它含有加载兼容应用程序和不受信任的应用程序时所需的特殊属性和方法。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFLoader:mx.core:ISWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      获取所加载的应用程序在屏幕上对用户可见的范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包括此对象可见部分的 <codeph>Rectangle</codeph>。该矩形使用全局坐标。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定计算该可见矩形时仅依据此应用程序中的显示对象还是同时依据所有父应用程序中的显示对象。包含更多父应用程序可能会减少所返回的可见区域。如果为 <codeph>true</codeph>，则所有应用程序都用于查找可见区域，否则，仅使用此应用程序中的显示对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取所加载的应用程序在屏幕上对用户可见的范围。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFLoader:mx.core:ISWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      一个标志，指示是否加载内容，以使其可以与用 Flex 的其他版本构建的应用程序进行互操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否加载内容，以使其可以与用 Flex 的其他版本构建的应用程序进行互操作。通过将应用程序加载到同级（即对等）ApplicationDomain 中，从而实现与其他 Flex 应用程序的兼容。如果将子应用程序加载到与主应用程序不同的 SecurityDomain 中，则忽略此标志。如果为 <codeph>true</codeph>，则内容加载到同级 ApplicationDomain 中。如果为 <codeph>false</codeph>，则内容加载到子级 ApplicationDomain 中。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
  UITextFormat 类给出 UITextField 类的字符格式设置信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextFormat</apiBaseClassifier></apiClassifierDef><apiDesc>
  UITextFormat 类给出 UITextField 类的字符格式设置信息。UITextField 类定义由许多 Flex 组合组件用来显示文本的组件。
 
  <p>UITextFormat 类扩展 flash.text.TextFormat 类以添加文本测量方法 <codeph>measureText()</codeph> 和 <codeph>measureHTMLText()</codeph>，并添加控制字体的高级消除锯齿功能的属性。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UITextField"><linktext>mx.core.UITextField</linktext></link></related-links><apiConstructor id="mx.core:UITextFormat:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>SystemManager 对象。SystemManager 跟踪嵌入的字体。通常，这是从 UIComponent 的 <codeph>systemManager</codeph> 属性中获得的 SystemManager。
     
      </apiDesc></apiParam><apiParam><apiItemName>font</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定字体名称的 String；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定字体大小（以像素为单位）的 Number；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定文本 RGB 颜色的无符号整数（如 0xFF0000 为红色）；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定文本是否使用粗体的布尔值标志；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定文本是否使用斜体的布尔值标志；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定文本是否使用下划线的布尔值标志；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定文本超链接到的 URL 的 String；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定显示超链接 URL 的目标窗口的 String。如果目标窗口为 <codeph>null</codeph> 或空字符串，则超链接页面显示在同一浏览器窗口中。如果 <codeph>urlString</codeph> 参数为 <codeph>null</codeph> 或空字符串，则此属性不发挥作用。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定段落对齐方式的 String（使用 flash.text.TextFormatAlign 值表示）；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定段落左边距（以像素为单位）的 Number；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定段落右边距（以像素为单位）的 Number；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定从左边距到段落中第一个字符的缩进（以像素为单位）的 Number；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定行与行之间的其他垂直间距量的 Number；或 <codeph>null</codeph> 以指示此 UITextFormat 不指定此属性。此参数是可选的，默认值为 <codeph>null</codeph>。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.TextFormatAlign.xml"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:UITextFormat:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      返回指定 HTML 文本的测量信息，该文本可能包含 HTML 标签（如 &amp;lt;font&amp;gt; 和 &amp;lt;b&amp;gt;），假设该文本显示在单行 UITextField 中并使用此 UITextFormat 对象定义文本格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含文本度量值的 TextLineMetrics 对象。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>指定要测量的 HTML 文本的 String。
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否将测量宽度和高度向上舍入为最接近的整数的布尔值标志。向上舍入适用于大多数情况。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定 HTML 文本的测量信息，该文本可能包含 HTML 标签（如 <codeph>&lt;font></codeph> 和 <codeph>&lt;b></codeph>），假设该文本显示在单行 UITextField 中并使用此 UITextFormat 对象定义文本格式。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextFormat:measureText"><apiName>measureText</apiName><shortdesc>
      返回指定文本的测量信息，假设文本显示在单行 UITextField 组件中并使用此 UITextFormat 对象定义文本格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含文本度量值的 TextLineMetrics 对象。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>指定要测量的文本的 String。
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否将测量宽度和高度向上舍入为最接近的整数的布尔值标志。向上舍入适用于大多数情况。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定文本的测量信息，假设文本显示在单行 UITextField 组件中并使用此 UITextFormat 对象定义文本格式。 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.core:UITextFormat:antiAliasType"><apiName>antiAliasType</apiName><shortdesc>
      定义 UITextField 类的消除锯齿设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"advanced"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 UITextField 类的消除锯齿设置。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
      
      <p>默认值为 <codeph>"advanced"</codeph>，该值将对嵌入字体启用高级消除锯齿功能。将此属性设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
      
      <p>此属性对系统字体不起作用。</p>
      
      <p>此属性应用于 UITextField 对象中的所有文本；但不能将其应用于部分字符以及其他对象中的文本。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:direction"><apiName>direction</apiName><shortdesc>
      文本的方向性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      文本的方向性。
     
      <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
     
      <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
     
      <p>注意：此样式只应用于当该 UITextFormat 与 UIFTETextField（而非 UITextField）一起使用时。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:gridFitType"><apiName>gridFitType</apiName><shortdesc>
      定义 UITextField 类的网格固定设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"pixel"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 UITextField 类的网格固定设置。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
      
      <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
      
      <p>此属性对系统字体不起作用。</p>
     
      <p>此属性应用于 UITextField 对象中的所有文本；但不能将其应用于部分字符以及其他对象中的文本。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:locale"><apiName>locale</apiName><shortdesc>
      文本的区域设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      文本的区域设置。
     
      <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
     
      <p>注意：此样式只应用于当该 UITextFormat 与 UIFTETextField（而非 UITextField）一起使用时。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:sharpness"><apiName>sharpness</apiName><shortdesc>
      定义 UITextField 类的清晰度设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 UITextField 类的清晰度设置。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
      
      <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
      
      <p>此属性对系统字体不起作用。</p>
     
      <p>此属性应用于 UITextField 对象中的所有文本；但不能将其应用于部分字符以及其他对象中的文本。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:thickness"><apiName>thickness</apiName><shortdesc>
      定义 UITextField 类的粗细设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 UITextField 类的粗细设置。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
      
      <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
      
      <p>此属性对系统字体不起作用。</p>
     
      <p>此属性应用于 UITextField 对象中的所有文本；但不能将其应用于部分字符以及其他对象中的文本。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:useFTE"><apiName>useFTE</apiName><shortdesc>
      确定 measureText() 和 measureHTMLText() 方法如何进行文本测量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定 <codeph>measureText()</codeph> 和 <codeph>measureHTMLText()</codeph> 方法如何进行文本测量。
     
      <p>如果为 <codeph>true</codeph>，则这些方法使用 Text Layout Framework 中的 FTETextField 类的屏幕外实例。如果为 <codeph>false</codeph>，则这些方法使用 Flash Player 中的 TextField 类的屏幕外实例。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      用于创建嵌入字体的 TextField 的 moduleFactory。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      用于创建嵌入字体的 TextField 的 moduleFactory。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstance"><apiName>IDeferredInstance</apiName><shortdesc>
  IDeferredInstance 接口定义 Flex 延迟实例工厂接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDeferredInstance 接口定义 Flex 延迟实例工厂接口。实现 IDeferredInstance 会在首次调用 <codeph>getInstance()</codeph> 方法时创建一个特定实例值，并在随后调用 <codeph>getInstance()</codeph> 方法时返回对该值的引用。
 
  <p>当 Flex 编译器遇到为 IDeferredInstance 类型的属性分配值的 MXML 时，将执行以下自动强制操作：</p>
 
  <ol>
      <li>如果为 IDeferredInstance 类型的属性分配的值是代表类的 MXML 子标签（如组件标签），则编译器将创建 IDeferredInstance 实现，该实现的 <codeph>getInstance()</codeph> 方法返回类的一个实例，该实例按 MXML 代码中指定的内容进行配置。下例显示了这种格式；在本示例中，MyComp 是自定义组件，包含 IDeferredInstance 类型的名为 myDeferredInstanceProperty 的变量。编译器生成 IDeferredInstance1 实现，其 <codeph>getInstance()</codeph> 方法返回 Label 类的实例，其文本属性设置为“This is a deferred label”：
          <pre>
          &lt;MyComp>
              &lt;myDeferredInstanceProperty>
                  &lt;Label text="This is a deferred label"/>
              &lt;/myDeferredInstanceProperty>
          &lt;/MyComp></pre>
      </li>
      <li>如果为 IDeferredInstance 类型的属性非配的是文本字符串，则编译器会将字符串解释为完全限定的类名称，并创建 IDeferredInstance 实现，其 <codeph>getInstance()</codeph> 方法返回指定类的新实例。指定的类必须拥有不含参数的构造函数。下例显示了这种格式；在本示例中，编译器生成 IDeferredInstance1 实现，其 <codeph>getInstance()</codeph> 方法返回 MyClass 类的实例：
          <pre>
          &lt;MyComp myDeferredInstanceProperty="myPackage.MyClass/></pre>
      </li>
  </ol>
 
  <p>当 ActionScript 类延迟属性值的实例化时，使用 IDeferredInstance 接口。如果 ActionScript 类需要使用同一值的多个实例，则无法使用 IDeferredInstance。对于那些情况，请改用 IFactory 接口。</p>
  
  <p>states.AddChild 类包含 IDeferredInstance 类型的 <codeph>childFactory</codeph> 属性。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddChild"><linktext>mx.states.AddChild</linktext></link></related-links><apiOperation id="mx.core:IDeferredInstance:mx.core:IDeferredInstance:getInstance"><apiName>getInstance</apiName><shortdesc>
      如果不存在实例，则基于类或函数创建实例 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>实例 Object。
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      如果不存在实例，则基于类或函数创建实例 Object。
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
  SpriteAsset 是 flash.display.Sprite 类的子类，表示嵌入在应用程序中的矢量图形图像。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpriteAsset 是 flash.display.Sprite 类的子类，表示嵌入在应用程序中的矢量图形图像。该子类实现了 IFlexDisplayObject 接口，此接口使嵌入的矢量图形图像可以显示在 Image 控件中，或用作容器背景或组件外观。
 
  <p>您可以嵌入位于 SVG 文件中的矢量图形图像。还可以嵌入由 Flash 生成的 SWF 文件中的 sprite 元件。在这两种情况下，MXML 编译器自动生成了一个类，该类扩展 SpriteAsset 以呈示嵌入的矢量图形图像。</p>
 
  <p>编写 Flex 应用程序时，通常无需直接使用 SpriteAsset 类。例如，您可以通过编写以下内容嵌入 SWF 文件中的 sprite 元件并将其显示在 Image 控件中：</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Assets.swf', symbol='Logo')"/></pre>
 
  <p>或者，通过编写以下内容使用 CSS 语法将其用作应用程序的背景图像：</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol='Logo')
      }
  &lt;fx:Style/></pre>
 
  <p>而不必了解 MXML 编译器已为您创建了 BitmapAsset 的一个子类。</p>
 
  <p>不过，了解在 ActionScript 级别发生的操作可能会有用。要在 ActionScript 中嵌入矢量图形图像，需要声明类型为 Class 的变量，并对其应用 <codeph>[Embed]</codeph> 元数据。例如，可以通过以下方式嵌入 SWF 文件中的 sprite 元件：</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="Logo")]
  private var logoClass:Class;</pre>
 
  <p>MXML 编译器会发现 Assets.swf 中的 Logo 元件是一个 sprite，自动生成 SpriteAsset 类的子类来表示该 sprite，并将变量设置为引用此自动生成的类。然后，您可以使用此类引用通过 <codeph>new</codeph> 运算符创建 SpriteAsset 的实例，还可以对其使用 Sprite 类的 API：</p>
 
  <pre>
  var logo:SpriteAsset = SpriteAsset(new logoClass());
  logo.rotation=45;</pre>
 
  <p>但是，您很少需要自己创建 SpriteAsset 实例，因为 image-related 属性和样式可以直接设置为 image-producing 类，且组件会根据需要创建图像实例。例如，要在 Image 控件中显示此矢量图形图像，可以将 Image 的 <codeph>source</codeph> 属性设置为 <codeph>logoClass</codeph>。在 MXML 中，您可以按照以下方法执行此操作：</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SpriteAsset:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SpriteAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。如果它们不同，该方法负责镜像元素的内容以及更新元素的布局后转换，以便子代继承镜像的坐标系。IVisualElement 通常通过以下方法实现镜像：使用 postLayoutTransformOffsets 按 -1 缩放 X 轴以及按元素宽度平移原点的 x 坐标。此“镜像”转换的净效果是反转 X 轴增加的方向，而不更改元素相对于其父代的原点的位置。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:move"><apiName>move</apiName><shortdesc>
      
	  将此对象移动到指定的 x 和 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此对象的新 x 位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此对象的新 y 位置。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  将此对象移动到指定的 x 和 y 坐标。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  设置此对象的实际大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>此对象的新宽度。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>此对象的新高度。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  设置此对象的实际大小。
	 
	  <p>此方法主要用于实现 <codeph>updateDisplayList()</codeph> 方法。在此期间，您可以根据其显式大小、相对于父项的（百分比）大小以及度量大小计算此对象的实际大小。然后，通过调用 <codeph>setActualSize()</codeph> 将此实际大小应用于对象。</p>
	 
	  <p>在其他情况下，您应该设置 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph> 或 <codeph>percentHeight</codeph> 属性，而非调用此方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SpriteAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      为具有四个属性（left、top、right 和 bottom）的边框返回 EdgeMetrics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      为具有四个属性（<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>）的边框返回 EdgeMetrics 对象。每个属性值等于边框其中一条边的粗细（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          指定元素的所需布局方向：LayoutDirection.LTR（从左到右）、LayoutDirection.RTL（从右到左）或 null（继承）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          指定元素的所需布局方向：LayoutDirection.LTR（从左到右）、LayoutDirection.RTL（从右到左）或 null（继承）。此属性通常按继承样式回退。如果指定 null，则 layoutDirection 样式将设置为 undefined。类似 GraphicElement 的类（实现 ILayoutDirectionElement，但不支持样式）必须另外针对此属性支持 null 值，这意味着 layoutDirection 必须从其父代继承。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  此对象的测量高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量高度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  此对象的测量宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量宽度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
  EdgeMetrics 类可指定可视组件周围四个边缘区域的粗细（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  EdgeMetrics 类可指定可视组件周围四个边缘区域的粗细（以像素为单位）。
 
  <p>下列 Flex 属性的值是 EdgeMetrics 对象：</p>
 
  <ul>
  <li>mx.core.Container 和 mx.skins.Border 类的 <codeph>borderMetrics</codeph> 属性在计算 EdgeMetrics 对象的属性值时仅考虑边框。</li>
 
  <li>mx.core.Container 类以及 Container 类的子类的 <codeph>viewMetrics</codeph> 属性在计算 EdgeMetrics 对象的属性值时需要考虑可能出现的滚动条和非内容元素，例如 Panel 容器的标题区域以及 ControlBar 组件区域。</li>
 
  <li>mx.core.Container 类的 <codeph>viewMetricsAndPadding</codeph> 属性包括已为 <codeph>viewMetrics</codeph> 属性列出的项目，以及计算 EdgeMetrics 对象的属性值时由容器边距定义的所有区域。</li>
  </ul>
 
  <p>这三个属性均返回对同一 EdgeMetrics 对象的引用，Container 正使用该对象进行测量和布局；这些属性不返回此对象的副本。如果需要副本，请调用 <codeph>clone()</codeph> 方法。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="mx.skins.xml#Border"><linktext>mx.skins.Border</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.core:EdgeMetrics:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>左边缘区域的宽度（以像素为单位）。
     
      </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>上边缘区域的高度（以像素为单位）。
     
      </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>右边缘区域的宽度（以像素为单位）。
     
      </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>下边缘区域的高度（以像素为单位）。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:EdgeMetrics:clone"><apiName>clone</apiName><shortdesc>
      返回此 EdgeMetrics 对象的副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此 EdgeMetrics 对象的副本。
      
      </apiDesc><apiOperationClassifier>mx.core:EdgeMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      返回此 EdgeMetrics 对象的副本。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:EdgeMetrics:EMPTY"><apiName>EMPTY</apiName><shortdesc>
      left、top、right 和 bottom 属性值均为零的 EdgeMetrics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph> 属性值均为零的 EdgeMetrics 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:bottom"><apiName>bottom</apiName><shortdesc>
      下边缘区域的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      下边缘区域的高度（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:left"><apiName>left</apiName><shortdesc>
      左边缘区域的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      左边缘区域的宽度（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:right"><apiName>right</apiName><shortdesc>
      右边缘区域的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      右边缘区域的宽度（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:top"><apiName>top</apiName><shortdesc>
      上边缘区域的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      上边缘区域的高度（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeater"><apiName>IRepeater</apiName><shortdesc>
  IRepeater 接口定义 Repeater 对象的公共 API。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRepeater 接口定义 Repeater 对象的公共 API。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      对此 Repeater 创建的所有 UIComponent 执行绑定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      对此 Repeater 创建的所有 UIComponent 执行绑定。
     
      <p>此方法由 Flex 框架调用。开发人员不应调用它。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
      初始化新的 Repeater 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>包含此 Repeater 的容器，此 Repeater 将在该容器中创建其子项。
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>布尔值标志，指示此 Repeater 是否应创建其子项的所有后代的。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      初始化新的 Repeater 对象。
     
      <p>此方法由 Flex 框架调用。开发人员不应调用它。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeater:mx.core:IRepeater:container:get"><apiName>container</apiName><shortdesc>
      包含此 Repeater 的容器，此 Repeater 将在该容器中创建其子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      包含此 Repeater 的容器，此 Repeater 将在该容器中创建其子项。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:count:get"><apiName>count</apiName><shortdesc>
      此 Repeater 应执行的次数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      此 Repeater 应执行的次数。
     
      <p>如果 Repeater 执行时到达数据提供程序的末尾，则它实际执行的次数将少于所要求的次数。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
      Repeater 执行时，当前正在处理的 dataProvider 中项目的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Repeater 执行时，当前正在处理的 <codeph>dataProvider</codeph> 中项目的索引。
     
      <p>Repeater 完成执行后，此属性为 <codeph>-1</codeph>。不过，重复组件实例的 <codeph>repeaterIndex</codeph> 属性会记住作为其创建基础的 <codeph>dataProvider</codeph> 项目的索引。如果是嵌套的 Repeater，您可以使用 <codeph>repeaterIndices</codeph> 数组。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/repeaterIndex"><linktext>mx.core.UIComponent.repeaterIndex</linktext></link><link href="mx.core.xml#UIComponent/repeaterIndices"><linktext>mx.core.UIComponent.repeaterIndices</linktext></link><link href="mx.core.xml#UIComponent/instanceIndex"><linktext>mx.core.UIComponent.instanceIndex</linktext></link><link href="mx.core.xml#UIComponent/instanceIndices"><linktext>mx.core.UIComponent.instanceIndices</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
      此 Repeater 执行时，当前正在处理的 dataProvider 中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      此 Repeater 执行时，当前正在处理的 <codeph>dataProvider</codeph> 中的项目。
     
      <p>Repeater 完成执行后，此属性为 <codeph>null</codeph>。不过，在这种情况下，您可以调用重复组件实例的 <codeph>getRepeaterItem()</codeph> 方法以获取作为该组件实例创建基础的 <codeph>dataProvider</codeph> 项目。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/getRepeaterItem()"><linktext>mx.core.UIComponent.getRepeaterItem()</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      此 Repeater 创建其子项的重复实例时使用的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此 Repeater 创建其子项的重复实例时使用的数据提供程序。
      
      <p>如果读取 <codeph>dataProvider</codeph> 属性，将始终获得 ICollectionView 对象或 <codeph>null</codeph>。如果您将 <codeph>dataProvider</codeph> 属性设置为 <codeph>null</codeph> 之外的任何值，则将根据以下规则转换为 ICollectionView 对象：</p>
     
      <ul>
        <li>如果设置为 Array，则转换为 ArrayCollection。</li>
        <li>如果设置为 ICollectionView，则不执行任何转换。</li>
        <li>如果设置为 IList，则转换为 ListCollectionView。</li>
        <li>如果设置为 XML 或 XMLList，则转换为 XMLListCollection。</li>
        <li>在其他情况下，转换为单一元素 ArrayCollection。</li>
      </ul>
     
      <p>必须为 <codeph>dataProvider</codeph> 属性指定值，否则 Repeater 组件不会执行。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
      布尔值标志，指示此 Repeater 是重用以前创建的子项还是创建新子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      布尔值标志，指示此 Repeater 是重用以前创建的子项还是创建新子项。
     
      <p>如果为 <codeph>true</codeph>，则当此 Repeater 的 <codeph>dataProvider</codeph>、<codeph>startingIndex</codeph> 或 <codeph>count</codeph> 更改时，它会通过将新数据绑定到现有子项循环使用现有子项。如果需要增加子项，则不断创建和添加子项。如果需要减少子项，则删除多余子项并将其作为垃圾回收。</p>
     
      <p>如果为 <codeph>false</codeph>，则当此 Repeater 的 <codeph>dataProvider</codeph>、<codeph>startingIndex</codeph> 或 <codeph>count</codeph> 更改时，它将删除以前创建的所有子项，并基于新的数据项创建和添加新子项。</p>
     
      <p>默认情况下，此属性为 <codeph>false</codeph>。将其设置为 <codeph>true</codeph> 可提高性能，但并不适用于所有情况。例如，如果以前创建的子项包含状态信息，如用户键入的文本，则循环使用子项时不会重置此状态。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
      dataProvider 中的索引，此 Repeater 从此索引位置开始创建子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> 中的索引，此 Repeater 从此索引位置开始创建子项。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:LayoutDirection"><apiName>LayoutDirection</apiName><shortdesc>
      LayoutDirection 类定义 IStyleClient 的 layoutDirection 样式和 ILayoutDirectionElement 的 layoutDirection 属性的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      LayoutDirection 类定义 IStyleClient 的 <codeph>layoutDirection</codeph> 样式和 ILayoutDirectionElement 的 <codeph>layoutDirection</codeph> 属性的常量值。对于拉丁样式脚本，通常采用从左到右的 layoutDirection。对于阿拉伯语或希伯来语等脚本，则采用从右到左的 layoutDirection。如果为 IStyleClient，将 layoutDirection 样式设置为 undefined 以从其祖代继承 layoutDirection。如果为 ILayoutDirectionElement，将 layoutDirection 属性设置为 null 以从其祖代继承 layoutDirection。
     
      </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#IStyleClient"><linktext>mx.styles.IStyleClient</linktext></link><link href="mx.core.xml#ILayoutDirectionElement"><linktext>mx.core.ILayoutDirectionElement</linktext></link></related-links><apiValue id="mx.core:LayoutDirection:LTR"><apiName>LTR</apiName><shortdesc>
          对于样式客户端或可视元素，指定从左到右的布局方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc>
          对于样式客户端或可视元素，指定从左到右的布局方向。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutDirection:RTL"><apiName>RTL</apiName><shortdesc>
          对于样式客户端或可视元素，指定从右到左的布局方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc>
          对于样式客户端或可视元素，指定从右到左的布局方向。
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRectangularBorder"><apiName>IRectangularBorder</apiName><shortdesc>
  IRectangularBorder 接口定义用于矩形边框外观的所有类应该实现的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRectangularBorder 接口定义用于矩形边框外观的所有类应该实现的接口。
 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:layoutBackgroundImage"><apiName>layoutBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:backgroundImageBounds:get"><apiName>backgroundImageBounds</apiName><shortdesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:hasBackgroundImage:get"><apiName>hasBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
  MXMLObjectAdapter 类是 IMXMLObject 接口的一个存根实现，这样您可以实现该接口，而不必定义所有这些方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  MXMLObjectAdapter 类是 IMXMLObject 接口的一个存根实现，这样您可以实现该接口，而不必定义所有这些方法。所有实现都是非操作指令的等效实现。如果假定该方法会返回某个值，则该值为 null、0 或 false。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MXMLObjectAdapter:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MXMLObjectAdapter:initialized"><apiName>initialized</apiName><shortdesc>
      
      创建实现对象且初始化在 MXML 标签上指定的所有组件属性后调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>创建此对象的 MXML 文档。
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc><codeph>document</codeph> 用来引用此对象的标识符。如果此对象是 <codeph>document</codeph> 上的深层属性，则 <codeph>id</codeph> 为 null。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      创建实现对象且初始化在 MXML 标签上指定的所有组件属性后调用。
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IFlexModule"><apiName>IFlexModule</apiName><shortdesc>
  IFlexModule 接口用作与 IFlexModuleFactory 的可选约定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexModule 接口用作与 IFlexModuleFactory 的可选约定。通过 IFlexModuleFactory 创建 IFlexModule 实例后，工厂将在创建后存储对自身的引用。
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
      DesignLayer 类表示一个可视性组，可以在运行时与一个或多个 IVisualElement 实例关联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      DesignLayer 类表示一个可视性组，可以在运行时与一个或多个 IVisualElement 实例关联。DesignLayer 实例支持 <codeph>visible</codeph> 和 alpha 属性，设置该属性时将会传播给关联层的子项。
     
      </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:DesignLayer_mx.events.PropertyChangeEvent_layerPropertyChange"><apiName>layerPropertyChange</apiName><shortdesc>
      当 effectiveVisibility 或 effectiveAlpha 改变时，由该层分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.PropertyChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      当 <codeph>effectiveVisibility</codeph> 或 <codeph>effectiveAlpha</codeph> 改变时，由该层分派。
      
      </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:DesignLayer:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
          构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          构造函数。
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DesignLayer:addLayer"><apiName>addLayer</apiName><shortdesc>
          为该层添加一个 DesignLayer 子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>要添加的子层。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          为该层添加一个 DesignLayer 子项。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:getLayerAt"><apiName>getLayerAt</apiName><shortdesc>
          返回位于指定索引的 DesignLayer 子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定的 DesignLayer 子项（如果索引在 0 和 <codeph>numLayers</codeph> - 1 之间）。如果索引无效，则返回 <codeph>null</codeph>。
         
          </apiDesc><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>DesignLayer 子项的、从 0 开始的索引。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          返回位于指定索引的 DesignLayer 子对象。
         
          <p>请注意，DesignLayer 子项的顺序并不重要。<codeph>getLayerAt</codeph> 方法打算与 numLayers 一起使用来对子项列表进行迭代。</p> 
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.numLayers.xml"><linktext>numLayers</linktext></link></related-links></apiOperation><apiOperation id="mx.core:DesignLayer:initialized"><apiName>initialized</apiName><shortdesc>
          
      创建实现对象且初始化在 MXML 标签上指定的所有组件属性后调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>创建此对象的 MXML 文档。
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc><codeph>document</codeph> 用来引用此对象的标识符。如果此对象是 <codeph>document</codeph> 上的深层属性，则 <codeph>id</codeph> 为 null。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      创建实现对象且初始化在 MXML 标签上指定的所有组件属性后调用。
	 
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:removeLayer"><apiName>removeLayer</apiName><shortdesc>
          从该层删除 DesignLayer 子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>要删除的子层。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          从该层删除 DesignLayer 子项。
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DesignLayer:alpha:get"><apiName>alpha</apiName><shortdesc>
          此设计层实例的 Alpha 值，介于 0.0 到 1.0 之间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          此设计层实例的 Alpha 值，介于 0.0 到 1.0 之间。
         
          <p>当更新时，用于 <codeph>effectiveAlpha</codeph> 的合适的更改事件将会被分派给该层中所有的 <codeph>layerPropertyChange</codeph> 侦听器，以及所有受影响的后代层（如果有的话）的侦听器。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveAlpha:get"><apiName>effectiveAlpha</apiName><shortdesc>
          返回此设计层的有效 Alpha 值（介于 0.0 到 1.0 之间）的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          返回此设计层的有效 Alpha 值（介于 0.0 到 1.0 之间）的属性。此属性值为此层的 Alpha 乘以任何始祖层的 Alpha。  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveVisibility:get"><apiName>effectiveVisibility</apiName><shortdesc>
          返回此设计层的有效可见性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          返回此设计层的有效可见性。此属性值将考虑该层和任何始祖层的可见性。  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:id:get"><apiName>id</apiName><shortdesc>
          层组件的 ID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          层组件的 ID。该值会成为层的实例名称，不应包含任何空格或特殊字符。 
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:numLayers:get"><apiName>numLayers</apiName><shortdesc>
          直接以该层为父层的 DesignLayer 子项的个数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          直接以该层为父层的 DesignLayer 子项的个数。
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:parent:get"><apiName>parent</apiName><shortdesc>
          该层的父层。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          该层的父层。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:visible:get"><apiName>visible</apiName><shortdesc>
          该设计层实例的可见性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          该设计层实例的可见性。
         
          <p>当更新时，用于 <codeph>effectiveVisibility</codeph> 的合适的更改事件将会被分派给该层中所有的 <codeph>layerPropertyChange</codeph> 侦听器，以及所有受影响的后代层（如果有的话）的侦听器。</p>
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexAsset"><apiName>IFlexAsset</apiName><shortdesc>
  IFlexAsset 是一个标记接口，意义如下：如果某个类声明它实现了 IFlexAsset，则该类就显示一个已嵌入到 Flex 应用程序中的资源，例如位图、字体或声音。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexAsset 是一个标记接口，意义如下：如果某个类声明它实现了 IFlexAsset，则该类就显示一个已嵌入到 Flex 应用程序中的资源，例如位图、字体或声音。此接口不定义该类必须实际实现的任何属性或方法。
 
  <p>播放器使用 ActionScript 类来显示嵌入资源和可执行的 ActionScript 代码。当您在 Flex 应用程序中嵌入资源时，MXML 编译器会自动生成一个类来显该资源，所有这些类都会声明它们实现 IFlexAsset，因而能够与代码类区分开来。</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IBorder"><apiName>IBorder</apiName><shortdesc>
  IBorder 接口定义用于边框外观的所有类应实现的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IBorder 接口定义用于边框外观的所有类应实现的接口。
 
  <p>如果边框外观未实现 IBorder，并不是错误。但是，在这种情况下，使用该外观的容器无法确定边框的边框度量信息。因此，容器从左上边缘开始放置内容（如果存在填充，则针对填充进行调整）。对于 HaloBorder 类，<codeph>borderThickness</codeph> 样式通常确定 <codeph>borderMetrics</codeph> 样式的值。对于图形外观类，Flex 检查 <codeph>scale9Grid</codeph> 属性以确定 <codeph>borderMetrics</codeph> 样式的值。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IBorder:mx.core:IBorder:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      为具有四个属性（left、top、right 和 bottom）的边框返回 EdgeMetrics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      为具有四个属性（<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>）的边框返回 EdgeMetrics 对象。每个属性值等于边框其中一条边的粗细（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IAssetLayoutFeatures"><apiName>IAssetLayoutFeatures</apiName><shortdesc>
  IAssetLayoutFeatures 接口定义对象在嵌入资源中支持高级转换时需要的最低限度属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IAssetLayoutFeatures 接口定义对象在嵌入资源中支持高级转换时需要的最低限度属性和方法。
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.AdvancedLayoutFeatures.xml"><linktext>mx.core.AdvancedLayoutFeatures</linktext></link></related-links><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix3D:get"><apiName>computedMatrix3D</apiName><shortdesc>
      计算的 3D 矩阵，通过结合 3D 布局矩阵与提供的任何偏移量而计算得出。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      计算的 3D 矩阵，通过结合 3D 布局矩阵与提供的任何偏移量而计算得出。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:computedMatrix:get"><apiName>computedMatrix</apiName><shortdesc>
      计算的矩阵，通过结合布局矩阵与提供的任何偏移量而计算得出。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      计算的矩阵，通过结合布局矩阵与提供的任何偏移量而计算得出。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:is3D:get"><apiName>is3D</apiName><shortdesc>
      如果计算的转换具有 3D 值，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果计算的转换具有 3D 值，则为 true。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutIs3D:get"><apiName>layoutIs3D</apiName><shortdesc>
      如果布局转换具有 3D 值，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果布局转换具有 3D 值，则为 true。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutWidth:get"><apiName>layoutWidth</apiName><shortdesc>
      由镜像转换使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      由镜像转换使用。请参阅镜像属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:mirror:get"><apiName>mirror</apiName><shortdesc>
      如果为 true，则 X 轴按 -1 缩放，且原点的 x 坐标按组件宽度平移。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 true，则 X 轴按 -1 缩放，且原点的 x 坐标按组件宽度平移。此“镜像”转换的净效果是翻转 X 轴增加的方向，而不更改布局元素相对于其父代的原点的位置。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchX:get"><apiName>stretchX</apiName><shortdesc>
      stretchY 是在任何其他转换属性之前应用的拉伸比例因子的水平组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      stretchY 是在任何其他转换属性之前应用的拉伸比例因子的水平组件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:stretchY:get"><apiName>stretchY</apiName><shortdesc>
      stretchY 是在任何其他转换属性之前应用的拉伸比例因子的垂直组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      stretchY 是在任何其他转换属性之前应用的拉伸比例因子的垂直组件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      在布局计算中使用的 3D 矩阵，用于确定组件及其父代和同代的布局和大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      在布局计算中使用的 3D 矩阵，用于确定组件及其父代和同代的布局和大小。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutMatrix:set"><apiName>layoutMatrix</apiName><shortdesc>
      在布局计算中使用的 2D 矩阵，用于确定组件及其父代和同代的布局和大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Matrix"/></apiValueDef><apiDesc>
      在布局计算中使用的 2D 矩阵，用于确定组件及其父代和同代的布局和大小。
      
       </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationX:set"><apiName>layoutRotationX</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示围绕在布局中和计算的转换中使用的布局矩阵的 X 轴的旋转。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationY:set"><apiName>layoutRotationY</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示围绕在布局中和计算的转换中使用的布局矩阵的 Y 轴的旋转。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutRotationZ:set"><apiName>layoutRotationZ</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示围绕在布局中和计算的转换中使用的布局矩阵的 Z 轴的旋转。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleX:set"><apiName>layoutScaleX</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示沿着在布局中和计算的转换中使用的布局矩阵的 X 轴的缩放。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleY:set"><apiName>layoutScaleY</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示沿着在布局中和计算的转换中使用的布局矩阵的 Y 轴的缩放。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutScaleZ:set"><apiName>layoutScaleZ</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示沿着在布局中和计算的转换中使用的布局矩阵的 Z 轴的缩放。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutX:set"><apiName>layoutX</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示在布局中和计算的转换中使用的布局矩阵的 x 值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutY:set"><apiName>layoutY</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示在布局中和计算的转换中使用的布局矩阵的 y 值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:layoutZ:set"><apiName>layoutZ</apiName><shortdesc>
      布局转换简便属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局转换简便属性。表示在布局中和计算的转换中使用的布局矩阵的 z 值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformX:set"><apiName>transformX</apiName><shortdesc>
      在布局和计算的矩阵中执行旋转和缩放时所围绕的点的 x 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在布局和计算的矩阵中执行旋转和缩放时所围绕的点的 x 值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformY:set"><apiName>transformY</apiName><shortdesc>
      在布局和计算的矩阵中执行旋转和缩放时所围绕的点的 y 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在布局和计算的矩阵中执行旋转和缩放时所围绕的点的 y 值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IAssetLayoutFeatures:mx.core:IAssetLayoutFeatures:transformZ:set"><apiName>transformZ</apiName><shortdesc>
      在布局和计算的矩阵中执行旋转和缩放时所围绕的点的 z 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在布局和计算的矩阵中执行旋转和缩放时所围绕的点的 z 值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DPIClassification"><apiName>DPIClassification</apiName><shortdesc>
  设备屏幕密度类的枚举。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  设备屏幕密度类的枚举。在使用 DPI 时，Flex 会将相似的 DPI 值折叠到 DPI 类中。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.xml#Application/applicationDPI"><linktext>spark.components.Application.applicationDPI</linktext></link><link href="" invalidHref="spark.components.xml#Application/runtimeDPI"><linktext>spark.components.Application.runtimeDPI</linktext></link></related-links><apiValue id="mx.core:DPIClassification:DPI_160"><apiName>DPI_160</apiName><shortdesc>
      低密度设备的 Density 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      低密度设备的 Density 值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DPIClassification:DPI_240"><apiName>DPI_240</apiName><shortdesc>
      中密度设备的 Density 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>240</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      中密度设备的 Density 值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DPIClassification:DPI_320"><apiName>DPI_320</apiName><shortdesc>
      高密度设备的 Density 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>320</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      高密度设备的 Density 值。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponent"><apiName>UIComponent</apiName><shortdesc>
  UIComponent 类是所有可视组件（交互式和非交互式）的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="property" name="layoutDirection"/><effects><effect event="removed" name="removedEffect" owner="mx.core:UIComponent">
<description>
  从 Container 中删除组件时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="added" name="addedEffect" owner="mx.core:UIComponent">
<description>
  将组件作为子项添加到 Container 时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusOut" name="focusOutEffect" owner="mx.core:UIComponent">
<description>
  组件失去键盘焦点时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusIn" name="focusInEffect" owner="mx.core:UIComponent">
<description>
  组件获得键盘焦点时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOut" name="rollOutEffect" owner="mx.core:UIComponent">
<description>
  用户将鼠标指针滚离组件上方时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOver" name="rollOverEffect" owner="mx.core:UIComponent">
<description>
  用户将鼠标指针滚动到组件上方时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseUp" name="mouseUpEffect" owner="mx.core:UIComponent">
<description>
  用户在组件上方释放鼠标按键时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseDown" name="mouseDownEffect" owner="mx.core:UIComponent">
<description>
  用户在组件上方按下鼠标按键时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hide" name="hideEffect" owner="mx.core:UIComponent">
<description>
  组件变为不可见时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="show" name="showEffect" owner="mx.core:UIComponent">
<description>
  组件变为可见时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resize" name="resizeEffect" owner="mx.core:UIComponent">
<description>
  调整组件大小时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="move" name="moveEffect" owner="mx.core:UIComponent">
<description>
  移动组件时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="creationComplete" name="creationCompleteEffect" owner="mx.core:UIComponent">
<description>
  创建组件时播放。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Color" inherit="yes" name="themeColor" owner="mx.core:UIComponent" playerVersion="Flash9" theme="halo" type="uint">
<description>
  组件的主题颜色。此属性控制加亮内容的外观、选中组件时的外观和其他相似的形象化提示，但是它对此组件的常规边框和背景颜色不起作用。虽然可以使用任意有效的颜色值，但首选值为 <codeph>haloGreen</codeph>、<codeph>haloBlue</codeph>、<codeph>haloOrange</codeph> 和 <codeph>haloSilver</codeph>。
   <p><codeph>rollOverColor</codeph> 和 <codeph>selectionColor</codeph> 样式的默认值基于 <codeph>themeColor</codeph> 值。</p>
   </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="showErrorTip" owner="mx.core:UIComponent" playerVersion="Flash10" type="Boolean">
<description>
  如果此组件无效，当用户将鼠标移到它上方时，将显示错误提示 
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="showErrorSkin" owner="mx.core:UIComponent" playerVersion="Flash10" type="Boolean">
<description>
  当此组件无效时，显示错误边框或外观
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl" inherit="yes" name="layoutDirection" owner="mx.core:UIComponent" playerVersion="Flash10" type="String">
<description>
  指定组件的所需布局方向。允许的值为<codeph>“ltr”</codeph>（表示从左到右的布局，用于使用拉丁样式脚本的组件）和<codeph>“rtl”</codeph>（表示从右到左的布局，用于使用阿拉伯语和希伯来语等脚本的组件）。
 
  <p>在 ActionScript 中，可以使用 <codeph>mx.core.LayoutDirection.LTR</codeph>、<codeph>mx.core.LayoutDirection.RTL</codeph> 或 <codeph>undefined</codeph> 值设置 layoutDirection 以从父代继承 layoutDirection。</p>
 
  <p>layoutDirection 通常应在 <codeph>Application</codeph> 上进行设置，而不是在单独的组件上进行设置。如果 layoutDirection 为<codeph>“rtl”</codeph>，将会镜像大多数可视元素（文本和图像除外）。文本的方向由 <codeph>direction</codeph> 样式确定。</p>
 
  <p>layoutDirection 为<codeph>“rtl”</codeph>时，处理 Keyboard.LEFT 和 Keyboard.RIGHT 事件的组件通常交换键的含义。换句话说，左始终表示向左移动，右始终表示向右移动，而不考虑 <codeph>layoutDirection</codeph></p>
 
  <p>注意：该样式适用于将 UIFTETextField 指定为 textFieldClass 的所有 Spark 组件和 MX 组件。</p> 
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>mx.core.ILayoutDirectionElement
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.1
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="MXFTEText.css.xml"><linktext>MXFTEText.css</linktext></link><link href="mx.core.xml#ILayoutDirectionElement"><linktext>mx.core.ILayoutDirectionElement</linktext></link><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links></style><style format="Length" inherit="no" name="focusThickness" owner="mx.core:UIComponent" playerVersion="Flash9" type="Number">
<description>
  焦点矩形轮廓的粗细（以像素为单位）。
   </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusSkin" owner="mx.core:UIComponent" playerVersion="Flash9" type="Class">
<description>
  用于绘制焦点矩形的外观。Halo 组件的默认值为 mx.skins.halo.HaloFocusRect。Spark 组件的默认值为 spark.skins.spark.FocusSkin。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusBlendMode" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  焦点矩形使用的混合模式。有关详细信息，请参阅 flash.display.DisplayObject 类的 <codeph>blendMode</codeph> 属性。
   </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="mouse,touch" inherit="yes" name="interactionMode" owner="mx.core:UIComponent" playerVersion="Flash10" type="String">
<description>
  该组件的主要交互模式。可接受值为 <codeph>mouse</codeph> 和 <codeph>touch</codeph>。Halo 主题的默认值为 <codeph>mouse</codeph>。Spark 主题的默认值为 <codeph>mouse</codeph>。Mobile 主题的默认值为 <codeph>touch</codeph>。
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

<see>mx.core.InteractionMode#TOUCH
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="mx.core.xml#InteractionMode/MOUSE"><linktext>mx.core.InteractionMode.MOUSE</linktext></link><link href="mx.core.xml#InteractionMode/TOUCH"><linktext>mx.core.InteractionMode.TOUCH</linktext></link></related-links></style><style format="Color" inherit="yes" name="errorColor" owner="mx.core:UIComponent" playerVersion="Flash9" type="uint">
<description>
  验证失败时，组件加亮部分的颜色。验证失败时，Flex 还会将组件的 <codeph>borderColor</codeph> 样式设置为 <codeph>errorColor</codeph>。Halo 主题的默认值为 <codeph>0xFF0000</codeph>。Spark 主题的默认值为 <codeph>0xFE0000</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:UIComponent" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的主要颜色。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从组件内容区域的中心到组件中心的垂直距离（以像素为单位）。如果设置此样式，则组件的中心锚定在其内容区域的中心；调整其容器大小后，这两个中心将保持其垂直间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="top" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从组件顶边到其父容器的内容区域顶边之间的垂直距离（以像素为单位）。如果设置此样式，则组件的上边缘锚定在其内容区域的上边缘；调整其容器大小后，这两个边缘将保持其间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="right" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从组件右边到其父容器的内容区域右边之间的水平距离（以像素为单位）。如果设置此样式，则组件的右边缘锚定在其内容区域的右边缘；调整组件容器大小后，这两个边缘将保持它们的间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="left" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从组件左边到其父容器的内容区域左边之间的水平距离（以像素为单位）。如果设置此样式，则组件的左边缘锚定在其内容区域的左边缘；调整组件容器大小后，这两个边缘将保持它们的间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从组件内容区域的中心到组件中心的水平距离（以像素为单位）。如果设置此样式，则组件的中心锚定在其内容区域的中心；调整其容器大小后，这两个中心将保持其水平间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="bottom" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从组件底边到其父容器的内容区域底边之间的垂直距离（以像素为单位）。如果设置此样式，则组件的下边缘锚定在其内容区域的下边缘；调整组件容器大小后，这两个边缘将保持它们的间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="baseline" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  从内容区域的上边缘到控件的基线位置的垂直距离（以像素为单位）。如果设置此样式，则组件的基线锚定在其内容区域的上边缘；调整组件容器大小后，这两个边缘将保持它们的间距。
 
  <p>此样式仅在 Canvas 容器中的组件上，或在 Panel 或 Application 容器（<codeph>layout</codeph> 属性设置为 <codeph>absolute</codeph>）中的组件上使用时才发挥作用。</p> 
 
  <p>默认值为 <codeph>undefined</codeph>，即不进行设置。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>All user interface components in Flex extend the UIComponent class.
  Flex components inherit the following properties from the UIComponent
  class:</p>
   <pre>
  &lt;mx:<i>tagname</i>
   <b>Properties </b>
    accessibilityDescription="null"
    accessibilityName="null"
    accessibilityShortcut="null"
    accessibilitySilent="true|false"
    automationName="null"
    cachePolicy="auto|on|off"
    currentState="null"
    doubleClickEnabled="false|true"
    enabled="true|false"
    explicitHeight="NaN"
    explicitMaxHeight="NaN"
    explicitMaxWidth="NaN"
    explicitMinHeight="NaN"
    explicitMinWidth="NaN"
    explicitWidth="NaN"
    focusEnabled="true|false"
    hasFocusableChildren="false|true"
    height="0"
    id=""
    includeInLayout="true|false"
    maxHeight="10000"
    maxWidth="10000"
    measuredHeight=
    measuredMinHeight=
    measuredMinWidth=
    measuredWidth=
    minHeight="0"
    minWidth="0"
    mouseFocusEnabled="true|false"
    percentHeight="NaN"
    percentWidth="NaN"
    scaleX="1.0"
    scaleY="1.0"
    states="null"
    styleName="undefined"
    toolTip="null"
    transitions=""
    validationSubField
    width="0"
    x="0"
    y="0"
   <b>Styles</b>
    bottom="undefined"
    errorColor="0xFF0000"
    focusBlendMode="normal"
    focusSkin="HaloFocusRect""
    focusThickness="2"
    horizontalCenter="undefined"
    layoutDirection="ltr"
    left="undefined"
    right="undefined"
    themeColor="haloGreen"
    top="undefined"
    verticalCenter="undefined"
   <b>Effects</b>
    addedEffect="<i>No default</i>"
    creationCompleteEffect="<i>No default</i>"
    focusInEffect="<i>No default</i>"
    focusOutEffect="<i>No default</i>"
    hideEffect="<i>No default</i>"
    mouseDownEffect="<i>No default</i>"
    mouseUpEffect="<i>No default</i>"
    moveEffect="<i>No default</i>"
    removedEffect="<i>No default</i>"
    resizeEffect="<i>No default</i>"
    rollOutEffect="<i>No default</i>"
    rollOverEffect="<i>No default</i>"
    showEffect="<i>No default</i>"
   <b>Events</b>
    add="<i>No default</i>"
    creationComplete="<i>No default</i>"
    currentStateChange="<i>No default</i>"
    currentStateChanging="<i>No default</i>"
    dragComplete="<i>No default</i>"
    dragDrop="<i>No default</i>"
    dragEnter="<i>No default</i>"
    dragExit="<i>No default</i>"
    dragOver="<i>No default</i>"
    effectEnd="<i>No default</i>"
    effectStart="<i>No default</i>"
    enterState="<i>No default</i>"
    exitState="<i>No default</i>"
    hide="<i>No default</i>"
    initialize="<i>No default</i>"
    invalid="<i>No default</i>"
    mouseDownOutside="<i>No default</i>"
    mouseWheelOutside="<i>No default</i>"
    move="<i>No default</i>"
    preinitialize="<i>No default</i>"
    remove="<i>No default</i>"
    resize="<i>No default</i>"
    show="<i>No default</i>"
    toolTipCreate="<i>No default</i>"
    toolTipEnd="<i>No default</i>"
    toolTipHide="<i>No default</i>"
    toolTipShow="<i>No default</i>"
    toolTipShown="<i>No default</i>"
    toolTipStart="<i>No default</i>"
    updateComplete="<i>No default</i>"
    valid="<i>No default</i>"
    valueCommit="<i>No default</i>"
  &gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IConstraintClient</apiBaseInterface><apiBaseInterface>mx.core:IDeferredInstantiationUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseInterface>mx.core:IRepeaterClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseInterface>mx.styles:IAdvancedStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.validators:IValidatorListener</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  UIComponent 类是所有可视组件（交互式和非交互式）的基类。
   <p>交互式组件可以参与 Tab 切换和其他几种键盘焦点处理，接受低级事件（如键盘和鼠标输入），还可以被禁用，以便该组件不能收到键盘和鼠标输入。这与非交互式组件（如 Label 和 ProgressBar）相反，非交互式组件只显示内容且不能由用户操作。</p>
  <p>UIComponent 类不作为 MXML 标签使用，而作为其他类的基类使用。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_START_toolTipStart"><apiName>toolTipStart</apiName><shortdesc>
  用户将鼠标移动到设置了 toolTip 属性的组件上方后，由该组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_START</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户将鼠标移动到设置了 <codeph>toolTip</codeph> 属性的组件上方后，由该组件分派。
   <p>ToolTip 事件的顺序为 <codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> 和 <codeph>toolTipEnd</codeph>。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOWN_toolTipShown"><apiName>toolTipShown</apiName><shortdesc>
  显示组件的 ToolTip 时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOWN</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  显示组件的 ToolTip 时由组件分派。
   <p>如果使用 <codeph>ToolTipManager.showEffect</codeph> 属性指定了效果，则在停止播放该效果之后分派此事件。</p>
   <p>ToolTip 事件的顺序为 <codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> 和 <codeph>toolTipEnd</codeph>。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOW_toolTipShow"><apiName>toolTipShow</apiName><shortdesc>
  要显示组件的 ToolTip 时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOW</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  要显示组件的 ToolTip 时由组件分派。
   <p>如果使用 <codeph>ToolTipManager.showEffect</codeph> 属性指定了效果，则在开始播放该效果之前分派此事件。您可以使用此事件在 ToolTip 出现前对其进行修改。</p>
   <p>ToolTip 事件的顺序为 <codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> 和 <codeph>toolTipEnd</codeph>。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_HIDE_toolTipHide"><apiName>toolTipHide</apiName><shortdesc>
  要隐藏组件的 ToolTip 时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_HIDE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  要隐藏组件的 ToolTip 时由组件分派。
   <p>如果使用 <codeph>ToolTipManager.hideEffect</codeph> 属性指定了效果，则在开始播放该效果之前分派此事件。</p>
   <p>ToolTip 事件的顺序为 <codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> 和 <codeph>toolTipEnd</codeph>。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_END_toolTipEnd"><apiName>toolTipEnd</apiName><shortdesc>
  已隐藏组件的 ToolTip 并要将其放弃时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_END</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  已隐藏组件的 ToolTip 并要将其放弃时由组件分派。
   <p>如果使用 <codeph>ToolTipManager.hideEffect</codeph> 属性指定了效果，则在停止播放该效果后分派此事件。</p>
   <p>ToolTip 事件的顺序为 <codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> 和 <codeph>toolTipEnd</codeph>。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_CREATE_toolTipCreate"><apiName>toolTipCreate</apiName><shortdesc>
  要创建 ToolTip 时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_CREATE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  要创建 ToolTip 时由组件分派。
   <p>如果创建了自己的 IToolTip 对象，并在传递到 <codeph>toolTipCreate</codeph> 处理函数的事件对象的 <codeph>toolTip</codeph> 属性中置入了对该对象的引用，则 ToolTipManager 将显示您的自定义 ToolTip。否则，ToolTipManager 将创建 <codeph>ToolTipManager.toolTipClass</codeph> 的实例以用于显示。</p>
   <p>ToolTip 事件的顺序为 <codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> 和 <codeph>toolTipEnd</codeph>。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_END_touchInteractionEnd"><apiName>touchInteractionEnd</apiName><shortdesc>
  不可撤消事件，在组件结束响应 touch 交互用户操作时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_END</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  不可撤消事件，在组件结束响应 touch 交互用户操作时由组件分派。
 
  <p>该事件是冒泡事件，针对开始了 touch 交互（即发生了 mouseDown/touchBegin）的 DisplayObject 进行分派。</p>
 
  <p>响应 touch 交互的组件应侦听 touch 交互事件，从而与其它组件协调用户计划进行哪种类型的 touch 交互以及哪个组件响应此 touch 交互。</p>
 
  <p>Scroller 组件结束响应用户的 touch 交互后，Scroller 组件将分派 touchInteractionEnd 事件以通知其它组件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_START_touchInteractionStart"><apiName>touchInteractionStart</apiName><shortdesc>
  不可撤消事件，在组件开始响应 touch 交互用户操作时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_START</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  不可撤消事件，在组件开始响应 touch 交互用户操作时由组件分派。
 
  <p>该事件是冒泡事件，针对开始了 touch 交互（即发生了 mouseDown/touchBegin）的 DisplayObject 进行分派。</p>
 
  <p>响应 touch 交互的组件应侦听 touch 交互事件，从而与其它组件协调用户计划进行哪种类型的 touch 交互以及哪个组件响应此 touch 交互。</p>
 
  <p>正在控制 touch 交互的 Scroller 组件将分派 touchInteractionStart 事件以通知可能响应相同用户的 touch 交互的其它组件。其它组件看到此事件后，应该停止响应 touch 交互，删除指明该组件正在响应 touch 交互的视觉指示，并执行其它清理操作。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.TouchInteractionEvent.TOUCH_INTERACTION_STARTING_touchInteractionStarting"><apiName>touchInteractionStarting</apiName><shortdesc>
  可撤消事件，在组件试图响应 touch 交互用户操作时由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TouchInteractionEvent.TOUCH_INTERACTION_STARTING</apiEventType><adobeApiEventClassifier>mx.events.TouchInteractionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  可撤消事件，在组件试图响应 touch 交互用户操作时由组件分派。
 
  <p>该事件是冒泡事件，针对开始了 touch 交互（即发生了 mouseDown/touchBegin）的 DisplayObject 进行分派。</p>
 
  <p>响应 touch 交互的组件应侦听 touch 交互事件，从而与其它组件协调用户计划进行哪种类型的 touch 交互以及哪个组件响应此 touch 交互。</p>
 
  <p>要控制 touch 交互的 Scroller 组件将分派 touchInteractionStarting 事件以通知可能响应相同用户的 touch 交互的其它组件。其它组件可以利用此机会取消 Scroller 的操作，从而保持对该 touch 交互的控制。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.STATE_CHANGE_INTERRUPTED_stateChangeInterrupted"><apiName>stateChangeInterrupted</apiName><shortdesc>
  在组件中断转换到当前状态从而切换到新状态时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.STATE_CHANGE_INTERRUPTED</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在组件中断转换到当前状态从而切换到新状态时分派。 
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.STATE_CHANGE_COMPLETE_stateChangeComplete"><apiName>stateChangeComplete</apiName><shortdesc>
  在组件进入新状态且切换到该状态的状态转换动画已经播放完时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.STATE_CHANGE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在组件进入新状态且切换到该状态的状态转换动画已经播放完时分派。如果不播放状态转换，会立即分派此事件。如果组件切换到其它状态，而转换仍正在进行时，该组件转换到新状态后就会分派此事件。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.EXIT_STATE_exitState"><apiName>exitState</apiName><shortdesc>
  在组件即将退出视图状态之前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.EXIT_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在组件即将退出视图状态之前分派。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ENTER_STATE_enterState"><apiName>enterState</apiName><shortdesc>
  在组件已进入视图状态之后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在组件已进入视图状态之后分派。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGE_currentStateChange"><apiName>currentStateChange</apiName><shortdesc>
  视图状态更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  视图状态更改后分派。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGING_currentStateChanging"><apiName>currentStateChanging</apiName><shortdesc>
  在 currentState 属性更改后但视图状态更改前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 <codeph>currentState</codeph> 属性更改后但视图状态更改前分派。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  在一个效果结束后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在一个效果结束后分派。
   <p>在触发此事件之前，效果将进行最后一组可视更改，但是这些更改将不会呈示在屏幕上。因此，您可能需要使用 <codeph>callLater()</codeph> 方法延迟任何其他更改，您希望在屏幕上呈示更改之后再进行这些更改。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  在停止某个效果（仅当对该效果调用 stop() 时发生）之后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在停止某个效果（仅当对该效果调用 <codeph>stop()</codeph> 时发生）之后分派。
   <p>该效果接着将在完成时分派 EFFECT_END 事件。EFFECT_STOP 事件的目的是让侦听器知道该效果过早结束，而不是自然结束或对 <codeph>end()</codeph> 调用后而结束。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  在即将开始播放效果前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在即将开始播放效果前分派。
   <p>在触发此事件后，效果才会开始更改可视效果。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_START_dragStart"><apiName>dragStart</apiName><shortdesc>
  启动拖动操作时，由拖动启动器分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_START</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  启动拖动操作时，由拖动启动器分派。基于列表的控件在内部使用此事件；实现拖放操作时不会处理此事件。如果您希望控制拖放操作的开始，请使用 <codeph>mouseDown</codeph> 或 <codeph>mouseMove</codeph> 事件。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_COMPLETE_dragComplete"><apiName>dragComplete</apiName><shortdesc>
  在拖动操作完成时（将拖动的数据放到放置目标时或在没有执行放置操作的情况下结束拖放操作时）由拖动启动器（作为要拖动的数据源的组件）分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在拖动操作完成时（将拖动的数据放到放置目标时或在没有执行放置操作的情况下结束拖放操作时）由拖动启动器（作为要拖动的数据源的组件）分派。
   <p>您可以使用此事件执行拖放操作的任意最终清理。例如，将 List 控件项目从一个列表拖动到另一个列表时，如果不再需要此 List 控件项目，则可以将其从源列表中删除。</p>
   <p>将数据从一个 Tree 控件拖动到另一个控件时，如果在 Tree 控件 <codeph>dragComplete</codeph> 事件的事件处理函数调用 <codeph>Event.preventDefault()</codeph>，它将阻止该放置操作。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_DROP_dragDrop"><apiName>dragDrop</apiName><shortdesc>
  用户在放置目标上释放鼠标时由放置目标分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_DROP</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在放置目标上释放鼠标时由放置目标分派。
   <p>可以使用此事件处理函数将拖动数据添加到放置目标。</p>
   <p>将数据从一个 Tree 控件拖动到另一个控件时，如果在 Tree 控件 <codeph>dragDrop</codeph> 事件的事件处理函数调用 <codeph>Event.preventDefault()</codeph>，它将阻止该放置操作。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_EXIT_dragExit"><apiName>dragExit</apiName><shortdesc>
  用户在组件外拖动但没有将数据放置到目标时，由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_EXIT</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在组件外拖动但没有将数据放置到目标时，由组件分派。
   <p>如果在处理 <codeph>dragEnter</codeph> 或 <codeph>dragOver</codeph> 事件时修改了放置目标的外观，则可以使用此事件将放置目标还原为正常外观。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_OVER_dragOver"><apiName>dragOver</apiName><shortdesc>
  在拖动操作期间，当用户在鼠标位于组件上方的情况下移动鼠标时，由组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_OVER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在拖动操作期间，当用户在鼠标位于组件上方的情况下移动鼠标时，由组件分派。在 Flash Player 中，将项目拖动到有效放置目标上时，分派此事件。在 AIR 中，将项目拖动到任一组件上方（即使该组件不是有效的放置目标）时，分派此事件。
   <p>在处理函数中，您可以通过更改放置目标的外观向用户提供可视反馈，即组件可以接受此拖动。例如，您可以围绕放置目标绘制一个边框，或者为放置目标提供焦点。</p>
   <p>您应该对此事件进行处理，从而在允许放置之前执行其他逻辑，例如，将数据放置在放置目标中的各不同位置，读取键盘输入以确定拖放操作是拖动还是复制拖放数据，或者根据拖放操作类型提供不同类型的可视反馈。</p>
   <p>您还可以通过更改 <codeph>DragManager.showFeedback()</codeph> 方法来更改拖动操作的类型。<codeph>action</codeph> 属性的默认值为 <codeph>DragManager.MOVE</codeph>。</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_ENTER_dragEnter"><apiName>dragEnter</apiName><shortdesc>
  当用户在拖动操作过程中将鼠标移动到某个组件所处的位置时，由该组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_ENTER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在拖动操作过程中将鼠标移动到某个组件所处的位置时，由该组件分派。如果应用程序在 Flash Player 中运行，则当用户将鼠标移至任何组件所处的位置时，将多次分派此事件。如果应用程序在 AIR 中运行，则只分派此事件一次。
   <p>为使放置目标有效，您必须为此事件定义处理函数。在处理函数中，您可以通过更改放置目标的外观向用户提供可视反馈，即组件可以接受此拖动。例如，您可以围绕放置目标绘制一个边框，或者为放置目标提供焦点。</p>
   <p>如果希望接受拖动，您必须调用 <codeph>DragManager.acceptDragDrop()</codeph> 方法。如果不调用 <codeph>acceptDragDrop()</codeph>，您将无法获得其他任何拖动事件。</p>
   <p>在 Flash Player 中，<codeph>action</codeph> 属性的值始终为 <codeph>DragManager.MOVE</codeph>，即使是执行复制操作也不例外。这是因为在控件识别出已按下 Ctrl 键来指示复制之前，即已发生 <codeph>dragEnter</codeph> 事件。<codeph>dragOver</codeph> 事件的事件对象的 <codeph>action</codeph> 属性确实包含指示拖动操作类型的值。您可以通过调用 <codeph>DragManager.showFeedback()</codeph> 方法来更改拖动操作的类型。</p>
   <p>在 AIR 中，<codeph>action</codeph> 属性的默认值为 <codeph>DragManager.COPY</codeph>。</p>
   <p>由于 Tree 控件中数据的构建方式与其他基于列表的控件不同，所以 Tree 控件处理拖放的方式也与这些控件不同。对于 Tree 控件，仅当您在同一 Tree 控件中移动或复制数据时，或者将数据复制到其他 Tree 控件时，<codeph>dragDrop</codeph> 事件的事件处理函数才执行操作。如果您是通过将一个 Tree 控件中的数据拖放到另一个 Tree 控件来移动数据，则实际上是由 <codeph>dragComplete</codeph> 事件的事件处理函数（而非 dragDrop 事件的事件处理函数）执行将该数据添加到目标 Tree 控件的操作，并从源 Tree 控件中删除该数据。这非常有用，因为要重设将要删除的数据的父级，Flex 必须先将该数据从源 Tree 控件中删除。</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  当组件由 Validator 监控并且成功通过验证时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件由 Validator 监控并且成功通过验证时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc>
  当组件由 Validator 监控且未通过验证时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件由 Validator 监控且未通过验证时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  当以编程方式或通过用户交互更改值时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当以编程方式或通过用户交互更改值时分派。
   <p>由于以编程方式进行更改会触发此事件，所以请确保任何 <codeph>valueCommit</codeph> 事件处理函数都不会更改可引发另一 <codeph>valueCommit</codeph> 事件的值。例如，不要在 <codeph>valueCommit</codeph> 事件处理函数中更改控件的 <codeph>dataProvider</codeph> 属性。 </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE_mouseWheelOutside"><apiName>mouseWheelOutside</apiName><shortdesc>
  当用户使用鼠标滚轮滚动到使用 PopUpManager 打开的某个组件外部时，从该组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户使用鼠标滚轮滚动到使用 PopUpManager 打开的某个组件外部时，从该组件分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE_mouseDownOutside"><apiName>mouseDownOutside</apiName><shortdesc>
  当用户在使用 PopUpManager 打开的某个组件外部单击时，从该组件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在使用 PopUpManager 打开的某个组件外部单击时，从该组件分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  当对象的状态从不可见变为可见时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当对象的状态从不可见变为可见时分派。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ResizeEvent.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  在调整组件大小时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ResizeEvent.RESIZE</apiEventType><adobeApiEventClassifier>mx.events.ResizeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在调整组件大小时分派。
   <p>您可以通过以下方法调整组件大小：设置 <codeph>width</codeph> 或 <codeph>height</codeph> 属性、调用 <codeph>setActualSize()</codeph> 方法、在该组件上或其他组件上设置下列属性之一以使 LayoutManager 需要更改该组件的 <codeph>width</codeph> 或 <codeph>height</codeph> 属性：</p>
   <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
   <p>在更改该属性之前，不会分派 <codeph>resize</codeph> 事件。</p>
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.REMOVE_remove"><apiName>remove</apiName><shortdesc>
  当组件通过使用 removeChild()、removeChildAt()、removeElement() 或 removeElementAt() 方法作为内容子项从容器中删除后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REMOVE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件通过使用 <codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph>、<codeph>removeElement()</codeph> 或 <codeph>removeElementAt()</codeph> 方法作为内容子项从容器中删除后分派。如果已使用 <codeph>rawChildren.removeChild()</codeph> 或 <codeph>rawChildren.removeChildAt()</codeph> 方法将组件作为非内容子项从容器中删除，则不会分派此事件。
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.PREINITIALIZE_preinitialize"><apiName>preinitialize</apiName><shortdesc>
  在组件初始化序列开始时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.PREINITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在组件初始化序列开始时分派。分派此事件时，组件恰处于原始状态。许多组件（如 Button 控件）可创建内部子组件来实现功能；例如，Button 控件可创建内部 UITextField 组件来呈示其标签文本。当 Flex 分派 <codeph>preinitialize</codeph> 事件时，尚未创建组件的子项（包括内部子项）。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.MoveEvent.MOVE_move"><apiName>move</apiName><shortdesc>
  移动对象后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MoveEvent.MOVE</apiEventType><adobeApiEventClassifier>mx.events.MoveEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  移动对象后分派。
   <p>您可以通过以下方法移动组件：设置 <codeph>x</codeph> 或 <codeph>y</codeph> 属性、调用 <codeph>move()</codeph> 方法，在该组件上或其他组件上设置下列属性以使 LayoutManager 更改该组件的 <codeph>x</codeph> 或 <codeph>y</codeph> 属性：</p>
   <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
   <p>调用 <codeph>move()</codeph> 方法时，将在此方法返回之前分派 <codeph>move</codeph> 事件。在其他所有情形下，在该属性更改之前都不会分派 <codeph>move</codeph> 事件。</p>
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INITIALIZE_initialize"><apiName>initialize</apiName><shortdesc>
  当组件完成构建并设置了所有初始化属性后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件完成构建并设置了所有初始化属性后分派。
   <p>初始化阶段结束后，就处理了属性，并测量、布置和绘制了组件，然后将分派 <codeph>creationComplete</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  当对象的状态从可见变为不可见时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当对象的状态从可见变为不可见时分派。
 
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.UPDATE_COMPLETE_updateComplete"><apiName>updateComplete</apiName><shortdesc>
  当调用了对象的 commitProperties()、measure() 和 updateDisplayList() 方法后分派（如果需要）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.UPDATE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当调用了对象的 <codeph>commitProperties()</codeph>、<codeph>measure()</codeph> 和 <codeph>updateDisplayList()</codeph> 方法后分派（如果需要）。
   <p>这是在显示组件前最后一次修改组件的机会。已提交所有属性，并已测量和布置了组件。</p>
   <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.CREATION_COMPLETE_creationComplete"><apiName>creationComplete</apiName><shortdesc>
  当组件完成其构建、属性处理、测量、布置和绘制时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件完成其构建、属性处理、测量、布置和绘制时分派。
   <p>此时，根据组件的 <codeph>visible</codeph> 属性，即使绘制完组件后，该组件仍然不可见。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ADD_add"><apiName>add</apiName><shortdesc>
  当组件通过使用 addChild()、addChildAt()、addElement() 或 addElementAt() 方法作为内容子项添加到容器后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ADD</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件通过使用 <codeph>addChild()</codeph>、<codeph>addChildAt()</codeph>、<codeph>addElement()</codeph> 或 <codeph>addElementAt()</codeph> 方法作为内容子项添加到容器后分派。如果已使用 <codeph>rawChildren.addChild()</codeph> 或 <codeph>rawChildren.addChildAt()</codeph> 方法将该组件作为非内容子项添加到容器，则不会分派此事件。
  <p>仅当有一个或多个相关侦听器附加到分派对象时，才会分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:UIComponent:UIComponent"><apiName>UIComponent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UIComponent:addStyleClient"><apiName>addStyleClient</apiName><shortdesc>
      将非可视样式客户端添加到该组件实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>styleClient</codeph> 参数为 <codeph>DisplayObject</codeph>。 
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleClient</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>将添加到该组件的非可视样式客户端列表的 <codeph>IAdvancedStyleClient</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将非可视样式客户端添加到该组件实例。调用此方法后，样式客户端将继承该组件实例的样式更改。为 DisplayObject 的样式客户端必须使用 <codeph>addChild</codeph> 或 <codeph>addChildAt</codeph> 方法，才能添加到 <codeph>UIComponent</codeph> 中。作为副作用，该方法会设置 <codeph>styleClient</codeph> 参数的 <codeph>styleParent</codeph> 属性引用 <codeph>UIComponent</codeph> 的该实例。如果 <codeph>styleClient</codeph> 参数已具有 <codeph>styleParent</codeph>，该方法会调用上一个 <codeph>styleParent</codeph> 中的 <codeph>removeStyleClient</codeph>。  
     
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.removeStyleClient.xml"><linktext>removeStyleClient</linktext></link><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:adjustFocusRect"><apiName>adjustFocusRect</apiName><shortdesc>
      调整焦点矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>要修改其焦点矩形的组件。如果省略，则默认值为此 UIComponent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整焦点矩形。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:applyComputedMatrix"><apiName>applyComputedMatrix</apiName><shortdesc>
      提交计算的矩阵，该矩阵是基于布局矩阵以及 flash displayObject 的转换的转换偏移量而构建的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      提交计算的矩阵，该矩阵是基于布局矩阵以及 flash displayObject 的转换的转换偏移量而构建的。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      这是一个内部方法，供 Flex 框架用于支持 Dissolve 效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      这是一个内部方法，供 Flex 框架用于支持 Dissolve 效果。您不必调用或覆盖它。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:callLater"><apiName>callLater</apiName><shortdesc>
      排队稍后调用的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>对稍后执行的方法的引用。
           </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>对象 Array，给出要传递给此方法的参数。
           
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      排队稍后调用的函数。
           <p>在每次更新屏幕之前，Flash Player 或 AIR 都会调用为更新预定的函数集。有时，应在下次更新时调用函数，以执行为当前更新预定的其余代码。部分功能（如效果）可能会延迟排队的函数，直到功能完成为止。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:canSkipMeasurement"><apiName>canSkipMeasurement</apiName><shortdesc>
      确定是否可以跳过对 measure() 方法的调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>当 <codeph>measureSizes()</codeph> 方法可以跳过对 <codeph>measure()</codeph> 方法的调用时，返回 <codeph>true</codeph>。例如，同时设置 <codeph>explicitWidth</codeph> 和 <codeph>explicitHeight</codeph> 时，它通常为 <codeph>true</codeph>。对于路径，当路径的界限未改变时，此为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      确定是否可以跳过对 <codeph>measure()</codeph> 方法的调用。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:childrenCreated"><apiName>childrenCreated</apiName><shortdesc>
      创建子对象后执行任何最终处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      创建子对象后执行任何最终处理。此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      删除此组件实例的样式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      删除此组件实例的样式属性。
           <p>此操作不一定会使 <codeph>getStyle()</codeph> 方法返回 <codeph>undefined</codeph>。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      处理对组件设置的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      处理对组件设置的属性。此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。
           <p>您无需直接调用此方法。当您使用 <codeph>addChild()</codeph> 方法向容器中添加组件时，或调用组件的 <codeph>invalidateProperties()</codeph> 方法时，Flex 都会调用 <codeph>commitProperties()</codeph> 方法。应在调用 <codeph>measure()</codeph> 方法之前调用 <codeph>commitProperties()</codeph> 方法。这允许您设置 <codeph>measure()</codeph> 方法可能会用到的属性值。</p>
           <p>一些组件的属性可能会影响需要创建的子对象的数目或种类，也有些组件的属性彼此之间会相互影响（例如 <codeph>horizontalScrollPolicy</codeph> 和 <codeph>horizontalScrollPosition</codeph> 属性）。通常，最好在启动时一次性处理所有这些属性以避免重复工作。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc>
      将 Point 对象由内容坐标转换为全局坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>具有相对于舞台的坐标的 Point 对象。
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>一个 Point 对象，用于指定内容坐标系中的 <i>x</i> 和 <i>y</i> 坐标作为属性。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 <codeph>Point</codeph> 对象从内容坐标转换为全局坐标。内容坐标指定的像素位置随组件内容的左上角而变化，并包括组件的所有内容区域，甚至包括当前剪切掉但必须能够通过滚动组件访问的任何区域。您可以使用内容坐标系设置和获取使用绝对定位的容器中子项的位置。全局坐标指定的像素位置随舞台的左上角，即应用窗口的最外侧边缘而变化。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/globalToContent()"><linktext>globalToContent()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:contentToLocal"><apiName>contentToLocal</apiName><shortdesc>
      将 Point 对象由内容坐标转换为本地坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point，具有随本地坐标系而变化的坐标的 Point 对象。
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>一个 Point 对象，用于指定内容坐标系中的 <i>x</i> 和 <i>y</i> 坐标作为属性。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 <codeph>Point</codeph> 对象由内容坐标转换为本地坐标。内容坐标指定的像素位置随组件内容的左上角而变化，并包括组件的所有内容区域，甚至包括当前剪切掉但必须能够通过滚动组件访问的任何区域。您可以使用内容坐标系设置和获取使用绝对定位的容器中子项的位置。本地坐标指定的像素位置随组件的左上角而变化。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      
      返回标识此容器中的子项的一组属性作为自动 ID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>描述稍后可用于解析组件的子项的几组属性。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>为其提供 ID 的子项。
     
      </apiDesc></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/><apiDesc>形成该 ID 需要考虑的子项。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回标识此容器中的子项的一组属性作为自动 ID。在应用程序的生命期内，不应更改这些值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      
      返回标识此容器中的子项的一组属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>描述稍后可用于解析组件的子项的几组属性。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>为其提供 ID 的子项。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回标识此容器中的子项的一组属性。在应用程序的生命期内，不应更改这些值。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      ‏‏创建组件的子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ‏‏创建组件的子对象。此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。
           <p>可在自身内部创建其他组件或对象的组件称为组合组件。例如，Flex ComboBox 控件实际上包含一个 TextInput 控件（用于定义 ComboBox 的文本区域）和一个 Button 控件（用于定义 ComboBox 箭头）。组件实现 <codeph>createChildren()</codeph> 方法以在其内部创建子对象（如其他组件）。</p>
           <p>在 <codeph>createChildren()</codeph> 方法的覆盖内部，您可以调用 <codeph>addChild()</codeph> 方法来添加各个子对象。 </p>
           <p>您无需直接调用此方法。Flex 会调用 <codeph>createChildren()</codeph> 方法来响应对 <codeph>addChild()</codeph> 方法的调用，用以将组件添加到其父项。 </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInFontContext"><apiName>createInFontContext</apiName><shortdesc>
      根据所用的嵌入字体使用上下文创建新对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>在拥有嵌入字体的 SWF 上下文中创建的类实例。如果此对象不使用嵌入字体，则在此对象的上下文中创建类。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classObj</apiItemName><apiType value="Class"/><apiDesc>要创建的类。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据所用的嵌入字体使用上下文创建新对象。
           <p>此方法用于解决在将框架加载为 RSL（RSL 具有自己的 SWF 上下文）情况下，访问应用程序 SWF 中嵌入的字体问题。嵌入字体只能从创建它们的 SWF 文件上下文中访问。通过使用应用程序 SWF 上下文，RSL 可以在能够访问应用程序的嵌入字体的应用程序 SWF 上下文中创建对象。</p>
           <p>仅当设置此对象的字体样式后才调用此方法。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInModuleContext"><apiName>createInModuleContext</apiName><shortdesc>
      使用给定的 moduleFactory 创建对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>在 moduleFactory 上下文中创建的对象。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiDesc>在其中创建类的 moduleFactory；可以为 null。
           </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="String"/><apiDesc>要创建的类的名称。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用给定的 moduleFactory 创建对象。如果 moduleFactory 为 null，或者无法使用模块工厂创建对象，则重用 systemManager 创建对象。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      
      在 IUIComponent 对象的父项文档对象上创建对此对象的 id 引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>此 IUIComponent 对象的父项。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在 IUIComponent 对象的父项文档对象上创建对此对象的 <codeph>id</codeph> 引用。此函数可以对一个或多个 repeater 中的象创建多维引用，如 b[2][4]。如果索引为 null，它将创建一个简单的非 Array 引用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      
      在 IUIComponent 对象的父项文档对象上删除对此对象的 id 引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>此 IUIComponent 对象的父项。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在 IUIComponent 对象的父项文档对象上删除对此对象的 <codeph>id</codeph> 引用。此函数可以对一个或多个 Repeater 中的对象删除多维引用，如 b[2][4]。如果索引为 null，它将删除简单的非 Array 引用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:determineTextFormatFromStyles"><apiName>determineTextFormatFromStyles</apiName><shortdesc>
      返回与此 UIComponent 的文本样式对应的 UITextFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>与此 UIComponent 的文本样式对应的 UITextFormat 对象。
      
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      返回与此 UIComponent 的文本样式对应的 UITextFormat 对象。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      将事件调度到事件流中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>如果成功调度了事件，则值为 <codeph>true</codeph>。值 <codeph>false</codeph> 表示失败或对事件调用了 <codeph>preventDefault()</codeph> 方法。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>调度到事件流中的 Event 对象。如果正在重新调度事件，则会自动创建此事件的一个克隆。在调度了事件后，其 <codeph>target</codeph> 属性将无法更改，因此您必须创建此事件的一个新副本以能够重新调度。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将事件调度到事件流中。事件目标是对其调用 <codeph>dispatchEvent()</codeph> 方法的 EventDispatcher 对象。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:dispatchPropertyChangeEvent"><apiName>dispatchPropertyChangeEvent</apiName><shortdesc> 
      更新属性时分派 PropertyChangeEvent 的 Helper 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prop</apiItemName><apiType value="String"/><apiDesc>已更改的属性的名称。
           </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="any"/><apiDesc>属性的旧值。
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>属性的新值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      更新属性时分派 PropertyChangeEvent 的 Helper 方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      在此组件周围显示或隐藏焦点指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>确定是否应显示焦点指示符。设置为 <codeph>true</codeph> 可以显示焦点指示符。设置为 <codeph>false</codeph> 可以隐藏焦点指示符。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在此组件周围显示或隐藏焦点指示符。
           <p>UIComponent 通过创建由 <codeph>focusSkin</codeph> 样式指定的类实例并将其适当定位来实现此控制。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawRoundRect"><apiName>drawRoundRect</apiName><shortdesc>
      通过编程方式在此外观的 Graphics 对象中绘制一个矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此外观中矩形左上角的水平位置。
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此外观中矩形左上角的垂直位置。
           </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>矩形的宽度（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>矩形的高度（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>r</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>矩形的角半径。可以是 <codeph>null</codeph>、Number 或 Object。如果为 <codeph>null</codeph>，则表示该角应为方形而不是弧形。如果为 Number，则为所有四个角指定相同半径（以像素为单位）。如果为 Object，则应具有 <codeph>tl</codeph>、<codeph>tr</codeph>、<codeph>bl</codeph> 和 <codeph>br</codeph> 属性，这些属性值是用于指定左上角、右上角、左下角、右下角的半径的 Number（以像素为单位）。例如，您可以传递简单 Object，如 <codeph>{ tl: 5, tr: 5, bl: 0, br: 0 }</codeph>。默认值为 null（方形角）。
           </apiDesc></apiParam><apiParam><apiItemName>c</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>填充的 RGB 颜色。可以是 <codeph>null</codeph>、uint 或 Array。如果为 <codeph>null</codeph>，则不为矩形填充颜色。如果为 uint，则会指定一个 RGB 填充色。例如，传递 <codeph>0xFF0000</codeph> 可填充红色。如果为 Array，则应包含用于指定渐变颜色的 uint。例如，传递 <codeph>[ 0xFF0000, 0xFFFF00, 0x0000FF ]</codeph> 可填充红-黄-蓝渐变。在渐变中最多可以指定 15 种颜色。默认值为 null（无填充颜色）。
           </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>用于填充的 Alpha 值。可以是 null、Number 或 Array。如果 <codeph>color</codeph> 为空，则忽略此参数。如果 <codeph>color</codeph> 是用于指定 RGB 填充颜色的 uint，则 <codeph>alpha</codeph> 应该是用于指定填充透明度的 Number，其中 0.0 表示完全透明，1.0 表示完全不透明。在本例中，您还可以通过传递空值而不是 1.0 来指定完全不透明。如果 <codeph>color</codeph> 是用于指定渐变颜色的 Array，则 <codeph>alpha</codeph> 应该是长度相同的数字 Array，用于为渐变指定相应的 alpha 值。在本例中，默认值为 <codeph>null</codeph>（完全不透明）。
           </apiDesc></apiParam><apiParam><apiItemName>rot</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>用于渐变填充的 Matrix 对象。可使用实用程序方法 <codeph>horizontalGradientMatrix()</codeph>、<codeph>verticalGradientMatrix()</codeph> 和 <codeph>rotatedGradientMatrix()</codeph> 来创建此参数的值。
           </apiDesc></apiParam><apiParam><apiItemName>gradient</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>渐变填充的类型。可能的值为 <codeph>GradientType.LINEAR</codeph> 或 <codeph>GradientType.RADIAL</codeph>。（GradientType 类位于 flash.display 包中。）
           </apiDesc></apiParam><apiParam><apiItemName>ratios</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>
      指定颜色的分布。条目数必须与在 <codeph>color</codeph> 参数中定义的颜色数匹配。各值均定义 100% 采样的颜色所在位置的宽度百分比。值 0 表示渐变框中的左侧位置，255 表示渐变框中的右侧位置。 
           </apiDesc></apiParam><apiParam><apiItemName>hole</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>应从另一个实心填充的圆角矩形 { x: #, y: #, w: #, h: #, r: # 或 { br: #, bl: #, tl: #, tr: # } } 中央切去的圆角矩形洞
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过编程方式在此外观的 Graphics 对象中绘制一个矩形。
           <p>矩形可以有圆角。其边缘使用 Graphics 对象的当前线条样式。可以使用纯色填充、渐变填充或无填充。纯色填充可以使用 Alpha 透明度。渐变填充可以为线性渐变或放射状渐变。可在沿着渐变的指定点上至多指定 15 个颜色和 Alpha 值，可为渐变指定旋转角度和转换矩阵。最后，该矩形可具有从其上切去的圆角矩形洞。</p>
           <p>该通用矩形绘制例程被很多外观所使用。该例程调用 <codeph>drawRect()</codeph> 或 <codeph>drawRoundRect()</codeph> 方法（在 flash.display.Graphics 类中）在此外观的 Graphics 对象中进行绘制。</p>
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:effectFinished"><apiName>effectFinished</apiName><shortdesc>
      停止在组件上播放效果实例时，由效果实例调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>组件上正在播放的效果实例对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      停止在组件上播放效果实例时，由效果实例调用。您可以使用此方法还原 <codeph>effectStarted()</codeph> 方法在开始播放效果时对组件所做的修改，或在效果结束时，执行一些其他操作。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:effectStarted"><apiName>effectStarted</apiName><shortdesc>
      开始在组件上播放效果实例时，由效果实例调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>组件上正在播放的效果实例对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      开始在组件上播放效果实例时，由效果实例调用。作为效果的一部分，您可以使用此方法来修改组件。在效果结束时，您可以使用 <codeph>effectFinished()</codeph> 方法还原修改。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:endEffectsStarted"><apiName>endEffectsStarted</apiName><shortdesc>
      结束组件上当前播放的所有效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      结束组件上当前播放的所有效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      执行 UIComponent 对象是目标的所有绑定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>以递归方式为此组件的子项执行绑定。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      执行 UIComponent 对象是目标的所有绑定。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:finishPrint"><apiName>finishPrint</apiName><shortdesc>
      打印完成后调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>包含组件的一些属性，用于将其还原到打印前的状态。
           </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>刚刚完成打印的组件。该组件可能是当前组件，也可能是其中的一个子项。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      打印完成后调用。对于 UIComponent 类，此方法不执行任何操作。Flex 容器将覆盖此方法以在打印后还原容器。
           <p>此方法通常不适用于应用程序开发人员。 </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusInHandler"><apiName>focusInHandler</apiName><shortdesc>
      当 UIComponent 对象获得焦点时调用的事件处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 UIComponent 对象获得焦点时调用的事件处理函数。如果覆盖此方法，请确保调用基类版本。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc>
      当 UIComponent 对象失去焦点时调用的事件处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 UIComponent 对象失去焦点时调用的事件处理函数。如果覆盖此方法，请确保调用基类版本。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
       
      在指定的索引位置提供自动化对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定索引位置处的子项。
      
      </apiDesc><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要返回的子项的索引
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      在指定的索引位置提供自动化对象。该列表不应包含任何复合子项。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      
      提供自动化对象列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>自动子代。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      提供自动化对象列表。该列表不应包含任何复合子项。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      按指定的元素大小，返回元素边界的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>按指定的元素大小，元素边界的 x 坐标。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>元素的界限宽度，或要使用首选宽度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>元素的界限高度，或要使用首选高度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 x 坐标。边框位于元素的父坐标空间中，并基于指定的边界大小、布局位置和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      按指定的元素大小，返回元素边界的 x 坐标。
     
      <p>如果将元素大小调整为特定尺寸，则此方法通常在调用 <codeph>measure()</codeph> 方法期间由布局使用，以预测该元素将来的位置。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      按指定的元素大小，返回元素边界的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>按指定的元素大小，元素边界的 y 坐标。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>元素的界限宽度，或要使用首选宽度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>元素的界限高度，或要使用首选高度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 y 坐标。边框位于元素的父坐标空间中，并基于指定的边界大小、布局位置和布局转换矩阵进行计算。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      按指定的元素大小，返回元素边界的 y 坐标。如果将元素大小调整为特定尺寸，则此方法通常在调用 <codeph>measure()</codeph> 期间由布局使用，以预测该元素将来的位置。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc>
      查找此 UIComponent 实例的类型选择器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此 UIComponent 实例的类型选择器 Array。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      查找此 UIComponent 实例的类型选择器。算法沿 superclass 链进行。例如，假设 MyButton 类扩展了 Button。MyButton 实例将先查找 MyButton 类型选择器，然后查找 Button 类型选择器，接着查找 UIComponent 类型选择器。（我们认为 superclass 链截止到 UIComponent，而不是 Object。）
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      返回一个约束布局值，这与获取此组件的约束样式的方式类似。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回布局约束值，可以用两种形式中的任意一种指定该值。可以将其指定为数值字符串，如 "10"，还可以将其指定为 "标识符:数值" 形式的字符串。对于 "标识符:数值" 字符串，标识符为 ConstraintRow 或 ConstraintColumn 的 <codeph>id</codeph>。例如，"cc1:10" 的值指定具有 <codeph>id</codeph> "cc1" 的 ConstraintColumn 的值为 10。
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>约束样式的名称，可以是以下任意一个：left、right、top、bottom、verticalCenter、horizontalCenter、baseline
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回一个约束布局值，这与获取此组件的约束样式的方式类似。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      确定是使用显式高度还是测量高度的一种简便方法
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 Number，在已定义的情况下是 explicitHeight，在未定义的情况下是 measuredHeight。
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      确定是使用显式高度还是测量高度的一种简便方法
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      确定是使用显式宽度还是测量宽度的一种简便方法
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>一个 Number，在已定义的情况下是 explicitWidth，在未定义的情况下是 measuredWidth。
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      确定是使用显式宽度还是测量宽度的一种简便方法
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getFocus"><apiName>getFocus</apiName><shortdesc>
      获取当前具有焦点的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>具有焦点的对象。
      
      </apiDesc><apiType value="flash.display:InteractiveObject"/></apiReturn></apiOperationDef><apiDesc>
      获取当前具有焦点的对象。它可能并非此对象。请注意，此方法不一定返回具有焦点的组件。该实例可能返回组件中具有焦点的内部子组件。若要获取具有焦点的组件，请使用 <codeph>focusManager.focus</codeph> 属性。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      
      返回元素的布局高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的布局高度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的布局大小和布局转换矩阵进行计算。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的布局高度。这是元素在屏幕上进行绘制时所用的大小。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      
      返回元素的布局宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的布局宽度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的布局大小和布局转换矩阵进行计算。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的布局宽度。这是元素在屏幕上进行绘制时所用的大小。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      
      返回元素在屏幕上进行绘制时所用的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素在屏幕上进行绘制时所用的 x 坐标。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 x 坐标。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素在屏幕上进行绘制时所用的 x 坐标。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      
      返回元素在屏幕上进行绘制时所用的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素在屏幕上进行绘制时所用的 y 坐标。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 y 坐标。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素在屏幕上进行绘制时所用的 y 坐标。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      
      返回此元素的布局转换 Matrix3D。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此元素的布局转换 Matrix3D。不要直接修改返回值，请调用 <codeph>setLayoutMatrix()</codeph> 方法。
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      
      返回此元素的布局转换 Matrix3D。
     
      <p>此矩阵通常由组件的转换属性定义，例如，<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph> 属性。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      
      返回用于相对于其同级组件计算组件的布局的转换矩阵。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此元素的布局转换 Matrix。不要直接修改返回值；请调用 <codeph>setLayoutMatrix()</codeph> 方法。
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      
      返回用于相对于其同级组件计算组件的布局的转换矩阵。
           <p>此矩阵通常由组件的 2D 属性（如 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>）定义。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph> 属性。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      
      返回元素的最大高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大高度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框高度。边框位于元素的父坐标空间中，并基于元素的最大大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的最大高度。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      
      返回元素的最大宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大宽度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的最大大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的最大宽度。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      
      返回元素的最小高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大高度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框高度。边框位于元素的父坐标空间中，并基于元素的最小大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的最小高度。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      
      返回元素的最小宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大宽度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的最小大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的最小宽度。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      
      返回元素的首选高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回元素的首选高度。首选高度通常基于默认元素大小和任何显式覆盖。对于 UIComponent，该值与 <codeph>getExplicitOrMeasuredHeight()</codeph> 方法所返回的值相同。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框高度。边框位于元素的父坐标空间中，并基于元素的首选大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的首选高度。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      
      返回元素的首选宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回元素的首选宽度。首选宽度通常基于默认元素大小和任何显式覆盖。对于 UIComponent，该值与 <codeph>getExplicitOrMeasuredWidth()</codeph> 方法所返回的值相同。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的首选大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回元素的首选宽度。   
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getRepeaterItem"><apiName>getRepeaterItem</apiName><shortdesc>
      返回 dataProvider 中由指定的 Repeater 用来生成此 Repeater 的项目；如果此 Repeater 未重复，则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>请求的 repeater 项目。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>whichRepeater</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Repeater 的编号，最外侧的值为 0，依此向内类推。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 <codeph>dataProvider</codeph> 中由指定的 Repeater 用来生成此 Repeater 的项目；如果此 Repeater 未重复，则返回 <codeph>null</codeph>。对于最外侧的 Repeater，<codeph>whichRepeater</codeph> 参数为 0；对于向内数的下一个 Repeater，此参数为 1，依此类推。如果尚未指定 <codeph>whichRepeater</codeph>，则使用最内侧的 Repeater。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getStyle"><apiName>getStyle</apiName><shortdesc>
      获取已在此组件的样式查找链中的某个位置设置过的样式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>样式值。
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取已在此组件的样式查找链中的某个位置设置过的样式属性。
           <p>因为此方法同样可用于获取任何类型的样式属性，所以返回值可能是 Boolean、String、Number、int、uint（用于 RGB 颜色）、Class（用于外观）或任何类型的对象。因此，只需将返回类型指定为 ~~。</p>
           <p>如果要获取特定的样式属性，您需要了解其类型，而且通常希望将结果存储在该类型的某个变量中。无需将 ~~ 转换为该类型。</p>
           <p>
      <codeph> var backgroundColor:uint = getStyle("backgroundColor"); </codeph>
      </p>
           <p>如果在样式查找链中的任何位置都未设置样式属性，则 <codeph>getStyle()</codeph> 的返回值为 <codeph>undefined</codeph>。请注意，<codeph>undefined</codeph> 是一个特殊值，它与 <codeph>false</codeph>、<codeph>""</codeph>、<codeph>NaN</codeph>、<codeph>0</codeph> 或 <codeph>null</codeph> 均不同。如果没有有效的样式值，则总是 <codeph>undefined</codeph>。可以使用方法 <codeph>IStyleManager2.isValidStyleValue()</codeph> 来测试是否设置了值。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:globalToContent"><apiName>globalToContent</apiName><shortdesc>
      将 Point 对象由全局坐标转换为内容坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point，具有随组件而变化的坐标的 Point 对象。
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>一个 Point 对象，用于指定全局 (Stage) 坐标系中的 <i>x</i> 和 <i>y</i> 坐标作为属性。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 <codeph>Point</codeph> 对象由全局坐标转换为内容坐标。全局坐标指定的像素位置随舞台的左上角，即应用窗口的最外侧边缘而变化。内容坐标指定的像素位置随组件内容的左上角而变化，并包括组件的所有内容区域，甚至包括当前剪切掉但必须能够通过滚动组件访问的任何区域。您可以使用内容坐标系设置和获取使用绝对定位的容器中子项的位置。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:hasCSSState"><apiName>hasCSSState</apiName><shortdesc>
      
      如果 currentCSSState 不为 null，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果 <codeph>currentCSSState</codeph> 不为 <codeph>null</codeph>，则返回 <codeph>true</codeph>。默认情况下，<codeph>currentCSSState</codeph> 与 <codeph>currentState</codeph> 相同。如果状态不存在，则返回 false。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      
      如果 <codeph>currentCSSState</codeph> 不为 <codeph>null</codeph>，则返回 <codeph>true</codeph>。通常，您无需直接调用此方法。而是由 <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph> 方法进行调用。
           <p>请注意，Spark 组件将其外观状态用作伪状态。Halo 组件使用 <codeph>currentState</codeph> 属性。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:hasState"><apiName>hasState</apiName><shortdesc conref="mx.core.IStateClient2#hasState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>是否已定义指定的状态 
      
      </apiDesc></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>正在检查的状态的名称。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.IStateClient2#hasState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:horizontalGradientMatrix"><apiName>horizontalGradientMatrix</apiName><shortdesc>
      返回一个框 Matrix，在绘制水平渐变时可以将其作为 rot 参数传递给 drawRoundRect() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>水平渐变的 Matrix。
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>渐变的左坐标（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>渐变的顶坐标（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>渐变的宽度（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>渐变的高度（以像素为单位）。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回一个框 Matrix，在绘制水平渐变时可以将其作为 <codeph>rot</codeph> 参数传递给 <codeph>drawRoundRect()</codeph> 方法。
           <p>由于性能原因，该 Matrix 存储在一个静态变量中，通过调用 <codeph>horizontalGradientMatrix()</codeph> 和 <codeph>verticalGradientMatrix()</codeph> 可以重复使用此变量。因此，您应该在再次调用 <codeph>horizontalGradientMatrix()</codeph> 或 <codeph>verticalGradientMatrix()</codeph> 之前将生成的 Matrix 传递给 <codeph>drawRoundRect()</codeph>。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initAdvancedLayoutFeatures"><apiName>initAdvancedLayoutFeatures</apiName><shortdesc>
      对于组件的某些不常使用的高级布局功能，初始化其实现和存储。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      对于组件的某些不常使用的高级布局功能，初始化其实现和存储。在尝试使用 AdvancedLayoutFeatures 对象实现的任何功能之前调用此函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializationComplete"><apiName>initializationComplete</apiName><shortdesc>
      完成对此组件的初始化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      完成对此组件的初始化。
           <p>此方法是您首次使用 <codeph>addChild()</codeph> 或 <codeph>addChildAt()</codeph> 向父项添加组件时所需执行的最后一段代码。它可处理一些与分派 <codeph>initialize</codeph> 事件相关的辅助工作。如果您正在编写组件，则无需覆盖此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializeAccessibility"><apiName>initializeAccessibility</apiName><shortdesc>
      初始化此组件的辅助功能代码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      初始化此组件的辅助功能代码。
           <p>此方法由 <codeph>initialize()</codeph> 方法调用，用于与组件的辅助功能代码挂钩，这些代码位于 mx.accessibility 包中的单独类中。因为挂钩过程在每个子类中使用不同的静态变量，所以支持辅助功能的每个子类都必须覆盖此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      初始化用于跟踪此组件的重复实例的各个属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>包含用于创建此组件的 Repeater 的父对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      初始化用于跟踪此组件的重复实例的各个属性。
           <p>MXML<codeph>&lt;mx:Repeater/></codeph> 标记可能会导致创建组件的重复实例（Repeater 数据提供程序中的每个项目一个实例）。UIComponent 的 <codeph>instanceIndices</codeph>、<codeph>repeaters</codeph> 和 <codeph>repeaterIndices</codeph> 属性跟踪各实例来自哪个数据项目和哪个 Repeater。</p>
           <p>此方法是内部方法，由 Flex 框架自动调用。您不必调用或覆盖它。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      初始化此组件的内部结构。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      初始化此组件的内部结构。
           <p>初始化 UIComponent 是创建可视组件实例这一过程中的第四个步骤，首次将实例添加到父项时会自动执行此步骤。因此，您一般无需调用 <codeph>initialize()</codeph>；Flex 框架会从 UIComponent 的 <codeph>addChild()</codeph> 和 <codeph>addChildAt()</codeph> 方法的覆盖中为您调用它。</p>
           <p>创建可视化组件实例过程中的第一个步骤是使用 <codeph>new</codeph> 运算符进行构建：</p>
           <pre>
      var okButton:Button = new Button();</pre>
           <p>构建完成后，新的 Button 实例是一个孤立 DisplayObject；该实例尚不包含用于显示其标签的作为子项的 UITextField，也没有父项。</p>
           <p>第二个步骤是为新构建的实例配置适当的属性、样式和事件处理程序：</p>
           <pre>
      okButton.label = "OK";
      okButton.setStyle("cornerRadius", 0);
      okButton.addEventListener(MouseEvent.CLICK, clickHandler);</pre>
           <p>第三个步骤是将该实例添加到父项：</p>
           <pre>
      someContainer.addChild(okButton);</pre>
           <p>首次将组件添加到父项时，调用 <codeph>addChild()</codeph> 或 <codeph>addChildAt()</codeph> 会导致自动调用 <codeph>initialize</codeph>。</p>
           <p>此方法首先分派 <codeph>preinitialize</codeph> 事件，这使利用此组件的开发人员可在创建该组件的内部结构之前改造它。接着，它会调用 <codeph>createChildren()</codeph> 方法来创建组件的内部结构；对于 Button，此方法将为标签创建并添加 UITextField。然后，它会分派 <codeph>initialize</codeph> 事件，这使开发人员可在创建组件的内部结构之后改造它。</p>
           <p>请注意，是首次向父项附加组件的操作触发了对组件内部结构的创建。如果组件的内部结构中包含其他 UIComponent，这就是一个递归过程。在此过程中，DisplayObjects 树以每次一个叶节点的速度增长。</p>
           <p>如果您正在编写组件，则无需覆盖此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      标记组件，以便在稍后屏幕更新期间调用该组件的 updateDisplayList() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      标记组件，以便在稍后屏幕更新期间调用该组件的 <codeph>updateDisplayList()</codeph> 方法。
           <p>Invalidation 是一个很有用的机制，可将组件更改延迟到稍后屏幕更新时进行处理，从而消除了重复的工作。例如，要更改宽度和高度，如果在更改宽度后立即更新组件，然后在设置新高度后再次更新组件，就有些浪费。更改两个属性后再使用新的大小一次性呈示组件，效率会更高。</p>
           <p>很少调用 Invalidation 方法。通常，在组件上设置属性会自动调用合适的 invalidation 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayering"><apiName>invalidateLayering</apiName><shortdesc>
      由某个组件的项目进行调用，以指示其 depth 属性已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.4"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      由某个组件的项目进行调用，以指示其 <codeph>depth</codeph> 属性已更改。请注意，在 <codeph>UIComponent</codeph> 上定义此函数时，实现对复杂分层的支持取决于子类。默认情况下，只有 <codeph>Group</codeph> 和 <codeph>DataGroup</codeph> 支持其子项的任意分层。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/depth"><linktext>深度</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
     
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。如果它们不同，该方法负责镜像元素的内容以及更新元素的布局后转换，以便子代继承镜像的坐标系。IVisualElement 通常通过以下方法实现镜像：使用 postLayoutTransformOffsets 按 -1 缩放 X 轴以及按元素宽度平移原点的 x 坐标。此“镜像”转换的净效果是反转 X 轴增加的方向，而不更改元素相对于其父代的原点的位置。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      此对象影响其布局时（includeInLayout 为 true），使父代大小和显示列表失效的 Helper 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      此对象影响其布局时（includeInLayout 为 true），使父代大小和显示列表失效的 Helper 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      标记组件，以便在稍后屏幕更新期间调用该组件的 commitProperties() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      标记组件，以便在稍后屏幕更新期间调用该组件的 <codeph>commitProperties()</codeph> 方法。
           <p>Invalidation 是一个很有用的机制，可将组件更改延迟到稍后屏幕更新时进行处理，从而消除了重复的工作。例如，要更改文本颜色和大小，如果在更改颜色后立即进行更新，然后在设置大小后再更新大小，就有些浪费。同时更改两个属性后再使用新的大小和颜色一次性呈示文本，效率会更高。</p>
           <p>很少调用 Invalidation 方法。通常，在组件上设置属性会自动调用合适的 invalidation 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      标记组件，以便在稍后屏幕更新期间调用该组件的 measure() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      标记组件，以便在稍后屏幕更新期间调用该组件的 <codeph>measure()</codeph> 方法。
           <p>Invalidation 是一个很有用的机制，可将组件更改延迟到稍后屏幕更新时进行处理，从而消除了重复的工作。例如，要更改文本和字体大小，如果在更改文本后立即进行更新，然后在设置大小后再更新大小，就有些浪费。更改两个属性后再使用新的大小一次性呈示文本，效率会更高。</p>
           <p>很少调用 Invalidation 方法。通常，在组件上设置属性会自动调用合适的 invalidation 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:isOurFocus"><apiName>isOurFocus</apiName><shortdesc>
      通常由包含 UITextField 对象的组件覆盖，其中 UITextField 对象获取焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果 UITextField 对象具有焦点，则返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>包含可以获得焦点的 UITextField 对象的 UIComponent 对象。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      通常由包含 UITextField 对象的组件覆盖，其中 UITextField 对象获取焦点。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc>
      为 keyDown 事件调用的事件处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为 <codeph>keyDown</codeph> 事件调用的事件处理函数。如果覆盖此方法，请确保调用基类版本。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc>
      为 keyUp 事件调用的事件处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为 <codeph>keyUp</codeph> 事件调用的事件处理函数。如果覆盖此方法，请确保调用基类版本。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:localToContent"><apiName>localToContent</apiName><shortdesc>
      将 Point 对象由本地坐标转换为内容坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point，具有随内容坐标系而变化的坐标的 Point 对象。
           </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>一个 Point 对象，用于指定本地坐标系中的 <i>x</i> 和 <i>y</i> 坐标作为属性。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 <codeph>Point</codeph> 对象由本地坐标转换为内容坐标。本地坐标指定的像素位置随组件的左上角而变化。内容坐标指定的像素位置随组件内容的左上角而变化，并包括组件的所有内容区域，甚至包括当前剪切掉但必须能够通过滚动组件访问的任何区域。您可以使用内容坐标系设置和获取使用绝对定位的容器中子项的位置。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToLocal()"><linktext>contentToLocal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc>
      
      如果 cssState 与 currentCSSState 匹配，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果 <codeph>cssState</codeph> 与 <codeph>currentCSSState</codeph> 匹配，则返回 <codeph>true</codeph>。默认情况下，<codeph>currentCSSState</codeph> 与 <codeph>currentState</codeph> 相同。如果不存在任何状态，则返回 null。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/><apiDesc><codeph>CSSCondition.value</codeph> 的可能值。该值表示此组件用于与 CSS 伪选择器匹配的当前状态。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      如果 <codeph>cssState</codeph> 与 <codeph>currentCSSState</codeph> 匹配，则返回 <codeph>true</codeph>。通常，您无需直接调用此方法。而是由 <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph> 方法进行调用。
           <p>请注意，Spark 组件将其外观状态用作伪状态。Halo 组件使用 <codeph>currentState</codeph> 属性。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc>
      
      确定此实例与给定类型相同，还是属于给定类型的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果 <codeph>cssType</codeph> 位于限定的类型选择器的层次结构中，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/><apiDesc>一个 CSSSelector 对象。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      确定此实例与给定类型相同，还是属于给定类型的子类。通常，您无需直接调用此方法。而是由 <codeph>mx.styles.CSSCondition.matchesStyleClient()</codeph> 方法进行调用。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      测量指定的 HTML 文本（该文本中可能包含 &amp;lt;font&amp;gt; 和 &amp;lt;b&amp;gt; 等 HTML 标签），假定该文本显示在单行 UITextField（使用由此 UIComponent 的样式确定的 UITextFormat）中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含文本度量值的 TextLineMetrics 对象。
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>指定要测量的 HTML 文本的 String。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      测量指定的 HTML 文本（该文本中可能包含 <codeph>&lt;font></codeph> 和 <codeph>&lt;b></codeph> 等 HTML 标记），假定该文本显示在单行 UITextField（使用由此 UIComponent 的样式确定的 UITextFormat）中。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureText"><apiName>measureText</apiName><shortdesc>
      测量指定的文本，假定该文本使用由此 UIComponent 的样式确定的 UITextFormat 显示在单行 UITextField（或 UIFTETextField）中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含文本度量值的 TextLineMetrics 对象。
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>指定要测量的文本的 String。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      测量指定的文本，假定该文本使用由此 UIComponent 的样式确定的 UITextFormat 显示在单行 UITextField（或 UIFTETextField）中。该方法对于 Spark 组件无效，因为这些组件不使用 UITextField（或 UIFTETextField）。要测量 Spark 组件中的文本，请获取 spark.components.Label 或 spark.components.RichText 的度量。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:measure"><apiName>measure</apiName><shortdesc>
      计算组件的默认大小和（可选）默认最小大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      计算组件的默认大小和（可选）默认最小大小。此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。
           <p>您无需直接调用此方法。使用 <codeph>addChild()</codeph> 方法将组件添加到某个容器时，以及调用组件的 <codeph>invalidateSize()</codeph> 方法时，Flex 将调用 <codeph>measure()</codeph> 方法。 </p>
           <p>当设置组件的特定高度和宽度时，Flex 不会调用 <codeph>measure()</codeph> 方法，即使您显式调用 <codeph>invalidateSize()</codeph> 方法也不例外。也就是说，仅当组件的 <codeph>explicitWidth</codeph> 属性或 <codeph>explicitHeight</codeph> 属性设置为 NaN 时，Flex 才调用 <codeph>measure()</codeph> 方法。 </p>
           <p>覆盖此方法时，必须设置 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph> 属性以定义默认大小。您可以选择设置 <codeph>measuredMinWidth</codeph> 和 <codeph>measuredMinHeight</codeph> 属性来定义默认的最小大小。</p>
           <p>大多数组件都会根据其显示内容以及影响内容显示的属性来计算这些值。一少部分组件只有硬编码的默认值。 </p>
           <p><codeph>measure()</codeph> 的概念点供组件提供其原始或固有大小作为默认值。因此，<codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph> 属性应由以下几个因素确定：</p>
      <ul>
         <li>组件需要显示的文本量。</li>
         <li>文本的样式，如 <codeph>fontSize</codeph>。</li>
         <li>组件所显示的 JPEG 图像的大小。</li>
         <li>组件子项的测量大小或显式大小。</li>
         <li>任何边框、边距和间隙。</li>
      </ul>
           <p>某些情况下，确定默认值的方式并不固定。例如，对于一个简单的 GreenCircle 组件，可能只需在其 <codeph>measure()</codeph> 方法中设置 measuredWidth = 100 和 measuredHeight = 100 便可提供合理的默认大小。而在其他情况下（例如 TextArea），相应计算（例如查找合适的宽度和高度，使其刚好适合显示所有文本并拥有黄金矩形的高宽比）所耗费的时间可能会过长。</p>
           <p><codeph>measure()</codeph> 的默认实现将 <codeph>measuredWidth</codeph>、<codeph>measuredHeight</codeph>、<codeph>measuredMinWidth</codeph> 和 <codeph>measuredMinHeight</codeph> 设置为 <codeph>0</codeph>。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:move"><apiName>move</apiName><shortdesc>
       将组件移动到其父项内的指定位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>组件在其父项内的左侧位置。
             </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>组件在其父项内的顶部位置。
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       将组件移动到其父项内的指定位置。调用此方法的效果与设置组件的 <codeph>x</codeph> 和 <codeph>y</codeph> 属性完全相同。
             <p>如果您正在覆盖自定义组件中的 <codeph>updateDisplayList()</codeph> 方法，则应调用 <codeph>move()</codeph> 方法，而不是设置 <codeph>x</codeph> 和 <codeph>y</codeph> 属性。二者的区别在于：调用 <codeph>move()</codeph> 方法可更改组件的位置，并在调用此方法时分派 <codeph>move</codeph> 事件；而设置 <codeph>x</codeph> 和 <codeph>y</codeph> 属性也会更改组件的位置，但要在下次刷新屏幕时才分派此事件。</p>
             </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc>
      将样式更改传播到子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>String，指定样式属性的名称。
           </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>递归通知该组件的所有子项。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将样式更改传播到子项。您通常无需调用此方法。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:owns"><apiName>owns</apiName><shortdesc>
      如果 owner 属性链从 child 指向此 UIComponent，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果子项以此 UIComponent 为父项或归其所有，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>一个 UIComponent。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>owner</codeph> 属性链从 <codeph>child</codeph> 指向此 UIComponent，则返回 <codeph>true</codeph>。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      当在父项中添加或删除 UIComponent 对象时由 Flex 调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>此 UIComponent 对象的父项。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当在父项中添加或删除 UIComponent 对象时由 Flex 调用。开发人员通常无需调用此方法。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:prepareToPrint"><apiName>prepareToPrint</apiName><shortdesc>
      准备 IFlexDisplayObject 用于打印。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含当前组件的属性的对象，<codeph>finishPrint()</codeph> 方法需要使用这些属性将此组件还原为其先前的状态。
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>要打印的组件。该组件可能是当前组件，也可能是其中的一个子项。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      准备 IFlexDisplayObject 用于打印。对于 UIComponent 类，此方法不执行任何操作。Flex 容器将覆盖此方法，为打印做准备；例如，从打印的输出内容中删除滚动条。
           <p>此方法通常不适用于应用程序开发人员。 </p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc>
      为此组件及其所有后代生成或重新生成 CSS 样式缓存，前提条件是递归参数为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>以递归方式为此组件的所有子组件重新生成样式缓存。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为此组件构建或重新构建 CSS 样式缓存；如果 <codeph>recursive</codeph> 参数为 <codeph>true</codeph>，还会为此组件的所有后代执行同样的操作。
           <p>在下列情形中，Flex 框架将调用此方法：</p>
           <ul>
        <li>使用 <codeph>addChild()</codeph> 或 <codeph>addChildAt()</codeph> 方法将 UIComponent 添加到父项时。</li>
        <li>更改 UIComponent 的 <codeph>styleName</codeph> 属性时。</li>
        <li>使用 CSSStyleDeclaration 的 <codeph>setStyle()</codeph> 方法设置 CSS 选择器中的样式时。</li>
      </ul>
           <p>由于构建样式缓存涉及到复杂的计算，因此除非必要，应避免更改 <codeph>styleName</codeph> 或设置选择器样式。</p>
           <p>通过调用 UIComponent 的 <codeph>setStyle()</codeph> 方法来设置实例样式时，不会调用此方法。与设置选择器样式相比，设置实例样式的速度较快。</p>
           <p>您无需调用或覆盖此方法。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
      针对每个效果事件，将 EffectManager 注册为一个事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>效果事件的名称。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      针对每个效果事件，将 EffectManager 注册为一个事件侦听器。您通常无需调用此方法。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:removeStyleClient"><apiName>removeStyleClient</apiName><shortdesc>
      从该组件实例删除非可视样式客户端。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>作为 <codeph>styleClient</codeph> 参数传入的非可视样式客户端。 
     
      </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>styleClient</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>将从该组件的非可视样式客户端列表删除的 <codeph>IAdvancedStyleClient</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从该组件实例删除非可视样式客户端。调用此方法后，非可视样式客户端将不再继承该组件实例的样式更改。作为副作用，该方法将 <codeph>styleClient</codeph> 参数的 <codeph>styleParent</codeph> 属性设置为 <codeph>null</codeph>。如果 <codeph>styleClient</codeph> 未添加到该组件实例，将不会执行操作。 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.addStyleClient.xml"><linktext>addStyleClient</linktext></link><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      重放指定的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果重放成功，则为 <codeph>true</codeph>。  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>要重放的事件。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      重放指定的事件。如果已在 superclass 中定义默认重放行为，组件作者可能应调用 super.replayAutomatableEvent。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      
      使用提供的 ID 解析子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>符合条件的子项的数组；如果可以解析所有子项，则为 <codeph>null</codeph>。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/><apiDesc>描述子项的几组属性。条件可以包含能导致多个子项匹配的常规表达式值。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      使用提供的 ID 解析子项。ID 是 <codeph>createAutomationIDPart()</codeph> 方法提供的一组属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      构建 UIComponent 时将调用此方法，并且每当 ResourceManager 分派“change”事件用于指示本地化资源已经过某种更改时，都会再次调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      构建 UIComponent 时将调用此方法，并且每当 ResourceManager 分派 <codeph>"change"</codeph> 事件用于指示本地化资源已经过某种更改时，都会再次调用此方法。
           <p>在下列情形中分派此事件：设置 ResourceManager 的 <codeph>localeChain</codeph> 属性时，资源模块完成加载时，以及调用 ResourceManager 的 <codeph>update()</codeph> 方法时。</p>
           <p>子类应覆盖此方法，并在调用 <codeph>super.resourcesChanged()</codeph> 后，执行任何适当的操作以响应新资源值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resumeBackgroundProcessing"><apiName>resumeBackgroundProcessing</apiName><shortdesc>
      在调用 suspendBackgroundProcessing() 之后继续对使用 callLater() 排队的方法进行背景处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在调用 <codeph>suspendBackgroundProcessing()</codeph> 之后继续对使用 <codeph>callLater()</codeph> 排队的方法进行背景处理。
           <p>有关详细信息，请参阅对 <codeph>suspendBackgroundProcessing()</codeph> 的描述。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      调整对象大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>对象的宽度。
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>对象的高度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整对象大小。调用 <codeph>setActualSize()</codeph> 方法并不设置 <codeph>explictWidth</codeph> 和 <codeph>explicitHeight</codeph> 属性，因此，将来进行布局计算时可能会导致对象还原为先前的大小。这一点与直接设置 <codeph>width</codeph> 和 <codeph>height</codeph> 属性不同。此方法主要适用于实现 <codeph>updateDisplayList()</codeph> 方法的组件开发人员、Effects 以及 LayoutManager。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      设置一个布局约束值的方式，与设置此组件的约束样式的方式相同。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>约束样式的名称，可以是以下任意一个：left、right、top、bottom、verticalCenter、horizontalCenter、baseline
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>可以使用以下两种格式之一指定约束值。可以将其指定为数值字符串，如 "10"，还可以将其指定为 "标识符:数值" 形式的字符串。对于 "标识符:数值" 字符串，标识符为 ConstraintRow 或 ConstraintColumn 的 <codeph>id</codeph>。例如，"cc1:10" 的值指定具有 <codeph>id</codeph> "cc1" 的 ConstraintColumn 的值为 10。
           
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置一个布局约束值的方式，与设置此组件的约束样式的方式相同。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setCurrentState"><apiName>setCurrentState</apiName><shortdesc>
      设置当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>新视图状态的名称。
           </apiDesc></apiParam><apiParam><apiItemName>playTransition</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则在视图状态更改时播放相应的转换。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置当前状态。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/currentState"><linktext>currentState</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      设置此组件的焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      设置此组件的焦点。组件可能依次将焦点传递给子组件。
           <p><b>注意：</b>使用此方法设置焦点时，只有 TextInput 和 TextArea 控件加亮显示。当用户按 Tab 键切换控件时，所有控件都加亮显示。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      
      设置元素在屏幕上进行绘制时所用的坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>边框左上角的 X 坐标。 
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>边框左上角的 Y 坐标。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，元素的定位方式为：其边框的左上角为 (x, y)。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      设置元素在屏幕上进行绘制时所用的坐标。
           <p>请注意，调用 <codeph>setLayoutBoundSize()</codeph> 方法会影响布局位置，因此请在调用 <codeph>setLayoutBoundSize()</codeph> 之后再调用 <codeph>setLayoutBoundPosition()</codeph>。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      
      设置元素的布局大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>元素的布局宽度。
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>元素的布局高度。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果 <codeph>postLayoutTransform</codeph> 为 true，则指定的大小就是元素的边框的大小。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      设置元素的布局大小。这是元素在屏幕上进行绘制时所用的大小。
      
      <p>如果 <codeph>width</codeph> 和/或 <codeph>height</codeph> 参数尚未指定 (NaN)，则 Flex 会将该元素的布局大小设置为首选宽度和/或首选高度。</p>
     
      <p>请注意，调用 <codeph>setLayoutBoundSize()</codeph> 方法会影响布局位置，因此请在调用 <codeph>setLayoutBoundSize()</codeph> 之后再调用 <codeph>setLayoutBoundPosition()</codeph>。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      
      设置用于计算组件相对于其同级组件的布局大小和位置的转换 Matrix3D。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/><apiDesc>矩阵。
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>设置为 <codeph>true</codeph>，将使父容器重新布局其子代。通常情况下，会将 <codeph>true</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      设置用于计算组件相对于其同级组件的布局大小和位置的转换 Matrix3D。
           <p>此矩阵通常由组件的转换属性定义，例如，<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph> 属性。</p>
      
      <p>请注意，在父坐标中计算时，布局 Matrix3D 是在 <codeph>getPreferredSize()</codeph>、<codeph>getMinSize()</codeph>、<codeph>getMaxSize()</codeph>、<codeph>getLayoutSize()</codeph> 中进行分解的；在父坐标和子坐标中计算时，布局 Matrix3D 是在 <codeph>getLayoutPosition()</codeph> 中进行分解的。计算转换矩阵的布局通常会显式调用此方法，并使用子坐标中的大小。调用此方法的布局会将 <codeph>false</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法，这样不会触发后续的布局传递。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      
      设置用于相对于其同级组件计算组件的布局大小和位置的转换 Matrix。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/><apiDesc>矩阵。
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>设置为 <codeph>true</codeph>，将使父容器重新布局其子代。通常情况下，会将 <codeph>true</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      设置用于相对于其同级组件计算组件的布局大小和位置的转换 Matrix。
           <p>此矩阵通常由组件的 2D 属性（如 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>）定义。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph>。</p>
      
      <p>请注意，在父坐标中计算时，布局 Matrix 是在 <codeph>getPreferredSize()</codeph>、<codeph>getMinSize()</codeph>、<codeph>getMaxSize()</codeph>、<codeph>getLayoutSize()</codeph> 方法中进行分解的；在父坐标和子坐标中计算时，布局 Matrix 是在 <codeph>getLayoutPosition()</codeph> 中进行分解的。计算转换矩阵的布局通常会显式调用此方法，并使用子坐标中的大小。调用此方法的布局会将 <codeph>false</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法，这样不会触发后续的布局传递。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:setStretchXY"><apiName>setStretchXY</apiName><shortdesc>
      在水平方向和垂直方向上，指定转换拉伸因子。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stretchX</apiItemName><apiType value="Number"/><apiDesc>拉伸因子的水平组件。
      </apiDesc></apiParam><apiParam><apiItemName>stretchY</apiItemName><apiType value="Number"/><apiDesc>拉伸因子的垂直组件。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在水平方向和垂直方向上，指定转换拉伸因子。在进行任何其他转换之前，将拉伸因子应用到计算的矩阵。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setStyle"><apiName>setStyle</apiName><shortdesc>
      对此组件实例设置样式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称。
           </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>样式的新值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      对此组件实例设置样式属性。
           <p>此方法可能会覆盖以全局方式设置的样式。</p>
           <p>调用 <codeph>setStyle()</codeph> 方法会降低性能。仅在必要时才使用它。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setVisible"><apiName>setVisible</apiName><shortdesc>
      当 visible 属性发生更改时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc><codeph>visible</codeph> 属性的新值。指定 <codeph>true</codeph> 可显示组件，指定 <codeph>false</codeph> 可隐藏组件。
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>true</codeph>，则不分派事件。如果为 <codeph>false</codeph>，则当组件变为可见时分派 <codeph>show</codeph> 事件，当组件变为不可见时分派 <codeph>hide</codeph> 事件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当 <codeph>visible</codeph> 属性发生更改时调用。请设置 <codeph>visible</codeph> 属性来显示或隐藏组件，而不是直接调用此方法。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:stateChanged"><apiName>stateChanged</apiName><shortdesc>
      当状态改变以检查状态特定的样式是否应用到此组件时，会调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="String"/><apiDesc>旧状态的名称。
           </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="String"/><apiDesc>新状态的名称。
           </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>设置为 <codeph>true</codeph>，以执行递归检查。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当状态改变以检查状态特定的样式是否应用到此组件时，会调用此方法。如果有机会为当前状态匹配 CSS 伪选择器，则需要为此实例重新生成样式缓存，并且，如果将 <codeph>recursive</codeph> 参数设置为 <codeph>true</codeph>，则可能需要为所有子项重新生成样式缓存。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      检测对样式属性的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称；如果此组件的所有样式均已更改，则为 null。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      检测对样式属性的更改。设置任何样式属性后，Flex 将调用 <codeph>styleChanged()</codeph> 方法，向其传递所设置样式的名称。
           <p>此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。创建自定义组件时，可以覆盖 <codeph>styleChanged()</codeph> 方法，以检查传递给它的样式名称，并对更改进行相应处理。这允许您覆盖现有样式的默认行为或添加自己的自定义样式属性。</p>
           <p>如果您处理样式属性，覆盖 <codeph>styleChanged()</codeph> 方法时应调用 <codeph>invalidateDisplayList()</codeph> 方法，以使 Flex 在下次更新屏幕时执行组件的 <codeph>updateDisplayList()</codeph> 方法。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      首次初始化组件样式时，Flex 会调用 stylesInitialized() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      首次初始化组件样式时，Flex 会调用 <codeph>stylesInitialized()</codeph> 方法。
           <p>此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。Flex 可以保证在首次调用组件的 <codeph>measure</codeph> 和 <codeph>updateDisplayList</codeph> 方法之前充分初始化组件的样式。对于大多数组件而言，这就足够了。但是，如果您需要早些访问样式值，则可以覆盖 stylesInitialized() 函数，以在首次初始化样式属性后立即访问这些属性。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      阻止对使用 callLater() 排队的方法进行背景处理，直到调用 resumeBackgroundProcessing() 为止。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      阻止对使用 <codeph>callLater()</codeph> 排队的方法进行背景处理，直到调用 <codeph>resumeBackgroundProcessing()</codeph> 为止。
           <p>如果您使用需要无中断地执行的严格时间要求代码，这些方法可能非常有用。例如，如果将 Effect 的 <codeph>suspendBackgroundProcessing</codeph> 属性设置为 <codeph>true</codeph>，则会在开始播放效果时自动调用 <codeph>suspendBackgroundProcessing()</codeph>，并在停止播放时调用 <codeph>resumeBackgroundProcessing</codeph> 以确保动画流畅。</p>
           <p>LayoutManager 使用 <codeph>callLater()</codeph>，这意味着在调用 <codeph>suspendBackgroundProcessing()</codeph> 和 <codeph>resumeBackgroundProcessing()</codeph> 期间不会调用 <codeph>commitProperties()</codeph>、<codeph>measure()</codeph> 和 <codeph>updateDisplayList()</codeph>。</p>
           <p>无论对外部方法还是内部方法（即外部方法调用的方法）而言，调用 <codeph>suspendBackgroundProcessing()</codeph> 和 <codeph>resumeBackgroundProcessing()</codeph> 都很安全，因为这些方法实际上会增加或减少用于确定是否处理背景的计数。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformAround"><apiName>transformAround</apiName><shortdesc conref="mx.core.ILayoutElement#transformAround()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>在组件自己的坐标中用于相对于其父项保持固定的点。
           </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的缩放的新值。
           </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的旋转的新值
           </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的平移的新值。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的布局后缩放的新值。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的布局后旋转的新值。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的布局后平移的新值。
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则父容器的大小和显示将无效。调用此方法的布局会传递 <codeph>false</codeph>，这样不会触发后续的布局传递。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.ILayoutElement#transformAround()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformPointToParent"><apiName>transformPointToParent</apiName><shortdesc>
      一种实用程序方法，用于将以该对象的本地坐标指定的点转换为在该对象父坐标中的相应位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>localPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>将要转换的点，指定为对象的本地坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>保存布局前结果的 Vector3D 点。如果为 null，则忽略该参数。
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>保存布局后结果的 Vector3D 点。如果为 null，则忽略该参数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      一种实用程序方法，用于将以该对象的本地坐标指定的点转换为在该对象父坐标中的相应位置。如果 <codeph>position</codeph> 和 <codeph>postLayoutPosition</codeph> 参数为非 null，将对这两个参数设置布局前和布局后结果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      绘制对象和/或设置其子项的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
           </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      绘制对象和/或设置其子项的大小和位置。此方法是一种高级方法，可在创建 UIComponent 的子类时覆盖。
           <p>您无需直接调用此方法。使用 <codeph>addChild()</codeph> 方法将组件添加到容器时，以及调用组件的 <codeph>invalidateDisplayList()</codeph> 方法时，Flex 将调用 <codeph>updateDisplayList()</codeph> 方法。 </p>
           <p>如果组件没有子项，您就可以借助此方法使用针对组件的 Graphics 对象（如 <codeph>graphics.drawRect()</codeph>）上的一些方法以编程方式进行绘制。</p>
           <p>如果组件有子项，您就可以借助此方法调用其子项上的 <codeph>move()</codeph> 和 <codeph>setActualSize()</codeph> 方法。</p>
           <p>组件可以通过编程方式进行绘制，即使组件有子项时也不例外。在上述任一操作中，您都应使用组件的 <codeph>unscaledWidth</codeph> 和 <codeph>unscaledHeight</codeph> 作为其边界。</p>
           <p>请注意，您应使用 <codeph>unscaledWidth</codeph> 和 <codeph>unscaledHeight</codeph> 属性而不是 <codeph>width</codeph> 和 <codeph>height</codeph> 属性，这很重要。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      
      验证子项的位置和大小，并绘制其他可视内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      验证子项的位置和大小，并绘制其他可视内容。如果使用此 ILayoutManagerClient 调用 <codeph>LayoutManager.invalidateDisplayList()</codeph> 方法，则当更新显示列表时会调用 <codeph>validateDisplayList()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateNow"><apiName>validateNow</apiName><shortdesc>
      验证并更新此对象的属性和布局，如果需要的话重绘对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      验证并更新此对象的属性和布局，如果需要的话重绘对象。通常只有当脚本执行完毕后，才会处理要求进行大量计算的处理属性。例如，对 <codeph>width</codeph> 属性的设置可能会延迟，因为此设置需要重新计算这些对象的子项或父项的宽度。如果脚本多次设置了 <codeph>width</codeph> 属性，则延迟处理可防止进行多次处理。此方法允许您手动覆盖此行为。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      由布局逻辑用于通过调用 commitProperties() 方法来验证组件的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      由布局逻辑用于通过调用 <codeph>commitProperties()</codeph> 方法来验证组件的属性。通常，子类化程序应覆盖 <codeph>commitProperties()</codeph> 方法，而不是覆盖此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateSize"><apiName>validateSize</apiName><shortdesc>
      
      如果使用此 ILayoutManagerClient 调用 LayoutManager.invalidateSize() 方法，随后在测量时调用了 validateSize() 方法，则验证组件的度量大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>true</codeph>，则调用对象子项的此方法。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      如果使用此 ILayoutManagerClient 调用 <codeph>LayoutManager.invalidateSize()</codeph> 方法，随后在测量时调用了 <codeph>validateSize()</codeph> 方法，则验证组件的度量大小。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
      处理分配给此组件的验证程序分派的 valid 和 invalid 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>用于验证的事件对象。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理分配给此组件的验证程序分派的 <codeph>valid</codeph> 和 <codeph>invalid</codeph> 事件。
           <p>您通常通过向验证程序分配事件侦听器来处理由验证程序分派的 <codeph>valid</codeph> 和 <codeph>invalid</codeph> 事件。如果您希望直接在正在验证的组件中处理验证事件，则可以覆盖此方法以处理 <codeph>valid</codeph> 和 <codeph>invalid</codeph> 事件。通常，您会在覆盖过程中调用 <codeph>super.validationResultHandler(event)</codeph>。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:verticalGradientMatrix"><apiName>verticalGradientMatrix</apiName><shortdesc>
      返回一个框 Matrix，在绘制垂直渐变时可以将其作为 rot 参数传递给 drawRoundRect()。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>垂直渐变的 Matrix。
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>渐变的左坐标（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>渐变的顶坐标（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>渐变的宽度（以像素为单位）。
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>渐变的高度（以像素为单位）。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回一个框 Matrix，在绘制垂直渐变时可以将其作为 <codeph>rot</codeph> 参数传递给 <codeph>drawRoundRect()</codeph>。
           <p>由于性能原因，该 Matrix 存储在一个静态变量中，通过调用 <codeph>horizontalGradientMatrix()</codeph> 和 <codeph>verticalGradientMatrix()</codeph> 可以重复使用此变量。因此，您应该在再次调用 <codeph>horizontalGradientMatrix()</codeph> 或 <codeph>verticalGradientMatrix()</codeph> 之前将生成的 Matrix 传递给 <codeph>drawRoundRect()</codeph>。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UIComponent:DEFAULT_MAX_HEIGHT"><apiName>DEFAULT_MAX_HEIGHT</apiName><shortdesc>
      maxHeight 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>maxHeight</codeph> 属性的默认值。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MAX_WIDTH"><apiName>DEFAULT_MAX_WIDTH</apiName><shortdesc>
      maxWidth 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>maxWidth</codeph> 属性的默认值。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_HEIGHT"><apiName>DEFAULT_MEASURED_HEIGHT</apiName><shortdesc>
      measuredHeight 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredHeight</codeph> 属性的默认值。大多数组件都计算 measuredHeight，但有些组件是基于流的，所以必须选择看似合理的数字。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_HEIGHT"><apiName>DEFAULT_MEASURED_MIN_HEIGHT</apiName><shortdesc>
      measuredMinHeight 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredMinHeight</codeph> 属性的默认值。大多数组件都计算 measuredMinHeight，但有些组件是基于流的，所以必须选择看似合理的数字。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_WIDTH"><apiName>DEFAULT_MEASURED_MIN_WIDTH</apiName><shortdesc>
      measuredMinWidth 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>40</apiData><apiType value="Number"/><apiDefaultValue>40
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredMinWidth</codeph> 属性的默认值。大多数组件都计算 measuredMinWidth，但有些组件是基于流的，所以必须选择看似合理的数字。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_WIDTH"><apiName>DEFAULT_MEASURED_WIDTH</apiName><shortdesc>
      measuredWidth 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/><apiDefaultValue>160
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredWidth</codeph> 属性的默认值。大多数组件都计算 measuredWidth，但有些组件是基于流的，所以必须选择看似合理的数字。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityDescription:get"><apiName>accessibilityDescription</apiName><shortdesc>
      一个方便的存取器，用于访问此 UIComponent 的 accessibilityProperties 对象的 description 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      一个方便的存取器，用于访问此 UIComponent 的 <codeph>accessibilityProperties</codeph> 对象的 <codeph>description</codeph> 属性。
           <p>getter 仅返回 <codeph>accessibilityProperties.description</codeph>。如果 <codeph>accessibilityProperties</codeph> 为 null，则返回“”。setter 先检查 <codeph>accessibilityProperties</codeph> 是否为 null，如果是，则将其设置为新的 AccessibilityProperties 实例。随后会设置 <codeph>accessibilityProperties.description</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityEnabled:get"><apiName>accessibilityEnabled</apiName><shortdesc>
      一个方便的存取器，用于访问此 UIComponent 的 accessibilityProperties 对象的 silent 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个方便的存取器，用于访问此 UIComponent 的 <codeph>accessibilityProperties</codeph> 对象的 <codeph>silent</codeph> 属性。
           <p>请注意，<codeph>accessibilityEnabled</codeph> 与 silent 相反；<codeph>silent</codeph> 为 <codeph>false</codeph> 时，<codeph>accessibilityEnabled</codeph> 为 <codeph>true</codeph>。</p>
           <p>getter 仅返回 <codeph>accessibilityProperties.silent</codeph>。如果 <codeph>accessibilityProperties</codeph> 为 null，则返回 <codeph>true</codeph>。setter 先检查 <codeph>accessibilityProperties</codeph> 是否为 null，如果是，则将其设置为新的 AccessibilityProperties 实例。随后会设置 <codeph>accessibilityProperties.silent</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityName:get"><apiName>accessibilityName</apiName><shortdesc>
      一个方便的存取器，用于访问此 UIComponent 的 accessibilityProperties 对象的 name 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      一个方便的存取器，用于访问此 UIComponent 的 <codeph>accessibilityProperties</codeph> 对象的 <codeph>name</codeph> 属性。
           <p>getter 仅返回 <codeph>accessibilityProperties.name</codeph>。如果 accessibilityProperties 为 null，则返回“”。setter 先检查 <codeph>accessibilityProperties</codeph> 是否为 null，如果是，则将其设置为新的 AccessibilityProperties 实例。随后会设置 <codeph>accessibilityProperties.name</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityShortcut:get"><apiName>accessibilityShortcut</apiName><shortdesc>
      一个方便的存取器，用于访问此 UIComponent 的 accessibilityProperties 对象的 shortcut 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      一个方便的存取器，用于访问此 UIComponent 的 <codeph>accessibilityProperties</codeph> 对象的 <codeph>shortcut</codeph> 属性。
           <p>getter 仅返回 <codeph>accessibilityProperties.shortcut</codeph>。如果 <codeph>accessibilityProperties</codeph> 为 null，则返回“”。setter 先检查 <codeph>accessibilityProperties</codeph> 是否为 null，如果是，则将其设置为新的 AccessibilityProperties 实例。随后会设置 <codeph>accessibilityProperties.shortcut</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:activeEffects:get"><apiName>activeEffects</apiName><shortdesc>
      组件上当前播放的效果列表，如 EffectInstance 实例的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      组件上当前播放的效果列表，如 EffectInstance 实例的 Array。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      处理自动化相关功能的委托对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      处理自动化相关功能的委托对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      如果此组件启用了自动化，则为 true；否则为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果此组件启用了自动化，则为 true；否则为 false。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      可用作此对象的标识符的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      可用作此对象的标识符的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      用于自动化目的的此组件的所有者。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      用于自动化目的的此组件的所有者。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      用于自动化目的的此组件的父级。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      用于自动化目的的此组件的父级。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      
      IAutomationTabularData 接口的实现，可用于检索数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      <codeph>IAutomationTabularData</codeph> 接口的实现，可用于检索数据。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      如果此组件对于自动化是可见的，则为 true；否则为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果此组件对于自动化是可见的，则为 true；否则为 false。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      组件第一行文本的基线的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      组件第一行文本的基线的 y 坐标。
     
      <p>此属性用于实现 <codeph>baseline</codeph> 约束样式，还可用于将 FormItem 的标签与 FormItem 中的控件对齐。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baseline:get"><apiName>baseline</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将属性设置为其默认值 <codeph>undefined</codeph>，请使用 MXML 中的 @Clear () 指令或 ActionScript 代码中的 <codeph>undefined</codeph> 值。例如，在 MXML 代码中，<codeph>baseline.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>baseline</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.baseline = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>baseline</codeph> 约束的设置。</p>
      
      
      从锚点目标到控件的基线位置的垂直距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域的上边缘。在具有高级约束的布局中，目标可以是一个约束行。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:bottom:get"><apiName>bottom</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将属性设置为其默认值 <codeph>undefined</codeph>，请使用 MXML 中的 @Clear () 指令或 ActionScript 代码中的 <codeph>undefined</codeph> 值。例如，在 MXML 代码中，<codeph>bottom.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>botton</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.bottom = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>bottom</codeph> 约束的设置。</p>
      
      
      从组件的下边缘到锚点目标的下边缘的垂直距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束行。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc>
      指定此对象的位图缓存策略。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>UIComponentCachePolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定此对象的位图缓存策略。在 MXML 中，可能值为 <codeph>"on"</codeph>、<codeph>"off"</codeph> 和 <codeph>"auto"</codeph>（默认值）。
           <p>在 ActionScript 中，可能值为 <codeph>UIComponentCachePolicy.ON</codeph>、<codeph>UIComponentCachePolicy.OFF</codeph> 和 <codeph>UIComponentCachePolicy.AUTO</codeph>（默认值）。</p>
           <p><ul>
        <li>如果值为 <codeph>UIComponentCachePolicy.ON</codeph>，则表示对象始终作为位图缓存。</li>
        <li>如果值为 <codeph>UIComponentCachePolicy.OFF</codeph>，则表示对象从不作为位图缓存。</li>
        <li>如果值为 <codeph>UIComponentCachePolicy.AUTO</codeph>，则表示框架将使用试探法确定此对象是否应作为位图缓存。</li>
      </ul></p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:className:get"><apiName>className</apiName><shortdesc>
      此实例的类的名称，如“Button”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      此实例的类的名称，如 <codeph>"Button"</codeph>。
           <p>此字符串不包括包名称。如果您还需要包名称，请调用 flash.utils 包中的 <codeph>getQualifiedClassName()</codeph> 方法。此方法将返回一个字符串，如 <codeph>"mx.controls::Button"</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc>
      返回鼠标在内容坐标系中的 x 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      返回鼠标在内容坐标系中的 <i>x</i> 位置。内容坐标指定的像素位置随组件内容的左上角而变化，并包括组件的所有内容区域，甚至包括当前剪切掉但必须能够通过滚动组件访问的任何区域。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc>
      返回内容坐标系中鼠标的 y 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      返回内容坐标系中鼠标的 <i>y</i> 位置。内容坐标指定的像素位置随组件内容的左上角而变化，并包括组件的所有内容区域，甚至包括当前剪切掉但必须能够通过滚动组件访问的任何区域。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      匹配 CSS 伪选择器时要使用的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      匹配 CSS 伪选择器时要使用的状态。默认情况下，此状态为 <codeph>currentState</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:currentState:get"><apiName>currentState</apiName><shortdesc>
      组件的当前视图状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="currentStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      组件的当前视图状态。将其设置为 <codeph>""</codeph> 或 <codeph>null</codeph> 可将组件重置回其基本状态。
           <p>当您使用此属性设置组件的状态时，Flex 将应用您定义的转移。您还可以使用 <codeph>setCurrentState()</codeph> 方法设置当前状态，此方法可以有选择性地更改状态，而无需应用转移。</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setCurrentState()"><linktext>setCurrentState()</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:cursorManager:get"><apiName>cursorManager</apiName><shortdesc>
      获取控制此组件及其同级组件的光标的 CursorManager。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.managers:ICursorManager"/></apiValueDef><apiDesc>
      获取控制此组件及其同级组件的光标的 CursorManager。每个顶级窗口都包含自己的 CursorManager 实例；为确保使用的实例正确，请使用此方法。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:depth:get"><apiName>depth</apiName><shortdesc>
      
      确定容器内各项目的呈示顺序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      确定容器内各项目的呈示顺序。Spark 容器根据项目的 <codeph>depth</codeph> 属性确定这些项目的顺序，具有最低深度的项目在后面，具有较高深度的项目在前面。具有相同深度值的项目按照添加到容器中的顺序显示。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc>
      引用 UIComponentDescriptor（如果有），过去曾通过 createComponentFromDescriptor() 方法使用它来创建此 UIComponent 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      引用 UIComponentDescriptor（如果有），过去曾通过 <codeph>createComponentFromDescriptor()</codeph> 方法使用它来创建此 UIComponent 实例。如果此 UIComponent 实例并非基于描述符创建，则此属性为 null。
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:designLayer:get"><apiName>designLayer</apiName><shortdesc conref="mx.core.IVisualElement#designLayer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#designLayer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:document:get"><apiName>document</apiName><shortdesc>
      引用与此 UIComponent 相关联的文档对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      引用与此 UIComponent 相关联的文档对象。文档对象是位于 Flex 应用程序、MXML 组件或 AS 组件层次结构顶层的 Object。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc>
      指定 UIComponent 对象是否接收 doubleClick 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 UIComponent 对象是否接收 <codeph>doubleClick</codeph> 事件。默认值为 <codeph>false</codeph>，即 UIComponent 对象不接收 <codeph>doubleClick</codeph> 事件。
           <p>还必须将 <codeph>mouseEnabled</codeph> 属性设置为 <codeph>true</codeph>（默认值），这样对象才能接收 <codeph>doubleClick</codeph> 事件。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:enabled:get"><apiName>enabled</apiName><shortdesc conref="mx.core.IUIComponent#enabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="enabledChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.IUIComponent#enabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:errorString:get"><apiName>errorString</apiName><shortdesc>
      当验证程序监视组件并且验证失败时，组件的错误提示中将显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="errorStringChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      当验证程序监视组件并且验证失败时，组件的错误提示中将显示的文本。
           <p>您可以使用 <codeph>errorString</codeph> 属性显示组件的验证错误，而无需实际使用 validator 类。当您将 String 值写入 <codeph>errorString</codeph> 属性时，Flex 将在组件周围绘制红色边框以指示验证错误，并且当您将鼠标指针移至组件上方时，该 String 将作为验证错误消息显示在工具提示中，就像验证程序检测到验证错误一样。</p>
           <p>若要清除验证错误，请为 <codeph>errorString</codeph> 属性写入一个空 String ""。</p>
           <p>请注意，为 <codeph>errorString</codeph> 属性写入值不会触发 valid 或 invalid 事件，只会更改边框颜色和显示验证错误消息。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      指定该组件在组件坐标中显式高度（以像素为单位）的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定该组件在组件坐标中显式高度（以像素为单位）的数字。
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于该值是组件坐标值，因此针对其父项的真正 <codeph>explicitHeight</codeph> 受 <codeph>scaleY</codeph> 属性影响。</p>
      <p>设置 <codeph>height</codeph> 属性，同时也会将此属性设置为指定的高度值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      布局过程中父级要考虑的组件最大建议高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最大建议高度。此值采用组件坐标（以像素为单位）。
           <p>应用程序开发人员一般不设置 explicitMaxHeight 属性。而是设置 maxHeight 属性的值，该值设置 explicitMaxHeight 属性。不会更改 maxHeight 的值。</p>
           <p>在布局过程中，如果应用程序开发人员明确设置了 maxHeight，则使用 explicitMaxHeight 的值。否则，使用 maxHeight 的默认值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>maxHeight</codeph> 受 <codeph>scaleY</codeph> 属性影响。有些组件从理论上没有高度限制。在这些情况下，可将其 <codeph>maxHeight</codeph> 设置为 <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      布局过程中父级要考虑的组件最大建议宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最大建议宽度。此值采用组件坐标（以像素为单位）。
           <p>应用程序开发人员一般不设置 explicitMaxWidth 属性。而是设置 maxWidth 属性的值，该值设置 explicitMaxWidth 属性。不会更改 maxWidth 的值。</p>
           <p>在布局过程中，如果应用程序开发人员明确设置了 maxWidth，则使用 explicitMaxWidth 的值。否则，使用 maxWidth 的默认值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>maxWidth</codeph> 受 <codeph>scaleX</codeph> 属性影响。有些组件从理论上没有宽度限制。在这些情况下，可将其 <codeph>maxWidth</codeph> 设置为 <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      布局过程中父级要考虑的组件最小建议高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explictMinHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最小建议高度。此值采用组件坐标（以像素为单位）。
           <p>应用程序开发人员一般不设置 explicitMinHeight 属性。而是设置 minHeight 属性的值，该值设置 explicitMinHeight 属性。不会更改 minHeight 的值。</p>
           <p>在布局过程中，如果应用程序开发人员明确设置了 minHeight，则使用 explicitMinHeight 的值。否则，使用 measuredMinHeight 的值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>minHeight</codeph> 受 <codeph>scaleY</codeph> 属性影响。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      布局过程中父级要考虑的组件最小建议宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最小建议宽度。此值采用组件坐标（以像素为单位）。
           <p>应用程序开发人员一般不设置 explicitMinWidth 属性。而是设置 minWidth 属性的值，该值设置 explicitMinWidth 属性。不会更改 minWidth 的值。</p>
           <p>在布局过程中，如果应用程序开发人员明确设置了 minWidth，则使用 explicitMinWidth 的值。否则，使用 measuredMinWidth 的值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>minWidth</codeph> 受 <codeph>scaleX</codeph> 属性影响。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      指定该组件在组件坐标中显式宽度（以像素为单位）的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定该组件在组件坐标中显式宽度（以像素为单位）的数字。
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于该值是组件坐标值，因此针对其父项的真正 <codeph>explicitWidth</codeph> 受 <codeph>scaleX</codeph> 属性影响。</p>
      <p>设置 <codeph>width</codeph> 属性，同时也会将此属性设置为指定的宽度值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:flexContextMenu:get"><apiName>flexContextMenu</apiName><shortdesc>
      此 UIComponent 的上下文菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:IFlexContextMenu</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此 UIComponent 的上下文菜单。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      指示切换到此组件时，是否可以获得焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指示切换到此组件时，是否可以获得焦点。当 UIComponent 用作另一组件的子组件时，可以将 <codeph>focusEnabled</codeph> 设置为 <codeph>false</codeph>，以便外部组件成为可获得焦点的实体。如果此属性是 <codeph>false</codeph>，则焦点将转换到已将 <codeph>focusEnable</codeph> 设置为 <codeph>true</codeph> 的第一个父项。
           <p>默认值为 <codeph>true</codeph>，spark.components.Scroller 组件除外。对于该组件，默认值为 <codeph>false</codeph>。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.Scroller.xml"><linktext>spark.components.Scroller</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      获取控制此组件及其同级组件的焦点的 FocusManager。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      获取控制此组件及其同级组件的焦点的 FocusManager。每个弹出框都有自己的焦点循环，因此也有自己的 FocusManager 实例。为确保使用的实例正确，请使用此方法。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      与此对象相关联的焦点窗格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      与此对象相关联的焦点窗格。如果对象的任一子项包含焦点，该对象将具有焦点窗格。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:hasComplexLayoutMatrix:get"><apiName>hasComplexLayoutMatrix</apiName><shortdesc>
      如果 UIComponent 具有任何非平移 (x,y) 转换属性，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果 UIComponent 具有任何非平移 (x,y) 转换属性，则返回 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc>
      一个标志，指示子对象是否能够获得焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hasFocusableChildrenChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示子对象是否能够获得焦点。
     
      <p><b>注意：</b>此属性与 Flash Player 使用的 <codeph>tabChildren</codeph> 属性类似。应该将 <codeph>hasFocusableChildren</codeph> 属性用于 Flex 应用程序。请勿使用 <codeph>tabChildren</codeph> 属性。</p>
     
      <p>此属性通常为 <codeph>false</codeph>，因为大多数组件既可以自己获得焦点，也可以委托单个内部子组件获得焦点（但显示为该组件获得了焦点）。例如，TextInput 控件包含一个可成为焦点的 RichEditableText 子控件，但实际上当 RichEditableText 子组件获得焦点时，却显示为 TextInput 获得了焦点。TextInput 将 <codeph>hasFocusableChildren</codeph> 设置为 <codeph>false</codeph>，因为获得焦点的组件为 TextInput。其内部结构是一个抽象概念。</p>
           <p>通常只有像 TabNavigator 和 Accordion 这样的导航器组件将此标志设置为 <codeph>true</codeph>，因为它们在按 Tab 键时获得了焦点，但焦点会在进一步按 Tab 键时转移到子容器的组件中。</p>
           <p>默认值为 <codeph>false</codeph>，spark.components.Scroller 组件除外。对于该组件，默认值为 <codeph>true</codeph>。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.Scroller.xml"><linktext>spark.components.Scroller</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      
      如果元素具有 3D 矩阵，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果元素具有 3D 矩阵，则为 <codeph>true</codeph>。
           <p>使用 <codeph>hasLayoutMatrix3D</codeph>，而不是调用和检查 <codeph>getLayoutMatrix3D()</codeph> 的返回值，因为该方法会返回一个有效的矩阵，即使元素是 2D 的也是如此。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:height:get"><apiName>height</apiName><shortdesc>
      指定组件在父坐标中的高度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="heightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定组件在父坐标中的高度的数字（以像素为单位）。默认值为 0，但当 Flex 在应用程序中设置完组件的大小后，此属性将包含实际的组件高度。
           <p>请注意：您可以在 MXML<codeph>height</codeph> 属性中指定一个百分比值（如 <codeph>height="100%"</codeph>），但无法在 ActionScript 的 <codeph>height</codeph> 属性中使用百分比值；可改用 <codeph>percentHeight</codeph> 属性。</p>
           <p>设置此属性将导致 <codeph>resize</codeph> 事件被分派。有关何时分派此事件的详细信息，请参阅 <codeph>resize</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/percentHeight"><linktext>percentHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将属性设置为其默认值 <codeph>undefined</codeph>，请使用 MXML 中的 @Clear () 指令或 ActionScript 代码中的 <codeph>undefined</codeph> 值。例如，在 MXML 代码中，<codeph>horizontalCenter.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>horizontalCenter</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.horizontalCenter = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>horizontalCenter</codeph> 约束的设置。</p>
      
      
      从组件中心到锚点目标的内容区域中心的水平距离（以像素为单位）。
           <p>默认锚点目标是容器本身。</p>
           <p>在具有高级约束的布局中，锚点目标可以是一个约束列。那么，内容区域就是前一列（或容器侧）与目标列之间的空间。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“constraintColumnId:value”将属性值设置为一个字符串，如“col1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:id:get"><apiName>id</apiName><shortdesc>
      组件 ID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      组件 ID。此值将作为对象的实例名称，因此不应包含任何空格或特殊字符。应用程序中的每个组件都应具有唯一的 ID。
           <p>如果将使用第三方工具对您的应用程序进行测试，请为每个组件赋予一个有意义的 ID。测试工具使用 ID 代表其脚本中的控件，因此使用有意义的名称可使脚本更具可读性。例如，将某个按钮的值设置为 submit_button 而不是 b1 或 button1。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc>
      指定此组件是否包含在父容器的布局中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="includeInLayoutChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定此组件是否包含在父容器的布局中。如果为 <codeph>true</codeph>，则该对象将包含在其父容器的布局中，并由其父容器根据其布局规则调整其大小并确定其位置。如果为 <codeph>false</codeph>，则对象的父容器的布局不影响该对象的大小和位置。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      此组件的继承样式链的开头内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此组件的继承样式链的开头内容。<codeph>getStyle()</codeph> 方法只需访问 <codeph>inheritingStyles[styleName]</codeph>，即可搜索整个与原型链接的链。此对象由 <codeph>initProtoChain()</codeph> 设置。开发人员通常不需要直接访问此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:initialized:get"><apiName>initialized</apiName><shortdesc>
      一个标志，用于确定某个对象是否已通过布局的所有三个阶段：提交、测量和布局（假设每个阶段都是必需的）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于确定某个对象是否已通过布局的所有三个阶段：提交、测量和布局（假设每个阶段都是必需的）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndex:get"><apiName>instanceIndex</apiName><shortdesc>
      重复组件的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      重复组件的索引。如果组件不在 Repeater 中，则值为 -1。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      一个 Array，包含从此 UIComponent 对象的父文档引用该对象所需的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个 Array，包含从此 UIComponent 对象的父文档引用该对象所需的索引。除非 UIComponent 对象位于一个或多个 Repeater 中，否则该 Array 为空。第一个元素与最外面的 Repeater 对应。例如，如果 id 为“b”并且 instanceIndices 为 [2,4]，则在父文档中将以 b[2][4] 的形式对其引用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:is3D:get"><apiName>is3D</apiName><shortdesc>
      
      当元素为 3D 时，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      当元素为 3D 时，则为 <codeph>true</codeph>。元素也可以是 3D 的，因为它具有 3D 转换属性或 3D 布局后转换偏移，或二者都有。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isDocument:get"><apiName>isDocument</apiName><shortdesc>
      如果此 UIComponent 实例为文档对象，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果此 UIComponent 实例为文档对象，则为 <codeph>true</codeph>。这意味着该对象位于 Flex 应用程序、MXML 组件或 ActionScript 组件层次结构的顶层。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc>
      PopUpManager 将其设置为 true 以指示已弹出该组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      PopUpManager 将其设置为 <codeph>true</codeph> 以指示已弹出该组件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:left:get"><apiName>left</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将 MXML 中属性的状态特定的值设置为其默认值 <codeph>undefined</codeph>，请使用 @Clear() 指令。例如，在 MXML 代码中，<codeph>left.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>left</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.left = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>left</codeph> 约束的设置。</p>
     
      
      从组件的左边缘到锚点目标的左边缘的水平距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束列。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“col1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      布局过程中父级要考虑的组件最大建议高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最大建议高度。此值采用组件坐标（以像素为单位）。此属性的默认值由组件开发人员设置。
           <p>组件开发人员使用此属性设置组件高度的上限。</p>
           <p>如果应用程序开发人员覆盖 maxHeight 的默认值，则将在 explicitMaxHeight 中存储新值。不会更改 maxHeight 的默认值。因此，在布局过程中，如果应用程序开发人员明确设置了 maxHeight，则对组件最大建议高度使用 explicitMaxHeight 的值。如果用户未明确设置 maxHeight，则使用默认值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>maxHeight</codeph> 受 <codeph>scaleY</codeph> 属性影响。有些组件从理论上没有高度限制。在这些情况下，可将其 <codeph>maxHeight</codeph> 设置为 <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      布局过程中父级要考虑的组件最大建议宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMaxWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最大建议宽度。此值采用组件坐标（以像素为单位）。此属性的默认值由组件开发人员设置。
           <p>组件开发人员使用此属性设置组件宽度的上限。</p>
           <p>如果应用程序开发人员覆盖 maxWidth 的默认值，则将在 explicitMaxWidth 中存储新值。不会更改 maxWidth 的默认值。因此，在布局过程中，如果应用程序开发人员明确设置了 maxWidth，则对组件最大建议宽度使用 explicitMaxWidth 的值。如果用户未明确设置 maxWidth，则使用默认值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>maxWidth</codeph> 受 <codeph>scaleX</codeph> 属性影响。有些组件从理论上没有宽度限制。在这些情况下，可将其 <codeph>maxWidth</codeph> 设置为 <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      组件的默认高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      组件的默认高度（以像素为单位）。此值由 <codeph>measure()</codeph> 方法设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc>
      组件的默认最小高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      组件的默认最小高度（以像素为单位）。此值由 <codeph>measure()</codeph> 方法设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc>
      组件的默认最小宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      组件的默认最小宽度（以像素为单位）。此值由 <codeph>measure()</codeph> 方法设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      组件的默认宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      组件的默认宽度（以像素为单位）。此值由 <codeph>measure()</codeph> 方法设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      布局过程中父级要考虑的组件最小建议高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最小建议高度。此值采用组件坐标（以像素为单位）。默认值取决于组件的实现方式。
           <p>如果应用程序开发人员设置 minHeight 的值，则将在 explicitMinHeight 中存储新值。不会更改 minHeight 的默认值。因此，在布局过程中，如果应用程序开发人员明确设置了 minHeight，则对组件最小建议高度使用 explicitMinHeight 的值。如果应用程序开发人员未明确设置 minHeight，则使用 measuredMinHeight 的值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>minHeight</codeph> 受 <codeph>scaleY</codeph> 属性影响。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      布局过程中父级要考虑的组件最小建议宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="explicitMinWidthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      布局过程中父级要考虑的组件最小建议宽度。此值采用组件坐标（以像素为单位）。默认值取决于组件的实现方式。
           <p>如果应用程序开发人员设置 minWidth 的值，则将在 explicitMinWidth 中存储新值。不会更改 minWidth 的默认值。因此，在布局过程中，如果应用程序开发人员明确设置了 minWidth，则对组件最小建议宽度使用 explicitMinWidth 的值。如果应用程序开发人员未明确设置 minWidth，则使用 measuredMinWidth 的值。</p>
           <p>容器使用此值计算组件的大小和位置。组件本身确定其默认大小时不会使用此值。因此，如果父项为 Container，则此属性可能不会产生任何效果，要么就是容器在此属性中不起作用。由于此值位于组件坐标中，因此与其父项相关的真正 <codeph>minWidth</codeph> 受 <codeph>scaleX</codeph> 属性影响。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      模块工厂用作上下文，用于为此组件使用嵌入字体以及查找用于控制此组件样式的样式管理器。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      单击时是否可获得焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      单击时是否可获得焦点。如果值为 <codeph>false</codeph>，则焦点将转换到已将 <codeph>mouseFocusEnable</codeph> 设置为 <codeph>true</codeph> 的第一个父项。例如，您可以将某个 Button 控件的此属性设置为 <codeph>false</codeph>，这样可使用 Tab 键将焦点移动到该控件，但在单击该控件时不会使其获得焦点。
          <p>对于大多数子类（除了 Spark TabBar），默认值为 <codeph>true</codeph>。对于 Spark TabBar，默认值为 <codeph>false</codeph>。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      此对象在所属关系层次结构中的深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      此对象在所属关系层次结构中的深度。测量和布局代码都使用此编号。如果 DisplayList 中没有此组件，则值为 0。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      此组件的非继承样式链的开头内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此组件的非继承样式链的开头内容。<codeph>getStyle()</codeph> 方法只需访问 <codeph>nonInheritingStyles[styleName]</codeph>，即可搜索整个与原型链接的链。此对象由 <codeph>initProtoChain()</codeph> 设置。开发人员通常不需要直接访问此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      
      此容器包含的自动化子项数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      此容器包含的自动化子项数。此和不应包含任何复合子项，尽管它在自动化层次中确实包含这些不重要的子项。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentApplication:get"><apiName>parentApplication</apiName><shortdesc>
      引用包含此 UIComponent 实例的 Application 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="initialize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      引用包含此 UIComponent 实例的 Application 对象。此 Application 对象可能存在于另一应用程序的 SWFLoader 控件中，依此类推，从而形成可使用 parentApplication 遍历的 Application 对象链。
           <p>Application 的 <codeph>parentApplication</codeph> 属性永远不会是其本身；它通常是加载该对象的 Application 或为空（对于顶级 Application）。</p>
           <p>使用 <codeph>parentApplication</codeph> 属性遍历应用程序链与使用 <codeph>parentDocument</codeph> 属性遍历文档链类似。您可以使用 Application 类的 <codeph>application</codeph> 属性访问顶级应用程序。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentDocument:get"><apiName>parentDocument</apiName><shortdesc>
      引用此 UIComponent 的父文档对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="initialize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      引用此 UIComponent 的父文档对象。文档对象是位于 Flex 应用程序、MXML 组件或 AS 组件层次结构顶层的 UIComponent。
           <p>对于此类 Application 对象，<codeph>parentDocument</codeph> 属性为空。此属性在 MXML 脚本中非常有用，可以使文档对象链提升一个层次。它有助于使用 <codeph>parentDocument.parentDocument</codeph> 遍历此链等。</p>
           <p>它的类型为 Object，以便创作者可以访问始祖文档对象上的属性和方法而无需进行转换。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parent:get"><apiName>parent</apiName><shortdesc conref="mx.core.IVisualElement#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      以组件父代大小百分比的方式指定组件高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      以组件父代大小百分比的方式指定组件高度。允许的值为 0-100。默认值为 NaN。设置 <codeph>height</codeph> 或 <codeph>explicitHeight</codeph> 属性会将此属性重置为 NaN。
           <p>仅当先前已设置此属性时，此属性才会返回数值；它不会以百分比形式反映组件的确切大小。</p>
           <p>对于 UITextField 控件，此属性始终设置为 NaN。</p>
      
      <p>在 Spark 布局中使用时，该属性用于计算组件在缩放和旋转之后的边界高度。例如，如果组件旋转 90 度，则指定 <codeph>percentHeight</codeph> 将影响组件宽度。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      以组件父代大小百分比的方式指定组件宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resize"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      以组件父代大小百分比的方式指定组件宽度。允许的值为 0-100。默认值为 NaN。设置 <codeph>width</codeph> 或 <codeph>explicitWidth</codeph> 属性会将此属性重置为 NaN。
           <p>仅当先前已设置此属性时，此属性才会返回数值；它不会以百分比形式反映组件的确切大小。</p>
           <p>对于 UITextField 控件，此属性始终设置为 NaN。</p>
     
      <p>在 Spark 布局中使用时，该属性用于计算组件在缩放和旋转之后的边界宽度。例如，如果组件旋转 90 度，则指定 <codeph>percentWidth</codeph> 将影响组件高度。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc conref="mx.core.IVisualElement#postLayoutTransformOffsets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#postLayoutTransformOffsets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      临时或延迟子项创建操作后设置为 true，具体取决于发生对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      临时或延迟子项创建操作后设置为 <codeph>true</codeph>，具体取决于发生对象。对于 Container 对象，在 <codeph>createComponentsFromDescriptors()</codeph> 方法结束（即 Container 对象使用其子项描述符创建子项）后，该属性设置为 <codeph>true</codeph>。
           <p>例如，如果 Accordion 容器使用延迟的实例化，则在用户导航到 Accordion 容器的第二个窗格并且该窗格创建其子项后，此窗格的 <codeph>processedDescriptors</codeph> 属性才变为 <codeph>true</codeph>。但是，如果 Accordion 已将 <codeph>creationPolicy</codeph> 属性设置为 <codeph>"all"</codeph>，则在应用程序启动期间此容器第二个窗格的 <codeph>processedDescriptors</codeph> 属性设置为 <codeph>true</codeph>。</p>
           <p>非容器类都没有描述符，所以对于这些类，<codeph>createChildren()</codeph> 方法创建任何内部组件子项后，该属性设置为 <codeph>true</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndex:get"><apiName>repeaterIndex</apiName><shortdesc>
      项目在生成此 UIComponent 的 Repeater 数据提供程序中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      项目在生成此 UIComponent 的 Repeater 数据提供程序中的索引。如果 UIComponent 是由单个 Repeater 对象创建的，请使用此属性，而不要使用 <codeph>repeaterIndices</codeph> 属性。如果此 UIComponent 是由嵌套 Repeater 对象创建的，请使用 <codeph>repeaterIndices</codeph> 属性。
           <p>如果此 UIComponent 并非由 Repeater 创建，则该属性设置为 -1。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      一个 Array，包含项目在生成此 UIComponent 的父文档的 Repeater 数据提供程序中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个 Array，包含项目在生成此 UIComponent 的父文档的 Repeater 数据提供程序中的索引。除非此 UIComponent 位于一个或多个 Repeater 中，否则该 Array 为空。
           <p>Array 中的第一个元素与最外面的 Repeater 对应。例如，如果 <codeph>repeaterIndices</codeph> 为 [2,4]，则表示使用项目 <codeph>dataProvider[2]</codeph> 的外部 Repeater 和使用项目 <codeph>dataProvider[4]</codeph> 的内部 Repeater。</p>
           <p>请注意，如果任一 Repeater 的 <codeph>startingIndex</codeph> 属性并非 0，则此属性将与 <codeph>instanceIndices</codeph> 属性不同。例如，即使 Repeater 从 <codeph>dataProvider[4]</codeph> 开始，第一个重复对象的文档引用也是 b[0]，而不是 b[4]。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeater:get"><apiName>repeater</apiName><shortdesc>
      对生成此 UIComponent 的父文档中 Repeater 对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IRepeater</apiValueClassifier></apiValueDef><apiDesc>
      对生成此 UIComponent 的父文档中 Repeater 对象的引用。如果 UIComponent 是由单个 Repeater 对象创建的，请使用此属性，而不要使用 <codeph>repeaters</codeph> 属性。如果此 UIComponent 是由嵌套 Repeater 对象创建的，请使用 <codeph>repeaters</codeph> 属性。
           <p>如果此 UIComponent 并非由 Repeater 创建，则该属性设置为 <codeph>null</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      一个 Array，包含对生成此 UIComponent 的父文档中 Repeater 对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个 Array，包含对生成此 UIComponent 的父文档中 Repeater 对象的引用。除非此 UIComponent 位于一个或多个 Repeater 中，否则该 Array 为空。第一个元素与最外面的 Repeater 对象对应。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc>
      对管理所有应用程序本地化资源的对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="unused"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc>
      对管理所有应用程序本地化资源的对象的引用。此项是 singleton 实例，实现 IResourceManager 接口。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:right:get"><apiName>right</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将属性设置为其默认值 <codeph>undefined</codeph>，请使用 MXML 中的 @Clear () 指令或 ActionScript 代码中的 <codeph>undefined</codeph> 值。例如，在 MXML 代码中，<codeph>right.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>right</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.right = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>right</codeph> 约束的设置。</p>
      
      
      从组件的右边缘到锚点目标的右边缘的水平距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束列。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“col1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationX:get"><apiName>rotationX</apiName><shortdesc>
     表示 DisplayObject 实例相对于 3D 父容器距离其原始方向的 x 轴旋转（以度为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     表示 DisplayObject 实例相对于 3D 父容器距离其原始方向的 x 轴旋转（以度为单位）。从 0 到 180 的值表示顺时针方向旋转；从 0 到 -180 的值表示逆时针方向旋转。对于此范围之外的值，可以通过加上或减去 360 获得该范围内的值。在计算过程中，Flex 的任一 2D 布局都会忽略此属性。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationY:get"><apiName>rotationY</apiName><shortdesc>
     表示 DisplayObject 实例相对于 3D 父容器距离其原始方向的 y 轴旋转（以度为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     表示 DisplayObject 实例相对于 3D 父容器距离其原始方向的 y 轴旋转（以度为单位）。从 0 到 180 的值表示顺时针方向旋转；从 0 到 -180 的值表示逆时针方向旋转。对于此范围之外的值，可以通过加上或减去 360 获得该范围内的值。在计算过程中，Flex 的任一 2D 布局都会忽略此属性。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationZ:get"><apiName>rotationZ</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:UIComponent:rotation:get"><apiName>rotation</apiName><shortdesc conref="mx.core.IFlexDisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.IFlexDisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleX:get"><apiName>scaleX</apiName><shortdesc>
      用于指定水平缩放系数的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleXChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于指定水平缩放系数的数字。
           <p>默认值为 1.0，即不缩放对象。将 <codeph>scaleX</codeph> 值设为 2.0 表示对象将放大 2 倍，将 <codeph>scaleX</codeph> 值设为 0.5 表示对象将缩小 2 倍。</p>
           <p>值 0.0 是无效值。不要将它设置为 0.0，但可以设置为一个很小的值，或者将 <codeph>visible</codeph> 属性设置为 <codeph>false</codeph> 来隐藏此组件。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleY:get"><apiName>scaleY</apiName><shortdesc>
      用于指定垂直缩放系数的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleYChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于指定垂直缩放系数的数字。
           <p>默认值为 1.0，即不缩放对象。将 <codeph>scaleY</codeph> 值设为 2.0 表示对象将放大 2 倍，将 <codeph>scaleY</codeph> 值设为 0.5 表示对象将缩小 2 倍。</p>
           <p>值 0.0 是无效值。不要将它设置为 0.0，但可以设置为一个很小的值，或者将 <codeph>visible</codeph> 属性设置为 <codeph>false</codeph> 来隐藏此组件。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleZ:get"><apiName>scaleZ</apiName><shortdesc>
      指定沿着 z 轴的缩放因子的数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="scaleZChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定沿着 z 轴的缩放因子的数值。
           <p>沿着 z 轴缩放不会影响在 z=0 平面中保持平放的典型组件。对于具有已应用 3D 转换的子项的组件，或具有非零 transformZ 的组件，将受到影响。</p>
      
      <p>默认值为 1.0，即不缩放对象。</p>
     
      <p>在计算过程中，Flex 的任一 2D 布局都会忽略此属性。 </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:screen:get"><apiName>screen</apiName><shortdesc>
      返回包含此对象的基本绘图表面大小和位置的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      返回包含此对象的基本绘图表面大小和位置的对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
       
      用于确定自动化对象是否显示在自动化层次中的标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
      用于确定自动化对象是否显示在自动化层次中的标志。层次中不可见的容器的子项显示为下一个最高可见父项的子项。通常，用于布局的容器（如框和画布）不显示在层次中。
     
      <p>如果合适，某些控件强制其子项在层次中显示。例如，List 控件将始终强制项呈示器（包括框）显示在层次中。实现程序必须支持将此属性设置为 <codeph>true</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:states:get"><apiName>states</apiName><shortdesc>
      为此组件定义的视图状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      为此组件定义的视图状态。您只能对应用程序的根或 MXML 组件的根标签指定 <codeph>states</codeph> 属性。如果对其他控件指定此属性，则编译器将生成错误。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc>
      存储此对象的内嵌继承样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc>
      存储此对象的内嵌继承样式。第一次调用该组件的 <codeph>setStyle()</codeph> 方法来设置继承样式时，将创建此 CSSStyleDeclaration。开发人员通常不需要直接访问此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleManager:get"><apiName>styleManager</apiName><shortdesc>
      返回此组件使用的 StyleManager 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IStyleManager2</apiValueClassifier></apiValueDef><apiDesc>
      返回此组件使用的 StyleManager 实例。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleName:get"><apiName>styleName</apiName><shortdesc>
      此组件使用的类样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此组件使用的类样式。它可以是 String、CSSStyleDeclaration 或 IStyleClient。
           <p>如果是 String，则它是 <codeph>&lt;fx:Style></codeph> 标签或 CSS 文件中一个或多个空格分隔类声明的名称。您不能在 <codeph>styleName</codeph> 中使用句号。例如，如果您使用名为 <codeph>".bigText"</codeph> 的类样式，请将 <codeph>styleName</codeph> 属性设置为 <codeph>"bigText"</codeph>（无句号）。</p>
           <p>如果是 IStyleClient（通常是 UIComponent），则此组件将使用 <codeph>styleName</codeph> 对象中的所有样式。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleParent:get"><apiName>styleParent</apiName><shortdesc>
      组件的父项用于评估后代选择器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      组件的父项用于评估后代选择器。父项也必须是要参加高级样式声明的 IAdvancedStyleClient。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      返回此组件使用的 SystemManager 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      返回此组件使用的 SystemManager 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      一个标志，指示该对象是否能够通过 Tab 键获得焦点。这与 Flash Player 使用的 tabEnabled 属性类似。对于处理键盘输入的组件该标志通常为 true，但是控件栏中的一些组件将其设置为 false，因为它们不能像编辑器一样从另外的组件窃取焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="tabFocusEnabledChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示该对象是否能够通过 Tab 键获得焦点。
     
      <p>这与 Flash Player 使用的 <codeph>tabEnabled</codeph> 属性类似。</p>
     
      <p>对于处理键盘输入的组件该标志通常为 <codeph>true</codeph>，但是控件栏中的一些组件将其设置为 <codeph>false</codeph>，因为它们不能像编辑器一样从另外的组件窃取焦点。
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:toolTip:get"><apiName>toolTip</apiName><shortdesc>
      要在 ToolTip 中显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="toolTipChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要在 ToolTip 中显示的文本。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:top:get"><apiName>top</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将属性设置为其默认值 <codeph>undefined</codeph>，请使用 MXML 中的 @Clear () 指令或 ActionScript 代码中的 <codeph>undefined</codeph> 值。例如，在 MXML 代码中，<codeph>top.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>top</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.top = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>top</codeph> 约束的设置。</p>
      
      
      从组件的上边缘到锚点目标的上边缘的垂直距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束行。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transformX:get"><apiName>transformX</apiName><shortdesc>
      设置组件转换中心的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      设置组件转换中心的 x 坐标。
     
      <p>当该组件为 Spark 转换效果的目标时，可以通过设置 <codeph>AnimateTransform.autoCenterTransform</codeph> 属性来覆盖该属性。如果 <codeph>autoCenterTransform</codeph> 为 <codeph>false</codeph>，则转换中心由效果目标的 <codeph>transformX</codeph>、<codeph>transformY</codeph> 和 <codeph>transformZ</codeph> 属性决定。如果 <codeph>autoCenterTransform</codeph> 为 <codeph>true</codeph>，则效果出现在目标中心 <codeph>(width/2, height/2)</codeph> 附近。</p>
           <p>在 Spark 效果类上设置该属性会覆盖目标组件上的设置。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformX"><linktext>spark.effects.AnimateTransform.transformX</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformY:get"><apiName>transformY</apiName><shortdesc>
      设置组件转换中心的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      设置组件转换中心的 y 坐标。
     
      <p>当该组件为 Spark 转换效果的目标时，可以通过设置 <codeph>AnimateTransform.autoCenterTransform</codeph> 属性来覆盖该属性。如果 <codeph>autoCenterTransform</codeph> 为 <codeph>false</codeph>，则转换中心由效果目标的 <codeph>transformX</codeph>、<codeph>transformY</codeph> 和 <codeph>transformZ</codeph> 属性决定。如果 <codeph>autoCenterTransform</codeph> 为 <codeph>true</codeph>，则效果出现在目标中心 <codeph>(width/2, height/2)</codeph> 附近。</p>
           <p>在 Spark 效果类上设置该属性会覆盖目标组件上的设置。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformY"><linktext>spark.effects.AnimateTransform.transformY</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformZ:get"><apiName>transformZ</apiName><shortdesc>
      设置组件转换中心的 z 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      设置组件转换中心的 z 坐标。
     
      <p>当该组件为 Spark 转换效果的目标时，可以通过设置 <codeph>AnimateTransform.autoCenterTransform</codeph> 属性来覆盖该属性。如果 <codeph>autoCenterTransform</codeph> 为 <codeph>false</codeph>，则转换中心由效果目标的 <codeph>transformX</codeph>、<codeph>transformY</codeph> 和 <codeph>transformZ</codeph> 属性决定。如果 <codeph>autoCenterTransform</codeph> 为 <codeph>true</codeph>，则效果出现在目标中心 <codeph>(width/2, height/2)</codeph> 附近。</p>
           <p>在 Spark 效果类上设置该属性会覆盖目标组件上的设置。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformZ"><linktext>spark.effects.AnimateTransform.transformZ</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transitions:get"><apiName>transitions</apiName><shortdesc>
      一个 Transition 对象 Array，其中的每个 Transition 对象都定义一组效果，用于在视图状态发生更改时播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个 Transition 对象 Array，其中的每个 Transition 对象都定义一组效果，用于在视图状态发生更改时播放。
           </apiDesc></apiValueDetail><related-links><link href="mx.states.xml#Transition"><linktext>mx.states.Transition</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      当前在此对象上进行补间的属性数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      当前在此对象上进行补间的属性数组。
           <p>用于警告 EffectManager 此对象的某些属性正在进行补间，因此 EffectManger 不能尝试对相同属性设置动画效果。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:uid:get"><apiName>uid</apiName><shortdesc>
      对象的唯一标识符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      对象的唯一标识符。Flex 数据驱动的控件（包括作为 List 类的子类的所有控件）使用 UID 跟踪数据提供程序项目。
           <p>Flex 可自动创建和管理 UID。但是，有时您必须通过实现 IUID 接口来提供自己的 <codeph>uid</codeph> 属性，或通过提供自己的 <codeph>uid</codeph> 属性来提高处理效率。对于 Flex 中的大多数用途，UID 不必是全局唯一标识符，通过数据服务发送消息除外。</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUID"><linktext>IUID</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledHeight:get"><apiName>unscaledHeight</apiName><shortdesc>
      用于确定组件的未缩放高度的简便方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      用于确定组件的未缩放高度的简便方法。组件的绘图和子布局的所有设置均应在以此宽度为宽的矩形边框中完成，还应将此高度作为参数传递到 <codeph>updateDisplayList()</codeph> 中。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledWidth:get"><apiName>unscaledWidth</apiName><shortdesc>
      用于确定组件的未缩放宽度的简便方法。组件的绘图和子布局的所有设置均应在以此宽度为宽的矩形边框中完成，还应将此宽度作为参数传递到 updateDisplayList() 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      用于确定组件的未缩放宽度的简便方法。组件的绘图和子布局的所有设置均应在以此宽度为宽的矩形边框中完成，还应将此宽度作为参数传递到 <codeph>updateDisplayList()</codeph> 中。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      一个标志，确定某个对象是否已通过所有三个阶段的布局验证（假设需要通过所有验证）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，确定某个对象是否已通过所有三个阶段的布局验证（假设需要通过所有验证）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
      供验证程序用来将子字段与此组件相关联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      供验证程序用来将子字段与此组件相关联。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      对于组件，此布局约束属性是基于类似命名的样式的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      <p>对于组件，此布局约束属性是基于类似命名的样式的外观。要将属性设置为其默认值 <codeph>undefined</codeph>，请使用 MXML 中的 @Clear () 指令或 ActionScript 代码中的 <codeph>undefined</codeph> 值。例如，在 MXML 代码中，<codeph>verticalCenter.s2="@Clear()"</codeph> 将取消对状态 s2 中 <codeph>verticalCenter</codeph> 约束的设置。或者在 ActionScript 代码中，<codeph>button.verticalCenter = undefined</codeph> 将取消对 <codeph>button</codeph> 中 <codeph>verticalCenter</codeph> 约束的设置。</p>
      
      
      从组件中心到锚点目标的内容区域中心的垂直距离（以像素为单位）。
           <p>默认锚点目标是容器本身。</p>
           <p>在具有高级约束的布局中，锚点目标可以是一个约束行。那么，内容区域就是前一行（或容器侧）与目标行之间的空间。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“constraintColumnId:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:visible:get"><apiName>visible</apiName><shortdesc>
      显示对象是否可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="show"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      显示对象是否可见。不可见的显示对象已被禁用。例如，如果 InteractiveObject 实例的 <codeph>visible=false</codeph>，则无法单击该对象。 
           <p>当设置为 <codeph>true</codeph> 时，此对象将分派 <codeph>show</codeph> 事件。当设置为 <codeph>false</codeph> 时，此对象将分派 <codeph>hide</codeph> 事件。无论在哪种情况下，对象的子项都不会生成 <codeph>show</codeph> 或 <codeph>hide</codeph> 事件，除非明确地针对该对象编写一个实现来执行此操作。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:width:get"><apiName>width</apiName><shortdesc>
      指定组件在父坐标中的宽度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="widthChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定组件在父坐标中的宽度的数字（以像素为单位）。默认值为 0，但当 Flex 在应用程序中设置完组件的大小后，此属性将包含实际的组件宽度。
           <p>请注意：您可以在 MXML<codeph>width</codeph> 属性中指定一个百分比值（如 <codeph>width="100%"</codeph>），但无法在 ActionScript 的 <codeph>width</codeph> 属性中使用百分比值。可改用 <codeph>percentWidth</codeph> 属性。</p>
           <p>设置此属性将导致 <codeph>resize</codeph> 事件被分派。有关何时分派此事件的详细信息，请参阅 <codeph>resize</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/percentWidth"><linktext>percentWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:x:get"><apiName>x</apiName><shortdesc>
      指定组件在其父容器中的水平位置（以像素为单位）的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="xChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定组件在其父容器中的水平位置（以像素为单位）的数字。
           <p>如果组件的父级是布局容器（如 HBox、Grid 或 Form），则直接设置此属性或调用 <codeph>move()</codeph> 都不会有任何效果，或只有暂时的效果，因为这些容器的布局计算会将 <codeph>x</codeph> 位置设置为此计算结果。但当父级是 Canvas 或其他绝对定位容器时，则必须几乎始终设置 <codeph>x</codeph> 属性，因为这些容器的默认值为 0。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:y:get"><apiName>y</apiName><shortdesc>
      指定组件在其父容器中的垂直位置（以像素为单位）的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="yChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定组件在其父容器中的垂直位置（以像素为单位）的数字。
           <p>如果组件的父级是布局容器（如 HBox、Grid 或 Form），则直接设置此属性或调用 <codeph>move()</codeph> 都不会有任何效果，或只有暂时的效果，因为这些容器的布局计算会将 <codeph>x</codeph> 位置设置为此计算结果。但当父级是 Canvas 或其他绝对定位容器时，则必须几乎始终设置 <codeph>x</codeph> 属性，因为这些容器的默认值为 0。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:z:get"><apiName>z</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true" name="zChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="mx.core:UIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc>
      供 Flex 使用，表示建议为对象实施位图缓存。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      供 Flex 使用，表示建议为对象实施位图缓存。如果 <codeph>cachePolicy</codeph> 为 <codeph>UIComponentCachePolicy.AUTO</codeph>，则 <codeph>cacheHeuristic</codeph> 用于控制对象的 <codeph>cacheAsBitmap</codeph> 属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      用于相对于其同级组件计算组件的布局的转换矩阵。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      用于相对于其同级组件计算组件的布局的转换矩阵。此矩阵由组件的 3D 属性（包括诸如 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph> 以及 <codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>scaleZ</codeph>、<codeph>z</codeph> 和 <codeph>transformZ 等 2D 属性</codeph>）定义。
      
      <p>大多数组件上并未设置任何 3D 转换属性。</p>
      
      <p>该布局矩阵与 <codeph>postLayoutTransformOffsets</codeph> 属性的值相结合用于确定组件的最终计算矩阵。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:maintainProjectionCenter:set"><apiName>maintainProjectionCenter</apiName><shortdesc>
      如果为 true，则该组件将使其投影矩阵在其边框的中央保持居中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果为 true，则该组件将使其投影矩阵在其边框的中央保持居中。如果未在组件上定义投影矩阵，则会自动添加一个。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transform:set"><apiName>transform</apiName><shortdesc>
      一个对象，具有与显示对象的矩阵、颜色转换和像素范围有关的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc>
      一个对象，具有与显示对象的矩阵、颜色转换和像素范围有关的属性。在 Transform 类的条目中对特定属性 matrix、colorTransform 和三个只读属性（<codeph>concatenatedMatrix</codeph>、<codeph>concatenatedColorTransform</codeph> 和 <codeph>pixelBounds</codeph>）进行了说明。<codeph/>  
      
      <p>transform 对象的每个属性本身都是一个对象。此概念很重要，因为设置 matrix 或 colorTransform 对象的新值的唯一方法是，创建新对象并将该对象复制到 transform.matrix 或 transform.colorTransform 属性。</p>
     
      <p>例如，要增加显示对象矩阵的 tx 值，您必须创建整个矩阵对象的副本，然后将新对象复制到 transform 对象的 matrix 属性中：</p>
           <pre>
      var myMatrix:Matrix = myUIComponentObject.transform.matrix;  
      myMatrix.tx += 10; 
      myUIComponent.transform.matrix = myMatrix;
      </pre>
       
      不能直接设置 tx 属性。下面的代码对 myUIComponent 不起作用：
     
      <pre>
      myUIComponent.transform.matrix.tx += 10;
      </pre>
           <p>请注意，对于 <codeph>UIComponent</codeph>，与 <codeph>DisplayObject</codeph> 不同，<codeph>transform</codeph> 保持 <codeph>matrix</codeph> 和 <codeph>matrix3D</codeph> 值同步，因此即使在组件自身没有设置 3D 属性时 <codeph>matrix3D</codeph> 也不为 null。开发人员应使用 <codeph>is3D</codeph> 属性检查组件是否设置了 3D 属性。如果组件具有 3D 属性，则应使用 transform 的 <codeph>matrix3D</codeph> 而不使用 transform 的 <codeph>matrix</codeph>。</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#UIComponent/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#UIComponent/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/is3D"><linktext>is3D</linktext></link><link href="mx.geom.xml#Transform"><linktext>mx.geom.Transform</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
  BitmapAsset 是 flash.display.Bitmap 类的子类，表示您在 Flex 应用程序中嵌入的位图图像。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexBitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  BitmapAsset 是 flash.display.Bitmap 类的子类，表示您在 Flex 应用程序中嵌入的位图图像。它用于实现 IFlexDisplayObject 接口，此接口允许在 Image 控件中显示嵌入的位图图像，或将位图图像用作容器背景或组件外观。
 
  <p>嵌入的位图图像可以是 JPEG、GIF 或 PNG 文件。您还可以嵌入由 Flash 生成的 SWF 文件中的位图元件。在上述每种情况下，MXML 编译器都会自动生成一个类，用于扩展 BitmapAsset 以显示嵌入的位图图像。</p>
 
  <p>在写入 Flex 应用程序时，通常不必直接使用 BitmapAsset 类。例如，您可以通过编写如下内容来嵌入 GIF 文件并在 Image 控件中显示该图像：</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Logo.gif')"/></pre>
 
  <p>也可以使用 CSS 语法编写如下内容来将该图像用作应用程序的背景图像</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Logo.gif")
      }
  &lt;fx:Style/></pre>
 
  <p>而不必了解 MXML 编译器已为您创建了 BitmapAsset 的一个子类。</p>
 
  <p>不过，了解在 ActionScript 级别发生的操作可能会有用。要在 ActionScript 中嵌入位图图像，需要声明一个 Class 类型的变量，然后在其上放置 <codeph>[Embed]</codeph> 元数据。例如，您可以按如下所示嵌入 GIF 文件：</p>
 
  <pre>
  [Bindable]
  [Embed(source="Logo.gif")]
  private var logoClass:Class;</pre>
 
  <p>MXML 编译器可识别 .gif 扩展名，将 GIF 数据的代码转换为播放器使用的位图格式，然后自动生成 BitmapAsset 类的子类，并将变量设置为引用此自动生成的类。接着，您可以借助 <codeph>new</codeph> 运算符来使用此类引用创建 BitmapAsset 实例，还可以对其应用 BitmapAsset 类的 API：</p>
 
  <pre>
  var logo:BitmapAsset = BitmapAsset(new logoClass());
  logo.bitmapData.noise(4);</pre>
 
  <p>但是，您极少需要自己创建 BitmapAsset 实例，因为只需将 image-related 属性和样式设置为一个 image-producing 类，而组件会根据需要创建图像实例。例如，要在 Image 控件中显示此图像，您可以将 Image 的 <codeph>source</codeph> 属性设置为 <codeph>logoClass</codeph>。在 MXML 中，您可以按照以下方法执行此操作：</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:BitmapAsset:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>位图图像的数据。 
     
      </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>位图是否与最近的像素对齐。
     
      </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>在缩放时是否对位图进行平滑处理。 
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:BitmapAsset:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
      
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。如果它们不同，该方法负责镜像元素的内容以及更新元素的布局后转换，以便子代继承镜像的坐标系。IVisualElement 通常通过以下方法实现镜像：使用 postLayoutTransformOffsets 按 -1 缩放 X 轴以及按元素宽度平移原点的 x 坐标。此“镜像”转换的净效果是反转 X 轴增加的方向，而不更改元素相对于其父代的原点的位置。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:move"><apiName>move</apiName><shortdesc>
      
	  将此对象移动到指定的 x 和 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此对象的新 x 位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此对象的新 y 位置。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  将此对象移动到指定的 x 和 y 坐标。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  设置此对象的实际大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>此对象的新宽度。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>此对象的新高度。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  设置此对象的实际大小。
	 
	  <p>此方法主要用于实现 <codeph>updateDisplayList()</codeph> 方法。在此期间，您可以根据其显式大小、相对于父项的（百分比）大小以及度量大小计算此对象的实际大小。然后，通过调用 <codeph>setActualSize()</codeph> 将此实际大小应用于对象。</p>
	 
	  <p>在其他情况下，您应该设置 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph> 或 <codeph>percentHeight</codeph> 属性，而非调用此方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:BitmapAsset:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
      
          指定元素的所需布局方向：LayoutDirection.LTR（从左到右）、LayoutDirection.RTL（从右到左）或 null（继承）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
          指定元素的所需布局方向：LayoutDirection.LTR（从左到右）、LayoutDirection.RTL（从右到左）或 null（继承）。此属性通常按继承样式回退。如果指定 null，则 layoutDirection 样式将设置为 undefined。类似 GraphicElement 的类（实现 ILayoutDirectionElement，但不支持样式）必须另外针对此属性支持 null 值，这意味着 layoutDirection 必须从其父代继承。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  此对象的测量高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量高度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  此对象的测量宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量宽度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutDirectionElement"><apiName>ILayoutDirectionElement</apiName><shortdesc>
      ILayoutDirectionElement 接口定义对象支持 layoutDirection 属性时需要的最低限度属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
      ILayoutDirectionElement 接口定义对象支持 layoutDirection 属性时需要的最低限度属性和方法。
      
      </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links><apiOperation id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:invalidateLayoutDirection"><apiName>invalidateLayoutDirection</apiName><shortdesc>
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          当某元素的 layoutDirection 更改或其父代的 layoutDirection 更改时，该元素必须调用该方法。如果它们不同，该方法负责镜像元素的内容以及更新元素的布局后转换，以便子代继承镜像的坐标系。IVisualElement 通常通过以下方法实现镜像：使用 postLayoutTransformOffsets 按 -1 缩放 X 轴以及按元素宽度平移原点的 x 坐标。此“镜像”转换的净效果是反转 X 轴增加的方向，而不更改元素相对于其父代的原点的位置。
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutDirectionElement:mx.core:ILayoutDirectionElement:layoutDirection:get"><apiName>layoutDirection</apiName><shortdesc>
          指定元素的所需布局方向：LayoutDirection.LTR（从左到右）、LayoutDirection.RTL（从右到左）或 null（继承）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          指定元素的所需布局方向：LayoutDirection.LTR（从左到右）、LayoutDirection.RTL（从右到左）或 null（继承）。此属性通常按继承样式回退。如果指定 null，则 layoutDirection 样式将设置为 undefined。类似 GraphicElement 的类（实现 ILayoutDirectionElement，但不支持样式）必须另外针对此属性支持 null 值，这意味着 layoutDirection 必须从其父代继承。 
          
          </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#LayoutDirection"><linktext>mx.core.LayoutDirection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeProvider"><apiName>ISWFBridgeProvider</apiName><shortdesc>
  ISWFBridgeProvider 的实现器提供一个桥，通向不同安全沙箱中的应用程序，或通向用 Flex 编译器的不同版本编译而成并在单独的 ApplicationDomain 中运行的应用程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISWFBridgeProvider 的实现器提供一个桥，通向不同安全沙箱中的应用程序，或通向用 Flex 编译器的不同版本编译而成并在单独的 ApplicationDomain 中运行的应用程序。通过此接口，调用方可以获得通向该应用程序的桥。调用方一旦拥有该桥，随后即可向应用程序分派事件。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
      测试子级是否允许其父级访问子级的显示对象或侦听源于子级的消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      测试子级是否允许其父级访问子级的显示对象或侦听源于子级的消息。如果允许访问，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
      测试父级是否允许其子级访问父级的显示对象或侦听源于父级的消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      测试父级是否允许其子级访问父级的显示对象或侦听源于父级的消息。如果允许访问，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
      通向与此接口的实现器关联的应用程序的桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      通向与此接口的实现器关联的应用程序的桥。可用于向不同 ApplicationDomain 或不同沙箱中的应用程序发送事件的 IEventDispatcher。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
  ClassFactory 实例是一个“工厂对象”，Flex 可用其生成其他类的实例，每个实例拥有相同的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFactory</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ClassFactory 实例是一个“工厂对象”，Flex 可用其生成其他类的实例，每个实例拥有相同的属性。
 
  <p>构建工厂对象时，指定 <codeph>generator</codeph> 类。然后，在工厂对象上设置 <codeph>properties</codeph> 属性。Flex 通过调用工厂对象的 <codeph>newInstance()</codeph> 方法使用工厂对象生成实例。</p>
 
  <p><codeph>newInstance()</codeph> 方法创建 <codeph>generator</codeph> 类的新实例，并在新实例中设置由 <codeph>properties</codeph> 指定的属性。如果需要进一步自定义生成的实例，则可以覆盖 <codeph>newInstance()</codeph> 方法。</p>
 
  <p>ClassFactory 类实现 IFactory 接口。因此，通过该类，您可以创建可分配到 IFactory 类型属性的对象，如 List 控件的 <codeph>itemRenderer</codeph> 属性或 DataGrid 控件的 <codeph>itemEditor</codeph> 属性。</p>
 
  <p>例如，假设您编写了一个名为 ProductRenderer 的项呈示器类，该类包含一个 <codeph>showProductImage</codeph> 属性，此属性可以是 <codeph>true</codeph> 或 <codeph>false</codeph>。如果您希望 List 控件使用此呈示器，并使每个呈示器实例都显示产品图像，则应编写以下代码：</p>
 
  <pre>
  var productRenderer:ClassFactory = new ClassFactory(ProductRenderer);
  productRenderer.properties = { showProductImage: true };
  myList.itemRenderer = productRenderer;</pre>
 
  <p>List 控件对 <codeph>itemRenderer</codeph> 调用 <codeph>newInstance()</codeph> 方法以创建 ProductRenderer 的各实例，并将每个实例的 <codeph>showProductImage</codeph> 属性设置为 <codeph>true</codeph>。如果希望有一个省略产品图像的不同 List 控件，可以使用 ProductRenderer 类创建另一个 <codeph>properties</codeph> 属性设置为 <codeph>{ showProductImage: false }</codeph> 的 ClassFactory。</p>
 
  <p>使用 <codeph>properties</codeph> 属性配置实例的功能非常强大，因为它允许以不同方式使用单个 generator 类。但是，通常创建不需要设置属性的不可配置 generator 类。为此，MXML 允许您使用以下语法： </p>
 
  <pre>
  &lt;mx:List id="myList" itemRenderer="ProductRenderer"></pre>
 
  <p>MXML 编译器自动为您创建 ClassFactory 实例。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IFactory"><linktext>mx.core.IFactory</linktext></link><link href="" invalidHref="mx.controls.List.xml"><linktext>mx.controls.List</linktext></link></related-links><apiConstructor id="mx.core:ClassFactory:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc><codeph>newInstance()</codeph> 方法根据工厂对象生成对象时使用的 Class。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  使用由 properties 指定的属性创建 generator 类的新实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>已创建的新实例。
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  使用由 <codeph>properties</codeph> 指定的属性创建 <codeph>generator</codeph> 类的新实例。
	 
	  <p>此方法实现 IFactory 接口的 <codeph>newInstance()</codeph> 方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ClassFactory:generator"><apiName>generator</apiName><shortdesc>
      newInstance() 方法根据工厂对象生成对象时使用的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      <codeph>newInstance()</codeph> 方法根据工厂对象生成对象时使用的 Class。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ClassFactory:properties"><apiName>properties</apiName><shortdesc>
	 一个 Object，其名称/值对指定对 newInstance() 方法生成的各个对象设置的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	 一个 Object，其名称/值对指定对 <codeph>newInstance()</codeph> 方法生成的各个对象设置的属性。
	 
	  <p>例如，如果将 <codeph>properties</codeph> 设置为 <codeph>{ text: "Hello", width: 100 }</codeph>，则通过调用 <codeph>newInstance()</codeph> 生成的 <codeph>generator</codeph> 类的每个实例的 <codeph>text</codeph> 和 <codeph>width</codeph> 将分别设置为 <codeph>"Hello"</codeph> 和 <codeph>100</codeph>。</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IUITextField"><apiName>IUITextField</apiName><shortdesc>
  IUITextField 接口为 UITextField 实例定义基本 API 集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IUITextField 接口为 UITextField 实例定义基本 API 集。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:appendText"><apiName>appendText</apiName><shortdesc conref="flash.text.TextField#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc conref="flash.text.TextField#getCharBoundaries()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharBoundaries()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getImageReference"><apiName>getImageReference</apiName><shortdesc conref="flash.text.TextField#getImageReference()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getImageReference()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc conref="flash.text.TextField#getLineIndexOfChar()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexOfChar()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineLength"><apiName>getLineLength</apiName><shortdesc conref="flash.text.TextField#getLineLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc conref="flash.text.TextField#getLineMetrics()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineMetrics()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc conref="flash.text.TextField#getLineOffset()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineOffset()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineText"><apiName>getLineText</apiName><shortdesc conref="flash.text.TextField#getLineText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc conref="flash.text.TextField#getParagraphLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getParagraphLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UITextField#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>样式值。
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称。
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc conref="flash.text.TextField#getTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextFormat"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc conref="mx.core.UITextField#getUITextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier><apiDesc>包含此组件格式设置信息的对象。
           </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#getUITextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc conref="flash.text.TextField#replaceSelectedText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceSelectedText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceText"><apiName>replaceText</apiName><shortdesc conref="flash.text.TextField#replaceText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setColor"><apiName>setColor</apiName><shortdesc conref="mx.core.UITextField#setColor()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>新的字体颜色。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#setColor()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UITextField#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setSelection"><apiName>setSelection</apiName><shortdesc conref="flash.text.TextField#setSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc conref="flash.text.TextField#setTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flash.text:TextFormat"/></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc conref="mx.core.UITextField#truncateToFit()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果此文本需要截断，则返回 <codeph>true</codeph>。
      
      </apiDesc></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>截断后追加的文本。如果传递 <codeph>null</codeph>，将使用可本地化的字符串，如 <codeph>"..."</codeph>。
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#truncateToFit()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUITextField:mx.core:IUITextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc conref="flash.text.TextField#alwaysShowSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#alwaysShowSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc conref="flash.text.TextField#antiAliasType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#antiAliasType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:autoSize:get"><apiName>autoSize</apiName><shortdesc conref="flash.text.TextField#autoSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#autoSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc conref="flash.text.TextField#backgroundColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#backgroundColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:background:get"><apiName>background</apiName><shortdesc conref="flash.text.TextField#background">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#background">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:borderColor:get"><apiName>borderColor</apiName><shortdesc conref="flash.text.TextField#borderColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#borderColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:border:get"><apiName>border</apiName><shortdesc conref="flash.text.TextField#border">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#border">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc conref="flash.text.TextField#bottomScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#bottomScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc conref="flash.text.TextField#caretIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#caretIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc conref="flash.text.TextField#condenseWhite">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#condenseWhite">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc conref="flash.text.TextField#defaultTextFormat">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc conref="flash.text.TextField#defaultTextFormat">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc conref="flash.text.TextField#embedFonts">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#embedFonts">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc conref="flash.text.TextField#gridFitType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#gridFitType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:htmlText:get"><apiName>htmlText</apiName><shortdesc conref="flash.text.TextField#htmlText">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#htmlText">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc conref="mx.core.UITextField#ignorePadding">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UITextField#ignorePadding">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc conref="mx.core.UITextField#inheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#inheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:length:get"><apiName>length</apiName><shortdesc conref="flash.text.TextField#length">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#length">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc conref="flash.text.TextField#maxScrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc conref="flash.text.TextField#maxScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc conref="flash.text.TextField#mouseWheelEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#mouseWheelEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:multiline:get"><apiName>multiline</apiName><shortdesc conref="flash.text.TextField#multiline">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#multiline">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UITextField#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UITextField#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc conref="mx.core.UITextField#nonInheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonInheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc conref="mx.core.UITextField#nonZeroTextHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonZeroTextHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:numLines:get"><apiName>numLines</apiName><shortdesc conref="flash.text.TextField#numLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#numLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollH:get"><apiName>scrollH</apiName><shortdesc conref="flash.text.TextField#scrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollV:get"><apiName>scrollV</apiName><shortdesc conref="flash.text.TextField#scrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectable:get"><apiName>selectable</apiName><shortdesc conref="flash.text.TextField#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc conref="flash.text.TextField#selectionBeginIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionBeginIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc conref="flash.text.TextField#selectionEndIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionEndIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:sharpness:get"><apiName>sharpness</apiName><shortdesc conref="flash.text.TextField#sharpness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#sharpness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc conref="flash.text.TextField#styleSheet">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/></apiValueDef><apiDesc conref="flash.text.TextField#styleSheet">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textColor:get"><apiName>textColor</apiName><shortdesc conref="flash.text.TextField#textColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#textColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textHeight:get"><apiName>textHeight</apiName><shortdesc conref="flash.text.TextField#textHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textWidth:get"><apiName>textWidth</apiName><shortdesc conref="flash.text.TextField#textWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:text:get"><apiName>text</apiName><shortdesc conref="flash.text.TextField#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#text">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:thickness:get"><apiName>thickness</apiName><shortdesc conref="flash.text.TextField#thickness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#thickness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:type:get"><apiName>type</apiName><shortdesc conref="flash.text.TextField#type">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#type">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:useRichTextClipboard:get"><apiName>useRichTextClipboard</apiName><shortdesc conref="flash.text.TextField#useRichTextClipboard">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#useRichTextClipboard">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc conref="flash.text.TextField#wordWrap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#wordWrap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponentCachePolicy"><apiName>UIComponentCachePolicy</apiName><shortdesc>
  ContainerCreationPolicy 类定义 UIComponent 类的 cachePolicy 属性的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContainerCreationPolicy 类定义 UIComponent 类的 <codeph>cachePolicy</codeph> 属性的常量值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/cachePolicy"><linktext>mx.core.UIComponent.cachePolicy</linktext></link></related-links><apiValue id="mx.core:UIComponentCachePolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
      指定 Flex 框架应使用探试法确定是否将对象缓存为位图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定 Flex 框架应使用探试法确定是否将对象缓存为位图。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:OFF"><apiName>OFF</apiName><shortdesc>
      指定 Flex 框架不应尝试将对象缓存为位图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定 Flex 框架不应尝试将对象缓存为位图。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:ON"><apiName>ON</apiName><shortdesc>
      指定 Flex 框架应始终将对象缓存为位图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定 Flex 框架应始终将对象缓存为位图。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
  FlexSprite 是 Player 的 Sprite 类的子类，同时也是 UIComponent 的 superclass。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSprite 是 Player 的 Sprite 类的子类，同时也是 UIComponent 的 superclass。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSprite:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
	 
	  <p>将 <codeph>name</codeph> 属性设置为 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。</p>
	 
	  <p>此字符串由对象的类名称和应用程序内的唯一整数连接而成，如 <codeph>"Button17"</codeph>。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSprite:toString"><apiName>toString</apiName><shortdesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（如 <codeph>"MyApp0.HBox5.Button17"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法从对象及其后代的 <codeph>name</codeph> 属性中生成。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IConstraintClient"><apiName>IConstraintClient</apiName><shortdesc>
  IConstraintClient 接口为支持布局约束的组件定义接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IConstraintClient 接口为支持布局约束的组件定义接口。此接口仅供实现基于约束的布局使用。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      返回指定的约束值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>约束值；如果尚未定义约束值，则为空。
     
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>约束值的名称。约束参数为“<codeph>baseline</codeph>”、“<codeph>bottom</codeph>”、“<codeph>horizontalCenter</codeph>”、“<codeph>left</codeph>”、“<codeph>right</codeph>”、“<codeph>top</codeph>”和“<codeph>verticalCenter</codeph>”。
     
      <p>有关这些参数的详细信息，请参见 Canvas 和 Panel 容器以及 Styles Metadata AnchorStyles。</p>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定的约束值。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.containers.Canvas.xml"><linktext>mx.containers.Canvas</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      设置指定的约束值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>约束值的名称。约束参数为“<codeph>baseline</codeph>”、“<codeph>bottom</codeph>”、“<codeph>horizontalCenter</codeph>”、“<codeph>left</codeph>”、“<codeph>right</codeph>”、“<codeph>top</codeph>”和“<codeph>verticalCenter</codeph>”。
     
      <p>有关这些参数的详细信息，请参见 Canvas 和 Panel 容器以及 Styles Metadata AnchorStyles。</p>
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>约束的新值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置指定的约束值。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.containers.Canvas.xml"><linktext>mx.containers.Canvas</linktext></link><link href="" invalidHref="mx.containers.Panel.xml"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:ISelectableList"><apiName>ISelectableList</apiName><shortdesc>
  ISelectableList 接口指示该实现器是一个支持 selectedIndex 属性的 IList 元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISelectableList 接口指示该实现器是一个支持 <codeph>selectedIndex</codeph> 属性的 IList 元素。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ISelectableList_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  当 selectedIndex 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>selectedIndex</codeph> 属性更改时进行分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:ISelectableList_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当 selectedIndex 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>selectedIndex</codeph> 属性更改时进行分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="mx.core:ISelectableList:mx.core:ISelectableList:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      选中的 IList 项目的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      选中的 IList 项目的索引。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
  一个类工厂，提供系统管理器作为创建类的上下文。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ClassFactory</apiBaseClassifier></apiClassifierDef><apiDesc>
  一个类工厂，提供系统管理器作为创建类的上下文。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ContextualClassFactory:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc><codeph>newInstance()</codeph> 方法根据工厂对象生成对象时使用的 Class。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>应在其中创建对象的系统管理器上下文。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ContextualClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  使用由 properties 指定的属性创建 generator 类的新实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>已创建的新实例。
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  使用由 <codeph>properties</codeph> 指定的属性创建 <codeph>generator</codeph> 类的新实例。
	 
	  <p>此方法实现 IFactory 接口的 <codeph>newInstance()</codeph> 方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ContextualClassFactory:moduleFactory"><apiName>moduleFactory</apiName><shortdesc>
	  应在其中创建对象的上下文。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  应在其中创建对象的上下文。
	 
	  <p>此属性用于解决在将框架加载为 RSL（RSL 具有自己的 SWF 上下文）时，在应用程序 SWF 中使用嵌入字体的问题。嵌入字体只能从创建它们的 SWF 文件上下文中访问。使用应用程序 SWF 的 <codeph>systemManager</codeph>，RSL 可以在应用程序 SWF 上下文中创建对象，它们将有权访问应用程序的嵌入字体。<codeph>moduleFactory</codeph> 将调用 <codeph>create()</codeph>，用以在 <codeph>moduleFactory</codeph> 的上下文中创建对象。</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IProgrammaticSkin"><apiName>IProgrammaticSkin</apiName><shortdesc>
  IProgrammaticSkin 接口定义外观类使用 name 属性外观接口时必须实现的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IProgrammaticSkin 接口定义外观类使用 <codeph>name</codeph> 属性外观接口时必须实现的接口。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
  ByteArrayAsset 是 flash.utils.ByteArray 类的子类，表示您在 Flex 应用程序中嵌入的任意字节数据序列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.utils:ByteArray</apiBaseClassifier></apiClassifierDef><apiDesc>
  ByteArrayAsset 是 flash.utils.ByteArray 类的子类，表示您在 Flex 应用程序中嵌入的任意字节数据序列。
 
  <p>可以嵌入任何类型的文件中的字节数据，并且将始终嵌入整个文件。虽然可以嵌入整个 SWF 文件，但无法嵌入 SWF 文件中特定资源的字节。</p>
 
  <p>MXML 编译器自动生成扩展 ByteArrayAsset 的类，以表示嵌入的数据。</p>
 
  <p>要随意嵌入一个文件，应声明一个类型为 Class 的变量，并使用 MIME 类型 <codeph>application/octet-stream</codeph> 为其指定 <codeph>[Embed]</codeph> 元数据。例如，您可以通过以下方式嵌入文本文件：</p>
 
  <pre>
  [Bindable]
  [Embed(source="Story.txt", mimeType="application/octet-stream")]
  private var storyClass:Class;
  </pre>
 
  <p>编译器自动生成 ByteArrayAsset 类的子类，并将您的变量设置为对此自动生成的类的引用。然后，您可以使用此类引用使用 <codeph>new</codeph> 运算符创建 ByteArrayAsset 实例，并且您还可以使用 ByteArray 类的方法从字节数组中提取信息：</p>
 
  <pre>
  var storyByteArray:ByteArrayAsset = ByteArrayAsset(new storyClass());
  var story:String = storyByteArray.readUTFBytes(storyByteArray.length);
  </pre>
 
  <p>您必须指定嵌入的 MIME 类型为 <codeph>application/octet-stream</codeph>，以便按“原有”格式嵌入字节数据，而无需进行解析。它还使自动生成的类扩展 ByteArrayAsset，而不是扩展其他资源类。</p>
 
  <p>例如，如果您嵌入 PNG 文件时没有指定此 MIME 类型，则 PNG 数据将自动转码为播放器使用的位图格式，并自动生成 BitmapAsset 子类来代表它。但是，如果您将 MIME 类型指定为 <codeph>application/octet-stream</codeph>，则将不会转码，并且将按原有格式嵌入 PNG 数据，自动生成的类将扩展 ByteArrayAsset。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ByteArrayAsset:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
  UIComponentDescriptor 实例封装您在 MXML 标签中为可视组件实例指定的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ComponentDescriptor</apiBaseClassifier></apiClassifierDef><apiDesc>
  UIComponentDescriptor 实例封装您在 MXML 标签中为可视组件实例指定的信息。
 
  <p>MXML 文件中的大多数标签描述 UIComponent 对象树。例如，<codeph>&lt;mx:Application></codeph> 标签代表 UIComponent 对象，并且其子容器和控件均是 UIComponent 对象。</p>
 
  <p>MXML 编译器将所有这些 MXML 标签均编译为 UIComponentDescriptor 实例。确切地说，MXML 编译器自动生成 ActionScript 数据结构，即 UIComponentDescriptor 对象树。</p>
 
  <p>在运行时，Container 类的 <codeph>createComponentsFromDescriptors()</codeph> 方法使用容器的 <codeph>childDescriptors</codeph> 数组中 UIComponentDescriptor 对象中的信息创建实际 UIComponent 对象，这些对象是容器的子级以及子级的子级。根据容器的 <codeph>creationPolicy</codeph> 属性的值，会在应用程序启动时，组件的某部分将要转为可见状态或应用程序开发人员手动调用 <codeph>createComponentsFromDescriptors()</codeph> 方法时，创建子级。</p>
 
  <p>通常，您不需要自己创建 UIComponentDescriptor 实例；您可以通过 Container 类的 <codeph>childDescriptors</codeph> 数组访问 MXML 编译器自动生成的实例。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="" invalidHref="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:UIComponentDescriptor:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>包含 UIComponentDescriptor 对象属性的名称/值对的 Object，这些属性包括 <codeph>type</codeph>、<codeph>id</codeph>、<codeph>propertiesFactory</codeph>、<codeph>events</codeph>、<codeph>stylesFactory</codeph> 和 <codeph>effects</codeph> 等。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:UIComponentDescriptor:effects"><apiName>effects</apiName><shortdesc>
      MXML 中所指定的包含组件效果的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      MXML 中所指定的包含组件效果的 Array。
     
      <p>例如，如果您编写以下代码：</p>
	 
      <pre>
	  &lt;mx:TextInput showEffect="Fade" hideEffect="Fade"/></pre>
	 
      <p>描述符的 <codeph>effects</codeph> 属性为 <codeph>[ "showEffect", "hideEffect" ]</codeph> Array。</p>
     
      <p>如果未为组件指定 MXML 效果，则 <codeph>effects</codeph> 属性为 <codeph>null</codeph>。</p>
	 
	  <p>请注意，此属性中不指定效果属性的值。实际上，效果被视为样式，因此，包含在 <codeph>stylesFactory</codeph> 属性中。<codeph>effect</codeph> Array 仅跟踪 <codeph>stylesFactory</codeph> 中实际上是效果的样式。</p>
	 
      <p>Container 方法 <codeph>createComponentsFromDescriptors()</codeph> 使用此属性向 EffectManager 注册效果。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentDescriptor:stylesFactory"><apiName>stylesFactory</apiName><shortdesc>
      MXML 中指定的一个 Function，用于构造包含组件实例样式的名称/值对的 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      MXML 中指定的一个 Function，用于构造包含组件实例样式的名称/值对的 Object。
	 
	  <p>例如，如果您编写以下代码：</p>
	 
      <pre>
	  &lt;mx:TextInput borderColor="0x888888" color="0xDDDDDD"/></pre>
	 
	  <p>描述符的 <codeph>stylesFactory</codeph> 属性为 Function：</p>
	 
      <pre>
	  function():void { this.borderColor = 0x888888; this.color = 0xDDDDDD };</pre>
	 
      <p>如果未为组件实例指定 MXML 样式，则 <codeph>stylesFactory</codeph> 属性为 <codeph>null</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
  FlexLoader 是 Player 的 Loader 类的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Loader</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexLoader 是 Player 的 Loader 类的子类。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexLoader:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      <p>将 <codeph>name</codeph> 属性设置为 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。</p>
      <p>此字符串由对象的类名称和应用程序内的唯一整数连接而成，如 <codeph>"FlexLoader13"</codeph>。</p>
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/createUniqueName()"><linktext>mx.utils.NameUtils.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexLoader:toString"><apiName>toString</apiName><shortdesc>
      返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（如 <codeph>"MyApp0.HBox5.FlexLoader13"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法从对象及其后代的 <codeph>name</codeph> 属性中生成。
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/displayObjectToString()"><linktext>mx.utils.NameUtils.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUID"><apiName>IUID</apiName><shortdesc>
  IUID 接口定义必须具有唯一标识符 (UID) 的对象的接口，用以唯一地标识对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IUID 接口定义必须具有唯一标识符 (UID) 的对象的接口，用以唯一地标识对象。对于 Flex 中的大多数用途，UID 不必是全局唯一标识符，但不包括通过数据服务发送的消息。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IUID:mx.core:IUID:uid:get"><apiName>uid</apiName><shortdesc>
	  此对象的唯一标识符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  此对象的唯一标识符。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexShape"><apiName>FlexShape</apiName><shortdesc>
  FlexShape 是播放机的 Shape 类的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Shape</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexShape 是播放机的 Shape 类的子类。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexShape:FlexShape"><apiName>FlexShape</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
	 
	  <p>将 <codeph>name</codeph> 属性设置为由 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。</p>
	 
	  <p>此字符串将作为该对象的类名称，后面带有应用程序中唯一的整数，例如 <codeph>"FlexShape15"</codeph>。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexShape:toString"><apiName>toString</apiName><shortdesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（如 <codeph>"MyApp0.HBox5.FlexShape15"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法基于该对象及其始祖的 <codeph>name</codeph> 属性生成。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:INavigatorContent"><apiName>INavigatorContent</apiName><shortdesc>
  INavigatorContent 接口定义容器必须实现的用作导航器容器（例如，ViewStack、TabNavigator 和 Accordion 导航器容器）子项的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  INavigatorContent 接口定义容器必须实现的用作导航器容器（例如，ViewStack、TabNavigator 和 Accordion 导航器容器）子项的接口。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      该容器的导航器容器显示的图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      该容器的导航器容器显示的图标。该图标显示在 Accordion 容器的按钮区域和 TabNavigator 容器的选项卡区域。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      此容器的导航器容器显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      此容器的导航器容器显示的文本。例如，文本显示在 Accordion 容器的按钮区域和 TabNavigator 容器的选项卡区域。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FontAsset"><apiName>FontAsset</apiName><shortdesc>
  FontAsset 是 flash.text.Font 类的子类，提供在 Flex 应用程序中嵌入的字体。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.text:Font</apiBaseClassifier></apiClassifierDef><apiDesc>
  FontAsset 是 flash.text.Font 类的子类，提供在 Flex 应用程序中嵌入的字体。
 
  <p>嵌入的字体可以是 TrueType (TTF) 或 OpenType (OTF)。您还可以嵌入系统字体或由 Flash 生成的 SWF 文件中的字体。在上述任一情况下，MXML 编译器都会自动生成一个类，用于扩展 FontAsset 以提供嵌入的字体。</p>
 
  <p>在写入 Flex 应用程序时，通常不直接使用 FontAsset 类。例如，您可以使用 <codeph>font-face</codeph>CSS 选择器嵌入字体，而不必了解 MXML 编译器已为您创建了 FontAsset 子类。</p>
 
  <p>但是，了解在 ActionScript 级别发生了什么可能非常有用。要在 ActionScript 中嵌入字体，需要声明一个 Class 类型的变量，然后在其中放置 <codeph>[Embed]</codeph> 元数据。例如，您按如下方式嵌入了一个 TTF 文件：</p>
 
  <pre>
  [Embed(source="Fancy.ttf", fontName="Fancy")] 
  var fancyClass:Class;
  </pre>
 
  <p>MXML 编译器将 TTF 数据的代码转化为播放器使用的字体格式，然后自动生成一个 FontAsset 类的子类，并将变量设置为引用此自动生成的类。接着，您可以借助 <codeph>new</codeph> 运算符使用此类引用来创建 FontAsset 实例，还可以对其应用 Font 类的 API；例如：</p>
 
  <pre>
  var fancyFont:FontAsset = FontAsset(new fancyClass());
  var hasDigits:Boolean = fancyFont.hasGlyphs("0123456789");
  </pre>
 
  <p>但是，您基本不需要自己创建 FontAsset 实例，因为您使用在 <codeph>[Embed]</codeph> 元数据中指定的 <codeph>fontName</codeph> 来引用字体；例如，可以将 <codeph>fontFamily</codeph>CSS 样式设置为字体名称（在本例中为 <codeph>"Fancy"</codeph>），而不将其设置为 FontAsset 实例（如 <codeph>fancyFont</codeph>）或 <codeph>fancyClass</codeph> 类引用。例如：</p>
 
  <pre>
  &lt;mx:Label text="Thank you for your order." fontFamily="Fancy"/>
  </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.Font.xml"><linktext>flash.text.Font</linktext></link></related-links><apiConstructor id="mx.core:FontAsset:FontAsset"><apiName>FontAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
  Container 和 ScrollControlBase 类的 horizontalScrollPolicy 和 verticalScrollPolicy 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Container 和 ScrollControlBase 类的 <codeph>horizontalScrollPolicy</codeph> 和 <codeph>verticalScrollPolicy</codeph> 属性的值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.ScrollControlBase.xml"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  如果子项超出所有者的尺寸，则显示滚动栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  如果子项超出所有者的尺寸，则显示滚动栏。在显示滚动条时并不会因滚动条尺寸而调整所有者的尺寸，因此这可能会导致 scrollbar 遮蔽控件或容器的内容。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc>
	  从不显示滚动栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  从不显示滚动栏。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc>
	  总是显示滚动栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  总是显示滚动栏。scrollbar 的尺寸将自动添加至所有者内容的尺寸，以便在未显式指定所有者尺寸时确定该尺寸。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient"><apiName>IStateClient</apiName><shortdesc>
  IStateClient 接口定义组件要支持视图状态所必须实现的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStateClient 接口定义组件要支持视图状态所必须实现的接口。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IStateClient:mx.core:IStateClient:currentState:get"><apiName>currentState</apiName><shortdesc>
      当前视图状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      当前视图状态。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElement"><apiName>IVisualElement</apiName><shortdesc>
  IVisualElement 接口定义针对可视元素在 Spark 容器中排列和显示时需要的最低限度属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ILayoutElement</apiBaseInterface><apiBaseInterface>mx.core:ILayoutDirectionElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IVisualElement 接口定义针对可视元素在 Spark 容器中排列和显示时需要的最低限度属性和方法。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:depth:get"><apiName>depth</apiName><shortdesc>
      确定容器内各项目的呈示顺序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      确定容器内各项目的呈示顺序。Spark 容器根据项目的 <codeph>depth</codeph> 属性确定这些项目的顺序，具有最低深度的项目在后面，具有较高深度的项目在前面。具有相同深度值的项目按照添加到容器中的顺序显示。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:designLayer:get"><apiName>designLayer</apiName><shortdesc>
      指定与该可视元素关联的可选 DesignLayer 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定与该可视元素关联的可选 DesignLayer 实例。  
     
      <p>当分配一个 DesignLayer 时，可视元素在最终将自身的有效可视性或透明度提交给它的支持 DisplayObject（如果适用）时，必须考虑其父层的可视性和透明度。</p>
     
      <p>可视元素必须侦听来自关联层的父项发出的 <codeph>layerPropertyChange</codeph> 通知。当层的 <codeph>effectiveAlpha</codeph> 或 <codeph>effectiveVisibility</codeph> 发生改变时，元素必须计算其有效可视性（或透明度）且相应地应用。</p>
     
      <p>该属性不应在 MXML 内直接设置。</p>
      
      <p><codeph>designLayer</codeph> 属性不用于 z 轴顺序控件，请参见 <codeph>depth</codeph>。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/depth"><linktext>深度</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:is3D:get"><apiName>is3D</apiName><shortdesc>
      当元素为 3D 时，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      当元素为 3D 时，则为 <codeph>true</codeph>。元素也可以是 3D 的，因为它具有 3D 转换属性或 3D 布局后转换偏移，或二者都有。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link><link href="mx.core.xml#ILayoutElement/hasLayoutMatrix3D"><linktext>mx.core.ILayoutElement.hasLayoutMatrix3D</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:owner:get"><apiName>owner</apiName><shortdesc>
      此 IVisualElement 对象的所有者。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      此 IVisualElement 对象的所有者。默认情况下，它是此 IVisualElement 对象的父代。不过，如果此 IVisualElement 对象是由其父代弹出的一个子组件（如 ComboBox 控件的下拉列表），则所有者是弹出此 IVisualElement 对象的组件。
     
      <p>此属性并非由 Flex 管理，而由各个组件管理。因此，如果使用 <codeph>PopUpManger.createPopUp()</codeph> 或 <codeph>PopUpManger.addPopUp()</codeph> 方法弹出一个子组件，则应该将该子组件的 <codeph>owner</codeph> 属性设置为弹出它的组件。</p>
     
      <p>默认值为 <codeph>parent</codeph> 属性的值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:parent:get"><apiName>parent</apiName><shortdesc>
      此组件的父容器或组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      此组件的父容器或组件。只有可视元素应该具有 <codeph>parent</codeph> 属性。非可视项目应该使用其他属性引用其所属对象。一般而言，非可视对象使用 <codeph>owner</codeph> 属性引用其所属对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc>
      定义能够应用于对象转换且在一定程度上对其父布局不可视的一组调整。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc>
      定义能够应用于对象转换且在一定程度上对其父布局不可视的一组调整。 
      
      <p>例如，如果希望某个布局为将旋转 90 度的某个对象进行调整，请设置该对象的 <codeph>rotation</codeph> 属性。如果<i>不</i>希望布局为要旋转的对象进行调整，请设置其 <codeph>postLayoutTransformOffsets.rotationZ</codeph> 属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:visible:get"><apiName>visible</apiName><shortdesc>
      控制此可视元素的可见性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      控制此可视元素的可见性。如果为 <codeph>true</codeph>，则对象可见。
     
      <p>如果对象不可视，但将 <codeph>includeInLayout</codeph> 属性设置为 <codeph>true</codeph>，则该对象占用容器中的空间，但不可视。</p>
     
      <p>如果 <codeph>visible</codeph> 设置为 <codeph>true</codeph>，对象未必可视，由于其大小以及容器剪裁是否启用。</p>
     
      <p>将 <codeph>visible</codeph> 设置为 <codeph>false</codeph> 应该会禁止组件获取焦点。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ILayoutElement/includeInLayout"><linktext>ILayoutElement.includeInLayout</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
  FlexSimpleButton 是播放机的 SimpleButton 类的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:SimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSimpleButton 是播放机的 SimpleButton 类的子类。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSimpleButton:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
	 
	  <p>将 <codeph>name</codeph> 属性设置为 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。</p>
	 
	  <p>此字符串将作为该对象的类名称，后面带有应用程序中唯一的整数，例如 <codeph>"FlexSimpleButton16"</codeph>。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSimpleButton:toString"><apiName>toString</apiName><shortdesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（如 <codeph>"MyApp0.HBox5.FlexSimpleButton16"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法根据对象及其始祖的 <codeph>name</codeph> 属性构建。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IContainer"><apiName>IContainer</apiName><shortdesc>
  IContainer 是一个接口，指示组件扩展或模拟 mx.core.Container
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IContainer 是一个接口，指示组件扩展或模拟 mx.core.Container
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link></related-links><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChildAt"><apiName>addChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChild"><apiName>addChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:areInaccessibleObjectsUnderPoint"><apiName>areInaccessibleObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:contains"><apiName>contains</apiName><shortdesc conref="flash.display.DisplayObjectContainer#contains()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#contains()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildAt"><apiName>getChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildByName"><apiName>getChildByName</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildIndex"><apiName>getChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChildAt"><apiName>removeChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChild"><apiName>removeChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:setChildIndex"><apiName>setChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:startDrag"><apiName>startDrag</apiName><shortdesc conref="flash.display.Sprite#startDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lockCenter</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Sprite#startDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:stopDrag"><apiName>stopDrag</apiName><shortdesc conref="flash.display.Sprite#stopDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Sprite#stopDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildrenAt"><apiName>swapChildrenAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildren"><apiName>swapChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>child2</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IContainer:mx.core:IContainer:buttonMode:get"><apiName>buttonMode</apiName><shortdesc conref="flash.display.Sprite#buttonMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#buttonMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc conref="mx.core.Container#creatingContentPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.Container#creatingContentPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc conref="mx.core.Container#defaultButton">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#defaultButton">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:dropTarget:get"><apiName>dropTarget</apiName><shortdesc conref="flash.display.Sprite#dropTarget">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.Sprite#dropTarget">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc conref="mx.core.UIComponent#focusManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#focusManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:graphics:get"><apiName>graphics</apiName><shortdesc conref="flash.display.Sprite#graphics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Graphics"/></apiValueDef><apiDesc conref="flash.display.Sprite#graphics">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:hitArea:get"><apiName>hitArea</apiName><shortdesc conref="flash.display.Sprite#hitArea">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="flash.display.Sprite#hitArea">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="mx.core.Container#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:numChildren:get"><apiName>numChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#numChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#numChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc conref="flash.display.Sprite#soundTransform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc conref="flash.display.Sprite#soundTransform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabChildren:get"><apiName>tabChildren</apiName><shortdesc>
      确定对象的子项是否支持 Tab 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      确定对象的子项是否支持 Tab 键。 
      
      <p><b>注意：</b>不要将此属性用于 Flex，而是使用 <codeph>UIComponent.hasFocusableChildren</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/hasFocusableChildren"><linktext>mx.core.UIComponent.hasFocusableChildren</linktext></link></related-links></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:textSnapshot:get"><apiName>textSnapshot</apiName><shortdesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.text:TextSnapshot"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:useHandCursor:get"><apiName>useHandCursor</apiName><shortdesc conref="flash.display.Sprite#useHandCursor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#useHandCursor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="mx.core.Container#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc conref="mx.core.Container#viewMetrics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#viewMetrics">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:RSLData"><apiName>RSLData</apiName><shortdesc>
  描述 RSL 配置数据的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  描述 RSL 配置数据的类。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:RSLData:RSLData"><apiName>RSLData</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>rslURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>RSL 的位置。
      </apiDesc></apiParam><apiParam><apiItemName>policyFileURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>策略文件 url 的位置（可选）。
      </apiDesc></apiParam><apiParam><apiItemName>digest</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>RSL 的摘要。对于没有摘要的 RSL，此为 null。
      </apiDesc></apiParam><apiParam><apiItemName>hashType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>用来创建摘要的散列类型。唯一支持的值为 <codeph>SHA256.TYPE_ID</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>isSigned</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果 Adobe 签署了 RSL，则为 true，反之则为 false。
      </apiDesc></apiParam><apiParam><apiItemName>verifyDigest</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定加载 RSL 后是否验证其摘要。 
      </apiDesc></apiParam><apiParam><apiItemName>applicationDomainTarget</apiItemName><apiType value="String"/><apiData>default</apiData><apiDesc>RSL 应加载到的应用程序域。有关有效值，请参阅 ApplicationDomainTarget 枚举。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiConstructor><apiValue id="mx.core:RSLData:applicationDomainTarget:get"><apiName>applicationDomainTarget</apiName><shortdesc>
      将 RSL 加载到的请求的应用程序域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      将 RSL 加载到的请求的应用程序域。有关有效值，请参阅 ApplicationDomainTarget 枚举。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ApplicationDomainTarget"><linktext>mx.core.ApplicationDomainTarget</linktext></link></related-links></apiValue><apiValue id="mx.core:RSLData:digest:get"><apiName>digest</apiName><shortdesc>
      RSL 的摘要。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      RSL 的摘要。对于没有摘要的 RSL，此为 null。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:hashType:get"><apiName>hashType</apiName><shortdesc>
      用来创建 RSL 摘要的散列类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      用来创建 RSL 摘要的散列类型。唯一支持的散列类型为 <codeph>SHA256.TYPE_ID</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:isSigned:get"><apiName>isSigned</apiName><shortdesc>
      如果 Adobe 签署了 RSL，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果 Adobe 签署了 RSL，则为 true。反之则为 false。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      如果该 RSL 应加载到应用程序域中，而非与执行加载的模块工厂相关联的应用程序域中，则为非 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      如果该 RSL 应加载到应用程序域中，而非与执行加载的模块工厂相关联的应用程序域中，则为非 null。如果为 null，则加载到当前的应用程序域中。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:policyFileURL:get"><apiName>policyFileURL</apiName><shortdesc>
      指定策略文件位置的 URL（可选）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      指定策略文件位置的 URL（可选）。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:rslURL:get"><apiName>rslURL</apiName><shortdesc>
      RSL 的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      RSL 的位置。应用程序或模块的 URL 可以是绝对的也可以是相对的。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:RSLData:verifyDigest:get"><apiName>verifyDigest</apiName><shortdesc>
      如果将 RSL 加载到内存时必须验证其摘要，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果将 RSL 加载到内存时必须验证其摘要，则为 true。如果无需验证就可加载 RSL，则为 false。已签名 RSL 不论其值为何都需验证。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
  TextFieldAsset 是用于表示 TextField 元件的 flash.text.TextField 类的子类，这些元件是从 SWF 文件（由 Flash 生成）嵌入到 Flex 应用程序中的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextFieldAsset 是用于表示 TextField 元件的 flash.text.TextField 类的子类，这些元件是从 SWF 文件（由 Flash 生成）嵌入到 Flex 应用程序中的。它用于实现 IFlexDisplayObject 接口，此接口允许在 Image 控件中显示 TextFieldAsset，或者将其用作容器背景或组件外观。
 
  <p>出于完整性原因，此类包含在 Flex 中，从而可以将 Flash 生成的 SWF 文件中的任意类型的元件嵌入到 Flex 应用程序中。但是，Flex 应用程序通常不使用嵌入的 TextField。有关嵌入资源在 Flex 中的工作方式的详细信息，请参考更常用的资源类，如 BitmapAsset。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:TextFieldAsset:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:TextFieldAsset:move"><apiName>move</apiName><shortdesc>
      
	  将此对象移动到指定的 x 和 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此对象的新 x 位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此对象的新 y 位置。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  将此对象移动到指定的 x 和 y 坐标。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:TextFieldAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  设置此对象的实际大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>此对象的新宽度。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>此对象的新高度。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  设置此对象的实际大小。
	 
	  <p>此方法主要用于实现 <codeph>updateDisplayList()</codeph> 方法。在此期间，您可以根据其显式大小、相对于父项的（百分比）大小以及度量大小计算此对象的实际大小。然后，通过调用 <codeph>setActualSize()</codeph> 将此实际大小应用于对象。</p>
	 
	  <p>在其他情况下，您应该设置 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph> 或 <codeph>percentHeight</codeph> 属性，而非调用此方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:TextFieldAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  此对象的测量高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量高度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:TextFieldAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  此对象的测量宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量宽度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IInvalidating"><apiName>IInvalidating</apiName><shortdesc>
  IInvalidating 接口为使用 invalidation 执行延迟（而不是立即）属性提交、度量、绘图和布局的组件定义接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IInvalidating 接口为使用 invalidation 执行延迟（而不是立即）属性提交、度量、绘图和布局的组件定义接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  调用此方法将导致在呈示显示列表前调用组件的 validateDisplayList() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  调用此方法将导致在呈示显示列表前调用组件的 <codeph>validateDisplayList()</codeph> 方法。
	 
	  <p>对于扩展 UIComponent 的组件，这暗示调用 <codeph>updateDisplayList()</codeph>。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  调用此方法将导致在呈示显示列表前调用组件的 validateProperties() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  调用此方法将导致在呈示显示列表前调用组件的 <codeph>validateProperties()</codeph> 方法。
	 
	  <p>对于扩展 UIComponent 的组件，这暗示调用 <codeph>commitProperties()</codeph>。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  调用此方法将导致在呈示显示列表前调用组件的 validateSize() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  调用此方法将导致在呈示显示列表前调用组件的 <codeph>validateSize()</codeph> 方法。
	 
	  <p>对于扩展 UIComponent 的组件，这暗示调用 <codeph>measure()</codeph>，除非组件设置了 <codeph>explicitWidth</codeph> 和 <codeph>explicitHeight</codeph>。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:validateNow"><apiName>validateNow</apiName><shortdesc>
      根据需要，通过立即调用 validateProperties()、validateSize() 和 validateDisplayList() 来验证并更新此对象的属性和布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      根据需要，通过立即调用 <codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph> 和 <codeph>validateDisplayList()</codeph> 来验证并更新此对象的属性和布局。
     
      <p>当属性更改时，新值通常不会立即对组件发挥作用。通常，会执行此时应运行的所有应用程序代码。然后根据组件验证需要及其在显示列表对象层次结构中的深度，LayoutManager 开始对组件调用 <codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph> 和 <codeph>validateDisplayList()</codeph> 方法。</p>
	 
      <p>例如，设置 <codeph>width</codeph> 属性被延迟，因为可能需要重新计算对象子项或其父项的宽度。如果应用程序代码多次设置了 <codeph>width</codeph> 属性，则延迟处理还可以防止重复多次操作。此方法允许您手动覆盖此行为。</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IChildList"><apiName>IChildList</apiName><shortdesc>
  IChildList 接口定义用于访问和处理子项列表的属性和方法，这些列表是 DisplayObjectContainer 的子项的子集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IChildList 接口定义用于访问和处理子项列表的属性和方法，这些列表是 DisplayObjectContainer 的子项的子集。
 
  <p>例如，请考虑 Container 类。此类将覆盖 DisplayObjectContainer API（如 <codeph>numChildren</codeph> 和 <codeph>getChildAt()</codeph> 方法）以只访问“内容”子项，这些子项指您放置在其中的控件和其他容器。但是，Container 还可以包含框架自动创建的其他子项，如背景或边框外观以及滚动条。所以，Container 公开了 IChildList 类型的 <codeph>rawChildren</codeph> 属性，允许您访问其所有子项，而不只是内容子项。</p>
 
  <p>再比如，SystemManager 类是一个 DisplayObjectContainer，其子项分成了多个层：底层为 Application 等常规子项，然后向上依次为弹出子项、工具提示，最上层为光标。SystemManager 具有名为 <codeph>popUpChildren</codeph>、<codeph>toolTipChildren</codeph> 和 <codeph>cursorChildren</codeph> 的属性（您可以使用它们来访问这些层），并且每个属性都是 IChildList 类型。因此，您可以使用 <codeph>systemManager.popUpChildren.numChildren</codeph> 属性计算弹出子项的数量，使用 <codeph>systemManager.toolTipChildren.addChild()</codeph> 方法将其他 DisplayObject 插入到工具提示层，等等。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/rawChildren"><linktext>mx.core.Container.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/rawChildren"><linktext>mx.managers.SystemManager.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/popUpChildren"><linktext>mx.managers.SystemManager.popUpChildren</linktext></link><link href="mx.managers.xml#SystemManager/toolTipChildren"><linktext>mx.managers.SystemManager.toolTipChildren</linktext></link><link href="mx.managers.xml#SystemManager/cursorChildren"><linktext>mx.managers.SystemManager.cursorChildren</linktext></link></related-links><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      在此子级列表的指定索引处添加子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>已添加的子项；它与传入的 <codeph>child</codeph> 参数相同。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要添加为子项的 DisplayObject。
	 
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要在其中添加子项的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在此子级列表的指定索引处添加子 DisplayObject。索引 0 代表 DisplayList 的开始位置，而索引 <codeph>numChildren</codeph> 代表 DisplayList 的结束位置。
	 
	  <p>将子项添加到子级列表末尾之外的任何位置都会增加以前位于该索引或更高索引处的子项的索引。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChild"><apiName>addChild</apiName><shortdesc>
      在此子项列表的末尾添加一个子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>已添加的子项；它与传入的参数相同。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要添加为子项的 DisplayObject。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在此子项列表的末尾添加一个子 DisplayObject。
     
	  <p>调用 <codeph>childList.addChild(child)</codeph> 与调用 <codeph>childList.addChild(child, childList.numChildren)</codeph> 的效果相同，添加新子项后，新子项的索引为 <codeph>(child.numChildren - 1)</codeph></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:contains"><apiName>contains</apiName><shortdesc>
	  确定 DisplayObject 是否在此子级列表中，或是否为此子级列表中的子项的后代。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果 DisplayObject 在此子级列表中，或者是此子级列表中子项的后代，则返回 <codeph>true</codeph>，否则返回 <codeph>false</codeph>。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要测试的 DisplayObject。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  确定 DisplayObject 是否在此子级列表中，或是否为此子级列表中的子项的后代。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildAt"><apiName>getChildAt</apiName><shortdesc>
	  获取此子级列表中指定索引处的子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定索引位置处的子项。
	  
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>从 0 到 <codeph>(numChildren - 1)</codeph> 的整数，指定此子级列表中子项的索引。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  获取此子级列表中指定索引处的子 DisplayObject。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      获取此子级列表中具有指定名称的子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>具有指定名称的子项。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>要返回的子项的名称。
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取此子级列表中具有指定名称的子 DisplayObject。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
	  获取此子级列表中特定子项的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>子项的索引，该索引是 0 和 <codeph>(numChildren - 1)</codeph> 之间的一个整数。
	  
	  </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要获取其索引的子项。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  获取此子级列表中特定子项的索引。
	 
	  <p>子级列表中第一个子项的索引为 0，第二个子项的索引为 1，最后一个子项的索引为 <codeph>(numChildren - 1)</codeph>。</p>
	 
	  <p>如果 <codeph>getChildIndex(myChild)</codeph> 返回 5，则 <codeph>myView.getChildAt(5)</codeph> 返回 <codeph>myChild</codeph>。</p>
	 
	  <p>如果通过调用 <codeph>addChild()</codeph> 方法添加子项，则新子项的索引等于现有子项的最大索引加 1。</p>
	 
	  <p>您可以使用 <codeph>addChildAt()</codeph> 方法在指定索引处插入子项。在这种情况下，先前位于该索引或更高索引处的子项的索引都将增加 1，以便所有子项的索引范围为从 0 到 <codeph>(numChildren - 1)</codeph>。</p>
	 
	  <p>如果通过调用 <codeph>removeChild()</codeph> 或 <codeph>removeChildAt()</codeph> 方法删除子项，则位于更高索引处的子项的索引将减小 1，以便所有子项的索引范围为从 0 到 <codeph>(numChildren - 1)</codeph>。</p>
	 
	  <p>如果通过调用 <codeph>setChildIndex()</codeph> 方法更改子项的索引，则位于旧索引和新索引之间（包括两者）的子项将调整其索引，以便所有子项的索引范围为从 0 到 <codeph>(numChildren - 1)</codeph>。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc>
      返回位于子级列表中指定点下方的 DisplayObject 的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定点下方且属于此 Container 子项的对象的数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>要查看其下方内容的点。
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回位于子级列表中指定点下方的 DisplayObject 的数组。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      从此子级列表中删除指定索引处的子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>被删除的子项。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要删除的 DisplayObject 的子索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从此子级列表中删除指定索引处的子 DisplayObject。
	 
	  <p>删除子级列表末尾之外的任意位置的子项都会减小更高索引处的子项的索引。</p>
     
      <p>已删除子项的父项将设置为 null，并且如果没有对该子项的任何其他引用，则将其作为垃圾回收。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChild"><apiName>removeChild</apiName><shortdesc>
      从此子级列表中删除指定的子 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>被删除的子项；它与传入的参数相同。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要删除的 DisplayObject。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从此子级列表中删除指定的子 DisplayObject。
	 
	  <p>删除子级列表末尾之外的任意位置的子项都会减小更高索引处的子项的索引。</p>
     
	  <p>已删除子项的父项将设置为 null，并且如果没有对该子项的任何其他引用，则将其作为垃圾回收。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
	  更改此子级列表中特定子项的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要设置其索引的子项。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>指定子项的新索引。新索引必须是零和 <codeph>(numChildren - 1)</codeph> 之间的一个整数。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  更改此子级列表中特定子项的索引。请参阅 <codeph>getChildIndex()</codeph> 方法了解子项索引的说明。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IChildList:mx.core:IChildList:numChildren:get"><apiName>numChildren</apiName><shortdesc>
	  此子级列表中的子项数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
	  此子级列表中的子项数。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredContentOwner"><apiName>IDeferredContentOwner</apiName><shortdesc>
  IDeferredContentOwner 接口为延迟实例化定义属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDeferredContentOwner 接口为延迟实例化定义属性和方法。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#INavigatorContent"><linktext>mx.core.INavigatorContent</linktext></link></related-links><adobeApiEvent id="mx.core:IDeferredContentOwner_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  已创建此组件的内容后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  已创建此组件的内容后分派。借助延迟实例化，可以在创建组件之后很长时间创建组件的内容。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      为此组件创建内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      为此组件创建内容。如果 <codeph>creationPolicy</codeph> 属性的值为 <codeph>auto</codeph> 或 <codeph>all</codeph>，则此 Flex 框架将调用此方法。如果 <codeph>creationPolicy</codeph> 属性的值为 <codeph>none</codeph>，则必须显式调用此方法来创建该组件的内容。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      此组件的内容创建策略。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此组件的内容创建策略。
     
      <p>可能的值包括：
        <ul>
          <li><codeph>auto</codeph> - 恰好在需要内容之前自动创建内容。</li>
          <li><codeph>all</codeph> - 只要创建父组件，就创建内容。因为此选项会增加启动时间和内存使用量，所以仅应将此选项作为最后的手段使用。</li>
          <li><codeph>none</codeph> - 必须通过调用 <codeph>createDeferredContent()</codeph> 方法手动创建内容。</li>
        </ul>
      </p>
      
      <p>如果没有为容器指定 <codeph>creationPolicy</codeph>，则该容器将继承其父项的 <codeph>creationPolicy</codeph> 属性的值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      一个标志，指示是否已创建延迟的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示是否已创建延迟的内容。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITransientDeferredInstance"><apiName>ITransientDeferredInstance</apiName><shortdesc>
  ITransientDeferredInstance 接口扩展 IDeferredInstance，并可以使用户将延迟的实例工厂重置为其初始状态（通常这意味着释放对组件的任何已知引用，如将引用该实例的所属文档属性设置为 null）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredInstance</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ITransientDeferredInstance 接口扩展 IDeferredInstance，并可以使用户将延迟的实例工厂重置为其初始状态（通常这意味着释放对组件的任何已知引用，如将引用该实例的所属文档属性设置为 null）。如果所需的行为是当某个状态不再应用时破坏某个状态特定的元素，则 AddItems 状态覆盖会利用此附加的功能。Flex 编译器使用与 IDeferredInstance 相同的自动强操作规则。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddItems"><linktext>mx.states.AddItems</linktext></link><link href="mx.core.xml#IDeferredInstance"><linktext>mx.core.IDeferredInstance</linktext></link></related-links><apiOperation id="mx.core:ITransientDeferredInstance:mx.core:ITransientDeferredInstance:reset"><apiName>reset</apiName><shortdesc>
      将工厂的状态重置为其初始状态，从而清除对缓存的实例的任何引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将工厂的状态重置为其初始状态，从而清除对缓存的实例的任何引用。
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
  ButtonAsset 是 flash.display.SimpleButton 类的子类，代表 Flash 生成的 SWF 文件中可以嵌入 Flex 应用程序的按钮元件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexSimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset 是 flash.display.SimpleButton 类的子类，代表 Flash 生成的 SWF 文件中可以嵌入 Flex 应用程序的按钮元件。该子类实现了 IFlexDisplayObject 接口，此接口使 SimpleButtonAsset 可以显示在 Image 控件中或用作容器背景或组件外观。
 
  <p>出于完整性原因，此类包含在 Flex 中，从而可以将 Flash 生成的 SWF 文件中的任意类型的元件嵌入到 Flex 应用程序中。但是，Flex 应用程序通常不使用嵌入的 SimpleButton。有关嵌入资源在 Flex 中的工作方式的详细信息，请参考更常用的资源类，如 BitmapAsset。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ButtonAsset:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ButtonAsset:move"><apiName>move</apiName><shortdesc>
      
	  将此对象移动到指定的 x 和 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此对象的新 x 位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此对象的新 y 位置。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  将此对象移动到指定的 x 和 y 坐标。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ButtonAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  设置此对象的实际大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>此对象的新宽度。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>此对象的新高度。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  设置此对象的实际大小。
	 
	  <p>此方法主要用于实现 <codeph>updateDisplayList()</codeph> 方法。在此期间，您可以根据其显式大小、相对于父项的（百分比）大小以及度量大小计算此对象的实际大小。然后，通过调用 <codeph>setActualSize()</codeph> 将此实际大小应用于对象。</p>
	 
	  <p>在其他情况下，您应该设置 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph> 或 <codeph>percentHeight</codeph> 属性，而非调用此方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ButtonAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  此对象的测量高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量高度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ButtonAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  此对象的测量宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量宽度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
  MovieClipLoaderAsset 是 MovieClipAsset 类的子类，代表您在 Flex 应用程序中嵌入的 SWF 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:MovieClipAsset</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipLoaderAsset 是 MovieClipAsset 类的子类，代表您在 Flex 应用程序中嵌入的 SWF 文件。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:MovieClipLoaderAsset_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  在全部加载 SWF 资源后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在全部加载 SWF 资源后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:MovieClipLoaderAsset:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialHeight"><apiName>initialHeight</apiName><shortdesc>
	  measuredHeight 属性的后备存储。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  <codeph>measuredHeight</codeph> 属性的后备存储。子类应在构造函数中设置此值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialWidth"><apiName>initialWidth</apiName><shortdesc>
	  measuredWidth 属性的后备存储。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  <codeph>measuredWidth</codeph> 属性的后备存储。子类应在构造函数中设置此值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:movieClipData:get"><apiName>movieClipData</apiName><shortdesc>
	  包含内部内容的 ByteArray。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:ByteArray"/></apiValueDef><apiDesc>
	  包含内部内容的 ByteArray。在子类中被覆盖。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IPropertyChangeNotifier"><apiName>IPropertyChangeNotifier</apiName><shortdesc>
  IPropertyChangeNotifier 接口定义标记接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IUID</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  <codeph>IPropertyChangeNotifier</codeph> 接口定义标记接口。支持此接口的类以一种专业化方式声明支持事件传送。实现此接口的类必须对此类以及作为属性公开的所有嵌套类的每个属性分派事件。对于那些匿名属性（复杂的和非强类型的），实现这些类可提供自定义支持，或者可直接使用 ObjectProxy 类。此接口的实现者应使用 <codeph>PropertyChangeEvent.createUpdateEvent()</codeph> 方法为分派构建适当的更新事件。
  </apiDesc><example>
  <codeph><pre>
   
 function set myProperty(value:Object):void
 {
    var oldValue:IPropertyChangeNotifier = _myProperty;
    var newValue:IPropertyChangeNotifier = value;
    
    // Need to ensure to dispatch changes on the new property.
    // Listeners use the source property to determine which object 
    // actually originated the event.
    // In their event handler code, they can tell if an event has been 
    // propagated from deep within the object graph by comparing 
    // event.target and event.source. If they are equal, then the property
    // change is at the surface of the object. If they are not equal, the
    // property change is somewhere deeper in the object graph.
    newValue.addEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE, 
                dispatchEvent);
 
    // need to stop listening for events from the old property
    oldValue.removeEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE,
                dispatchEvent);
 
    _myProperty = newValue;
 
    // now notify anyone that is listening
    if (dispatcher.hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE))
    {
         var event:PropertyChangeEvent = 
                         PropertyChangeEvent.createUpdateEvent(
                                                       this,
                                                       "myProperty",
                                                       newValue,
                                                       oldValue);
        dispatchEvent(event);
     }
  }
 
      
  </pre></codeph>
  
  </example></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IVisualElementContainer"><apiName>IVisualElementContainer</apiName><shortdesc>
  IVisualElementContainer 接口定义容器针对显示管理 Spark 组件时需要的最低限度属性和方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IVisualElementContainer 接口定义容器针对显示管理 Spark 组件时需要的最低限度属性和方法。
   <p>请注意，Spark SkinnableDataContainer 与 DataGroup 容器不会实现该接口。这些容器通过 <codeph>dataProvider</codeph> 属性管理子项。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IVisualElement"><linktext>mx.core.IVisualElement</linktext></link></related-links><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      将可视元素添加到此容器中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果该元素与容器相同。
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>如果在子列表中不存在该索引位置。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>已添加的元素。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>要添加为此可视容器的子项的元素。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>将该元素添加到的索引位置。如果指定当前占用的索引位置，则该位置以及所有更高位置上的子对象会在子级列表中上移一个位置。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将可视元素添加到此容器中。该元素将被添加到指定的索引位置。索引 0 代表显示列表中的第一个元素。
     
      <p>如果添加的可视元素已有一个不同的容器作为父项，则该元素将会从其他容器中删除。</p>  
           </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>将元素添加到子列表时分派。
     
      </apiDesc></adobeApiEventDetail><shortdesc>将元素添加到子列表时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement"><apiName>addElement</apiName><shortdesc>
      将可视元素添加到此容器中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果该元素与可视容器相同。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>已添加的元素。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>要添加为此容器的子项的可视元素。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将可视元素添加到此容器中。该元素将在添加完所有其他元素之后添加，并出现于所有其他元素之上。要将可视元素添加到特定索引位置，请使用 <codeph>addElementAt()</codeph> 方法。
     
      <p>如果添加的可视元素已有一个不同的容器作为父项，则该元素将会从其他容器中删除。</p>  
           </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>将元素添加到子列表时分派。
     
      </apiDesc></adobeApiEventDetail><shortdesc>将元素添加到子列表时分派。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      返回指定索引处的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在子列表中不存在该索引位置。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>位于指定索引位置的元素。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要检索的元素的索引。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定索引处的可视元素。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      返回可视元素的索引位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果元素不是此可视容器的子项。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>容器中元素的索引位置。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>可视元素。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回可视元素的索引位置。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      从容器中删除所有可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      从容器中删除所有可视元素。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      从容器中的指定索引位置删除可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在子列表中不存在该索引。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>已删除的元素。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要删除的元素的索引。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      从容器中的指定索引位置删除可视元素。在该可视容器中，位于该元素之上的所有元素的索引位置都减少 1。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      从此容器的子列表中删除指定的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果元素参数不是此可视容器的子项。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>已删除的元素。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>要从容器中删除的元素。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      从此容器的子列表中删除指定的可视元素。在该可视容器中，位于该元素之上的所有元素的索引位置都减少 1。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      在可视容器中更改现有可视元素的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在子列表中不存在该索引。
           </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>如果元素参数不是此可视容器的子项。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>要为其更改索引编号的元素。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>元素的最终索引编号。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在可视容器中更改现有可视元素的位置。
     
      <p>在调用 <codeph>setElementIndex()</codeph> 方法并指定一个已经占用的索引位置时，只有元素的先前位置和新位置之间的位置发生更改。其他位置保持不变。</p>
           <p>如果将某个可视元素移动到低于其当前索引位置的某个索引位置，则在这两个索引之间的所有元素的索引都增加 1。如果将某个元素移动到高于其当前索引位置的某个索引位置，则在这两个索引之间的所有元素的索引都减少 1。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      交换容器中位于两个指定索引位置的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在可视容器中不存在任何一个索引。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>第一个元素的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>第二个元素的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      交换容器中位于两个指定索引位置的可视元素。所有其他可视元素仍位于相同的索引位置。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      交换两个指定可视元素的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>第一个可视元素。
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>第二个可视元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      交换两个指定可视元素的索引。所有其他元素仍位于相同的索引位置。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      此容器中的可视元素的数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      此容器中的可视元素的数量。可视元素包括实现 IVisualElement 接口的类，例如，UIComponent 和 GraphicElement 的子类。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeaterClient"><apiName>IRepeaterClient</apiName><shortdesc>
  IRepeaterClient 接口定义可使用 Repeater 为其创建多个实例的组件的 API。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRepeaterClient 接口定义可使用 Repeater 为其创建多个实例的组件的 API。IRepeaterClient 接口是由 UIComponent 类实现的，因此所有 Flex 框架控件和容器都将继承此接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      初始化 instanceIndices、repeaterIndices 和 repeaters 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>创建此组件的父 Repeater。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      初始化 <codeph>instanceIndices</codeph>、<codeph>repeaterIndices</codeph> 和 <codeph>repeaters</codeph> 属性。
     
      <p>此方法由 Flex 框架调用。开发人员不应调用它。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      一个包含索引的 Array，从重复组件实例的文档中引用该实例时将用到这些索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个包含索引的 Array，从重复组件实例的文档中引用该实例时将用到这些索引。除非组件在一个或多个 Repeater 内部，否则此 Array 为空。第一个元素与最外面的 Repeater 对应。例如，如果 <codeph>id</codeph> 为 <codeph>"b"</codeph>，并且 <codeph>instanceIndices</codeph> 为 <codeph>[ 2, 4 ]</codeph>，则您可在文档上以 <codeph>b[2][4]</codeph> 格式引用它。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:isDocument:get"><apiName>isDocument</apiName><shortdesc conref="mx.core.UIComponent#isDocument">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isDocument">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      一个包含项目索引的 Array，这些项目位于生成该组件的 Repeater 的数据提供程序中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个包含项目索引的 Array，这些项目位于生成该组件的 Repeater 的数据提供程序中。除非组件在一个或多个 Repeater 内部，否则此 Array 为空。第一个元素对应于最外侧的 Repeater 组件。例如，如果 <codeph>repeaterIndices</codeph> 为 <codeph>[ 2, 4 ]</codeph>，则外部 Repeater 组件使用其 <codeph>dataProvider[2]</codeph> 数据项目，而内部 Repeater 组件使用其 <codeph>dataProvider[4]</codeph> 数据项目。
     
      <p>如果任一 Repeater 组件的 <codeph>startingIndex</codeph> 为非零值，此属性就会与 <codeph>instanceIndices</codeph> 不同。例如，即使 Repeater 组件从 <codeph>dataProvider</codeph> 项目 4 开始，对第一个重复组件的文档引用也是 <codeph>b[0]</codeph>，而不是 <codeph>b[4]</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      包含有组件附带的 Repeater 的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      包含有组件附带的 Repeater 的 Array。除非组件在一个或多个 Repeater 内部，否则此 Array 为空。第一个元素与最外面的 Repeater 对应。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDataRenderer"><apiName>IDataRenderer</apiName><shortdesc>
  IDataRenderer 接口用于为具有 data 属性的组件定义接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDataRenderer 接口用于为具有 <codeph>data</codeph> 属性的组件定义接口。
 
  <p>系统使用 <codeph>data</codeph> 属性将要呈示或编辑的数据传递给以下组件：在 list 控件（如 List、HorizontalList、TileList、DataGrid 和 Tree 控件）中的项呈示器或项目编辑器中使用的组件，或者用作图表中呈示器的组件。组件必须实现 IDataRenderer，以便主机组件可以传递此信息。所有 Flex 容器和许多 Flex 组件都实现 IDataRenderer 和 <codeph>data</codeph> 属性。</p>
 
  <p>在 list 控件中，Flex 将项呈示器或项目编辑器的 <codeph>data</codeph> 属性设置为数据提供程序中对应于正在呈示或编辑的项目的元素。对于 DataGrid 控件，<codeph>data</codeph> 属性包含 DataGrid 控件整行的而不仅仅是该项目的数据提供程序元素。</p>
 
  <p>若要实现此接口，需定义 setter 和 getter 方法以实现 <codeph>data</codeph> 属性。通常，setter 方法将 <codeph>data</codeph> 属性的值写入内部变量并分派 <codeph>dataChange</codeph> 事件，而 getter 方法返回内部变量的当前值，如下例所示：</p>
  
  <pre>
    // Internal variable for the property value.
    private var _data:Object;
    
    // Make the data property bindable.
    [Bindable("dataChange")]
    
    // Define the getter method.
    public function get data():Object {
        return _data;
    }
    
    // Define the setter method, and dispatch an event when the property
    // changes to support data binding.
    public function set data(value:Object):void {
        _data = value;
    
        dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
    }
  </pre>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IDataRenderer:mx.core:IDataRenderer:data:get"><apiName>data</apiName><shortdesc>
	  要呈示或编辑的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  要呈示或编辑的数据。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITextInput"><apiName>ITextInput</apiName><shortdesc>
  为可选择编辑的单行文本字段定义一个接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  为可选择编辑的单行文本字段定义一个接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      选择由这些参数指定的范围内的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>当前所选内容中第一个字符从零开始的字符索引值。
     
      </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>当前所选内容中最后一个字符后的位置从零开始的索引（与最后一个字符的从一开始的索引相等）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      选择由这些参数指定的范围内的文本。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:showBorderAndBackground"><apiName>showBorderAndBackground</apiName><shortdesc>
      确定 TextInput 的边框和背景是否可视。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc>如果可见，则为 <codeph>true</codeph>，如果不可见，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定 TextInput 的边框和背景是否可视。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ITextInput:mx.core:ITextInput:editable:get"><apiName>editable</apiName><shortdesc>
      指示用户是否可以编辑此控件中的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3196
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>指定是否可以编辑该组件
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示用户是否可以编辑此控件中的文本。如果值为 <codeph>true</codeph>，则表示用户可以编辑文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      当前显示的最左端像素的内容区域中的像素位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3194
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0

      </apiDefaultValue><apiTipTexts><apiTipText>当前显示的最左端字符的像素位置
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前显示的最左端像素的内容区域中的像素位置。（内容区域包括控件的所有内容，不是仅包括当前显示的部分。）该属性始终设置为 0，并且如果将 <codeph>wordWrap</codeph> 设置为 <codeph>true</codeph>，将忽略更改。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      用户可以在文本字段中输入的最大字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3191
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>TextInput 最多可以容纳的字符数
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      用户可以在文本字段中输入的最大字符数。此属性对通过设置控件的 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性指定的文本的长度没有限制。
     
      <p>默认值为 0，这是一种特殊情况，表示字符数不受限制。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
      如果为 true，则调用此控件的 drawFocus() 方法会转到其父项的 drawFocus() 方法上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 true，则对此控件的 <codeph>drawFocus()</codeph> 方法的调用会转到其父项的 <codeph>drawFocus()</codeph> 方法上。这用于当 TextInput 为复合控件（如 NumericStepper 或 ComboBox）的一部分时。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
      指示用户可以输入到控件的字符集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3193
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      </apiDefaultValue><apiTipTexts><apiTipText>可以输入到 TextInput 的字符集。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示用户可以输入到控件的字符集。如果 <codeph>restrict</codeph> 属性的值为 <codeph>null</codeph>，则可以输入任何字符。如果 <codeph>restrict</codeph> 属性的值为空字符串，则不能输入任何字符。此属性只限制用户交互；脚本可以将任何文本放入文本字段中。如果 <codeph>restrict</codeph> 属性的值为字符串，则只能在文本字段中输入该字符串中的字符。
     
      <p>Flex 按从左到右的顺序浏览字符串。可以使用连字符 (-) 指定一个范围。如果字符串以尖号 (^) 开头，则先接受所有字符，然后从接受字符集中排除字符串中 ^ 之后的字符。如果字符串不以尖号 (^) 开头，则最初不接受任何字符，然后将字符串中的字符包括在接受字符集中。</p>
     
      <p>由于某些字符在 <codeph>restrict</codeph> 属性中使用时具有特殊的意义，因此必须使用反斜杠字符指定文本字符 -、^ 和 \。将 <codeph>restrict</codeph> 属性用作 MXML 标签中的属性时，请使用单一反斜杠，如下例所示：\^\-\\。当您在 ActionScript 表达式中设置 <codeph>restrict</codeph> 时，请使用两个反斜杠，如下例所示：\\^\\-\\\。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
      一个标志，指示是否可以选择 TextInput 中的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示是否可以选择 TextInput 中的文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      当前所选内容中最后一个字符后的位置从零开始的索引（与最后一个字符的从一开始的索引相等）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>所选内容中最后一个字符从零开始的索引值。
     
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前所选内容中最后一个字符<i>后</i>的位置从零开始的索引（与最后一个字符的从一开始的索引相等）。例如，如果所选内容中的最后一个字符是第五个字符，则此属性的值为 5。当控件获得焦点时，如果已经设置 <codeph>selectionAnchorIndex</codeph> 和 <codeph>selectionActiveIndex</codeph> 这两种属性，则将能够看到选定内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      当前所选内容中第一个字符从零开始的字符索引值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>所选内容中第一个字符从零开始的索引值。
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前所选内容中第一个字符从零开始的字符索引值。例如，第一个字符的索引值是 0，第二个字符的索引值是 1，依此类推。当控件获得焦点时，如果已经设置 <codeph>selectionAnchorIndex</codeph> 和 <codeph>selectionActiveIndex</codeph> 这两种属性，则将能够看到选定内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:text:get"><apiName>text</apiName><shortdesc>
      控件中出现的纯文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><helpid>3190
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>获取或设置 TextInput 内容
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      控件中出现的纯文本。其外观由此 Lable 控件的 CSS 样式确定。
      
      <p>文本字符串中的任何 HTML 标签都将被忽略，其显示效果就像以字符串形式输入的一样。要显示使用 HTML 标签进行格式设置的文本，请改用 <codeph>htmlText</codeph> 属性。如果设置了 <codeph>htmlText</codeph> 属性，则 HTML 将替换使用此属性设置的所有文本，并且 <codeph>text</codeph> 属性将返回 HTML 文本的纯文本版本，而从中去除了所有 HTML 标签。有关详细信息，请参阅 <codeph>htmlText</codeph> 属性。</p>
     
      <p>要在文本中包括特殊字符左尖括号 (&lt;)、右尖括号 (>) 或和号 (&amp;)，请将文本字符串包含在 CDATA 标签中。此外，您可以使用 HTML 字符实体表示特殊字符，例如 <codeph>&amp;lt;</codeph>。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。<codeph>text</codeph> 属性可暂时使用值 <codeph>null</codeph>，此值表示刚刚设置了 <codeph>htmlText</codeph> 值，但相应的 <codeph>text</codeph> 值尚未确定。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexDisplayObject"><apiName>IFlexDisplayObject</apiName><shortdesc>
  IFlexDisplayObject 接口定义外观元素的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.display:IBitmapDrawable</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexDisplayObject 接口定义外观元素的接口。至少，外观必须是一个 DisplayObject 并实现此接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getBounds"><apiName>getBounds</apiName><shortdesc conref="flash.display.DisplayObject#getBounds()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getBounds()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getRect"><apiName>getRect</apiName><shortdesc conref="flash.display.DisplayObject#getRect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getRect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:globalToLocal"><apiName>globalToLocal</apiName><shortdesc conref="flash.display.DisplayObject#globalToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#globalToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestObject"><apiName>hitTestObject</apiName><shortdesc conref="flash.display.DisplayObject#hitTestObject()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestObject()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestPoint"><apiName>hitTestPoint</apiName><shortdesc conref="flash.display.DisplayObject#hitTestPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>shapeFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:localToGlobal"><apiName>localToGlobal</apiName><shortdesc conref="flash.display.DisplayObject#localToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#localToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:move"><apiName>move</apiName><shortdesc>
	  将此对象移动到指定的 x 和 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此对象的新 x 位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此对象的新 y 位置。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  将此对象移动到指定的 x 和 y 坐标。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:setActualSize"><apiName>setActualSize</apiName><shortdesc>
	  设置此对象的实际大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>此对象的新宽度。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>此对象的新高度。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  设置此对象的实际大小。
	 
	  <p>此方法主要用于实现 <codeph>updateDisplayList()</codeph> 方法。在此期间，您可以根据其显式大小、相对于父项的（百分比）大小以及度量大小计算此对象的实际大小。然后，通过调用 <codeph>setActualSize()</codeph> 将此实际大小应用于对象。</p>
	 
	  <p>在其他情况下，您应该设置 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph> 或 <codeph>percentHeight</codeph> 属性，而非调用此方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:accessibilityProperties:get"><apiName>accessibilityProperties</apiName><shortdesc conref="flash.display.DisplayObject#accessibilityProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.accessibility:AccessibilityProperties"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#accessibilityProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:blendMode:get"><apiName>blendMode</apiName><shortdesc conref="flash.display.DisplayObject#blendMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#blendMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:cacheAsBitmap:get"><apiName>cacheAsBitmap</apiName><shortdesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:filters:get"><apiName>filters</apiName><shortdesc conref="flash.display.DisplayObject#filters">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#filters">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc conref="flash.display.DisplayObject#loaderInfo">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#loaderInfo">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mask:get"><apiName>mask</apiName><shortdesc conref="flash.display.DisplayObject#mask">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mask">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
	  此对象的测量高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  此对象的测量高度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
	  此对象的测量宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  此对象的测量宽度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseX:get"><apiName>mouseX</apiName><shortdesc conref="flash.display.DisplayObject#mouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseY:get"><apiName>mouseY</apiName><shortdesc conref="flash.display.DisplayObject#mouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:name:get"><apiName>name</apiName><shortdesc conref="flash.display.DisplayObject#name">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#name">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:opaqueBackground:get"><apiName>opaqueBackground</apiName><shortdesc conref="flash.display.DisplayObject#opaqueBackground">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#opaqueBackground">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:parent:get"><apiName>parent</apiName><shortdesc conref="flash.display.DisplayObject#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:root:get"><apiName>root</apiName><shortdesc conref="flash.display.DisplayObject#root">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#root">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:rotation:get"><apiName>rotation</apiName><shortdesc conref="flash.display.DisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scale9Grid:get"><apiName>scale9Grid</apiName><shortdesc conref="flash.display.DisplayObject#scale9Grid">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scale9Grid">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleX:get"><apiName>scaleX</apiName><shortdesc conref="flash.display.DisplayObject#scaleX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleY:get"><apiName>scaleY</apiName><shortdesc conref="flash.display.DisplayObject#scaleY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scrollRect:get"><apiName>scrollRect</apiName><shortdesc conref="flash.display.DisplayObject#scrollRect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scrollRect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:stage:get"><apiName>stage</apiName><shortdesc conref="flash.display.DisplayObject#stage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#stage">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:transform:get"><apiName>transform</apiName><shortdesc conref="flash.display.DisplayObject#transform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#transform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:visible:get"><apiName>visible</apiName><shortdesc conref="flash.display.DisplayObject#visible">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#visible">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EventPriority"><apiName>EventPriority</apiName><shortdesc>
  EventPriority 类定义 EventDispatcher addEventListener() 方法的 priority 参数的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  EventPriority 类定义 EventDispatcher <codeph>addEventListener()</codeph> 方法的 <codeph>priority</codeph> 参数的常量值。
 
  <p>数值越大，事件侦听器的优先级越高。对于所有优先级为 <codeph>N</codeph> 的侦听器和优先级为 <codeph>N - 1</codeph> 的侦听器，将优先处理前者。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。</p>
 
  <p>优先级可以是正数、0 或负数。默认优先级为 0。</p>
 
  <p>您不应该编写取决于这些常量值的代码。它们在 Flex 的未来版本中可能会有所变动。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:EventPriority:BINDING"><apiName>BINDING</apiName><shortdesc>
	  自动生成的用于评估数据绑定表达式的事件处理程序需要在其他任何处理程序前执行，因此，它们的优先级高于默认优先级。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  自动生成的用于评估数据绑定表达式的事件处理程序需要在其他任何处理程序前执行，因此，它们的优先级高于默认优先级。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:CURSOR_MANAGEMENT"><apiName>CURSOR_MANAGEMENT</apiName><shortdesc>
	  CursorManager 具有的鼠标事件处理程序必须在其他鼠标事件处理程序之前执行，因此，它们具有高优先级。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>200</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  CursorManager 具有的鼠标事件处理程序必须在其他鼠标事件处理程序之前执行，因此，它们具有高优先级。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT_HANDLER"><apiName>DEFAULT_HANDLER</apiName><shortdesc>
	  某些组件侦听它们在自身上分派的事件并允许其他侦听器调用 preventDefault() 方法以告知组件不要执行默认动作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-50</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  某些组件侦听它们在自身上分派的事件并允许其他侦听器调用 <codeph>preventDefault()</codeph> 方法以告知组件不要执行默认动作。这些组件必须按照低于默认优先级的优先级进行侦听，以便首先执行其他处理程序，并有机会调用 <codeph>preventDefault()</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	  组件实例上的事件处理程序以默认优先级 (0) 执行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  组件实例上的事件处理程序以默认优先级 (<codeph>0</codeph>) 执行。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:EFFECT"><apiName>EFFECT</apiName><shortdesc>
	  自动生成的触发效果的事件处理程序在其他事件处理程序后执行，因此，它们的优先级低于默认优先级。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  自动生成的触发效果的事件处理程序在其他事件处理程序后执行，因此，它们的优先级低于默认优先级。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFactory"><apiName>IFactory</apiName><shortdesc>
  IFactory 接口定义工厂类（如 ClassFactory）必须实现的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFactory 接口定义工厂类（如 ClassFactory）必须实现的接口。IFactory 类型的对象是“工厂对象”，Flex 使用它来生成另一类的多个实例（每个实例具有相同的属性）。
 
  <p>例如，DataGridColumn 具有 IFactory 类型的 <codeph>itemRenderer</codeph>；它调用 <codeph>itemRenderer.newInstance()</codeph> 来为 DataGrid 的某一特定列创建单元格。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#ClassFactory"><linktext>mx.core.ClassFactory</linktext></link></related-links><apiOperation id="mx.core:IFactory:mx.core:IFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  创建某一类（由实现 IFactory 的类确定）的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新创建的实例。
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  创建某一类（由实现 IFactory 的类确定）的实例。
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
  延迟实例工厂，创建并返回指定类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  延迟实例工厂，创建并返回指定类的实例。在首次需要某个类并且此后需要引用实例时，应用程序可以使用 <codeph>getInstance()</codeph> 方法为该类创建实例。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromFunction"><linktext>DeferredInstanceFromFunction</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromClass:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiDesc><codeph>getInstance()</codeph> 方法创建并返回的实例所属的类。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromClass:getInstance"><apiName>getInstance</apiName><shortdesc>
      创建并返回在 DeferredInstanceFromClass 构造函数中指定的类的实例（如果尚不存在）；否则，返回已经创建的类实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>在 DeferredInstanceFromClass 构造函数中指定的类的实例。
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      创建并返回在 DeferredInstanceFromClass 构造函数中指定的类的实例（如果尚不存在）；否则，返回已经创建的类实例。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromClass:reset"><apiName>reset</apiName><shortdesc>
      将工厂的状态重置为最初的、未初始化的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将工厂的状态重置为最初的、未初始化的状态。将清除对缓存的实例的引用。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
  FlexMovieClip 是 Player 的 MovieClip 类的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexMovieClip 是 Player 的 MovieClip 类的子类。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexMovieClip:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
	 
	  <p>将 <codeph>name</codeph> 属性设置为 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。</p>
	 
	  <p>此字符串由对象的类名称和应用程序内的唯一整数连接而成，如 <codeph>"FlexMovieClip14"</codeph>。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexMovieClip:toString"><apiName>toString</apiName><shortdesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（如 <codeph>"MyApp0.HBox5.FlexMovieClip14"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法从对象及其后代的 <codeph>name</codeph> 属性中生成。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUIComponent"><apiName>IUIComponent</apiName><shortdesc>
  IUIComponent 接口定义基本 API 集，必须实现这些 API 才能创建 Flex 容器或列表的子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IUIComponent 接口定义基本 API 集，必须实现这些 API 才能创建 Flex 容器或列表的子项。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>一个 Number，在已定义的情况下是 explicitHeight，在未定义的情况下是 measuredHeight。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>一个 Number，在已定义的情况下是 explicitWidth，在未定义的情况下是 measuredWidth。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      初始化对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      初始化对象。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/initialize()"><linktext>mx.core.UIComponent.initialize()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:owns"><apiName>owns</apiName><shortdesc conref="mx.core.UIComponent#owns()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果子项以此 UIComponent 为父项或归其所有，则为 <codeph>true</codeph>。
      
      </apiDesc></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>一个 UIComponent。
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#owns()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc conref="mx.core.UIComponent#parentChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>此 UIComponent 对象的父项。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#parentChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:setVisible"><apiName>setVisible</apiName><shortdesc conref="mx.core.UIComponent#setVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc><codeph>visible</codeph> 属性的新值。指定 <codeph>true</codeph> 可显示组件，指定 <codeph>false</codeph> 可隐藏组件。
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>true</codeph>，则不分派事件。如果为 <codeph>false</codeph>，则当组件变为可见时分派 <codeph>show</codeph> 事件，当组件变为不可见时分派 <codeph>hide</codeph> 事件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      组件第一行文本的基线的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      组件第一行文本的基线的 y 坐标。
     
      <p>此属性用于实现 <codeph>baseline</codeph> 约束样式，还可用于将 FormItem 的标签与 FormItem 中的控件对齐。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:document:get"><apiName>document</apiName><shortdesc>
      对与此组件关联的文档对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      对与此组件关联的文档对象的引用。文档对象是位于 Flex 应用程序、MXML 组件或 ActionScript 组件层次结构顶层的 Object。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:enabled:get"><apiName>enabled</apiName><shortdesc>
      组件是否可以接受用户交互。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      组件是否可以接受用户交互。将 <codeph>enabled</codeph> 属性设置为 <codeph>false</codeph> 后，某些组件仍会响应鼠标交互，如 mouseOver。因此，要完全禁用 UIComponent，您应该将 <codeph>mouseEnabled</codeph> 属性的值也设置为 <codeph>false</codeph>。如果将容器的 <codeph>enabled</codeph> 属性设置为 <codeph>false</codeph>，则 Flex 会使该容器及其所有子项的颜色变暗，并阻止用户向容器及其所有子项输入内容。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      在组件坐标中显式指定的组件高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中显式指定的组件高度（以像素为单位）。如果没有显式指定的高度，则值为 <codeph>NaN</codeph>。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitHeight"><linktext>mx.core.UIComponent.explicitHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      在组件坐标中指定组件最大高度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最大高度的数字（以像素为单位）。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      在组件坐标中指定组件最大宽度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最大宽度的数字（以像素为单位）。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      在组件坐标中指定组件最小高度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最小高度的数字（以像素为单位）。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinHeight"><linktext>mx.core.UIComponent.explicitMinHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      在组件坐标中指定组件最小宽度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最小宽度的数字（以像素为单位）。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinWidth"><linktext>mx.core.UIComponent.explicitMinWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      在组件坐标中显式指定的组件宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中显式指定的组件宽度（以像素为单位）。如果没有显式指定的宽度，则值为 <codeph>NaN</codeph>。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitWidth"><linktext>mx.core.UIComponent.explicitWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      在组件中共享并用作绘制焦点指示符的叠加层的单个 Sprite 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      在组件中共享并用作绘制焦点指示符的叠加层的单个 Sprite 对象。如果组件的父项具有焦点，则这些组件共享此对象；如果该组件实现了 IFocusManagerComponent 接口，则不共享此对象。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/focusPane"><linktext>mx.core.UIComponent.focusPane</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      在组件坐标中指定组件最大高度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最大高度的数字（以像素为单位）。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxHeight"><linktext>mx.core.UIComponent.maxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      在组件坐标中指定组件最大宽度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最大宽度的数字（以像素为单位）。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxWidth"><linktext>mx.core.UIComponent.maxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      在组件坐标中指定组件最小高度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最小高度的数字（以像素为单位）。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minHeight"><linktext>mx.core.UIComponent.minHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      在组件坐标中指定组件最小宽度的数字（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      在组件坐标中指定组件最小宽度的数字（以像素为单位）。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minWidth"><linktext>mx.core.UIComponent.minWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      以组件父项大小百分比的方式指定组件高度的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      以组件父项大小百分比的方式指定组件高度的数字。允许的值为从 0 到 100。     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      以组件父项大小百分比形式指定其宽度的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      以组件父项大小百分比形式指定其宽度的数字。允许的值为从 0 到 100。     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      对此组件的 SystemManager 对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      对此组件的 SystemManager 对象的引用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      由 EffectManager 使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      由 EffectManager 使用。如果组件不使用 EffectManager 执行 Tween，则返回非空值。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
  FlexTextField 是 Player 的 TextField 类的子类，同时也是 UITextField 的 superclass。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexTextField 是 Player 的 TextField 类的子类，同时也是 UITextField 的 superclass。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexTextField:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
	 
	  <p>将 <codeph>name</codeph> 属性设置为 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。</p>
	 
	  <p>此字符串由对象的类名称和应用程序内的唯一整数连接而成，如 <codeph>"UITextField18"</codeph>。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexTextField:toString"><apiName>toString</apiName><shortdesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（如 <codeph>"MyApp0.HBox5.UITextField18"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法从对象及其后代的 <codeph>name</codeph> 属性中生成。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IRawChildrenContainer"><apiName>IRawChildrenContainer</apiName><shortdesc>
  IRawChildrenContainer 接口定义能够返回一个给出其所有子项的 IChildList 的容器的 API。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRawChildrenContainer 接口定义能够返回一个给出其所有子项的 IChildList 的容器的 API。已覆盖 IChildList API（如 <codeph>numChildren</codeph> 和 <codeph>addChild()</codeph> 方法）的任何容器都应实现此接口，以便仅管理其实际子项的子集。例如，mx.core.Container 类包含一组独立于非内容子项的内容子项，如边框、标题栏和分隔符。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link></related-links><apiValue id="mx.core:IRawChildrenContainer:mx.core:IRawChildrenContainer:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  返回一个给出所有子项的 IChildList。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  返回一个给出所有子项的 IChildList。FocusManager 使用它来查找仍然可以接收焦点的非内容子项（例如 ControlBars 中的组件）。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DragSource"><apiName>DragSource</apiName><shortdesc>
  DragSource 类中包含正被拖动的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  DragSource 类中包含正被拖动的数据。数据可以采用多种格式，具体取决于启动拖动的控件的类型。
 
  <p>每种数据格式都使用一个字符串进行标识。<codeph>hasFormat()</codeph> 方法用于确定对象是否包含使用相应格式的数据。<codeph>dataForFormat()</codeph> 方法用于检索指定格式的数据。</p>
 
  <p>可以使用 <codeph>addData()</codeph> 方法直接添加数据，也可以使用 <codeph>addHandler()</codeph> 方法间接添加数据。<codeph>addHandler()</codeph> 方法会注册一个回调，请求该数据时将调用此回调。添加非本机格式的数据可能需要进行大量计算或转换，此时该方法就非常有用。例如，如果您具有原始声音数据，则可以添加 MP3 格式处理程序。仅当请求 MP3 数据时才执行 MP3 转换。</p>
  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:DragSource:DragSource"><apiName>DragSource</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DragSource:addData"><apiName>addData</apiName><shortdesc>
	  向拖动源添加数据和相应的格式 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>用于指定拖动数据的对象。这可以是任何对象，如，String、DataProvider，等等。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>字符串，用于指定一个标签来描述此数据格式。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  向拖动源添加数据和相应的格式 String。此方法不返回值。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:addHandler"><apiName>addHandler</apiName><shortdesc>
	  添加一个处理函数，当请求指定格式的数据时将调用此处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>handler</apiItemName><apiType value="Function"/><apiDesc>一个函数，用于指定请求数据时需要调用的处理函数。此函数必须返回指定格式的数据。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>用于指定此数据的格式的字符串。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  添加一个处理函数，当请求指定格式的数据时将调用此处理函数。当拖动大量数据时，此函数非常有用。仅当请求数据时才调用该处理函数。此方法不返回值。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:dataForFormat"><apiName>dataForFormat</apiName><shortdesc>
	  检索指定格式的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含所请求格式的数据的 Object。如果拖动多个项目，则返回值是一个 Array。对于基于 List 的控件，返回值始终为 Array，即使其中只包含一个项目也是如此。
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>字符串，用于指定一个标签来描述要返回的数据的格式。如果要用 <codeph>addData()</codeph> 方法创建自定义放置目标，则此字符串可以是自定义值。 
	  <p>基于 List 的控件对于 <codeph>format</codeph> 参数有预定义的值。如果启动拖动操作的控件是 Tree，则格式为 "treeItems"，且项目实现 ITreeDataProvider 接口。对于本身即支持拖放的所有其他基于 List 的控件，格式为 "items"，且项目实现 IDataProvider 接口。</p>
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  检索指定格式的数据。如果此数据是使用 <codeph>addData()</codeph> 方法添加的，则可以直接返回此数据。如果此数据是使用 <codeph>addHandler()</codeph> 方法添加的，则需调用处理程序函数来返回此数据。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:hasFormat"><apiName>hasFormat</apiName><shortdesc>
	  如果数据源中包含请求的格式，则返回 true；否则，返回 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果数据源中包含所请求的格式，则返回 <codeph>true</codeph>。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>字符串，用于指定一个标签来描述此数据的格式。 
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  如果数据源中包含所请求的格式，则返回 <codeph>true</codeph>；否则，返回 <codeph>false</codeph>。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DragSource:formats:get"><apiName>formats</apiName><shortdesc>
	  包含拖动数据的格式，以字符串 Array 的形式表示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
	  包含拖动数据的格式，以字符串 Array 的形式表示。使用 <codeph>addData()</codeph> 或 <codeph>addHandler()</codeph> 方法设置此属性。默认值取决于添加到 DragSource 对象的数据。
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:InteractionMode"><apiName>InteractionMode</apiName><shortdesc>
      InteractionMode 类为 UIComponent 类的 interactionMode 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      InteractionMode 类为 UIComponent 类的 <codeph>interactionMode</codeph> 属性定义值。
           </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.Container.xml"><linktext>mx.core.Container</linktext></link><link href="" invalidHref="mx.core.ScrollControlBase.xml"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:InteractionMode:MOUSE"><apiName>MOUSE</apiName><shortdesc>
          该组件的主要交互模式是通过 mouse。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouse</apiData><apiType value="String"/></apiValueDef><apiDesc>
          该组件的主要交互模式是通过 mouse。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:InteractionMode:TOUCH"><apiName>TOUCH</apiName><shortdesc>
          该组件的主要交互模式是通过 touch。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>touch</apiData><apiType value="String"/></apiValueDef><apiDesc>
          该组件的主要交互模式是通过 touch。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
  FlexBitmap 是 Player 的 Bitmap 类的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Bitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexBitmap 是 Player 的 Bitmap 类的子类。它将覆盖 <codeph>toString()</codeph> 方法以返回一个字符串，用于指示对象在应用程序的 DisplayObject 层次结构中所处的位置。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexBitmap:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>位图数据。 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>位图是否与最近的像素对齐。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>在缩放时是否对位图进行平滑处理。 
	 
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
	 
	  <p>将 <codeph>name</codeph> 属性设置为 mx.utils.NameUtils 类的 <codeph>createUniqueName()</codeph> 方法返回的字符串。此字符串是与在应用程序内具有唯一性的整数相连接的对象的类的名称，如 <codeph>"FlexBitmap12"</codeph>。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexBitmap:toString"><apiName>toString</apiName><shortdesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>指示此对象在应用程序的 DisplayObject 层次结构中所处的位置的 String。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  返回一个字符串，用于指示此对象在应用程序的 DisplayObject 层次结构中所处的位置。此字符串（例如 <codeph>"MyApp0.HBox5.FlexBitmap12"</codeph>）由 mx.utils.NameUtils 类的 <codeph>displayObjectToString()</codeph> 方法根据对象及其始祖的 <codeph>name</codeph> 属性构建。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IMXMLObject"><apiName>IMXMLObject</apiName><shortdesc>
  IMXMLObject 接口定义 API，非可视组件必须实现这些 API 才能正确使用 MXML 编译器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IMXMLObject 接口定义 API，非可视组件必须实现这些 API 才能正确使用 MXML 编译器。当前，只支持 <codeph>initialized()</codeph> 方法。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IMXMLObject:mx.core:IMXMLObject:initialized"><apiName>initialized</apiName><shortdesc>
      创建实现对象且初始化在 MXML 标签上指定的所有组件属性后调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>创建此对象的 MXML 文档。
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc><codeph>document</codeph> 用来引用此对象的标识符。如果此对象是 <codeph>document</codeph> 上的深层属性，则 <codeph>id</codeph> 为 null。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建实现对象且初始化在 MXML 标签上指定的所有组件属性后调用。
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:RuntimeDPIProvider"><apiName>RuntimeDPIProvider</apiName><shortdesc>
  RuntimeDPIProvider 类提供相似设备 DPI 值到预定义 DPI 类的默认映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  RuntimeDPIProvider 类提供相似设备 DPI 值到预定义 DPI 类的默认映射。应用程序可能将其 runtimeDPIProvider 属性设置为 RuntimeDPIProvider 的子类，以覆盖 Flex 的默认映射。覆盖 Flex 的默认映射会导致在应用程序的自动缩放行为中做出更改。
 
  <p>对于错误报告其 screenDPI 的设备和可能在不同 DPI 类中更好进行缩放的设备，通常才需要覆盖 Flex 的默认映射。</p>
 
  <p>Flex 的默认映射为：
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><tbody><row><entry>160 DPI</entry><entry>&lt;200 DPI</entry></row><row><entry>240 DPI</entry><entry>>=200 DPI 和 &lt;280 DPI</entry></row><row><entry>320 DPI</entry><entry>>=280 DPI</entry></row></tbody></tgroup></adobetable>
  </p>
 
  <p>RuntimeDPIProvider 的子类应仅依赖于运行时 API，且不应依赖于特定于 Flex 框架的任意类（除 <codeph>mx.core.DPIClassification</codeph> 之外）。</p>
  
  </apiDesc><example conref="RuntimeDPIProviderApp.mxml"/><example conref="RuntimeDPIProviderExample.as"/><example conref="RuntimeDPIProviderAppView.mxml"/></apiClassifierDetail><related-links><link href="mx.core.xml#DPIClassification"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="spark.components.xml#Application/applicationDPI"><linktext>spark.components.Application.applicationDPI</linktext></link></related-links><apiConstructor id="mx.core:RuntimeDPIProvider:RuntimeDPIProvider"><apiName>RuntimeDPIProvider</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:RuntimeDPIProvider:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      通过将其 flash.system.Capabilities.screenDPI 映射至 mx.core.DPIClassification 中几个 DPI 值之一，返回当前设备的运行时 DPI。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      通过将其 <codeph>flash.system.Capabilities.screenDPI</codeph> 映射至 <codeph>mx.core.DPIClassification</codeph> 中几个 DPI 值之一，返回当前设备的运行时 DPI。一些设备可以具有略有不同的 DPI 值且 Flex 将其映射至几个 DPI 类。当针对特定 DPI 而编写的应用程序通过缩放适应于当前方法时，Flex 使用该方法计算当前 DPI 值。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.Capabilities.xml"><linktext>flash.system.Capabilities</linktext></link><link href="mx.core.xml#DPIClassification"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:FlexVersion"><apiName>FlexVersion</apiName><shortdesc> 
  此类控制框架的向后兼容性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
  此类控制框架的向后兼容性。对于每个新版本，框架的某些方面（如行为、样式和默认设置）都会发生变化，这可能会对您的应用程序产生影响。通过设置 <codeph>compatibilityVersion</codeph> 属性，可以将行为更改为与先前版本匹配。这是一个“全局”标志；您不能对一个组件或一组组件应用一个版本，而对另一个组件或另一组组件应用另一版本。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
      Flex SDK 的当前发布版本，编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04060000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex SDK 的当前发布版本，编码为 uint。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0_1"><apiName>VERSION_2_0_1</apiName><shortdesc> 
      Flex 2.0.1 的 compatibilityVersion 值，使用数字编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000001</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 2.0.1 的 <codeph>compatibilityVersion</codeph> 值，使用数字编码为 <codeph>uint</codeph>。代码可以将此常量与 <codeph>compatibilityVersion</codeph> 进行比较，以实现版本特定的行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
      Flex 2.0 的 compatibilityVersion 值，使用数字编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 2.0 的 <codeph>compatibilityVersion</codeph> 值，使用数字编码为 <codeph>uint</codeph>。代码可以将此常量与 <codeph>compatibilityVersion</codeph> 进行比较，以实现版本特定的行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
      Flex 3.0 的 compatibilityVersion 值，使用数字编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 3.0 的 <codeph>compatibilityVersion</codeph> 值，使用数字编码为 <codeph>uint</codeph>。代码可以将此常量与 <codeph>compatibilityVersion</codeph> 进行比较，以实现版本特定的行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_0"><apiName>VERSION_4_0</apiName><shortdesc> 
      Flex 4.0 的 compatibilityVersion 值，使用数字编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 4.0 的 <codeph>compatibilityVersion</codeph> 值，使用数字编码为 <codeph>uint</codeph>。代码可以将此常量与 <codeph>compatibilityVersion</codeph> 进行比较，以实现版本特定的行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_5"><apiName>VERSION_4_5</apiName><shortdesc> 
      Flex 4.5 的 compatibilityVersion 值，使用数字编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04050000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 4.5 的 <codeph>compatibilityVersion</codeph> 值，使用数字编码为 <codeph>uint</codeph>。代码可以将此常量与 <codeph>compatibilityVersion</codeph> 进行比较，以实现版本特定的行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_6"><apiName>VERSION_4_6</apiName><shortdesc> 
      Flex 4.6 的 compatibilityVersion 值，使用数字编码为 uint。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04060000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 4.6 的 <codeph>compatibilityVersion</codeph> 值，使用数字编码为 <codeph>uint</codeph>。代码可以将此常量与 <codeph>compatibilityVersion</codeph> 进行比较，以实现版本特定的行为。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_READ"><apiName>VERSION_ALREADY_READ</apiName><shortdesc>
      作为参数传递给 compatibilityErrorFunction() 方法的 String（如果已读取兼容版本）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadyRead</apiData><apiType value="String"/></apiValueDef><apiDesc>
      作为参数传递给 <codeph>compatibilityErrorFunction()</codeph> 方法的 String（如果已读取兼容版本）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_SET"><apiName>VERSION_ALREADY_SET</apiName><shortdesc>
      作为参数传递给 compatibilityErrorFunction() 方法的 String（如果已设置兼容版本）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadySet</apiData><apiType value="String"/></apiValueDef><apiDesc>
      作为参数传递给 <codeph>compatibilityErrorFunction()</codeph> 方法的 String（如果已设置兼容版本）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityErrorFunction:get"><apiName>compatibilityErrorFunction</apiName><shortdesc> 
      当多次设置兼容版本或在读取后设置兼容版本时调用的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      当多次设置兼容版本或在读取后设置兼容版本时调用的函数。如果未设置此函数，SDK 将引发错误。如果已设置此函数，File 将调用此函数，但如何处理此调用由开发人员决定。当多次设置该函数时，也会调用此函数。该函数包含两个参数：第一个是 <codeph>uint</codeph>，即试图设置的版本；第二个是指示失败原因的字符串，可以是 <codeph>VERSION_ALREADY_SET</codeph> 或 <codeph>VERSION_ALREADY_READ</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersionString:get"><apiName>compatibilityVersionString</apiName><shortdesc> 
      兼容版本，“X.X.X”格式的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      兼容版本，“X.X.X”格式的字符串。该字符串将传递给 <codeph>compatibilityVersion</codeph> 属性，此属性可将数字转换为便于人们理解的 String 版本，或逆向转换。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersion:get"><apiName>compatibilityVersion</apiName><shortdesc> 
      框架维护其兼容性的当前版本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiDefaultValue>FlexVersion.CURRENT_VERSION
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      框架维护其兼容性的当前版本。默认为 <codeph>CURRENT_VERSION</codeph>。它只能更改一次；另外更改时会导致调用 <codeph>compatibilityErrorFunction()</codeph> 方法（如果存在），或导致运行时错误。在读取 <codeph>compatibilityVersion</codeph> 属性后对其进行更改会导致错误，因为依赖于该版本的代码已在运行。不会发出任何通知，系统将假定此版本只设置了一次，并且早在依赖它的版本运行之前就已进行了设置。
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToolTip"><apiName>IToolTip</apiName><shortdesc>
  IToolTip 接口定义 API，类似工具提示的组件必须实现这些 API 才能使用 ToolTipManager。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IToolTip 接口定义 API，类似工具提示的组件必须实现这些 API 才能使用 ToolTipManager。ToolTip 类实现了此接口。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link></related-links><apiValue id="mx.core:IToolTip:mx.core:IToolTip:screen:get"><apiName>screen</apiName><shortdesc>
	  指定此工具提示的基本绘图表面的大小和位置的矩形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  指定此工具提示的基本绘图表面的大小和位置的矩形。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IToolTip:mx.core:IToolTip:text:get"><apiName>text</apiName><shortdesc>
	  工具提示中显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  工具提示中显示的文本。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient2"><apiName>IStateClient2</apiName><shortdesc>
  IStateClient2 接口定义组件要支持 Flex 4 视图状态语义所必须实现的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStateClient2 接口定义组件要支持 Flex 4 视图状态语义所必须实现的接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IStateClient2:mx.core:IStateClient2:hasState"><apiName>hasState</apiName><shortdesc>
      确定是否已在此 UIComponent 上定义指定的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>是否已定义指定的状态 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>正在检查的状态的名称。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定是否已在此 UIComponent 上定义指定的状态。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:states:get"><apiName>states</apiName><shortdesc>
      视图状态对象集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      视图状态对象集。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:transitions:get"><apiName>transitions</apiName><shortdesc>
      视图状态转换集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      视图状态转换集。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
  一个延迟实例工厂，它使用生成函数创建所需对象实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  一个延迟实例工厂，它使用生成函数创建所需对象实例。应用程序使用 <codeph>getInstance()</codeph> 方法在首次需要对象实例时创建该实例，随后获取对该对象的引用。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromClass"><linktext>DeferredInstanceFromClass</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromFunction:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Function"/><apiDesc>创建并返回所需对象的实例的函数。
     
      </apiDesc></apiParam><apiParam><apiItemName>destructor</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>一个可选函数，用于在调用 <codeph>reset()</codeph> 时清理未完成的引用。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromFunction:getInstance"><apiName>getInstance</apiName><shortdesc>
      返回对所需对象的实例的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对象的实例。
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      返回对所需对象的实例的引用。如果不存在所需对象的实例，则将调用在此类的 <codeph>generator</codeph> 构造函数参数中指定的函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromFunction:reset"><apiName>reset</apiName><shortdesc>
      将工厂的状态重置为最初的、未初始化的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将工厂的状态重置为最初的、未初始化的状态。将清除对缓存的实例的引用。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
  SWFBridgeGroup 表示应用程序与其父级和子级进行通信所需的所有沙箱桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeGroup</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  SWFBridgeGroup 表示应用程序与其父级和子级进行通信所需的所有沙箱桥。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SWFBridgeGroup:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>拥有此组的 DisplayObject。这应该是应用程序的 SystemManager。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
	  
      向舱中添加新桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>与子内容进行通信的桥。
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>加载桥所代表的内容的 DisplayObject。通常这将是 SWFLoader 类的实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      向舱中添加新桥。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
	  
      测试给定的桥是否为此组中的沙箱桥之一。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果找到了句柄，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>要测试的桥。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      测试给定的桥是否为此组中的沙箱桥之一。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
	  
      获取桥的所有者以及加载子桥的 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>加载子桥的对象。 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>目标桥。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      获取桥的所有者以及加载子桥的 DisplayObject。收到事件后如果 <codeph>event.target</codeph> 为桥，则此方法很有用。然后即可将桥转换为拥有的 DisplayObject。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
	  
      获取此组中的所有子桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此组中所有子桥的数组。数组中的每个对象都是 <codeph>IEventDispatcher</codeph> 类型。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
	  
      获取此组中的所有子桥。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
	  
      删除子桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>要删除的桥。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      删除子桥。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      如果父级位于不同的沙箱中，则允许与父级通信。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      如果父级位于不同的沙箱中，则允许与父级通信。如果父级在同一个沙箱中，或者此父级是顶级根应用程序，则可以是 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IIMESupport"><apiName>IIMESupport</apiName><shortdesc>
  IIMESupport 接口定义任何支持 IME（输入法编辑器）的组件的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IIMESupport 接口定义任何支持 IME（输入法编辑器）的组件的接口。IME 用于输入中文、日文和韩文字符。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link></related-links><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      指定当该组件获得焦点时，是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指定当该组件获得焦点时，是否应启用 IME。即使组件使用 IME，它也不可能出现在所有的配置当中。例如，由于在该配置中不允许输入，如果  <codeph>editable</codeph> 为 <codeph>false</codeph>，则 TextArea 会将 enableIME 设置为 false。同样，DataGrid 始终将 enableIME 设置为 false。如果 DataGrid 使用 ItemEditor，编辑器会将 <codeph>enableIME</codeph> 设置为 <codeph>true</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:imeMode:get"><apiName>imeMode</apiName><shortdesc>
	  组件的 IME 模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  组件的 IME 模式。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstantiationUIComponent"><apiName>IDeferredInstantiationUIComponent</apiName><shortdesc>
  IDeferredInstantiationUIComponent 接口定义延迟实例化的组件或对象的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDeferredInstantiationUIComponent 接口定义延迟实例化的组件或对象的接口。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      在 IUIComponent 对象的父项文档对象上创建对此对象的 id 引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>此 IUIComponent 对象的父项。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      在 IUIComponent 对象的父项文档对象上创建对此对象的 <codeph>id</codeph> 引用。此函数可以对一个或多个 repeater 中的象创建多维引用，如 b[2][4]。如果索引为 null，它将创建一个简单的非 Array 引用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      在 IUIComponent 对象的父项文档对象上删除对此对象的 id 引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>此 IUIComponent 对象的父项。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      在 IUIComponent 对象的父项文档对象上删除对此对象的 <codeph>id</codeph> 引用。此函数可以对一个或多个 Repeater 中的对象删除多维引用，如 b[2][4]。如果索引为 null，它将删除简单的非 Array 引用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc conref="mx.core.UIComponent#executeBindings()">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>以递归方式为此组件的子项执行绑定。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#executeBindings()">
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
	  对于每个效果事件，注册 EffectManager 作为其中一个事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>效果名称的字符串 Array。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  对于每个效果事件，注册 EffectManager 作为其中一个事件侦听器。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc conref="mx.core.UIComponent#cachePolicy">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cachePolicy">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc conref="mx.core.UIComponent#descriptor">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#descriptor">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:id:get"><apiName>id</apiName><shortdesc conref="mx.core.UIComponent#id">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#id">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc conref="mx.core.UIComponent#cacheHeuristic">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cacheHeuristic">
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFontContextComponent"><apiName>IFontContextComponent</apiName><shortdesc>
  允许组件支持字体上下文属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  允许组件支持字体上下文属性。当向显示列表添加子项时，框架就会在组件上设置此属性。对于可创建包含嵌入字体的 flash.text.TextField 对象的组件，字体上下文非常重要。如果尚未使用 Font.registerFont() 注册嵌入字体，则仅当嵌入字体是在嵌入字体上下文中创建的时，TextField 对象才能使用嵌入字体。此接口支持跟踪组件的字体上下文。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IFontContextComponent:mx.core:IFontContextComponent:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      为此组件提供字体上下文的模块工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      为此组件提供字体上下文的模块工厂。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeGroup"><apiName>ISWFBridgeGroup</apiName><shortdesc>
  沙箱桥组是代表此应用程序可以与之通信的应用程序的一组桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  沙箱桥组是代表此应用程序可以与之通信的应用程序的一组桥。此应用程序无法与组中的其他应用程序共享内存（即无权访问这些应用程序），而是要使用桥与这些应用程序通信。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
      向舱中添加新桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>与子内容进行通信的桥。
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>加载桥所代表的内容的 DisplayObject。通常这将是 SWFLoader 类的实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      向舱中添加新桥。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
      测试给定的桥是否为此组中的沙箱桥之一。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果找到了句柄，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>要测试的桥。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      测试给定的桥是否为此组中的沙箱桥之一。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
      获取桥的所有者以及加载子桥的 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>加载子桥的对象。 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>目标桥。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取桥的所有者以及加载子桥的 DisplayObject。收到事件后如果 <codeph>event.target</codeph> 为桥，则此方法很有用。然后即可将桥转换为拥有的 DisplayObject。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
      获取此组中的所有子桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此组中所有子桥的数组。数组中的每个对象都是 <codeph>IEventDispatcher</codeph> 类型。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      获取此组中的所有子桥。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
      删除子桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>要删除的桥。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      删除子桥。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      用于与此组的父应用程序进行通信的桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      用于与此组的父应用程序进行通信的桥。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutElement"><apiName>ILayoutElement</apiName><shortdesc>
  ILayoutElement 接口主要由布局类用于查询 GroupBase 容器的元素并确定其大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ILayoutElement 接口主要由布局类用于查询 GroupBase 容器的元素并确定其大小和位置。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      按指定的元素大小，返回元素边界的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>按指定的元素大小，元素边界的 x 坐标。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>元素的界限宽度，或要使用首选宽度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>元素的界限高度，或要使用首选高度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 x 坐标。边框位于元素的父坐标空间中，并基于指定的边界大小、布局位置和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      按指定的元素大小，返回元素边界的 x 坐标。
     
      <p>如果将元素大小调整为特定尺寸，则此方法通常在调用 <codeph>measure()</codeph> 方法期间由布局使用，以预测该元素将来的位置。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize()"><linktext>setLayoutBoundsSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionX()"><linktext>getLayoutPositionX()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      按指定的元素大小，返回元素边界的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>按指定的元素大小，元素边界的 y 坐标。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>元素的界限宽度，或要使用首选宽度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>元素的界限高度，或要使用首选高度的 NaN。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 y 坐标。边框位于元素的父坐标空间中，并基于指定的边界大小、布局位置和布局转换矩阵进行计算。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      按指定的元素大小，返回元素边界的 y 坐标。如果将元素大小调整为特定尺寸，则此方法通常在调用 <codeph>measure()</codeph> 期间由布局使用，以预测该元素将来的位置。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize()"><linktext>setLayoutBoundsSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionY()"><linktext>getLayoutPositionY()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      返回元素的布局高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的布局高度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的布局大小和布局转换矩阵进行计算。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的布局高度。这是元素在屏幕上进行绘制时所用的大小。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutWidth()"><linktext>getLayoutWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      返回元素的布局宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的布局宽度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的布局大小和布局转换矩阵进行计算。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的布局宽度。这是元素在屏幕上进行绘制时所用的大小。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutHeight()"><linktext>getLayoutHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      返回元素在屏幕上进行绘制时所用的 x 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素在屏幕上进行绘制时所用的 x 坐标。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 x 坐标。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素在屏幕上进行绘制时所用的 x 坐标。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionY()"><linktext>getLayoutPositionY()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      返回元素在屏幕上进行绘制时所用的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素在屏幕上进行绘制时所用的 y 坐标。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素边框左上角的 y 坐标。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素在屏幕上进行绘制时所用的 y 坐标。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionX()"><linktext>getLayoutPositionX()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      返回此元素的布局转换 Matrix3D。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此元素的布局转换 Matrix3D。不要直接修改返回值，请调用 <codeph>setLayoutMatrix()</codeph> 方法。
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      返回此元素的布局转换 Matrix3D。
     
      <p>此矩阵通常由组件的转换属性定义，例如，<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph> 属性。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      返回用于相对于其同级组件计算组件的布局的转换矩阵。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>此元素的布局转换 Matrix。不要直接修改返回值；请调用 <codeph>setLayoutMatrix()</codeph> 方法。
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      返回用于相对于其同级组件计算组件的布局的转换矩阵。
           <p>此矩阵通常由组件的 2D 属性（如 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>）定义。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph> 属性。</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      返回元素的最大高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大高度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框高度。边框位于元素的父坐标空间中，并基于元素的最大大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的最大高度。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxWidth()"><linktext>getMaxWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      返回元素的最大宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大宽度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 true 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的最大大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的最大宽度。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxHeight()"><linktext>getMaxHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      返回元素的最小高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大高度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框高度。边框位于元素的父坐标空间中，并基于元素的最小大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的最小高度。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinWidth()"><linktext>getMinWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      返回元素的最小宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>元素的最大宽度。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的最小大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的最小宽度。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinHeight()"><linktext>getMinHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      返回元素的首选高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回元素的首选高度。首选高度通常基于默认元素大小和任何显式覆盖。对于 UIComponent，该值与 <codeph>getExplicitOrMeasuredHeight()</codeph> 方法所返回的值相同。
           </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框高度。边框位于元素的父坐标空间中，并基于元素的首选大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的首选高度。  
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredWidth()"><linktext>getPreferredWidth()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      返回元素的首选宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回元素的首选宽度。首选宽度通常基于默认元素大小和任何显式覆盖。对于 UIComponent，该值与 <codeph>getExplicitOrMeasuredWidth()</codeph> 方法所返回的值相同。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，该方法会返回元素的边框宽度。边框位于元素的父坐标空间中，并基于元素的首选大小和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回元素的首选宽度。   
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredHeight()"><linktext>getPreferredHeight()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      设置元素在屏幕上进行绘制时所用的坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>边框左上角的 X 坐标。 
           </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>边框左上角的 Y 坐标。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>当 <codeph>postLayoutTransform</codeph> 为 <codeph>true</codeph> 时，元素的定位方式为：其边框的左上角为 (x, y)。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置元素在屏幕上进行绘制时所用的坐标。
           <p>请注意，调用 <codeph>setLayoutBoundSize()</codeph> 方法会影响布局位置，因此请在调用 <codeph>setLayoutBoundSize()</codeph> 之后再调用 <codeph>setLayoutBoundPosition()</codeph>。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutSize()"><linktext>setLayoutSize()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      设置元素的布局大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>元素的布局宽度。
           </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>元素的布局高度。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果 <codeph>postLayoutTransform</codeph> 为 true，则指定的大小就是元素的边框的大小。边框位于元素的父坐标空间中，并基于元素的布局大小、布局位置和布局转换矩阵进行计算。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置元素的布局大小。这是元素在屏幕上进行绘制时所用的大小。
      
      <p>如果 <codeph>width</codeph> 和/或 <codeph>height</codeph> 参数尚未指定 (NaN)，则 Flex 会将该元素的布局大小设置为首选宽度和/或首选高度。</p>
     
      <p>请注意，调用 <codeph>setLayoutBoundSize()</codeph> 方法会影响布局位置，因此请在调用 <codeph>setLayoutBoundSize()</codeph> 之后再调用 <codeph>setLayoutBoundPosition()</codeph>。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutPosition()"><linktext>setLayoutPosition()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      设置用于计算组件相对于其同级组件的布局大小和位置的转换 Matrix3D。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/><apiDesc>矩阵。
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>设置为 <codeph>true</codeph>，将使父容器重新布局其子代。通常情况下，会将 <codeph>true</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置用于计算组件相对于其同级组件的布局大小和位置的转换 Matrix3D。
           <p>此矩阵通常由组件的转换属性定义，例如，<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph> 属性。</p>
      
      <p>请注意，在父坐标中计算时，布局 Matrix3D 是在 <codeph>getPreferredSize()</codeph>、<codeph>getMinSize()</codeph>、<codeph>getMaxSize()</codeph>、<codeph>getLayoutSize()</codeph> 中进行分解的；在父坐标和子坐标中计算时，布局 Matrix3D 是在 <codeph>getLayoutPosition()</codeph> 中进行分解的。计算转换矩阵的布局通常会显式调用此方法，并使用子坐标中的大小。调用此方法的布局会将 <codeph>false</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法，这样不会触发后续的布局传递。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix()"><linktext>setLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      设置用于相对于其同级组件计算组件的布局大小和位置的转换 Matrix。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/><apiDesc>矩阵。
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiDesc>设置为 <codeph>true</codeph>，将使父容器重新布局其子代。通常情况下，会将 <codeph>true</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置用于相对于其同级组件计算组件的布局大小和位置的转换 Matrix。
           <p>此矩阵通常由组件的 2D 属性（如 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> 和 <codeph>transformY</codeph>）定义。某些组件可以具有其他转换属性，这些属性在布局矩阵的顶层上应用，以确定最终计算的矩阵。例如，<codeph>UIComponent</codeph> 可定义 <codeph>offsets</codeph>。</p>
      
      <p>请注意，在父坐标中计算时，布局 Matrix 是在 <codeph>getPreferredSize()</codeph>、<codeph>getMinSize()</codeph>、<codeph>getMaxSize()</codeph>、<codeph>getLayoutSize()</codeph> 方法中进行分解的；在父坐标和子坐标中计算时，布局 Matrix 是在 <codeph>getLayoutPosition()</codeph> 中进行分解的。计算转换矩阵的布局通常会显式调用此方法，并使用子坐标中的大小。调用此方法的布局会将 <codeph>false</codeph> 传递给 <codeph>invalidateLayout()</codeph> 方法，这样不会触发后续的布局传递。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix()"><linktext>getLayoutMatrix()</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D()"><linktext>getLayoutMatrix3D()</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D()"><linktext>setLayoutMatrix3D()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:transformAround"><apiName>transformAround</apiName><shortdesc>
      用于更新转换的旋转、缩放和平移的一种实用程序方法，同时保留某个特定点，该点是在组件自己的坐标空间中指定的，且在父项的坐标空间中是固定的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>在组件自己的坐标中用于相对于其父项保持固定的点。
           </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的缩放的新值。
           </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的旋转的新值
           </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的平移的新值。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的布局后缩放的新值。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的布局后旋转的新值。
           </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>转换的布局后平移的新值。
           </apiDesc></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则父容器的大小和显示将无效。调用此方法的布局会传递 <codeph>false</codeph>，这样不会触发后续的布局传递。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      用于更新转换的旋转、缩放和平移的一种实用程序方法，同时保留某个特定点，该点是在组件自己的坐标空间中指定的，且在父项的坐标空间中是固定的。此函数将指定提供的旋转值、缩放值和平移值，然后根据需要更新 x/y/z 属性以保持转换中心固定。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      组件第一行文本的基线的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      组件第一行文本的基线的 y 坐标。
           <p>此属性用于实现 <codeph>baseline</codeph> 约束样式，还可用于将 FormItem 的标签与 FormItem 中的控件对齐。</p>
           <p>各组件应覆盖此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baseline:get"><apiName>baseline</apiName><shortdesc>
      从锚点目标到控件的基线位置的垂直距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从锚点目标到控件的基线位置的垂直距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域的上边缘。在具有高级约束的布局中，目标可以是一个约束行。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:bottom:get"><apiName>bottom</apiName><shortdesc>
      从组件的下边缘到锚点目标的下边缘的垂直距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从组件的下边缘到锚点目标的下边缘的垂直距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束行。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      如果元素具有 3D 矩阵，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果元素具有 3D 矩阵，则为 <codeph>true</codeph>。
           <p>使用 <codeph>hasLayoutMatrix3D</codeph>，而不是调用和检查 <codeph>getLayoutMatrix3D()</codeph> 的返回值，因为该方法会返回一个有效的矩阵，即使元素是 2D 的也是如此。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      从组件中心到锚点目标的内容区域中心的水平距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从组件中心到锚点目标的内容区域中心的水平距离（以像素为单位）。
           <p>默认锚点目标是容器本身。</p>
           <p>在具有高级约束的布局中，锚点目标可以是一个约束列。那么，内容区域就是前一列（或容器侧）与目标列之间的空间。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“constraintColumnId:value”将属性值设置为一个字符串，如“col1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:left:get"><apiName>left</apiName><shortdesc>
      从组件的左边缘到锚点目标的左边缘的水平距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从组件的左边缘到锚点目标的左边缘的水平距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束列。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“col1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      以组件父代大小百分比的方式指定组件高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      以组件父代大小百分比的方式指定组件高度。允许的值为 0-100。设置 <codeph>height</codeph> 或 <codeph>explicitHeight</codeph> 属性会将此属性重置为 NaN。
           <p>仅当先前已设置此属性时，此属性才会返回数值；它不会以百分比形式反映组件的确切大小。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      以组件父代大小百分比的方式指定组件宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      以组件父代大小百分比的方式指定组件宽度。允许的值为 0-100。设置 <codeph>width</codeph> 或 <codeph>explicitWidth</codeph> 属性会将此属性重置为 NaN。
           <p>仅当先前已设置此属性时，此属性才会返回数值；它不会以百分比形式反映组件的确切大小。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:right:get"><apiName>right</apiName><shortdesc>
      从组件的右边缘到锚点目标的右边缘的水平距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从组件的右边缘到锚点目标的右边缘的水平距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束列。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“col1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:top:get"><apiName>top</apiName><shortdesc>
      从组件的上边缘到锚点目标的上边缘的垂直距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从组件的上边缘到锚点目标的上边缘的垂直距离（以像素为单位）。
           <p>默认情况下，锚点目标是容器的内容区域。在具有高级约束的布局中，目标可以是一个约束行。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“anchorTargetName:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      从组件中心到锚点目标的内容区域中心的垂直距离（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      从组件中心到锚点目标的内容区域中心的垂直距离（以像素为单位）。
           <p>默认锚点目标是容器本身。</p>
           <p>在具有高级约束的布局中，锚点目标可以是一个约束行。那么，内容区域就是前一行（或容器侧）与目标行之间的空间。</p>
           <p>将属性设置为数字或数字字符串（如“10”）会指定使用默认锚点目标。</p>
           <p>要指定锚点目标，请使用格式“constraintColumnId:value”将属性值设置为一个字符串，如“row1:10”。</p>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerCreationPolicy"><apiName>ContainerCreationPolicy</apiName><shortdesc>
  ContainerCreationPolicy 类定义 Container 类的 creationPolicy 属性的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContainerCreationPolicy 类定义 Container 类的 <codeph>creationPolicy</codeph> 属性的常量值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link></related-links><apiValue id="mx.core:ContainerCreationPolicy:ALL"><apiName>ALL</apiName><shortdesc>
	  立即创建所有后代。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  立即创建所有后代。
	 
	  <p>由于此 <codeph>creationPolicy</codeph> 会增加应用程序的启动时间，因此请避免使用它。通常，最好不要在启动时创建用户无法看到的组件。如果打算使用此策略，以便在启动时将数据“推到”隐藏的组件中，您应该设计您的应用程序，以便通过数据绑定或 <codeph>initialize</codeph> 处理函数将数据存储在“推入”这些数据后生成的数据变量和组件中。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  延迟创建部分或所有后代，直至需要它们。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  延迟创建部分或所有后代，直至需要它们。
	 
	  <p>例如，如果导航器容器（如 TabNavigator）具有此 <codeph>creationPolicy</codeph>，则它将立即创建其所有子项以及最初选择的子项的后代。但是，它将等到用户导航至其他子项才会创建这些子项的后代。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:NONE"><apiName>NONE</apiName><shortdesc>
	  不创建任何子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  不创建任何子项。
	 
	  <p>如果使用此 <codeph>creationPolicy</codeph>，则开发人员负责通过在父容器上调用 <codeph>createComponentsFromDescriptors()</codeph> 以编程方式从 UIComponentDescriptor 创建子项。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:QUEUED"><apiName>QUEUED</apiName><shortdesc>
	  向创建队列中添加此容器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>queued</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  向创建队列中添加此容器。自 Flex 4.0 以来，已弃用。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextField"><apiName>UITextField</apiName><shortdesc>
  UITextField 类定义许多 Flex 组件用来显示文本的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion><Exclude kind="style" name="direction"/><styles><style format="Length" inherit="yes" name="textIndent" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:UITextField" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐方式。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:UITextField" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，表示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。在 Halo 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 10。对于 Halo 主题的 ColorPicker 控件，默认值为 11。在 Spark 主题中，除 ColorPicker 控件外，所有其它控件的默认值均为 12。对于 Spark 主题的 ColorPicker 控件，默认值为 11。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。Halo 主题的默认字体为 <codeph>"Verdana"</codeph>。Spark 主题的默认字体为 <codeph>"Arial"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。Halo 主题的默认值为 <codeph>0x0B333C</codeph>。Spark 主题的默认值为 <codeph>0x000000</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>在 Halo 主题中，Button 控件的默认值为 10，在 Spark 主题中，其默认值为 6。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>在 Halo 主题中，Button 控件的默认值为 10，在 Spark 主题中，其默认值为 6。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUITextField</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  UITextField 类定义许多 Flex 组件用来显示文本的组件。例如，mx.controls.Button 控件使用 UITextField 组件定义 Button 控件的标签区域。 
 
  <p>UITextField 类扩展 flash.text.TextField 类以支持 Flex 所需的其他功能，如 CSS 样式、无效/度量/布局、启用/禁用、工具提示和支持输入中文、日文和韩文文本的 IME（输入法编辑器）。</p>
 
  <p>警告：如果 UITextField 继承 <codeph>layoutDirection="rtl"</codeph>，它将修改其自己的 <codeph>transform.matrix</codeph> 以在本地复原默认坐标系。</p>
   </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link></related-links><apiConstructor id="mx.core:UITextField:UITextField"><apiName>UITextField</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>一个 Number，在已定义的情况下是 explicitHeight，在未定义的情况下是 measuredHeight。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>一个 Number，在已定义的情况下是 explicitWidth，在未定义的情况下是 measuredWidth。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UIComponent#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>样式值。
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称。
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getTextStyles"><apiName>getTextStyles</apiName><shortdesc>
      返回给出此 UITextField 对象的字符格式设置信息的 TextFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFormat 对象。 
           </apiDesc><apiType value="flash.text:TextFormat"/></apiReturn></apiOperationDef><apiDesc>
      返回给出此 UITextField 对象的字符格式设置信息的 TextFormat 对象。
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextFormat.xml"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc>
      返回包含此组件的格式设置信息的 UITextFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含此组件格式设置信息的对象。
           </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      返回包含此组件的格式设置信息的 UITextFormat 对象。此方法与 flash.text.TextField 类的 <codeph>getTextFormat()</codeph> 方法类似，但它返回 UITextFormat 对象而不是 TextFormat 对象。
           <p>UITextFormat 类扩展 TextFormat 类以添加文本测量方法 <codeph>measureText()</codeph> 和 <codeph>measureHTMLText()</codeph>。</p>
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:initialize"><apiName>initialize</apiName><shortdesc>
      初始化此组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      初始化此组件。
           <p>IUIComponent 接口要求使用此方法，但实际上，它不会对 UITextField 执行任何操作。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateSize"><apiName>invalidateSize</apiName><shortdesc conref="mx.core.UIComponent#invalidateSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:move"><apiName>move</apiName><shortdesc conref="mx.core.UIComponent#move()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>组件在其父项内的左侧位置。
             </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>组件在其父项内的顶部位置。
       
       </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#move()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:owns"><apiName>owns</apiName><shortdesc>
      如果该子项是此对象的子项或者属于该对象，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果该子项是 UITextField 对象的子项或者属于该对象，则返回 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>子 DisplayObject。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果该子项是此对象的子项或者属于该对象，则返回 <codeph>true</codeph>。
           </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextField/owner"><linktext>所有者</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      为 UITextField 对象分配父项时调用此函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>此 UITextField 对象的父项。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为 UITextField 对象分配父项时调用此函数。您通常无需调用此方法。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      重放指定的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果重放成功，则为 <codeph>true</codeph>。  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>要重放的事件。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      重放指定的事件。如果已在 superclass 中定义默认重放行为，组件作者可能应调用 super.replayAutomatableEvent。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setActualSize"><apiName>setActualSize</apiName><shortdesc conref="mx.core.UIComponent#setActualSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>对象的宽度。
           </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>对象的高度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setActualSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setColor"><apiName>setColor</apiName><shortdesc>
      设置文本的字体颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>新的字体颜色。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置文本的字体颜色。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UIComponent#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setStyle"><apiName>setStyle</apiName><shortdesc>
      不执行任何操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称。
           </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>样式的新值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      不执行任何操作。UITextField 不能包含嵌入式样式。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setVisible"><apiName>setVisible</apiName><shortdesc>
      设置此 UITextField 对象的 visible 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc>将其设置为 <codeph>true</codeph> 可使此 UITextField 可见；将其设置为 <codeph>false</codeph> 可使它不可见。
           </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>将其设置为 <codeph>true</codeph> 可禁止当您更改可见性时生成事件。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 UITextField 对象的 <codeph>visible</codeph> 属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:styleChanged"><apiName>styleChanged</apiName><shortdesc conref="mx.core.UIComponent#styleChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>样式属性的名称；如果此组件的所有样式均已更改，则为 null。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#styleChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      截断文本使其在水平方向适合为控件定义的区域，并向文本追加省略号 (...)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果此文本需要截断，则返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>截断后追加的文本。如果传递 <codeph>null</codeph>，将使用可本地化的字符串，如 <codeph>"..."</codeph>。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      截断文本使其在水平方向适合为控件定义的区域，并向文本追加省略号 (...)。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.core.UIComponent#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UITextField:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      正在处理相关自动化功能的委托对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      正在处理相关自动化功能的委托对象。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      如果此组件启用了自动化，则为 true；否则为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果此组件启用了自动化，则为 true；否则为 false。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      可用作此对象的标识符的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      可用作此对象的标识符的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      用于自动化目的的此组件的所有者。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      用于自动化目的的此组件的所有者。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      用于自动化目的的此组件的父级。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      用于自动化目的的此组件的父级。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationValue:get"><apiName>automationValue</apiName><shortdesc>
      
      此值通常对应于对象的经呈示的外观，当对象在应用中以可视方式显示时，此值使标识符与该对象相关联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      此值通常对应于对象的经呈示的外观，当对象在应用中以可视方式显示时，此值使标识符与该对象相关联。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      如果此组件对于自动化是可见的，则为 true；否则为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果此组件对于自动化是可见的，则为 true；否则为 false。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      首行文本基线的 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      首行文本基线的 y 坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:className:get"><apiName>className</apiName><shortdesc>
      此实例的类的名称，如“DataGridItemRenderer”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      此实例的类的名称，如 <codeph>"DataGridItemRenderer"</codeph>。
           <p>此字符串不包括包名称。如果您还需要包名称，请调用 flash.utils 包中的 <codeph>getQualifiedClassName()</codeph> 方法。将返回一个字符串，如 <codeph>"mx.controls.dataGridClasses::DataGridItemRenderer"</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:document:get"><apiName>document</apiName><shortdesc>
      对与此 UITextField 对象关联的文档对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      对与此 UITextField 对象关联的文档对象的引用。文档对象是位于 Flex 应用程序、MXML 组件或 AS 组件层次结构顶层的 Object。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enabled:get"><apiName>enabled</apiName><shortdesc>
      一个指示是否启用组件的布尔值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      一个指示是否启用组件的布尔值。此属性只影响文本的颜色，而不影响 UITextField 的可编辑性。要控制可编辑性，请使用 <codeph>flash.text.TextField.type</codeph> 属性。
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      采用组件坐标指定组件最大高度（以像素为单位）的数字（如果设置了 maxHeight 属性）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      采用组件坐标指定组件最大高度（以像素为单位）的数字（如果设置了 maxHeight 属性）。由于 maxHeight 为只读，因此此方法返回 NaN。必须覆盖此方法并添加 setter 才能使用此属性。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      采用组件坐标指定组件最大宽度（以像素为单位）的数字（如果设置了 maxWidth 属性）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      采用组件坐标指定组件最大宽度（以像素为单位）的数字（如果设置了 maxWidth 属性）。由于 maxWidth 为只读，因此此方法返回 NaN。必须覆盖此方法并添加 setter 才能使用此属性。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      在组件中共享并用作绘制焦点指示符的叠加层的单个 Sprite 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      在组件中共享并用作绘制焦点指示符的叠加层的单个 Sprite 对象。如果组件的父项具有焦点，则这些组件共享此对象；如果该组件实现了 IFocusManagerComponent 接口，则不共享此对象。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc>
      如果为 true，paddingLeft 和 paddingRight 样式不会在组件文本周围添加空间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，<codeph>paddingLeft</codeph> 和 <codeph>paddingRight</codeph> 样式不会在组件文本周围添加空间。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
          <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      此 UITextField 继承样式链的起始位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此 UITextField 继承样式链的起始位置。<codeph>getStyle()</codeph> 方法访问 <codeph>inheritingStyles[styleName]</codeph> 以搜索整个原型链接的链。此对象由 <codeph>initProtoChain()</codeph> 方法设置。通常情况下，您不需要直接访问此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:initialized:get"><apiName>initialized</apiName><shortdesc>
      一个标志，确定对象是否已通过三个阶段的布局验证（假定需要完成所有阶段）。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，确定对象是否已通过三个阶段的布局验证（假定需要完成所有阶段）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxHeight:get"><apiName>maxHeight</apiName><shortdesc conref="mx.core.UIComponent#maxHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxWidth:get"><apiName>maxWidth</apiName><shortdesc conref="mx.core.UIComponent#maxWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minHeight:get"><apiName>minHeight</apiName><shortdesc conref="mx.core.UIComponent#minHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minWidth:get"><apiName>minWidth</apiName><shortdesc conref="mx.core.UIComponent#minWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      用于在正确的 SWF 上下文中创建 TextFields 的 moduleFactory。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      用于在正确的 SWF 上下文中创建 TextFields 的 moduleFactory。这是嵌入字体起作用而必需的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      此 UITextField 非继承样式链的起始位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此 UITextField 非继承样式链的起始位置。<codeph>getStyle()</codeph> 方法访问 <codeph>nonInheritingStyles[styleName]</codeph> 方法以搜索整个原型链接的链。此对象由 <codeph>initProtoChain()</codeph> 方法设置。通常情况下，您不需要直接访问此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc>
      与 textHeight 不同，此方法将返回一个非零值，即使文本为空。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      与 textHeight 不同，此方法将返回一个非零值，即使文本为空。在这种情况下，它返回文本不为空的情况下 textHeight 的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:owner:get"><apiName>owner</apiName><shortdesc>
      默认情况下，设置为此对象的父容器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      默认情况下，设置为此对象的父容器。但是，如果此对象是由其父项弹出的子组件（如 ComboBox 控件的下拉列表），则所有者是弹出该对象的组件。 
           <p>此属性并非由 Flex 管理，而由各个组件管理。因此，如果使用 <codeph>PopUpManger.createPopUp()</codeph> 或 <codeph>PopUpManger.addPopUp()</codeph> 方法弹出一个子组件，则应该将该子组件的 <codeph>owner</codeph> 属性设置为弹出它的组件。</p>
     
      <p>默认值为 <codeph>parent</codeph> 属性的值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:parent:get"><apiName>parent</apiName><shortdesc>
      此组件的父容器或组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      此组件的父容器或组件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentHeight:get"><apiName>percentHeight</apiName><shortdesc conref="mx.core.UIComponent#percentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentWidth:get"><apiName>percentWidth</apiName><shortdesc conref="mx.core.UIComponent#percentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      createChildren() 方法创建任意内部组件子项后设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>createChildren()</codeph> 方法创建任意内部组件子项后设置为 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:styleName:get"><apiName>styleName</apiName><shortdesc conref="mx.core.UIComponent#styleName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UIComponent#styleName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:toolTip:get"><apiName>toolTip</apiName><shortdesc conref="mx.core.UIComponent#toolTip">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#toolTip">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc conref="mx.core.UIComponent#tweeningProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.core.UIComponent#tweeningProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      一个标志，确定对象是否已通过三个阶段的布局验证（假定需要完成所有阶段）。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，确定对象是否已通过三个阶段的布局验证（假定需要完成所有阶段）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
  MovieClipAsset 是用于表示 movieclip 元件的 flash.display.MovieClip 类的子类，这些元件是从 SWF 文件（由 Flash 生成）嵌入到 Flex 应用程序中的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexMovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipAsset 是用于表示 movieclip 元件的 flash.display.MovieClip 类的子类，这些元件是从 SWF 文件（由 Flash 生成）嵌入到 Flex 应用程序中的。它实现 IFlexDisplayObject 接口，使 MovieClip 可以显示在 Image 控件中，或者用作容器背景或组件外观。
 
  <p>要嵌入的 MovieClip 必须是 SWF 文件中的一个 movieclip 元件。使用嵌入的 movieclip 的常见原因是您已在 Flash 中创建了一个基于帧的动画，并且希望在 Flex 应用程序中使用它。MXML 编译器自动生成一个类，该类会扩展 MovieClipAsset 以呈示嵌入的动画。</p>
 
  <p>编写 Flex 应用程序时，通常不必直接使用 MovieClipAsset 类。例如，通过编写以下代码，您可以将 movieclip 动画用作应用程序的背景图像：</p>
 
  <pre>
  &lt;mx:Application backgroundImage="@Embed(source='Assets.swf', symbol='BackgroundAnimation')"/></pre>
 
  <p>或者</p>
 
  <pre>
  &lt;fx:Style>
      @namespace mx "library://ns.adobe.com/flex/mx"
      mx|Application {
          backgroundImage: Embed(source="Assets.swf", symbol="BackgroundAnimation")
      }
  &lt;fx:Style/></pre>
 
  <p>不必了解 MXML 编译器已为您创建了 MovieClipAsset 的子类。</p>
 
  <p>不过，了解在 ActionScript 级别发生的操作可能会有用。要在 ActionScript 中嵌入 movieclip，需要声明 Class 类型的变量，并对其应用 <codeph>[Embed]</codeph> 元数据。例如：</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="BackgroundAnimation")]
  private var backgroundAnimationClass:Class;</pre>
 
  <p>MXML 编译器会发现 Assets.swf 中的 BackgroundAnimation 元件是一个影片剪辑，自动生成 MovieClipAsset 类的子类以呈示该剪辑，并将变量设置为引用此自动生成的类。然后，您可以使用此类引用通过 <codeph>new</codeph> 运算符创建 MovieClipAsset 的实例，还可以对其使用 MovieClip 类的 API：</p>
 
  <pre>
  var backgroundAnimation:MovieClipAsset =
      MovieClipAsset(new backgroundAnimationClass());
  var n:int = backgroundAnimation.totalFrames;</pre>
 
  <p>但是，您极少需要自己创建 MovieClipAsset 实例，因为 image-related 属性和样式可以设置为 image-producing 类，且组件会根据需要创建实例。例如，要将应用程序背景设置为此动画，只需编写以下内容：</p>
 
  <pre>
  &lt;mx:Application backgroundImage="{backgroundAnimationClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MovieClipAsset:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MovieClipAsset:move"><apiName>move</apiName><shortdesc>
      
	  将此对象移动到指定的 x 和 y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>此对象的新 x 位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>此对象的新 y 位置。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  将此对象移动到指定的 x 和 y 坐标。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:MovieClipAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  设置此对象的实际大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>此对象的新宽度。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>此对象的新高度。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  设置此对象的实际大小。
	 
	  <p>此方法主要用于实现 <codeph>updateDisplayList()</codeph> 方法。在此期间，您可以根据其显式大小、相对于父项的（百分比）大小以及度量大小计算此对象的实际大小。然后，通过调用 <codeph>setActualSize()</codeph> 将此实际大小应用于对象。</p>
	 
	  <p>在其他情况下，您应该设置 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph> 或 <codeph>percentHeight</codeph> 属性，而非调用此方法。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:MovieClipAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      为具有四个属性（left、top、right 和 bottom）的边框返回 EdgeMetrics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      为具有四个属性（<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>）的边框返回 EdgeMetrics 对象。每个属性值等于边框其中一条边的粗细（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  此对象的测量高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量高度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  此对象的测量宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  此对象的测量宽度。
	 
	  <p>通常为图形外观硬编码此属性，因为此数字只是图形中的像素数目。对于代码外观来说，如果希望以特定大小进行绘制，也可以对其进行硬编码。如果此大小可以随属性更改，您可能还希望是 ILayoutManagerClient，以便在适当时调用 <codeph>measure()</codeph> 方法，从而能够计算 <codeph>measuredHeight</codeph>。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
  SoundAsset 是 flash.media.Sound 类的子类，代表您在 Flex 应用程序中嵌入的声音。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.media:Sound</apiBaseClassifier></apiClassifierDef><apiDesc>
  SoundAsset 是 flash.media.Sound 类的子类，代表您在 Flex 应用程序中嵌入的声音。
 
  <p>可以嵌入 MP3 文件格式的声音。您还可以嵌入由 Flash 生成的 SWF 文件中的声音元件。在这两种情况下，MXML 编译器自动生成可扩展 SoundAsset 以代表嵌入的声音数据的类。</p>
 
  <p>编写 Flex 应用程序时，您通常不必直接使用 SoundAsset 类。例如，通过编写以下代码即可嵌入 MP3 文件，然后在 SoundEffect 中使用该文件：</p>
 
  <pre>
  &lt;mx:SoundEffect id="beep" source="@Embed(source='Beep.mp3')"/></pre>
 
  <p>不必了解 MXML 编译器已为您创建了 SoundAsset 的子类。</p>
 
  <p>不过，了解在 ActionScript 级别发生的操作可能会有用。要在 ActionScript 中嵌入位图，请声明类型为 Class 的变量，并为其指定 <codeph>[Embed]</codeph> 元数据。例如，您可以通过以下方式嵌入 MP3 文件：</p>
 
  <pre>
  [Bindable]
  [Embed(source="Beep.mp3")]
  private var beepClass:Class;</pre>
 
  <p>MXML 编译器识别出 .mp3 扩展名，将 MP3 数据转码为播放器使用的声音格式，自动生成 SoundAsset 类的子类，并将您的变量设置为对此自动生成类的引用。然后，您可以使用此类引用通过 <codeph>new</codeph> 运算符创建 SoundAsset 实例，还可以在这些实例上使用 Sound 类的 API：</p>
 
  <pre>
    var beepSound:SoundAsset = SoundAsset(new beepClass());
    beepSound.play();</pre>
 
  <p>但是，您很少需要自己创建 SoundAsset 实例，因为可以直接将 sound-related 属性和样式设置为 sound-producing 类，之后组件将根据需要创建声音实例。例如，要使用 SoundEffect 播放此声音，则可以将 SoundEffect 的 <codeph>source</codeph> 属性设置为 <codeph>beepClass</codeph>。在 MXML 中，您可以按照以下方法执行此操作：</p>
 
  <pre>
  &lt;mx:SoundEffect id="beepEffect" source="{beepClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SoundAsset:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ApplicationDomainTarget"><apiName>ApplicationDomainTarget</apiName><shortdesc>
  ApplicationDomainTarget 类为 RSLData 类的 applicationDomainTarget 属性定义可能的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ApplicationDomainTarget 类为 <codeph>RSLData</codeph> 类的 <codeph>applicationDomainTarget</codeph> 属性定义可能的值。每个应用程序域目标指定一个相对的应用程序域，并在运行时解析该域。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#RSLData"><linktext>mx.core.RSLData</linktext></link></related-links><apiValue id="mx.core:ApplicationDomainTarget:CURRENT"><apiName>CURRENT</apiName><shortdesc>
      当前模块工厂的应用程序域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>current</apiData><apiType value="String"/></apiValueDef><apiDesc>
      当前模块工厂的应用程序域。
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
      RSL 加载的默认行为是尽可能将 RSL 加载到父模块工厂链的较高位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc>
      RSL 加载的默认行为是尽可能将 RSL 加载到父模块工厂链的较高位置。要将 RSL 加载到父模块工厂，该模块工厂必须使用在编译器选项中指定的 RSL 进行了编译。如果父模块工厂未使用该 RSL 进行了编译，则该 RSL 将加载到加载 RSL 的模块工厂的应用程序域中。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:PARENT"><apiName>PARENT</apiName><shortdesc>
      父模块工厂的应用程序域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>parent</apiData><apiType value="String"/></apiValueDef><apiDesc>
      父模块工厂的应用程序域。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ApplicationDomainTarget:TOP_LEVEL"><apiName>TOP_LEVEL</apiName><shortdesc>
      顶级模块工厂的应用程序域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top-level</apiData><apiType value="String"/></apiValueDef><apiDesc>
      顶级模块工厂的应用程序域。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModuleFactory"><apiName>IFlexModuleFactory</apiName><shortdesc>
  IFlexModuleFactory 接口提供引导 Flex 应用程序和动态加载的模块时应该使用的约定。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexModuleFactory 接口提供引导 Flex 应用程序和动态加载的模块时应该使用的约定。
   <p>分派 <codeph>complete</codeph> 事件之后，立即调用 <codeph>info()</codeph> 方法是合法的。</p>
   <p>当可安全调用 <codeph>create()</codeph> 方法时，功能良好的模块将分派 <codeph>ready</codeph> 事件。</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:addPreloadedRSL"><apiName>addPreloadedRSL</apiName><shortdesc>
      将 RSL 添加到 preloadedRSLs 列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>loaderInfo</apiItemName><apiType value="flash.display:LoaderInfo"/><apiDesc>已加载的 RSL 的 loaderInfo。
      </apiDesc></apiParam><apiParam><apiItemName>rsl</apiItemName><apiType value="Vector$mx.core:RSLData"/><apiDesc>RSL 的配置信息。RSLData 的矢量。数组中的第一个元素为主 RSL。其余元素为故障转移 RSL。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 RSL 添加到 preloadedRSLs 列表。子模块工厂将 RSL 加载到该模块工厂的应用程序域中时会调用此方法。
           <p>您无需直接调用此方法。子模块工厂将 RSL 加载到该模块工厂的应用程序域中时会调用此方法。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      为与此 IFlexModuleFactory 关联的 SWF 以及与此 IFlexModuleFactory 预加载的 RSL 关联的所有 SWF 调用 Security.allowDomain() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>一个或多个字符串或者 URLRequest 对象，它们可命名一些您希望允许从中进行访问的域。可以指定特殊域“*”，以允许从所有域进行访问。 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      为与此 IFlexModuleFactory 关联的 SWF 以及与此 IFlexModuleFactory 预加载的 RSL 关联的所有 SWF 调用 <codeph>Security.allowDomain()</codeph> 方法。默认情况下，此调用后加载的 RSL 所允许的域与之前调用此方法所允许的域相同。该行为由 <codeph>allowDomainsInNewRSLs</codeph> 属性控制。
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      为与此 IFlexModuleFactory 关联的 SWF 以及与此 IFlexModuleFactory 预加载的 RSL 关联的所有 SWF 调用 Security.allowInsecureDomain() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>一个或多个字符串或者 URLRequest 对象，它们可命名一些您希望允许从中进行访问的域。可以指定特殊域“*”，以允许从所有域进行访问。 
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      为与此 IFlexModuleFactory 关联的 SWF 以及与此 IFlexModuleFactory 预加载的 RSL 关联的所有 SWF 调用 <codeph>Security.allowInsecureDomain()</codeph> 方法。默认情况下，此调用后加载的 RSL 所允许的域与之前调用此方法所允许的域相同。该行为由 <codeph>allowInsecureDomainsInNewRSLs</codeph> 属性控制。
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.system.xml#Security/allowInsecureDomain()"><linktext>flash.system.Security.allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc>
      一种用于调用 IFlexModuleFactory 上下文中的方法的方法。
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>该函数返回的任何内容（如果返回任何内容）。
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>要调用的函数或方法。
      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>该函数的 <codeph>this</codeph> 指针。
      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>该函数的参数。
      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果为 <codeph>true</codeph>，则该函数会返回一个值。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      一种用于调用 IFlexModuleFactory 上下文中的方法的方法。
           </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="Function.apply.xml"><linktext>Function.apply</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:create"><apiName>create</apiName><shortdesc>
      factory 方法，要求定义的实例是模块已知的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>模块实例，或 <codeph>null</codeph>。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>parameters</apiItemName><apiType value="restParam"/><apiDesc>可选参数列表。您可以传递任何数目的参数，这些参数将存储在名为 <codeph>parameters</codeph> 的 Array 中。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      factory 方法，要求定义的实例是模块已知的。
           <p>您可以提供可选参数集，以便构建工厂根据输入内容更改它们创建的内容。传递 <codeph>null</codeph> 指示，如果可能的话，创建默认的定义。</p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:getImplementation"><apiName>getImplementation</apiName><shortdesc>
      获取接口的实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>接口的实现。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>接口。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取接口的实现。与 <codeph>Singleton.getInstance</codeph> 方法相似，但需要通过 IFlexModuleFactory 执行。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:info"><apiName>info</apiName><shortdesc>
      返回包含模块已知的静态数据的键/值对块。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含键/值对的对象。通常，此对象包含由此工厂创建的模块的相关信息；例如：
     
      <pre>
      return {"description": "This module returns 42."};
      </pre>
      
      返回的对象中的其他常见值包括：
      <ul>
       <li><codeph>fonts</codeph>：嵌入字体列表。</li>
       <li><codeph>rsls</codeph>：运行时共享库列表。</li>
       <li><codeph>mixins</codeph>：启动时初始化的类列表。</li>
      </ul>
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      返回包含模块已知的静态数据的键/值对块。此方法始终成功，但是可以返回空对象。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:registerImplementation"><apiName>registerImplementation</apiName><shortdesc>
      注册接口的实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/><apiDesc>接口。
           </apiDesc></apiParam><apiParam><apiItemName>impl</apiItemName><apiType value="Object"/><apiDesc>实现。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      注册接口的实现。与 <codeph>Singleton.registerClass</codeph> 方法相似，但需要通过 IFlexModuleFactory 执行，并且采用实例而不是类。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomainsInNewRSLs:get"><apiName>allowDomainsInNewRSLs</apiName><shortdesc>
      控制调用 allowDomain() 所允许的域是否也被调用后加载的 RSL 允许。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      控制调用 <codeph>allowDomain()</codeph> 所允许的域是否也被调用后加载的 RSL 允许。其它 RSL 可能会由子应用程序或模块加载到此模块工厂中。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomainsInNewRSLs:get"><apiName>allowInsecureDomainsInNewRSLs</apiName><shortdesc>
      控制调用 allowInsecureDomain() 所允许的域是否也被调用后加载的 RSL 允许。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.6"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      控制调用 <codeph>allowInsecureDomain()</codeph> 所允许的域是否也被调用后加载的 RSL 允许。其它 RSL 可能会由子应用程序或模块添加至此模板工厂中。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      启动应用程序之前该 SystemManager 或 FlexModuleFactory 加载的 RSL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      启动应用程序之前该 SystemManager 或 FlexModuleFactory 加载的 RSL。该字典中可能还包含被其它模块或子应用程序加载到该模块工厂的应用程序域中的 RSL。子模块工厂添加新的字典条目时，拥有该字典的模块工厂将分派 <codeph>RSLEvent.RSL_ADD_PRELOADED</codeph> 事件。预加载的 RSL 信息存储在词典中。该键为 RSL 的 LoaderInfo。该值为 RSLData 的矢量，其中第一个元素是主 RSL，其余元素为故障转移 RSL。
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexGlobals"><apiName>FlexGlobals</apiName><shortdesc>
  包含通用于同一 ApplicationDomain 内的所有应用程序的变量的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  包含通用于同一 ApplicationDomain 内的所有应用程序的变量的类。
 
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexGlobals:topLevelApplication"><apiName>topLevelApplication</apiName><shortdesc>
      在 ApplicationDomain 中运行的第一个应用程序是顶层应用程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/></apiValueDef><apiDesc>
      在 ApplicationDomain 中运行的第一个应用程序是顶层应用程序。在顶层应用程序的构造函数中，将此属性设置为对顶层应用程序的引用。每个 ApplicationDomain 都有其自己的 <codeph>topLevelApplication</codeph>。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToggleButton"><apiName>IToggleButton</apiName><shortdesc>
  IToggleButton 接口是一个标记接口，用于指示组件用作可切换的按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IToggleButton 接口是一个标记接口，用于指示组件用作可切换的按钮。它主要由框架的默认按钮逻辑用作过滤器。此接口<b>仅</b>由旧 MX 组件使用。
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
  ComponentDescriptor 是 UIComponentDescriptor 类的基类，后者封装您在 MXML 标签中为可视组件实例指定的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComponentDescriptor 是 UIComponentDescriptor 类的基类，后者封装您在 MXML 标签中为可视组件实例指定的信息。在 Flex 中，不可视组件需要区别对待并且没有描述符；但在将来版本中，可能也会对其使用 ComponentDescriptor 基类。
 
  <p>MXML 文件中的大多数标签描述 UIComponent 对象树。例如，<codeph>&lt;mx:Application></codeph> 标签代表 UIComponent 对象，并且其子容器和控件均是 UIComponent 对象。</p>
 
  <p>MXML 编译器将所有这些 MXML 标签均编译为 UIComponentDescriptor 实例。确切地说，MXML 编译器自动生成 ActionScript 数据结构，即 UIComponentDescriptor 对象树。</p>
 
  <p>在运行时，Container 类的 <codeph>createComponentsFromDescriptors()</codeph> 方法使用容器的 <codeph>childDescriptors</codeph> 数组中 UIComponentDescriptor 对象中的信息创建实际 UIComponent 对象，这些对象是容器的子级以及子级的子级。根据容器的 <codeph>creationPolicy</codeph> 属性的值，会在应用程序启动时，组件的某部分将要转为可见状态或应用程序开发人员手动调用 <codeph>createComponentsFromDescriptors()</codeph> 方法时，创建子级。</p>
 
  <p>您通常不需要亲自创建 ComponentDescriptor 或 UIComponentDescriptor 实例；您可以通过 Container 类的 <codeph>childDescriptors</codeph> 数组访问 MXML 编译器自动生成的此类实例。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="" invalidHref="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="" invalidHref="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:ComponentDescriptor:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>包含 ComponentDescriptor 对象属性的名称/值对的 Object，这些属性包括其 <codeph>type</codeph>、<codeph>id</codeph>、<codeph>propertiesFactory</codeph> 和 <codeph>events</codeph> 等。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ComponentDescriptor:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      使缓存的 properties 属性失效。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      使缓存的 <codeph>properties</codeph> 属性失效。下次读取 <codeph>properties</codeph> 属性时，将使用由 <codeph>propertiesFactory</codeph> 属性值指定的函数重新生成这些属性。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ComponentDescriptor:toString"><apiName>toString</apiName><shortdesc>
      返回字符串“ComponentDescriptor_”以及 id 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>字符串“ComponentDescriptor_”以及 <codeph>id</codeph> 属性的值。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      返回字符串“ComponentDescriptor_”以及 <codeph>id</codeph> 属性的值。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ComponentDescriptor:document"><apiName>document</apiName><shortdesc>
      对将在其中创建组件的文档 Object 的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      对将在其中创建组件的文档 Object 的引用。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUIComponent/document"><linktext>mx.core.IUIComponent.document</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:events"><apiName>events</apiName><shortdesc>
      MXML 中所指定的包含组件事件处理程序的名称/值对的 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      MXML 中所指定的包含组件事件处理程序的名称/值对的 Object。
     
      <p>例如，如果编写</p>
     
      <pre>
      &lt;mx:DataGrid id="dg" initialize="fetchData(); initDataGrid();"  change="changeHandler(event);"/>
      </pre>
     
      <p>则描述符的 <codeph>events</codeph> 属性即为以下 Object</p>
     
      <pre>
      { initialize: "__dg_initialize", change: "__dg_change" }
      </pre>
     
      <p>如果没有为组件指定 MXML 事件处理程序，则 <codeph>event</codeph> 属性为 <codeph>null</codeph></p>
     
      <p>字符串 <codeph>"__dg_initialize"</codeph> 和 <codeph>"__dg_change"</codeph> 是 MXML 编译器自动生成的事件处理函数方法的名称。这些方法的主体中包含您指定为事件属性值的 ActionScript 语句。例如，自动生成的 <codeph>initialize</codeph> 处理函数是</p>
     
      <pre>
      public function __dg_initialize(event:mx.events.FlexEvent):void
      {
          fetchData();
          initDataGrid();
      }
      </pre>
     
      <p>您不应认为自动生成的事件处理程序始终由名称指定；在新版本的 Flex 中可能会有所改变。</p>
      
      <p>Container 方法 <codeph>createComponentsFromDescriptors()</codeph> 可借助此属性使用 <codeph>addEventListener()</codeph> 方法来注册自动生成的事件处理程序。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:id"><apiName>id</apiName><shortdesc>
      MXML 中指定的组件的标识符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      MXML 中指定的组件的标识符。 
     
      <p>例如，如果编写</p>
     
      <pre>
      &lt;mx:TextInput id="firstName" text="Enter your first name here"/>
      </pre>
     
      <p>则描述符的 <codeph>id</codeph> 属性即为 String <codeph>"firstName"</codeph>。</p>
     
      <p>如果没有为组件指定 MXML id，则 <codeph>id</codeph> 属性为 <codeph>null</codeph>。</p>
     
      <p><codeph>id</codeph> 属性的值将成为 MXML 文档对象中一个公用变量的名称，由 MXML 编译器自动生成。此变量的值是对使用此描述符创建的 UIComponent 对象的引用。例如，正因为如此，您才可以从包含此 TextInput 实例的文档中的任何位置引用 TextInput 控件的 <codeph>text</codeph> 属性作为 <codeph>firstName.text</codeph>。</p>
     
      <p>如果已指定一个 <codeph>id</codeph>，并且是非空字符串，还会成为 DisplayObject 对象的 <codeph>name</codeph>。如果未指定 <codeph>id</codeph> 或其值为空，则 DisplayObject 对象的 <codeph>name</codeph> 将保留自动生成的字符串（如 <codeph>"Button3"</codeph>），它由 <codeph>NameUtil.createUniqueName()</codeph> 方法返回。<codeph>name</codeph> 在生成由 <codeph>toString()</codeph> 方法返回的字符串时使用。还可用于通过调用 <codeph>getChildByName()</codeph> 从组件的父级中查找组件。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:propertiesFactory"><apiName>propertiesFactory</apiName><shortdesc>
      一个 Function，用于返回 MXML 中指定的包含组件属性的名称/值对的 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      一个 Function，用于返回 MXML 中指定的包含组件属性的名称/值对的 Object。
     
      <p>例如，如果编写</p>
      
      <pre>
      &lt;mx:TextInput width="150" text="Hello">
      </pre>
     
      <p>则描述符的 <codeph>propertiesFactory</codeph> 属性即为以下 Function：</p>
     
      <pre>
      function():Object { return { width: 150, text: "Hello" }; }
      </pre>
     
      <p>如果没有为组件指定 MXML 属性，则 <codeph>propertiesFactory</codeph> 属性为 <codeph>null</codeph>。在此情形下，组件将使用默认属性值。</p>
     
      <p><codeph>propertyFactory</codeph> 是一个可返回 Object 的 Function 而不是一个实际 Object，这是由于 ComponentDescriptor 对象树是允许逐渐“展开”的。如果描述符树中关于文档的所有描述符都在启动时创建，则启动时间就会延长。</p>
     
      <p><codeph>properties</codeph> 属性返回一个缓存 Object，此对象由该工厂函数生成。</p>
      
      <p>注意：事件处理程序（如 <codeph>click="doSomething();"</codeph>）位于 <codeph>events</codeph> Object 中，而不位于 <codeph>properties</codeph> Object 中。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/properties"><linktext>属性</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:type"><apiName>type</apiName><shortdesc>
      MXML 中指定的组件的 Class。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      MXML 中指定的组件的 Class。
     
      <p>例如，如果编写</p>
     
      <pre>
      &lt;mx:TextInput/>
      </pre>
     
      <p>则描述符的 <codeph>type</codeph> 属性即为类 mx.controls.TextInput。</p>
     
      <p>对于由 MXML 编译器创建的 ComponentDescriptor 对象而言，此属性始终非 <codeph>null</codeph>，因为每个 MXML 标签都有一个标签名，如 mx:TextInput。</p>
     
      <p>MXML 标签与其对应类之间的映射由 XML 命名空间和与此命名空间关联的“清单”文件（如果存在）确定。例如，由 mx: 前缀表示的标准 Flex 命名空间 <codeph>http://www.adobe.com/2006/mxml</codeph> 与清单文件 mxml-manifest.xml 关联（在 flex-config.xml 文件中），此文件具有以下标签</p>
     
      <pre>
      &lt;component id="TextInput" class="mx.controls.TextInput"/>
      </pre>
     
      <p>可将标签名 mx:TextInput 映射到 Class mx.controls.TextInput。请注意，使用清单文件允许将一个 XML 命名空间中的组件映射到多个 ActionScript 包中的类。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:properties:get"><apiName>properties</apiName><shortdesc>
      MXML 中指定的包含组件属性的名称/值对的 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool description="" name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      MXML 中指定的包含组件属性的名称/值对的 Object。
     
      <p>例如，如果编写</p>
     
      <pre>
      &lt;mx:TextInput width="150" text="Hello"/>
      </pre>
     
      <p>则描述符的 <codeph>properties</codeph> 属性即为以下 Object</p>
     
      <pre>
      { width: 150, text: "Hello" }
      </pre>
     
      <p>如果没有为组件指定 MXML 属性，则 <codeph>properties</codeph> 属性为 <codeph>null</codeph>。在此情形下，组件将使用默认属性值。</p>
     
      <p> 此 Object 通过调用由 <codeph>propertiesFactory</codeph> 属性指定的函数生成，然后缓存以供后续访问。然而，当 Repeater 使用同一描述符生成多个组件实例时，应为每个组件实例生成 <codeph>properties</codeph> Object 的一个全新副本，使它们不用共享作为 Array 或 Object 引用的属性值。Repeater 通过在描述符上调用 <codeph>invalidateProperties()</codeph> 方法来完成此操作。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/propertiesFactory"><linktext>propertiesFactory</linktext></link><link href="mx.core.xml#ComponentDescriptor/invalidateProperties()"><linktext>invalidateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>